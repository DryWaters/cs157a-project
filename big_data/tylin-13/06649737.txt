Integrating RESTful Service into BPEL Business Process  on Service Generation System 
Abstract 
Budan Wu  Rongheng Lin, Junliang Chen State Key Laboratory of Networking and Switching Technology Beijing University of Posts and Telecommunications Beijing, 100876, China  Corresponding author: wubudan@bupt.edu.cn 
New value-added business generated by Web service composition in BPEL, provides more powerful and flexible features. SOAP-based web services invoked in BPEL are heavy with redundant information and lower performance RESTful Web service is brought forward to new value-added business as an alternative solution. However, it 
 
Keywords-Business Process RESTful Web services SOAP Web service; Service Integration 
 
s a big challenge to compose RESTful Web services with SOAP-based Web Services in SOA BPEL business processes. BPEL is not designed to use RESTful Web services because these types of services do not use WSDL to describe themselves. This paper proposes a novel approach for integrating RESTful Web services and SOAP-based Web services in business processes described in BPEL. The approach is applied to a practical multimedia conference BPEL process, and the experimental data show the stability of the new RESTful BPEL process with a higher performance  
I I NTRODUCTION Service composition composes fine-grained services into 
coarse-grained services which have a practical meaning on business. Composing multiple web services is more beneficial to users than a single service [1   BPEL  B u s in ess P r oc ess  Execution Language\s the most popular language for composing web services to provide enterprise business. It orchestrates standard SOAP web services to achieve the business goal. Traditional SOAP-based Web services are designed with a common XML-based protocol, which is heavier than before as a series of WS-* protocol are defined  This results to a mature SOAP web service technology with redundant information and a lower performance REST Representational State Transfer has gained 
widespread acceptance across the Web as a simpler alternative to SOAP Web Services Since it is simple to publish and use a RESTful Web service, more and more Web 2.0 service providers 
including Yahoo and Google shift their interface design from SOAP and WSDL-based interfaces to a simpler resource-oriented REST style REST \(Representational State Transfer\ an architectural style that treats the Web as a resource-centric application RESTful Web services are currently perceived as a lightweight mean to enable point-to-point integration between service providers and a large number of clients [2 It  is w i desp re ad used for its simplicity and usability. Most Web 2.0 websites 
 
provide their own web services that are realized in REST fashion for its usability and simplicity. Programmable Web shows that a whopping 73 percent of APIs registered on their site are REST-based while only 16 percent offer SOAP. More and more research work compare SOAP-based web services with RESTful Web services. Fatna Belqasmi et.al reviews the state of the art of RESTful-based service provisioning in next generation networks. It also pr ovides an evaluation of the overall suitability of RESTful web services for service provisioning in next generation networks and discusses research directions [12  C P a u tass o et al  1 3  ob jec tif y  th e  WS-* vs. REST debate by giving a quantitative technical 
comparison based on architectural principles and decisions They show that the two approaches differ in the number of architectural decisions that must be made and in the number of available alternatives. As the rapid development of RESTful Web services, SOA is evolving to embrace new ways of working A big challenge for using RESTful Web services in SOA business is how to compose RESTful Web services with SOAP-based Web Services in SOA business processes, that is how to orchestrate web services which are mixture of both SOAP based and RESTful services to achieve one common goal. BPEL \(Business Process Execution Language\ [3  a  popular technology of Web services orchestration based on 
process, has its own limitation that it is not designed to use RESTful Web services because these types of services do not use WSDL \(Web Service Definition Language\to describe themselves. There is still no stan dard specification to define business process for both RESTful Web services and SOAP-based Web services On the basis of previous work [14  w e pr o pos e a n e w  approach for integrating RESTful Web services and SOAP-based Web services in business processes described in BPEL. The approach uses apache extensions to wrap a WSDL document for a RESTful Web service in order to allow BPEL to invoke RESTful Web services as same as SOAP-based Web services. At the same time, RESTful Web services are invoked 
by sending HTTP requests instead of SOAP message. The innovative advantages of the proposed RESTful Web service integration approach are 
RESTful Web service can be invoked in standard BPEL business processes without any modification of BPEL elements RESTful Web services are still invoked by HTTP requests, in that way the simplicity and efficiency of using RESTful Web services are preserved in BPEL business processes 
002 002 
2013 IEEE 10th International Conference on Services Computing 978-0-7695-5026-8/13 $26.00 © 2013 IEEE DOI 10.1109/SCC.2013.70 527 


002 002 002 
With these advantages, the proposed approach can be simply used in current standard BPEL execution environment without any modification of BPEL specification. It has a high usability and operability This paper is organized as follows. First in Sections 2 we give related work on RESTful Web services and their invocation in business process. In section 3 we introduce a novel approach for integrating RESTful web services in BPEL processes. In section 4 we illustrate the service generation system developed by us that supports the proposed approach We then apply the approach to practical multimedia conference BPEL processes on our service generation system in section 5 and compare our approach with traditional approaches on performance through a series of tests, and present and analyze the experimental result. In Section 6 we draw our experiences and conclude the paper  II R ELATED W ORK The Web Services Business Process Execution Language BPEL\ is the de facto standard for service-based business processes. It is accepted and widely used in industry. However WS-BPEL process model is layered on top of the service model defined by WSDL 1.1 [7 In o t h e r w o rds  t h e WS-BPEL and the WSDL languages are tightly coupled [4  Although SOAP-based Web services have a WSDL document resources published by a RESTful Web service are exposed using a fine-grained addressing mechanism: the Uniform Resource Identifier [2 T h e p u b lic ati on of W SDL 2 0   w h i c h was designed with RESTful Web services in mind, as a World Wide Web Consortium \(W3C\recommendation means there is now a language to describe RESTful Web services [5  B u t in fact WSDL2.0 is not widely supported at present this situation enforces us to look for other approaches  Since traditional service composition language has so many problems to be solved in composing RESTful Web services many research works turn to finding a new way to implement the composition of RESTful Web services and SOAP-based Web services. A new language, namely JOpera visual composition language, is proposed to build a composite application \(DoodleMap\ out of some well-known, public and currently existing RESTful service APIs in [2 T h e l a ng u a ge  has a set of language features that are required for RESTful services: dynamic late binding, dynamic typing, content-type negotiation, state inspection, and compliance with the uniform interface principle  And in industry, WSO2 Mashup Server s Web services including RESTful and SOAP-based Web services as the mechanism for acquiring data, XML \(Extensible Markup Language\ central abstraction, JavaScript \(with E4X XML extensions\or manipulating that data, and again Web services as the primary way to republish the new information stream. These languages indeed give us more choices, but the disadvantages are also obvious Exactly, they are not business process language and could not implement complicated logical control to describe the process They do not make for a natural programming model when it comes to RESTful Web Services No standard service composition description specification is proposed, which brings a confused condition in real application. As a result, they are not widely used in industry BPEL can be the standard way to connect and manage SOAP-based Web services and RESTful Web service, and it is easier for enterprise to accept because of it is the defacto standard However, there are se veral challenges in invoking RESTful Web services by BPEL for the difference with traditional SOAP-based Web services, such as no service description document. Different approaches were proposed to solve these problems In [4  J O pe ra r esea rch e rs p r o p o se a lig h t w eigh t BP EL  extension to natively support the composition of RESTful Web services using business processes and discusses how to expose the execution state of a business process so that it can be manipulated through REST primitives in a controlled way. It will become much easier to invoke RESTful Web services by using new service invocation activities in the modified BPEL specification Theoretically it is feasible and efficient However, there are no obvious signs showing that it will be put into practice recently A framework named REST2SOAP is presented to integrate SOAP services and RESTful services in [6 E S T 2SO A P leverages WADL specification, and can wrap RESTful services into SOAP services semi-automatically. Using REST2SOAP developers can create a BPEL service that combines SOAP RESTful services and user interfaces simultaneously. It solves the problems and challenges brought by RESTful Web services in service composition. On the other hand, the advantages of RESTful Web services, such as efficiency and ease of use, are also abandoned. For developers who prefer to use RESTful Web services, that is not a good solution In [16 th e auth or p r es ents a hy bri d  o r ches tr ati on a p p r o a ch  that makes use of the heterogeneous nature of the services \(e.g SOAP services and RESTful services for efficient orchestration. The proposed system contains both a BPEL engine and a REST orchestration engine. A big workflow is divided into several sub-workflows according to services they invoke. SOAP-based orchestration is conducted in the BPEL engine, and REST services are orchestrated in the REST orchestration engine. The whole business proces s is assembled by the invocations. It is complex to preserve two orchestration engines in order to execute one workflow, and the division of the big workflow is also time-consuming III R ESTFUL W EB S ERVICES FOR B PEL Web Services Business Process Execution Language Version 2.0 \(WS-BPEL 2.0 for short\ is defined on the basis of WSDL 1.1 specification. It acquires necessary information about services, such as input output, and address, from WSDL document, which is pr ovided by each service. A weakness of RESTful Web services is that no standard service description document is provided. Although WSDL 2.0 and WADL \(Web Application Description Language\ould be used to describe 
528 


A GET & POST 
that fully match the semantics of a GET, POST, PUT, or DELETE request performed on a resource URI includes a binding for HTTPs GET and POST            
   
RESTful Web services, they are not popular and are not supported in WS-BPEL 2.0. This is the biggest challenge we have to overcome WS-BPEL 2.0 is widely used in enterprise, so modifying it to fit for RESTful Web services is unfeasible Since BPEL requires each invoked service have a WSDL document, one solution is that we let each RESTful Web service provide a description document in WSDL 1.1 specification. The key problem is how to use WSDL to describe services information Uniform Resource Identifier\. Based on previous researches and tests we try to generate a WSDL 1.1 document for RESTful Web services in order to make the Restful Web service invocation in BPEL possible In WSDL 2.0 specification, RESTful Web services are supported with the help of definition of four basic HTTP Hypertext Transfer Protocol methods. The foundation of WS-BPEL 2.0 is WSDL 1.1. However, descriptions for HTTP GET and POST are also available in WSDL 1.1 specification WSDL 1.1 verbs in order to describe the interaction between a Web Browser and a web site. This allows applications other than Web Browser to interact with the site [8 s f o r th e o t h e r t w o  verbs, PUT and DELETE, they are not involved and have to be specially considered. Apache ODE Project [8  h as implemented the extension of WSDL 1.1 to support RESTful Web services and it can be used to describe HTTP PUT and DELETE verbs. By using the extension, a WSDL 1.1 document for RESTful Web services could be constructed  Although RESTful Web services could have WSDL documents as same as SOAP-based Web services, their invocation methods in execution are different. For traditional SOAP-based Web services, execution engine would send SOAP message which is used over any transport protocol such as HTTP, SMTP and so on. However, for RESTful Web services, it directly uses HTTP protocol for communication Namely, they work on different level RESTful Web Services defined four basic operations, GET POST, PUT and DELETE, on resources To generate a WSDL document, each verb is needed to be described even though the service address is the same. In another word, a RESTful Web service including four verbs is wrapped into four basic service elements described in a WSDL document as one Web service Since the four verbs are not all supported in WSDL 1.1 specification, they are divided into two groups for different handling Currently only GET and POST verbs are supported in web page forms. For GET and POST verbs of RESTful Web services, it can be described by WSDL 1.1 specification [8  The following protocol specific information may be specified An indication that a binding uses HTTP GET or POST An address for the port A relative address for each operation \(relative to the base address defined in the port Following the specification, a WSDL document for GET or POST verb of RESTful Web services that indicates the input output and address and other necessary information could be constructed. Figure 1. shows the finished WSDL document for SMS service which uses POST verb Figure 1 WSDL for POST Verb Compares with WSDL for SOAP Web services GET/POST is specified in WSDL for Restful Web services by the following specific elements in bold binding  a concrete protocol and data format specification for a particular port type   operation the particular PortType s specific agreements and data type specifications   input  input output  output  operation  binding service  a collection of related endpoints port  a single endpoint defined as a combination of a binding and a network address http:address location uri  port  service Take the SMS RESTful service in multimedia conference application as an example  It uses POST verb, <http:binding verb POST  The attribute specifies a relative URI for the operation. This URI is combined with the URI specified in the http:address element to form the full URI for the HTTP request. The URI value must be a relative URI 
http:binding verb GET\(or POST http:operation location uri mime elements mime elements       location 
002 002 002 002 002 
002 002 003 002 003 
529 


mime:content 
To avoid having to define a new element for every MIME format, the element may be used if there is no additional information to convey about the format other than its MIME type string. More information about MIME Binding is described in [7  PUT and DELETE verbs is not considered in WSDL 1.1 So extensions are needed. Apache ODE which executes business processes written following the WS-BPEL standard brings four extensions to better describe RESTful Web services one HTTP method per operation \(instead of one per binding a unique URI Template for all operations access to HTTP headers and fault support. It supports GET, POST, PUT and DELETE description in WSDL 1.1 Extension for REST in the Apache ODE 1.2 and later versions So we could use the extensions to describe all verbs. But another problem is that how to identify these extensions that are not defined in the standard WSDL 1.1 specification, the execution environment needs to understand what they stand for. Apache ODE 1.2 and later versions supports BPEL execution invocation of Restful Web services specified in WSDL 1.1 Extension for REST But for RESTful Web services that only uses GET and POST, the extensions are not recommended for its limitation of execution environment, because only in certain versions of Apache ODE these extensions could be analyzed and understood, other BPEL execution environment versions do not support the extensions. So for RESTful web services that only uses GET and POST, we recommend to foll ow the method in the above section A, in that way, they can be invoked in any standard BPEL execution environment Apache ODE has declared all extensions in its own namespace. Detailed specifications of description can be found at the site [9  F ig u re 2 sh ow s a W SDL  d o cum ent f o r DEL E T E  verb. Obviously, the odex namespace is necessary, so the odex:binding  verb DELETE can be valid. Similarity PUT verb can also be described in the RESTful WSDL Figure 2 WSDL for DELETE Verb After four basic operations are clearly described, another key point data which are mainly input and output information should be considered. RESTful Web services provide a variety of data format, such as xml, json and so on. The format is decided by developers and can be declared in the document However, the BPEL execution environment which interacts with RESTful Web services in business process execution has to support and resolve the data format At present, BPEL only supports WSDL1.1, in WSDL1.1 JSON can be invalid Users had better transfer JSON data format to XML or String format After a WSDL document is wrapped, RESTful Web services could be invoked in BPEL process just as SOAP-based Web services. Figure 3. illustrates how to invoke RESTful Web services in BPEL 000%\0003\000\(\000 000:\0006\000'\000 000U\000H\000F\000L\000H\000Y\000H 000L\000Q\000Y\000R\000N\000H 000U\000H\000S\000O\000  0002\000S\000H\000U\000D\000W\000L\000R\000Q\000V 000R\000S\000B\000\024 000R\000S\000B\000\025 000R\000S\000B\000\026 000R\000S\000B\000\027 000+\0007\0007\0003\000\003\000%\000L\000Q\000G\000L\000Q\000J 000R\000S\000B\000\024\000\003\000*\000\(\0007 000R\000S\000B\000\025\000\003\0003\0002\0006\0007 000R\000S\000B\000\026\000\003\0003\0008\0007 000R\000S\000B\000\027\000\003\000'\000\(\000/\000\(\0007\000     0003\0002\0006\0007 0003\0008\0007 0005 000*\000\(\0007 000'\000\(\000/\000\(\0007\000 0006\0002\000$\0003 000+\0007\0007\0003 Figure 3 RESTful Web Services for BPEL similar to invoke the RESTful Web Services with wrapped WSDL as invoking the Web Services with ordinary WSDL. A RESTful Web service has to be wrapped through a WSDL interface in order to invoke them from a BPEL process. The specific RESTful Web Services invoking procedure is as follows. First, create a BPEL project and a process in it. Then create a partner link to indicate the interaction between the BPEL process and the RESTful Web services. After that, choose the corresponding operation in the selection area. The input and output variables would also need you to set. In a word, use the invoke action in the BPEL process to invoke other Web services, and set all the options it need, such as partner link, partner link type, role name and so on IV S ERVICE G ENERATION S YSTEM The proposed approach enables the integration of RESTful Web services and SOAP-based Web services in BPEL. It can be implemented on Service Gener ation System \(SGS for short developed by us which is designed to support service composition, service management and service execution. In the following parts of this section, we will discuss the key point for implementing RESTful Web services invoking by BPEL on SGS SGS is a novel system for description, composition and management of various services By compositing services that stored in the system or created new, developers could develop new services quickly and efficiently to fulfill user requests. Then services are allowed to deploy in the system and finally services could receive requests and complete their tasks. Based on function, SGS is divided into three parts 
    In general, its types 
B PUT & DELETE C Data 
002 
530 


users users users 
A Service Development Platform \(SDP B Service Management Platform \(SMP C Service Execution Environment \(SEE D Extensions 
002 002 002 
Service Development Platform in client side, Service Management Platform and Service Execution Environment in server side, which is shown in Figure 4   0006\000H\000U\000Y\000H\000U 0006\000H\000U\000Y\000L\000F\000H\000\003\0000\000D\000Q\000D\000J\000H\000P\000H\000Q\000W 0003\000O\000D\000W\000I\000R\000U\000P 0006\000H\000U\000Y\000L\000F\000H\000\003 0000\000D\000Q\000D\000J\000H\000P\000H\000Q\000W 0008\000V\000H\000U\000$\000F\000F\000R\000X\000Q\000W 0000\000D\000Q\000D\000J\000H\000P\000H\000Q\000W 0002\000W\000K\000H\000U\000V 000&\000R\000R\000S\000H\000U\000D\000W\000L\000R\000Q\000\003 000F\000R\000Q\000W\000U\000R\000O 0006\000H\000U\000Y\000L\000F\000H\000\003\000'\000H\000Y\000H\000O\000R\000S\000P\000H\000Q\000W\000\003 0003\000O\000D\000W\000I\000R\000U\000P 000%\000S\000H\000O\000\003 000\(\000G\000L\000W\000R\000U 000M\0003\000'\000/\000\003 000\(\000G\000L\000W\000R\000U 000:\000R\000U\000N\000V\000S\000D\000F\000H 0006\000H\000U\000Y\000L\000F\000H\000\003\000\(\000[\000H\000F\000X\000W\000L\000R\000Q\000\003 000\(\000Q\000Y\000L\000U\000R\000Q\000P\000H\000Q\000W 0005\000H\000W\000U\000L\000H\000Y\000H 0006\000D\000Y\000H 0008\000S\000G\000D\000W\000H 000/\000R\000J\000L\000Q 000'\000H\000S\000O\000R\000 0002\000W\000K\000H\000U\000V Figure 4 Service Generation System SDP is designed as a rich client for its complex functions Its main purpose is to provide a visual toolkit for developers to composite services in an efficient way. As WS-BPEL has been the most popular standard in practice, SDP involves a BPEL editor based on BPEL Designer Project [10  w h ich all o w s  developers to build processes thorough drag and drop existed services of different granularity. Therefore WS-BPEL mainly supports machine-to-machine communication without involving human tasks. Because of the limitation of BPEL SDP also provides a jPDL editor which uses another workflow language to allow developers to have more solutions  Another important task of SDP is to communicate with server. It can retrieve existed services based on requests from Service Management Platform and upload new services created by users. With the growing of services library, the chance of services discovery is much bigger. On the other hand the reusability of services is also improved. SDP can send commands to Service Execution Environment to deploy the created services and run them. Except that, SDP still needs to provide basic user login interface SMP is a common service management platform for multi user sharing in collaboration environment. Semantic annotation and classification based on ontology are used in the platform to provide an interface of service storage, service discovery and service recommendation for developers. It mainly communicates with Service Development Platform and provides services through it. In general, SMP implements three functions as follows Service management: to manage various types of services efficiently based on specific policy, such as classification based on ontology. A good expansibility is necessary to support dynamic extension of service types User account management: to distribute permissions of manipulating resources to all users based on different roles. Through the permission control, the security and stability of system is improved Cooperation control: to coordinate different action and solve conflictions during the developing process. Multi user development is well supported by the dynamic control of services SMP is designed on server which results to a large service library among all users. At the same time, a web interface for administrators and web services for SDP are both provided The detailed policy is discussed in [11    SEE is the runtime environment for services which could execute processes correctly. It is designed as a container on server side. As the foundation of system, it needs a high reliability and stability to guarantee quality of services. SEE retrieve all necessary documents from Service Development Platform and deploy them into execution engine according to commands. SEE is asked to support the explanation and execution of different language specification for the diversity of development on Service Development Platform SDP, SMP and SEE are three mainly part of Service Generation System and they work together to provide a complete solution to developers from developing to executing Everyone will not only be a service customer but also a service provider in system. And finally this would result to a high improvement on service development RESTful Web services would be registered into SMP composed with SOAP-based Web services in SDP and finally invoked in SEE. Different with SOAP-based services, RESTful Web services need an additional step to wrap a WSDL document for it. As a result, SDP is extended to provide a wizard to wrap WSDL documents semi-automatically for RESTful Web services. In this section, SDP is introduced with providing two types editors, namely BPEL editor and jPDL editor. However, the approach is only related with BPEL editor Actually these extensions are imp lemented on the BPEL editor RESTful Web services do not have a standard description specification that results to impossibility of generating WSDL documents automatically. Human interaction with the platform cannot be avoided. Users still need to tell the platform some basic information about services, including input, output and location and so on through a user-friendly wizard Then the platform could complete the remaining work and generate WSDL documents following the specification. And after that RESTful Web services could be invoked as same as SOAP-based Web services in the platform. Figure 5. shows the extended BPEL editor in Service Development Platform 
531 


Figure 5 Extended BPEL Editor in Service Development Platform  This wizard for creating WSDL document for RESTful Web services is based on WSDL4, which can be used to create and analyze WSDL. The most important methods are 
002 002 002 002 002 002 002 002 002 
Create a WSDL document WSDLFactory wsdlFactory WSDLFactory.newInstance Create the definition element Definition definition = wsdlFactory.newDefinition Set the target namespace definition.setQName\(new QName\(tns,tns Add necessary namespace   Create WSDL element Part part1 It s the same as creating Message Port PortType Input Output Binding Operation and Service elements Add element message1.addPart\(part1\ the same as others Set the input, output and operation type  operation.setInput\(input operation.setStyle\(OperationT ype.REQUEST_RESPONSE OperationType.REQUEST_RESPONSE is corresponding to the four message switching methods Set HTTP verb Indicates the interface service address   HTTPAddress httpAddress = ne w HTTPAddressImpl    httpAddress.setLocationURI http://example.org/helloService port.addExtensibilityElement \(httpAddress Figure 6. and Figure 7. show the wizard s two pages. The wizard collects users information about their services to finally generate the WSDL description file for RESTful web services If the input and output elements are very complex, users can modify them in the design view of the WSDL file or edit the file directly  Figure 6 The Wiard Interface 1 Figure 7 The Wiard Interface 2 V C ASE S TUDY In this section, a real multimedia conference business is presented as a scenario to explain our motivation and verify the availability and performance of the proposed approach by testing the conference processes that integrat both SOAP web services and RESTful web services. Multimedia conference system allows people dispersed in geography to communicate with each other through voice, graph and other ways as same as a real conference. In the process of multimedia conference, the first step is that conference organizer creates a conference Then all participants should be invited. And before the conference will soon begin, a notification would be sent to each participant to notice them to enter the meeting room online Finally, the conference begins and another process would be triggered to manage the conference. Figure 8. shows the sample process 
definition.setTargetNamespace\(tns definition.addNames pace\(tns,tns definition.createPart\(partName  httpBinding.setVerb\(POST     
532 


000&\000R\000Q\000I\000H\000U\000H\000Q\000F\000H\000\003 000&\000U\000H\000D\000W\000L\000R\000Q 0008\000V\000H\000U 000,\000Q\000Y\000L\000W\000D\000W\000L\000R\000Q 0001\000R\000W\000L\000I\000L\000F\000D\000W\000L\000R\000Q  000&\000R\000Q\000I\000H\000U\000H\000Q\000F\000H 000\(\000Q\000W\000H\000U\000L\000Q\000J 0002\000Q\000O\000L\000Q\000H 0007\000L\000P\000H\000\003 0007\000U\000L\000J\000J\000H\000U 0009\000R\000L\000F\000H 0001\000R\000W\000L\000I\000L\000F\000D\000W\000L\000R 000Q 0006\0000\0006 0001\000R\000W\000L\000I\000L\000F\000D\000W\000L\000R 000Q 0008\000V\000H\000U 0009\000H\000U\000L\000I\000L\000F\000D\000W\000L\000R 000Q 000<\000H\000V 0001\000R 
A Functionality B Performance 
The notification sub-process of multimedia conference system mentioned above composes RESTful Web services with SOAP Web services using the proposed approach. The notification sub-process in BPEL consists of four web services The process is deployed in Ser viceMix [11  an ent e rp ri se  service bus, with Apache ODE as the process execution engine SoapUI which is the world leading Open Source Functional Testing Tool for Web Service Testing is used to simulate client to send SOAP message to start the process. Tomcat 6.0 is selected as the web container of web services. Through analyzing the runtime log information and the response message of process, we can verify that RESTful Web services are actually invoked and executed in the process In another word, the proposed approach really works Since the approach makes it possible to invoke RESTful Web services in BPEL processes, we could compare processes that use RESTful Web services with the ones that use SOAP-based Web services only to find out the efficiency of the approach Firstly, several different processes need to be created. These processes should complete same task with same control logic and same functional services except that the services are REST style or SOAP style. In our experiments, five processes are provided and each of them has different number of RESTful Web services. Process 1 only uses SOAP-based Web services while process 2 replaces one SOAP-based Web service in process 1 with a RESTful Web service that has the same function. Process 3 replaces two SOAP-based services in process 2 with two RESTful We b services, each replacement pair has the same function, and the rest can be deduced by analogy. Through using different number of RESTful Web services in one BPEL process, we could conclude the improvement of performance it brings After the five processes are deployed in the same Service Execution Environment \(SEE\ with ServiceMix and ODE soapUI is used to simulate multi users. In our experiment, the response time of each process wh en concurrently visited by 10 users, 50 users and 100 users are all recorded. Figure 9. shows the statistics data. The horizontal axis represents process 1 to process 5, and the vertical axis represents response time. Three lines with different color represent different amount of concurrent users Figure 9 Response Time of Visiting Processes Integrating Different Number of RESTful serivces With the increasing of concurrent users, response time is also increased because of the limitation of resources. But there is a common point among three lines. Generally, the more RESTful Web services used in one process, the less the response time. The main reason is that traditional SOAP-based Web services are designed to se nd SOAP message which is an XML-based message based on transfer protocol, such as HTTP while RESTful Web services are visited by directly HTTP requests. SOAP message parsing is time-consuming. For RESTful Web services, less transport information results to a higher performance. So RESTful Web services are recommended to be used in BPEL processes if exist VI C ONCLUSION In this paper, a new approach for BPEL to compose RESTful Web services with SOAP-based Web services is proposed. The approach wrap a WSDL document for RESTful 
Figure 8 Business Process for Multimedia Conference In the notification sub-process, the system uses different ways to notice users based on whether they are online or not. If yes, a voice service provided in SOAP style would be invoked and if no, a SMS service provided by China Telecom in REST style would be invoked. This scenario obviously illustrated that the integration of RESTful Web services and SOAP-based Web services is necessary in a real business process. And developers use the Service Generation System \(SGS\ which is a rich development platform introduced in section IV to assist their work In general, RESTful Web services are wrapped to provide WSDL documents and then they could be used to compose business processes in Service Development Platform \(SDP Finally, BPEL processes will be deployed and published to customers in Service Execution Environment \(SEE  
0 200 400 600 800 1000 1200 12345 10 users 50 users 100 users 
Time \(ms 
533 


Composition, IEEE Trans. Knowledge and Data Engineering Vol. 17, No. 5, 2005, pp 686-697 2 C o mpo si n g  REST fu l se rv ice s w i t h J O p e ra Ce sare Pa u t a sso  i n So ftw a re  Composition Lecture Notes in Computer Science Volume 5634, 2009 pp 142-159 3 O A S I S   W e b S e rv ice s Bus i ne s s P r o c e s s E x e c utio n L a ng uag e  W S B P E L   2.0. \(2006 https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wsbp el 4 C e sare Pau t asso REST fu l W e b ser v i ce co mpo s it io n w i t h BPEL fo r  REST Data & Knowledge Engineering Vol. 68, Issue 9, September 2009, pp. 851 866 5 D e scrib e R EST W e b se rv ice s w ith W S D L 2  0  L a w r e n ce M a n d e l  http://www.ibm.com/developerworks/webservices/library/ws-restwsdl 29 May 2008 6 Y uY e n P e ng S h angP i n Ma J o nat h a n L e e  RE S T 2S O A P   A  framework to integrate SOAP services and RESTful services, in Proceedings of IEEE International Conference on Service-Oriented Computing and Applications, SOCA 2009  pp. 1-4 7 W e b Se rv ice s D e scrip tio n L a n g u a g e  W SD L  1  1  W 3 C N o te  1 5  M a rc h  2001 Erik Christensen, Microsoft Francisco Curbera, IBM ResearchGreg Meredith, MicrosoftSanjiva Weerawarana, IBM Research 8 h tt p  od e ap ac h e  o r g  w s d l 1 1 ext e n s ion s f o r r es t  h t m l   9 h tt p  www  e c l i p s e  o rg b p e l  10 L i l i F a ng Bu da n W u J u nl ia ng C h e n S e r v ice Manag e m e nt Mo de l Bas e d  on Ontology Computer and Information Science \(ICIS\, 2012 IEEE/ACIS 11th International Conference on June 2012, pp. 438- 443  h t t p  s e rvi c em i x  a p a ch e org 12 F Be l q asmi C. F u  R. G l ith o  RESTful Web Services for Service Provisioning in Next Generation Networks: A Survey, IEEE Communications Magazine, December 2011, Vol. 49, No12, pp. 66-73 13 C. Pa u t asso O  Z i mme r man n  a n d F   L e y man n   REST fu l W e b S e rv ice s  Web Services: Making the Right Architectural Decision, in Proceedings of 17th International World Wide Web Conf., Beijing China, Apr. 2008  pp. 805 14 14 Bu da n W u J unl i a ng C h e n  A S e m a n t ic E x te n d e d  M u l ti L a y e r Mo de l f o r  BPEL Process Generation, Proceedings of IEEE 9th International Conference on Services Computing, 2012, Hawaii, U.S., pp. 696-698 15 W S O 2 M a s h u p Se rv e r  h t t p    w so 2 co m/p r o d u c t s mas h u p se rv e r    Kej i n g He I n t e gra t i o n and Orch es tra t i on of Het e rogen e ou s Servi c es   Joint Conferences on Pervasive Computing JCPC, 2009, Taipei, pp 467-470 
 
 
Web services in order to allow BPEL to invoke RESTful Web services as same as SOAP-based Web services. RESTful services are invoked by sending HTTP requests instead of SOAP message. The WSDL wrapping of RESTful service is offered by our service generation system \(SGS\, as well as the orchestration of the SOAP services and RESTful services. The generated BPEL code can be executed in any environment that supports standard BPEL  Different with JOpera work [2 an d  W SO 2 M ash u p  To o l  15 in in du st ry th e p r op os ed app r o a ch u s es s tan da rd bu sin e ss process language to compose SOAP and RESTful service, and the business process language is standard without any extension or modification. Only RESTful service verbs are wrapped as a WSDL description to enable the integration with SOAP Web services in BPEL. This makes the approach easy for developers to accept. The GET and POST verb wrapping of a RESTful service in standard WSDL 1.1 specification enables the simple and efficient RESTful service invocation by HTTP requests As we know, a large proportion of the RESTful services only use GET and POST verbs. For PUT and DELETE verbs, we follow ODE WSDL 1.1 extension to specify and invoke the RESTful service. This is an improved approach different from ODE WSDL extension which uses WSDL 1.1 extension to specify all the four verbs of a RESTful service. We do not have to rely on certain versions of ODE for the RESTful service invocation, for RESTful services with GET and POST verbs only, we integrate it with SOAP services in BPEL in a standard way which can be executed in standard BPEL execution environment The greatest advantage of the proposed approach is that for a large proportion of RESTful services with only GET and POST verbs, it can be simply used in current BPEL execution environment without any modification of BPEL specification The real multimedia conference business process study verifies the high usability and operability of the proposed approach The overhead of the approach is the translation from SOAP message to HTTP message for invoking a RESTful service and the wrapping of the RESTful service response HTTP message to SOAP message for replying the BPEL invocation  In the future, more RESTful services should be invoked in real application s BPEL process to test and enhance the stability of the execution of th e BPEL process that integrate both SOAP services and RESTful services. From the testing experiences, we will conclude the proper kinds of services that are suitable for description in RESTful style and integration with SOAP services in BPEL  A CKNOWLEDGMENT This work is supported by the National Natural Science Foundation of China \(Grant No. 61003067\ National 973 Programs \(Grant No. 2013CB329102, 2011CB302704\ and Key Project of National Natural Science Foundation of China Grant No. 61132001  R EFERENCES 1 Z Ma amar S  Mo ste f ao u i  a n d H   Y ahy ao ui T o w ar d an A g e n t Base d  and Context-Oriented Approach for Web Services 
 vs. Big  
534 


Jorda Polo, David Carrera, Yolanda Becerra, Malgorzata Steinder  and Ian Whalley. Performance-driven task co-scheduling for  mapreduce environments. In Network Operations and Management  Symposium \(NOMS\2010 IEEE, pages 373 380, 19-23 2010 12 K. Kc and K. Anyanwu, Scheduling hadoop jobs to meet deadlines  in 2nd IEEE International Conference on Cloud Computing  Technology and Science \(CloudCom\, 2010, pp. 388 392 13 Xicheng Dong, Ying Wang, Huaming Liao Scheduling Mixed Real time and Non-real-time Applications in MapReduce Environment  In the proceeding of 17th International Conference on Parallel and  Distributed Systems. 2011, pp. 9  16 14 Xuan Lin, Ying Lu, J. Deogun, and S. Goddard. Real-time divisible  load scheduling for cluster computing. In Real Time and Embedded  Technology and Applications Symposium, 2007. RTAS 07. 13th  IEEE pages 303 314, 3-6 2007 15 HDFS  http://hadoop.apache.org/common/docs/current/hdfsdesign.html  16 Chen He, Ying Lu, David Swanson. Matchmaking : A New  MapReduce Scheduling Technique. In the proceeding of 2011  CloudCom, Athens, Greece, 2011, pp. 40  47 17 Matei Zaharia, Dhruba Borthakur, Joydeep Sen Sarma and Khaled  Elmeleegy, Scott Shenker, and Ion Stoica, Delay scheduling: a  simple technique for achieving locality and fairness in cluster  scheduling. In the proceedings of the 5th European conference on  Computer systems, 2010.  pp 265-278 18 Zhuo Tang, Junqing Zhou, Kenli Li, and Ruixuan Li "A MapReduce  task scheduling algorithm for deadline constraints.", Cluster  Computing, Vol. 15,  2012 19 Eunji Hwang, and Kyong Hoon Kim. "Minimizing Cost of Virtual  Machines for Deadline-Constrained MapReduce Applications in the  Cloud." Grid Computing \(GRID\, 2012 ACM/IEEE 13th  International Conference on. IEEE, 2012 20 Micheal Mattess, Rodrigo N. Calheiros, and Rajkumar Buyya  Scaling MapReduce Applications across Hybrid Clouds to Meet Soft  Deadlines." Technical Report CLOUDS-TR-2012-5, Cloud  Computing and Distributed Systems Laboratory, the University of  Melbourne, August 15, 2012 21 
 
11 
                
Chen He, Ying Lu, David Swanson. Real-Time Application Scheduling in Heterogeneous MapReduce Environments Technical Report TR-UNL-CSE2012-0004, University  of Nebraska-Lincoln, 2012 Available: http://cse apps.unl.edu/facdb/publications/TR-UNL-CSE20120004.pdf 22 T. Condie, N. Conway, P. Alvaro, J. M. Hellerstein, K  Elmleegy, and R. Sears. Mapreduce Online. In NSDI 2010 23 A. D. Ferguson, P. Bodík, S. Kandula, E. Boutin, and R  Fonseca. Jockey: Guaranteed Job Latency in Data Parallel Clusters. In EuroSys, 2012 24 G. Wang, A. R. Butt, P. Pandey, and K. Gupta. A Simulation Approach to Evaluating Design Decisions in MapReduce Setups. In MASCOTS 2009 25 H. Herodotou and S. Babu. Profiling, What-if Analysis and Cost-based Optimization of MapReduce Programs In VLDB 2011 26 H. Herodotou, F. Dong, and S. Babu. No One \(Cluster Size Fits All: Automatic Cluster Sizing for Dataintensive Analytics. In SoCC 2011  
1544 
1544 


Figure 15  3D model of the patio test site Figure 16  Model of the patio test site combining 2D map data with 3D model data a Largest explored area b Smallest explored area Figure 14  Maps built by a pair of 2D mapping robots Yellow indicates area seen by both robots Magenta indicates area seen by one robot and Cyan represents area seen by the other a 3D point cloud built of the patio environment Figure 16 shows a model built combining 2D map data with 3D model data A four-robot mission scenario experiment was conducted at the mock-cave test site This included two 2D mapping robots a 3D modeling robot and a science sampling robot There was no time limit on the run Figure 17 shows a 3D model of the tunnel at the mock cave Figure 18 shows a model built combining 2D map data with 3D model data 7 C ONCLUSIONS  F UTURE W ORK The multi-robot coordination framework presented in this paper has been demonstrated to work for planetary cave mission scenarios where robots must explore model and take science samples Toward that end two coordination strategies have been implemented centralized and distributed Further a core communication framework has been outlined to enable a distributed heterogenous team of robots to actively communicate with each other and the base station and provide an online map of the explored region An operator interface has been designed to give the scientist enhanced situational awareness collating and merging information from all the different robots Finally techniques have been developed for post processing data to build 2  3-D models of the world that give a more accurate description of the explored space Fifteen 2D mapping runs with 2 robots were conducted The average coverage over all runs was 67 of total explorable area Maps from multiple robots have been merged and combined with 3D models for two test sites Despite these encouraging results several aspects have been identi\002ed that can be enhanced Given the short mission durations and small team of robots in the experiments conducted a simple path-to-goal costing metric was suf\002cient To use this system for more complex exploration and sampling missions there is a need for learning-based costing metrics Additional costing parameters have already been identi\002ed and analyzed for future implementation over the course of this study One of the allocation mechanisms in this study was a distributed system however task generation remained centralized through the operator interface In an ideal system robots would have the capability to generate and auction tasks based on interesting features they encounter Lastly the N P complete scheduling problem was approximated during task generation However better results could potentially 10 


Figure 17  3D model of the tunnel in the mock cave test site Figure 18  Model of the mock cave test site combining 2D map data with 3D model data be obtained by releasing this responsibility to the individual robots A CKNOWLEDGMENTS The authors thank the NASA STTR program for funding this project They would also like to thank Paul Scerri and the rCommerceLab at Carnegie Mellon University for lending hardware and robots for this research R EFERENCES  J C W erk er  S M W elch S L Thompson B Sprungman V Hildreth-Werker and R D Frederick 223Extraterrestrial caves Science habitat and resources a niac phase i study\\224 NASA Innovative Advanced Concepts NIAC Tech Rep 2003  G Cushing T  T itus and E Maclennan 223Orbital obser vations of Martian cave-entrance candidates,\224 in First Intl Planetary Caves Workshop  Carlsbad NM 2011  J W  Ashle y  M S Robinson B R Ha wk e A K Boyd R V Wagner E J Speyerer H Hiesinger and C H van der Bogert 223Lunar caves in mare deposits imaged by the LROC narrow angle camera,\224 in First Intl Planetary Caves Workshop  Carlsbad NM 2011  J W  Ashle y  A K Bo yd H Hiesinger  M S Robinson T Tran C H van der Bogert and LROC Science Team 223Lunar pits Sublunarean voids and the nature of mare emplacement,\224 in LPSC  The Woodlands,TX 2011  S Dubo wsk y  K Iagnemma and P  J Boston 223Microbots for large-scale planetary surface and subsurface exploration niac phase i.\224 NASA Innovative Advanced Concepts NIAC Tech Rep 2006  S Dubo wsk y  J Plante and P  Boston 223Lo w cost micro exploration robots for search and rescue in rough terrain,\224 in IEEE International Workshop on Safety Security and Rescue Robotics Gaithersburg MD  2006  S B K esner  223Mobility feasibility study of fuel cell powered hopping robots for space exploration,\224 Master's thesis Massachusetts Institute of Technology 2007  M T ambe D Pynadath and N Chauv at 223Building dynamic agent organizations in cyberspace,\224 IEEE Internet Computing  vol 4 no 2 pp 65\22673 March 2000  W  Sheng Q Y ang J T an and N Xi 223Distrib uted multi-robot coordination in area exploration,\224 Robot Auton Syst  vol 54 no 12 pp 945\226955 Dec 2006  A v ailable http://dx.doi.or g/10.1016/j.robot 2006.06.003  B Bro wning J Bruce M Bo wling and M M V eloso 223Stp Skills tactics and plays for multi-robot control in adversarial environments,\224 IEEE Journal of Control and Systems Engineering  2004  B P  Gerk e y and M J Mataric 223 A formal analysis and taxonomy of task allocation in multi-robot systems,\224 The International Journal of Robotics Research  vol 23 no 9 pp 939\226954 September 2004  M K oes I Nourbakhsh and K Sycara 223Heterogeneous multirobot coordination with spatial and temporal constraints,\224 in Proceedings of the Twentieth National Conference on Arti\002cial Intelligence AAAI  AAAI Press June 2005 pp 1292\2261297  M K oes K Sycara and I Nourbakhsh 223 A constraint optimization framework for fractured robot teams,\224 in AAMAS 06 Proceedings of the 002fth international joint conference on Autonomous agents and multiagent sys11 


tems  New York NY USA ACM 2006 pp 491\226493  M B Dias B Ghanem and A Stentz 223Impro ving cost estimation in market-based coordination of a distributed sensing task.\224 in IROS  IEEE 2005 pp 3972\2263977  M B Dias B Bro wning M M V eloso and A Stentz 223Dynamic heterogeneous robot teams engaged in adversarial tasks,\224 Tech Rep CMU-RI-TR-05-14 2005 technical report CMU-RI-05-14  S Thrun W  Bur g ard and D F ox Probabilistic Robotics Intelligent Robotics and Autonomous Agents  The MIT Press 2005 ch 9 pp 222\226236  H Mora v ec and A E Elfes 223High resolution maps from wide angle sonar,\224 in Proceedings of the 1985 IEEE International Conference on Robotics and Automation  March 1985  M Yguel O A ycard and C Laugier  223Update polic y of dense maps Ef\002cient algorithms and sparse representation,\224 in Intl Conf on Field and Service Robotics  2007  J.-P  Laumond 223T rajectories for mobile robots with kinematic and environment constraints.\224 in Proceedings International Conference on Intelligent Autonomous Systems  1986 pp 346\226354  T  Kanungo D Mount N Netan yahu C Piatk o R Silverman and A Wu 223An ef\002cient k-means clustering algorithm analysis and implementation,\224 IEEE Transactions on Pattern Analysis and Machine Intelligence  vol 24 2002  D J Rosenkrantz R E Stearns and P  M Le wis 223 An analysis of several heuristics for the traveling salesman problem,\224 SIAM Journal on Computing  Sept 1977  P  Scerri A F arinelli S Okamoto and M T ambe 223T oken approach for role allocation in extreme teams analysis and experimental evaluation,\224 in Enabling Technologies Infrastructure for Collaborative Enterprises  2004  M B Dias D Goldber g and A T  Stentz 223Mark etbased multirobot coordination for complex space applications,\224 in The 7th International Symposium on Arti\002cial Intelligence Robotics and Automation in Space  May 2003  G Grisetti C Stachniss and W  Bur g ard 223Impro ving grid-based slam with rao-blackwellized particle 002lters by adaptive proposals and selective resampling,\224 in Proceedings of the IEEE International Conference on Robotics and Automation  2005  227\227 223Impro v ed techniques for grid mapping with raoblackwellized particle 002lters,\224 IEEE Transactions on Robotics  2006  A Geiger  P  Lenz and R Urtasun 223 Are we ready for autonomous driving the kitti vision benchmark suite,\224 in Computer Vision and Pattern Recognition CVPR  Providence USA June 2012  A N 250 uchter H Surmann K Lingemann J Hertzberg and S Thrun 2236d slam with an application to autonomous mine mapping,\224 in Proceedings of the IEEE International Conference on Robotics and Automation  2004 pp 1998\2262003  D Simon M Hebert and T  Kanade 223Real-time 3-d pose estimation using a high-speed range sensor,\224 in Proceedings of the IEEE International Conference on Robotics and Automation  1994 pp 2235\2262241 B IOGRAPHY  Ammar Husain received his B.S in Mechanical Engineering Robotics from the University of Illinois at Urbana-Champaign He is pursuing an M.S in Robotic Systems Development at Carnegie Mellon University He has previously worked on the guidance and control of autonomous aerial vehicles His research interests lie in the 002eld of perception-based planning Heather Jones received her B.S in Engineering and B.A in Computer Science from Swarthmore College in 2006 She analyzed operations for the Canadian robotic arm on the International Space Station while working at the NASA Johnson Space Center She is pursuing a PhD in Robotics at Carnegie Mellon University where she researches reconnaissance exploration and modeling of planetary caves Balajee Kannan received a B.E in Computer Science from the University of Madras and a B.E in Computer Engineering from the Sathyabama Institute of Science and technology He earned his PhD from the University of TennesseeKnoxville He served as a Project Scientist at Carnegie Mellon University and is currently working at GE as a Senior Cyber Physical Systems Architect Uland Wong received a B.S and M.S in Electrical and Computer Engineering and an M.S and PhD in Robotics all from Carnegie Mellon University He currently works at Carnegie Mellon as a Project Scientist His research lies at the intersection of physics-based vision and 002eld robotics Tiago Pimentel Tiago Pimentel is pursuing a B.E in Mechatronics at Universidade de Braslia Brazil As a summer scholar at Carnegie Mellon Universitys Robotics Institute he researched on multi-robots exploration His research interests lie in decision making and mobile robots Sarah Tang is currently a senior pursuing a B.S degree in Mechanical and Aerospace Engineering at Princeton University As a summer scholar at Carnegie Mellon University's Robotics Institute she researched multi-robot coordination Her research interests are in control and coordination for robot teams 12 


Shreyansh Daftry is pursuing a B.E in Electronics and Communication from Manipal Institute of Technology India As a summer scholar at Robotics Institute Carnegie Mellon University he researched on sensor fusion and 3D modeling of sub-surface planetary caves His research interests lie at the intersection of Field Robotics and Computer Vision Steven Huber received a B.S in Mechanical Engineering and an M.S in Robotics from Carnegie Mellon University He is curently Director of Structures and Mechanisms and Director of Business Development at Astrobotic Technology where he leads several NASA contracts William 223Red\224 L Whittaker received his B.S from Princeton University and his M.S and PhD from Carnegie Mellon University He is a University Professor and Director of the Field Robotics Center at Carnegie Mellon Red is a member of the National Academy of Engineering and a Fellow of the American Association for Arti\002cial Intelligence 13 


