A System Architecture for I ntelligent Logistics System 
Liying Chen Xianghan Zheng , Guolong Chen College of Mathematics and Computer Science Fuzhou University, Fuzhou, P.R. China, 350108 n110320079, xianghan.zheng, cgl }@fzu.edu.com 
Conventional logistics information systems are usually designed case by case without consideration of many issues in fields of system elasticity, real time tracking service information sharing and inter-working, vehicle routing optimization, customer interaction, security control, etc. In this paper, we investigate and propose a mobile cloud-based architecture for enrichment of existing logistics systems. The 
Abstract 
 
system architecture includes: customer interaction distributed storage and computing, vehicle scheduling restful-based interaction and transmission, security, mobile payment, etc. After that, prototype implementation and evaluation work are presented to show feasibility and efficiency of proposed solution 
Keywords-logistics system vehicle routing optimization mapreduce; restful-based transmission 
I I NTRODUCTION Currently, different kinds of information systems have been widely deployed in logistics field. However, with fast development of technologies \(e.g. computer networking mobile internet, GPS, image processing, etc.\ and 
continuous increasing customer demand, conventional logistics information systems indicate disadvantages due to a few realistic limitations 1 System Elasticity  Conventional logistics systems have to consider the purchase of hardware and software on maximum need, and make further update according to the dynamic requirement 1  This in cr eas e s IT  in f r ast ru ctur e expens e 2 Real-time Tracking Service  Real-time logistics tracking service has been achieved via implementation of RFID technology, as described in 2  Ho w e ver  th is c o u l d  n o t be  w i dely  d e ploy ed du e  t o  high expense of RFID hardware 3 Vehicle Routing Optimization 
Although researchers in academia and industry have investigated Vehicle Routing Problem \(VRP\ and proposed corresponding approaches, they are basically not efficient in real system which consists hundreds of vehicles due to limitations of computing and storage capabilities in system server side 4 Information Sharing and Inter-working High degree of corporation is a basic requirement for logistics system in Quality of Service \(QoS\enhancements well as cost reduction [3  Ho w e ver  exis ti n g log i s tic s  systems are designed case by case and usually do not consider information sharing and inter-working issues The usage of cloud computing platform might 
overcome above limitations. Cloud computing is a model for enabling convenient, on-de mand network access to a shared pool of configurable computing resources \(e.g networks, servers, storage, applications, and services\ that can be rapidly provisioned and released with minimal management effort or service provider interaction [4   Cloud computing has several advantages, such as its elasticity, widespread accessibility, shared resource pool service on-demand and service calculable [5  Addi ti on all y   cloud based computing model is capable to provide more secure services than traditional business models as 
analyzed in [6   Mobile cloud refers to the service mode that access cloud services with mobile devices. This, on one hand, is an extension implementation of cloud computing, and on the other hand, is the capability extension to mobile devices [7  In th is  pa pe r  w e in v e s tig at e and  pr o p o se a  mobile cloud-based architecture for enrichment of existing logistics systems to achieve the target to be elastic compatible, and intelligent. In Section 2, we describe system architecture and its corresponding technical issues The prototype implementation and evaluation are presented in Section 3 and finally the paper is concluded in Section 4 
II A RCHITECTURE D ESIGN In this section, we describe a mobile cloud-based system architecture for intelligent logi stics system. Following the introduction, we consider issues related to customer interaction, distributed storage, logistics vehicle scheduling, MapReduce-based C-W algorithm Restful-based mobile interaction and transmission security and mobile payment 
The proposed architecture invo lves three main characters User Terminal \(UT\, Vehicle Terminal \(VT\ and Logistics Cloud Gateway \(LCG User Terminal, which can be mobile phone, laptops 
A System Overview 
PC, etc., uses a web browser or a software interface to get access to logistics cloud gateway. The connection between UT and LCG could be through either mobile or fixed network. With terminal a user could log in LCG anytime and anywhere to submit order ap plication. After validation a unique dimensional barcode will be generated and sent back to identify a specific order. User also could use UT to complete mobile payment via third-party payment service and track real-time state of corresponding commodities Vehicle Terminal, which can be a simple mobile phone or other handled devices with built-in GPS contains two 
2013 International Conference on Cloud Computing and Big Data 978-1-4799-2829-3/13 $26.00 © 2013 IEEE DOI 10.1109/CLOUDCOM-ASIA.2013.30 426 
2013 International Conference on Cloud Computing and Big Data 978-1-4799-2830-9/14 $31.00 © 2014 IEEE DOI 10.1109/CLOUDCOM-ASIA.2013.30 426 


B Customer Interaction C Distributed Storage D Logistics Vehicle Scheduling n i 
e customers q i Q k V= \(P, L P= {0, 1  n 0   2  n L i j i j P i\002 j  ET i LT i  
v k i j i 
     002   1  002       003        
main aspects of functions. On one hand, it recognizes commodities through scanning corresponding QR code; on the other hand, it is capable to collect vehicle location information and upload it to logistics cloud. Additionally VT could be directed to corresponding task points in optimized path Logistics Cloud Gateway is the key element which acts as a bridge between front-end terminal and back-end cloud computing platform. Inside LCG there are five main modules for handling different services, shown as Figure 1 a User Management. This part interacts with user terminal to manag order and provide real-time tracking service b Vehicle Management. This module mainly deals with collection of vehicle location information and direction of vehicle path according to logistics scheduling module c Logistics Scheduling. This component analyzes all possible vehicle paths and decides which one could be the most suitable with consideration of distance, time, expense and other factors d Security Provisioning. This module ensures connection \(between UT/VT and LCG\security data confidentiality and integrity e Mobile payment This module offers two possible mobile payment solutions based on either SMS payment or online payment. Both of them have been widely deployed in our daily life Figure 1 System Architecture We propose a novel interaction mode which customer is capable to handle most logistics related issues online, as described in the following  a A customer login LCG anywhere and anytime via user terminals \(laptop, mobile phone, etc  b An online form which contains logistics elements original address, destination, available time, etc should be filled. After that, customer will receive a specific 2D QR code related with the specific order c Logistics vehicle arrives at appointed time to check and receive corresponding commodity  d Vehicle Terminal uploads GPS information to LCG periodically  e Customer is capable to track state of corresponding commodity in real-time  f After accomplishment of distribution task customer pays either with SMS or online payment Cloud computing platform provides distributed storage services for logistics related data, including order information, vehicle location information and so on Specifically, logistics data is stored based on Hadoop DFS Distributed File System\hich could create multiple replicas of data blocks and distribute them on a set of cluster nodes [8 DFS h as rel ia b l e extr em ely rap i d  computations and it could reach load balance \(shown in Figure 2\. DFS also makes a balance in performance between input and output. The performance is to automatically distribute data blocks on the datanodes whose free-space is greater than a threshold value Figure 2 Structure of DFS There might be a multitude of orders in a certain period of time. Therefore, it is necessar y to define an efficient and reasonable logistics vehicle scheduling mechanism for management of existing Vehicle Route Problem \(VRP which is described in the following [9  Assume that a logistics distribution center serves customers, each of which \(customer has a commodity with weight the number of vehicle is and each vehicle has a load capacity VRP could be mathematically presented through a complete weighted graph where is a set of nodes representing logistics distribution center and customers  is a set of arcs that stands for distance between customer and  Each vehicle starts from and returns logistics center In our approach, we consider vehicle routing problem with time windows \(VRPTW\. More precisely, each customer  has to be served in a time window  otherwise extra penalty cost will be generated. Therefore the question turns to how to minimize total cost during 
427 
427 


Min\004 005\005\005 c 006\007 x 006\007\010 p 011 005 Max  ET 006 T 006 0  p 012 005 Max  T 006 LT 006 0  013 006\014\011 013 006\014\011 015 010\014\011 013 007\014\016 013 006\014\016 017 
E MapReduce-based C-W Saving Algorithm i i i i jv F Restful-based Mobile Interaction and Data Transmission G Security 
c 006\007  x 006\007\010 p 011  ET 006 p 012 LT 006 T 006 y 006\010 p 006 p 006 s 006\007 s 006\007 005 q 006 y 006\010 020Q 010 013 006\014\016 i  1,2\002n;k  1,2\002v 005 y 006\010 013 006\014\011 1 i=1,2\002n 005 x 006\007\010 y 006\010 i  1,2 002 n 013 007\014\011 k  1,2\002v 005 x 006\007\010 y 007\010 j  1,2 002 n 013 006\014\011 k  1,2\002v 
logistics distribution process, as represented in following mathematic formulas 1  2  3  4  5  Where represents transportation cost from customer i to customer j equals to 1 if vehicle k travels from customer i to customer j and otherwise equals to 0 represents extra cost caused in case that vehicle k arrives at customer i before  represents extra cost caused in case that vehicle k arrives at customer i after  represents the time when logistics vehicle arrives at customer i  equals to 1 if requirement of customer i is completed by vehicle k an d otherwise equals to 0 We also propose a MapReduce-based Clark-Wright \(C-W saving algorithm for handling vehicle routing problem. On one hand, MapReduce-based computing model is capable to split a big task into multiple sub-tasks and then assign them to a set of interconnected cloud nodes for distributed and parallel computing [10  On th e  o th er h and  C W saving algorithm considers the savings that could be acquired by linking pairs of customer nodes in a system that is composed of a central depot serving customer nodes 1 W i t h  co m b in at ion  of M a p R e d u c e an d C W s a vin g  mechanism, it is possible to acquire the most suitable vehicle path with optimized cost. The handling process is described in the following \(as illustrated in Figure 3 a According to list<i Where the key represents customer and the value represents the position of customer Map 001\011 calculates saving distance between any two customers using C-W saving algorithm. After that, Reduce 001\011 sorts the result and outputs list < \(i, j ordered by  b On the other side, Map 001\012 with the same input as Map 001\011  considers time windows constraint between any two customers. If connection between customer and iolates time windows constraint the connection is marked to be false, otherwise, it is true Reduce 001\012 sorts the results by either 0 or 1 According to the result of Reduce 001\011 and Reduce 001\012  Map 001\013 constructs vehicle path via adding customer pairs and then checks its feasibility. After that, Reduce 001\013 is capable to sort the vehicle path and select the most suitable route Figure 3 MapReduce-based handling mechanism Due to realistic limitations \(e.g. kernel, network, storage etc.\ of mobile devices, we suggest a lightweight restful protocol [1 m o bi l e cl o u d i nt e ra ct i o n a n d da ta transmission. Compared with traditional SOAP-based web service approach, restful-based solution is capable to provide simple, efficient, and more stable services. It offers lightweight connection and data transmission via removing most of redundant affiliated xml related element This greatly reduces size of transmission message and RTT time We suggest implementation of Trust Computing Platform TCP\ith active security defense capability in vehicle terminal. Before accessing to logistics cloud gateway \(for example, every time starting on\, we propose an embedded TPM \(Trusted Platform Module\ardware, combined with encryption / decryption technology and trust chain transfer technology for measurement of user's identity and s state. If measurement result meets the predefined security policy, then vehicle terminal is allowed to access to logistics cloud gateway. Otherwise, it is forced to connect to a specific isolated area for security improvement Besides, the connections among user terminal, vehicle terminal and logistics cloud gateway should be securely encrypted We suggest the implementation of certificate based security approach. On one hand, certificate proves legitimacy of the specific node and helps establish secure session; on other hand, it provides data confidentiality integrity and authentication among different parties Additionally, user should input the right user identity and password in order to g et access to logistics cloud gateway     
 With a few constraints 
platform 
428 
428 


cant be recognized. One possible reason is that equipped 
Today, it is very common to use mobile devices for payment. In order to realize mobile payment, we proposed to use SMS payment and online payment. In SMS payment solution, logistics cloud sends payment information to customers via SMS and customers can pay for the cost directly with replying the message. The online payment solution relies on mature third-party payment platform, such as PayPal III I MPLEMENTATION AND EVALLUATION We have built a logistics cloud platform testing bed in four PCs \(one for logistic cloud gateway, three for cloud computing platform nodes\ Huawei U8825 mobile phone with Android v2.2\, Lenovo A2105 \(with Android v4.0 Lenovo A2107 \(with Android v 4.0\, Iphone 4S and IPAD 4 are selected as user terminal and vehicle terminal testing tools. VMware Server 2.0.2 and Hadoop 1.0.2 are used to simulate cloud distributed environment. HBase 0.92.0 is used as a distributed data storage solution. We do test on campus network Before testing, we manually configure user profiles in logistics cloud gateway. We create two users \(Alice and Bob\ with user identity and password. This ensures that mobile agent is capable to pass security protection of logistics cloud platform. We assume that Alice wants to send a commodity to Bob and track the real-time information of order. It is possible to create more user profiles for more tests In some cases of experiment, two-dimensional codes camera in Android device is not capable to identify captured 2D QR code. In our testing, Both Alice and Bob are capable to acquire real-time tracking information However, it takes at most 60 seconds to show update because we set refresh time as 60s. Although this is enough for normal usage, it might reduce user experience We also find that in some cases our implemented platform could not obtain accurate location information of the vehicle. The distance deviation could even reaches at most 2000 meters. This problem might be in situation when GPS signals are too weak to acquire accurate location information. Overall, the prototype works well Figure 4 Prototype interface User Login. User inputs username and password The current tab pops up a toast to inform customer the login state. After been certificated, the main menu displays on the screen of mobile phone  Add order with user terminal. User fills in an order application form, and then price will be pre-evaluated. User can choose SMS payment or online payment Generation and recognition of two-dimensional code A dimensional barcode is generated for indentifying specific order. Through scanning and recognition of two-dimensional code, customer and logistic vehicle terminal are capable to achieve corresponding order information  Logistics vehicle scheduling. Cloud platform calculates and gives a suitable vehicle route  Real-time tracking. When user clicks tracking request button, logistics cloud returns current location of corresponding commodity  We simulate a simple vehicle scheduling scenario through creating \(manual configure in logistics cloud gateway component\ one distribution center, four vehicles and nine customer nodes \(randomly\ in order to evaluate differences between two cases: without consideration of time windows and with consideration of time windows \(our proposal\In both cases, four routes are generated respectively \(see Figure 5\. With comparison, it is capable to draw conclusions that our proposed vehicle scheduling mechanisms not superior to traditional C-W with aspect of travelling distance and cost; however, our proposal has its own advantages, especially when considering timeliness and satisfaction of users 
A&B C&D E&F G H 
H Mobile Payment A Prototype Implementation B Vehicle Scheduling Mechanism Comparison 
429 
429 


Figure 5  a\ing C-W saving algorithm without consideration of time windows; \(b\ Using C-W saving algorithm with consideration of time windows 
C Resource Response Time Comparison D Comparison with C onventional Solution 
usually designed case by case, lack of sharing capability Good, cloud platform is friendly for interworking Security Fair, can be integrated with specific security approaches Good, relies on cloudbased security mechanisms Data Transmission Efficiency Fair, uses heavy web service based control protocol Good, uses a lightweight Restful protocol IV C ONCLUSIONS 
We also evaluate our proposed restful-based approach from aspect of Resource Response Time \(RRT\, which is defined as total latency between request forwarding and file transfer. For comparison, we use open source testing tools soapUI [13  to exe cute SOA P bas e d w eb se rv ice f o r  mobile negotiation and data transmission between user terminal and logistics cloud gateway. According to our experiment, through restful-based interaction and data transmission, it is capable to save 40%amount of transmission data and reduce 50% of Resource Response Time, shown in Figure 6 Figure 6  Comparison between restful-based and SOAP-based approach Table 1 gives comparison among conventional logistics system and our proposed solution.  The comparison shows that due to advantages of cloud platform and proposed optimization approaches, mobile cloud-based logistics system is superior in many aspects to conventional logistics systems Table 1. Performance comparison between conventional system and proposed system Conventional Logistics System Proposed logistics System Elasticity Poor, must consider purchase of hardware and software on maximum need Good, can be automatically and rapidly expanded to dynamic changes Customer Interaction Experience Poor, customer need go to logistics distribution center fills in logistics form and pays bill Good, all subfunctions are completed online with selfservice Realtime Tracking Fair, could achieve part of tracking however, not real-time Good, realizes full visualization Interworking and Data Sharing Poor 002 Future work will consider security issues with special focus on possibility of a vTPM \(Virtual TPM\ for security enhancement, as proposed in paper. In this solution, a virtual TPM \(vTPM\ framework provides a set of trustworthy services in software point of view. This framework allows multiple mutually distrustful and unaware guests to share a TPM without requiring modifications. This may be implementable in our proposed logistics system A CKNOWLEDGEMENTS This paper is supported by the National Natural Science Fo undation of China under Grant No. 61103175 and No.1127 1002, the Key Project of Chinese Ministry of Education un der Grant No.212086; the Technology Innovation Platform Project of Fujian Province under Grant No. 2009J1007; th e Key Project Development Foundation of Education Com mittee of Fujian province under Grand No.JA11011 and J A12016 R EFERENCES 1 L i X  W a n g Y  C h e n X   Co l d  ch ai n l o g i sti c s sy ste m b a se d o n  cloud computing[J Co nc ur r e ncy an d Co m p u t a tio n P r act ice a n d  Experience, 2012, 24\(17\2138-2150 2 Z hang Y  RF I D  G P S  G P RSb as e d l o g is t ics  m o ni to r i ng a n d  management system[C    E lect r o n i c S y s t em I n t egr a t i o n  Technology Conference \(ESTC\012 4th. IEEE, 2012: 275-278 
We propose a mobile cloud-based architecture for intelligent logistics system. Following the system architecture is the main issues including customer interaction, distributed storage and computing, real-time tracking, logistics vehicle scheduling, Restful-based transmission, security and mobile payment, etc. We use the implementation, simulation and comparison to show the feasibility and efficiency of this architecture 
430 
430 


3 J ud d J D  S a r i n S  C C u n d if f J S  D e s i g n m o de l ing  a n d a n al y s is o f  a feedstock logistics system[J  B i ores ou rc e t e c h n o log y  20 12 103\(1\: 209-218  M ell P Gra n c e T  Dra f t ni s t w ork i n g d e fi ni ti on of c l oud computing-v15[J  2 1 A u g 20 09 2009   2  123 135   W a n g X A n a l y s i s on C l ou d  C om p u t i n g ba s e d L ogi s t i c s  Information Network Mode[C   C o m pu ta tio nal  I n te l l ige nce an d  Security \(CIS\011 Seventh International Conference on. IEEE 2011: 1286-1289 6 F en g D G  Z h an g M  Z h an g Y, et al Stu d y on c l ou d c o m p u t i n g  security[J  J o u r na l of Soft w a r e  2 011 22 1  7 1 8 3   7 C hun B G   I h m S  Ma ni at i s P  et a l  C lon ec lou d ela s t i c exec u ti on between mobile device and cloud[C   P roc eed in gs of th e s i xth conference on Computer systems. ACM, 2011: 301-314 8 H ow ar d J H  K a z a r M L  Me ne e s S  G  e t al S c al e and pe r f o r m a n ce  in a distributed file system[J C M T r ans act io ns o n Co m p ute r  Systems \(TOCS\, 1988, 6\(1\: 51-81 9 W ang Y  A Hy br id A ppr o a ch B a s e d o n A nt Co l o ny Sy s t e m f o r the  VRPTW[C  A d va n c ed T e c hn olog y  i n T e a c hi n g Proc eed i n gs of the 2009 3rd International Conference on Teaching and Computational Science \(WTCS 2009\. Springer Berlin Heidelberg 2012: 327-333 10 D e an J  G h e m a w at S  Ma pRe d u c e a f l e x ibl e data pr o c e s s i ng  tool[J  C o m m u n i c a t i o n s of t h e A C M  20 10 53 1  7 2 77    F a n  L  Qi n Q. T h e Op ti m i za ti on  M odel a n d E m pi ri ca l A n a l y s i s for Vehicle Routing Problems with Time Windows Based on CW Algorithm[M L I S S 20 12 S p r ing e r Be r l in H e ide l be r g 2 0 1 3   253-258 12 Pau t asso C  Z i mme r man n O  L e y man n F  Re stfu l w e b se rv ice s v s big'web services: making the right architectural decision[C P r o ce e d ing s o f th e 1 7 th in te r n at io nal co nf e r e n ce o n  World Wide Web. ACM, 2008: 805-814  Su si la S V a di ve l S Ju lk a A  B rok e r a rc h i t e c t u re for We b Se rvi c e  selection using SOAPUI[C  C lou d C o m p ut in g T e c h n o logi es   Applications and Management \(ICCCTAM\, 2012 International Conference on. IEEE, 2012: 219-222 
431 
431 


      012 015    012  012 015    015 015                   012     012       012 012 015 015    012             012     012       012 012 015     012             012     012  015 "\015     012 012    015 015      012 015\012 015 D   012  012      012    015    015 015 015     012 015\012 015  015\015    015 015     012     012  015  015 012     16  2  128  log 2 128  128   015    L symbol  D          012    015    015    012      015\012 015 012\012   015 015    8  128    015   015   015     012  012  012 015    015    012    012\015   012    012   012    012   015       L symbol  L mark   D  log 2 D  D  012 L symbol    015    015 012    8  8  128  log 2 128  128      L symbol  2 L mark  2  D    16+8  128    015   015        012     015 015\015   015 015  015\015  015   012   015 012   012  012  012  012 012\015        012\012  015 015		\015 015   012\012     015   012 012\012 015   0 012  012   012 1	\012   015- \015      015     015  015 015 015  015 2 012 012\015  015  015 2         015\012  012 012\015   012    015  012 0122  2   015 \015 015      015   012 015 \015    015 012\015   015 3    012\012  012 0120 0,	0 012 100 4  015   012\015\012  012 2           015 5  012 015\012  015 6 015\012 \0157   67'\(658&9'+95   015   015  015 012 015        2   9 2  015\012    2    015 015 015\012  012   012 2 \012  012     012   015  015 012  0152     015     015 015  2 015\0122  012\012 0152 015 2  012\0152 012\015 2      015   015 015  015 015\012 012  015  012    012 2 \012  015\012 2\012 015     015   015  015 015\012  015     015   012  015 \015 2 012  10   015\012  012  0  012 015  015 015 012\015  012    012\012   015		\015  015       015 015  015 \015 015 015\012   012 015 012\012 012 015   012\015      015  012    012\012     015       0122    015    012 015     015    012 015 015 015 015 \015 012\015  015 015   012\015   012/2\012\015 2   015\012 2 015 \015 015\012\015 \012 015   015  015\015  015\012\012\0152 015  015   012  0121	\012  012  012    015  012  015  015\015  015		2 012    015 3     015	\012   012      012 015 \015 2\012\015 015    012  015    2=\015 \015   015 015  015 \015   012 012   015 012\012 015    015 \015    2\012\015       015   012 015  015    015 012   015\012 015\012 2    012 0152\012  015        015  015 015  2     015 \015   015 015\012 012\015  015\015.2  012   015  015\015   015  015 015 \015  2  015 2 2    015    92 


  012 015\015 	\015\015 015 012  012  012 015  012\015  012  012 015  012 012 012 015\015 012 012   012 015 012 \012 012 012 012 012 012\015 012 012   012 015  012   012 012  012\015 012  012  012 012\015    012    012 012 012 012 012  012 012 \012\015 015 012 015 012 012    015 012 015 015	\012\015      012 015\012 012  012 012 012\015 012 015 012 015\012   012 012    012 015 012 015     015  012\015    015\012 012 012 015 012 012 012 \012  012  015\015  015 012 015 012  012\015 012  012     015 012   015 012 015 012    012 012 \012  012 015   015 012 015\012  012              0123445201264478  015    012\015    012  015  012       015         012  015  012     012   015   015     015  015     015  015   0  015  1  012  012'\012  2 015  012 015   015  015    3 1  24 012455 5666$-,6   7   1 8#\015  1    012  9  015          015        6  015     9   2 015          015   015  015   6    012\015  012  015  012 015   015  015   6     015  1\015    015  012      012  2      015    012     015 015    0   012\015  1 0129  012\012   015   015   015  015  6\015 6 6      012  015  2 4           015          015   015            A   015 A 012  012   9"	4 1   012#\015   015   1A56+6\015 66   8  1   015 3  2  015   012    015   015  015      1 1   8\015 3   2   B 2	\015    015  015      2	\015  C    012	\015               015 6,6\015  6   015 1 015    D  015 012     B  B 015    012      015*\015     012 015   3 1 E 012\012\015  1\015 F14   A  1 012#"	\015    3 1  24 012455 5""&#GH   015  015    015 F     015    012   012   015*\015     012 015   3 1 E   A  1 012#"	\015 015     8 015  I2 2  015     015  93 



Figure 8 
heuristic to execute BC on just 4 workers in roughly two-thirds the time as the baseline using 8 workers providing users with cost-performance tradeoffs in a pay-as-you-go cloud environment. The automation offered by the adaptive heuristic to the end user also eliminates the guesswork of picking a static baseline or any potential non-uniformity in sampling using the sampling heuristic C  Given the need to run computation as a series of smaller \(optimally sized\at hs, is important to decide when we initiate the next swath. Our initiation heuristics attempt to overlap execution of multiple swaths to flatten the resource \(memory, network, CPU\ usage variations causes by different supersteps within a single swath. In BC and APSP, we observe a triangle waveform with a central peak; this heuristic is not relevant for applications like PageRank with uniform resource usage. Besides improving resource utilization, overlapping consecutive swath iterations also reduce the cumulative supersteps required and thus reduces the total overhead spent on synchronization between supersteps Figure 6 compares the relative performance of our initiation heuristics for the BC application normalized to a baseline approach that runs strictly  non-overlapping iterations. These run on 8 workers Figure 7 shows the corresponding messages transferred between supersteps over time, spanning swath iterations. The initiates a new swath every supersteps while the  performs initiation when it detects a peak in the number of messages exchanged. Static-Ns performance depends on the graph and the value of that is chosen.  If the average shorte st path is greater than  we will be initiating new heur istics before the previous swath has hit its peak, thereby exacerbating the resource demand. If the average shortest path length is well distributed or is \(just\ shorter than it leads to better performance. So 4 for the larger CP graph actually works best. Our dynamic he uristic eliminates this guesswork as it picks the initiation point at runtime without user input or graph preprocessing. Using this dynamic initiation heuristic we achieve up to 24 speedup vs. sequential initiation for the WG graph. The message transfer plot in Figure 7 corroborates this While sequential shows the message transfers peak and fall to zero \(thus showing more variability and poorer utilization\, Static-6 \(which is optimal but handselected\ maintains a higher message rate while dynamic is a bit more conservative, but automated VII E VALUATING I MPACT OF G RAPH P ARTITIONING ON P REGEL NET Our Pregel.NET framework is agnostic to how the graphs are partitioned and assigned to workers. The default mode performs a simple hash over the vertex ID to determine the target worker partition. Several works have shown that intelligent graph partitioning can improve the performance of distributed graph algorithms [19  26 a nd i t is relevant to examine if these benefits carry over to the Pregel/BSP model also METIS is a commonly used strategy that provides good quality in-place partitioning that minimizes edge-cuts across partition  Rec e n t w o rk o n a p pr o x im ate partitioning using a single graph scan offers an alternative for partitioning online as the graph is read from storage P a ge R a nk is o f t e n used in l iter a tur e  to validate the effectiven ess of these partitioning strategies. However, as we have seen, PageRank implemented using Pregel/BSP has a uniform message profile while BC and APSP have a triangle waveform message profile. We analyze the consequence of this on the performance gains from intelligent graph partitioning Clearly, the benefit of partitioning comes in reduced communication time since messages to remote vertices incur additional delay due to serialization and network I/O when compared to in-memory messages sent to local vertices. Since many distributed graph algorithms are dominated by communication rather than computation, partitioning can improve overall performance However, the barrier synchronization model in Pregel/BSP means that the total time spent in a superstep is determined by the slowest worker in the superstep. Hence, the balance of work amongst workers in a superstep is as import ant as the cumulative number of remote messages generated in a superstep. Since vertices communicate with their neighbors along edges in the Pregel/BSP model and partitioning seeks to collocate a majority vertex neighbors in the same partition, there may arise local maximas in specific partitions where more vertices are active during the course of execution of a graph application. This difference in workload can cause underutilization of workers that wait for over utilized workers at the superstep barrier  
Relative time taken by PageRank, APSP and BC to run on WG and CP graphs partitioned using METIS and Streaming, normalized to Hashing approach. Smaller is better  
  
sequentially Static-N heuristic Dynamic heuristic 
Swath Initiation Heuristics N N N N N  
211 


006 002\006 007\006 010\006 011\006 012\006 013\006 014\006 015\006 016\006 002\006\006 006 012\006\006 002\006\006\006 002\012\006\006 007\006\006\006 007\012\006\006 010\006\006\006 010\012\006\006 011\006\006\006 033\0353\0201 0\004 031"\020\033'\030\034\025 0#8\031\030\026\0309\033\031\030\024\034 004%\020\027!\031\030\024\034#&\030'\020#\(\035\020\027\003 024'2!\031\020\005:AB 033""\030\020"#5\033\030\031 8\031\030\026 006 006\003\012 002 002\003\012 007 007\003\012 010 010\003\012 011 011\003\012 012 0202#\014 0202#\015 031\0202#\016 031\0202#\002\006 0\020\035\035\033\025\020\035#\\020\034\031#-7#\004\033\0273#5\024",\020 0\030\026\026\030\024\034\035 017\020\021\022\023\024\024\025\026\020#;\033\0353\0201#\032\033"\031\030\031\030\024\034\030\034\025 5\006 5\002 5\007 5\010 5\011 5\012 5\013 5\014 006 006\003\012 002 002\003\012 007 007\003\012 010 010\003\012 011 011\003\012 012 0202#\014 0202#\015 0202#\016 0202#\002\006 0\020\035\035\033\025\020\035 020\034\031#-7#\004\033\0273#5\024",\020 0\030\026\026\030\024\034\035 017\020\021\022\023\024\024\025\026\020#0\004&:\#\032\033"\031\030\031\030\024\034\030\034\025 5\006 5\002 5\007 5\010 5\011 5\012 5\013 5\014 006 002\006 007\006 010\006 011\006 012\006 013\006 014\006 015\006 016\006 002\006\006 006 012\006\006 002\006\006\006 002\012\006\006 007\006\006\006 007\012\006\006 033\0353\0201 0\004 031"\020\033'\030\034\025 0#8\031\030\026\0309\033\031\030\024\034 004%\020\027!\031\030\024\034#&\030'\020#\(\035\020\027\003 024'2!\031\020\005:AB 033""\030\020"#5\033\030\031 8\031\030\026 006 006\003\012 002 002\003\012 007 007\003\012 010 010\003\012 011 011\003\012 012 0202#\016 031\0202#\002\006 031\0202#\002\002 031\0202#\002\007 0\020\035\035\033\025\020\035#\\020\034\031#-7#\004\033\0273#5\024",\020 0\030\026\026\030\024\034\035 027\030\031\022\032\033\031\020\034\031\035#;\033\0353\0201#\032\033"\031\030\031\030\024\034\030\034 025 5\006 5\002 5\007 5\010 5\011 5\012 5\013 5\014 006 006\003\012 002 002\003\012 007 007\003\012 010 010\003\012 011 011\003\012 012 031\0202#\016 031\0202#\002\006 031\0202#\002\002 031\0202#\002\007 0\020\035\035\033\025\020\035#\\020\034\031#-7#\004\033\0273#5\024",\020 0\030\026\026\030\024\034\035 027\030\031\022\032\033\031\020\034\031\035#0\004&:\#\032\033"\031\030\031\030\024\034\030\034\025 5\006 5\002 5\007 5\010 5\011 5\012 5\013 5\014 
We evaluate the impact of graph partitioning using the best-in-class METIS partitioner as well as the best heuristic \(linear-wei ghted deterministic, greedy approach partitioner from [26 an d com p a r e  them against a baseline that uses simple of vertices by their IDs. We run PageRank, BC and APSP over the WG and CP graphs on 8 workers for this evaluation. Hash, METIS, and Streaming produce 8 partitions whose percentage of remote edges are 87 18% and 35% for the WG graph and 86%, 17% and 65% for the CP graph; smaller this number, lower the edge cuts across partitions, and METIS proves a low edge cut for both graphs. Given the large sizes of the graphs, we run these experiments on the same set of vertices as our other experiments \(50 vertices for CP and 75 vertices for WG\. We report these results when using Pregel.NET without our swath heuristics however, the trends we observe are consistent even with heuristics turned on, though the absolute performance is uniformly better Figure 8 shows the relative time taken when using the METIS and streaming partitioning normalized to hashing for PageRank, BC and APSP running on WG and CP. We see that the WG graph sees a relative improvement of nearly 42-50% for METIS for the three applications, while this improvement drops to 24-35 for the streaming partitioning. When running Pregel.NET with heuristics turn ed on, we see a best case improvement of 5x in relative time taken by METIS for BC on WG compared to hashing \(graph not shown These are consistent with results reported in  However, we also see that the CP graph does not show such a marked improvement in performance due to better partitioning, despite its edge cut ratios from different partitioning being similar to WG. In fact hashing is faster than METIS and Streaming for APSP on this graph. It is worthwhile to investigate this consistent lack of improvement for the CP graph as opposed to WG. Figure 9 shows the runtime for BC broken into compute+I/O time and the synchronization barrier wait time components for the WG graph and Figure 12 does the same for CP. The plots also show the VM utilization %, calcul ated as the time spent in compute and I/O communication against the total time including barrier wait time\ on the secondary Y-axis We see that the VM utilization % for hashing is higher though the total time taken is also higher, for both WG and CP. METIS shows the inverse property, having lower utilization but also lower total time. This is explained by looking at the number of messages emitted by workers in a supe rstep for both hashing and METIS, shown in Figures 10 and 11 for WG, and in Figures 13 and 14 for CP. We expect that a hashed assignment of vertices to a partition would spread communication roughly evenly over all workers, while also increasing the number of remote communications required. The latter contributes to the increased total time while the former leads to a uniform number of    
Figure 9 Figure 10 Figure 11 Figure 12 Figure 13 Figure 14 
 taken for BC on a subset of with  shows the ratio of Compute+I/O time to total time   transferred by each worker in the peak supersteps of BC performed over using    transferred by each worker in the peak supersteps of BC performed over       taken for BC on a subset of with  shows the ratio of Compute+I/O time to total time   transferred by each worker in the peak supersteps of BC performed over using    transferred by each worker in the peak supersteps of BC performed over   
in-place streaming hashing 
Total time WG graph different partitioning Utilization Number of messages WG graph Hash partitioning Number of messages WG graph using METIS partitioning Total time CP graph different partitioning Utilization Number of messages CP graph Hash partitioning Number of messages CP graph using METIS partitioning 
212 


Bottom Top A B 
Figure 15 Figure 16 
messages seen for all workers in a superstep \(Figures 10 and 13\. When looking at the messages sent by workers in a superstep for METIS, we see that there are message load imbalances within work ers in a superstep, caused due to concentration of vertices being traversed in that superstep in certain partitions This variability is much more pronounced in CP as compared to WG \(Figures 11 and 14\ E.g. in superstep 9 for CP, twice as many messages \(4M\ are generated by a worker compared to another \(2M\.  For Pregel BSP, the time taken in a superstep is determined by the slowest worker in that superstep. Hence increase d variability in CP causes even good partitioning strategies to cause an increase in total execution time wh en using the Pregel/BSP model VIII A NALYSIS OF E LASTIC C LOUD S CALING  Cloud environments offer elasticity  the ability to scale-out or scale-in VMs on-demand and only pay for what one uses [28   On th e f l i p s i de  on e en ds u p  paying for VMs that are acquired even if they are underutilized. We have already shown the high variation in compute/memory resources used by algorithms like BC and APSP across different supersteps. While our earlier swath initiation heuristics attempt to flatten these out by overlapping swath executions, one can consider leveraging the clouds elasticity to, instead, scale up and down the concurrent workers \(and graph partitions\ allocated in each superstep The peak and trough nature of resource utilization combined with Pregel/BSPs synchronous barrier between supersteps offers a window for dynamic scaleout and in at superstep boundaries. Peak supersteps can greatly benefit from additional workers, while those same workers will contribute to added synchronization overhead for trough supersteps We offer an analysis of the potential benefits of elastic scaling by extrapolating from observed results for running BC on WG and CP graphs, using four and eight workers.  To provide a fair and focused comparison, we turned off swath heuristics in favor of fixed swath sizes and initiation intervals Figure 15 \(Bottom\ plots the speedup of BC running on eight workers when normalized to BC running on four workers, at corresponding supersteps.  The number of workers does not impact the number of supersteps We also plot the number of active vertices \(i.e. vertices still computing for a given swath\these supersteps which is a measure of how much work is required \(Fig 15 \(Top\. We find that we occasionally get superlinear speedup spikes \(i.e. >2x\ that shows a strong correlation with the peaks of active messages, for both WG and CP graphs. At other times, the sp eedup is sublinear or even a speed-down \(i.e. <1\responding to inactive vertices.  The superlinear speedup is attributable to the lower contention and reduced memory pressure for 8 workers when the active vertices peak \(similar to what we observed for the swath initiation heuristics Similarly, the below par speedup during periods of low activity is contributed by the increased overhead of barrier synchronization across 8 workers. Intuitively, by dynamically scaling up the number of workers for supersteps with peaking active vertices and scaling them down otherwise, we can leverage the superlinear speedup and get more value per worker Using a threshold of 50% active vertices as the threshold condition for between 4 and 8 workers in a superstep, we extrapolate the time per superstep and compared this to the fixed 4 and 8 worker runtimes. We also compute the best-case run time using an oracle approach to i.e. for each superstep, we pick the minimum of the 4 or 8 workers time.  Note that these projections do not yet consider the overheads of scaling, but are rather used to estimate the potential upside if we had an ideal or an automated heuristic for scaling. The total time estimates for running BC on WG and CP graphs, normalized to  
 plot shows speedup of 8 workers relative to 4 workers, for each superstep, when running BC on WG and CP graphs plot shows the number of vertices active in that superstep Estimated time for BC using elastic scaling, normalized to time taken for 4 workers. Normalized cost is shown on secondary Y axis WG graph shown on left CP graph shown on right. Smaller is better 
022\011 022\010 022\007 022\002 006 002 007 006 002 007 010 011 012 013 014 015 006 006\003\002 006\003\007 006\003\010 006\003\011 006\003\012 006\003\013 006\003\014 006\003\015 006\003\016 002 027\031\030\037\020#@\020"\031\030\027\020\035 0201!2#\024$#\015#5\024",\020"#\017\003"\003\031\003#\011#5\024",\020"\035 024"'\033\026\0309\0201#\\031\020 2 035#\032\020"#+!\034 017\020\021\022\023\024\024\025\026\020 027\030\031\022\032\033\031\020\034\031\035 017\020\021\022\023\024\024\025\026\020#?#/\027\031\030\037\020#@\020"\031\030\027\020\035 027\030\031\022\032\033\031\020\034\031\035#?#/\027\031\030\037\020#@\020"\031\030\027\020\035 036\030\034\020\033"#\\0201!2 006 006\003\007 006\003\011 006\003\013 006\003\015 002 002\003\007 006 006\003\002 006\003\007 006\003\010 006\003\011 006\003\012 006\003\013 006\003\014 006\003\015 006\003\016 002 011#5\024",\020 B\034\0267 015#5\024",\020 B\034\0267 1\0332\031\030\037\020 030\034\025 1\0332\031\030\037\020 036\024\017\020 024!\0341 024\035\031#>\024"'\033\026\0309\0201#\031\024#\011#5\024",\020"#.\024\035\031 017\020\021\022\023\024\024\025\026\020#+!\034\022&\030'\020#>\024"'\033\026\0309\0201#\031\024#\011#5\024",\020"#&\030'\020 011#5\024",\020"#&\030'\020 015#5\024",\020"#&\030'\020 024\035\031 006 006\003\007 006\003\011 006\003\013 006\003\015 002 002\003\007 002\003\011 002\003\013 006 006\003\002 006\003\007 006\003\010 006\003\011 006\003\012 006\003\013 006\003\014 006\003\015 006\003\016 002 011#5\024",\020 B\034\0267 015#5\024",\020 B\034\0267 1\0332\031\030\037\020 033\026\030\034\025 1\0332\031\030\037\020 036\024\017\020 024!\0341 024\035\031#>\024"'\033\026\0309\0201#\031\024#\011#5\024",\020"#.\024\035\031 027\030\031\022\032\033\031\020\034\031\035#+!\034\022&\030'\020#>\024"'\033\026\0309\0201#\031\024#\011#5\024",\020"#&\030'\020 011#5\024",\020"#&\030'\020 015#5\024",\020"#&\030'\020 024\035 031 
 
dynamically scaling ideal scaling 
Our hypothesis is that an intelligent adaptive scaling of workers can achieve a similar performance as a large, fixed number of workers, but with reduced cost 
213 


Nature Nature Ecological Applications Nature ACM International Conference on Management of Data \(SIGMOD In Parallel Object-Oriented Scientic Computing \(POOSC Science Communications of the ACM ACM Workshop on Mining and Learning with Graphs Communications of the ACM HotCloud Proceedings of the 19th ACM International Symposium on High PErformance Distributed Computing HPDC Knowledge and Information Systems KAIS International Conference on Computational Science IEEE International Conference on Cloud Computing Technology and Science ACM/IEEE Conference on Advances in Social Network Analysis and Mining \(ASONAM IEEE International Parallel and Distributed Processing Symposium \(IPDPS International Conference on Distributed Computing and Networking Journal of Mathematical Sociology International Conference on Parallel Processing Communications of the ACM 
 
observed time taken using 4 workers, are plotted in Figures 16\(A\ and 16\(B We see that our dynamic scaling heuristic using the percentage of active vertices achieves nearly the same CP\ or better \(WG\ performance as a fixed 8 worker approach. Clearly there is benefit of using fewer workers for low utilization su persteps to eliminate the barrier synchronization overhead. Also, the dynamic scaling heuristic performs almost as well as the ideal scaling. Finally, when we consider the monetary cost of the proposed approaches, assuming a pro-rata normalized cost per VM-second plotted on the secondary Y axis, we see that dynamic scaling is comparable \(CP\ or cheaper \(WG\ than a 4 worker scenario while offering the performance of an 8 worker deployment IX C ONCLUSION  In conclusion, we introduce optimization and heuristics for controlling memory utilization and show they are critical to performance.  By breaking computation into swaths of vertices and using our sizing heuristics we achieve up to 3.5x speedup over the maximum swath size that does not cause the a failure.  In addition overlapping swath executions can provide a 24% gain with automated heuristics and even greater speedup when a priori knowledge of the network characteristics is applied This evaluation offers help to eScience users to make framework selection and cost-performancescalability trade-offs. Our he uristics are generalizable and can be leveraged by other BSP and distributed graph frameworks, and for graph applications beyond BC. Our work uncovered an unexpected impact of partitioning and it would be worthwhile, in future, to examine the ability to pred ict, given certain graph properties, a suitable partitioning model for Pregel/BSP It may also be useful to perform such evaluations on larger graphs and more numbers of VMs. At the same time, it is also worth considering if non-linear graph algorithms are tractable in pr actice for large graphs in a distributed environment B IBLIOGRAPHY  1  F  L i lj er os C   Ed l i n g L  A m a r a l H  S t an ley   and Y    berg The web of human sexual contacts 
vol. 411, pp. 907908, 2001   H Je o n g  S   Ma so n A  L   B a ra b s i  a nd Z   Oltva i  L e t ha l i t y  and centrality in protein networks vol. 411, pp. 41-42 2001   O. B o din and E   E s t r ada    U s i n g n e t w ork c e nt r a l i t y  m e a s ures t o  manage landscape connectivity vol 18, no. 7, pp. 1810-1825, October 2008   D. W a ts s  and S  S t r ogat z  C olle c t i v e  d y nam i cs of  s m a ll-w orl d   networks vol. 393, no. 6684, pp. 440442, June 1998   G  Ma lew i c z   M A u s t er n A   Bik  J   Dehn er t I  Hor n   N. L e i s er and G. Czajkowski, "Pregel: A system for large-scale graph processing," in 2010   D. G r egor  and A  L u m s dain e  T h e  pa r a llel  B G L  A gen e r i c  library for distributed graph computations," in 2005   B. S h a o  H. W a n g  and Y  L i T he T r init y G r aph E n g i n e    Microsoft Research, Technical Report MSR-TR-2012-30, 2012   A  F ox  C lo ud c o m putin g w h at  s  in it for m e  as  a  s c i e n tis t     vol. 331, pp. 406-407, 2011   S. G h e m a w a t  and J  De an   Map re duc e s i m p lifi e d data  processing on large clusters vol 51, no. 3, pp. 107-113, 2008   J  L i n and M. S c hat z   Des i g n  patt er n s  for eff i ci ent gr aph algorithms in MapReduce," in 2010   L   Va l i ant   A b r id g i n g m o d e l f or pa r a llel com putati o n  vol. 33, no. 8, pp. 103-111, 1990 12 a c h e  Ha ma    O n l i n e    http://hama.apache.org   13 Ap a c h e  Ha d o op    O n l i n e    http://hadoop.apache.org     M Z a h a r i a, M. Ch ow dhu ry M F r ank l in S  S h e n k e r, and I   Stoica, "Spark: Cluster Computing with Working Sets," in 2010   J  Ekana y ak e e t a l     T w i st er A  r untim e f o r it er ati v e  MapReduce," in Chicago, 2010, pp. 810-818   U. K a n g  C  T s o u rakakis   and C. F a l outs o s  Peg a s us   Minin g  Peta-scale Graphs," in 2010   M. P a c e  B S P vs  MapR e duc e    in vol. 103.2081, 2012   S. Seo  E  Yoo n, J  K i m  S  J i n  J-S. K i m   and S   Ma e n g HAMA: An Efficient matrix computation with the MapReduce framework," in 2010, pp. 721-726   S. S a l i h ogl u  and J  W i d o m  G PS A G r a ph P r oc e s s i n g Sy s t em    Stanford University, Technical Report 2011   R L i cht e n w a l t e r and N   Cha w la D is Ne t  A fr am ew ork for  distributed graph computation," in  2011   K  Maddu r i  D. E d i g er K   J i an g  D. Bad e r  and D  Cha v a r riaMiranda, "A faster parallel algorithm and efficient multithreaded implementations for evaluating betweenness centrality on massive datasets," in 2009   E  K r e p s k a, T  K i el m a nn, W  F o kkink, H   Ba l, "A  hi g h level framework for distributed processing of large-scale graphs," in 2011, pp. 155-166   L   Pa ge  S  B r in R. M o t w ani and T  W i nogr ad  T h e P a geRank citation ranking: Bringing order to the web," Stanford InfoLab Technical Report 1999-66, 1999   U  Brand  s  A f a s t er  a l gor ith m for  b e t w eenn e s s c e nt r a l i t y    vol. 25, no. 2, pp. 163-177 2001   Stan fo r d  Net w or k A na l y s is Pro j e c t  O n l in e    http://snap.stanford.edu    I  S t ant o n and G  K l i o t, "S t r e a m i n g G r aph P a rtiti o n in g  for L a rge Distributed Graphs," Microsoft Corp., Technical Report MSRTR-2011-121, 2011   G   K a ry pis and V   K um a r A fas t and hi g h qua l i t y m u l t i l evel scheme for partitioning irregular graphs," in 1995, pp. 113-122   M. A r m b r u s t e t  a l   A v i ew of  c l o u d  c o m putin g    vol. 53, no. 0001-0782, pp. 50-58 April 2010  
214 


  13  or gani c  c he m i s t r y  i n our  Sol ar  Sy s t e m       Xi a n g  L i r e c e i v e d h i s B  S   m is tr y  fr o m  th e  P e k in g  U n iv e r s ity  C h in a  in  2 0 0 3  and P h D   i n P hy s i c al  C he m i s t r y  f r om  t he  J ohns  H opk i ns  Un i v e r s i t y  i n  2 0 0 9   He  h a s  b e e n  a  R e s e a r c h  A s s o c i a t e  wi t h  a  j o i n t  a p p o i n t m e n t  a t  t h e  U n i v e r s i t y  o f  M a r y l a n d   Ba l t i m o r e  C o u n t y  a n d  N AS A G o d d a r d  S p a c e  Fl i  Ce n t e r  s i n c e  2 0 1 1   H i s  r e s e a r c h  f o c u s e s  o n  t h e  d e t e c t i o n  of  t r ac e  e l e m e nt  and as t r obi ol ogi c al l y  r e l e v ant  or gani c  mo l e c u l e s  i n  p l a n e t a r y  s y s t e ms   l i k e  M a r s   He  i s  es p eci a l l y i n t er es t ed  i n  t h e d evel o p m en t  o f  T i m e of  and I on T r ap m as s  s pe c t r om e t e r s w i t h v a r i o u s i o n i z a t i o n  ng te c h n iq u e s   Wi l l  B r i n c k e r h o f f  sp a c e  sc i e n t i st  i n  t h e  Pl a n e t a r y  En v i r o n m e n t s  La b  a t  N A S A  s  G o d d a r d  Spac e  F l i ght  C e nt e r  i n Gr e e n b e l t   M D w i t h  pr i m ar y  r e s pons i bi l i t y  f or  th e  d e v e lo p m e n t o f th e  L D TO F  m a s s  s p e c t r o  th is  p r o je c t H e  h a s  fo c u s e d  re c e n t l y  o n  t h e  d e v e l o p m e n t  o f  m i n i a t u re  l a se r d ma s s  s p e c t r o me t e r s  f o r  f u t u r e  p l a n e t a r y  mi s s i o n s  a l o n g  wi t h  b a s i c  e x p e r i m e n t a l  r e s e a r c h  i n  a s t r o b i o l o g y  a n d  p r e bi ot i c  s y nt he s i s   D r   B r i nc k e r hof f  i s  i nv ol v e d i n t he  de v e l opm e nt  of  m as s  s pe c t r om e t e r  f or  bot h t he  2011 Ma r s  S c i e n c e  L a b o r a t o r y  a n d  t h e  2 0 1 8  E x o Ma r s  mi s s i o n s   


  14   


Copyright © 2009 Boeing. All rights reserved  Issues and Observations Initial load of one day of data ~ 7 hours Optimizations  Write data in batches  Use a mutable data structure to create data strings  Deploy a higher performance machine  Use load instead of insert  Use DB2 Range-Partitioned tables  Database tunings Time reduced from 7 hours to approx 30 minutes 


Copyright © 2009 Boeing. All rights reserved  Optimizations Use a mutable data structure to create data strings  Original application created the SQL statement by appending elements to a Java String  It was taking five hours \(of the seven hours Strings  Instead Java StringBuilder used  Java Strings immutable  Time savings of 71.4 


Copyright © 2009 Boeing. All rights reserved  Optimizations Deployed on a higher-performance machine  Application ported from IBM Blade Center HS21 \(4GB of RAM and 64-bit dual-core Xeon 5130 processor to Dell M4500 computer \(4GB of RAM and 64-bit of quad-core Intel Core i7 processor  Reduced the time to thirty minutes Bulk loading instead of insert  Application was modified to write CSV files for each table  Entire day worth of data bulk loaded  Reduced the time to fifteen minutes 


Copyright © 2009 Boeing. All rights reserved  Optimizations Range-Partitioned tables \(RPT  To limit the size of tables, the original code created multiple tables per table type  This puts burden on the application to query multiple tables when a range crosses several tables  With RPT, user is not required to make multiple queries when a range crosses a table boundary  Increased the time to thirty minutes  Additional fifteen minute cost per day of partitioning enabled time savings during queries 


Copyright © 2009 Boeing. All rights reserved  Optimizations Database tunings  Range periods changed from a week to a month  Automatic table space resizing changed from 32MB to 512KB  Buffer pool size decreased  Decreased the time to twenty minutes Overall, total time savings of 95.2 


Copyright © 2009 Boeing. All rights reserved  20 IBM Confidential Analytics Landscape Degree of Complexity Competitive Advantage Standard Reporting Ad hoc reporting Query/drill down Alerts Simulation Forecasting Predictive modeling Optimization What exactly is the problem What will happen next if What if these trends continue What could happen What actions are needed How many, how often, where What happened Stochastic Optimization Based on: Competing on Analytics, Davenport and Harris, 2007 Descriptive Prescriptive Predictive How can we achieve the best outcome How can we achieve the best outcome including the effects of variability Used with permission of IBM 


Copyright © 2009 Boeing. All rights reserved Initial Analysis Activities Flights departing or arriving on a date Flights departing or arriving within a date and time range Flights between city pair A,B Flights between a list of city pairs Flights passing through a volume on a date. \(sector, center, etc boundary Flights passing through a volume within a date and time range Flights passing through an airspace volume in n-minute intervals All x-type aircraft departing or arriving on a date Flights departing or arriving on a date between city pair A,B Flights departing or arriving on a date between a list of city pairs Flights passing through a named fix, airway, center, or sector Filed Flight plans for any of the above Actual departure, arrival times and actual track reports for any of the above 


Copyright © 2009 Boeing. All rights reserved  Initial SPSS Applications Show all tracks by call sign 


Copyright © 2009 Boeing. All rights reserved  Predictive / Prescriptive Analytics Use-Case For a given Airspace Volume of Interest \(AVOI compute distinct traffic volume at some point in the future  Aim to alert on congestion due to flow control areas or weather if certain thresholds are exceeded  Prescribe solution \(if certain thresholds are exceeded Propose alternate flight paths  Use pre-built predictive model  SPSS Modeler performs data processing Counts relevant records in the database \(pattern discovery Computes traffic volume using statistical models on descriptive pattern Returns prediction with likelihood 


Copyright © 2009 Boeing. All rights reserved  Predictive / Prescriptive Analytics Use-Case Advanced Arrival Procedures with Active Abatement Potentials   9/23/10  24 Pulls in the TRACKINFO table of MAIN using SQL Limits the data to database entries which fall inside the AVOI Combines the SOURCE_DATE and SOURCE_TIME to a timestamp that can be understood by modeler Computes which time interval the database entry falls in. The time interval is 15 minutes Defines the target and input fields needed for creating the model Handles the creation of the model Produces a graph based off of the model results Final prediction 


Copyright © 2009 Boeing. All rights reserved  Initial Cognos BI Applications IBM Cognos Report Studio  Web application for creating reports  Can be tailored by date range, aircraft id, departure/arrival airport etc  Reports are available with links to visuals IBM Framework Manager  Used to create the data package  Meta-data modeling tool  Users can define data sources, and relationships among them Models can be exported to a package for use with Report Studio 


Copyright © 2009 Boeing. All rights reserved  Flights Departing Las Vegas on Jan 1, 2012 1 of 3 Report shows the departure date, departure and arrival locations and hyperlinks to Google Map images DeparturePosition and ArrivalPosition are calculated data items formatted for use with Google Maps Map hyperlinks are also calculated based on the type of fix 


Copyright © 2009 Boeing. All rights reserved  Flights Departing Las Vegas on Jan 1, 2012 2 of 3 DeparturePosition, Departure Map, ArrivalPosition and Arrival Map are calculated data items \(see departure items below DepartureLatitude DepartureLongitude DeparturePosition Departure Map 


Copyright © 2009 Boeing. All rights reserved  Flights Departing Las Vegas on Jan 1, 2012 3 of 3 


Copyright © 2009 Boeing. All rights reserved  Conclusion and Next Steps Current archive is 50 billion records and growing  Approximately 34 million elements per day  1GB/day Sheer volume of raw surveillance data makes analytics process very difficult The raw data runs through a series of processes before it can be used for analytics Next Steps  Continue application of predictive and prescriptive analytics  Big data visualization 


Copyright © 2009 Boeing. All rights reserved  Questions and Comments Paul Comitz Boeing Research & Technology Chantilly, VA, 20151 office Paul.Comitz@boeing.com 


Copyright © 2009 Boeing. All rights reserved Advanced Arrival Procedures with Active Abatement Potentials   9/23/10  31 


Copyright © 2009 Boeing. All rights reserved Advanced Arrival Procedures with Active Abatement Potentials   9/23/10  32 Backup Slides 


Copyright © 2009 Boeing. All rights reserved  Initial Approach Initial Investigations  Apache Solr/Lucene  Data Warehouse Evaluate Hadoop in the future 


Copyright © 2009 Boeing. All rights reserved  Using SOLR Uncompress Track Information Messages To use with Solr  Transforming track messages from their  original schema to Solr required building a key, value list using an XSTL  Queries made against this list of key, value pairs Transformation Process  One day of data ~ 4.5 hours Once transformation complete search/query performance very good Geo spatial queries using  unique query language 


Copyright © 2009 Boeing. All rights reserved  Representation Aviation data is frequently represented in more than one form 


