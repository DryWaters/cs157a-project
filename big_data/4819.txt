Incremental mining alogorithm Pre-FP in association rules based on FP-tree  LIU Jian-ping, WANG Ying, YANG Fan-ding The College of Informatics & Electronics Zhejiang Sci-Tech University Hangzhou, China liujp@hzcnc.com  Abstract At present, most of association rule mining are static mining algorithms. However, in real Web applications, new transactions are usually incrementally inserted into database the previous algorithms  couldn’t satisfy the rapid growth like this. In this paper, we proposed the incremental mining algorithms called Pre-FP based on PUFP-tree and Per-largeitemsets. This algorithm don’t need rescan the original database when the new transactions surpass the fixed 
threshold , especially when each time the small fraction of transactions are inserted, Pre-FP can achieve a good execution efficiency for renewing construction of frequent pattern tree  Key words: Data Mining; web usage mining;  association rule;  incremental mining I  INTRODUCTION Association rule mining is important in many data mining tasks. Since people like Agrawal proposed this concept  researches that related to association rule mining are always very active. The previous association rule mining algorithms, such as Apriori, FP-growth mining algorithms and so on, are all based on the same premise----the tuples in database are not changed. But in real conditions, transaction 
database will renew a lot of new transactions everyday. In this case, the association rules which are mined from the original database may be invalid, or there will be new association rules produced. The incremental updating algorithm of association rules \(maintenance algorithm\ is used to tell us how to mine the association rules efficiently when the premise is not successful. The key point to make these algorithms efficient lies in using the existing results of mining as many as possible to produce the small candidate itemsets or reduce the times of scanning the database. Now most of incremental updating algorithms are the improvement and optimization which take Apriori algorithms as core. For example, Cheung proposed a 
incremental mining algorithm called Fast-Up-Data \(FUP   in 1996. FUP algorithms improved on the basis of the Apriori algorithm and used the branch cut technique of Direct Hashing and Pruning\(DHP  First, it mined the frequent itemsets from the additional tansactions, then compared them with the ones that mined from the tansaction database before.  According to the results of comparing, FUP decided that if the whole tansaction database needed to be rescanned. The above procedure dramatically reduced the time of renewing the association rules Although FUP achieved the idea of incremental mining however, in some certain conditions, the algorithms still need to rescan the original database. Hong 
 proposed a new Prelarge-itemsets algorithm which can reduce the times of rescanning the original database in 2001. The algorithm used two different support threshold, “lower” and “upper”, to define the frequency of item for the first time. This algorithm doesn’t need rescan the original database when the database is growing, unless there are a lot of new tansactions coming out, thus, Pre-large-itemsets algorithm greatly reduced the time of the renewing association rules In order to achieve the idea of FUP algorithm, Hong, Lin and Wu  designed a new FUFP-tree on the basis of FP-tree to improve the efficiency of processing the tree reconstruction after adding the new tansactions into the 
original database. In this paper, we proposed a new incremental mining algorithm called Pre-FP which was based on PUFP-tree and Per-Large-Itemsets  This algorithm refered Pre-large-itemsets to define two support threshold to solve the problem that inconsistent frequency of the new itemsets in the original database and the new tansaction sets. Pre-FP can renew association rules all the time and doesn’t need to rescan the whole database in the process of database growth. Unless the amount of the emergence of new tansactions is greater than a set threshold this threshold depends on the size of the two support threshold and database II  
THE  INTRODUCTION  OF  RELATED  TECHNOLOGY A  FUFP-tree The construction algorithm of FUFP-tree is almost the same as FP-tree, the only difference is that the links between parent nodes and child nodes are bi-directional. The improvement is able to quickly find the nodes which should be removed in the process of renewing FUFP-tree. In addition, all the frequent items and their support counts need to be saved in the item header tables FUFP-tree must complete before adding the new tansactions , after adding the new tansactions, the renew programs of FUFP-tree will renew FUFP-tree with adding 
the new tansactions while don’t need to rescan the original database. The new items will be divided into four parts according to the frequency in the original database and the additional new tansaction sets , every part will be renewed into FUFP-tree through the different processes During the process of renewing FUFP-tree, after an original frequent item became infrequent, it will be removed from FUFP-tree directly, then, its parent nodes and child nodes will be linked with each other. Corresponding, after an original infrequent item became frequent for adding the new 
2010 First International Conference on Networking and Distributed Computing 978-0-7695-4207-2/10 $26.00 © 2010 IEEE DOI 10.1109/ICNDC.2010.49 199 
2010 First International Conference on Networking and Distributed Computing 978-0-7695-4207-2/10 $26.00 © 2010 IEEE DOI 10.1109/ICNDC.2010.49 199 


transaction sets, its support usually surpassed support threshold a little, thus, it can be added into the end of the item header table. FUFP-tree need to be rebuilt once time only if the original database increased many tansactions. The updating method greatly improved the efficiency of FUFPtree update algorithm and saved a lot of time of rebuilding trees B  Pre-large-itemsets T.P.Hong and Y.H.Tao first proposed using the two support threshold called “lower” and “upper” to define a new sort of itmset 000 Pre-large-itemsets in the documents  The definition of upper threshold is the same as that in the general mining algorithms. The definition of lower  threshold is the minimum support threshold of Pre-large-itemsets. If the support count of an item is less than lower, the item is considered to be infrequent. Pre-large-itemsets are considered to be a buffer pool in the process of the incremental mining to reduce the repeated operations which changes the frequent item into infrequent item, and vice versa After defined the two support threshold, the original database that is added new transaction sets can be expressed as 9 kinds of situations. The specific classifications are shown in Fig.1, the properties of each case ’s frequency are presented as follows a  An itemset is frequent in both D and T This kind of item set must be frequent in D T 000  b  An itemset X is frequent in D but it is infrequent in T This kind of itemset may be frequent in D T 000 The support of itemset in D is known , we only need to obtain the support of the itemset in T then, through calculating if the inequality   DT X count X count upper D T 002 is successful, so we can decide its frequency in D T 000  c  An itemset is infrequent in D while it is frequent in T This kind of itemset may be also frequent in D T 000 The support of itemset in T can be gotten directly, but the support of itemset in D needs to rescan D At last, the itemset is decided if it is frequent in D T 000 by calculating d  An item set is infrequent in both D and T This kind of item set must be infrequent in D T 000   Figure 1  9 kinds of situations of the renewed original database Obviously, weighted counts in situation 1, 5, 6, 8, 9 can’t affect the association rules mined. Situation 2, 3 may reduce the existing association rules. Situation 4, 7 may increase the new association rules. If we save frequent itemsets, Prelarge-itemsets and their support counts after renewed every time , the results of Situation 2, 3, 4 will be relatively easy to calculate. In the whole process of renewing, compared with original transaction sets, the additional transaction sets are generally very small, especially when the original database is increasing very quickly. The items of situation 7 in the renewed transaction database can’t change to be frequent items unless the number of transactions in the additional transaction sets surpasses f  f is defined as following     1 ul u d SS f S    000 000 000 000 000 000  f is called as the safety threshold of the new transaction sets u S is upper threshold l S is lower threshold d is the number of transaction in the original database. The 9 kinds of situations above and their renewed results are in Table 1  TABLE I  THE  9  KINDS  OF  SITUATIONS  AND  THEIR  RESULTS  III  INCREMENTAL  MINING  ALGORITHM  PRE-FP The impoved algorithm in this paper will use the tree structure of FUFP-tree and the theory of Pre-large-item FUFP-tree in the original transaction database must be finished before adding the new transactions. It used the same method of building FP-tree. First, scan the whole transaction database, find frequent 1-itemsets by Pre-defined minimum support threshold. Then, frequent 1-itemsets are arranged in descending order. Finally, rescan transaction database construct FUFP-tree by frequent items in frequent 1itemsets. The whole process is building in transactions, when all the transactions were completed, the building is over. In addition, define another variable c in order to record the new additional transactions since rescanned the original data sets Situations 002 original database new tansaction sets Renewed results situation1:Frequent-Frequent Frequent situation2 :Frequent–Pre-large Need to judge f requent or Prelarge from specific cases situation3:Frequent– infrequent Need to judge Frequent 002 Prelarge or infrequent from specific cases situation4:Pre-large–Frequent Need to judge Pre-large or Frequent from specific cases situation5 :Pre-large–Pre-large Pre-large situation6 :Pre-large–infrequent Need to judge Pre-large or in f requent situation7:infrequent–frequent W hen the number of additional tansactions is less than f it is infrequesnt or Pre-large situation8 :infrequent–Pre-large Infrequent or Pre-large situation9 :infrequent–infrequent Infrequent 
200 
200 


last time. The marks which are used in Pre-FP algorithm are shown in Table 2  TABLE II  MARK  THE  DEFINTIONS Marks Definition D original database T new additional transaction sets U Renewed transaction database 002 for example D d 000  d The number of transactions in D  t  The number of transactions in T  S t  support threshold of Lower S u  support threshold of upper I  Items  D I S  support count of I in D   T I S  support count of I in T   U I S  support count of I in U  Insert_Items itemsets which need to update into FUFPtree in T  Branch_Items itemsets which need to update into FUFPtree in D  Rescan_Items the itemsets which need to rescan the whole original transaction database to decide if they are frequent  The algorithm is described as follows Input: a tansaction database which has   dc   transactions, item header table which saved frequent 1itemsets in descending order, corresponding FUFP-tree support threshold of lower l S support threshold of upper u S  Pre-large-item list which is used to save Pre-large-items of original transaction database, the new transaction sets which have t transactions Output: a updated FUFP-tree Step 1: According to the formula  1 ul u d SS f S    000ª\000 000«\000 000¬\000 we can calculate the safety threshold f of the new transaction sets Step 2: Get all the item and their support through scanning the new transaction sets Step 3: the items in new transaction sets are sorted into frequent, Pre-large and infrequent by their support in the original transaction database Step 4: For item of I which was generated in Step 3, if it is frequent in the original transaction database \(the elements in the item head table\, execute the following steps\(Corresponds to the situation1, 2 and 3 in Fig.1 Substep 4.1: The support of I in the renewed transaction database is updated into    UDT I II SSS  002  D I S is the support of I in the renewed transaction database  T I S is the support in the new transaction sets Substep 4.2: If   U U Idct SS  002 the support count of I in the item header table will be updated into  U I S and I is put into Insert_Items, it will be processed in step 10. If      U Ul Idct SS S 002++\002  I will be removed from the item header table, the parent nodes and child nodes of I are linked in FUFP-tree, set   DU I I SS   and save I and its support count  D I S in the Pre-large item list. If      U l Idct SS  003  I will be removed from the item header table, the parent nodes and child nodes of I are linked in FUFP-tree Step 5: For the item I which was generated in Step 3, if it is Pre-large in the original transaction database, execute the following steps \(Corresponds to the situation4, 5 and 6 in Fig.1 Substep 5.1: the support of I in the updated transaction database is    UDT I II SSS   Substep 5.2: If      U U Idct SS  002 item I became frequent after the original transaction database updated, put I  into Insert_Items and Branch_Items, it will be processed in step 8. If      U Ul Idct SS S 002++\002   set   DU I I SS   and save I and its support  D I S into the Pre-large table. If   U l Idct SS  003  I will be removed from the Prelarge table Step 6: For the item I which was generated in Step 3 002 if it is infrequent in the original transaction database while it is frequent or Pre-large in the new transaction sets \(situation 7 and 8 in Fig.1\ut I into Rscan_Items, these items will be used in rescanning database in step 7 Step 7: If tc f 003 or Rscan_Items is null, do no action else operate the item I in Rscan_Items as followings Substep 7.1: rescan the original database to calculate the support count of I called  D I S  Substep 7.2: the support of I in the renewed transaction database is    UDT I II SSS   Substep 7.3: If      U U Idct SS  002  I becomes frequent item after renewed the original transaction database put I into Insert_Items and Branch_Items. If   U Ul Idct SS S 002++\002 and save I and its support  D I S in the Pre-large table. If      U l Idct SS  003 do no action Step 8: put the items in Branch_Items into the end of the item header table, they are sorted in descending order in the new support count Step 9: For the item I in Branch_Items which has already been exsited in the original transaction database, if I doesn’t appear in the corresponding transaction branch in FUFP-tree put I into the end of transaction branch, and set the support count of I as 1, else add 1 into the support count of I  Step 10: the item I in Insert_Items which appeared in the new transaction sets, if I doesn’t appear in the corresponding transaction branch in FUFP-tree, put I into the end of the new transaction branch,  and set the support count of I as 1 else add 1 into the support count of I  
201 
201 


Step 11: if tc f  set ddtc  0 c  else ctc   In step 9, the corresponding transaction branch is the branch which is generated by frequent items in every transaction according to the sequence in the item header table. After step 11 is executed , a new FUFP-tree is built through Pre-FP Update Algorithm, the new transaction sets have already added into the original transaction database to form a new transaction database. According to the new generated FUFP-tree, we can mine the association rules by FP-growth algorithm   IV  EXPERIMENTAL  ANALYSIS  OF  ALGORITHMS In this segment, we use FP-tree, FUFP-tree and Pre-FP separately to mine the transaction database. Every time the new transaction sets are produced, the FP-tree algorithm adds the new transaction sets to the original database, and then reconstruct the FP-tree. But the incremental mining algorithm, FUFP-tree and Pre-FP, deal with the new transaction sets in incremental way with the existing mining results In order to show the results of the improvement, the mining date source used a larger log sample from online shopping system of Zhejiang Sci-Tech university campus network sites The experiment is divided into two parts, in the first test pick the top 10000 transactions from the transaction database to construct FP-tree. The minimum support threshold is set to 1%-5%, and increases 1% every time, the three kinds of algorithms are compared, then, 800 transactions which are supposed as a new additional transaction sets are used to simulate the growth of database. The upper threshold of PreFP algorithm is set to 1%-5% which add 1% every time, the lower threshold is set to 0.5%-2.5% which add 0.5% every time. The execution time of the three algorithms in different support threshold is shown in Fig.2   Figure 2  the comparison of execution time under the different support threshold From Fig.2 we can see the time-consuming of the FP-tree is much more than the other two incremental algorithms because after the new transaction was added to database every time, FP-tree must be reconstructed, which consumes a lot of time. The execution time of Pre-FP is superior to FUFP-tree, because the times that Pre-FP rescans the whole transaction database are less than FUP algorithm. With this in mind, the new increased nodes are always added into the end of the item header table, the updated tree structure of Pre-FP updating algorithm may be different from the one that is reconstructed by using FP-tree construction algorithm The effectiveness of Pre-FP is shown in Fig.3, we can see the number of nodes which are generated by the three kinds of algorithms is almost the same, so the tree structure that can be constructed is basically same. So we can conclude that the validity of Pre-FP algorithm is acceptable   Figure 3  comparison of the number of nodes under the different support threshold The second test is used to compare the execution time and the number of generated nodes of the three kinds of algorithms under the different numbers of the new transaction sets. The minimum support threshold of FP-tree and FUFP-tree algorithm is set to be 4%, Pre-FP algorithm upper and lower thresholds are set to be 4% and 2 separately. Pick the top 10000 transactions from the transaction database to construct FP-tree, in the rest transaction sets, we take a group for every 800 as a new transaction sets to add into the original transaction database The results of the experiment are shown in Fig.4 and Fig.5 Noting that in Fig.4, with the emergence of the new transaction sets and the growth of the original transaction database, compared to FUFP-tree algorithm, the advantages of the Pre-FP algorithm are more and more obvious. Because with the original database increasing, according to the formula  1 ul u d SS f S    000 000 000 000 000 000  f will  also increase continuously, which means that more new transactions can be added without rescanning the transaction database. With the growth of the transaction database, the relative efficiency of Pre-FP algorithm will become increasingly evident, this feature is very ideal for the rapid growth of the Web usage mining. The results of the experiment for Fig.5 show that with the transaction database increasing, the numbers of nodes which are generated by the three kinds of algorithms are almost the same, which proved the effectiveness of the algorithms under different growth amplitudes of the database 
202 
202 


Through the experiments above, we can prove that the execution efficiency of Pre-FP is much higher than the traditional static mining algorithm PF-tree, comparing to the existing incremental mining algorithm FUFP-tree, Pre-FP also have some advantages, and its validity is as good as the other two algorithms  Figure 4  Comparison of the execution time of adding new transaction sets continuously  Figure 5  Comparison of the generated nodes of adding new transaction sets continuously V  CONCLUSIONS This paper proposed a kind of new incremental mining algorithm Pre-FP based on the theory of Pre-large-itemsets its main idea is that through predefined the two support threshold “upper” and “lower”,  set a Pre-large itemsets besides the frequent itemsets and the infrequent ones, when the new transaction sets are adding, the frequent items don’t be transformed into infrequent ones or the infrequent items don’t be transformed into the frequent ones directly, but the items are put into Pre-large itemsets first. This method reduced the times of rescanning the original transaction database On the basis of the experiment, made a comparison between Pre-FP algorithm and the other two algorithms in the performance and the results of mining, the experimental results show that Pre-FP algorithm has shorten the execution time and has no difference in the results of implementation compared to FP-tree and FUFP-tree, it achieved a good balance between the execution time and the structural complexity R EFERENCES  1  R.Agrawal, T.Imielinski and A.Swami. Mining  association rules between sets of items in large database[C h e  19 9 3 A C MSIGMOD, Washington, USA, 1993: 207~216 2  D.W.Cheung, J.Han. Maintenance of discovered association rules in large databases: an incremental updating approach[C  I n Th e t w e l f t h  IEEE international conference on data engineering, 1996:106~114 3  J.S.Park, M.S.Chen and P.S.Yu. Using a hash-based method with transaction trimming for mining association rules [J   I EEE Transactions on Knowledge and Data Engineering, 1997: 812~825 4  T.P.Hong, J.W.Lin and Y.H.Tao. A new incremental data mining algorithm using pre-large itemsets [J  I n te l l i ge nt D a ta A n al y s is  2001,  5\(2\, 111~129 5  T.P.Hong, J.W.Lin and Y.H.Wu. A fast updated frequent pattern tree I n T h e  I EEE I n te r n atio n a l c o n f e r e n ce o n sy ste m s, ma n a n d  cybernetics, 2006: 2167~2172 6  J.Han, J.Pei and Y.Yin, Mining frequent patterns without candidate generation  T h e 2 000 A C M SI G M OD Da lla s  USA  2 000      
203 
203 


        


         


Future work includes new approaches that can be used in association with multiobjectives we have not taken into account in this study as can be interestingness measure In the future we will explore the use of rare itemsets 21 by modifying our algorithm to work with this type of patterns In this eld we will verify the performance of multiobjective algorithms as we have done in the present study A CKNOWLEDGMENT This research is subsidized by the Regional Andalusian Government and Ministry of Science and Technology projects P08-TIC-3720 TIN2008-06681-C06-03 and FEDER founds R EFERENCES  F  Bodon  A tire-based apriori implementation for mining frequent item sequences in 1st International Workshop on Open Source Data Mining Frequent Pattern Mining Implementation  2005 pp 56–65  C Bor gelt Ef cient implementations of Apriori and Eclat  i n FIMI’03 1st Workshop on Frequent Itemset Mining Implementations Melbourne Florida USA  December 2003  R Agra w a l and R Srikant F ast algorithms for mining association rules in large databases in VLDB’94 Proceedings of 20th International Conference on Very Large Data Bases Santiago de Chile Chile  September 1994 pp 487–499  R Agra w al T  Imielinski and A N Sw ami Mining association rules between sets of items in large databases in SIGMOD Conference Proceedings of the 1993 ACM SIGMOD International Conference on Management of Data Washington D.C  May 1993 pp 207–216  J Mata J L Alv arez and J C Riquelme Discovering Numeric Association Rules via Evolutionary Algorithm  ser Lecture Notes in Computer Science 2002 vol 2336/2002 pp 40–51  X Y an D Zhang and S Zhang Genetic algorithm-based strate gy for identifying association rules without specifying actual minimum support Expert Systems with Applications   A E Eiben and J E Smith Introduction to Evolutionary Computing  Springer-Verlag New York LLC 2003  X Zhu Y  Y u  and X Guo Genetic algorithm based on e v olution strategy and the application in data mining in ETCS’09 International Workshop on Education Technology and Computer Science Wuhan Shi China  March 2009 pp 848–852  P  A Whigham Grammatically-based genetic programming  i n Proceedings of the Workshop on Genetic Programming From Theory to Real-World Applications Tahoe City California USA  J P Rosca Ed July 1995 pp 33–41  M L W ong and K S Leung Data Mining Using Grammar-Based Genetic Programming and Applications  Norwell MA USA Kluwer Academic Publishers 2000  J Couchet D Manrique J R  os and A Rodr  guez-Pat  on Crossover and mutation operators for grammar-guided genetic programming Soft Comput  vol 11 no 10 pp 943–955 2007  A Ghosh and B Nath Multi-objecti v e rule mining using genetic algorithms Inf Sci  vol 163 no 1-3 pp 123–133 2004  S Dehuri A Jagade v  A Ghosh and R Mall Multi-objecti v e genetic algorithm for association rule mining using a homogeneous dedicated cluster of workstations American Journal of Applied Sciences  vol 11 no 3 pp 2086–2095 2006  K Deb A Pratap S Agra w al and T  Me yari v an  A f a st elitist multi-objective genetic algorithm NSGA-II IEEE Transactions on Evolutionary Computation  vol 6 pp 182–197 2000  K Deb S Agra w al A Pratap and T  Me yari v an  A f a st elitist nondominated sorting genetic algorithm for multi-objective optimization NSGA-II in PPSN VI Proceedings of the 6th International Conference on Parallel Problem Solving from Nature Paris France  SpringerVerlag September 2000 pp 849–858  E Zitzler and L Thiele Multiobjecti v e e v olutionary algorithms a comparative case study and the strength pareto approach IEEE Trans Evolutionary Computation  vol 3 no 4 pp 257–271 1999  E Zitzler  M  Laumanns and L Thiele Spea2 Impro ving the strength pareto evolutionary algorithm for multiobjective optimization in Evolutionary Methods for Design Optimisation and Control with Application to Industrial Problems EUROGEN 2001  K Giannakoglou et al  Eds International Center for Numerical Methods in Engineering CIMNE 2002 pp 95–100  J Han and M Kamber  Data Mining Concepts and Techniques  2nd ed ser The Morgan Kaufmann Series in Data Management Systems Morgan Kaufmann 2006  S V entura C Romero A Zafra J Delgado and C Herv  as JCLEC a framework for evolutionary computation  ser Soft Computing Springer Berlin  Heidelberg 2007 vol 12 pp 381–392  Y  K o h and N Rountree Rare Association Rule Mining and Knowledge Discovery Technologies for Infrequent and Critical Event Detection  Information Science Reference Hershey New York 2010  M Adda L W u  and Y  Feng Rare itemset mining  i n ICMLA’07 Sixth International Conference on Machine Learning and Applications Cincinnati Ohio  December 2007 pp 73–80 


9 Appendix Fig 6: Forest Cover Types of the U.S. \(Source. USGS National Atlas of US Summary of Forest Cover Type Data Type Multivariate Abstract The forest cover type for 30 x 30 meter cells obtai ned from US Forest Service \(USFS\ Region 2 Resource Information System RIS\ data Data Characteristics The actual forest cover type for a given observatio n \(30 x 30 meter cell\ was determined from US Fores t Service \(USFS\ Region 2 Resource Information System RIS data Independe nt variables were derived from data originally obta ined from US Geological Survey \(USGS\ and USFS data. Data is in raw form \(not scaled\ and contains binary \(0 or 1 columns of data for qualitative independent variables \(wilderness areas and soil types Summary Statistics Number of instances observations 581012 Number of Attributes 54 Attribute breakdown 12 measures, but 54 columns of data \(10 quantitativ e variables, 4 binary wilderness areas and 40 binary soil type variables Missing Attribute Values None 43 


   C4.2 Open GL has excellent documentation that could help the developer learn the platform with ease C4.3 Developer has very little ex perience in working with Open GL platform  For our case study, alternative B i.e. Adobe Director was the most favorable alternative amongst all the three. It catered to the reusability criteria quite well and aimed at meeting most of the desired operational requirements for the system   6. CONCLUSION & FUTURE WORK  The main contribution of this paper is to develop an approach for evaluating performance scores in MultiCriteria decision making using an intelligent computational argumentation network. The evaluation process requires us to identify performance scores in multi criteria decision making which are not obtained objectively and quantify the same by providing a strong rationale. In this way, deeper analysis can be achieved in reducing the uncertainty problem involved in Multi Criteria decision paradigm. As a part of our future work we plan on conducting a large scale empirical analysis of the argumentation system to validate its effectiveness   REFERENCES  1  L  P Am g o u d  U sin g  A r g u men ts f o r mak i n g an d  ex p lain in g  decisions Artificial Intelligence 173 413-436, \(2009 2 A  Boch m a n   C ollectiv e A r g u men tatio n    Proceedings of the Workshop on Non-Monotonic Reasoning 2002 3 G  R Bu y u k o zk an  Ev alu a tio n o f sof tware d e v e lo p m en t  projects using a fuzzy multi-criteria decision approach Mathematics and Computers in Simualtion 77 464-475, \(2008 4 M T  Chen   F u zzy MCD M A p p r o ach t o Selec t Serv ice  Provider The IEEE International Conference on Fuzzy 2003 5 J. Con k li n  an d  M. Beg e m a n   gIBIS: A Hypertext Tool for Exploratory Policy Discussion Transactions on Office Information Systems 6\(4\: 303  331, \(1988 6 B P  Duarte D e v elo p in g a p r o jec ts ev alu a tio n sy ste m based on multiple attribute value theroy Computer Operations Research 33 1488-1504, \(2006 7 E G  Fo rm an  T h e  A n a l y t ic Hier a rch y P r o cess A n  Exposition OR CHRONICLE 1999 8 M. L ease  an d J L  L i v e l y  Using an Issue Based Hypertext System to Capture Software LifeCycle Process Hypermedia  2\(1\, pp. 34  45, \(1990 9  P e id e L i u   E valu a tio n Mo d e l o f Custo m e r Satis f a c tio n o f  B2CE Commerce Based on Combin ation of Linguistic Variables and Fuzzy Triangular Numbers Eight ACIS International Conference on Software Engin eering, Artificial Intelligence Networking and Parallel Distributed Computing, \(pp 450-454 2007  10  X  F L i u   M an ag e m en t o f an In tellig e n t A r g u m e n tatio n  Network for a Web-Based Collaborative Engineering Design Environment Proceedings of the 2007 IEEE International Symposium on Collaborative Technologies and Systems,\(CTS 2007\, Orlando, Florida May 21-25, 2007 11 X. F L i u   A n In ternet Ba se d In tellig e n t A r g u m e n tatio n  System for Collaborative Engineering Design Proceedings of the 2006 IEEE International Symposium on Collaborative Technologies and Systems pp. 318-325\. Las Vegas, Nevada 2006 12 T  M A sub jec tiv e assess m e n t o f altern ativ e m ission  architectures for the human exploration of Mars at NASA using multicriteria decision making Computer and Operations Research 1147-1164, \(June 2004 13 A  N Mo n ireh  F u zzy De cisio n Ma k i n g b a se d o n  Relationship Analysis between Criteria Annual Meeting of the North American Fuzzy Information Processing Society 2005 14 N  P a p a d ias HERMES Su p p o rti n g A r g u m e n tative  Discourse in Multi Agent Decision Making Proceedings of the 15th National Conference on Artifical Intelligence \(AAAI-98  pp. 827-832\dison, WI: AAAI/MIT Press,  \(1998a 15  E. B T riantaph y llo u   T h e Im p act o f  Ag g r e g atin g Ben e f i t  and Cost Criteria in Four MCDA Methods IEEE Transactions on Engineering Management, Vol 52, No 2 May 2005 16 S  H T s a u r T h e Ev alu a tio n o f airlin e se rv ice q u a lity b y  fuzzy MCDM Tourism Management 107-115, \(2002 1 T  D W a n g  Develo p in g a f u zz y  T O P S IS app r o ach  b a sed  on subjective weights and objective weights Expert Systems with Applications 8980-8985, \(2009 18 L  A  Zadeh  F u z z y Sets   Information and Control 8  338-353, \(1965  152 


                        





