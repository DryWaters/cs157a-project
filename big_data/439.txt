A General Mining Method for Incremental Updation in Large Databases*t Wan-Jui Lee Department of Electrical Engineering National Sun Yat-Sen University, Taiwan wrlee@water.ee.nsysu.edu.tw Abstract  The database used for knowledge discov ey is dynamic in nature Data may be updated and new transactiom may be added ouer time As a m sult the knowledge discovered from such databases is also dynamic Incremental mining techniques have been developed to speed up the knowledge discovery PTO cess by avoiding re-learning of 
rules from the old data To maintain the large itemsets against the updated database we develop an approach named Negative BOT der using Sliding Window Filtering NB-SWF which adopts the idea of the negative border and the sliding window filtering algorithm Negative border can help reduce the number of scans over the original database and the sliding-window filtering algorithm is to discover new itemsets in the updated database By integrating the sliding-window filtering algorithm with the negative bor der a lot of effort in the re-computation of negative bor der can be saved and the minimal candidate 
set of large itemsets and negative border in the updated database can be obtained eficiently Simulation results have shown that the NB-SWF runs faster than other incremental mining techniques especially when there are few new large itemsets in the updated database Keywords Incremental mining association rules temporal mining 1 Introduction So far, there are three directions of incremental min ing i.e apriori-based negative border and sliding window filtering\(SWF Apriori-based algorithms e.g FUP2 3 level-wisely update the existing large item sets when transactions are added to or deleted from the 
database and tend to suffer from the problem of multi ple scans of database The negative border 6 consists of all itemsets that were candidates but did not have enough support while computing large itemsets in the original database and is used to compute the new set 221Supported by the National Science Council under the grants NSC-91-2213-E110-024 and NSC-91-2213-E-110 025 t0-7803-7952-7/03/\26617.00  2003 IEEE ShieJue Lee Department of Electrical Engineering National Sun Yat-Sen University, Taiwan leesj ee  nsysu  edu  tw of large 
itemsets in the updated database in 6 The availability of the negative border of the set of large itemsets and their counts in the original database can reduce the number of scans over the database to at most once 4 71 However the recompution of negative bor der deteriorates the performance of this method Sliding window filtering SWF 5 21 on the other hand seg ments the database into several partitions and employs the minimum support threshold in each partition to fil ter unnecessary candidate 2-itemsets Under 
SWF the cumulative information of mining previous partitions is selectively carried over toward the generation of candi date itemsets for the subsequent partitions In SWF one scan over the updated database is necessary to find out the large itemsets from the candidate ones In this paper we develop an approach named NB SWF which integrates the SWF algorithm with the neg ative border to save a lot of effort in the re-computation of negative border and obtains the minimal candidate set of large itemsets and negative border in the up dated database 
efficiently Moreover, unnecessary scans over the database can be omitted in NB-SWF In other words we compute a small set of candidate itemsets in an efficient way and the scan over the database with the candidate itemsets can be saved if not necessary The rest of the paper is organized as follows In Sec tion 2 we briefly describe the concept and application of negative border In Section 3 the technique of SWF is introduced In Section 4 we describe our method NB-SWF in detail We give an 
example to illustrate the NB-SWF in Section 5 Simulation results are pro sented in Section 6, and finally a conclusion is given in Section 7 2 Negative Border As mentioned earlier in 61 the concept of negative border is used to compute the new set of large itemsets in the updated database The negative border consists of all itemsets that were candidates but did not have enough support while computing large itemsets in the original database DB That is NBD\(Lk  Ck  Lk 1 1423 


Table 1 An illustrative transaction database Partition I TID I Items I I I 1 I A.C.D.E.F 1 AD AE Table 2 Candidate Z-itemsets generated after scanning partition PI I P I 1 2 1 2 where CI is the set of candidate k-itemsets generated by Lk-1 LI is the set of large k-itemsets and NBD\(LI is the set of k-itemsets in the negative border of the set of large itemsets L In other words the negative bor der contains the closest itemsets that could be frequent For example, let R be a set of items  A B  F and assume the collection of S of large itemsets is A B IC IF A B A C A F IC F A C PI Then the negative border for the above collection is NBD\(S E B C B F Table 3 Candidate 2-itemsets generated after scanning 3 Sliding-Window Filtering SWF 5 is an incremental mining algorithm that di vides the database into partitions and sequentially pre cesses the partitions one by one In th processing of a partition a progressive set of candidate 2-itemsets CZ is generated The concept of the algorithm is described as follows Suppose the database is divided into n parti tions PI  P and the partitions are processed one by one For each large itemset I there must exist some partition Pk such that I is large from partition Pk to Pn If we know a candidate 2-itemset is not large from the starting partition where it becomes large to current partition PI this itemset can be deleted If this itemset is indeed large it must be large in some partition PI where k  k and we can add it to CZ again Thus for each partition P SWF adds new partial large 2 itemsets of P into CZ  records its starting partition P and counts and checks if the present itemsets in CZ are continually large from its starting partition to par tition P If a candidate 2-itemset is no longer partially large this itemset is removed from Cz After all parti tions have been processed the candidate 2-itemsets CZ which is close to the large 2-itemsets will be obtained For the moderate number of candidate itemsets all candidate k-itemsets where k  3 can be generated from candidate 2-itemsets Finally, one database scan is applied to calculate the supports of all candidate item sets and determine the large ones In the following we use an example to illustrate the algorithm of SWF Sup pose we have 9 transactions in the database as shown in  ition Pz and P3 respectively D I AB I 2 DE DF EF 2 2 AF 1 1 2 2 1 1 2    count 3 6 5 5 4 4 6 3 __   __ Table 1 and the database is segmented into three par titions PI Pz and P3 The minimum support thresh old is set to 0.4 To generate CZ we scan each parti tion sequentially After scanning the first segment of 3 transactions candidate 2-itemsets AD AE DE DF are generated with two attributes start partition PI and count as shown in Table 2 Similarly after scanning par tition Pz the counts of potential candidate 2-itemsets are recorded in Table 3 Note that the filtering threshold of those itemsets carried over from the previous phase is 3+3 x 0.4]=3 and that of newly identified candidate itemsets is r3 x 0.41 2 It can be seen from Table 3 that we have 9 candidate itemsets after processing partition Pz and 4 of them are carried over from the partition PI and 5 of them are newly identiied in partition Pz Finally the resulting candidate 2-itemsets after process ing P3 are AB AD AE AF, BF DE DF EF as shown in Table 3 Note that though appearing in the previous phase Pz itemset BE is removed from C2 once P3 is taken into account since its count does not meet the fil tering threshold then i.e 2  3 Consequently we have 8 candidate 2-itemsets generated by SWF Note that 7 of those 8 candidate 2-itemsets are large Z-itemsets which shows that CZ is close to Lz 4 Negative Border using Sliding Window Filtering NB-SWF For easy exposition the meaning of symbols used are given in Table 4 The problem of incremental mining 1424 


Table 4 Meaning of symbols used svmbol I meanine L\222 C\221 DB I the original database large itemsets of the updated database candidate itemsets of the updated database  number of transactions in database d the set of newly added transactions the set of deleted transactions the updated database DB  A  A partition P to P3 in database DB number of transactions in db\224 containing itemset I minimum support threshold number of transactions in partition Pk number of transactions in partition P containing itemset I large itemsets of the original database candidate itemsets of the original database is to find the set of large itemsets L\222 in the updated database DB\221 L\222 may contain some new itemsets called emerged itemsets Some itemsets from L called de clined itemsets may be absent in L\222 Those itemsets which exist both in L\222 and L are retained itemsets 4.1 Description of the Algorithm In order to solve the incremental mining problem ef fectively we maintain the large itemsets and the neg ative border along with their support counts in the database That is for every I E LUNBD\(L we maintain tDB\(I However the number of 2-itemsets in LUNBD\(L is usually too big and therefore costs memory and reduces computational efficiency Thus we adopt the SWF to filter unnecessary 2-itemsets in NBD\(L2 That is the C in Eq.\(l is the set of can didate 2-itemsets C generated by SWF instead of L1 Since Cz is close to L2 as shown in Section 3 our set of NBD\(L2 is much smaller than that in SI In the first step of our algorithm we use SWF to compute candidate itemsets as introduced in Section 3 Then one database scan is applied to calculate the sup ports of all candidate itemsets and the large ones and the negative border can further be determined by the orem 1  Secondly to maintain the itemsets through data addition and deletion we count the support in A and A for all itemsets in L U NBD\(L If an itemset I E L does not have minimum support in DB\222 then I is removed from L This can be easily checked since we know the support count for I in DB A and A respectively Proof By Eq.\(l we have Cz  Lz UNBD\(L2 Obviously Lk G Ck and therefore apriori-gen\(L&apriori-gen\(Ck where I UNBD\(Lk+l Lk and Ck+l=apriori-gen\(Ck for k  2 That is L~+I U NBD\(Lk+l C Ckfl for k  2 Therefore LUNBD\(L C C is derived and the assumption that VI E LUNBD\(L I E C is proved On the other hand there could be some new item sets which become large in the updated database Let I be an itemset which becomes a large itemset of the up dated database We know that some subset of I should be moved from NBD\(L to L\221 6 71 If it is not some 2-item subset of I must be the newly identified candi date 2-itemset in the updated database Thus if none of the itemsets in NBD\(L gets minimum support and no newly identified candidate 2-itemsets are generated in the updated database no new itemsets will be added to L\222 and there is no need to scan the updated database for discovering new large itemsets However if some itemsets in NBD\(L get minimum support or the count of some newly identified candidate 2-itemset in A is larger than 1s t I A 11 the candidate itemsets are re computed As shown in theorem 2 a newly identified candidate 2-itemset will not be an emerged itemset if it is not large in At Thus the threshold rs*lA+ll is used to reduce the influence of the unqualified itemsets and save the unnecessary scans over the database For those newly identified itemsets in the candidate itemsets, one database scan is applied to calculate the supports of them and determine the large ones and the negative border Theorem 2 If I is a newly identified candidate 2-itemset in A and it is large in DB\222 the count of I in A must be greater than 1s t I A 11 Proof Since I is a newly identified candidate 2-itemset in C it is not in the set of candidate 2-itemsets Cz of DB Moreover the candidate 2-itemsets of DB  A are generated by removing unqualified itemsets from CZ thus I is also not a candidate 2-itemset of DB  A That is I will not be a large itemset in\(DB  A Assume that I is also small in A I must be small in DB  A A which is DB\222 This results in a contradiction Thus the assumption that I is small in A is not correct Theorem 1 For all itemset I where I is in LUNBD\(L 1 must also be in the candidate itemset C and I must be large in A 1425 


function Update-Large-Itemset\(L,NBD\(L DB=C pk A-=C'-l k=m pkl A+=C3k=n+l pk DB'=DB  A  A'=C Pk c  cz  one scan of A for k  m to i  1 do for each itemset I E LUNBD\(L do t\(DB-a l DB-n z  tPk 1 Initially t\(DB I I for each 2-itemset I E Pk do if I E c and I.staTt I k I.count  I.count  tp,\(I 1.start  k  1 one scan of A for k  n  1 to j do  for each itemset I E L U NBD\(L do Initially toB,\(I oB-n I if I E C tDB'\(I I  tPk\(i for each 2-itemset I E Pk do 1.cmnt  I.count  tp I if I.count  Ts  Cz"=l..t.7t\(lPzl c  c  I ijI$c I.count  tp,\(I Istart  k if 1.count 2 1s  IPkll c;=c;ul L'=0 for each itemset I E L do if tDB,\(I 2 s  IDB'I1 then 4.2 Pseudo-Code for the Program Our algorithm is presented in a high-level description of program code as follows Note that the set of candi date 2-itemsets CZ used in functions negativehorder pen\(\and Update-Large-Itemset is initially generated by the function preprocessing given in 5 and the function apriori-gen which is called by Update-Large Itemset can be found in I 7 41 function negativeborder-gen\(Cz,L Split L into Lz   L where n is the size of the largest itemset in L for all k  2  n do L U~BD\(L Ck compute Ck+i using apriori-gen\(Lk end negativeborder-gen  Table 5 A set of newly added transactions I Partition I TID I Items I i AGF A,C L'=L U I L'=L uz for each itemset 1 E NBD\(L do Zf tDB'\(1 2 S  IDB'I1 then zf L is not C L or 31 where I E Ci I Cz and ta+\(I 2 1s  I A 11 then h  2 whzle CL  compute c using apriori-gen\(Ci h=h+l New-Candidate C  L U NBD\(L zf New-Candidate 0 then for each itemset I E New-Candidate do af tDs 2 1s  IDB'I1 then L'=L ul NBD\(L  C;,L end Update-Large-Itemset 5 An Example We give an example to illustrate the NB-SWF in this section Use the database given in Table 1 as the orig inal transaction database, and the first partition PI is extracted as the set of deleted transactions A Snp pose we have a set of newly added 6 transactions A as shown in Table 5 Note that lDBl  9 A I  6  A I  3 and IDB'I  12 The minimum support threshold is set to 0.4 Thus an itemset I must he present in at least 5 transactions in DB in order to be a large itemset in L The execution of the algorithm is described below Initially CZ is derived as shown in Section 3 After the candidate set Cis generated by Cz one scan over the database DB is given to determine L and NBD\(L For DB the sets of large k-itemsets Lk and their negative borders NBD\(Lk where k  2 along with their counts are as follows Lz  AD,6 AE,5 AF-61 BF,5  I   2 Then, the updated portions of the database are scanned 1426 


Table 6 deleting partition A and then adding partition A I A II CA I Candidate 2-itemsets Ci generated after  II  itemset 1 start I count 11 itemset I start I count AF CF BF 2 4 DF 2 5 DF 2 4 in order to find the candidate 2-itemsets Ci in the up dated database as shown in Table 6 In the scan of A and A the support counts of itemsets in L UNBD\(L are also maintained Thus L and NBD\(L along with their supports after scanning A and A are Lz  AD 41 AE,\2223 AE 7 BF 61 Next for each itemset in L if its support count in DB\221 is larger than 5 it will be included in L\221 Therefore AF BF and DF are now included in L\222 These itemsets are so called retained itemsets Moreover we have to find out those emerged itemsets In this step the negative border and Ck are firstly used to discover whether there are emerged itemsets Though there is no itemset moved from negative border to L\221 but the count of the newly identified candidate 2-itemset CF in A is equal to s*\(lA+1 So there may be some emerged itemsets in the updated database, and the candidate itemsets are recomputed Finally, one database scan over DB\221 is applied to calculate the supports of new candidate itemsets BD and CF Therefore the final set of large itemsets and negative border in DB\222 are L  AF 71 BF,6 DF,5 NBD\(L  ED 4 CF 4 4 6 Experimental Results We compare the performance of our NB-SWF with that of SWF 5 by running them on several experiments with a PC with AhlD Athlon XP CPU and 1.OG mem ory In the experiments we use synthetic data to form input databases to the algorithms The database of size IDB+A+l is generated using the same technique as in troduced in l and the first lDBl transactions are used as DB and the next I A I transactions as A The first I A 1 transactions of DB are used as A Five datasets T10:14.DlOOK.C10 T10.14.DlOOK.C20  and T10.14.DlOOK.C50 are used in the experi ments where T is the mean size of a transaction I is the mean size of potential maximal large itemsets D is the number of transactions in units of K i.e 1000 and C is the correlation between items in terms of per centage In the following we give three different ex periments to compare the performance of the incremen tal mining methods mentioned above on different scales of incremental portion support threshold and correla tion between items respectively Experiments results demonstrate our NB-SWF performs better than other incremental mining methods under all kinds of situa tions 6.1 Experiment 1 Five datasets mentioned above are used to conduct several experiments to evaluate the relative performance of NB-SWF and SWF In Figure 1 we average the ex 224           Figure 1 Performance comparison between NB-SWF and SWF ecution time of NB-SWF and SWF in 5 datasets and 4 fractional sizes for each support threshold It can be seen that NB-SWF outperforms SWF with all support thresholds With low support thresholds large num ber of candidate itemsets are generated but only few of them are scanned over the updated database in NB SWF With medium or high support thresholds NB SWF may not have to scan over the updated database since no emerged itemsets are found 6.2 Experiment 2 In this experiment we use different fractional sizes i.e 1 2 5 and lo of the dataset T10.14.DlOOK.C30 as the size of the deletion and ad dition datasets respectively In Figure 2 we show the speedup ratio SR of NB-SWF over SWF for fractional sizes 1 2 5 and lo respectively The speedup ratio SR is calculated as follows 5 time for SWF  time for NB-SWF time for NB-SWF SR  1427 


Figure 2 The speedup ratios of NB-SWF over SWF for fractional sizes of 1 270 5 and 10 with dataset T10.14.DlOOK.C30 Figure 3 Performance comparison between NB-SWF and SWF for datasets with correlations of lo 20 30 and 40 respectively Figure 2 shows the speedup ratios for all cases Appar ently, NB-SWF rnns faster than SWF For larger frac tional sizes or larger support thresholds our speedup is higher since a larger A will have a larger possibility to be a good sample of the original and the probability of recomputing candidate itemsets is smaller 6.3 Experiment 3 We use four datasets having different correlations be tween items with the fractional size being 5 The speedup ratios of NB-SWF over SWF are shown in Fig ure 3 for these four datasets When the correlation be tween items in the dataset is weaker there is a larger chance to discover new large itemsets in all support thresholds Thus NB-SWF performs much better than SWF in datasets with higher correlations between items In summary, NB-SWF performs better than SWF for all types of incremental databases especially in the case  1428 of larger incremental sizes, correlations and thresholds 7 Conclusion In order to solve the incremental mining problem ef fectively we develop an approach named Negative Bor der using Sliding-Window Filetering NB-SWF which adopts the idea of the negative border and the silding window filtering algorithm. The negative border is used to avoid unnecessary scans over the updated database The candidate set is generated in one shot with SWF and thus we need at most one scan over the updated database Since the number of scans over the updated database is greatly reduced NB-SWF is quite suitable for very large databases In summary, our incremental mining method is effective and efficient for knowledge updation in large databases References l R Agrawal and R Srikant,\223Fast Algorithms for Mining Association Rules,\224 In Proceedings of the International Very Large Database Conference  pp 487-499 1994 2 C.H Chang and S.H Yang 223Enhancing SWF for Incremental Association Mining by Itemset Main tenance,\224 In Proceedings of the seventh Pacific Asia Conference on Knowledge Discovery and Data Mining pp 301-312,2003 3 D.W Cheung S.D Lee and B Kao 221\221 A General Incremental Technique for Maintaining Discovered Association Rules,\224 In Proceedings of the 5th hter national Conference on Database Systems for Ad vanced Applications pp 185-194, 1997 4 W.J Lee and S.J Lee 223An Efficient Min ing Method for Incremental Updation in Large Databases,\224 to appear in Proceedings of the 4th International Conference on Intelligent Data En gineering and Automated Learning 2003 SI C.H Lee C.R Lin and M.S Chen 222\221 Sliding Window Filtering An Efficient Algorithm for In cremental Mining,\224 In Proceedings of the AGM 10th International Confeznce onlnfonnation and Knowledge Management pp 263-270, 2001 6 S Tomas S Bodagala K Alsabti and S Ranka 223An Efficient Algorithm for the Incremental Up dation of Association rules in Large Databases,\224 In Proceedings of the International Conference on Knowledge Discovery and Data Mining  pp 263 266, 1997 7 N.L Sarda and N.V Srinivas 223An Adaptive Al gorithm for Incremental Mining of Association Rules,\224 In Proceedings of DEXA Workshop  pp 240-245 1998 


    f      I i    0 0 m m 100 10 am 1m 1110 lam m am m n am a0 la0 IBO Eo Im 1100 am a minl  10 b mind  20 Figure 6 Performance on Connect-4 11 Figure 7 shows the running time of the three algorithms on the mushroom and pumsb datasets with K set to 500 and mind ranges from 0 to 25 For the mushroom dataset when minl is less than 6 all three algorithm have simi lar low running time TFP keeps its low running time for the whole range of mind and starts to outperform CHARM when minl is as low as 6 and starts to outperform CLOSET when minl is equal to 8 Pumsh has very similar results as connect-4 and mushroom datasets i 1 m j i s 21 di I 2 U  0 I IO I3 1 1 I IO I I 1l ndWRI YUdWR a Mushrwm b Pumsb Figure 7 Performance on Mushroom and Pumsb Sparse Dataset Experiments show that TFP can effi ciently mine sparse datasets without minsupport It has comparable performance with CHARM and CLOSET for low mid and outperforms both on higher mind Figure 8a shows the running times of TFP CHARM and CLOSET on T1014D100K with K fixed at 100 and minl ranges from 1 to 10 Again it demonstrates TFP's strength in dealing with long minl At minl  8 the performance of CHARM and CLOSET starts deteriorating while TFP re tains its good performance Figure 8b shows the perfor mance on the same dataset but with minl fixed at 8 and varying K from 200 to 2000 The curves show that when K is above 400 the running times of CHARM and CLOSET are around 3 times slower than TFP The experiments on the gazelle dataset are shown in Fig ure 9 For smaller K TFP outperforms both CHARM and CLOSET for minl greater than or equal to 5 For K  500 TFP continues to outperform CLOSET for mind greater than or equal to 5 and has similar performance as CHARM Rom this performance study we conclude that TFP has good overall performance for both dense and sparse datasets Its running time is nearly constant over a wide range of K and mind values for dense data Unlike CHARM and CLOSETwhose performance deteriorates as mind increases b L=8 Figure 8 Performance on T1014D100K a K  inn b K  500 Figure 9 Performance on Gazelle TFP's running time stays low The reason is inherent from the mining strategy of TFP CHARM and CLOSET In mast time the support for long patterns is lower than that of short patterns Thus even with the optimal support given both CLOSET and CHARM are unable to prune short fre quent patterns early thus causing much time spent on min ing useless patterns On the other hand TFP is able to use the minl length restriction to cut many short frequent patterns early thus improves its running time instantly In addition TFP does not include any nodes that reside above minl level to participate in the mining process As mind increases more nodes reside above the minie level of the tree means that less conditional FP-trees need to he built thus keeps the running time low Besides the good performance over long minl values the performance of TFP over short minl values even when mind  1 i.e no length constraint is still comparable to that of CLOSET and CHARM In such cases the run ning times between the three do not differ much and both CLOSET and CHARM were run with the optimal support threshold while TFP was not given any support threshold Scalability Test Our performance tests showed that the running time of TFP increases linearly with increased dataset size 5 DISCUSSION In this section we discuss the related work how to gener ate association rules from the mined topk frequent patterns and how to push constraints into the mining process 5.1 Related work Recent studies have shown that closed patterns are more desirable 5 and efficient methods for mining closed pat 217 


terns such as CLOSET 7 and CHARM B have been de veloped However these methods all require a user-specified support threshold Our algorithm does not need the user to provide any minimum support and in most cases runs fater than two efficient algorithms CHARM and CLOSET which in turn outperform Apriori substantially 7 81 Fu et al Z studied mining N most interesting item sets for every length 1 which is different from our work in several aspects 1 they mine all the patterns instead of only the closed ones  2 they do not have minimum length constraintssince it mines patterns at all the lengths some heuristics developed here cannot be applied and 3 their philosophy and methodology of FP-tree modification are also different from ours To the best of our knowledge this is the first study on mining topk frequent closed patterns with length constraint therefore we only compare our method with the two best known and well-performed closed pattern mining algorithms 5.2 Generation of association rules Although topk frequent itemsets could he all that a user wants in some mining tasks in some other cases sjhe wants to mine strong association rules from the mined topk fre quent itemsets We examine how to do this efficiently Items in the short transactions, though not contributing to the support of a topk itemset of length no less than mind may contribute to the support of the items in it Thus they need to be included in the computation which has minimal influence on the performance To derive cor rect confidence we have the following observations 1 The support of every Liternset is derived at the start of min ing 2 The set of topk closed itemsets may contain the items forming subsetjsuperset relationships and the rules involving such itemsets can be automatically derived 3 For rules in other forms, one needs to use the derived topk itemsets as probes and the known minsupport as threshold and perform probe constrained mining to find the support only related to those itemsets 4 As an alternative to the above one can set mind 2 which will derive the patterns readily for all the combinations of association rules 5.3 Pushing constraints into TFP mining Constraint-based mining 14.61 is essential to topk mining since users may always want to put constraints on the data and rules to be mined We examine how different kinds of constraints can be pushed into the topk frequent closed pattern mining deep into the TFP-mining process he succint constraints should be pushed deep to select only those itemsets hefore mining starts and the anti-monotonic Constraint should be pushed into the iterative TFP-mining process in a similar way as FP-growth Second for monotone constraints the rule will also be similar to that in traditional frequent pattern mining is if an itemset mined so far e.g okd satisfies a constraint sum 2 loo adding more items such as e still satisfies it and thus the constraints checking can be avoided in further expansion Third for convertible constraints one can arrange items in an appropriate order so that the constraint can be trans formed into an anti-monotone one and the anti-monotone constraint pushing can he applied First succinct and anti-monotone constraints can be pushed Interested readers can easily prove such properties for top k frequent closed pattern mining 6 CONCLUSIONS We have studied a practically interesting problem mining top-k frequent closed patterns of length no less than mind and proposed an efficient algorithm TFP with several opti mizations 1 using closednodexcount and descendantsum to raise mindupport before tree mining 2 exploring the topdown and bottom-up combined FP-tree mining to first mine the most promising parts of the tree in order to raise rninsupport and prune the unpromising tree branches and 3 using a special indexing structure and a novel closed pattern verification scheme to perform efficient closed pat tern verification Our experiments and performance study show that TFP has high performance In most cases it out performs two efficient frequent closed pattern mining algo rithms CLOSET and CHARM even when they are running with the best tuned minsuppwt Furthermore the method can be extended to generate association rules and to incor porate user-specified constraints Based on this study we conclude that mining topk fre quent closed patterns without minsupport should be more preferable than the traditional minsuppwt-based mining for frequent pattern nuning More detailed study along this direction is needed including further improvement of the performance and flexibility at mining topk frequent closed patterns as well as mining topk frequent closed sequential patterns or structured patterns Acknowledgements We are grateful to Dr Mohammed Zaki for providing the code and data conversion package of CHARM and promptly answering many questions 7 REFERENCES I R Agrawal and R Srikant Fast algorithm for mining 2 A W.-C. Fu R W.-W Kwong and J Tang Mining 3 J Han J Pei and Y Yin Mining frequent patterns 4 R Ng L V S Lakshmanan J Han and A Pang association rules VLDB'94 n-most interesting itemsets ISMIS'W without candidate generation SIGMOD'OO Exploratory mining and pruning optimizations of constrained esociations rules SIGMOD'SR Discovering frequent closed itemsets for association rules ICDT'99 161 J Pei J Ha and L V S Lakshmanan Mining frequent itemsets with convertible constraints ICDE'O1 7 J Pei J Han and R Mao CLOSET An efficient algorithm for mining frequent closed itemsets DMKD'OO 8 M J Zaki and C J Hsiao CHARM An efficient algorithm for closed itemset mining SDM'O2 5 N Pasquier Y Bastide R Taouil and L Lakhal 218 


I Plenary Panel Session J Future Directions in Database Research  456 Chair Surajit Chaudhuri Microsoft Corporation Panelists Hector Garcia-Molina Stanford University Hank Korth, Bell Laboratories Guy Lohman IBM Almaden Research Center David Lomet Microsoft Research David Maier Oregon Graduate Institute I Session 14 Query Processing in Spatial Databases I Chair Sharma Chakravarthy University of Florida Processing Incremental Multidimensional Range Queries in a Direct Manipulation Visual Query Environment  458 High Dimensional Similarity Joins Algorithms and Performance Evaluation  466 S Hibino and E Rundensteiner N Koudas and K.C Sevcik Y Theodoridis E Stefanakis and T Sellis Cost Models for Join Queries in Spatial Databases  476 Mining Association Rules Anti-Skew Algorithms  486 J.-L Lin and M.H Dunham Mining for Strong Negative Associations in a Large Database of Customer Transactions  494 A Savasere E Omiecinski and S Navathe Mining Optimized Association Rules with Categorical and Numeric Attributes  503 R Rastogi and K Shim Chair: Anoop Singhal AT&T Laboratories S Venkataraman J.F Naughton and M Livny Remote Load-Sensitive Caching for Multi-Server Database Systems  514 DB-MAN A Distributed Database System Based on Database Migration in ATM Networks  522 T Hara K Harumoto M Tsukamoto and S Nishio S Banerjee and P.K Chrysanthis Network Latency Optimizations in Distributed Database Systems  532 I Session 17 Visualization of Multimedia Data I Chair Tiziana Catarci, Universita di Roma 223La Sapienza\224 W Chang D Murthy A Zhang and T.F Syeda-Mahmood Global Integration of Visual Databases  542 X 


The Alps at Your Fingertips Virtual Reality and Geoinformation Systeps  550 R Pajarola l Ohler P Stucki K Szabo and P Widmayer C Baral G. Gonzalez and T.C Son Design and Implementation of Display Specifications for Multimedia Answers  558 1 Session 18 Management of Objects I Chair: Arbee Chen National Tsing Hua University P Boncz A.N Wilschut, and M.L. Kersten C Zou B Salzberg, and R Ladin 0 Wolfson S Chamberlain S Dao L Jiang, and G. Mendei Flattening an Object Algebra to Provide Performance  568 Back to the Future Dynamic Hierarchical Clustering  578 Cost and Imprecision in Modeling the Position of Moving Objects  588 ROL A Prototype for Deductive and Object-Oriented Databases  598 A Graphical Editor for the Conceptual Design of Business Rules  599 The Active HYpermedia Delivery System AHYDS using the M Liu W Yu M Guo and R Shan P Lang W Obermair W Kraus and T Thalhammer PHASME Application-Oriented DBMS  600 F Andres and K. Ono S Chakravarthy and R Le S Mudumbai K Shah A Sheth K Parasuraman and C Bertram ECA Rule Support for Distributed Heterogeneous Environments  601 ZEBRA Image Access System  602 Author Index  603 xi 


11  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02  data bindings domain-specific metric for assessing module interrelationship  interface errors errors arising out of interfacing software modules  Porter90 Predicting software  faults 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 From decision trees to association rules  Classifiers  223this and this\224 goes with that \223class\224  conclusions \(RHS\ limited to one class attribute  target very well defined  Association rules  223this and this\224 goes with \223that and that\224  conclusions \(RHS\ may be any number of attributes  But no overlap LHS and RHS  target wide open  Treatment learning  223this and this\224 goes with \223less bad and more good\224  223less\224,  \223more\224: compared to baseline  223bad\224, \223good\224: weighted classes Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


12  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Association rule learning  www.amazon.com  Customers who bought this book also bought  The Naked Sun by Isaac Asimov  The Caves of Steel by Isaac Asimov  I, Robot by Isaac Asimov  Robots and Empire by Isaac Asimov 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Support and confidence  Examples = D , containing items I  1: Bread, Milk 2: Beer Diaper Bread, Eggs 3: Beer Coke, Diaper Milk 4: Beer Bread, Diaper Milk 5: Coke, Bread, Diaper Milk  LHS  RHS = {Diaper,Milk  Beer  Support       =   | LHS U RHS|  / | D |       = 2/5 = 0.4  Confidence  =   | LHS U RHS |  / | LHS |    = 2/3 = 0.66  Support-based pruningreject rules with s < mins  Check support before checking confidence Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


13  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Example of supportbased pruning 4 Bread 1 Eggs 4 Diaper 3 Beer 4 Milk 2 Coke Count 1Item 3 Beer,Diaper 3 Milk, Diaper 2 Milk,Beer 3 Bread, Diaper 2 Bread,Beer 3 Bread,Milk Count 2Item 2 Milk, Diaper Beer 3 Bread,Milk Diaper Count 3Item Support-based pruning 225 Min support =3 Ignore subsets of items of size N 225 only if N-1 support > min-support Without pruning 6 C 1  6 C 2  6 C 3 41 With pruning: 6 + 6 + 2 = 14 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Classifiers versus Association rules \(again  Classifiers  Assume entire example set can fit into RAM  Association rule learners  can handle very big data sets  Agraw  t he APRIORI alg o r i t h m   very large data sets  10,000,000 examples  843MB Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


14  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 The Data Mining Desiderata Bradley  Require one scan \(or less\ of the database if possible  On-line \223anytime\224 behavior  223best\224 is always available, with status information on progress, expected remaining time, etc. provided  Suspendable, stoppable, resumable  incremental  progress saved to resume a stopped job  Ability to incrementally incorporate additional data with existing models efficiently  Work within confines of a given limited RAM buffer  Ooops, good-bye traditional classifiers e.g. C4.5  Argued against by some  223Memory is cheap\224: [W A R2 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Conf1  outlo o k overc a s t   1 0   82  40    84  40   4 0 0  Treatment learning sunny, 85 86 false none \(2 1 2 sunny, 80 90 true none sunny, 72 95 false none rain 65 70 true,          none rain, 71 96 true none rain 70  false some \(2 2 4 rain, 68 80 false,  some rain, 75 80 false some sunny,      69 70 false lots    \(2 3 8 sunny,      75 70 true lots overcast,     83  false lots overcast,     64  true lots overcast,     72  true lots overcast,     81 75 false lots outlook temp humidity wind hours on course A good attribute range 225 More frequent in good that bad 225 Weighted by 223distance\224good to bad 225 Normalized by total count 225 Summed for all good/bad class pairs Lots  none Lots  some Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


15  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 sunny, 85 86 false none \(2 1 2 sunny, 80 90 true none sunny, 72 95 false none rain 65 70 true,           none rain, 71 96 true none rain 70  false some \(2 2 4 rain, 68 80 false,  some rain, 75 80 false some sunny,      69 70 false lots    \(2 3 8 sunny,      75 70 true lots overcast,     83  false lots overcast,     64  true lots overcast,     72  true lots overcast,     81 75 false lots 0 1 2 3 attribute ranges with deltaf 4-2024681 conf1 225 treatments 002 attribute.range.conf1 > X 225 treatments|=N 225TAR2 = O\(2 N  225 fails for large N outlook temp humidity wind hours on course Conf1  outlo o k overc a s t   1 0   82  40    84  40   4 0 0  Lots  none Lots  some 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Treatments for golf 0 1 2 3 4 none some lots I f outl ook o verc as t Th en l o t s o f go l f  4 4  0 Least monitor watch the humidityalert if rising over 90 Least change pick a vacation location with overcast weather I f h u m i d i t y  90  97 Th en l o t s o f go l f  1 4  0 1 2 3 none some lots 0 1 2 3 4 5 6 none some lots If n o ch an ge Th en l o t s o f go l f  6 6 3 5  3  Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


16  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 6.7 <= RM < 9.8 And 12.6 <= Ptratio 15.9 BEST ACTION 0.6 <= NOX < 1.9 and 17.16 <= LSTAT < 39 WORST ACTION BASELINE 500 examples  of bad--, bad, ok, good Stop staring at the scenery and tell me where to steer or what to dodge 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Require overall require2 require3 require5 require4     action1 action1, action2, action3,  \205   Cost,    Benefit 1 Y              Y             N,        \205   23200,  250 2           N              N             Y ,       \205   11400,  150 205..       \205             \205            \205        \205   \205         \205 action2 fault2 fault3 fault1 JPL requirements Feather&Menzie Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


17  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case study 99 proposed actions for deep space satellite design; 2 99 10 30 options Each row is one project plan action1, action2, action3,  \205   Cost,    Benefit 1 Y              Y             N,        \205   23200,  250 2           N              N             Y ,       \205   11400,  150 205..       \205             \205            \205        \205   \205         \205 Learnt 225 Do 16 225 Don\222t do 14 225 Ignore 66 options 225 c.f. genetic algorithms Each dot  is one randomly generated project plan 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Pr of tampering 0.02 Pr of fire 0.01 Pr of smoke  given [fi  0.90 Pr of smoke  given [fi  0.01 Pr of report given [exodus=ye 0.75 Pr of report given [exodus=no 0.01 Pr of exodus given [alarm=yes 0.88 Pr of exodus given [alarm=no 0.001 etc tampering fire alarm smoke exodus run away report hello, operator I want to report a fire 0.02 0.01 Use Bayesian analysis to update probabilities given new information Use Bayesian analysis to update probabilities given new information Bayesian Tuning Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


18  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 tampering fire alarm smoke NO exodus report YES 0.50 was 0.02 0.03 was 0.01 Q1: What if there is a report, but no smoke Q1: What if there is a report, but no smoke Q2: What if there is a report, and smoke Q2: What if there is a report, and smoke tampering fire alarm smoke YES exodus 0.03 was 0.02 0.97 was 0.01 report YES Example from : [Poole98   p37 1 Source = http:// www.swi.psy.uva.nl/projects/SWI-Prolog/download.html http://www.cs.ubc.ca/spider/poole/ci/code.tar.gz Files    = code/acp/bnet.pl code/acp/bnet_t1.pl Bayesian Tuning 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Non-na\357ve model bayesian network Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


19  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Low testing effort EXPLAINS 1\ some observed operational defects  and 2\ low pre-release defects 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02  Ancestors  ancestor\(X,Y\:-parent\(X,Y  ancestor\(X,Y\:-parent\(X,Z\ancestor\(Z,Y  Lists  member\(X,[X|Z   member\(X,[Y|Z me mb er X Z   append X X   append\([X|X Y s X Z s  a ppe nd X s Ys Z s  Example Example action action hypothesis hypothesis p\(b,[b add clause p\(X,Y   specialize p\(X,[V p\(x,[a specialize p\(X,[X p\(b,[a add clause p\(X,[X p\(X,[V p\(X W Inductive Logic Programming Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


20  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 East-West trains 1. TRAINS GOING EAST 2. TRAINS GOING WEST 1 2 3 4 5 1 2 3 4 5 1. TRAINS GOING EAST 2. TRAINS GOING WEST 1 2 3 4 5 1 2 3 4 5 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 ILP representation  Example eastbound\(t1  Background theory car\(t1,c1\      car\(t1,c2\       car\(t1,c3\.      car\(t1,c4 rectangle\(c1\  rectangle\(c2\     rectangle\(c3\.   rectangle\(c4 short\(c1\      long\(c2\.          short\(c3\       long\(c4 none\(c1\.        none\(c2\.          peaked\(c3\.      none\(c4 two_wheels\(c1\  three_wheels\(c2\two_wheels\(c3\two_wheels\(c4 load\(c1,l1\.     load\(c2,l2\       load\(c3,l3\    load\(c4,l4 circle\(l1\      hexagon\(l2\       triangle\(l3\    rectangle\(l4 one_load\(l1\  one_load\(l2\.      one_load\(l3\    three_loads\(l4  Output ne\(C Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


21  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Predicting Correctness Almei NewID CN2 C4.5 C4.5_rule FOIL Accuracy 52 54 66 68 73 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 FOIL\222s best rule high\(A executable\(A,B maximum_statement_nesting_depth\(A,C lines_of_comments\(A,B commentsdivsize\(A,E n1\(A,F n2\(A,G less_or_equal\(E,F not less_or_equal\(B,G C <> 4 C <> 43 less_or_equal\(C,D High faults when comment density <= #operators and executable statements > #operators and max nesting <= number of lines of comments and max nesting is not 4 or 43 High faults when comment density <= #operators and executable statements > #operators and max nesting <= number of lines of comments and max nesting is not 4 or 43 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


22  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Inside  some learners  neural nets  genetic algorithms  decision tree learners  association rule learners  treatment learners  bayesian tuning  inductive logic programming 225 sub-symbolic locally guided descent symbolic, global search 225 recursive diversity reduction 225 this goes with that CLASS 225 this goes with that 225 asses 225 a little model goes a long way 225 Horn clauses  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case studies predicting effort \(45 predicting faults \(51 model-based ML \(54 early lifecycle project planning \(60 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


23  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case study How can we estimate earlier in the life cycle  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Predicting development times in months\Srinivasan95 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


24  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Bayes for effort Chulani99  The COCOMO-II project  Open-source software cost estimation  Reuse vs effort XH : multiple product lines VH : across product lines H : across program N : across project L  : none  Regression over data from 83 software projects  Regression conflicted with \223Delphi values\224  Tune regression values using Delphi expectations 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 Low N H VH XH Delphi Regression Adjusted Da ta   reus e low e rs effo r t Ex pe ct e d  reus e incre a se  effo r t    251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 COCOMO-II \(1998\COCOMO-II \(1997 Pred\(30 Pred\(25 Pred\(20 Pred\(X 52 49 46 83 projects 63 59 54 161 projects 7561 68 55 63 48 161 projectsbased on Bayesian 161 projectsbased on Delphi Percentage of estimated effort within X of actual Conclusion data + delphi tuning\a Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


25  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Neural Network Count the wi dge ts in the I n te r f ace to es ti m a te e f f o r t  Labels Edit Boxes Grid Boxes Check Boxes Buttons 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Neural Network Subsystem Pred\(25 MARE Buyer Admin 80 17.6 Buyer Client 80 14.6 Distribution Server 20 96.7 Supplier Client 90 12.2  12 Different Widgets Counted and associated with effort Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


26  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case study: Predicting software 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Predicting software  faults Khoshgoftaar99 Whi c h d o g s di d not ba r k  225 42 attri b ute s  in dat a s e t 225 Only 6 in the l e arnt th e o ry Diffe re nt attri b ute s than b e fore 225 223c au se s f a u l t 224  do m a in s pec i f i c 225 Me thod for fin d ing fa ult s  gen e r a l Whi c h d o g s di d not ba r k  225 42 attri b ute s  in dat a s e t 225 Only 6 in the l e arnt th e o ry Diffe re nt attri b ute s than b e fore 225 223c au se s f a u l t 224  do m a in s pec i f i c 225 Me thod for fin d ing fa ult s  gen e r a l Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


27  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Issue of generality  Specific conclusions may not apply to general projects  Proposal one  Intra-project learning  Lessons should generalize across the same developer methodology, application and tool set  Proposal two  Inter-project learning  Need larger training set  COCOMOII uses 161 projects  Note: two = N * one Khoshgoft good bad Tia bad good  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Model-based ML Bratko89,Pearc Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


28  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Model-based ML simple e.g sum\(X,  Y Z sum   sum   sum\(0 0 0 sum 0  sum 0  sum\(0   sum\(0   sum  Any sum  Any if X >0 X\222=      if X < 0 0 if X= 0  switch\(State,Volts,Amps switch\(on,       0,     Any switch\(off,      Any,   0 blub\(Mode,Light,Volts,Amps bulb\(blown,dark, Any 0 bulb\(ok,     light   bulb\(ok,    light   bulb\(ok,    dark 0 0 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 A qualitative circuit go  :tell\('circ.data'\ go1, told go1 :functor\(X,circuit,9\ forall\(X, example\(X example\(circuit\(Sw1,Sw2,Sw3,B1,B2,B3,L1,L2,L3\classification\(B1,B2,B3,Class format\('~a,~a,~a,~a,~a,~a,~a~n Sw1,Sw2,Sw3,L1,L2,L3,Class  classification\(B1, B2, B3,Class needs 2 our of three bulbs working classification\( ok, ok, B3,   good classification\( ok, B2, ok,   good classification\( B1, ok, ok,   good classification\( B1, B2, B3,   bad Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


29  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Results from > 700 examples circ.names good,bad switch1: on, off switch2: on, off switch3: on, off bulb1: light, dark bulb2: light, dark bulb3: light, dark Command line c4.5 -f circ -m 2 W a t c hing bulb1 tells us th e rest Insight f ul  Or dull W a t c hing bulb1 tells us th e rest Insight f ul  Or dull 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 More Model-based ML Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


30  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 ca n we r e v i s i t thos e warranti e s   Run 1 35,000 tions  Learn 1  Run 2 if Sw2c=off then 3264 tions  Learn 2  Run 2 if Sw2c=off n then 648 tions  Learn 3 Ca n\222t clos e  Sw3c warranty issu es No b u d g e t  for e x p e ns i v e ha rd wa r e 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 3 \223tunings\224 5 SLOC guesstimates 150,000 runs Treatments for software projects Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


31  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 flex=1 pmat=3 sced=2 rest anything from kc1 150,000 runs 150,000 runs Treatments for software projects \(ii 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 pmat=2 acap=2 sced=2 rest anything from kc1 30,000 runs 30,000 runs Treatments for software projects \(iii Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


32  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 ons discussion \(64 downloads \(69 further reading \(71 references \(72 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Will you try ML  Have we motivated you  Will you rush home and do ML on your data  Clearly  ML algorithms work  Caution  you may find it harder than you think Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


33  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Many ways to learn numerous case studies but there is still a problem Theme Learning is a solved problem \(sort of Data collecting and modeling is not 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Be warned match your ML goals to your software process level Project metrics coarse-grain conclusions Product metrics product learning Process metrics process learning Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


34  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Also, match your tool to task Task ML Tool Assembly line robot deciding what to reject Decision tree learner Repair robot trying to do the least to fix the rejected parts Treatment learner Predicting the life of a robot Neural Network Optimizing the assembly line Genetic Algorithm If clustering when no classes iation rule learning If simple background knowledge Bayesian If complex relational background knowledge ILP 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Have we learnt enough  Not yet  But wait Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


35  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Cost = $0  WEKA  E.g. http://www.cs.waikato.ac.nz/~ml/weka/: ML in JAVA 003 decision tree inducers,rule learners, naive Bayes, decision tables locally weighted regression  GDB_Net  http://nas.cl.uh.edu/boetticher/gdb_net.zip  TAR2  http://www.ece.ubc.ca/twiki/bin/view/Softeng/TreatmentLearner  APRIORI  http://fuzzy.cs.uni-magd eburg.de/~borgelt/apriori/apriori.html#download  And many others  E.g. ML  A public domain \223C\224 library of common algorithms  Naive Bayes, ID3, MC4 , Decision Tables ,   Holte's OneR CN2,\205  http://www.sgi.com/tech/mlc/utils.html 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Cost > $0  C4.5  Comes with the book Quinlan  C5.0  http://www.rulequest.com/download.html  Microsoft SQL SERVER 2000\231  Comes with numerous machine learning tools  Proprietary algorithms  Etc  223data mining\224 \223commercial software\224 in Google  3,340 links  223data mining consultancy\224 in Google  850 links Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


36  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Further reading  Mendonca  great rev i e w art i cl e on ML  Large list of available tools  All the things you can do with a decision tree [Menzies0  Treatment learning: [Menzies01a  Michalski\222s excellent survey of ML types [Michalski  Neural nets: [Boetticher01  Special issue SEKE journal, knowledge discovery Morasca99  Inductive logic programming [Bergadano95,Cohen95  Come by IJCAI 2011 and I\222ll tell you all about it\222s applications  Genetic algorithms: [Goldberg8  Bayesian learning [Cheeseman88 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 References  Agrawal  Agrawal, R., and T.Imeilinski and A.Swami \223Mining Association Rules between Sets of Items in Large Databases,\224 Proceedings of the 1993 ACM SIGMOD Conference Washington DC, USA  Bergadan  Bergadano, F., and D.Gunetti Inductive Logic Programming: From Machine Learning to Software Engineering The MIT Press, 1995  B  Berry, M. J. A., and G., Linoff Data Mining For Marketing, Sales, and Customer Support John Wiley Sons, Inc., New York, 1997  Boetticher01  Boetticher, G., "An Assessment of Metric Contribution in the Construction of a Neural Network-Based Effort Estimator Second International Workshop on Soft Computing Applied to Software Engineering  Enschade, NL, 2001 Available from http://nas.cl.uh.edu/boetticher/publications.html  Boetticher01  Boetticher, G., "Using Machine Learning to Predict Project Effort: Empirical Case Studies in Data-Starved Domains First International Workshop on Model-based Requirements Engineering San Diego, 2001 Available from http://nas.cl.uh.edu/boetticher/publications.html  Bradley  Bradley, P., U. Fayyad, and C. Reina. \223Scaling clustering algorithms to large databases\224. In KDD'98  B  Bratko, I., I. Mozetic, and N. Lavrac KARDIO: a Study in Deep and Qualitative Knowledge for Expert Systems MIT Press, 1989  Breim  Breiman, L., J. Friedman, R. Olshen, C. Stone, \223Classification and Regression Trees,\224 Wadsworth International Group, 1984 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


37  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 References  Burgess  Burgess, C.J., and Martin Lefley. \223Can genetic programming improve software effort estimation? A comparative evaluation,\224 Information and Software Technology er 2001  Cheesem  P. Cheeseman, D. Freeman, J. Kelly, M. Self, J. Stutz, and W. Taylor. \223Autoclass: a bayesian classification system,\224 In Proceedings of the Fifth International Conference on Machine Learning  Morgan Kaufman, 1988  Chulani  S.Chulani,  B. Boehm, and B. Steece 223Bayesian analysis of empirical software engineering cost models,\224 IEEE Transaction on Software Engineering 25\(4\ly/August  1999  Cohe  W. W. Cohen, \223Inductive specification recovery: Understanding software by learning  from example behaviors,\224 Automated Software Engineering 2:107-129, 1995  DeJon  DeJong, K.A., and Spears, W.M. "An Analysis of the Interacting Roles of Population Size and Crossover in Genetic Algorithms Proc. First Workshop Parallel Problem Solving from Nature  Springer-Verlag, Berlin, 1990  Dietteric  Dietterich, T. G., \223Machine Learning  Research: Four Current Directions,\224 AI Magazine 18 \(4\97 Pp. 97-136. Available from ftp://ftp.cs.orst.edu/pub/tgd/papers/aimag-survey.ps.gz  s  Feather, M.S., and T. Menzies: \223Converging on the Optimal Attainment of Requirements IEEE Joint Conference On Requirements Engineering  ICRE'02 and  RE'02 9-13th September, University of Essen, Germany, 2002. Available from http://tim.menzies.com/pdf/02re02.pdf 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 References  Fenton00  Fenton, N., and  M. Neil \223Software Metrics: A Roadmap,\224 International Conference on Software Engineering, 2000. Available from http://www.dcs.qmul.ac.uk/~norman/papers/metrics_roadmap.pdf  Goldberg  Goldberg, D.E Genetic Algorithms in Search, Optimization, and Machine Learning Addison-Wesley Reading, Massachusetts, 1989  Khoshgoftaar  Khoshgoftaar, T.M., and E.B. Allen. \223Model software quality with classification trees,\224 in H. Pham, editor 223Recent Advances in Reliability and Quality  Engineering\224, World Scientific, 1999  Mendonc  Mendonca, M., and N.L. Sunderhaft, \223Mining Software Engineering Data: A Survey,\224 A DACS State-ofthe-Art Report September 1999. Available from http://www.dacs.dtic.mil/techs/datamining  Menzie  Menzies, T., \223Practical Machine Learning for Software Engineering and Knowledge Engineering,\224 ftware Engineering and Knowledge Engineering volume 1, 2001\vailable from http://tim.menzies.com/pdf/00ml.pdf  Menzies01a  Menzies, T., and Y. Hu, \223Reusing models for requirements engineering,\224 First International Workshop on Model-based Requirements Engineering 2001. Available from http://tim.menzies.com/pdf/01reusere.pdf  Menzies01b  Menzies, T., and Y. Hu, \223Constraining discussions in requirements engineering,\224 First International Workshop on Model-based Requirements Engineering San Diego, 2001. Available from http://tim.menzies.com/pdf/01lesstalk.pdf  Menzie  Menzies. T., and J. Kiper, \223Better reasoning about software engineering activities,\224 Automated Software Engineering 2001. Available from http://tim.menzies.com/pdf/01ml4re.pdf Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


38  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02  Michalski90   Michalski, R.S., \223Toward a unified theory of learning,\224  In B.G. Buchanan and D.C. Wilkins, editors 223Reading in Knowledge  Acquisition and Learning\224, pages 7--38. Morgan Kaufmann, 1993  Mitchell  Mitchell, T Machine Learning McGraw-Hill, 1997  Morasca99  Morasca, S., and Gunther Ruhe, Guest editors' introduction of the Special issue on \223Knowledge Discovery from Software Engineering Data,\224 International Journal of Software Engineering and Knowledge Engineering October, 1999  Pearce  Pearce, D., \223The induction of fault diagnosis systems from qualitative models,\224 in Proc. AAAI-88 1988  Poole9  Poole, D. L.,  A. K. Mackworth, and R. G. Goebel Computational Intelligence: A Logical Approach  Oxford University Press, New York, 1998  Porter9  Porter, A.A., and R.W. Selby  \223Empirically guided software development using metric-based classification trees,\224 IEEE Software Pp. 46-54, March 1990  Quinla  Quinlan, R C4.5: Programs for Machine Learning Morgan Kaufman, 1992  Srinivasa  Srinivasan, K., and D. Fisher,  \223Machine learning approaches to estimating software development effort,\224 IEEE Transactions on Software Engi neering Pp. 126-137, February 1995  Tian9  Tian, J., and M.V. Zelkowitz 223Complexity measure evaluation and selection,\224 IEEE Transactions on Software Engineering 21\(8\p. 641-649,  August 1995  Webb0  Webb, G., \223Efficient search for association rules,\224 Proceeding of KDD-2000 Boston, MA,  2000  Zhang0  Zhang, Du, \223Applying Machine Learning Algorithms in Software Development,\224 Modelling Software System Structures in a fastly moving scenario Santa Margherita Ligure, Italy, 2000 References Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


