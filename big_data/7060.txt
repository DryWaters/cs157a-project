978-1-5090-5515-9/16/$31.00 ©2016 IEEE Weighted Frequent Multi Partitioned Itemset Mining of Market-Basket Data using MapReduce on YARN Framework Sudhanshu Shekhar Bisoyi Dept. of Computer Science and Engg GIET, Gunupur sudhanshu.bisoyi@gmail.com Pragnyaban Mishra Dept. of Computer Science and Engg GIET, Gunupur pragnyaban@gmail.com S. N. Mishra Dept. of Computer Science Engineering IGIT, Sarang Sarose.mishra@gmail.com  Abstract   Association rule mining using weighted frequent itemset plays the vital role to determine the association 
and correlation among the items having different weights. These weights associated with the items signifies its importance in the transaction which is based on different criteria like rating popularity etc. The weighted frequent itemset mining in the distributed environment is one of the most popular research methodology for finding hidden information. In this paper we have focused on the number of instances of an item purchased in a particular transaction of market-basket data as weight of the items in that transaction.We have represented the weighted frequent itemset mining in the distributed large multi partitioned memory based upon the hadoop framework  Keywords—weighted frequent 
itemset, Association Rule BigData,  hadoop, YARN,split I   I NTRODUCTION  The main goal of data mining in Bigdata environment is to extract meaningfull hidden and uncertain knowledge from huge and unstructured data in an appropriate and understandable format. Frequent itemset mining is the exploratory technique for extracting potentially useful and hidden information from various data collected from different sources. The frequent pattern mining[1 was ai m e d i n  discovering frequent patterns or itemset whose occurrence 
frequency is more then the user specified threshold. Apriori  and the FP-Growth al g o ri t h m s are very wi del y use d  and  popular algorithm for mining the frequent itemset.These frequent itemset mining algorithms are based upon the antimonotonity otherwise known as downward closure property for pruning the infrequent itemset by comparing the user specified support known as minimum support. Based upon the frequent itemset mining various studies have been performed on Association rule mining seq u e n t i a l pat t e rn m i ni ng 4 5  weighted frequent patterns[6, 7, 8, 13, 14, 15 et c. The Ap ri ori  
algorithm scans the transactional database multiple times for generating the candidate itemset and frequent itemset. The candidate itemset will also very large when the items in the transaction is increasing significantly. It leads to a large execution time. In comparison to this FP-Growth avoids the generation of the candidate itemset but required more space for the construction of FP-tr ee. This memory constraints becomes the limitation when the transactional data size grows exponentially and becomes very large. Transactional data in the real time have their significant weight with respect to various criteria like customer rating, usage, market demand 
importance, price etc. So the demand of itemset mining with the associated weight plays the significant role in finding the item or pattern correlation and association for extracting hidden information. The weighted frequent itemset mining also plays the vital role in the analysis of product recommendation system and understanding the buying habits of users from various regions. Rather then considering the normal itemset we have considered the number of instance of the item purchased in the transaction as weight of the transaction In the era of BigData it has been shown that dataset for various data analysis application is increasing very first in 
an exponential fashion and in various formats. This increase rate in the data leads to the difficulty in storage and processing of the data in a single sequential machine. Many parallel and distributed algorithms has been proposed for mining the frequent itemset in a very large database[18,19 b u t ha vi n g  limiting issues like prepare the appropriate partition size for the data, distribute the data ap propriately, load balancing dynamically increase the partiti on when the data size grows etc. So in the context of BigD ata, the analysis of weighted frequent itemset mining in a distributed multi partitioned 
environment do not fit into the memory while processing the large amount of data in single machine. This issue can be solved by analyzing the Weighted Frequent Itemset Mining\(WFIM\ using MapReduce programming model over YARN framework of Hadoop. The MRV2 known as YARN is more optimized and scheduled framework then MRV1. The MapReduce of YARN is a massively parallel and distributed programming model for processing very large amount of structured and unstructured data 


In this paper we have analyzed the MPWFIM\(Multi Partitioned Weighted Frequent Itemset Mining\gorithm on the extensive and optimized di stributed framework of Hadoop known as YARN. We have also considered the weight of the transactional item as the number of instance of that item occurred in one transaction  II  RELATED  WORK A  Association Rule Mining Agrawal et. al. first introduce the problem of association rule mining over a market basket transaction database. Let 01 1      total n I II I  be the set of items. Let TDB be a transaction data base contaning all the transaction, where each transaction r T in TDB is a set of item, i.e r total TI  A set of item X is also referred as an itemset. An itemset that contains k items is called as k-itemset A transaction r T  supports an itemset X if r X T  An association rule is denoted as the form X Y where total X I   total YI   and  XY   e.g let       total I ABCDE     X AC and    YBE a rule X Y includes two important attribute values support and confidence denoted as Sup  X Y  Conf  X Y ectively. Given two user specified minimum support  minSup and minimum confidence  minConf thresholds, a rule X Y holds in TDB iff  Sup X Y minSup  and  Conf X Y minConf  The support value s% of X Y means s% of transaction in TDB contains X Y   The confidence values c% of X Y means that the transactions contain X in TDB in which c% of them also contain Y B  Hadoop Hadoop is the most popular and widely used open source framework for the BigData storage and analysis. It was inspired from Google’s GFS and MapReduce implementation to store and process huge volume of data T h e Ha d o o p  becomes very popular because it can handle very large amount of structured, semistructure and unstructured data on a cluster having low cost or general purpose computers. Hadoop basically stores the data in HDFS in a multi partitioned fashion[16,18 i.e if a d a ta is v e ry larg e it is d i v i d e d in to  multiple number of partitioned and distributed over all the computing nodes with multiple replica. For processing these data it uses a parallel processing framework known as MapReduce. Hadoop consiests of a well organized ecosystem for analysis of BigData C  MapReduce on YARN MapReduce is the processing fromework of hadoop which process huge amount of data in parallel fashion on the commodity hardware. The MapReduce uses key/value pairs for the processing of huge amount of data in a distributed fashion. As compared to the MRV1, the MRV2 i.e Mapreduce on YARN\(Yet Another Resource Navigator\ is more optimized in terms of job execution, resource management and scheduling. In order to do all the processing and data distribution YARN employs the global ResourceManager, per node NodeManager, ApplicationMaster and Container along with the NameNode and DataNo de. The YARN fail over and fancing for the recovery MapReduce is the defact o standard framework for the implementation of Apriory like ferquent pattern mining algorithms. The Apriori algorithm need many mapper and reducer phases to compute the frequent itemset[1 I n  21 an  efficient Apriori like algor ithm was proposed known as MRApriori which need only two phase and is based upon the data spliting mechanism. The Mapper is created based on number of split for the stored transactional data in HDFS. This algorithm each Mapper takes one split as input in the first phase and all the output from the Mapper were supplied to the reducer in the second phas e which produce the frequent itemset. The MRApriori is very efficient but generate very large amount of partial frequen t k-itemset in each node for which the performance is degrade  III  P ROPOSED W ORK  We have implemented the WFIM algorithm in multi partitioned environment and used the local aggregation to increase the efficiency using the MRV2 of Hadoop with container management. We have studied many WFIM algorithms in [14,15,16 bu t th ey are no t efficien t in terms o f  issues like partition management and local aggregation while generating frequent itemset in parallel. The main focus of our implementation is the way we have determined the item weight to find the hidden knowledge from the data. All these WFIM algorithms are not consid ering the number of instances of individual item in the transaction. We have taken the number of instance of that item as the weight of the item Association rule mining derives important information from the itemset in the form of support and confidence in a trans action for the two item 12  I I the rule is represented 12 I I  Here the support and confidence is not related to the weight associated with item in the transaction We have considered weight of the item as occurrence of the item in the transaction e.g 12112   r T II III Here the occurrence of 1 3 I and 2 2 I can be represented as 12  3 2 r TI I  In this situation supp ort and confidence are not much informative to find out hidden knowledge from the transactional dataset. In our approach we have not only generate support and confidence but also the correlation between LHS and RHS of the rule. When number of transaction are larger then the conventional algorithms are not sufficient and suitable to process the input and output We have taken the following synthesized transactional dataset where the weight of the item represents how many number of an item has been purchased in a transaction i.e the number of in stances of a perticular item appears in a transaction 


 11 2 5 22 4 32 3 41 2 4 51 3 62 3 71 3 81 2 3 91 2 3 10 1  5 4 3  3 3  2 5  3 4 3  5 6  4 3  2 1  1 3 2  2 4 5  3 TI I I TI I TI I TI I I TI I TI I TI I TI I I TI I I TI 24    7   5  II  Suppose 12 I I  is the generated association rule with confidence 4  6  0.67 The hidden information that we are getting from this association rule is in terms of the occurrence of the item as a whole Out of the total transaction 12 I I  present as follows 11 2 41 2 81 2 91 2 10 1 2   5    4    3    4   1    3   2  4   3    7  TI I TI I TI I TI I TI I        In this case it is quite difficult to find out in what way both the items are correlated in terms of their associated weights. We found in some of the transaction the occurrence of 2 I is larger then occurrence of 1 I and in some other cases the occurrence of 1 I is larger then 2 I Here it creates confusion whether 1 I participation is high or 2 I is high when both the items 1 I and 2 I are purchased together. Here we can divide 12 I I  into two different categories 1 case   1   I m  2  I n where  mn  2 case   1   I m  2  I n where  mn  From our study we are going to determine which categories of weighted items ar e dominating the transaction dataset. Suppose in a transaction database TDB  12 case and case  exist but 2 case  majority is high then we can claim that in the Association rule 1 I  2 I count of 1 I is smaller then count of 2 I  In both the cases the association rule with highest weight count is considered Let us considered the mentioned rules for our analysis 12 12 12 12 12 5 4 3 4 1 3 2 4 3 7 II II II II II       The above association rules can be grouped as per the mentioned cases case - 1  12 5 4 II   case - 2  12 3 4 II   12 1 3 II   12 2 4 II   12 3 7 II   Now let us take the total count of each categories 1 1   case I m   2  I n with  mn    12 5 4 II   1 2   case I m   2  I n with  mn    12 9 18 II    It is clearly visible that case - 2 is dominating case - 1 with highest number of count of 1 I and highest number of transactions. So the useful know ledge can be retrieved as an association exist among 1 I and 2 I where the count of 1 I is smaller then the count of 2 I ignoring exceptional cases Theorem-1  The number of transaction of the transactional database are not frequent iff the items are not frequent  Let total I Set of total items i I Individual items \(where i=0,1,2,...,n-1 total I  1 0 n i i I   total T Total number of transaction in the transactional database TDB  r T Individual transaction \(where r=0,1,2,...,m-1 total T  1 0 m r r T   As 0 1 r j m total TT     0 1  r j m total T Subset I     Let any item i total I I  where 01 in   is not frequent As i I is not frequent, any transactional itemset with item i I  is also not frequent. A tran saction containing infrequent itemset also not frequent. Hence may be said as infrequent transaction 


IV  THE  PROPOSED  ALGORITHM  PSEUDO  CODE   Mapper-1 1. class OneItemsetMapper 2.  Read transaction from split of TDB 3.  count=1 4.  WIList=0 5 0  1 rrm TTDB  012  6 ir I T 012  7 i I count 8.            WIList.add   ii I I count  9.       Emit\(WIList,NULL 10 Reducer-1 1. class OneItemsetReducer 2.  read the Mapper output from HDFS 3.  read\(WIList i I    i List I count  4  ii I count List I count 012  5 i I count 6   ii I I count  7.  if  i I count minCount  8   ii delete I I count  9   ii Emit I I count  10 Mapper-2 1. class RuleMapper 2.       Receive from OneItemReducer 3 1 C genFOneItemset 4.      ARList=generateAR 1 C  5 Partitioner 1. class RulePartitioner 2 rules ARList 012  where the rules represented as    i I m   j I n  3.   if  mn  4.       write rules to 1 p art   5.   else 6.       write rules to 2 p art   7 V  E XPERIMENTAL EVALUATION  For our experimental evaluation we have configured 5-node cluster with hadoop-2.6.0-cdh. All the nodes are having 4GB of RAM, 2.5GHz of CPU. The heap size for the JVM is 512MB which is for the general purpose application execution, 128MB of HDFS block size. The data is evenly distributed in all the datanodes of the cluster. We have executed our algorithm of supermarket dataset by normalizing it. The item weights are computed by MapReduce program considering the number of in stances of a particular item occurred in a transaction and added with the item as shown in the example\(Sec-III\e ha ve used execution time and minimum support count as the measure for the performance evaluation as shown in Fig-1. We have used the local aggregation in Mapper side and partitioned the Mapper output with costumed partitioner to increase the efficiency in execution. We have also analy ze the optimization of the job execution in the MRV2 container management It has been shown that with a single DataNode execution time is more if support is less and with multiple DataNode execution time is significantly improving with support count by varying from 0.01 to 0.10 as shown in the graph. This graph gas been generated using the plot of Revolution R and the the programming framework used is YARN on top of Hadoop In Fig-2 we have compared the performance measure between the MPWFIM and WFIM by considering the transaction size and number of rules generated. It has been found that MPWFIM algorithm generate less number of rules as compared to WFIM algorithm  Fig-1: Performance measuse of MPWFIM in single and multi node cluster   Fig-2: Performance measure between MPWFIM and WFIM  VI  CONCLUSION In this paper we have emphasized how the weight of an itemset can impact on the transactional data by considering the number of occurrences of a particular item in a transaction. By determining the frequent weighted itemset we have collected hidden information like how the associated rules are dominating to one another. We have propose how to choose an 


efficient rule to increase the marketting starategy by recomending a better product association. In our approach we have also proposed how efficiently the job can be optimized by using the costumed aggregation and partitioning. The partitiones are generated in such a way that the hadoop container of the NodeManager manage and execute the jobs from each partition, the rules will be stored in the partition by checking a proper condition such that they can be accessed and analyzed by the Reducer properly. We have used the YARN framework for the better performance evaluation. Our proposed parallel algorithm distributes the process of generating frequent itemsets and rules to multiple tasks executed on commodity machine. As part of the future work we try to propose automated fashion of performing partition as per the number of rules generated during the analysis    References   R. Ag ra wal, R. Sri k a n t Fast algorithms for mining association rules, in: Proceedings of the 20th International Conference on Very Large Data Bases”, \(1994\,  487– 499   G   Gra h n e J. Z h u, “Fas t al gori t h m s fo r f r eq ue nt i t e m s et  mining using FP-trees, IEEE Transactions on Knowledge and Data Engineering  \(2005\, 1347–1362   J   Han  J  Pei  a n d Y Yi n M i n i n g fre que nt  pat t e r n s  without candidate generation,” in Proc. ACM SIGMOD Int Conf. Manage. Data, \(2000\,  1–12   L. C h ang T W a ng D Yang, H. L u an S. Ta ng, “Ef f ic ient algorithms for incremental ai ntenance of closed sequential patterns in large databases”, Data and Knowledge Engineering. \(2009\p. 68–106  5 Y. C h en R. Bie, C. Xu A new approach for maximal frequent sequential patterns mining over data streams International Journal of Digital Content Technology and its Applications.”,  \(2011\,  104–112   C  F A h m e d S K Tan b e e r, B  S Jeo n g  Ef f i c i e nt m i ni ng  of weighted frequent patterns over data streams”, in Proceedings of the 11th IEEE International Conference on High Performance Computing and, Communications, June 2009, 400–406   B  V o F  C o ene n B  Le, “A new m e t hod f o r m i ni n g  frequent weighted itemsets based on WIT-trees.”, Expert Systems with Applications 40 \(4\ \(2013\,  1256–1264    U Y u n K  R y u Ef f i c i e nt m i ni ng of  m a xim a l correl a t e d weight frequent patterns”, Intelligent Data Analysis, \(2013 917– 939   Shvac h k o K, K u a ng H, R a di a S, e t al The hado o p  distributed file system Mass Storage Systems and Technologies \(MSST\posium on IEEE, \(2010\1 10 10 S h o u C   Z h a o D  M a l i k  T, et al. “Towards a provenanceaware distributed filesystem”, 5th USENIX Workshop on TaPP, NSDL 2013  1 E.H.S Ha n, G  Ka ry pi s S cal abl e paral l el dat a  m i ni ng fo r association rules”, IEEE Trans action on Knowledge and Data 2000   A N gre v ergne B., Sicard, N., & Termier, A Efficient parallel mining of gradual patterns on multicore processors.” Advances in Knowledge Discovery and Management, Springer, \(2012\, Vol. 398, pp. 137–151  1 G. Lee, U. Y u n  K Ry u, “Sliding win d o w ba se d  weighted maximal frequent pattern mining over data streams Expert Systems with Applications 41 \(2\ \(2014\,  694–708  1 B  Vo F. C o e n en B  Le, “A ne w m e t hod f o r m i ni n g  frequent weighted itemsets based on WIT-trees”, Expert Systems with Applications. \(2013\1256–1264  1 J  W a ng  Y. Ze n g  DS W F P  e f fi ci ent m i ni ng of  weighted frequent pattern over data streams”, Fuzzy Systems and Knowledge Discovery  \(2011\ 942–946   Zha o H, et al. “Researchi ng on the Placement of Data Replicas in the System of HDFS Cloud Storage Clusterr”, lProceedings of 2013 Chinese Intelligent Automation Conference Springer Berlin Heidelberg, \(2013 259–269  1 Le Z h ou Zhi y o n g Z h o ng Ji n C h an g Ju nji e  Li  Hu ang   J.Z.; Shengzhong Feng, "Balanced parallel FP-Growth with MapReduce" Information Computing and Telecommunications \(YCICT\, \(2010\  243–246  1 Dean Jeff rey an d Gh emawa Sanjay, “MapReduce Simplified Data Processing on Large Clusters.”, In proceedings of the 6th conference on Symposium on OSDI 2004\ 137–150  1 M i ngY e n Li n, Pei Yu Lee  an d Sue-C h en H s ue h Apriori-based frequent itemset mining algorithms on MapReduce.”, In Proceedings of the 6th International Conference on Ubiquitous Information Management and Communication \(ICUIMC ’12\. ACM, New York, NY, USA Article 76  2  Ya ng  X Y Liu Z  and Fu Y. “MapReduce as a Programming Model for Association Rules Algorithm on Hadoop.”, Proc. of the 3rd International Conference on Information Sciences and Inte raction Sciences. Chengdu China, IEEE. \(2010\99– 102  2 O. Ya hy a, O. He g azy Ehab Ezat. “An Efficient Implementation of Apriori Algorithm Based on HadoopMapreduce Model.”, Proc. of the International Journal of Reviews in Computing. \(2012\l. 12: 59–67 


V C ONCLUSION AND F UTURE S COPE Information about disease-associated genes is very useful in drug design Ef“cient methods for generating candidate genes for a disease are much required The existing tools use the abstract of articles for this purpose but that may lead to missing the associations present in main text These methods may identify the negative associations also which will increase the false positive rate The proposed method tries to address some of the limitations of the existing methods The proposed method uses the rule based Named Entity Recognition in full text articles to generate the initial set of candidate genes Then the frequent itemsets are extracted from this initial set of genes using frequent itemset mining This method improves the precision of the disease-associated gene extraction A few new gene-disease associations that are not mentioned in the HuGE Navigator database are also identi“ed Through the proposed method we could nd out that full text articles are better for mining out the associations than using the abstracts alone Since the method uses partition based frequent itemset mining local frequent itemsets for all the partitions can be found out parallelly thereby reducing the time required for frequent itemset mining Experimental results show that the proposed method extracts gene-disease associations with much better performance compared to the existing methods The proposed method can be extended to more number of diseases The results of frequent gene set mining can be used for identifying the gene-gene interactions in different diseases The genes which are associated with multiple diseases can also be identi“ed The method can be extended to add drugs also Then gene-disease-drug associations can be identi“ed using graph theoretic approaches These associations will be helpful in drug discovery R EFERENCES  T e x t mining  wikipedia the free enc yclopedia  https://en.wikipedia.org Online accessed 12-October  M P  Sa wicki G Samara M Hurwitz and E P assaro Human genome project The American journal of surgery  vol 165 no 2 pp 258…264 1993  Pubmed  http://www ncbi.nlm.nih.go v/pubmed Online accessed 3Novemeber  Pubmed central  http://www ncbi.nlm.nih.go v/pmc Online accessed 3-December  Medline  http://www medline.com/home.jsp Online accessed 3December  J.-Y  Jung T  F  DeLuca T  H Nelson and D P  W all  A literature search tool for intelligent extraction of disease-associated genes Journal of the American Medical Informatics Association  vol 21 no 3 pp 399…405 2014  S Pletscher Frankild A P allej  a K Tsafou J X Binder and L J Jensen Diseases Text mining and data integration of disease…gene associations Methods  vol 74 pp 83…89 2015  S Sreekala K Nazeer  et al  A literature search tool for identifying disease-associated genes using hidden markov model in Computational Systems and Communications ICCSC 2014 First International Conference on  pp 90…94 IEEE 2014  X Liu W  Zou and J W ang Li v e r cancer related gene analysis based on literature mining International Journal of Bioscience Biochemistry and Bioinformatics  vol 3 no 5 p 416 2013  C Quan and F  Ren Gene…disease association e xtraction by te xt mining and network analysis in Proceedings of the 5th International Workshop on Health Text Mining and Information Analysis Louhi EACL  pp 54…63 2014  A  Ozg  ur T Vu G Erkan and D R Radev Identifying gene-disease associations using centrality on a literature mined gene-interaction network Bioinformatics  vol 24 no 13 pp i277…i285 2008  J Pi  nero N Queralt-Rosinach  A Bravo J Deu-Pons A BauerMehren M Baron F Sanz and L I Furlong Disgenet a discovery platform for the dynamical exploration of human diseases and their genes Database  vol 2015 p bav028 2015  A P  Da vis B L King S Mockus C G Murphy  C Saraceni-Richards M Rosenstein T Wiegers and C J Mattingly The comparative toxicogenomics database update 2011 Nucleic acids research  vol 39 no suppl 1 pp D1067…D1072 2011  U Consortium et al  The universal protein resource uniprot Nucleic acids research  vol 36 no suppl 1 pp D190…D195 2008  S J Laulederkind G T  Hayman S.-J W ang J R Smith T  F  Lowry R Nigam V Petri J de Pons M R Dwinell M Shimoyama et al  The rat genome database 2013data tools and users Brie“ngs in bioinformatics  vol 14 no 4 pp 520…526 2013  J A Blak e C J Bult J T  Eppig J A Kadin J E Richardson M G D Group et al  The mouse genome database integration of and access to knowledge about the laboratory mouse Nucleic acids research  p gkt1225 2013  J Han and M Kamber  Data mining concepts and techniques the morgan kaufmann series in data management systems 2000  M H Dunham Data Mining Introductory and Advanced Topics  Prentice-Hall 2002  Medical subject headings  http://www ncbi.nlm.nih.go v/mesh Online accessed 15-December  U Leser and J Hak enber g What mak es a gene name named entity recognition in the biomedical literature Brie“ngs in bioinformatics  vol 6 no 4 pp 357…369 2005  D Nadeau and S Sekine  A surv e y of named entity recognition and classi“cation Lingvisticae Investigationes  vol 30 no 1 pp 3…26 2007  Hgnc  http://www genenames.or g/about/guidelinesgenesymbols Online accessed 3-December  J H Zar  Signi“cance testing of the spearman rank correlation coef cient Journal of the American Statistical Association  vol 67 no 339 pp 578…580 1972  C for Disease Control and Pre v ention Hugena vigator phenopedia  https://phgkb.cdc.gov/HuGENavigator Online accessed 10-March2016  S Berk el C R Marshall B W eiss J Ho we R Roeth U Moog V Endris W Roberts P Szatmari D Pinto et al  Mutations in the shank2 synaptic scaffolding gene in autism spectrum disorder and mental retardation Nature genetics  vol 42 no 6 pp 489…491 2010  L W eiss A Escayg J K earne y  M T rudeau B MacDonald M Mori J Reichert J Buxbaum and M Meisler Sodium channels scn1a scn2a and scn3a in familial autism Molecular psychiatry  vol 8 no 2 pp 186…194 2003  A Nakanishi A Minami Y  Kitagishi Y  Ogura and S Matsuda Brca1 and p53 tumor suppressor molecules in alzheimers disease International journal of molecular sciences  vol 16 no 2 pp 2879 2892 2015  M M W ilhelmus S M v a n der Pol Q Jansen M E W itte P  v a n der Valk A J Rozemuller B Drukarch H E de Vries and J Van Horssen Association of parkinson disease-related protein pink1 with alzheimer disease and multiple sclerosis brain lesions Free Radical Biology and Medicine  vol 50 no 3 pp 469…476 2011  D W orku F  Jouhra G Jiang N P atani R Ne wbold and K Mokbel Evidence of a tumour suppressive function of e2f1 gene in human breast cancer Anticancer research  vol 28 no 4B pp 2135…2139 2008  J M Rae M D Johnson J O Sche ys K E Cordero J M Larios and M E Lippman Greb1 is a critical regulator of hormone dependent breast cancer growth Breast cancer research and treatment  vol 92 no 2 pp 141…149 2005  L Li Z Lou and L W ang The role of fkbp5 in cancer aetiology and chemoresistance British journal of cancer  vol 104 no 1 pp 19…23 2011 311 


The last MapReduce job aggregates the second MapReduce jobÕs output i.e all the frequent patterns to generate the nal frequent patterns for each item For example the output of the second MapReduce job includes three frequent patterns namely abc adc and bdc Using these three frequent patterns as an input the third MapReduce job creates the nal results for each item as a abc,adc b abc,bdc c abc,adc,bdc and d adc,bdc We pay attention to the second MapReduce job and the reason is three-fold First at the heart of FiDoop-DP is the construction of all frequent patterns which is implemented in the second MapReduce job Second this MapReduce job is more complicated and comprehensive than the rst and the third ones Third this job plays a vital role in achieving high performance of FiDoop-DP To optimize the performance of Pfp we make an improvement in the second MapReduce job by incorporating the Voronoi diagram-based partitioning idea In what follows we elaborate the algorithm for the second MapReduce job Given a set of k pivots  p 1 p 2   p k  selected in the preprocessing step we perform item grouping and data partitioning using statistical data collected for each partition Algorithm 1 is an LSH-based approach that integrates the item grouping see Step 3 and partitioning processes see Steps 4-20 In Algorithm 1 each mapper takes transactions as an input in the format of Pair h LongWritableoffset Textrecord i see Step 1 The mappers concurrently load FList to lter infrequent items of each transaction see Step 2 Meanwhile FList is divided into Q groups i.e GLists  by determining similarity among items and the given pivots  P 1 P 2   P k  each GList consists of Gid and the collection of items in the group see Step 3 Then each record including the pivots  P 1 P 2   P k  T i is transformed into a set followed by applying the minhash function to generate a column c i of signatures matrix see Steps 4-12 and algorithm 2 LSH is carried out using the above signature matrix M 0  l 005 n  see Steps 13-16 M 0 is divided into b bands each of which contains r rows where b 005 r  l  Then these bands are hashed to a number of hash buckets each hash bucket contains similar transactions see Step 15 Below we show the rationale behind applying LSH to determine similarity among transactions Given two transactions e.g T 1 and T 2  if there exists at least a pair of bands e.g b 1 2 T 1 and b 2 2 T 2  such that bands b 1 and b 2 are hashed into the same bucket then transactions T 1 and T 2 are considered similar see Step 17 Assume the similarity between two columns denoted as c 1 c 2  of a signature matrix is p  then the probability that c 1 and c 2 are exactly the same in a band is p r  the probability that c 1 and c 2 are completely different with respect to all the b bands is 1 003 s r  We show that if selecting appropriate values of b and r  transactions with a great similarity are mapped into one bucket with a very high probability If a band of T i shares the same bucket with a band of P j  we assign T i to the partition labelled as P j  We donate such an assignment in form of a pair Pair h P j T i i  see Steps 1819 At the end of the map tasks GLists are checked to guarantee the data completeness Steps 21-24 Finally the mappers emit Pair h P i T i i to be shufßed and combined for the second jobÕs reducers and reducers conduct local FP-Growth to generate the nal frequent patterns of each item see Steps 28-42 Algorithm 1 LSH-Fpgrowth Input FList  k pivots DB i  Output transactions corresponding to each Gid 1 function MAP key offset values DB i  2 load FList  k pivots 3 Glists  GenerateGlists  FList kpivots   based on the correlation of each item in FList and k pivots  4 for all T in DB i  do 5 items 010  Split  eachT   6 for all item in do 7 if item is in FList then 8 a 010  item 9 end if 10 end for 11 Add into Arrarylist sigMatrix  12 end for 13 for all  c i in sigMatrix  do 14 divide c i into b bands with r rows 15 Hashbucket  HashMap  each band of c i   16 end for 17 if at least one band of c i and pivot p j is hashed into the same bucket then 18 Gid  j  19 Output\(Gid new 20 end if 21 for all each GList t  t 6  i  do 22 if c i contains an item in GList t then 23 Gid  t 24 Output\(Gid new  guarantee the data completeness for each GList  25 end if 26 end for 27 end function Input transactions corresponding to each Gid Output frequent k-itemsets 28 function REDUCE key Gid  values DB Gid  29 Load GLists 30 nowGroup  GList Gid 31 localFptree.clear 32 for all  T i in DB Gid  do 33 insert-build-fp-tree\(localFptree T i  34 end for 35 for all  a i in nowGroup  do 36 DeÞne a max heap HP with size K  37 Call TopKFPGrowth\(localFptree a i  HP  38 for all  v i in HP  do 39 Output v i  support v i  40 end for 41 end for 42 end function During the process of generating the signature matrix it is infeasible to permute a large characteristic matrix due to high time complexity This problem is addressed by employing the Minwise Independent permutation to speed up the process see algorithm 2 Let h\(x be a permutation function on a set X  for an element x 004 X  the value permuted is h  x  min  h  x 1  h  x 2    h  x n   When we XUN ET AL FIDOOP-DP DATA PARTITIONING IN FREQUENT ITEMSET MINING ON HADOOP CLUSTERS 107 


obtain the signature matrix the original high-dimensional data are mapped to a low-dimensional space And the time complexity of subsequent operations is greatly reduced thanks to the above dimensions reduction 6E XPERIMENTAL E VALUATION We implement and evaluate the performance of FiDoop-DP on our in-house Hadoop cluster equipped with 24 data nodes Each node has an Intel E5-1620 v2 series 3.7gHZ 4 core processor 16G main memory and runs on the Centos 6.4 operating system on which Java JDK 1.8.0_20 and Hadoop 1.1.2 are installed The hard disk of NameNode is conÞgured to 500 GB and the capacity of disks in each DataNode is 2 TB All the data nodes of the cluster have Gigabit Ethernet NICs connected to Gigabit ports on the switch the nodes can communicate with one another using the SSH protocol We use the default Hadoop parameter conÞgurations to set up the replication factor i.e three and the numbers of Map and Reduce tasks Our experimental results show that over 90 percent of the processing time is spent running the second MapReduce job therefore we focus on performance evaluation of this job in our experiments To evaluate the performance of the proposed FiDoop-DP We generate synthetic datasets using the IBM Quest Market-Basket Synthetic Data Generator which can be exibly conÞgured to create a wide range of data sets to meet the needs of various test requirements The parameters characteristics of our dataset are summarized in Table 1 6.1 The Number of Pivots We compare the performance of FiDoop-DP and Pfp when the number k of pivots varies from 20 to 180 Please note that k in FiDoop-DP corresponds to the number of groups in Pfp Fig 3 reveals the running time shufßing cost and mining cost of FiDoop-DP and Pfp processing the 4G 61-block T40I10D dataset on the 8-node cluster Fig 3 shows that FiDoop-DP improves the overall performance of Pfp Such performance improvements are contributed by good data locality achieved by Fidoop-DPÕs analysis of correlation among the data FiDoop-DP optimizes data locality to reduce network and computing loads by eliminating of redundant transactions on multiple nodes As a result FiDoop-DP is capable of cutting mining cost see Fig 3b and data shufßing cost see Fig 3c Algorithm 2 Generate-signature-matrix Input  Output signature matrix of 1 function G ENERATE SIGNATURE MATRIX  2 for i=0 i  numHashFunctions i do 3 minHashValues  i 010 Integer:MAX VALUE  4 end for 5 for i=0 i  numHashFunctions i do 6 for all ele do 7 value  Integer  ele   8 byte  value   24  9 byte  value   16  10 byte  value   8  11 byte value  12 hashIndex  hashFunction  i 010 hash  bytesToHash   13 if  minHashValues  i 010  hashIndex then 14 15 end if 16 end for 17 end for 18 end function Fig 3a illustrates that the performance improvement of FiDoop-DP over Pfp becomes pronounced when the number k of pivots is large e.g 180 A large k in Pfp gives rise to a large number of groups which in turn leads to an excessive number of redundant transactions processed and transfers among data nodes As such the large k offers a great opportunity for FiDoop-DP to alleviate PfpÕs heavy CPU and network loads induced by the redundant transactions Interestingly we observe from Fig 3a that the overall running times of the two algorithms are minimized when number k is set to 60 Such minimized running times are attributed to 1 the FP-Growth mining cost plotted in Fig 3b and 2 the shufßing cost shown in Fig 3c Figs 3b and 3c illustrate that the mining cost and shufßing cost are minimized when parameter k becomes60inarangefrom20to180 The running times mining cost and shufßing cost exhibit a U-shape in Fig 3 because of the following reasons To conduct the local FP-Growth algorithm we need to group frequent 1-itemsets followed by partitioning transactions based TABLE 1 Dataset Parameters Avg.length Items Avg.Size/Transaction T10I4D 10 4000 17.5B T40I10D 40 10000 31.5B T60I10D 60 10000 43.6B T85I10D 85 10000 63.7B Fig 3 Impacts of the number of pivots on FiDoop-DP and Pfp 108 IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS VOL 28 NO 1 JANUARY 2017 


on items contained in each item group When the number of pivots increases the entire database is split into a ner granularity and the number of partitions increase correspondingly Such a ne granularity leads to a reduction in distance computation among transactions On the other hand when the pivot number k continues growing the number of transactions mapped into one hash bucket signiÞcantly increases thereby leading to a large candidate-object set and high shufßing cost see Figs 3b and 3c Consequently the overall execution time is optimized when k is 60 for both algorithms see Fig 3a 6.2 Minimum Support Recall that minimum support plays an important role in mining frequent itemsets We increase minimum support thresholds from 0.0005 to 0.0025 percent with an increment of 0.0005 percent to evaluate the impact of minimum support on FiDoop-DP The other parameters are the same as those for the previous experiments Fig 4a shows that the execution times of FiDoop-DP and Pfp decrease when the minimum support is increasing Intuitively a small minimum support leads to an increasing number of frequent 1-itemsets and transactions which have to be scanned and transmitted Table 2 illustrates the size of frequent 1-itemsets stored in FList and the number of nal output records of the two parallel solutions under various minimum-support values Fig 4a reveals that regardless of the minimum-support value FiDoop-DP is superior to Pfp in terms of running time Two reasons make this performance trend expected First FiDoop-DP optimizes the partitioning process by placing transactions with a high similarity into one group rather than randomly and evenly grouping the transaction Fig 4b conÞrms that FiDoop-DPÕs shufßing cost is signiÞcantly lower than that of Pfp thanks to optimal data partitions offered by FiDoop-DP Second this grouping strategy in FiDoop-DP minimizes the number of transactions for each GList under the premise of data completeness which leads to reducing mining load for each Reducer The grouping strategy of FiDoop-DP introduces computing overhead including signature-matrix calculation and hashing each band into a bucket Nevertheless such small overhead is offset by the performance gains in the shufßing and reduce phases Fig 4a also shows that the performance improvement of FiDoop-DP over Pfp is widened when the minimum support increases This performance gap between FiDoop-DP and Pfp is reasonable because pushing minimum support up in FiDoop-DP lters out an increased number of frequent 1-itemsets which in turn shortens the transaction partitioning cost Small transactions simplify the correlation analysis among the transactions thus small transactions are less likely to have a large number of duplications in their partitions As a result the number of duplicated transactions to be transmitted among the partitions is signiÞcantly reduced which allows FiDoop-DP to deliver better performance than Pfp 6.3 Data Characteristic In this group of experiments we respectively evaluate the impact of dimensionality and data correlation on the performance of FiDoop-DP and Pfp by changing the parameters in the process of generating the datasets using the IBM Quest Market-Basket Synthetic Data Generator 6.3.1 Dimensionality The average transaction length directly determines the dimensions of a test data We conÞgure the average transaction length to 10 40 60 and 85 to generate T10I4D 130 blocks T40I10D 128 blocks T60I10D 135 blocks T85I10D 133 blocks datasets respectively In this experiment we measure the impacts of dimensions on the performance of FiDoop-DP and Pfp on the 8-node Hadoop cluster The experimental results plotted in Fig 5a clearly indicate that an increasing number of dimensions signiÞcantly raises the running times of FiDoop-DP and Pfp This is because increasing the number of dimensions increases the number of groups thus the amount of data transmission sharply goes up as seen in Fig 5b The performance improvements of FiDoop-DP over Pfp is diminishing when the dimensionality increases from 10 to 85 For example FiDoop-DP offers an improvement of 29.4 percent when the dimensionality is set to 10 the improvement drops to 5.2 percent when the number of dimensions becomes 85 In what follows we argue that FiDoop-DP is inherently losing the power of reducing the number of redundant transactions in high-dimensional data When a dataset has a low dimensionality FiDoop-DP tends to build partitions Fig 4 Impact of minimum support on FiDoop-DP and Pfp TABLE 2 The Size of FList and the Number of Final Output Records Under Various Minimum-Support Values minsupport 0.0005 0.001 0.0015 0.002 0.0025 FList 14.69k 11.6k 9.71k 6.89k 5.51k OutRecords 745 588 465 348 278 XUN ET AL FIDOOP-DP DATA PARTITIONING IN FREQUENT ITEMSET MINING ON HADOOP CLUSTERS 109 


each of which has distinct characteristics compared with the other partitions Such distinct features among the partitions allow FiDoop-DP to efÞciently reduce the number of redundant transactions In contrast a dataset with high dimensionality has a long average transaction length therefore data partitions produced by FiDoop-DP have no distinct discrepancy Redundant transactions are likely to be formed for partitions that lack distinct characteristics Consequently the beneÞt offered by FiDoop-DP for highdimensional datasets becomes insigniÞcant 6.3.2 Data Correlation We set the correlation among transactions i.e corr to 0.15 0.25 0.35 0.45 0.55 0.65 and 0.75 to measure the impacts of data correlation on the performance of the two algorithms on the 8-node Hadoop cluster The Number of Pivots is set to 60 see also Section 6.1 The experimental results plotted in Fig 5c clearly indicate that FiDoop-DP is more sensitive to data correlation than Pfp This performance trend motivates us to investigate the correlation-related data partition strategy Pfp conducts default data partition based on equal-size item group without taking into account the characteristics of the datasets However FiDoop-DP judiciously groups items with high correlation into one group and clustering similar transactions together In this way the number of redundant transactions kept on multiple nodes is substantially reduced Consequently FiDoop-DP is conducive to cutting back both data transmission trafÞc and computing load As can be seen from Fig 5c there is an optimum balance point for data correlation degree to tune FiDoop-DP performance e.g 0.35 in Fig 5c If data correlation is too small Fidoop-DP will degenerate into random partition schema On the contrary it is difÞcult to divide items into relatively independent groups when data correlation is high meaning that an excessive number of duplicated transactions have to be transferred to multiple nodes Thus a high data correlation leads to redundant transactions formed for partitions thereby increasing network and computing loads 6.4 Speedup Now we are positioned to evaluate the speedup performance of FiDoop-DP and Pfp by increasing the number of data nodes in our Hadoop cluster from 4 to 24 The T40I10D 128 blocks dataset is applied to drive the speedup analysis of the these algorithms Fig 6 reveals the speedups of FiDoop-DP a nd Pfp as a function of the number of data nodes The experimental results illustrated in Fig 6a show that the speedups of FiDoop-DP and Pfp linearly scale up with the increasing number of data nodes Such a speedup trend can be attributed to the fact that increasing the number of data nodes under a xed input data size inevitably 1 reduces the amount of itemsets being handled by each node and 2 increases communication overhead among mappers and reducers Fig 6a shows that FiDoop-DP is better than Pfp in terms of the speedup efÞciency For instance the FiDoop-DP improves the speedup efÞciency of Pfp by up to 11.2 percent with an average of 6.1 percent This trend suggests FiDoopDP improves the speedup efÞciency of Pfp in large-scale The speedup efÞciencies drop when the Hadoop cluster scales up For example the speedup efÞciencies of FiDoopDP and Pfp on the 4-node cluster are 0.970 and 0.995 respectively These two speedup efÞciencies become 0.746 and 0.800 on the 24-node cluster Such a speedup-efÞciency trend is driven by the cost of shufßing intermediate results which sharply goes up when the number of data nodes scales up Although the overall computing capacity is improved by increasing the number of nodes the cost of synchronization and communication among data nodes tends to offset the gain in computing capacity For example the results plotted in Fig 6b conÞrm that the shufßing cost Fig 5 Impacts of data characteristics on FiDoop-DP and Pfp Fig 6 The speedup performance and shufßing cost of FiDoop-DP and Pfp 110 IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS VOL 28 NO 1 JANUARY 2017 


is linearly increasing when computing nodes are scaled from 4 to 24 Furthermore the shufßing cost of Pfp is larger than that of FiDoop-DP 6.5 Scalability In this group of experiments we evaluate the scalability of FiDoop-DP and Pfp when the size of input dataset dramatically grows Fig 7 shows the running times of the algorithms when we scale up the size of the T40I10D data series Figs 7a and 7b demonstrate the performance of FiDoop-DP processing various datasets on 8-node and 24-node clusters respectively Fig 7 clearly reveals that the overall execution times of FiDoop-DP and Pfp go up when the input data size is sharply enlarged The parallel mining process is slowed down by the excessive data amount that has to be scanned twice The increased dataset size leads to long scanning time Interestingly FiDoop-DP exhibits a better scalability than Pfp Recall that see also from Algorithm 1 the second MapReduce job compresses an initial transaction database into a signature matrix which is dealt by the subsequent process The compress ratio is high when the input data size is large thereby shortening the subsequent processing time Furthermore Fidoop-DP lowers the network trafÞc induced by the random grouping strategy in Pfp In summary the scalability of FiDoop-DP is higher than that of Pfp when it comes to parallel mining of an enormous amount of data 7R ELATED W ORK 7.1 Data Partitioning in MapReduce Partitioning in databases has been widely studied for both single system servers e.g and distributed storage systems e.g BigTable PNUTS[31 The existing approaches typically produce possible ranges or hash partitions which are then evaluated using heuristics and cost models These schemes offer limited support for OLTP workloads or query analysis in the context of the popular MapReduce programming model In this study we focus on the data partitioning issue in MapReduce High scalability is one of the most important design goals for MapReduce applications Unfortunately the partitioning techniques in existing MapReduce platforms e.g Hadoop are in their infancy leading to serious performance problems Recently a handful of data partitioning schemes have been proposed in the MapReduce platforms Xie et al  developed a data placement management mechanism for heterogeneous Hadoop clusters Their mechanism partitions data fragments to nodes in accordance to the nodes processing speed measured by computing ratios In addition Xie et al  designed a data redistribution algorithm in HDFS to address the data-skew issue imposed by dynamic data insertions and deletions CoHadoop is a H a d oop s lightweight extension which is designed to identify relateddataÞlesfollowedbyamodiÞeddataplacement policy to co-locate copies of those related les in the same server CoHadoop considers the relevance among les that is CoHadoop is an optimization of HaDoop for multiple les A key assumption of the MapReduce programming model is that mappers are completely independent of one another Vernica et al  broke such an assumption by introducing an asynchronous communication channel among mappers T his c hannel e nables the m appers to see global states managed in metadata Such situationaware mappers SAMs can enable MapReduce to exibly partition the inputs Apart from this adaptive sampling and partitioning were proposed to produce balanced partitions for the reducers by sampling mapper outputs and making use of obtained statistics Graph and hypergraph partitioning have been used to guide data partitioning in parallel computing Graph-based partitioning schemes capture data relationships For example Ke et al applied a graphic-execution-plan graph EPG to perform cost estimation and optimization by analyzing various properties of both data and computation Their estimation module coupled with the cost model estimate the runtime cost of each vertex in an EPG which represents the overall runtime cost a data partitioning plan is determined by a cost optimization module Liroz-Gistau et al proposed the MR-Part technique which partitions all input tuples producing the same intermediate key co-located in the same chunk Such a partitioning approach minimizes data transmission among mappers and reducers in the shufße phase The approach captures the relationships between input tuples and intermediate keys by monitoring the execution of representative workload Then based on these relationships their approach applies a min-cut k-way graph partitioning algorithm thereby partitioning and assigning the tuples to appropriate fragments by modeling the workload with a hyper graph In doing so subsequent MapReduce jobs take full advantage of data locality in the reduce phase Their partitioning strategy suffers from adverse initialization overhead Fig 7 The scalability of FiDoop-DP and Pfp when the size of input dataset increases XUN ET AL FIDOOP-DP DATA PARTITIONING IN FREQUENT ITEMSET MINING ON HADOOP CLUSTERS 111 


7.2 Application-Aware Data Partitioning Various efÞcient data partitioning strategies have been proposed to improve the performance of parallel computing systems For example Kirsten et al  developed two general partitioning strategies for generating entity match tasks to avoid memory bottlenecks and load imbalances Taking into account the characteristics of input data Aridhi et al proposed a novel density-based data partitioning technique for approximate large-scale frequent subgraph mining to balance computational load among a collection of machines Kotoulas et al built a data distribution mechanism based on clustering in elastic regions Traditional term-based partitioning has limited scalability due to the existence of very skewed frequency distributions among terms Load-balanced distributed clustering across networks and local clustering are introduced to improve the chance that triples with a same key are collocated These selforganizing approaches need no data analysis or upfront parameter adjustments in a priori Lu et al studied k nearest neighbor join using MapReduce in which a data partitioning approach was designed to reduce both shufßing and computational costs In LuÕs study objects are divided into partitions using a Voronoi diagram with carefully selected pivots Then data partitions i.e Voronoi cells are clustered into groups only if distances between them are restricted by a speciÞc bound In this way their approach can answer the k-nearest-neighbour join queries by simply checking object pairs within each group FIM for data-intensive applications over computing clusters has received a growing attention efÞcient data partitioning strategies have been proposed to improve the performance of parallel FIM algorithms A MapReducebased Apriori algorithm is designed to incorporate a new dynamic partitioning and distributing data method to improve mining performance This method divides input data into relatively small splits to provide exibility for improved load-balance performance Moreover the master node doesnÕt distribute all the data once rather the rest data are distributed based on dynamically changing workload and computing capability weight of each node Similarly Jumbo adopted a dynamic partition assignment technology enabling each task to process more than one partition Thus these partitions can be dynamically reassigned to different tasks to improve the load balancing performance of Pfp Uthayopas et al  investigated I/O and execution scheduling strategies to balance data processing load thereby enhancing the utilization of a multi-core cluster system supporting association-rule mining In order to pick a winning strategy in terms of data-blocks assignment Uthayopas et al incorporated three basic placement policies namely the round robin range and random placement Their approach ignores data characteristics during the course of mining association rules 8F URTHER D ISCUSSIONS In this study we investigated the data partitioning issues in parallel FIM We focused on MapReduce-based parallel FPtree algorithms in particular we studied how to partition and distribute a large dataset across data nodes of a Hadoop cluster to reduce network and computing loads We argue that the general idea of FiDoop-DP proposed in this study can be extended to other FIM algorithms like Apriori running on Hadoop clusters Apriori-based parallel FIM algorithms can be classiÞed into two camps namely count distribution and data distribution  For the count distribution camp each node in a cluster calculates local support counts of all candidate itemsets Then the global support counts of the candidates are computed by exchanging the local support counts For the data distribution camp each node only keeps the support counts of a subset of all candidates Each node is responsible for delivering its local database partition to all the other processors to compute support counts In general the data distribution schemes have higher communication overhead than the count distribution ones whereas the data distribution schemes have lower synchronization overhead than its competitor Regardless of the count distribution or data distribution approaches the communication and synchronization cost induce adverse impacts on the performance of parallel mining algorithms The basic idea of Fidoop-DPÑgrouping highly relevant transactions into a partition allows the parallel algorithms to exploit correlations among transactions in database to cut communication and synchronization overhead among Hadoop nodes 9C ONCLUSIONS A ND F UTURE W ORK To mitigate high communication and reduce computing cost in MapReduce-based FIM algorithms we developed FiDoop-DP which exploits correlation among transactions to partition a large dataset across data nodes in a Hadoop cluster FiDoop-DP is able to 1 partition transactions with high similarity together and 2 group highly correlated frequent items into a list One of the salient features of FiDoopDP lies in its capability of lowering network trafÞc and computing load through reducing the number of redundant transactions which are transmitted among Hadoop nodes FiDoop-DP applies the Voronoi diagram-based data partitioning technique to accomplish data partition in which LSH is incorporated to offer an analysis of correlation among transactions At the heart of FiDoop-DP is the second MapReduce job which 1 partitions a large database to form a complete dataset for item groups and 2 conducts FP-Growth processing in parallel on local partitions to generate all frequent patterns Our experimental results reveal that FiDoop-DP signiÞcantly improves the FIM performance of the existing Pfp solution by up to 31 percent with an average of 18 percent We introduced in this study a similarity metric to facilitate data-aware partitioning As a future research direction we will apply this metric to investigate advanced loadbalancing strategies on a heterogeneous Hadoop cluster In one of our earlier studies see for details we addressed the data-placement issue in heterogeneous Hadoop clusters where data are placed across nodes in a way that each node has a balanced data processing load Our data placement scheme can balance the amount of data stored in heterogeneous nodes to achieve improved data-processing performance Such a scheme implemented at the level of Hadoop distributed le system HDFS is unaware of correlations among application data To further improve load balancing 112 IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS VOL 28 NO 1 JANUARY 2017 


mechanisms implemented in HDFS we plan to integrate FiDoop-DP with a data-placement mechanism in HDFS on heterogeneous clusters In addition to performance issues energy efÞciency of parallel FIM systems will be an intriguing research direction A CKNOWLEDGMENTS The work in this paper was in part supported by the National Natural Science Foundation of P.R China No.61272263 No.61572343 Xiao QinÕs work was supported by the U.S National Science Foundation under Grants CCF-0845257 CAREER The authors would also like to thank Mojen Lau for proof-reading R EFERENCES  M J Zaki Parallel and distribu ted associat ion mining A survey IEEE Concurrency  vol 7 no 4 pp 14Ð25 Oct 1999  I Pramudiono and M Kitsuregawa  Fp-tax Tree structure based generalized association rule mining in Proc 9th ACM SIGMOD Workshop Res Issues Data Mining Knowl Discovery  2004 pp 60Ð63  J De an a n d S Gh e ma wa t M ap re du ce  S i mp l i e d da ta pr o ce s si n g on large clusters ACM Commun  vol 51 no 1 pp 107Ð113 2008  S Sakr A Liu and A G Fayoumi The family of mapred uce and large-scale data processing systems ACM Comput Surveys  vol 46 no 1 p 11 2013  M.-Y Lin P.-Y Lee and S.-C Hsueh Apriori-based frequent itemset mining algorithms on mapreduce in Proc 6th Int Conf Ubiquitous Inform Manag Commun  2012 pp 76:1Ð76:8  X Li n  Mr a pr io ri  As so ci a ti o n ru le s a lg o ri th m ba se d on mapreduce in Proc IEEE 5th Int Conf Softw Eng Serv Sci  2014 pp 141Ð144  L Zhou Z Zhong J Chang J Li J Huang and S Feng Balanced parallel FP-growth with mapreduce in Proc IEEE Youth Conf Inform Comput Telecommun  2010 pp 243Ð246  S Hong Z Huaxuan C Shiping and H Chunyan The study of improved FP-growth algorithm in mapreduce in Proc 1st Int Workshop Cloud Comput Inform Security  2013 pp 250Ð253  M Riondato  J A DeBrabant R Fonseca and E Upfal Parma A parallel randomized algorithm for approximate association rules mining in mapreduce in Proc 21st ACM Int Conf Informa Knowl Manag  2012 pp 85Ð94  C Lam Hadoop in Action  Greenwich USA Manning Publications Co 2010  H Li Y Wang D Zhang M Zhang and E Y Chang PFP Parallel FP-growth for query recommendation in Proc ACM Conf Recommender Syst  2008 pp 107Ð114  C Curino E Jones Y Zhang and S Madden Schism A workload-driven approach to database replication and partitioning Proc VLDB Endowment  vol 3 no 1-2 pp 48Ð57 2010  P Uthayop as and N Benjamas Impact of i/o and execution scheduling strategies on large scale parallel data mining J Next Generation Inform Technol  vol 5 no 1 p 78 2014  I  P r a m u d i o n o a n d M  K i t s u r e g a w a  P a r a l l e l F P g r o w t h o n P C cluster in Proc.Adv.Knowl.DiscoveryDataMining  2003 pp 467Ð473  Y Xun J Zhang and X Qin Fidoop Parallel mining of frequent itemsets using mapreduce IEEE Trans Syst Man Cybern Syst  vol 46 no 3 pp 313Ð325 Mar 2016 doi 10.1109 TSMC.2015.2437327  S Owen R Anil T Dunning and E Friedman Mahout Action  Greenwich USA Manning 2011  D Borthakur  Hdfs architecture guide HADOOP APACHE PROJECT Available  http://hadoop.apache.org/common/docs current/hdfs design.pdf 2008  M Zaharia M Chowdhury M J Franklin  S Shenker and I Stoica Spark Cluster computing with working sets in Proc 2nd USENIX Conf Hot Topics Cloud Comput  2010 p 10  W Lu Y Shen S Chen and B C Ooi EfÞcient proces sing of k nearest neighbor joins using mapreduce Proc VLDB Endowment  vol 5 no 10 pp 1016Ð1027 2012  T Kanung o D M Mount N S Netanya hu C D Piatko R Silverman and A Y Wu An efÞcient k-means clustering algorithm Analysis and implementation IEEE Trans Pattern Anal Mach Intell  vol 24 no 7 pp 881Ð892 Jul 2002  A K Jain Data clustering 50 years beyond k-means Pattern Recog Lett  vol 31 no 8 pp 651Ð666 2010  D Arthur and S Vassilvitskii  k-means  The advantages of careful seeding in Proc 18th Annu ACM-SIAM Symp Discr Algorithms  2007 pp 1027Ð1035  J Leskovec A Rajaraman and J D Ullman Mining Massive Datasets  Cambridge U.K Cambridge Univ Press 2014  A Stupar  S Mich el and R Schen kel Rankred uceÐpr ocessin g k-nearest neighbor queries on top of mapreduce in Proc 8th Workshop Large-Scale Distrib Syst Informa Retrieval  2010 pp 13Ð18  B Bahmani A Goel and R Shinde EfÞcient distributed locality sensitive hashing in Proc 21st ACM Int Conf Inform Knowl Manag  2012 pp 2174Ð2178  R Panigrahy Entropy based nearest neighbor search in high dimensions in Proc 17th Annu ACM-SIAM Symp Discr Algorithm  2006 pp 1186Ð1195  A Z Broder M Charikar  A M Frieze and M Mitzenma cher Min-wise independent permutations J Comput Syst Sci  vol 60 no 3 pp 630Ð659 2000  L Cristofor ARtool Association rule mining algorit hms and tools 2006  S Agrawal V Narasayya  and B Yang Integrating vertical and horizontal partitioning into automated physical database design in Proc ACM SIGMOD Int Conf Manag Data  2004 pp 359Ð370  F Chang J Dean S Ghema wat W Hsieh D Wallach  M  Burrows T Chandra A Fikes and R Gruber Bigtable A distributed structured data storage system in Proc 7th Symp Operating Syst Des Implementation  2006 pp 305Ð314  B F Cooper R Ramakrishn an U Srivastava A Silberstein P Bohannon H.-A Jacobsen N Puz D Weaver and R Yerneni Pnuts Yahoo!Õs hosted data serving platform Proc VLDB Endowment  vol 1 no 2 pp 1277Ð1288 2008  J Xie and X Qin The 19th heterogenei ty in computing workshop HCW 2010 in Proc IEEE Int Symp Parallel Distrib Process Workshops Phd Forum  Apr 2010 pp 1Ð5  M Y Eltabakh Y Tian F  Ozcan R Gemulla A Krettek and J McPherson Cohadoop Flexible data placement and its exploitation in hadoop Proc VLDB Endowment  vol 4 no 9 pp 575 585 2011  R Vernica A Balmin K S Beyer and V Ercegovac Adaptive mapreduce using situation-aware mappers in Proc 15th Int Conf Extending Database Technol  2012 pp 420Ð431  Q Ke V Prabhakar an Y Xie Y Yu J Wu and J Yang Optimizing data partitioning for data-parallel computing uS Patent App 13/325,049 Dec 13 2011  M Liroz-Gis tau R Akbarinia D Agrawal E Pacitti  and P Valduriez Data partitioning for minimizing transferred data in mapreduce in Proc 6th Int Conf Data Manag Cloud Grid P2P Syst  2013 pp 1Ð12  T Kirsten L Kolb M Hartung A Gro H K  opcke and E Rahm Data partitioning for parallel entity matching Proc VLDB Endowment  vol 3 no 2 pp 1Ð8 2010  S Kotoulas E Oren and F Van Harmelen Mind the data skew Distributed inferencing by speeddating in elastic regions in Proc 19th Int Conf World Wide Web  2010 pp 531Ð540  L Li and M Zhang The strategy of mining associat ion rule based on cloud computing in Proc Int Conf Bus Comput Global Inform  2011 pp 475Ð478  S Groot K Goda and M Kitsuregawa  Towards improv ed load balancing for data intensive distributed computing in Proc ACM Symp Appl Comput  2011 pp 139Ð146  M Z Ashra D Taniar and K Smith ODAM An optimiz ed distributed association rule mining algorithm IEEE Distrib Syst Online  vol 5 no 3 p 1 Mar 2004 Yaling Xun is currently a doctoral student at Taiyuan University of Science and Technology She is currently a lecturer in the School of Computer Science and Technology Taiyuan University of Science and Technology Her research interests include data mining and parallel computing XUN ET AL FIDOOP-DP DATA PARTITIONING IN FREQUENT ITEMSET MINING ON HADOOP CLUSTERS 113 


Jifu Zhang received the BS and MS degrees in computer science and technology from the Hefei University of Tchnology China and the PhD degree in pattern recognition and intelligence systems from the Beijing Institute of Technology in 1983 1989 and 2005 respectively He is currently a professor in the School of Computer Science and Technology TYUST His research interests include data mining parallel and distributed computing and artiÞcial intelligence Xiao Qin received the PhD degree in computer science from the University of Nebraska-Lincoln in 2004 He is currently a professor in the Department of Computer Science and Software Engineering Auburn University His research interests include parallel and distributed systems storage systems fault tolerance real-time systems and performance evaluation He received the U.S NSF Computing Processes and Artifacts Award and the NSF Computer System Research Award in 2007 and the NSF CAREER Award in 2009 He is a senior member of the IEEE Xujun Zhao received the MS degree in computer science and technology in 2005 from the Taiyuan University of Technology China He is currently working toward the PhD degree at Taiyuan University of Science and Technology His research interests include data mining and parallel computing  For more information on this or any other computing topic please visit our Digital Library at www.computer.org/publications/dlib 114 IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS VOL 28 NO 1 JANUARY 2017 


