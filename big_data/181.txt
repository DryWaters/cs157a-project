Scalable Data Mining with Log Based Consistency DSM for High Performance Distributed Computing Hideaki Hirayama Hiroki Honda Graduate School of Information Systems The University of Electro-Communications Graduate School of Information Systems The University of Electro-Communications hirayama@yuba.is.uec.ac.jp hondaQis uec.ac.j p Toshitsugu Yuba Graduate School of Information Systems The University of Electro-Communications yuba@is.uec.ac.jp Abstract Mining 
the large web based online distributed databases to discover new knowledge and financial gain is an important research problem These computa tions require high performance distributed and paral el computing environments Traditional data mining techniques such as classification association c1uste.r ing can be extended to find nezu eflcient solutions This paper presents the scalable data mining prob lem proposes the use of software DSM Distributed Shared Memory 
with a new mechanism as an effec tive solution and discusses both the implementation and performance evaluation results It is observed that the overhead of a software DSM is very large for scalable data mining programs A new Log Based Consistency LBC mechanism especially designed for scalable data mining on the software DSM is proposed to overcome this overhead Traditional as sociation rule 
based data mining programs frequently modify the same fields by count-up operations In con trast the LBC mechanism keeps up the consistency by broadcasting the count-up operation logs among the multiple nodes 1 Introduction Discovering knowledge from large databases is well known as data mining The basic functions of data mining include detecting, predicting and interpreting patterns in on-line databases Data mining algorithms employ techniques 
from wide variety of fields such as statistics artificial intelligence A popular example of data mining is seen in the retail organization Such or ganizations collect massive amounts of data and create large databases with the progress in bar-code technol ogy One of the primary techniques used in retail orga nizations to discover the knowledge from the databases is Association rule based mining l][2 For example the 
knowledge for a store layout 22440 percent of cus tomers who purchase baby\222s diapers also purchase can beers\224 can be discovered by data mining This discov ered knowledge can be used to increase the profit by changing the store layout Knowledge need to be extracted from data bases vary from industry to industry Many industries are in the process of developing their own specialized data mining techniques 
to satisfy their own require ments In general data mining programs must pro cess massive amounts of data available in primary sec ondary and distributed storages of ShilP\(Symmetric Multi-Processor high performance parallel com puters and/or cluster-type distributed computing en vironments Developing algorithms and programs that can be executed both in SMP-type parallel computers and cluster-type distributed systems is an important prob lem in data mining 
Programs and algorithms exhibit ing such capability are scalable data mining programs We propose the use of software DSM Distributed Shared Memory 3][4 to develop scalable data mining programs for high performance parallel and distributed computing systems By using the DSM we can develop programs with shared memory programming model in stead of message passing programming model even in 143 0-7695-0583-WOO 10.00 0 2000 IEEE 


cluster-type distributed systems Typical data mining programs based on association rule mining frequently modify the same data fields by count-up operations When those programs are exe cuted in software DSM, many data in the fields are frequently passed among the plural nodes to keep up the consistency Thus the overhead of a software DSM is very large for data mining programs To improve the performance we propose a new Log Based Consis tency LBC mechanism, on the software DSM This mechanism is specially designed for scalable data min ing The LBC mechanism keeps up the consistency by broadcasting the count-up operation logs among the plural nodes To evaluate the effectiveness of the LBC mecha nism we have developed a scalable data mining sys tem VISIONA Virtual Shared Memory Ehvironment for Scalable Data Miqing Applications VISIONA is implemented as a software DSM with LBC and running in distributed systems such as PC clusters or UNIX computer clusters Two programs for mining an as sociation rule based program and a bayesian network program have been implemented in VISIONA Perfor mance of the software DSM with LBC was evaluated by executing the programs in VISIONA We selected association rule and bayesian network mining because of their popularity among users In this paper we present the mechanism of the software DSM with LBC the implementation of the LBC mechanism and the performance evaluation results of LBC mechanism for association rule based mining and bayesian network mining 2 Large Scale Data Mining This section describes the two large scale data min ing programs First one is a mining program based on association rule 1][2 for retail organizations Second mining program is the bayesian network generation 5 for the manufacturing industry 2.1 Association Rule Mining Association rule niining is very popular among the retail organizations For association rule mining it is necessary to define two measures a support value and a confidence value The support value is a measure based on the percentage of the transaction record including an item X The confidence value is a measure based on the percentage of the transaction record including an item X is also including an item Y Users specify the constraints the minimum support value and the mini mum confidence value for mining association rules Association rule mining is done by the following Apriori algorithm In this algorithm k is an integer which starts from one The following steps process the item-sets sets of items\having k items which are called pass-k They are iterated after k is increniented 1 Read all transaction records and count-up the oc currences of the item-sets having k items These are the candidate item-sets of k 2 Select the item-sets from the candidate item-sets of k which support values which are greater than the minimum support value They are called the large item-sets of k 3 Make the candidate item-sets of k+l out of the large item-sets of k Repeat the above steps until the large item-sets will be null It takes very long time to execute the Apriori algorithm since it reads a large number of transaction records and counts-up the occurrences of a large number of item-sets 2.2 Bayesian Network Generation Bayesian network a new technique of data mining received much attention in the manufacturing indus try A bayesian network is a directed acyclic graph The network graphically represents the characteristics and the relations of knowledge with its nodes and arcs This graphical representation helps to understand the knowledge Moreover it has formal probabilistic se mantics for statistical manipulation When generating a bayesian network many event data sampled from the environment such as a man ufacturing process are read and the occurrences of the events are counted-up It takes massive amount of time to generate a bayesian network because it reads a large number of event data and counts-up the occurrences of a large number of events 3 Log Based Consistency Mechanism There are two types of DSMs Distributed Shared Memory One is a hardware DSM such as DASH 6 or Alewife 7 Hardware DSM is one of the hardware architectures for scalable platforms The 144 


Node-0 Node1 Network Figure 1 The DSM with LBC other is a software DSM such as TreadMarks 3 or CVM 4 Software DSM is a technique to make a virtual scalable platform from various other platforms which may use a hardware DSM Our proposal is to use a software DSM We do not consider whether a hardware DSM is used in the platform or not From now on we refer the software DSM as a DSM 3.1 LBC Mechanism The DSNI provides a virtual shared memory and enables users to develop programs with shared mem ory programming model in cluster-type distributed sys tems The traditional DSM such as TreadMarks has the lazy release consistency 3 and multiple writer pro tocol 8 They increase the performance compared to the former sequential consistency protocol by alleviat ing the problem caused by mis-matches between page size and application granularity which is known as false sharing That is they are effective even if the fields in the same page are frequently updated in the plural nodes Lazy release consistency and the multiple writer pro tocol are not sufficient for some data mining programs such as association rule mining or bayesian network generation Those programs frequently update the same fields in the plural nodes Therefore if those pro grams are executed in the traditional DSM large num ber of data items in the fields are frequently passed for keeping the consistency and they can not be executed simultaneouly Such a problem is hardly alleviated by the lazy release consistency or the multiple writer pro tocol Most of the processing time of those programs is spent by the count-up operations If we pay attention to the characteristics of the count-up operations we notice that the operations follow the commutative law and the associative law By taking advantage of the commutative and the associative features of the count up operations we propose the LBC Log Based Consis tency mechanism The LBC mechanism can execute the count-up operations simultaneously in the plural nodes while keeping the consistency For example in the Apriori algorithm for mining association rules a hash tree of the candidate item sets is created in the DSM. After the hash tree is cre ated in the DSM transaction records are read and the occurrences of the item-sets are countred by all nodes The operations have a large overhead in the traditional DSM because it is necessary to pass the data in the fields at every count-up operation to keep up the con sistency Hence the count-up operations can not be executed simultaneously However the count-up oper ations with commutative and the associative laws it is possible to keep consistency without passing data at every count-up operation In the DSM with LBC when the count-up oper ations are executed in a node the count-up operation logs are recorded in a log buffer of the node as shown in figure 1 These count-up operations can be executed si multaneously in the plural nodes without passing data at every count-up operation The count-up operation log has an address of the field which is counted-up in the node and to be counted up in all other nodes. When the log buffer reaches full the logs are sent to all other nodes by broadcasting In other nodes when they receive the logs the logs are processed or the count-up operations are executed The LBC mechanism makes it possible to count-up the same fields simultaneously in the plural nodes without passing data at every count-up operation Therefore the LBC mechanism is effective for the count-up operations by taking advantage of the commutative law and the associative law 3.2 Implementation of LBC Mechanism Figure 2 shows the system structure of VISIONA which is the prototype of the DSM with LBC The Re source Manager is a daemon process to manage shared meniory spaces and semaphores which can be used in cluster-t,ype distributed systems The Space Managers are daemon processes to manage data in shared mem 145 


Node-0 Node-t Node2  Space Manager Shadow Daemon Network Figure 2 System structure of VI SIONA ory spaces and send the count-up operation logs to all other nodes by broadcasting The Shadow Daemons are daemon processes to receive the count-up opera tion logs sent from other nodes and to reflect them into the shared memory spaces in their own nodes When an application process creates a shared niem ory space or a semaphore, it sends the request to the Resource Manager A When the Resource Manager is requested to create a shared memory space it re quests the Space Managers and the Shadow Daemons in all nodes to create the shared memory space and map them B Semaphores are controlled by the Re source Manager When an application process attaches a shared memory space into its own address space it sends the request to the Space Manager in its own node to query the address of the shared memory space When an application process counts-up the occurrences of the candidate item-sets in the shared memory space it sends the request to the Space Manager in its own node C The Space Manager saves the count-up request as a log in a log buffer When the log buffer reachs full the Space Manager sends them to the Shadow Daemons in all other nodes by broadcasting D When the Shadow Daemons receive the count-up operation logs they reflect them into their own shared memory spaces 3.3 Programming with LBC Mechanism if master-process  VISIONACreateSpace\(key1 size VlSlONACreateSemaphore\(key2 1 spacep I VISIONAAttachSpace\(keyt  r the Apriori algorithm I k.1 while the candidate item-sets of k are not empty  r pass-k I while \(\(read a transaction record empty  step-4 while \(an item-set of k can be selected from the transaction record  step-5 step-6 search the item-set in the hash tree P address of the count-up field of the item-se fieldp V VISIONACountup\(fieldp step-7 1  VlSlONAFlushCountupBuffer\(key1 VlSlONAWaitSemaphor~key2 number-of_process make the large itemsets of k by comparing the support values of the candidate item-sets with the minimum support value steplc make the candidate item-sets of k+l out of the large item-sets of k k I VISIONADetachSpace\(key1 if master-process  VISIONADeleteSpace\(key1 VlSlONADeleteSemaphore\(key2 1 step11 step-li stepl step14 Figure 3 Pseudo code for association rule mining execut,ed in VISIONA Figure 3 shows a pseudo code for association rule mining in the DSM with LBC The functions with pre fix VISIONA are provided by VISIONA library In step-1 a master process creates a shared memory space and a semaphore All the processes in the plural nodes of the cluster-type distributed system count-up the oc curreiices of the candidate item-sets in a hash tree on the shared memory space Synchronization is done with the semaphore Steps 2 through 13 are execut.ed by all the processes In step-2 all the processes attach the shared memory space into their own address spaces Steps 3 through 12 show the sequence of the Apriori algorithm This se quence iterates with incrementing k until the candidate 146 


item-sets of k become empty Steps 4 through 7 iterate for all the transaction records In step-4 a transaction record is read In step-5, an item-set of k is selected from the transac tion record In step-6 the item-set is searched in the hash tree In step-7 the occurrence of the item-set is count-upped In step-8 the count-up operation logs remained in the log buffer are flushed to all other nodes In step-9 all the processes synchronize with the semaphore In step-10, after completion of the pass-k the large item sets of k are made In step-11 the candidate item-sets ofk+1 are made out of the large item-sets of k In step 12 the variable k is incremented and the sequence iterates from the step-4 When the candidate item-sets of k reach empty, the Apriori algorithm terminates In step-13 all the pro cesses detach the shared memory space Finally in step-14 the master process deletes the shared memory space and the semaphore This is a pseudo code for association rule mining and it can be executed simultaneously in cluster-type distributed systems But the code is not only for cluster-type distributed systems but also for SMP-type parallel computers type SMP DSM 4 Evaluation number of pass-1 pass-2 pans-3 pass-4 total processors sec sec se sec sec5  1 44 192 38 2 25 197 3 24 152 4 25 61 29 23 138 1 65 602 29 99 44 27 70 31 73 331 133 We have implemented a program of association rule mining in VISIONA to evaluate the performance of the DSM with LBC We synthesized the dah for evaluation according to the way specified in 2 under the following conditions 2 3 4 0 total number of items 400 45 172 68 33 318 34 119 46 23 222 29 91 36 17 173 0 mean record length lOOB 0 mean number of items in a record 10 0 total number of records 600,000 approximately 60MB 0 minimum support value 0.4 To evaluate the effect of the DSM with LBC we compared its performance with SMP-type parallel com puter performance Four uni-processor computers rep resented as UPS and an SMP-type parallel computer represented as SMP with the following specifications are used for this evaluation Table 2 Performance of association rule mining normalized 0 UP a uni-processor computer processor 70MHz MB86904\(SPARC memory 32MB 0 SMP a four-way SMP computer processor RT625\(HyperSPARC memory 128MB lOOMHz Four UPS are inter-connected via a lOMbps ether net And the SMP is also inter-connected with the UPS via the same ethernet A data file is stored in a local DISK of each computer in each case The DISK performance of the UP and the SMP is different Figure 4 shows a pseudo code for association rule mining in the SMP. This is basically same as the code shown in figure 3 The main difference is step-7 In step-7 the occurence of the item-set is count-upped by increnienting the shared variable in a critical section with mutex-lock and mutex-unlock Table 1 shows the performance of association rule mining executed by the SMP and the UPS using the DSM with LBC represented as DSM Table 2 shows the results normalized by those of the UP According to the results speedup by increasing the number of processors of the DSM with LBC is greater than or equal to that of SMP-type parallel computer Because there are no more UPS we use four UPS and the SMP together for further evaluation Table 3 shows the performance of parallel and dis tributed system the UPS and the SMP using the DSM with LBC The data file is equally divided without con sidering the difference of processor speed of each com puter The result of six processors is measured by four 147 


main\(atgc, argv  spacep  malloc\(size for i  0 i  N i  if fork  apriorio return 1 1 apriorio 1 number of apriorio  P Apriori algorithm I k=l while \(candidate item sets of k-th pass are not empty  r step of k-th pass I while \(\(read data  empty  while \(item sets of k items are selectable from the data  search the itemset in the hash tree mutex_lock\(&mt[fieldp  4WD fieldpt mutex-unlock\(&mt[fieIdp  4001 1 1 make the large item-sets of k by comparing the support values of the candidate itemsets with the minimum support value make the candidate itemsets of k+l out of the large itemsets of k ktt 1 1 pass-1 pars-2 pars-3 pass-4 total step-I step2 step3 step4 step5 step6 step7 step8 step9 number of 6 8 Figure 4 Pseudo code for association rule mining executed in SMP pass-1 pass-2 pars-3 pass-4 total 0.34 0.19 0.20 0.20 0.21 0.30 0.15 0.14 0.15 0.17 UPS and two processors of the SMP The result of eight processors is measured by four UPS and four processors of the SMP Table 4 shows the results normalized by the result of the UP When the evaluation is done by processors with dif ferent speeds the final result depends on the processor with the lowest speed if the data file is equally divided for all the processors Compared to the processor with the lowest speed sufficient speedup is achieved Table 5 shows the count-up log size and the execu tion time when executing association rule mining The maximum log size per time is O.SOMB/second It is small enough compared to the transfer rate of lOMbps ethernet parr log EiZe FXeCUtlO time MB sec Table 3 Performance of association rule log SiZefeXeCYtion time MB/sec I 6.7 22 2 11.7 50 I 8 I 22 I 50 19 IO 101 0.30 0.23 Table 4 Performance of association rule mining in the parallel and distributed systems 0.7 0.0 19 0.04 IO 0.00 So even if the scale of association rule mining is in creased the log size is small enough compared to the transfer rate of lOOMbps ethernet which is popular in today's computing environment So we do not con sider that the broadcast of the count-up logs creates a bottleneck of the performance Finally we compared the performance of the DSM with LBC to the performance of CVM CVM is the DSM with lazy release consistency and multiple writer protocol In this case total number of records is only 1,000 approximately 100KB because of the bad per formance of CVM Figure 5 shows a pseudo code for association rule mining in CVM This is basically same as the code shown in figure 3 The main difference is step-7 In step-7 the occurence of the item-set is count-upped by increnienting the shared variable in a critical section with cvm-lock and cvm-unlock Table 6 shows the performance of association rule mining executed in CVM and VISIONA It shows that CVM or the DSM with lazy release consistency and multiple writer protocol cannot get the speedup by in creasing the number of processors On the other hand VISIONA or the DSM with LBC can get it 5 Conclusion In this paper we presented the implementation and the evaluation of the LBC mechanism The LBC is a Table 5 Number and size of the count 148 


main\(atgc. argv  cvm_startup\(argc, argv spacep  cvm-alloc\(size cvm-create-procs\(apriori apriorio cvm-finish 1 number of 1 nodes 2 4 VISIONA 1 2 type CVM apriori  r Apriori algorithm 221I k=l while \(candidate item sets of k-th pass are not emply  r step of k-th pass  while \(\(read data  emply  while item sets of k items are selectable from the data  search the itemset in the hash tree cvm-lock\(&mt[fieldp  4001 222fieldp cvm_unlock\(\(Lmt[fieldp  4001 1 1 cvm-barrier\(0 make the large itemsets of k by comparing the support values of the candidate itemsets with the minimum support value make the candidate item-sets of k+l out of the large itemsets of k k I I pass-1 pass-2 pass-3 pass-4 total 1 4 1 rscc sec ec e 15 21 4 1 41 39 44 9 1 93 1 4 2 1 8 1 2 1 1 5 step-I step-9 step-3 step-4 step-5 step4 step-7 step-8 step-9 step-IC Figure 5 Pseudo code for association rule mining executed in CVM consistency mechanism on the DSM for scalable data mining in both parallel and distributed computing en vironments l and 2 show the basic algorithm of as sociation rule mining which is popular among the data mining research community 9 shows a modification of l and 2 to decrease the number of the candidate item-sets to increase the performance lo shows the parallel algorithm of l and a for cluster-type dis tributed systems with message passing programming model 51 shows bayesian network generation which is a new technique of data mining New techniques for data mining and speedup are important research areas In the past new techniques or speedup is performed for each application indepen dently Our approach is different from the past re search We use DSM as a common tool for scalable data mining programs The objective is to develop scalable Table 6 Performance of association rule mining in CVM and VISIONA I I 4 1 21 11 1 5 data mining programs efficiently To decrease the over head of the DSM we proposed the LBC mechanism on the DSM. Also this paper described VISIONA a pro totype to implement the DSM with LBC To evaluate the effectiveness of the DSM with LBC we have implemented VISIONA both in PC clusters and UNIX computer clusters Programs of association rule mining and bayesian network generation has been also implemented in VISIONA According to t,he results of the evaluation of the DSM with LBC speedup by increasing the number of processors on the DSM with LBC is greater than or equal to that of SMP-type parallel computer In the future we will improve the VISIONA as a DSM system with multiple consistency protocol including the LBC mechanism The goal is to increase the adaptability to many different data mining programs References l R Agrawal T Imielinski A Swami 224Min ing Association Rules between Sets of Items in Large Databases,\224 Proceedings of ACM SIGMOD pp.207-216 May 1993 a R Agrawal R Srikant 224Fast Algorithms for Min ing Association Rules,\224 Proceedings of the 20th VLDB Conference pp.487-499 September 1994 3 C Amza A L Cox S Dwarkadas P Keleher H Lu R Rajamony W Yu W Zwaenepoel 224Tread Marks Shared Memory Computing on Networks of Workstations,\224 IEEE COMPUTER Vol 29 No 2 pp.18-28 February 1996 4 P Keleher 224The relative importance of concur rent writers and weak consistency models,\224 Pro ceedings of the 16th International Conference on Distributed Computing Systems pp 9 1-98 Nl ay 1996 5 D Heckerman 224Bayesian Networks for Knowl edge Discovery,\224 Advances in Knowledge Discov 149 


ery and Data Mining AAA1 Press/The MIT Press pp.273-305 1996 6 D Lenosla J Laudon T Joe D Nakahira L Stevens A Gupta J Hennessy 224The DASH Pro totype Implementation and Performance,\224 Pro ceedings of the 19th International Symposium on Computer Architecture pp.92-103 May 1992 7 F T Chong B Lim R Bianchini J Kubiatow icz 224Application Performance on the MIT Alewife Machine,\224 IEEE COMPUTER Vol 29 No 12 pp.57-64 December 1996 8 P Keleher A.L Cox S Dwarkadas W Zwaenepoel 224An Evaluation of Software-Based Release Consistent Protocols 224 Journal of Parallel and Distributed Computing Vol 29 pp.126-141 October 1995 9 J S Park M Chen P S Yu 224An Effective Hash Based 4lgorithni for Mining Association Rules,\224 Proceedings of ACM SIGMOD pp.175-186 June 1995 lo E Han, G Karypis V Kumar 224Scalable Parallel Data Mining for Association Rules,\224 Proceedings of ACM SIGMOD pp.277-288 May 1997 150 


Figure 8 Visual interface for Moridou system Search EngineTest Page 0 UI 0 5 5 Keyword plealet Figure 9 Prototype system in hcterogeneous environment 283 


6 Conclusions We presented MAFIA an algorithm for finding maximal frequent itemsets Our experimental results demonstrate that MAFIA consistently outperforms Depthproject by a factor of three to five on average The breakdown of the algorithmic components showed parent-equivalence pruning and dynamic reordering were quite beneficial in reducing the search space while relative compressiodprojection of the vertical bitmaps dramatically cuts the cost of counting supports of itemsets and increases the vertical scalability of MAFIA Acknowledgements We thank Ramesh Agarwal and Charu Aggarwal for discussing Depthproject and giving us advise on its implementation We also thank Jayant R Haritsa for his insightful comments on the MAFIA algorithm and Jiawei Han for providing us the executable of the FP-Tree algorithm This research was partly supported by an IBM Faculty Development Award and by a grant from Microsoft Research References I R Agarwal C Aggarwal and V V V Prasad A Tree Projection Algorithm for Generation of Frequent Itemsets Journal of Parallel and Distributed Computing special issue on high performance data mining to appear 2000 2 R Agrawal T Imielinski and R Srikant Mining association rules between sets of items in large databases SIGMOD May 1993  R Agrawal R Srikant Fast Algorithms for Mining Association Rules Proc of the 20th Int Conference on Very Large Databases Santiago Chile, Sept 1994  R Agrawal H Mannila R Srikant H Toivonen and A 1 Verkamo Fast Discovery of Association Rules Advances in Knowledge Discovery and Data Mining Chapter 12 AAAVMIT Press 1995 5 C C Aggarwal P S Yu Mining Large Itemsets for Association Rules Data Engineering Bulletin 21 1 23-31 1 998 6 C C Aggarwal P S Yu Online Generation of Association Rules. ICDE 1998: 402-41 1 7 R J Bayardo Efficiently mining long patterns from databases SICMOD 1998: 85-93 8 R J Bayardo and R Agrawal Mining the Most Interesting Rules SIGKDD 1999 145-154 9 S Brin R Motwani J D Ullman and S Tsur Dynamic itemset counting and implication rules for market basket data SIGMOD Record ACM Special Interest Group on Management of Data 26\(2\1997 IO B Dunkel and N Soparkar Data Organization and access for efficient data mining ICDE 1999 l 11 V Ganti J E Gehrke and R Ramakrishnan DEMON Mining and Monitoring Evolving Data. ICDE 2000: 439-448  121 D Gunopulos H Mannila and S Saluja Discovering All Most Specific Sentences by Randomized Algorithms ICDT 1997: 215-229 I31 J Han J Pei and Y Yin Mining Frequent Pattems without Candidate Generation SIGMOD Conference 2000 1  12 I41 M Holsheimer M L Kersten H Mannila and H.Toivonen A Perspective on Databases and Data Mining I51 W Lee and S J Stolfo Data mining approaches for intrusion detection Proceedings of the 7th USENIX Securiry Symposium 1998 I61 D I Lin and Z M Kedem Pincer search A new algorithm for discovering the maximum frequent sets Proc of the 6th Int Conference on Extending Database Technology EDBT Valencia Spain 1998 17 J.-L Lin M.H Dunham Mining Association Rules: Anti Skew Algorithms ICDE 1998 486-493 IS B Mobasher N Jain E H Han and J Srivastava Web mining Pattem discovery from world wide web transactions Technical Report TR-96050 Department of Computer Science University of Minnesota, Minneapolis, 1996 19 J S Park M.-S Chen P S Yu An Effective Hash Based Algorithm for Mining Association Rules SIGMOD Conference 20 N Pasquier Y Bastide R Taouil and L Lakhal Discovering frequent closed itemsets for association rules ICDT 99 398-416, Jerusalem Israel January 1999 21 J Pei J Han and R Mao CLOSET An efficient algorithm for mining frequent closed itemsets Proc of ACM SIGMOD DMKD Workshop Dallas TX May 2000 22 R Rastogi and K Shim Mining Optimized Association Rules with Categorical and Numeric Attributes ICDE 1998 Orlando, Florida, February 1998 23 L Rigoutsos and A Floratos Combinatorial pattem discovery in biological sequences The Teiresias algorithm Bioinfomatics 14 1 1998 55-67 24 R Rymon Search through Systematic Set Enumeration Proc Of Third Int'l Conf On Principles of Knowledge Representation and Reasoning 539 550 I992 25 A Savasere E Omiecinski and S Navathe An efficient algorithm for mining association rules in large databases 21st VLDB Conference 1995 26 P Shenoy J R Haritsa S Sudarshan G Bhalotia M Bawa and D Shah: Turbo-charging Vertical Mining of Large Databases SIGMOD Conference 2000: 22-33 27 R Srikant R Agrawal Mining Generalized Association Rules VLDB 1995 407-419 28 H Toivonen Sampling Large Databases for Association Rules VLDB 1996 134-145 29 K Wang Y He J Han Mining Frequent Itemsets Using Support Constraints VLDB 2000 43-52 30 G I Webb OPUS An efficient admissible algorithm for unordered search Journal of Artificial Intelligence Research 31 L Yip K K Loo B Kao D Cheung and C.K Cheng Lgen A Lattice-Based Candidate Set Generation Algorithm for I/O Efficient Association Rule Mining PAKDD 99 Beijing 1999 32 M J Zaki Scalable Algorithms for Association Mining IEEE Transactions on Knowledge and Data Engineering Vol 12 No 3 pp 372-390 May/June 2000 33 M. J. Zaki and C Hsiao CHARM An efficient algorithm for closed association rule mining RPI Technical Report 99-10 1999 KDD 1995: 150-155 1995 175-186 3~45-83 1996 452 


