Coordinated Data Acquisition on Sensor Websl2 Robert Morris 1 Jennifer Dungan 1 Petr Votava 1,2 Lina Khatib 1,3 1 NASA Ames Research Center 2 California State University Monterey Bay 3 Perot Systems Government Services MS 269-1 Moffett Field CA 94035 morrisgemail.arc.nasa.gov Abstract This paper focuses on the application of automated planning scheduling and plan execution to Earth science 
campaigns an organized sequence of observations and data analysis activities associated with an Earth science objective We propose a layered architecture for coordinating sensing assets and describe a process for automatically transforming science goals such as monitoring a volcano or other Earth process into sequences of data acquisitions TABLE OF CONTENTS 1 INTRODUCTION  1 2 SYSTEM ARCHITECTURE  
1 3 COORDINATOR SYSTEM DESIGN 2 CAMPAIGNS AND GOALS  3 ABSTRACT PLAN MODEL  3 ABSTRACT PLAN COMPOSITION 4 CONCRETE PLAN GENERATION 5 4 IMPLEMENTATION  5 XML GOAL PARSER AND ABSTRACT PLAN GENERATOR  5 LABELED TRANSITION STATE ANALYZER 5 TERRESTRIAL OBSERVATION AND PREDICTION SYSTEM  
6 5 SUMMARY AND FUTURE WORK 6 REFERENCES  7 1 INTRODUCTION An Earth-observing sensor web is an organization of space airborne or in situ sensing devices for collecting measurements of the Earth's processes thus promoting the inter-disciplinary study of the Earth system Potential users of a sensor web include Earth scientists and authorities responsible for disaster monitoring mitigation 
and management Effective utilization of the collection of sensing and data processing resources requires a centralized means to access them and the data they produce The focus of this paper is to describe in detail a design and implementation of a high level language and algorithms for sensor web coordination The key to the proposed technology approach is the idea 
that a sensor web can be viewed as a complex controllable physical system From this viewpoint it is then possible to leverage recent advances in autonomous control technology to automate the process of accomplishing Earth science goals by reconfiguring the resources for acquiring storing and analyzing data The remainder of this paper describes this approach in detail 
The next section introduces the overall architecture within which the described system will reside There follows a discussion of the design of the system from Earth science goal specification to the generation and execution of plans for accomplishing the goals The paper concludes with a discussion of the implementation of the system and its current status BIOGRAPHY 7 2 SYSTEM 
ARCHITECTURE 1 IU.S Government work not protected by U.S copyright 
2 IEEEAC paper 1364 Version 2 Updated 2007 12:30 The proposed system adds a layer of automation between human users of the sensor web and a so-called service layer such as offered by the Open Geospatial Consortium's OGC Sensor Web Enablement SWE initiative The 1 


resources consists of paper introduces a desired data product without worrying about the details of where and how to retrieve the data This a set of spatial temporal and OGC/SWE seeks to establish the interfaces standards and protocols for a centralized access to any sensor web subsystem 1 SWE is divided into a number of components each of which contains models services or XML encodings of various aspects of the sensor web For example the Sensor Model Language SensorML contains models and encodings for sensors and the Observations and Measurements component contains the an implementation of the an alert and notification mechanism to specify how alert users to formulate Earth science goals in terms of are automatically transformed into sequences of requests for data that will satisfy the constraints These sequences are executable autonomously These automated capabilities will provide a layer of automation between the Abstract Pran as FSP Plan Goalf s formulation of Earth science goals and the acquisition of the required data The four layers of the architecture include A planning layer for transforming goals into executable request sequences An execution layer of web managers for executing the sequences A service layer e.g as defined within the OGC/SWE standard for providing the protocols and standards for sensor web layer consisting of the sensing data archiving and processing resources The focus of the remainder of this paper is on the planning layer a module referred to henceforth are illustrated in Figure 1 The input to the Coordinator is resource constraints These goal specifications an automated system that will allow are defined detected and made available and the Sensor Planning Service SPS determines the feasibility of same for as the Coordinator 3 COORDINATOR SYSTEM DESIGN The process of transforming or alarm conditions a number of stages The different stages of the process sensor observations and measurements These models and encodings provide sensor web model described above Among the relevant services the Sensor Observation Service SOS allows for requests for observations to be submitted the Sensor Alert Service SAS provides sensor web access and A a desired set of requests For such a service layer to effective it should be possible for a user to be able to describe a specification of a goal The Coordinator consists of a Plan Figure 1 Coordinator Components and Flow Model sensor web goals into executable commands for accessing web 


Generator which generates an abstract plan out the goal specification using a Plan Domain Model for composing plans An abstract plan is a representation of the required action sequences of a plan without considering details regarding how resources are accessed discussed further below The output of the Coordinator consists of an abstract plan refined into the form of a finite state machine which facilitates its execution by a web manager The abstract plan is augmented by a parameter table which contains values related to the time location and other properties that characterize the sensor web action Combining these outputs with a Procedure Mapping module described below results in a concrete plan which is an executable version of the plan The distinction between abstract and concrete plans is drawn from the literature on workflow management 2 The remainder of this section provides further details on Coordinator design Campaigns and Goals The overall objective of an Earth observation campaign is to increase understanding and reduce uncertainty in knowledge of the Earth's processes The results of campaigns are used to advance science initialize or validate Earth process models or may be used directly near real time for decision-making e.g hazard mitigation A campaign can be defined in terms of one or more mission goals Types of goals include  Characterize/classify obtain or identify the values of a quantity Example Characterize the chemical aging of Asian pollution plumes during travel across the Pacific 3  Monitor watch for a significant change or for the threshold of some quantity to be reached Example monitor carbon dioxide uptake and release at the Earth's surface over time  Compare determine the similarities and/or differences between or among several instances of the same process or quantity Example Compare the average soil moisture for a specified region over the next 6 months with 30-year average  Validate determine whether a prediction made by a model is correct or whether observations from a sensor are accurate Example Validate the numerical model simulation of the global hydrological cycle using tropical rainfall data  Predict determine when a specific event will happen or how a quantity will evolve in the future Example apply expected precipitation data to measurements of the initial conditions of soil rainfall partitioning for predicting the routing of flood waves These goal types are often inter-related For example characterization is the most basic and common of goal types Monitoring may be considered as a series of characterizations over time A validate goal can be considered a special case of a compare goal as the former typically involves comparison of models and measurements Goals may involve direct observations and/or Earth system models or their components Predictions always involve the use of a Earth science model Abstract Plan Model An Earth observation goal is associated with one or more desired data products The data product can be defined by specifying constraints on what is to be measured typically a quantity such as cloud cover or aerosol concentration where the measurement\(s are to be taken a region of interest such as Southern California for a fire study when the measurement\(s are to be taken in terms of a start time and end time and a frequency i.e how often should data be acquired and how the data are acquired i.e the sensing or processing resources to be employed More specifically a campaign specification has the following organization 1 a campaign definition comprised of a start end time for campaign b a bounding box defining a region of interest for a campaign 2 a set of data acquisition definitions comprised of a inputs from the results of other actions b dataset name where to retrieve data c resource name name of sensing asset d start end time of acquisition if different from campaign e frequency how often the data is retrieved f interval size of each data packet retrieved g a bounding box if different from campaign 3 a set of process actions consisting of h function name i inputs to function from the results of other actions 4 one or more store actions defining where to store the desired data product\(s consisting of a input the results of other actions b format file format for the data c location e.g a URL link moisture and river flows to simulate headwater 3 


An example of a campaign specification using an XML format is found in Figure 3 It shows a campaign defined as a time period and a set of 2 data acquisition actions and a process action One of the data acquisition actions is shown it is specified in terms of a variable name GPP frequency gap between acquisitions a location and a resource MODIS The process action is defined as a function type finding the difference between two values a location of the executable and two inputs which are identified by reference to the acquisitions defined earlier campaign name myCampaign name time start 2006-10-20 start end 2006-10-29 end time acquisition id acql var GPP var frequency ndays="8"</frequency resource Modis resource location bbox lowerComer 7.627958 50.883906 lowerComer upperComer>7.827958 52.883906 upperComer bbox location acquisition acquisition id  acq2 acquisition process function name  difference  input pos="1 xlink:href  acql xlink:type simple  input pos="2 xlink:href  acq2 xlink:type simple  function process campaign Figure 2 A Campaign Specification consisting of two data acquisitions and a simple process that computes the difference in the values of the data Abstract Plan Composition Planning in the context of sensor web activity is a process of transforming a specification of goals into a sequence of sensor web actions We identify four atomic sensor web actions and four operators for composing campaign plans The basic actions are  Acquire Retrieve data directly from a sensing resource or from a data archive  Process Perform a function that analyzes or transforms some acquired data  Test Determine whether a certain condition holds with respect to data acquired and  Store Save some data to a file Actions in an abstract plan are organized using the following operations  Sequence/Order Do actions in a specified order  Repeat Perform a get or process a number of times  Do an action conditionally Do something only if a condition holds and  Synchronize Do something only if a certain set of inputs is available These operators are similar to those found in models of the behavior of systems based on finite state machines We employ such a finite state model to represent the process of sensor web reconfiguration for producing data products By a simple campaign we will mean one that produces a data product from a single sensor web resource Simple campaigns come in four types depending on two binary criteria whether or not the data will be accumulated in stages based on data size and whether or not the data will be acquired incrementally over time or all at once Data are accumulated in stages typically because of the size of the data requested and the need to process the data in stages Similarly data products may require timed acquisitions because the data are in the future or are for some other reason not immediately available The result is a four-fold classification of simple campaigns  untimed unstaged the data are available and are acquired in a single chunk Example Create a monthly GPP average for November 2007 from daily data  timed unstaged the data will be available in the future and are acquired in a single chunk Example Create a monthly temperature average for June 2ONN where 2ONN is in the future  untimed staged the data are available and are acquired in multiple stages Example Create monthly MODIS NDVI composites for all of 2006  timed staged the data will be available in the future and are acquired in multiple stages 4 


Example Create weekly soil water content anomalies from daily data for next six months Non-simple plans are those that require more than one data resource The same operators for composing simple plans out of basic actions can be used to compose non-simple plans For example it is common for the result of the processing of data to trigger a new data acquisition action This plan structure can be represented compositionally as a data acquisition action being the outcome of a conditional action Another example of a non-simple plan is generated from the specification found in Figure 3 It consists of two data acquisitions that are fed into a processor for determining the difference in two sets of values Concrete Plan Generation Abstract plans correspond to the goals and associated constraints specified by scientists or other users of sensor web resources A concrete campaign plan is a representation of a sequence of actions for generating a data product that contains all the information required to execute the plan by invoking the necessary sensor web services e.g data archives or sensing platforms A concrete plan therefore models the expertise of those who build the command sequences required to collect the data products This expertise is different from that of the scientist who specifies the goals Specifically as illustrated in Figure 2 there are three components of a concrete plan  The abstract plan that contains a high level representation of the organization of the actions required to produce the data products  A parameter table that describes the spatial temporal and other characteristics of the actions in the plan and  A procedure mapping table that associates each action with a set of commands called a procedure for executing the action Executing a concrete plan without human intervention is facilitated by transforming an abstract plan into a form that can be interpreted by a software agent which we call a web manager as a sequence of commands Towards this end we exploit the semantics of the finite state machine model that we have employed to represent plans The web manager acts a controller a device for determining the current state of the system executing the actions and determining the state transitions that follow from the actions To illustrate the interactions of the components of a concrete plan consider a data acquisition task called acql as defined in Figure 3 The values of the parameters defined for this action variable type frequency resource and location are stored in the parameter table entry for this action To issue the command to retrieve the required data an entry in the procedure mapping table corresponding to MODIS GPP data is found This entry table allows the web manager to automatically instantiate the procedure for retrieving the required data It should be noted that in this simple model what we've called the procedure mapping table is a simple proxy for the services provided by the OGC/SWE as discussed earlier It is at this point that the planning layer interfaces with the service layer in the overall system 4 IMPLEMENTATION This section discusses the three main components of the There are three main software elements for the Coordinator implementation a goal parser and abstract plan generator a modeling language for abstract plans and a test bed for concrete plan generation and execution XML Goal Parser and Abstract Plan Generator The Coordinator parser accepts an XML input file structured as in Figure 3 A simple C XML parser 4 generates a tree structure for the XML file which is then used to access the data and identify the plan structure While parsing the abstract plan and parameter table entries are automatically constructed for the campaign Labeled Transition State Analyzer We adopt the language of the Labeled Transition State Analyzer LTSA tool 5 for representing abstract plan action sequences LTSA is a verification tool for concurrent systems It checks that a specification of such a system satisfies properties required of its behavior LTSA supports a process algebra language called Finite State Processes FSP to allow a more concise description of system behavior than as a labeled transition system We use FSP to compose abstract plans out of goal specifications FSP and the LTSA tool are employed because they have the following features  The appropriate level of abstraction allowing for a concise representation of all the components of an abstract plan at a level that is close to the way the scientist views a campaign  All the constructs for composing plans conditional action repetition parallel action sequencing mentioned earlier  Enabling automatic translation into finite state representation using Labeled Transition State 5 


Analyzer LTSA tool This intermediate step allows for easy translation into an executable sequence The following FSP fragments illustrate each of the four simple plans discussed above 1 untimed unstaged GET  acq  process  store  STOP GET is a process consisting of the three basic actions in sequence  is the sequence operator A special process STOP halts the plan execution 2 untimed staged GET  acq  TEST TEST  process  done  store STOP notDone  GET There are two processes in this sequence GET and TEST The latter includes a test action done that signifies that the last chunk of data has been acquired GET is repeated until the condition is true I is the choice operator 3 timed unstaged WAIT  test   notReady WAIT ready  GET GET  acq process  store  STOP There are two processes in this sequence one that waits for time to pass until the data have been acquired 4 timed staged WAIT test  notReady WAIT ready  GET GET acq  process  store  TEST TEST done  STOP notDone WAIT This is a composition of the previous two plan types There are separate tests for whether it's time to fetch the next chunk of data and when the last of the data have been acquired The LTSA tool discussed above performs automated translation from FSP formatted sequences into labeled transition systems The following shows a labeled transition system corresponding to the simple timed staged abstract plan above The Q's are the states of the network and each state has an associated action and state transition QO Q1 Q2 Q3 Q4 Q5 Q6 Q7 test  Qi ready QO notReady  Q2 acq  Q3 process  Q4 store  Q5 test  Q6 notDone  QO done  Q7 STOP In this format the abstract plan can be executed in a straightforward manner by a finite controller Terrestrial Observation and Prediction System The Terrestrial Observation and Prediction System TOPS 6 is being used as a test bed for the planning and execution system described in this paper TOPS is a data and modeling software system designed to seamlessly integrate data from satellite aircraft and ground sensors and weather/climate models with application models to quickly and reliably produce operational nowcasts and forecasts of ecological conditions Through automation of the data retrieval pre-processing integration and modeling steps TOPS is able to reliably provide data on current and predicted ecosystem conditions allowing TOPS data products to be used in an operational setting for a range of applications The TOPS system currently holds about 8TB of data on-line The acquisition of satellite ground station and model data is automated and the data are obtained in periodic intervals ranging from 15 minutes to several months TOPS has been engineered to automatically ingest various data fields required for model simulations Ingested data go through a number of preprocessing filters streamlining the input data to facilitate the simulations After passing through a specification interface in which each parameter is mapped to a list of attributes e.g source resolution quality each data field is self-describing to TOPS component models such that any number of land surface models can be run without extensive manual interfacing Similarly the model outputs also pass through a specification interface facilitating post-processing such that model outputs can be presented as actionable information as opposed to just another stream of data 5 SUMMARY AND FUTURE WORK This paper has described a design and implementation of a layer of automated for defining and generating campaigns for retrieving Earth science data The design is based on a classification of campaigns in terms of goals and the mapping of goals to a small set of basic actions for acquiring data products These actions are arranged according to well-defined operators for composing action 6 


sequences into a finite state machine The controller of the machine can be defined for executing and monitoring the actions in the plan The transformation of plans into executable sequences is facilitated utilizing the distinction between abstract plans and concrete plans Abstract plans identify the actions and temporal structure of the plan without providing the details of how the sensor web resources are invoked to carry out the plan Concrete plans provide the details of accessing the resources and allow for the automation of the execution of the plans by a agent we called the web manager Future reports will describe the design and implementation of the web managers in detail REFERENCES 1 Michael Botts SensorML Standard for In-situ and Remote Sensors Proceedings of EOGEO-2004 College London London UK 2004 2 R Buyya D Abramson and J Giddy Nimrod/G:An Architecture of a Resource Management and Scheduling System in a Global Computational Grid HPC Asia 2000 Beijing China IEEE Computer Society Press Los Alamitos CA USA May 14-17 2000 3 INTEX-B Web site http://www.espo.nasa.gov/intex-b 4 C xml parser used in the Coordinator 5 Verma V Jonsson A Pasareanu C and latauro M Universal executive and plexil Engine and language for robust spacecraft control and operations In American Institute of Aeronautics and Astronautics Space 2006 Conference San Jose California 6 Nemani R Votava P Roads J White M Thornton P and Coughlan J Terrestrial observation and prediction system Integration of satellite and surface weather observations with ecosystem models In Proceedings of the 4th International Conference on Integrating GIS and Environmental Modeling GIS/EM4 Banff Canada 2000 BIOGRAPHY Dr Robert Morris is a senior researcher in Computer Science in the Exploration Technology Directorate Intelligent Systems Division at NASA Ames Research Center His primary professional goal is the application of advanced Al technology in planning scheduling and plan execution to the Investigator of a project for coordinating the activities of distributed remote sensor webs for observing the Earth His primary research interests include temporal constraint-based reasoning for automated planning and scheduling Dr Jennifer L Dungan is a research scientist with NASA's  1.1.1 ar Ames Research Center at Moffett Field CA Her expertise is in the use of physically calibrated measurements from remote sensing to predict biophysical variables using spatial statistical approaches She was one of the first to apply geostatistical techniques of stochastic interpolation to spatially complete remote sensing data for predicting vegetation amount She has contributed to the development of rigorous frameworks for scaling and uncertainty in remote sensing science She has had long experience with processing Landsat MSS and Thematic Mapper and many other EOS data types She serves on the editorial boards of Remote Sensing of Environment and the International Journal of Applied Earth Observation and Geoinformation Mr Petr Votava is a senior software engineer at NASA Ames Research Center and CSUMB He has been a software engineer on NASA's MODIS team for Ithe past 10 years His primary research interests include operating systems X distributed computing computer architecture and natural language processing Dr Lina Khatib is a research scientist at Perot Systems Government Services She is a member of the Planning and Scheduling Group Intelligent Systems Division at NASA ARC Her interests are in constraint reasoning and preferences heuristic search temporal reasoning intelligent planning and scheduling Her main goal is to put advances in Al into practice Among other projects she was the main developer of the Global Map Generator for USGS that optimizes selection of satellite images for complete earth coverage llll   next generation of NASA's exploration systems He is currently Principal 7 


  8 often have long run times. Depending on the temporal and spatial range of data requested, processing wall-clock times may range from minutes to weeks. The notion of a service call changes from a quick \223getting\224 of a data product, to an 223ordering\224 of a product. The normal synchronous aspect of the services must then be changed to an asynchronous model Job Management Additionally with long-running services, there will inevitably be overlapping processing times on the server Therefore given the finite computing resources available overloading the computational resources with simultaneous service requests should be avoided. We require the ability to define the appropriate level of computational resources to be utilized and want any remaining service requests to be queued until sufficient computing resources are available This then maximizes processo r utilization of each service request Distributed resource management \(DRM\stems can be leveraged to manage the distribution of workload to available compute resources Each Web Service request would map to a job request on the processing server. DRMs can monitor the current state of all resources and assign the jobs to the best-suited resources Rather than directly interfacing with one specific DRM implementation, we leveraged the Open Grid Forum\222s Distributed Resource Management Application \(DRMAA pronounced \223drama\224\API for job submission, monitoring control, and retrieval of resu lts Thi s l a nguage and vendor agnostic API frees us from language specific implementations, as well as vendor specific implementations of job management, and allows us to focus on the abstract representation of resource management This API is supported by several different vendors of job scheduling implementations, including Sun Grid Engine SGE and Torque.  Though bot h Torque and SGE fi t  our requirement of an open source scheduler, Torque is still based on an older PBS implementation and does not offer the scalability and Java bindings that SGE does Asynchronous Services By default, a Web Service call is a synchronous call where a request is sent from the client to the server and blocks until a response is available to be sent back to the client \(figure 6\ut for long running processing routines, it is impractical to hold a network connection and block until the service has completed. A scientist on the client side may not be able to wait for the response after a completed longrunning job. We want to enable complete network disconnects where the client may be potentially shut down Additionally, service calls where seamless data access is intrinsic would require the gene rated data to be downloaded as well before the service call unblocks and completes. The client user would have to wait for both processing and downloading times There have been extensions to existing web services-based standards to augment with asynchronous capabilities. WSNotification, a standards-base d approach to enable eventdriven capabilities to Web Se rvices using the publishsubscribe pattern. OASIS\222 Web Services Notification WSN\ses this notification pattern to allow subscribing to a Web Service\222s event information and be notified of such information. OGC\222s Web Pr ocessing Service \(WPS spatially referenced data have been augmented with  OGC\222s W e b Notification Service \(WNS\so provides messaged-based notifications between services. By using client-side modules, each web service client can receive notifications without resorting to polling. However, all of these approaches require a richer set of clients that may only be available in Web Service-rich language platforms such as Java. Our goal requires that our asynchronous solution work in more simpler and less rich platforms such as C and IDL What we desire is a simpler approach that minimizes clientside requirements of running any form of a messaging server. Preferably, the solution should be simple enough to work with clients that have a minimal capable of doing HTTP GET, such as a basic REST service call  Figure 6. Sequence diagram showing potentially long blocking calls for long processing times from Web Services Asynchronous Services using Web Services A more desirable model of behavior would be to use Asynchronous Web Services \(figure 7\he one synchronous blocking call is par titioned into smaller atomic Web Service calls. The Apache Axis2 project and Sun\222s JAX-WS Reference Implementation provide a set of asynchronous atomic calls that allow a service client to submit a service, check if it is done, and then get the results 


  9 when it is done. However, even this model does not fit the desired model of behavior  Figure 7. Sequence diagram showing the push and pull methods from Asynchronous Web Services  Asynchronous Web Services can use either a Synchronous or Asynchronous MEP \(Message Exchange Protocol transmitting and receiving protoc ol messages.  There are two methods supported for both synchronous and asynchronous MEP types:  polling and callback. Both support non-blocking client side behavior The polling method represents the \223pull\224 model of processing where the client determines when the response is received.  The callback method has the client passing a callback handler to the Web Service Endpoint. This callback is essentially an endpoint on the client side running in a separate thread that waits for the server to respond.  The callback method represents the \223push\224 model of processing where the server determin es the notification For polling-based asynchronous MEP, we find that the client still needs to be active while it polls. That is, a service submission would normally return a response object that is used to check if the job is done. That same response object is also used later to retrieve the results when available. For long duration processing times, the client must still maintain the same response object. Though the response object may in principle be marshalled out for longer persistence implementation-specific network connection reliance be prove to be impractical. The preferred approach would be to move the role of asynchronous waiting from the Web Services request/response objects down further to the job scheduler The remaining option would be to use normal synchronous Web Service calls, but cleanly se parate the different atomic operations into individual synchronous Web Service calls These individual calls consists of submitting a job canceling a job, getting the status of the job \(running cancelled, etc\ting the progress of the job \(console output, etc\and finally getting the results of the job \(figure 8\ Each synchronous call is then delegated to an underlying job manager for the actual service job management. Collectively, the client is provided with an asynchronous service model For particularly long running service jobs, we find that users also want to see progress of the processing activity. In addition to getting the status of the job state \(such as queued, running, done, cancelled\so provide the capability to see progressive real-time output form the processing job. Our service endpoint manages a console buffer of a processing job\222s STDOUT/STDERR. When a Web Service call to get the progress of a particular job is invoked, the current buffer contents of the progress is returned and then flushed from the server-side buffer. This enables clients to build GUI applications on top of this asynchronous service and see the real-time console output of the server-side processing on their client GUI window Additionally, the console refresh rate, determined by the client, can be adjusted to an appropriate rate for that client\222s usage. Other approaches are possible including publishing the progress to a custom Atom feed. But here, the console content is only handled and retrieved when the client needs it  Figure 8. Sequence diagram showing atomic synchronous calls that implement job management capabilities of a service  Though callbacks \(registerable handlers\ally the preferred paradigm over polling, this client example demonstrates the utility of keeping it simple. We require maintaining a set of lightweight Web Service clients across multiple platforms. Not all platforms and Web Service APIs support asynchronous Web Services. For true callbacks 


  10 implementations would also require the clients to run Web Service endpoints of their own This asynchronous service model that is composed of synchronous atomic Web Service calls can also be used at varying levels of complexity as desired by the client user For the novice, the service \223submit-isDone-get\224 sequence can be encapsulated into one simple function call. For the intermediate user, the same aggregated function call can also provide real-time notifications \(Observer design pattern\job currently running on the server. For the advance user network disconnects and client shutdown after a service job has been submitted can be achieved. The unique job id that is returned upon service submission can be stored for persistence enabling users to submit a product request from laptop, shutdown their laptop, and restartup at later time to retrieve the generated products Using AXIS2 and JAX-WS for the various client-side implementations introduces an extra dependency for users of some clients and therefore is less preferable. We also want to maximize ease-of-use for the user where we lessen the burden of installation, set up, and library dependencies Whenever possible, we used the \223vanilla\224 SOAP implementation that is intr insically available for each platform to keep the client footprints small Another intended use of our services is to be orchestratable by Web Services-enabled workflow engines. The callback approach to asynchronous Web Services is currently not as interoperable as standard synchronous Web Services However, current Web Service workflow engines can be set up to operate with standard Web Services that have the atomic actions exposed as multiple synchronous Web Service calls that poll for when a job request is done before continuing Data Delivery Once processing has completed, the service response is returned to the user. In th e Earth science domain, these results typically are generated data products that may be large in size. Given that the SOAP approach to Web Service uses XML as the underlying content being transferred transferring binary data in the SOAP message would not be efficient for large binary data sizes. Large binary file data support in XML currently still exhibits technical and performance issues. Approaches ex ist to encode binary data in various encoding schemes such as MIME and base64 More recently, there have b een new W3C recommendations for handling large binary data transfers such as XML-binary Optimized Packaging \(XOP Transmission Optimization Mechanism \(MTOM and Resource Representation SOAP Header Bl  However these new extensions may not be supported or compatible with all the client platforms that we need to support \(such as Matlab, IDL, and Python We settled on an approach that is compatible across the major client platforms. Rather then forcing data to be encoded in any scheme in SOAP, we simply allow the binary data to be transferred efficiently in standard http/https. When a Web Service job has completed, the generated product data files are placed in a unique URLaccessible location, and these UR Ls are sent back in the service response. The clients are then responsible for downloading the product files from the URLs A side benefit of this approach is observed when orchestrating our services fro m workflows. The URL results from one workflow operator are passed onto the next operator, which then is responsible for pulling the data from the given URLs. This method allows each operator to control the rate of accessing th e previous operator\222s data results OPeNDAP Another mechanism we support for data access is Data Access Protocol  \(DAP\ore specifically, we leverage the  for requesting and transporting data that is generated by the services. OPeNDAP also enables remote subsetting of data using constraint expressions, and the translation of data from one format to another. HDF5 data has been recently shown to work well over OPeNDAP using the Hy  The OPeNDAP protocol in recent years has become more widely used and accepted in the Earth Science community The Earth System Grid \(ESG on Environment and Water \(CREW\two large Earth science data centers using OPeNDAP for data access Date Time Handling For time handling, leveraging the Java GregorianCalendar simplifies handling timezones, time ranges, as well as correct leap years.  The bus iness logic model layer fully leverages the GregorianCalendar model to allow us to support manipulating multiple time granules, from seconds to years, and of any duration for each time granule. There is also a related XMLGregorianCalendar that we leverage for representation of W3C XML Schema 1.0 date/time datatypes across the Web Services For averaging, given a particular start and end time in GregorianCalendar format, along with an integer time duration amount, the model is able to determine the correct time ranges \(i.e. number of averaged files\d partitions the work accordingly for the av eraging engine \(in this case the engine is IDL\anCalendar individual time elements are retrieved and passed on to the engine for 


  11 processing, and the result is a list of files that propagates up to the server side layer For subsetting, latitude and longitude values are handled at the model layer, and translated \(when necessary correct coordinate values for the underlying engine.  Also to reduce the number of parameters a user would need to provide, we support user inputs of date/time string using the ISO 8601 format, the International Standard for the representation of dates and tim For exam pl e t h e input string \2232008-10-31T12:00:00Z\224, would be converted into a GregorianCalendar inst ance representing that exact date/time for the model layer Using the combination of GregorianCalendar and the ISO 8601 standard allows us to easily handle timezone-aware and timezone-na\357ve inputs. Internally to our \223business logic\224 model layer, all date/times are timezone-aware and set to the UTC timezone to match most of the instrument data conventions. But if the user provides a timezone-na\357ve date/time, that is with no timezone specified, then we promote it to UTC standard time. We also support user input in any timezone here we leverage the GregorianCalendar to convert any timezone to the UTC internal representation This simplifies science studies where users simply provide the local time at the area of interest to query data for  7  C LIENT I MPLEMENTATION FOR A NALYSIS E NVIRONMENTS  We implemented client-side modules to adapt to the major working environments favored by most scientists: \(1 4\thon, \(5\/C++, and \(6 Fortran90. Unlike other approaches that force the scientists to leave their familiar working environment to access data our services tool set brings the data access and manipulation back into their working envi ronments. Whenever possible we also aimed to develop the ability to automatically download and construct the native data objects in each respectively environment. This eliminates the need for the end user to worry about data file downloads, local file management, and loading them into in-memory data arrays for manipulation. A consistent experience is given to the user, both across the different tools and across the different platforms, with common interfaces and usage conventions This form of seamless integration directly facilitates the transparent access and manipula tion of heterogeneous data as called for by NASA\222s ACCESS NRA goals Java The Java client was designed to be an importable jar library from any user Java application. Since the Web Service endpoint server was already written with Sun\222s JAX-WS Reference Implementation, we also chose the same for the Java client implementation. This maximizes interoperability since both client and server utilize the same library. The client contains high-level methods for calling the Web Service and automatically downloading the custom-created files, allowing the entire process of service querying and downloading data to be contained in a single method call Lower level methods are also exposed in the service allowing the user more fine-grain control over the data flow and interface with the Web Services Matlab Mathwork\222s Matlab is a popular working environment used by scientists to perform science analysis. The 2008 release of Matlab has built-in support fo r Web Services with autocode-generation from WSDL URLs. It leverages the Java integration that Mathworks has already worked into Matlab We leveraged this built-in capability to develop Matlab modules that access the same server-side Web Services for Level 2 and Level 3 data access and manipulation Our Matlab service client consists of a number of .m files file extension for Matlab custom code\and requires no Java package dependencies beyond the JVM native to the Matlab environment.  Built-in SOAP functions help to create, send, and parse the SOAP message, which is used to communicate with our remotely hosted Web Services For automatic data file downloads, classes and methods standard with Java version 1.5 \(standard with Matlab 7.6 were used to access and download the files via http.  The resulting client allows all of the Web Services and downloading functionality to be transparent to a user Matlab supports the construction and handling of full Java data objects and the invocation of Java class methods directly form within Matlab. We made use of built-in functions that served as the bridge between a Matlab script and a SOAP service call \(createSoapMessage.m callSoapService.m, and parseSoapResponse.m\. These built-in SOAP functions in Matlab constrained us to passing a narrow range of Matlab data types due an incomplete set of Matlab datatype to W3C SOAP datatypes. Particularly the date-time and arrays of strings must be manually handled as more primitive types Two methods of datetime passing were settled upon.  One relies simply upon passing a tuple representation of datetime\227a number for the year, and others for the month, day hour, minute, and second.  While such a method worked well \(converting simple numerical data types\t was seen to be cumbersome and made for far less readable code to have to use six parameters to specify a single datetime.  We turned then using short char acter strings to represent datetimes, following the ISO 8601 standard.  Data type conversion of character strings between Matlab and XML is similarly easy as numerical types, and made for very concise and readable function calls 


  12 Passing arrays of strings required a retreat from any kind of array-like data structure.  Instead, a single, long string was created from an array of strings in Matlab, separated by a distinct delimiter \(a \223,\224 in this case\s single long string is passed through the service interface to the endpoint server, which then parses the string back into a list format before continuing on with the rest of the call sequence IDL ITT\222s IDL is another powerful visualization and analysis tool popular with the Earth science analysis community  Unl i k e M a t l a b, IDL \(as of versi on 7.0 have any built-in Web Services support. IDL can be made to speak the Web Services languages via an IDL-Java bridge delegating the Web Services capability to a linked Java library.  This does allow calling the Web Services, but there were some issues encountered along the way First, the IDL-Java bridge connectivity required some setup and handling by the end user. Environment variables and jar classpaths must be properly configured. While this is easily resolve with an installer, there was a strong desire to minimize the IDL client foot print to where there are no dependencies. We wanted to provide an IDL client code that could be dropped into a directory somewhere and should \223just work\224 Second, there are some known issues working with objects in IDL. We encountered memory errors during execution which appeared to be a memory leak in the IDL-Java bridge there was previously a known memory leak that had been patched\also ex tra overhead when interfacing between IDL and Java where data is converted from Java objects to IDL types Our current effort is focused on building a \223poor man\222s\224 SOAP as part of our IDL client that will allow us to directly call and interface with the Web Services, without having to go through Java.  We plan to utilize IDL\222s built-in simple http support to send manually constructed SOAP messages Though this approach forgoes the robustness of the JAXWS implementation, it will however provide a pure IDL client to our end users with no external dependencies Python The Python scripting environment has become a popular working environment for fast prototyping and exploratory science processing. Among all of the clients here, the Python Web Services client is the most trivial. We leveraged the suds package, a lightweight SOAP client for consuming Web Services in Pyt Though ot her open-source Python Web Service packages exist \(such as ZSI\we have found suds to be the most easy to use and more dynamic in nature. Suds does not require class code generation and can read WSDLs at runtime to dynamically construct a proxy object with an interface representing the WSDL C/C We want any C/C++ client to be able to interact with the server-side Web Services of Level 2 and Level 3 data generation. By using the using the popular open-source gSOAP Toolkit for SOAP Web Services package  client-side modules can interact with the data generation services developed on the server-side. gSOAP also includes facilities to autogenerate C/C++ RPC code from our published WSDL definition files of the Web Service on the server. We have also found that gSOAP has a good selfcontained XML bindings facility Fortran Fortran90 modules can be made capable of remotely accessing and the Level 2 and Level 3 data. Though Fortran has no built-in libraries to perform Web Services, we leveraged our C/C++ Web Service API via gSOAP to do the work. Fortran can call an 223externed\224 C Web Service API and pass back the relevant data into the Fortran environment. This would enable Fortran to fully delegate the Web Services operations to the C/C++ implementation 8  NEWS  L EVEL 2  P RODUCTS  With the availability of the software infrastructure supporting server-side processing, and seamless client-side data query and access, downstream data products can now be generated from the source merged NEWS Level 2 data Averaged One of the most common wa ys to summarize the large amount of data is to calculate the averages of data within a given temporal and spatial boundary. For example, it is very useful for scientists to make daily, weekly, monthly averages of some parameters in a regular latitude-longitudepressure grid, make a global map of the average, and analyze any global patterns and trends. In order to facilitate the needs, we developed an averaging Web Service to generate averaged data products that a user can customize The input arguments for the averaging Web Service are the time range, time granule, and a list of parameter names to produce averaged products with. The time range specifies the start and end time to access the NEWS data from. The time granule specifies the aver aging time period. The list of parameter names specifies the choice of parameters that are requested to make averaged products Subsetted Subsetting a data set is a fundamental way to access specific data from a large collection of data. We developed a usercustomizable subsetting Web Service that supports three general subsetting conditions 1  Spatial condition \(latitude, longitude, vertical range 


  13 2  Temporal condition \(e.g. from 2002-05 to 2002-07 3  Parameter selection \(e.g. te mperature and atmospheric water vapor only The combination of these three conditions allows a user to subset data in time, location, and parameter space 9  NEWS  L EVEL 3  P RODUCTS  Many of these quantities in NEWS L2 product interact through fundamental physical processes \(e.g. temperature affects cloudiness, and also the converse\ Consequently the observations should be treated as statistically separate variables, though traditiona l methods of summarizing satellite data do just that. We applied statistical clustering methods to a multiple-parameter set of observations from the A-Train instruments over the multi-year record. The resulting Level 3 quantitative summaries are made accessible through our serv ice-oriented tool Level 3Q Level 3Q data sets are statistical summaries of underlying Level 2 data. Like traditional Level 3 products they are 223gridded\224 in the sense that they provide a summary of Level 2 data belonging to space-time grid cells. These cells are typically defined as one or fi ve degree spatial regions over a time period of one or eight days, or one calendar month Unlike traditional Level 3 products, the Level 3Q \(L3Q grid cell summaries provide nonparametric multivariate estimates of the joint probability distributions of multiple geophysical parameters. Distribution estimates are derived from the underlying Level 2 data using informationtheoretic principles that balance the quality of the estimate against the amount of data reduction achieved  Figure 9. Raw and summarized data for one grid cell Raw data belonging to that grid cell can be listed in a data table with one row for each of N data points and one column for each variable \(here, two alternate representation: a scatter plot. In both cases each data point has weight 1. On the right are two representations of the compressed summary. The data table has K<<N rows and two extra columns showing cluster count and distortion. Counts are shown in the corresponding scatter plot by the bar heights  Data reduction replaces a larg e number of individual data points with a smaller number of representative data points and associated weights and quality measures. Figure 9 illustrates the basic concept. The idea is to treat a set of coincident measurement of different geophysical parameters for the same footprint as a multivariate vector, and collect all such vectors belonging to a given spatial-temporal grid cell as a set of points in high-dimensional data space. These data are partitioned into disjoi nt groups, called clusters, and we report the following statistic s for each: i\the centroid which is the representative, ii\he number or proportion of original data points assigned to it, and iii\the average squared distance between member data points and the centroid. This latter quantity is also called the cluster distortion The method that assigns data points to clusters is an adaptation of a signal-processing algorithm called Entropyconstrained Vector Quantizati EC VQ i s si m i l a r t o  the well-known K-means clusteri  Kmeans finds an assignment of raw data points to K clusters that minimize distortion. ECVQ finds an assignment that minimizes a quantity based partly on distortion, but also on the entropy of the probability distribution defined by the clustering. Entropy is a measure of information-theoretic complexity, and it is also well known that greater complexity is required to achieve lower distorti  ECVQ was originally proposed as a way of estimating this trade-off. The algorithm may find fewer than K groups as it attempts to balance the competing goals of fidelity to the original data and parsimony of representation.  This produces the smallest, or more properly, the least complex output data set that achieves a given level of fidelity to the original data. Our version of ECVQ is adapted in a number of ways for use as a massive data set reduction tool. These are described in detail in  and 26  W e  have al so previously employed our version of ECVQ to produce monthly summaries of Atmospheric Infrared Sounder data  The algorithm\222s output is best thought of as an estimate of the multivariate distribution of the data in a given space-time grid box. The original data have a distribution that puts probability  N on each multivariate data point, where N is the number of data points. ECVQ coarsens this distribution by collecting similar points into clusters, representing them by cluster centroids, and assigning probabilities N k k where N k is the number of point assigned to the k th cluster. In addition we also report the within-cluster mean squared error distortion\, which is a measure of the quality of the cluster representative as a stand-in for the original data assigned to it 1 N to cluster  


  14 10  A NALYSIS R ESULTS  AIRS, AMSR-E, MODIS and CLOUDSAT data have been merged into a dataset by the NEWS effort, and a framework of Web Services for averaging, subsetting and statistical analysis have been developed. Collectively it facilitates the data access and analysis of hydr ological processes. Here we present an example usage of instrument intercomparison Comparing Data Products Prior to Merging A necessary step in creating a formal merged data product is intercomparison of component data sets.  This ensures that the mutual random and systematic differences between the two data sets are quantified.  This approach does not provide information about absolute bias, which can be obtained only from comparisons with unbiased standard data sets.  For example, wate r vapor and temperature biases are typically constrained through comparisons with in situ observations as from radiosonde.  Such comparisons are usually the responsibility of the data provides, so the analyses described below assume some knowledge of satellite measurement biases An example of comparing component data sets is presented here with a single atmospheric state variable, in this case observed by AIRS \(Atmos pheric Infrared Sounder AMSR-E \(Advanced Microwave Scanning Radiometer for EOS\For this example five variables \(AIRS Total Water column, AMSR-E total water column, AIRS cloud fraction AIRS total water error estimate, AMSR-E liquid water path stemming from two different instruments \(AIRS and AMSR-E\pared and correlated The Atmospheric InfraRed Sounder \(AIRS\he Advanced Microwave Scanning Radiometer \(AMSR-E\are two instruments aboard the AQUA spacecraft. AMSR-E estimates water vapor over water surfaces and AIRS estimates water vapor over ocean and land. A map of the daily average of terrestrial water vapor column is shown in figure 10. This figure maps th e AIRS estimate of average total \(column\er vapor in mm during March 2003 at a spatial resolution of 1 degree in latitude and longitude  Figure 10. Map of averaged AIRS Total column water vapor for 2003-03   Figure 11. Scatter plot of monthly AIRS and AMSR-E column water vapor. AIRS and AMSR-E water vapor agree very well on the co incident locations  A similar a subset of AMSR-E water vapor over the ocean was prepared with our services and merged with the AIRS dataset at the same spatial and temporal resolutions. A scatter plot of the values estimated with AMSR-E is compared to the collocated va lue of AIRS in figure 11 Figure 11 also shows a red line to mark the location where all points should fall if the AIRS and AMSR-E estimates were the same. The figure shows a tendency by AMSR-E to estimate higher total water vapor than AIRS. However there are locations where AIRS does show higher values. A map of the averaged differences \(AIRS-AMSR-E\15 selected monthly means between the years 2003--2006 is shown in figure 12 This map highlights locations where each instrument tends to overe stimate compared with the other. Blue tones identify regions where AIRS estimates are larger than AMSR-E and shades of brown locate the regions where the opposite is true 


  15  Figure 12. Map of average differences over 15 months between AIRS and AMSR-R water vapor  Figure 12 highlights regions th at are characterized by different hydrological regimes. AIRS overestimates coincide with regions where cold western boundary currents cause frequent cold marine stratocumuli. AMSR-E tends to estimate higher total water vapor in regions characterized by warm sea surface temperatures and frequent convective activity. This result is consistent with previous comparisons    Figure 13. AIRS Total Cloud Fraction sum for 2003-03 Sum over all pressure levels AIRS is an IR measurement that cannot estimate water vapor in regions overcast with optically thick clouds. This property introduces a bias that depends on the cloud fraction. Figure 13 shows an estimate of the cloud fraction using a surrogate for cloud fraction over several AIRS pressure levels. It adds up the cloud fraction at the different levels \(because there may be overlaps, the sum over all pressure levels can be larger than one between the areas with large cloud fraction sums and large AMSR-E overestimates with respect to AIRS and vice versa, areas with the smallest cloud fraction sums coincide with the areas with large AIRS water vapor estimates A proxy for the "thickness" of the clouds in the overcast regions is the liquid water content of such clouds. The advantage of this proxy over others is that it also conveys information about the physical and hydrological characteristics of the scenes co rrelated with the differences Figure 14 shows a PDF of the differences as a function of AIRS water vapor and AMSR-E cloud liquid water path. A black contour line marks the change of sign in the differences. It shows that AIRS estimates higher total water vapor at low liquid water paths with a characteristic quasilinear increase between 5--20 mm. AMSR-E estimates larger total water vapor at 1 x 1 degree regions where the liquid water path is high. The pattern of the differences raises questions about why does AMSR-E estimates differ so quickly from AIRS at low water vapor contents and low liquid water paths  Figure 14. AIRS-AMSR-E differences \(in mm function of AIRS total water and AMSR-E cloud liquid water for the month 2003-03  


  16  Figure 15. AIRS-AMSRE differences as a function of AIRS error estimate over one day  AIRS has an error estimate of the total water vapor value that it calculates. The diffe rences between AIRS and AMSR-E are shown as a function of this estimate in figure 15 and very little correlation is found 11  R ELEVANT W ORK  Merged A-Train Level 2 Data A merged product that preserves the relationship of observed atmospheric water properties facilitates the hydrological studies by enabling scientists to get directly at the model data without worrying about the logistics of finding, collecting, and coordinating the measured quantities from different instruments. Previously there did not exist a capability to discover and access data from the A-Train\222s multiple instruments as merged multi-parameter data sets Enabling Orchestratable Service Workflows Our distributed service-oriented approach of loosely coupled services also enable s a higher level of reusability and orchestration with other services. Increasing numbers of workflow engines are already supporting Web Services as components/operators, which can then be orchestrated together into higher-level meta/virtual services SciFlo, a Scientific Dataflow Execution Environment, is a workflow engine that already supports assembling reusable SOAP Services, native execu tables, local command-line scripts, and codes into a distributed computing flow \(a graph of operators\8 SciFlo can u tilize o u r g en eric SOAP services as part of a larger coordinated data flow The Taverna Workbench is a free software tool for designing and executing workflows. Like SciFlo, it can orchestrate SOAP-based Web Services as components within a workflow. Taverna provides a visual editor to construct and edit the sequence of services in the workflow We have found that Taverna can dynamically introspect a given WSDL and construct the workflow component interface representing it Giovanni Giovanni, an acronym for the Goddard Earth Sciences Data and Information Services Cent er, or GES DISC, Interactive Online Visualization and Analys is Infrastructure, is a webbased tool to help visualize Earth science data  It  provides a simple and intuitive way to visualize, analyze and access vast amounts of Eart h science remote sensing data without having to download the data. Similar to the services developed here, it addresses the difficulties of traditional data acquisition and analysis methods by moving the complexity to the server-side Giovanni provides multiple in terface instances based on instrument and measurement ty pes. For example, the \223ATrain Along CloudSat Track Inst ance\224 can provide plots of vertical profiles of clouds, temperature, humidity, cloud and aerosol classification across the multiple instruments of the A-Train A distinction between Givanni\222s A-Train data and the data set in this paper is that we are using a formal merged product of the A-Train. We leverage the NEWS effort that is based on error- and resolution-weighted mean of the input data sets, with associated uncertainty estimates. This provides a formal model of the collective A-Train observations rather than the collection of the individual instrument measurements Each of Giovanni\222s multiple interface instances provides a very simple and easy to use web interface. However, we recognized that sometimes scientists want more than the simple interfaces. Some scien tists may want to process Level 3 products using their own trusted code, or may want to perform variations of their own plots. With Giovanni, the individual scientist wanting more custom advanced capabilities must depend on the Giovanni development team Giovanni is based on the web portal paradigm where users visit a web page and use web tools to find and visualize data. Similar to Giovanni, our client APIs also make data acquisition more seamless. However, our services are based on the different paradigm were the power and flexibility of data analysis and processing are shifted back into the scientists own familiar computing environments. We realize that scientists generally want to perform \223exploratory computing\224 where they can sere ndipitously analyze the data using their own familiar and trusted code 


  17 Giovanni 2 was inherently synchronous where processing was bounded to a single http session. Long service running times still require the user to hold the same http session Similar to our asynchronous Web Service we discussed, the upcoming Giovanni 3 will be supporting asynchronous sessions. They will be using a RSS feed to monitor the service request. Version 3 will also be based on a servicesoriented architecture, wher e Giovanni services can be offered as a standard SOAP Web Services. This is similar to our approach, as well as SciFlo\222s services 12  C ONCLUSIONS  To achieve the science research goal of investigating longterm and global-scale trends in climate, water and energy cycle, and weather variability, we enhanced and improved on existing algorithms to work with distributed and heterogeneous data and information systems infrastructure By developing a service-oriented architecture for discovering, accessing, and mani pulating of NEWS merged A-Train data sets, we can strengthen the interconnectedness and reusability of these services across broader range of Earth science investigations The merged NEWS Level 2 data is a formal model containing the voluminous data from the AIRS, AMSR-E MLS, MODIS, and CloudSat instruments. Previously scientists wanting to perform long-term and global-scale studies encompassing simultaneous measured quantities would quickly face a data acce ss hurdle of first finding the data, then manually downloading them, and finally merging the data into a cohesive model\227before starting their analysis. Additionally the voluminous nature of the data particularly because of the MODIS data\each scientist potentially downloading the same data resulting in redundancy of reprocessing on the client sides. Our paradigm pushes more of the commonly repeated processing onto the server side. Moreover, this avoids repeated downloading of the same data among the science users. We can deliver customi zed averaged, subsetted, and summarized data of the merged A-Train observations to the scientists for them to immediately begin their analysis work We recognized that scientists also often want to perform 223exploratory computing\224 where they can freely explore the aspects of the data and run serendipitous exploration in their own familiar environment. We developed client-side distributed APIs in popular analysis environments such as Matlab, IDL, and Python. Our APIs hide the complexity of Web Services and allow the service capabilities to be embedded in the scientists own computing environments By purposely avoiding the \223web portal\224 paradigm and providing the suite of platform specific APIs in each of these language platforms, we enable the scientists to remain within their own familiar environments to select, process and download the data seamlessly into their environment for their own further analysis. Alternative methods involving web portals force the scientists to leave the environment and manually interact with the web portal to search and download the data We can examine not only long-term changes in amplitude of a single variable but also those among multiple variables Our L3Q clustering method was specifically designed to preserve information about the covariability of multiple observations, such as those from the A-Train.  Weather and climate variability is characterized by changes among atmospheric observables, but those changes have been limited by a lack of observations and analytical techniques We are not aware of any multi-parameter analyses to date The full potential of the A-Train climate record will not be realized until the multi-parameter climatology is understood. The work presented is one method of approaching this difficult problem Our service tool addresses several objectives of the NASA Earth science data community including 1\mprove interoperability to facilitate the transparent access and manipulation of heterogeneous and distributed data by science users, 2\ransition and deploy existing Earth science research analysis tools and software using a 223Service Oriented Architecture\224 \(SOA\ to enhance their reuse potential for other science domains and improve overall awareness and access of these tools by a broad community, 3\ increase users\222 ability to customize their discovery, access, deliv ery, manipulation, and preferred format of data and information 12  F UTURE W ORK  On-demand Level 3T Summaries from Level 3Q We plan to develop services for creating custom summaries of the L3Q data into more refined Level 3T summaries L3T\create their own custom Level 3 products on demand from L3Q. The custom Level 3 products are the transformation of L3Q data based on user-specific objectives such as regression and correlation analyses. The cust om production will generate not only the transformed data but also the statistical estimation of the accuracy of the summarized data based on the distribution of L3Q and the quality of L3Q Delegating the Temporal-Spatial Data Querying Currently, our processing layer utilizes existing and legacy processing code that was developed in IDL, Matlab, and C++. Though the original intent was to be able to adapt existing code and wrap as a service, this meant maintaining its original form of accessing the source data for processing Small modifications were made to enable these codes to quickly access the data based on file path and file naming schemes. However, we want to decouple the file accessibility and processing roles 


  18 We plan to shift the file search and accessibility aspect outside of the IDL/Matlab/C++ code thereby treating it more as a processing \223engine\224. SciFlo\222s geoRegionQuery service can be used as a generic temporal and spatial search that returns a list of matching file URLs \(local file paths if the files are located on the same system geoRegionQuery service relies on a populated MySQL databases containing the list of indexed data files. We then also plan to leverage SciFlo\222s data crawler to index our staged merged NEWS Level 2 data products Improving Access to the A-Train Data Collection Currently, the NEWS task collects the various A-Train data products for merging using a mixture of manual downloading via SFTP and automated shell scripts. This semi-manual process can be automated into a serviceoriented architecture that can automatically access and download the various Level 2 instrument data from their respective data archive center. This will be simplified if more data centers support OPeNDAP, which will aid in data access. OPeNDAP will also allow us to selectively only download the measured properties of interest to the NEWS community for hydrology studies. Additionally OpenSearch, an open method using the REST-based service interface to perform searches can be made available to our staged A-Train data. Our various services such as averaging and subsetting can be modified to perform the OpenSearch to determine the location of the corresponding spatially and temporally relevant data to process. This exposed data via OpenSearch can also be made available as a search service for other external entities interested in our data as well Atom Service Casting We may explore Atom Service Casting to advertise our Web Services. Various services can be easily aggregated to create a catalog of services th at are published in RSS/Atom syndication feeds. This allows clients interested in accessing and using our data services to easily discover and find our WSDL URLs. Essentially, Atom Service Casting may be viewed as a more human-friendly approach to UDDI R EFERENCES   NASA and Energy and W a t e r cy cl e St udy NEW S website: http://www.nasa-news.org  R odgers, C  D., and B  J. C onnor \(2003 223Intercomparison of remote sounding instruments\224, J Geophys. Res., 108\(D3 doi:10.1029/2002JD002299  R ead, W G., Z. Shi ppony and W V. Sny d er \(2006 223The clear-sky unpolarized forward model for the EOS Aura microwave limb sounder \(MLS Transactions on Geosciences and Remote Sensing: The EOS Aura Mission, 44, 1367-1379  Schwartz, M. J., A. Lam b ert, G. L. Manney, W  G. Read N. J. Livesey, L. Froidevaux, C. O. Ao, P. F. Bernath, C D. Boone, R. E. Cofield, W. H. Daffer, B. J. Drouin, E. J Fetzer, R. A. Fuller, R. F. Jar not, J. H. Jiang, Y. B. Jiang B. W. Knosp, K. Krueger, J.-L. F. Li, M. G. Mlynczak, S Pawson, J. M. Russell III, M. L. Santee, W. V. Snyder, P C. Stek, R. P. Thurstans, A. M. Tompkins, P. A. Wagner K. A. Walker, J. W. Waters and D. L. Wu \(2008 223Validation of the Aura Microwave Limb Sounder temperature and geopotential height measurements\224, J Geophys. Res., 113, D15, D15S11  Read, W G., A. Lam b ert, J Bacmeister, R. E. Cofield, L E. Christensen, D. T. Cuddy, W. H. Daffer, B. J. Drouin E. Fetzer, L. Froidevaux, R. Fuller, R. Herman, R. F Jarnot, J. H. Jiang, Y. B. Jiang, K. Kelly, B. W. Knosp, L J. Kovalenko, N. J. Livesey, H.-C. Liu1, G. L. Manney H. M. Pickett, H. C. Pumphrey, K. H. Rosenlof, X Sabounchi, M. L. Santee, M. J. Schwartz, W. V. Snyder P. C. Stek, H. Su, L. L. Takacs1, R. P. Thurstans, H Voemel, P. A. Wagner, J. W. Waters, C. R. Webster, E M. Weinstock and D. L. Wu \(2007\icrowave Limb Sounder upper tropospheric and lower stratospheric H2O and relative humidity with respect to ice validation\224 J. Geophys. Res., 112, D24S35 doi:10.1029/2007JD008752  Fetzer, E. J., W  G. Read, D. W a liser, B. H. Kahn, B Tian, H. V\366mel, F. W. Irion, H. Su, A. Eldering, M. de la Torre Juarez, J. Jiang and V. Dang \(2008\omparison of upper tropospheric water vapor observations from the Microwave Limb Sounder and Atmospheric Infrared Sounder\224, J. Geophys. Res., accepted  B.N. Lawrence, R. Drach, B.E. Eaton, J. M. Gregory, S C. Hankin, R.K. Lowry, R.K. Rew, and K. E. Taylo 2006\aintaining and Advancing the CF Standard for Earth System Science Community Data\224. Whitepaper on the Future of CF Governance, Support, and Committees  NEW S Data Inform ation Center \(NDIC http://www.nasa-news.org/ndic 


  19   Schi ndl er, U., Di epenbroek, M 2006 aport a l based on Open Archives Initiative Protocols and Apache Lucene\224, EGU2006. SRef-ID:1607-7962/gra/EGU06-A03716 8] SciFlo, website: https://sci flo.jpl.nasa.gov/SciFloWiki 9 ern a, web s ite: h ttp tav ern a.so u r cefo r g e.n et  Java API for XM L W e b Services \(JAX-W S https://jax-ws.dev.java.net  Di st ri but ed R e source M a nagem e nt Appl i cat i on DRMAA\aa.org  Sun Gri d Engi ne, websi t e   http://gridengine.sunsource.net  W 3 C R ecom m e ndat i on for XM L-bi nary Opt i m i zed Packaging \(XOP\te: http://www.w3.org/TR/xop10  W 3 C R ecom m e ndat i on for SOAP M e ssage Transmission Optimization Mechanism \(MTOM website: http://www.w3.org/TR/soap12-mtom  W 3 C R ecom m e ndat i on for R e source R e present a t i on SOAP Header Block, website http://www.w3.org/TR/soap12-rep 16] OPeNDAP, website: http://opendap.org  Yang, M Q., Lee, H. K., Gal l a gher, J. \(2008 223Accessing HDF5 data via OPeNDAP\224. 24th Conference on IIPS  ISO 8601 t h e Int e rnat i onal St andard for t h e representation of dates and times http://www.w3.org/TR/NOTE-datetime 19] ITT IDL, website http://www.ittvis.com/ProductServices/IDL.aspx 20] Python suds, website: h ttps://fedorahosted.org/suds  The gSOAP Tool ki t for SOAP W e b Servi ces and XM LBased Applications, website http://www.cs.fsu.edu/~engelen/soap.html  C hou, P.A., T. Lookabaugh, and R M Gray 1989 223Entropy-constrained vector quantization\224, IEEE Trans on Acoustics, Speech, and Signal Processing, 37, 31-42  M acQueen, Jam e s B 1967 e m e t hods for classification and analysis of multivariate observations\224 Proc. Fifth Berkeley Symp Mathematical Statistics and Probability, 1, 281-296  C over, Thom as. and Joy A. Thom as, \223El e m e nt s of Information Theory\224, Wiley, New York. 1991  B r averm a n, Am y 2002 om pressi ng m a ssi ve geophysical datasets using vector quantization\224, J Computational and Graphical Statistics, 11, 1, 44-62 26 Brav erm a n  A, E. Fetzer, A. Eld e rin g  S. Nittel an d K Leung \(2003\i-streaming quantization for remotesensing data\224, Journal of Computational and Graphical Statistics, 41, 759-780  Fetzer, E. J., B. H. Lam b rigtsen, A. Eldering, H. H Aumann, and M. T. Chahine, \223Biases in total precipitable water vapor climatologies from Atmospheric Infrared Sounder and Advanced Microwave Scanning Radiometer\224, J. Geophys. Res., 111, D09S16 doi:10.1029/2005JD006598. 2006 28 SciFlo Scien tific Dataflo w  site https://sciflo.jpl.nasa.gov  Gi ovanni websi t e   http://disc.sci.gsfc.nasa.gov techlab/giovanni/index.shtml  NASA Eart h Sci e nce Dat a Sy st em s W o rki ng Groups website http://esdswg.gsfc.nasa.gov/index.html   M i n, Di Yu, C h en, Gong, \223Augm ent i ng t h e OGC W e b Processing Service with Message-based Asynchronous Notification\224, IEEE International Geoscience & Remote Sensing Symposium. 2008 B IOGRAPHY  Hook Hua is a member of the High Capability Computing and Modeling Group at the Jet Propulsion Laboratory. He is the Principle Investigator of the service-oriented work presented in this paper, which is used to study long-term and global-scale atmospheric trends. He is also currently involved on the design and development of Web Services-based distributed workflows of heterogeneous models for Observing System Simulation Experiments OSSE\ to analyze instrument models. Hook was also the lead in the development of an ontology know ledge base and expert system with reasoning to represent the various processing and data aspects of Interferometric Synthetic Aperture Radar processing. Hook has also been involved with Web Services and dynamic language enhancements for the Satellite Orbit Analysis Program \(SOAP\ tool.  His other current work includes technology-portfolio assessment, human-robotic task planning & scheduling optimization, temporal resource scheduling, and analysis He developed the software frameworks used for constrained optimization utilizing graph search, binary integer programming, and genetic algorith ms. Hook received a B.S in Computer Science from the University of California, Los  


  20 Angeles, where he also received a B.S. in Applied Mathematics  Eric Fetzer is a Senior Member of the Technical Staff at the Jet Propulsion Laboratory, Pasadena, California specializing in satellite observations of the atmosphere.  His scientific interests include planetary boundary layer processes, tropical phenomena, upper tropospheric variability, and climatologies of temperature, water vapor and clouds.  His technical interests include analysis of large data sets, and of multi-sensor observations. He has over 20 peer-reviewed publications and given numerous scientific presentations, public lectures and media interviews about climate science. Eric received a B.A. in Physics from the University of California Berkeley, and a Ph.D. in Astrophysical, Planetary and Atmospheric Sciences from the University of Colorado, Boulder   Amy Braverman is a Senior Statistician at the Jet Propulsion Laboratory, California Institute of Technology She holds a B.A. in Economics from Swarthmore College an M.A. in Mathematics from UCLA, and a Ph.D. in Statistics also from UCLA. Prior to her current position in JPL's Science Data Understanding Group, she was a Caltech Post-doctoral Scholar at the Jet Propulsion Laboratory, and a Scientist in the Flight Sciences Experiments Section of the Science Division. Dr Braverman conducts research on information-theoretic methods for the analysis of massive data sets and streams statistical data fusion, high-dimensional data analysis, and statistical analysis for climate model evaluation and diagnosis. She has published in both the statistics and geoscience literature, and is active in both communities She is a member of the Multi-angle Imaging SpectroRadiometer Science Team, and serves as a member of the Atmospheric Infrared Sounder Science Integration Team. Her responsibilities on both missions include designing data reduction algorithms for massive, remote sensing data sets. Dr. Braverman also holds an appointment in the Department of Statistics at UCLA as Adjunct Associate Professor, and is active in UCLA\222s Center for Environmental Statistics. She is member of the Committee on Applied and Theoretical Statistics of the US National Academy of Science. She has refereed for the Journal of the American Statistical Association, the Journal of Computational and Gr aphical Statistics, IEEE Transactions on Geoscience and Remote Sensing, and the Journal of Applied Meteorology and Climatology Seungwon Lee is a senior member of the High Capability Computing and Modeling Group at Jet Propulsion Laboratory. She is conducti ng research on comet gas dynamics, nonlinear dynamics control, climate model parameterization, Earth science data analysis, parallel computing, and advanced numerical algorithms. She received her Ph.D in Physics fr om the Ohio State University and her M.S. and B.S. in Physics from the Seoul National University, Korea  Matthew Henderson is software engineer in the High Capability Computing and Mode ling group at JPL. His current work includes Web Services and Instrument Data Level 2 subsetting. He received a B.S. Computer Science from CSU Pomona, and is currently pursuing M.S Computer Science  Steven J. Lewis is a member of the Information System and Computer Science staff member at the Jet Propulsion Laboratory.  He received a BS in Mathematics from the University of California, Los Angeles in June 2001, and the MS and Ph.D. Degree from Claremont Graduate University in May 2004 and May 2007, respectively.  He worked as a post doctoral fellow at Keck Graduate Institute from June 2007 until he joined JPL in March of 2008.  During his graduate and post doctoral work, his studies focused on applications of Bayesian methods to hidden Markov models with particular interest and application to protein sequencing.  His work at JPL has focused on integrating web services into various programming platforms for the purposes of accessing NASA satellite data, as well as developing object tracking so ftware and contributing to image enhancement and restoration efforts Van Dang is a member of the Science Data Understanding Group at the Jet Propulsion Laboratory. She was responsible for the NEWS Level 2 processing that generated the formal merged Level 2 data from multiple A-Train instruments  Manuel de la Torre is a Physicist from the Universidad Complutense at Madrid \(Spain\. After finishing his Ph.D work at the University of Bayreuth \(Germany\ on pattern formation in turbulent flows and a 7 1/2 year stunt as Ass and Assoc. Prof. at the Escuela T\351cnica Superior de Ingenieros Aeron\341uticos in Madrid \(Spain\, he came to the Jet Propulsion Laboratory on a 1-year Sabatical leave in 1997 wanting to apply fundamental concepts of nonlinear systems and geophysical fluid dynamics to something that might be directly useful to soci ety. He discovered the JPL as a great place to achieve that goal and extende d his stay a bit longer, becoming Technical staff and working on different aspects of remote sensing, validation of satellite instruments, and data analysis of atmospheric processes and climate  


