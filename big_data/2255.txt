An Interactive 3D Visual Exploration Tool for Undirected Relationships SeungJin Lim Computer Science Utah State University Logan UT 84322-4205 USA s.lim@usu.edu Abstract Many relationships in data mining such as frequent itemsets and similarity are undirected An effective visualization of such relationships at a large scale offers a valuable visual feedback about the dataset or data mining results to the user by which the user's understanding of the target information is greatly enhanced We present a highly interactive 3D visual data exploration tool with a high graphical quality in this paper Visual data exploration using this tool on various real and synthetic datasets in main memory was effective and promising 1 Introduction Visual feedback is an important asset in exploration and mining of a large volume of data It plays a signi\002cant role in i inspecting a glimpse of the given dataset to design a good data mining strategy ii understanding how the algorithm works for the dataset and iii con v e ying results of data mining to the user in an intuitive presentation Traditional statistical tools such as histograms and scatterplots provide a valuable insight into the input dataset These statistical tools and other numerous visualization techniques in multidigraph visualization coauthorship 10 cluster hierarchies association rules 14 Internet bro wsing word co-occurrence web graph and as such also improve understandability of data mining results For an example consider Figure 1 The scatterplots provided by Weka for the UCI Iris dataset of three class labels Iris-setosa  Iris-versicolor and Iris-virginica  shown in the 002gure even without running a classi\002cation algorithm reveals that the petalwidth and petallength attributes are capable of discriminating one class from another whereas sepallength and sepalwidth are not as good as the other two Among these techniques visualization of undirected quanti\002able relationships is useful in many application domains Examples include 017 Social networks Many relationships in social networks e.g friendship 2 collaboration 10 5 coFigure 1 Scatterplots for UCI Iris dataset in Weka The visual feedback from the plots indicates that petalwidth and petallength are good to separate data into classes citation are undirected whereas relationships such as authority and hub are directional 017 Geo-referenced information There are plenty of examples of undirected relationships in this data domain The volume of long-distance calls between states and the amount of trade between countries are examples of undirected relationships in this domain 017 Frequent itemsets Relationships among frequent items are undirected Co-occurrence in multimedia metadata spatial features and words are also undirected in their respective domain For the visualization of undirected relationships undirected graphs 1 3 10 and 2D/3D array grids 14 9 13 have been widely used in the data mining literature Examples of a 2D symmetric square grid a 3D square grid and an undirected graph are shown in Figure 2 Lately circular grids which can be thought of undirected graphs with no particular topology are gaining momentum The visual feedback of circular grids are often more effective than histograms and scatterplots in conveying such an information Existing circular grids are typically two dimensional and produce static images with limited user interaction 
Tenth IEEE International Symposium on Multimedia 978-0-7695-3454-1/08 $25.00 © 2008 IEEE DOI 10.1109/ISM.2008.126 460 


Figure 2 Three different views of co-occurrence frequencies of 19 spatial features Left A 2D symmetric square grid view Color and brightness re\003ect the magnitude of frequencies Middle A 3D view Only a half of the grid is displayed Right A circular 3D view offered by Round3D In this paper we present a generic interactive 3D visualization tool called Round3D suitable for any undirected quanti\002able relationships among data objects The key highlights of Round3D include 1 The objects in Round3D are arranged in a circle which is capable of representing data of virtually any dimensionality with 031 times larger visual capacity than a comparable square 2 Round3D is highly interactive for effective user-driven exploration of the information The user can start with a global summary of the underlying dataset and drill down to the detailed local information by zooming clicking objects and rotation 3 Round3D uses multiple visual cues to effectively convey visual feedback on objects and their relationships 4 Round3D offers a basic query function by which the user can obtain non-visual information such as object names object support count the signi\002cance of a relationship and an aggregation of relationships 5 Round3D provides 002lter functions by which the user can enable or disable objects and relationships by the degree of statistical signi\002cance 6 The graphical quality of Round3D is outstanding Regular objects are rendered in realistic glossy spheres with direct and ambient lights re\003ected upon them to deepen the 3D effect Object labels preserve high resolution at any zoom level The rest of this paper is organized as follows related works to this paper are introduced in Sec 2 In Sec 3 we introduce the proposed Round3D with a design emphasis We discuss the prospects of Round3D in data mining applications in Sec 4 and draw a concluding remark in Sec 5 2 Related Work The topic of our work is in general related to scienti\002c visualization which often emphasis on a global summary of data We however limit our scope to visual data exploration and mining which may also concern about local details Furthermore we focus on 2D and 3D visualization tools for undirected relationships in data mining which are largely visualized as 2D/3D matrix 14 9 or undirected graphs 1 10 11 A review on visual data exploration and mining can be found in In 14 the authors visualize association rules in a 3D display The work is essentially an extension of matrix visualization in which columns denote rules rows denote the constituent items and antecedents and consequents are shown in different colors In cluster analysis results are shown in a 3D matrix which is in essence the same as the 3D square matrix shown in Figure 2 such that the square grid of horizontal axes represent data objects and the vertical axis represents the similarity between the two corresponding objects Visualization of geospatial point sets presented in is inherently a similar 3D matrix visualization since longitude and latitude values constitute X and Y axes uses multiple visual cues in a 2D square matrix to enhance the visual feedback from a large data There also exist tools which employs a circle rather than a rectangle or square as the layout of the data objects Circle segmentation techniques are discussed in to represent high dimensional data onto a 2D geometry In coauthorship is represented in a circular image such that authors are arranged on a non-interactive 2D whose visual feedback may lose effectiveness as the data size grows large As an extension of a circular grid a concentric 2D ring view of a coauthorship network is presented in in which each ring represents authors contribution in a particular year which is useful to show temporal trends in the underlying information JUNG is a more comprehensi v e visualization tool for network/graph data It offers a circle layout but in 2D 3 Round3D In this section we discuss the motivation design philosophy and features of the proposed Round3D Our project 
461 


was grown from the repeating visualization need of data mining results in our various projects For 2D or 3D numerical information perhaps Gnuplot 1 is the most popular plotting tool in the 002eld of science and engineering for its easiness to use rich con\002gurable features and excellent plot quality It is however impossible to inspect speci\002c spots on the plot to delve into local details Starting from this experience in our work this project was born with the following design goals Design goals 1 Global summary vs local details The tool is to be capable of serving high-level global summaries as well as individual details of the dataset For this objective multilevel views are to be offered 2 Visual capacity The visual capacity of the tool is de\002ned as the density of visual objects with respect to the number of pixels used The tool is anticipated to maximize this ratio to be able to handle a large dataset as much as possible 3 User interaction The tool is to offer an easy intuitive interaction capability such as navigation zoom-in drill-down zoom-out roll-up rotation pivot slice project onto an axis and 002lter extract a subset of the universe 4 Query interface The tool is to offer a query interface for exploring visually implicit information These objectives are intertwined with each other We now present the major components of Round3D in which we accomplish the design goals 3.1 Visual capacity Visual capacity is primarily governed by the layout of the objects that we choose Object layout Square grids or rectangular grids in general and circles are the two most popular types of object layout for undirected binary relationships in the literature 14 1 3 9 10 We chose circle as the primary layout for objects in Round3D rather than square for two reasons 002rst squares are bound to the speci\002c semantic roles attached to columns and rows and hence are not suitable to represent high dimensional data whereas circles have no such binding and can represent virtually any degree of dimensionality Second a circle generally offers more visual capacity than a square of comparable size Squares consist of a set of columns and a set of rows each set of which has unique semantic roles as usual in a 2D 1 http://www.gnuplot.org matrix Due to this convention a square layout is typically either column-wise or row-wise but not both when representing an aggregation of information Changes in axes imply changes in information carried by the tool To illustrate this point consider the two stacked histograms shown in Figure 3 Both histograms show the total number of votes thrown to George W Bush John Kerry and all other minor candidates in the 2004 US presidential election The major axis of the 002rst histogram is the candidates by which we can easily 002nd which candidate received more votes in total In contrast the second histogram shows that which state threw more votes than other states Each histogram further provides detailed information on states or candidates In this example each histogram has a set perspective and a translation between the two perspectives is not automatic The circular layout in Round3D inherits no such a binding and is capable of representing any number of axes Let us discuss the matter of visual capacity The 002rst 002gure in Figure 2 shows a square grid view of the cooccurrence frequencies of 19 spatial features taken from our previous project The second 002gure shows the same information in a 3D space In this type of 002gure X and Y axes have the same set of values as in a square matrix because the primary purpose is to investigate the co-occurrence pattern between every pair of values The similar ideas are also used in information retrieval for the visualization of word co-occurrence and in association rule mining for frequent itemsets With a larger number of objects objects and their labels will be cluttered to a unreadable state and subsequently detailed local information will be no longer available Our strategy in dealing with this issue is to use a circular layout because it suffers from the problem less than the square grid layout as discussed below The number of distinctively displayable objects in the square layout is proportional to the length of a side of the square i.e the number of pixels along the side and hence as the number of objects increases k times the total area i.e number of pixels required increases k 2 times Due to the symmetric nature of the square grid only a half of the grid along the diagonal is often set to meaningful values In such a case a half of the occupied pixels are wasted An alternative layout to square is circle as illustrated in Figure 2 In a circle layout only one set of objects are arranged along the circumference of the circle It is clear that the number of distinctively displayable objects in the circle layout is proportional to the entire circumference of the circle in contrast to the square layout Hence a circle of radius r will have 031 times more visual capacity than a square of side length 2 r  Node and label arrangement Suppose that each object is represented as a sphere Since all the nodes are arranged 
462 


Figure 3 Number of popular votes for Bush Kerry and all other candidates by state along the circumference of radius r in the circle layout the interval between adjacent nodes i and j is 2 031=n given n nodes As we do not want to permit overlap between i and j  the maximum radius  b  of a node is equal to the half of the distance between the centers of adjacent nodes i and j which is the height of the half triangle of the isosceles triangle formed by the centers of the grid node i and node j  Hence the maximum radius of spherical objects on the circle layout is a function of the radius of the circle and the number of objects involved b  r sin\(\(2 031=n   2  r sin 031=n  3.2 Visual cues In visualization the mapping relationship from the data domain to the visual domain is one-to-many In other words there exist multiple views or perspectives for the given dataset In a 3D space the user may have different visual feedback on the same information depending on the user's current perspective Conversely the values with the same visual feedback may be distinct values in the data domain Often two different values in the data domain are projected onto the same value along the user's view direction in the visual domain Hence we need to put our best effort to avoid ambiguous visual feedback Visual cues As alluded above a single visual cue for one type of information may not be suf\002cient in discriminating one data value from another In addition to the mapping and projection issues mentioned above it is because one user may be sensitive to a variation in color but not in length and vice versa For these reasons in general visualization of a relationship using multiple visual cues such as color and length is more effective than using a single visual cue as long as they are used consistently with care The needle grid view in uses three vis ual cues color  angle and length in which no single cue may not be powerful enough when the grid size is large The 2D co-occurrence plot in Figure 2 uses color as the only visual cue which also may not be suitable for a large dataset In Round3D multiple visual cues are used to maximize the discriminative power of visual components Two visual cues shapes and colors are used to distinguish one object class from another Shapes and sizes Object size in Round3D is the same for all the objects since the primary objective is to visualize the undirected relationships among comparable objects If objects belong to different classes e.g continents in a grouping of authors by the continent they reside different 3D geometric shapes such as spheres and cubes are used to distinguished them Geometry and height For relationships among objects edges in Round3D four visual cues color brightness height and thickness are used to enhance the visual feedback on the signi\002cance of undirected relationship modeled as edges All these cues are primarily the function of the weight of the corresponding relationship The effect of these visual cues are illustrated in Figures 4 and 5 In Round3D the relationship between two objects is represented by a quadratic Bezier curve Given points p 0  p 1 and p 2  the Bezier curve is de\002ned as a function of t 2  B  t   1 000 t  2 001 p 0  2 t 1 000 t  001 p 1  t 2 001 p 2 where t denotes a curve segment By passing the Y axis values of the two corresponding nodes as p 0 and p 2  and the weight of the edge between the two nodes as p 1  we can obtain an edge of a parabolic shape whose height is scaled by the weight factor of the edge automatically Color The hue of an edge e is determined by the weight factor of e as well hue  e   max 000 weight  e   max where max is the maximum edge weight in the dataset With this formula edge colors change from red to yellow 
463 


and then to green and blue as the weight factor changes from the maximum value to a smaller value Brightness We chose to use varying brightness in an edge to visually emphasize the middle of the edge Varying brightness provides a better 3D feedback than a uniform brightness for edges in a 3D space The edge brightness is de\002ned as a function of t 2  brightness  t   000  t 000 0  5 2  0  5 2  1 where t denotes a curve segment An edge becomes the brightest at the vertex point and gradually darker toward both end points of the edge Thickness Thickness of an edge is proportional to the weight of the corresponding relationship in Round3D 3.3 User interaction As discussed above circular grids are preferred for excellent visual capacity and intuitive visual feedback offered However its effectiveness is challenged ultimately when the number of objects and relationships becomes large The nodes edges and node labels if given in a static image will be cluttered resulting in losing detail local information A natural remedy to this problem is an integration of user interaction which lets the user navigate through multilevel views offered by Java3D We follow the Visual InformationSeeking Mantra in this regard overview 002rst zoom and 002lter then details on demand as suggested in through the following user interaction functions Rotation The user can change his/her view direction to any direction in the 3D space This offers an effect of the entire grid rotation In addition the entire grid can rotate around X  Y  or Z axis incrementally or automatically at the user's will The consistent automatic rotation around a particular axis is useful to inspect a global summary of the entire data from a particular perspective This rotation function also provides a trill of a rollercoaster riding especially when the user's view is set to a deep perspective see the middle 002gures in Figure 4 This additional trill is what is missing in traditional visualization We add this to Round3D as a prelude to the integration of computer game metaphor into visual data exploration Zoom The zoom function of Round3D allows the user to zoom any visual component in such as nodes node labels edges and the entire grid as well Examples of zoomed views are shown in Figures 4 and 5 at various level of magni\002cation Note that when the dataset size is relatively large node labels may be too small to read at a low magni\002cation level see the coauthorship of 968 nodes and 3,470 edges in Figure 5 By zooming the view in we can inspect all the node labels clearly without losing any information Filter The user is allowed to 002lter nodes and edges by their weight factor at the time of launching Round3D or while Round3D is running This function helps the user focus on the signi\002cant patterns without being distracted by minor details by 002ltering statistically insigni\002cant objects or relationships out Examples of 002ltered views are shown in Figures 4 and 5 In Figure 4 edges are pruned interactively using different minimum edge weight by which prominent 2 3or 4-frequent itemsets are easily discovered A pruning action can be revoked instantly also In Figure 5 three different minimum edge weights are applied to the publication coauthorship dataset before the nodes and edges are constructed 3.4 Query interface Round3D is equipped with a query interface prototype As the user clicks a node n  n s appearance changes to a wire framed shape and the detailed information of n is displayed on top of the screen The information includes the name of n  the support count of n in the given dataset and the sum of the weights of all the edges connected to n  As the user also clicks an edge e  the weight of e and the names of the nodes on the both ends are displayed Examples are shown in Figures 4 and 5 in which node information is not readable on the printout but very clear in Round3D 4 Experiment The proposed Round3D has been developed by using Java3D 1.5 and Java 6 and tested on a PC with Pentium D 3.00 GHz CPU and 2.00 GB of RAM In testing Round3D four real world datasets a market basket analysis dataset typically used in association mining the 2004 US presidential election data and two co-authorship datasets and a number of random datasets are used Their sizes are ranging up to 031 20,000 objects and 315 to 10 4 edges Market basket analysis dataset This dataset comprises 100 objects and 1,126 edges each of which represents a pair of grocery items being sold together The support level in percentage of such a pair determines the weight of the corresponding edge The support of 53 pairs 4.7 out of 1,126 pairs was 10 or higher and 274 pairs 24.3 have only 1 support The visualization of this dataset in Round3D is shown in Figure 4 100 items and their labels are well spaced out and labels are very clear to read at various zoom levels Most edges appear to be blue background with a low pro\002le due to their low level of support A small number of statistically signi\002cant edges are rendered in red and orange colors as thick tall Bezier curves In the bottom 002gures as the Pillsbury Cake Mix node is queried by mouse click the node 
464 


Figure 4 A market basket analysis dataset Top left 100 item nodes from Apple  Eve Apple Juice to Yo-Ho Potato Chips are interconnected by 1,126 edges The edges signify that 1,126 pair of items are sold together The bird eye view offers a clue to strongly frequent itemsets such as f Pillsbury Cake Mix Pillsbury Biscuits Jiffy Muf\002n Mix g  Top right Node and edge query by mouse click on Pillsbury Cake Mix reveals all the edges connected to the item and the total edge weight Middle left Powerful zoom-in features reveal that Pillsbury Cake Mix has high support with other items such as the neighboring Pillsbury Biscuits Middle right Automatic rotation of the grid around Y axis with a deep perspective view like this gives the fun of a roller-coaster ride while visually exploring the dataset Bottom Examples of interactive edge pruning at minimum edge weight 17 left and 23 right in which 3-frequent itemsets f Pillsbury Cake Mix Pillsbury Biscuits Jiffy Muf\002n Mix g and f Pillsbury Cake Mix Pillsbury Biscuits Bigelow Apple  Cinnamon Herb Tea g are visually obvious 
465 


Figure 5 Top The US Presidential election 2004 dataset Left 25 Presidential candidates are in red boxes and 50 states are in gray spheres Edges are concentrated on Bush and Kerry signifying that they are the two leading candidates Total number of votes thrown to Bush and Kerry are queried by clicking the respective nodes Right States such as California Florida Georgia Illinois and Michigan show very close support for Bush and Kerry The red edge between Kerry and California reveals that Kerry has the largest number of votes in the nation from California Next 2 rows A publication coauthorship dataset of 968 authors and 3,470 coauthorship relationships The impact of edge weight threshold  022  on the coauthorship data Middle left 3470 edges at 022 0 Middle right 384 edges at 022 2 Bottom left 10 edges at 022 6 Pruning by edge threshold helps to focus on statistically signi\002cant relationships quickly Bottom right Exploration of outstanding edges leads to the discovery of S K Card's coauthorship i.e 72 in total by clicking the S K Card node 
466 


is turned into a wire framed sphere all the connected edges to the node are highlighted in white and the detailed information on the node is displayed With this dataset the user interaction functionality performed smooth This dataset is also used to test interactive 002ltering of nodes and edges and reverting of the previous 002ltering The bottom 2 002gures in Figure 4 shows edge pruning at two different edge weight thresholds 17 and 23 With this pruning function we were able to discover 3-frequent itemsets such as f Pillsbury Cake Mix Pillsbury Biscuits Jiffy Muf\002n Mix g  quickly 2004 US presidential election dataset This dataset is obtained from FEDERAL ELECTIONS 2004 by Federal Election Commission This dataset is bipartite of two distinct object classes 25 presidential candidates and 50 voting states The objects of the presidential candidate class appear in red cubes and the states are rendered in gray spheres as shown in Figure 5 An edge weight represents the number of popular votes thrown to a candidate from a state The number of votes for Bush Kerry and all others by state are shown in Figure 3 The perspective of each histogram is different such that the left represents total popular votes by candidate whereas the right is by state These two perspectives are uni\002ed into one in Round3D shown in Figure 5 From the Round3D view we can visually and textually inspect the total number of votes thrown by each state to each candidate and the total number of votes received by each candidate from each state For example from the top left 002gure in Figure 5 we 002nd that Bush and Kerry are the two top runners From the top right 002gure it is clear that California threw the largest number of votes in the nation and Florida is the second It is also shown that California is in favor of Kerry more than Bush Co-authorship datasets small and large Two coauthorship datasets in scienti\002c publication are tested with Round3D One is from the InfoVis 2004 contest 968 authors and 3,470 coauthorship and the other dataset is from CiteSeer 19,898 authors and 8,294 coauthorship Both datasets were tested well The bottom 4 002gures in Figure 5 shows global summaries of the coauthorship as well as the details of individual author in which the degree of coauthorship of most authors is relatively low One outstanding example is S K Card shown in the 002gure This fact is well observed in Figure 5 as edges are pruned by increasing edge weight threshold With the larger co-authorship dataset we experienced noticeable lagging in user interaction 5 Conclusion and Future Work The preliminary results from the proposed Round3D were pleasant and promising as an in-memory tool They also expose shortcomings in our current approaches Our biggest concern is scalability for a massive dataset We plan to overcome this issue by two ways First we will make nodes and edges light by storing all the information other than their unique IDs in a high performing standalone database and access the details on demand With this approach we also plan to offer a versatile SQL query interface Second we consider to present meta-relationships at a high-level view 002rst and low-level views later as needed References  J Abello and J K orn MGV  A System for V isualizing Massive Multidigraphs  IEEE TVCG  8\(1 Jan-Mar 2002  L A Adamic and E Adar  Friends and Neighbors on the Web Social Networks  July 2003  M C F  de Oli v eira and H Le vk o witz From V isual Data Exploration to Visual Data Mining A Survey IEEE TVCG  9\(3 Jul-Sep 2003  W  H Hsu A L King M S R P aradesi T  Pydimarri and T Weninger Collaborative and Structural Recommendation of Friends using Weblog-based Social Network Analysis In Proc of AAAI Spring Symposia  pages 5560 March 2006  T H Huang and M L Huang Analysis and V isualization of Co-authorship Networks for Understanding Academic Collaboration and Knowledge Domain of Individual Researchers In Proc of the 3rd CGIV  pages 1823 2006  D A K eim Designing Pix el-Orient ed V isualization T echniques Theory and Applications IEEE TVCG  6\(1 Jan-Mar 2000  D A K eim C P anse M Sips and S C North V isual Data Mining in Large Geospatial Point Sets IEEE CG&A  24\(5 Sep-Oct 2004  R K umar  P  Ragha v an S Rajagopalan and A T omkins The Web and Social Networks IEEE Computer  35\(11 36 Nov 2002  Y  Matsuo and M Ishizuka K e yw ord Extraction from a Single Document using Word Co-occurrence Statistical Information Int'l J on AI Tools  13:157169 2004  M E J Ne wman Coauthorship net w orks and patterns of scienti\002c collaboration Proc of the National Academy of Sciences of USA  101\(1 April 6 2004  J O'Madadhain D Fisher  P  Smyth S White and Y B Boey Analysis and Visualization of Network Data using JUNG J of Statistical Software  VV 2005  T  C Sprenger  R Brunella and M H Gross H-BLOB a hierarchical visual clustering method using implicit surfaces In Proc of the Conf on Visualization  pages 6168 2000  E T ejada and R Minghim Impro v ed V isual Clustering of Large Multi-dimensional Data Sets In Proc of the 9th Int'l Conf on Info Visualisation  pages 818825 July 2005  P  C W ong P  Whitne y  and J Thomas V isualizing Association Rules for Text Mining In Proc of IEEE InfoVis  pages 120123 Oct 1999 
467 


5 Related Work There exists extensive previous work on both the mining of software repositories and on the use of clustering algorithms in software engineering This discussion focuses on the most similar and recent work in the area of software evolution Mining Software Repositories Our technique was partially inspired by the work of Zimmermann et al and Y ing et al 17 on the mining of association rules in change history As described in Section 1 we sought to expand the technique to be able to recommend larger but less precise clusters of elements to guide program navigation Bouktif et al also investigated how to recommend cochanges in software development As opposed to the work cited above Bouktif et al used change patterns instead of association rules Also their approach does not attempt to reconstruct transactions and can consider associated 002les that were changed in different transactions ChangeDistiller is a tool to classify changes in a transaction into 002ne-grained operations e.g addition of a method declaration and determines how strongly the change impacts other source code entities Our approach uses similar repository analysis techniques but is focused on providing task-related information as opposed to an overall assessment of a system's evolution Finally repository mining can also be used to detect aspects in the code In this conte xt aspects are recurring sets of changed elements that exhibit a regular structure Aspects differ from the clusters we detect in the regular structure they exhibit which may not necessarily align with the code that is investigated as part of change tasks Clustering Analysis The classical application of clustering for reverse engineering involves grouping software entities based on an analysis of various relations between pairs of entities of a given version of the system Despite its long and rich history  e xperimentation with this approach continues to this day For example Andreopoulos et al combined static and dynamic information K uhn et al used a te xtual similarity measure as the clustering relation and Christl et al used clustering to assist iterative semi-automated reverse engineering The main dif ferences b e tween most clusteringbased reverse engineering techniques and the subject of our investigation is that the entities we cluster are transactions rather than software entities in a single version of a system For this reason our analysis is based strictly on the evolving parts of the system Both Kothari et al and V an ya et al 15 recently reported on their use of clustering to study the evolution of software systems The idea of using change clusters is the same in both works and ours but the purpose of the work is different Kothari et al use change clusters to uncover the types of changes that happened e.g feature addition maintenance etc during the history of a software system Vanya et al use change clusters which they call evolutionary clusters to guide the partitioning of a system that would increase the likelihood that the parts of the system would evolve independently In contrast we cluster transactions based on overlapping elements not 002les to recommend clusters to support program navigation as opposed to architectural-level assessment of the system Finally Hassan and Holt evaluated on 002ve open source systems the performance of several methods to indicate elements that should be modi\002ed together This study found that using historical co-change information as opposed to using simple static analysis or code layout offered the best results in terms of recall and precision The authors then tried to improve the results using 002ltering heuristics and found that keeping only the most frequently cochanged entities yielded the best results As opposed to our approach the evaluated 002ltering heuristics were only applied on entities recovered using association rules and not using clustering techniques The focus of their study was also more speci\002c as they recommend program elements that were strictly changed  as opposed to recommending elements that might be inspected by developers 6 Conclusion Developers often need to discover code that has been navigated in the past We investigated to what extent we can bene\002t from change clusters to guide program navigation We de\002ned change clusters as groups of elements that were part of transactions or change sets that had elements in common Our analysis of close to 12 years of software change data for a total of seven different open-source systems revealed that less than 12 of the changes we studied could have bene\002ted from change clusters We conclude that further efforts should thus focus on maximizing the quality of the match between the current task and past transactions rather than 002nding many potential matches Our study has already helped us in this goal by providing reliable evidence of the effectiveness of some 002ltering heuristics and useful insights for the development of additional heuristics Acknowledgments The authors thank Emily Hill and Jos  e Correa for their advice on the statistical tests and the anonymous reviewers for their helpful suggestions This work was supported by NSERC 
25 
25 
25 
25 
25 


References  B Andreopoulos A An V  Tzerpos and X W ang Multiple layer clustering of large software systems In Proc 12th Working Conf on Reverse Engineering  pages 7988 2005  S Bouktif Y G Gu  eh  eneuc and G Antoniol Extracting change-patterns from cvs repositories In Proc 13th Working Conf on Reverse Engineering  pages 221230 2006  S Breu and T  Zimmermann Mining aspects from v ersion history In Proc 21st IEEE/ACM Int'l Conf on Automated Software Engineering  pages 221230 2006  A Christl R K oschk e and M.-A Store y  Equipping the re\003exion method with automated clustering In Proc 12th Working Conf on Reverse Engineering  pages 8998 2005  D 020 Cubrani  c G C Murphy J Singer and K S Booth Hipikat A project memory for software development IEEE Transactions on Software Engineering  31\(6 465 2005  B Fluri and H C Gall Classifyi ng change types for qualifying change couplings In Proc 14th IEEE Int'l Conf on Program Comprehension  pages 3545 2006  A E Hassan and R C Holt Replaying de v elopment history to assess the effectiveness of change propagation tools Empirical Software Engineering  11\(3 2006  D H Hutchens and V  R Basili System s tructure analysis Clustering with data bindings IEEE Transactions on Software Engineering  11\(8 1985  D Janzen and K De V older Na vig ating and querying code without getting lost In Proc 2nd Int'l Conf on AspectOriented Software Development  pages 178187 2003  J K ot hari T  Denton A Shok ouf andeh S Mancoridis and A E Hassan Studying the evolution of software systems using change clusters In Proc 14th IEEE Int'l Conf on Program Comprehension  pages 4655 2006  A K uhn S Ducasse and T  G  021rba Enriching reverse engineering with semantic clustering In Proc 12th Working Conf on Reverse Engineering  pages 133142 2005  M P  Robillard T opology analysis of softw are dependencies ACM Transactions on Software Engineering and Methodology  2008 To appear  M P  Robillard and P  Mangg ala Reusing program in v estigation knowledge for code understanding In Proc 16th IEEE Int'l Conf on Program Comprehension  pages 202 211 2008  J Sillito G Murph y  and K De V older Questions programmers ask during software evolution tasks In Proc 14th ACM SIGSOFT Int'l Symposium on the Foundations of Software Engineering  pages 2334 2006  A V an ya L Ho\003and S Klusener  P  v an de Laar and H van Vliet Assessing software archives with evolutionary clusters In Proc 16th IEEE Int'l Conf on Program Comprehension  pages 192201 2008  N W ilde and M C Scully  Softw are reconnaissance Mapping program features to code Software Maintenance Research and Practice  7:4962 1995  A T  Y ing G C Murph y  R Ng and M C Chu-Carroll Predicting source code changes by mining change history IEEE Transactions on Software Engineering  30\(9 586 2004  A Zeller  The future of programming en vironments Integration synergy and assistance In Proceedings of the 29th International Conference on Software Engineering The Future of Software Engineering  pages 316325 2007  T  Zimmermann and P  W eißgerber  Preprocessing C VS data for 002ne-grained analysis In Proc 1st Int'l Workshop on Mining Software Repositories  pages 26 May 2004  T  Zimmermann P  W eißgerber  S Diehl and A Zeller  Mining version histories to guide software changes In Proc 26th ACM/IEEE Int'l Conf on Software Engineering  pages 563572 2004 A Clustering Algorithm This algorithm is not sensitive to whether a given program element exists or not in a given version of a program For example if method m exists in one version it is considered a valid program element even if it is removed in a later version In the rest of this section we use the term program element to refer to the uniquely identifying representation of the element e.g a Java fully-quali\002ed name Let T be a transaction modeled as a set of program elements changed together during the history of a software system Let T be a sequence of transactions In this algorithm a cluster is also modeled as a set of elements 1 Input  T  A sequence of transactions 2 Parameter  M IN O VERLAP  A positive non-zero value indicating the minimum overlap between two transactions in a cluster 3 Var  C  A set of clusters initially empty 4 for all T i 2 T do 5 MaxOverlap  0 6 MaxIndex  000 1 7 for all C j 2 C do 8 if j C j  T i j  MaxOverlap then 9 MaxOverlap  j C j  T i j 10 MaxIndex  j 11 end if 12 end for 13 if MaxIndex   0  MaxOverlap 025 M IN O VERLAP  then 14 C MaxIndex   C MaxIndex  T i  15 else 16 NewCluster  T i 17 C  C  f NewCluster g 18 end if 19 end for 20 return C B Systems Analyzed System home pages last veri\002ed 7 May 2008 Ant ant.apache.org Azureus azureus.sourceforge.net Hibernate www.hibernate.org JDT-Core www.eclipse.org/jdt/core JDT-UI www.eclipse.org/jdt/ui Spring springframework.org Xerces xerces.apache.org 
26 
26 
26 
26 
26 


