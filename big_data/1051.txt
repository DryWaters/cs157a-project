Uncertainty Rule Generation on a Home Care Database of Heart Failure Patients S Konias GD Giaglis G Gogou PD Bamidis N Maglaveras Laboratory of Medical Informatics, Medical School, Aristotle University of Thessaloniki Greece Abstract In this paper we present the Uncertainty Rule Generator tool and the algorithm used This data mining tool generates uncertain rules as apart of the Knowledge Discovery in Databases process and is tested upon a home-care datobase containing data fiom congestive heart failure patients over a period of approx 10 
months This algorithm can handle dynamic dato without the need of recovering the itemsels om the beginning This is highly appropriate for a home-care monitoring system where new recorh are constantly added Moreover it can deal with missing values, since it uses flexible metrics similar to those of other Association Rule algorithms Finally this algorithm computes a Certainty Factor for each atracted rule which is representative of ils eficiency In a firture step this atracted rule can be used on newly entered data in order lo predict the missing values while 
its Certainty Factor will allow the exact estimation of error in this prediction 1 Introduction Knowledge Discovely in Databases KDD is of increasing interest for medicine because it can extract the knowledge hidden in big medical databases by discovering regularities and exceptions A well-known KDD technique are the association rules 1,2 which relate the presence of items in transactions. One classic example is the rules extracted from the content of market baskets In this example items are the things bought in a market and transactions 
are the whole market baskets containing several items The association rules describe which things are usually bought together with other things Common to the association rules are also the uncertainty rules The form of those rules is easy to understand 223IF A THEN B WITH CF\224 where A B are the itemsets and CF is the certainty factor. The role of the certainty factor is to represent the efficiency of each rule that is how ofkn it is applied This feature makes similar rules more appropriate for relative sciences, like medicine 
Currently most of the existing algorithms 1,2 for generating associations among the attributes describing the data in a database have a number of shortcomings they mandate multiple passes over the initial database assuming a static database However many applications in medicine require generating  associations in dynamic databases, where new records are constantly being added e.g in our case a home care monitoring system Furthermore the aforementioned algorithms cannot deal with missing values In dynamic databases it is hard to maintain the discovered rules since the continuous updates may not only invalidate some already existing rules 
but also produce other rules relevant To date, some solutions to this problem are presented in the literature 13-51 but the need for dealing effectively with missing values still exists In this paper we present the Uncertainty Rule Generator URG tool and the algorithm used namely LJRG-2 which is an evolution of 161 for incrementally updating the uncertainty rules when new records are added even if the database contains missing values 2 Helpful defmitions Let I be a set of items and T a set of transactions with 
items in I both assumed to be fiate Let 224IF X THEN Y WITH CF\224 be an uncertainly rule where X,YcI X,Y#0 and XnY=0 This rule means 223CF of the transactions in T that contain X contain also I\224\222 The main idea upon tackling the problem of missing values is to ignore records containing missing values for each corresponding itemset separately in order to avoid missing important information Definition 1 We note B\(2 the subset of B containing 2 
i.e B\(Z weB/G w Definition 2 If a transaction teT contains missing values for at least one item of 2 then t is disabled for 2 in the database B We note B the subset of B disabled for 2 As a consequence the metrics probability and conditional probability have to be calculated taking in Let B be a Database and 2 a set of items 02764547103 17.00 0 XI03 IEEE 765 computers io cnrdlolm u u;30:765-768 


account the tramactions disabled for each itemset in a rule Below new defGtions for the above metrics are given, fully compatible with 7 Definition 3 The Probability PX of an itemset X in a database B with missing values is Definition 4 The Conditional Probability Pm or Certainty Factor \(CF of the rule 223IF X THEN Y\224 in a database B with missing values is 3 Method The used URG-2 algorithm from the URG tool generates relations between the data for a heart failure patient in an understandable form. The more important advantages of this algorithm for a home-care monitoring system are that it Can handle dynamic data without the need of recovering the already existing itemsets from the beginning Can deal with missing values, since it uses flexible metrics Computes for each extracted rule a certainty factor which represents its efficiency The algorithm consists of two arts The first art scans the-data and fmds the existing itemsets he second part generates the unc\222ertainty rules whose probability and conditional probability are higher than a user-specified threshold 3.1 Itemset generation algorithm Our idea is to preprocess the database and create the itemsets with the information needed for uncertainty rule generation. Once the itemsets are created there is no further need to access the original database again The main aim of the first part the Itemset Generation algorithm IC is to be able to deal with dynamic databases As mentioned above in a home based care monitoring system where new records\221 are added very often, the need for this kind of algorithm is high Updating the itemsets when the database is changed is fast and simple without the need of recovering the itemsets from the beginning In addition the facts that it makes only one pass over the initial data set and that it deals.with missing values are some other important advantages for the IG algorithm We present a novel idea for generating the itemset The IC algorithm stores the needed information into two list structures with itemsets, one for the itemsets with missing values and one for the itemsets without missing values In Figure 1 we show the main idea for the IC algorithm Itemset-Gmera tion-algorithm I for all records R in Database B do 2 if R is the first record 3 then add R as the first node 08 4 else scan each node in the list to find common values with R 5 6 7 8 9 IO I1 12 13 14 15 16 endfor Figure I 1G Algorithm if a node with the common values already exists then increase by one n,.count else add a new node nm if R contains missing values then if a node already exists that bas the same common values and the same missing values then increase by one mk.count else add a new node mp if there is no node exactly matching R in the list then if R contains no missing values then add at the end of the list a new node nm with all values of R else add at the end of the list a new node m with all values of R The itemset generation algorithm creates smaller itemsets than other algorithms for example the ones based on the apriori algoritlh Thus if the itemset a b c is found in 5 records, then the itemset a b will not be mined unless it is found in more than 5 records This way no redundant rules are mined 3,2 Rule generation algorithm The main aim of the second part is to mine from the already generated itemsets those uncertahty rules whose probability and conditional probability are higher than thresholds specified by the user The used mtrics are,pose in Definitions 3 and 4 The needed informahon\222is taken from the list data structure In Figure 2 the main smcture of the Rule Generation algorithm RG is described The defmitions of the symbols that are used in Figure 2 are in section 2 Rule-Generation-algorithm I for each node n in the Itemset List with no missing values do 2 find IB  B  3 4 5 if the Probability Px of n is high enough then number of items icl for all possible combinations of the attributes that have i items at right find those with high enough Conditional Probability Pny 6  endfor 7 8 9 endfor Figure 2 RG Algorithm if at least one item was found then i+t and goto 5 


4 The home care system The database that was used for this study was collected at the Lab of Medical Informatics in Thessaloniki, Greece It consists of records of patients who participated in the Citizen Health System \(CHS project between September 2001 and January 2003 8 CHS is a home care system constructed around an automated Contact Center functioning as a server Patients can communicate with it via a variety of interfaces like public telephone Internet or a mobile device In this project patients record with the help of electronic microdevices and transmit to the Contact Center the values of their vital parameters \(continuous variables and yesho answers to simple questions regarding mostly the occurrence of certain symptoms boolean variables In such a database missing values are due mainly to technical problems or improper use of the various interfaces and are considered random During the period of this study 11 Congestive Heart Failure CHF patients participated for 8-13 months and were sending once a week their ECG and tbree times a week values of the parameters described in Table 1 The primary purpose was to monitor the condition of the patients and help them avoid hospital readmissions Table I Values transmitted to the Contact Center Vital parameters continuous Systolic blood pressure Diastolic blood pressure Pulse Weight Temperature Questions asked boolean Did you feel breathless during the night Are your feet swollen Do vou feel more tired todav  Do you have dyspnoea today Did you take your heart failure medication 5 The URG tool Since medical data is highly confidential transferring it from the Contact Center was avoided so as not to compromise its safety For this purpose a clienu'server architecture was used in the implementation of the URG tool were the use of the client is password-protected as well More specifically the queries are defmed on the client but are executed on the server. Only the results are returned from the server to the client so as to be viewed by the user An intuitive Graphical User Interface Figure 3 was designed to help the physician-user choose one of the available patients and also select among the corresponding parameters the ones that will be used in the rules to be mined Since the URG algorithm works with categorical data, the answers to the questions were used as such but the numeric data were transformed into 3 categories low medium high in order to correspond with the usual categorization physicians use in their everyday practice The cut-off scores applied are customized for each patient and each parameter and can be selected by the physician The latter can either choose specific values for each categorization or can rely on statistical information \(like average st deviation and percentage of values in a normal distribution\provided by the tool in order to define the ranges of the categories in a uniform way Figure 4 Average 79.28 s Oevintioiv 3.55  1  Figure 4 Definition of categories The user can also set the probability and conditional probability thresbolds that will decide which of the rules mined will be finally viewed The results screen presents the corresponding rules in an easily comprehensible way along with a sunumfy of the data the categories and the metrics used 6 Results The standard metrics of 10 minimum probability and 75 minimum conditional probability were 767 


applied to generate rules for the values transmitted by the 11 CHF patients of the study For comparison purposes the data of each numeric variable of each patient was categorized so that the middle 40 of the values according to the normal distribution, would fall in the medium category while the low and high categories would cover 30 of the values respectively Using these metrics a mean of 3668.4 ruleslpatient were mined \(ranging from 2606 to 5528 The number of rules depended on the variance of the data transmitted by each patient especially their answers to the questions while it was not correlated with the number of contacts, due to the categorization method The most relevant i.e logical or interesting of those rules were selected by one of the authors a medical doctor Some of the induced rules represent everyday knowledge in medicine or can be explained by common sense. For example in patient number 1 1 low systolic blood pressure \(SBP occurred together with low diastolic blood pressure DBP or with low pulse as well CF 75% and 81.8 respectively\while patient 4 used to report together breathlessness during the night with dyspnoea and tiredness during the day CF of their combinations from 80 to 100 Other rules were more interesting in the way that they predict subjective symptoms based on objective signs or vice versa for a specific individual e.g patient 7 reported feeling tired when either his SBP DBP or pulse were high CF 87.8 86.7 and 86 or a combination of the three at once Patient 11 in the same way complained about daytime dyspnoea whenever his DBP was up his pulse was rapid or his feet where swollen \(CF 78.6 75 and 90.9 On the other hand for patient #8 the elevation of her SBP could be 223predicted\224 by her tiredness and the swelling of her feet CF 88.9 for both which of course tended to oca simultaneously \(CF 80.6%\These rules may indicate to the patients a way to avoid or understand the appearance of disturbing symptoms or 223foresee\224 relatively elevated values of their vital parameters Of course, given the limitations and specifics of the available data and the biases of the expert choosing the importance of the rules mined the induced rules should not be considered as applicable to all CHF patients This paper should only be viewed as a methodological study suggesting how to use this new algorithm on similar databases 7 Conclusions Contrary to previous algorithms mentioned before the ability of URG to generate associations in dynamic databases combined with its effective manipulation of missing data makes it ideal for medical applications lie home care centers as it is already demonstrated At the present time work is done on several points to improve the use of rules in URG One point is to try to determinate the optimum thresholds and categorization criteria As the URG tool will become more automated the physician will have the opportunity to concentrate more on the interpretation and evaluation of the rules Another point will be the use of this algorithm to fill the missing values on newly entered data in dynamic databases, enabling URG to become a tool for the data cleaning step of the KDD process Acknowledgements This work was supported in part by the EC projects ITV and by the program PROMESIP funded by the Ministry of Education EPEAEK I References IST-1999-13352-CHS IST-2001-33369-PANACEIA Agrawal R Imielinski T Swami A Mining Association Rules between Sets of Items in Large Databases Proc of the ACM Intl Conf on Management of Data May 1993 Agrawal Q Swami A Fast Algorithms for Mining Association Rules Proc. of the 20\224 IntlConf on Very Large Data Bases, September 1994 Veloso A Possas B Meira W Cavalbo M Knowledge Management in Association Rule Mining IEEE International Conference on Data Mining 2001 Cheung D Han J Ng V Maintenance of Discovered Association Rules in Large Databases An Incremental Updating Technique Proc of the 12\222 Intl. Conf on Data Engineering 1996 Cheung D Lee S A General Incremental Technique for Maintaining Discovered Association Rules Proc of the 5 Intl Conf on Databases Systems for advanced Applications, 1997 Konias S Bamidis P Maglaveras N Chouvarda I Treatment of Missing Values Using Uncertainty in Medical Data hoc 7\222 International Con on the Medical ASDects of Telemedicine Reaensbura September 2602 Agrawal Q Mannila H Srikant Q Toivonen H   Verkamo AI Fast Discovery of Association Rules In Advances in Knowledge Discovery and Data Mining Chapter 12 AAAI/MIT Press 1996 Maglaveras N Koutkias V Chouvarda I Goulis DG Avramides A Adamidis D Louridas G Balas EA 221Home Care Delivery through the Mobile Telecommunications Platform The Citizen Health System CHS Perspective\222, International Journal of Medical Informatics 2002 68 99-1 11 Address for correspondence Sokratis Konias Aristotle University of Thessaloniki Lab of Medical Informatics POB 323 Thessaloniki, 54124, Greece E-mail address sokratis~ined.auth.rr 768 


Table 2. The data transformed from Table 1. Gender is mapped to two attributes, male and female. Age is mapped to [20    30   45  a nd  4 6 9 9   ID Name Male Female Young 20, 29 Middle age 30, 45 Senior 46, 99 1 Peter 1 0 1 0 0 2 Mary 0 1 0 1 0 3 Jim 1 0 1 0 0 4 John 1 0 0 0 1 5 Kelly 0 1 0 1 0 6 Smith 1 0 0 0 1 7 Amy 0 1 0 1 0 8 Vincent 1 0 1 0 0 Table 3. The original stock price variation data Day Company A stock closing price variation Company B stock closing price variation Company C stock closing price variation 1 0.019 0.036 0.056 4   0.018 6 0.0176 0.041  9 0.0177 0.042 0.01 10  0.009 0.018 Table 4. The data transformed from Table 3  Company A stock closing price variation Company B stock closing price variation Company C stock closing price variation Day Raise little a1 Raise medium  a2 Raise high a3 Raise little b1 Raise medium b2 Raise high b3 Raise little c1 Raise medium c2 Raise high c3 1 1    1    1 4       1   6 1    1     9 1    1  1   10    1   1             Table 5. The 1-item candidate itemsets and the corresponding support value. \(minsup = 30% or 1.5 1-item candidate itemset Support value Frequent itemset a1\(0 3 Y a1\(2 1 N a1\(3 1 N a2\(0 0 N a2\(2 0 N b1\(0 1 N b1\(1 1 N b2\(0 3 Y b2\(2 1 N b2\(3 1 N b3\(0 0 N b3\(2 0 N b3\(3 0 N c1\(0 3 Y c1\(1 1 N c1\(3 2 Y c2\(0 0 N c2\(1 0 N c2\(3 0 N c3\(0 1 N Table 6. The 2-item candidate itemsets and the corresponding support value. \(minsup = 30% or 1.5 2-item candidate itemset Support value Frequent itemset a1\(0\ b2\(0 3 Y a1\(0\ c1\(3 2 Y b2\(0\, c1\(3 2 Y 


T a bl e 7  T h e 3i t e m candi dat e  i t e m s et s and t h e co rres p on di n g s u p p o rt  val u e. \(m i n sup  3 0  or 1  5   3-i t e m candi da t e  ite m s et Su pp ort val u e  Fre que nt  ite m s et a1 0  b 2 0    c1 3  2  Y  T a bl e 8   T h e e xpe ri m e nt al resul t s f o r t h e a s soci at i o n r u l e s m i ni ng fr om 200 3 st oc k gr ou p i n de x vari at i o n dat a  Algorithm  C l a s s i c a l  A p r i o r i  al gorithm  Item se t prefi x t r ee Nu m b er o f  in ter item s  Sm all in t e r item s  36 i n ter item s  5 in ter t r an sacti o n s  L a rg e i n t e ri t e m s  665 i n ter item s  244 in ter t r an sacti o n s  Sm all in t e r item s  36 i n ter item s  5 in ter t r an sacti o n s  L a rg e i n t e ri t e m s  665 i n ter item s  244 in ter t r an sacti o n s  C P U t i m e for m i n-support  25% \(se c ond 0  0 0 7  9 1  5  0  0 0 7  0  2  C P U t i m e for m i n-support  30% \(se c ond N  A  6 0  N  A  0  1 4  C P U t i m e for m i n-support  35% \(se c ond N  A  4 3  N  A  0  1 1  C P U t i m e for m i n-support  39% \(se c ond N  A  9  3  N  A  0  0 6  C P U t i m e for m i n-support  40% \(se c ond N  A  8  N  A  0  0 4   Day T  1 a, b, e, g 2   3 c, f  i  4   5   6 a, e d h 7   8   9  a   e   d  1 0   1 1  b   c   f  1 2   1 3   1 4   Fi gu re 1  A n 1 di m e nsi onal d a t a base wi t h  a sl i d i n g  wi nd o w of 4 i n t e r v al s   n ab n ac n ad n ae n bc n bd n be  n cd n ce  n de  n abc n abd n abe  n acd n ace n ade n bcd n bce n bde  n cde  n abcd n abce  n abde  n acde  n bcde  n abcde n a n b n c n d n e c d d d d d c d c d c b a b W5 W4 W3 W2 W1 d Fig u re 2   A fu ll ite m s et p r efix tree for five item s a, b, c, d and e Day T  1  a 1   b 2   c 3  2   3   4  c 1  5   6  a 1   b 2  7   8   9  a 1   b 2   c 1  1 0  b 1  c 1  1 1   1 2   1 3   W1 W2 W3 W4 Fi gu re 3 The  dat a set t r a n sf o r m e d fr om Tabl e 4 The sl i d i n g wi n d o w l e ng t h i s  4 day s  W5 


503 MFI that is frequent in more than one node as a global can didate. If a maximal itemset is frequent at all nodes, obvi ously it is also a global maximal frequent itemset. We just need to accumulate its local support counts and put it into the FrequentSet. Such global candidates, however, are very few. Fortunately, even though most itemsets in GC1 appear as local MFls in just one or a few nodes, many of them of ten have their supersets frequent in other nodes. In that case the support counts of the supersets of a candidate allow us to estimate the minimum support count of the candidate in those nodes. For example, suppose that itemset { A ,  B,  G is a local MFI with the local count of 4000 in node I, while A,  B ,  C, E ,  G} and { A ,  B ,  G, K }  are local MFIs in node 2 with local counts of 3800 and 4200, respectively. We can then estimate that the local support count of {A, B ,  G}  in node 2 should he at least 4200. By this way, we can esti mate the minimum support count of any itemset in a node if any of its supersets is frequent in that node. Obviously the estimated minimum support count o f a  candidate is the lagest  support count of all its supersets in that node Subset-Infrequency Based Pruning and Superset Frequency Based Pruning: During thc global mining phase, DMM maintains the following scts: GCk \( k  2 11 FrequentSet and InfrequentSer. They are changing dy namically with the progress of the mining process. The global mining phase continues until GC, is empty, for some k 2 1, to ensure that we will not miss any global maximal frequent itemset. Eventually, FrequentSet will include all the global MFIs. Since DMM uses Frequentset and InfrequentSet to perform the superset-frequency based pruning and the subset-infrequency based pruning maintaining these two sets without any rediindancy is important to make the pruning steps efficient. After each pass in the global mining phase, we determitle whether each global candidate is maximally frequent or not. If a global candidate is frequent, we put it into FrequentSet only if none of its supersets is already in that set. On the other hand, i f  a global candidate is infrequent. we put it into InfrequentSet only if none of its subsets is already in that set. For example, if {A, B, G, H }  is infrequent but A ,  H }  is already in InfrequentSet, we do not insert it into InfrequentSer, because any superset of { A ,  B,  G, H }  will be also pruned by {A,H} when the subset-infrequency based pruning is applied If a global candidate k-itemhet is identified as infrequent we split it into k \(k  - 1 as new candidates. However, some of them may not be a valid candidate for the next global pass if it appears in In frequentSet or has a subset in it. In that case, we need to split the invalid candidate into its largest proper subsets. For ex ample, if {A,  B, C, D }  is infrequent and its subset {A, D is in InfrequentSer, we will continue the splitting until we 2004 IEEE International Symposium on Cluster Computing and the Grid get the following new candidates: { A ,  B, C}, {B ,  C,  D A,B},  \( A ,  C}, { B , D }  and {C,D}.  In practice, these two pruning techniques can make the global candidate set shrink drastically for each pass 3.2.3 Cube-based Communication between Processors To perform the communication between processing nodes efficiently, we impose a logical binary n-cube structure on the processing nodes. Then, the nodes can exchange and merge the local count information through increasingly higher dimensional links between them [4]. In the n-cube there are 2n nodes, and each node has n-bit binary address Also, each node has n neighbor nodes which are directly linked to that node through differcnt dimensional links. For example, there are 8 nodes in a 3-cube structure, and node 0 0 0 001 010 100 through a I st-dimensional link, a 2nd-dimensional link, and a 3rd-dimensional link, respectively. Thus, in the n-cube all the nodes can exchange and merge their local counts in 


all the nodes can exchange and merge their local counts in T I  steps, through each of the n different dimensional links When n = 3, the three exchange and merge steps are step 1: node \( 1 where denotes a don't-care bit step 2: node \( 0 1 step 3: node \(0 1 O  3.3 Pseudo-code of DMM As we assume a homogeneous distributed computing environment where all the processing nodes are the same we just give the pseudo-code of the DMM algorithm running on a node P Local Mining Phase P" applies the sequential Max-Miner algorithm on D' and stores local MFIS into LM n = log, N :  I* N processing nodes are used for mining *I for \( j  = 1;j 5 n;j P' exchange and merge LM' with that of a neighbor node through the jth-dimensional link and the result is stored in LiM GC FrequenrSer= 6 foreach local MFI x in LM if the estimated global support o fx  is above the minimum support superset of x else put x into.GC1 then put x into FrequenrSer unless it contains a I apply the suprrset-frequency based pruning on GCI  504 Global Mining Phase InfrequenrSer= 4 global pass k ,  for k 2 1 while \(GCk # 4 Pi scans D' to count the candidates in GCk for \( j  = I ; j  5 n ; j P' exchange and merge the local counts of GCk members with a neighbor node through the jth-dimensional link foreach candidate x in GCx if the support of x is above the minimum support then put x into FrequentSer unless it contains a superset of x subset of x else put I into InfreqrcenrSer unless it contains a  foreach candidate inserted into InfrequenrSer in the current pass split the infrequent candidate into new candidates i.e., its largest subsets apply the subset-infrequency based pruning on these new candidates those candidates pruned by the subset-infrequency based pruning are put back into InfmquenrSer this process will continue until no new candidate either appears in InfrequenrSer or has any subset in i t 1 apply the superset-frequency based pruning on the new candidates remove those candidates which appear in Frequentset or put the new candidates that passed the two pruning operations into GCI,+~ for the next global pass k + I k have any superset in  it *I 1 GM = FrequentSer I* GM is the set of all maximal frequent itemsets 4 Performance Evaluation Our test platform is an &amp;node Linux cluster system 


Our test platform is an &amp;node Linux cluster system where nodes are connected by a Fast Ethernet switch. Each node has a 800 Mhz Pentium processor, 512 MB memory and a 40 GB disk drive. The processes are communicating using the MPI \(Message Passing Interface The databases used in our experiments are synthetic sales transaction databases generated as in [I]. All parameters used for generating databases are described in Table 1. For all databases, c = 0.5, m = 0.5, U = 0.1, ILI = 2000 and N I  = 1000. Table 2 lists all databases used in our perfor mance evaluation experiments. The size of each database is about 360 MB. When running the parallel algorithm on a database, we need to partition it into local databases. To balance the size of the local databases, each transaction is randomly allocated to a node 2004 IEEE Interna6onal Symposium on Cluster Computing and the Grid ID1 TI 111 ILI N I c m D In order to compare the performance of DMM and Count Distribution, we also implemented Count Distribution on the same platform Number of vansactiom in the database Average size of the transactions Average size of the maximal potentially frequent itemxu Numkraf maximal potentially frequent itemels Number of items Comlaliun level Mean of the comption level Variance of the camption level Table 1. Synthetic database parameters Table 2. Databases 4.1 Improvement of DMM over Count Distribu tion We ran both DMM and Count Distribution on different synthetic databases with different minsup values. If we de tine TCD and TDM,U as the execution times of CD and DMM, respectively, then the speedup of DMM over CD is TCD/TDMA,. In Table 3, the speedup of DMM is shown for different databases listed in the first column and for dif ferent values of minsup listed in the first row. In these ex periments, all 8 nodes in our cluster system were used Table 3. Speedup of DMM over CD \(8-node case As minsup decreases, DMM begins to show more and more improvement in our tests. As shown in Table 3, when the 111 value of the database is large, such as 8 or IO, even if minsup is as high as 0.58, DMM is faster than Count Dis tribution with a speedup above 2.5. It is because a large 11 value results in large frequent itemsets \(i.e., long patterns which benefits DMM. If minsup is less than 0.25%, DMM outperforms Count Distribution considerably DMM uses the local and global mining phases to re duce the overall synchronization and communication re quirement, but the global mining phase still needs several passes over the database and incurs some extra computation overhead. In our cluster system, since the communication speed between nodes is high, the benefit of reduced syn chronization and communication overhead is not enough to offset the effect of extra passes during the global mining phase. However, this feature of DMM may be attractive to some distributed systems where the communication cost is relatively high 4.2 Synchronization Requirement of DMM and Count Distribution We compared the number of synchronizations needed between processing nodes in DMM and Count Distribu 


between processing nodes in DMM and Count Distribu tion. In DMM, the local mining phase needs only one syn chronization. So, the total number of synchronizations is the number of passes needed in global mining phase plus one. Table 4 shows the comparison results. Here, we de fine SDMM and SCD as the numbers of synchronizations needed in DMM and CD, respectively. The first row of the table lists various values of minsup, and the first column lists the names of databases. The values in each entry of the table represents SD,MM :SCD Table 4. Comoarison of svnchronization re quirement When minsup is high, DMM is comparable to or a lit tle bit slower than Count Distribution. We also ran Apriori and Max-Miner for these cases, and found that Max-Miner doesn  t show much improvement over Apriori, either. That is because the high minsup limits the number of frequent itemsets and the length of those frequent itemsets. Thus the effect of look-ahead technique used by Max-Miner is not clearly shown, and naturally DMM has the same result DMM needed just two times of synchronization in the best cases. In other cases, the number of synchronizations needed for DMM was also much smaller than that of CD mainly because DMM requires only one synchronization during the local mining phase 505 2004 iEEE International Symposium on Cluster Computing and the Grid 4.3 Communication Requirement of DMM and Count Distribution In Count Distribution, all nodes have the same set of candidate itemsets in each pass. So, every node needs to exchange the same amount of count information with oth ers. In DMM, nodes need to exchange two types of data candidates and their counts. For the merging of local MFIs to construct the first global candidate set, each node per forms log, N send and log, N receive operations when N processing nodes are used. Since the set of local MFIs in one node may he different from those in other nodes, the amount of data each node sends or receives varies at each communication step. In each global pass, all nodes have the same global candidate set and exchange the same count in formation in log, N steps. To make it simple, we computed the average amount of data each node sends and receives during the whole mining Let  s consider the difference in the meaning of candi dates of the two algorithms as the number of candidates determines how much data need to he exchanged between processing nodes during the mining. In Count Distribution its candidates are the potential frequent itemsets generated as in Apriori. In DMM, after the local mining phase, can didates involved in the communication are just the potential maximal frequent itemsets; i.e., all local MFIs and some of their subsets that are not global MFIs. Compared with the set ofcandidates in Count Distribution, the set of candidates in DMM is very small. Thus, DMM requires much less communication than Count Distribution even though DMM needs to merge the candidates first \(after the local mining phase during the global mining phase When the minsup is very low, Count Distribution tends to discover a large number of short frequent patterns, so that there are a large number of candidates in early passes This results in a very high communication overhead be tween nodes. On the other hand, in  DMM, the increase in the number of short frequent patterns usually results in a small change in the number of local MFIs. Thus, even though low minsup value may affect the local mining phase of DMM, it has a relatively small impact on the communi cation overhead during the global mining phase. Therefore as the minsup decreases, DMM performs better than Count Distribution in terms of communication requirement 


Distribution in terms of communication requirement We implemented two versions of Count Distribution one is using the n-cube communication, and the other is using the all-to-all communication. We compared the av erage amount of data each node communicates with oth ers when we executed DMM and Count Distribution on the T30J08D2954K database with various values of minsup and the results are shown in Figure 4 As shown in Figure 4, the communication overhead of 500 450 400 a 350 B 300 g 200 250 150 s d 10.3 50 0 1 075 0 5  0 4  0 3  025 0 2  015 0 1 Minimum Suppon Figure 4. Comparison of communication re quirement DMM is much lower than that of Count Distribution. Even though DMM needs to cxchange candidates at the end of the local mining phase and some candidates may consist of many items, the total amount ofdata to he transferred is still relatively small, because Count Distribution must exchange the count information for much larger candidate sets. Com pared with Count Distribution using the all-to-all commu nication scheme, DMM demonstrates a big improvement in communication for all cases. Here, we  d like to emphasize that the advantage of DMM in communication requirement comes from its much smaller size of candidate sets and the n-cube communication scheme 4.4 Sensitivity Analysis of DMM In this section, we analyze the characteristics of the DMM algorithm in terms of speedup and sizeup. All tests were performed with a minsup of 0.25 4.4.1 Speedup We measured the speedup of DMM as the number of pro cessing nodes was increased while the database size re mained the same. For the databases listed in Table 2, we kept the same database size of 360 MB, but the database was partitioned into 2,  4, and 8 parts when the number of nodes were 2,4, and 8, respectively Figure 5 shows the execution time of DMM on the 2 node, 4-node, and 8-node systems. To demonstrate the speedup, we also ran the sequential Max-Miner for each database on a single node. As the number of nodes was doubled, the execution time of DMM was reduced by about 40% to 50%. Even though DMM may not achieve the linear speedup, it still shows a good speedup When DMM is executed on the T40110D2256K database using 2 nodes, its execution time is small. This is 506 2004 IEEE International Symposium on Cluster Computing and the Grid 16000 4000 3 12000 I ; iwoo E P 2 6000 w 4wo 2000 5 8000 8 0.7 because, when the number of nodes is small, the datadistri bution characteristic of each data partition is very similar to that of the whole database. So, after the local mining phase the initial global candidate set would be similar to the set of 


the initial global candidate set would be similar to the set of global MFIs. As a result, during the global mining phase the communication and synchronization overhead is low  0 2 4 6 8 1 0 Number of Nodes Figure 5. Speedup of DMM 4.4.2 Sizeup For the sizeup test, we fixed the system to the 8-node con figuration, and distributed each database listed in Table 2 to the 8 nodes. Then, we increased the local database sire at each node from 45 MB to 215 MB by duplicating the initial database partition allocated to the node. Thus, the data distribution characteristics remained the same as the local database size was increased. This is different from the speedup test, where the database repartitioning was per formed when the number of nodes was increased. The per formance of DMM is affected by the database repartitioning to some extent, although it is usually very small. During the sizeup test, the local mining result of DMM is not changed at all at each node The results shown in Figure 6 indicate that DMM has a very good sizeup property. Since increasing the size of local database did not affect the local mining result of DMM at each node, the total execution time increased just due to more disk U 0  and computation cost which scaled almost linearly with sizeup 5 Conclusions In this paper, we proposed a new parallel maximal fre quent itemset \(MFI Max-Miner \(DMM tems. DMM is a parallel version of Max-Miner, and it re quires low synchronization and communication overhead compared to other parallel algorithms. In DMM, Max Miner is applied on each database partition during the lo 0 45 90 135 180 225 270 Amwnt of Data per Node \(ME Figure 6. Sizeup of DMM cal mining phase. Only one synchronization is needed at thc end of this phase to construct thc initial global candi date set. In the global mining phase, a top-down search is performed on the candidate set, and a prefix tree is used to count the candidates with different length efficiently. Usu ally, just a few passes are needed to find all global maximal frequent itemsets. Thus, DMM largely reduces the number of synchronizations required between processing nodes Compared with Count Distribution, DMM shows a great improvement when some frequent itemscts are large \(i.e long patterns employed by DMM for efficient communication between nodes; and global support estimation, subset-infrequency based pruning, and superset-frequency based pruning are used to reduce the size of global candidate set. DMM has very good speedup and sizeup properties References I ]  R. Agrawal and R. Srikant  FdSt Algorithms for Mining As sociation Rules  Pmc. o f f h e  ZOrh VLDB Conf, 1994, pp 487499 2] R. Agrawal and I. C. Shafer  Parallel Mining of Association Rules  IEEE Trans. on Knowledge and Dura Engineering Vol. 8, No. 6, 1996, pp. 962-969 3] R. I. Bayardo  Efficient Mining Long Patlems from Databases  Proc. ofrhe ACM SIGMOD Inf  l Conf on Man ogemenr ofDara, 1998, pp. 85-91 4] S.  M. Chung and J. Yang  A Parallel Distributive Join Al gorithm for Cube-Connected Multiprocessors  IEEE Trans on Parallel and Disrribured Systems, Vol. 7, No. 2, 1996, pp 127-137 51 M. Snir, S. Otto. S. Huss-Lederman, D. Walker, and J. Don gana, MPI: The Complete Reference, The MIT Press, 1996 


gana, MPI: The Complete Reference, The MIT Press, 1996 6] R. Rymon  Search through Systematic Set Enumeralion   Pmc. of3rd Inr  l Con$ on Principles of Knowledge Repre sentation and Reasoning, 1992, pp. 539-550 507 pre></body></html 


sketch-index in answering aggregate queries. Then Section 5.2 studies the effect of approximating spatiotemporal data, while Section 5.3 presents preliminary results for mining association rules 5.1 Performance of sketch-indexes Due to the lack of real spatio-temporal datasets we generate synthetic data in a way similar to [SJLL00 TPS03] aiming at simulation of air traffic. We first adopt a real spatial dataset [Tiger] that contains 10k 2D points representing locations in the Long Beach county \(the data space is normalized to unit length on each dimension These points serve as the  airbases  At the initial timestamp 0, we generate 100k air planes, such that each plane \(i uniformly generated in [200,300], \(ii, iii destination that are two random different airbases, and iv  the velocity direction is determined by the orientation of the line segment connecting its source and destination airbases move continually according to their velocities. Once a plane reaches its destination, it flies towards another randomly selected also uniform in [0.02, 0.04 reports to its nearest airbase, or specifically, the database consists of tuples in the form &lt;time t, airbase b, plane p passenger # a&gt;, specifying that plane p with a passengers is closest to base b at time t A spatio-temporal count/sum query has two parameters the length qrlen of its query \(square number qtlen of timestamps covered by its interval. The actual extent of the window \(interval uniformly in the data space \(history, i.e., timestamps 0,100 air planes that report to airbases in qr during qt, while a sum query returns the sum of these planes  passengers. A workload consists of 100 queries with the same parameters qrlen and qtlen The disk page size is set to 1k in all cases \(the relatively small page size simulates situations where the database is much more voluminous specialized method for distinct spatio-temporal aggregation, we compare the sketch-index to the following relational approach that can be implemented in a DBMS. Specifically, we index the 4-tuple table lt;t,b,p,a&gt; using a B-tree on the time t column. Given a count query \(with window qr and interval qt SELECT distinct p FROM &lt;t,b,p,a&gt WHERE t?qt &amp; b contained in qr The performance of each method is measured as the average number of page accesses \(per query processing a workload. For the sketch-index, we also report the average \(relative Specifically, let acti and esti be the actual and estimated results of the i-th query in the workload; then the error equals \(1/100 set the number of bits in each sketch to 24, and vary the number of sketches The first experiment evaluates the space consumption Figure 5.1 shows the sketch index size as a function of the number of sketches used \(count- and sum-indexes have the same results more sketches are included, but is usually considerably smaller than the database size \(e.g., for 16 signatures, the size is only 40% the database size 0 20 40 60 80 


80 100 120 140 160 8 16 32 number of sketches size \(mega bytes database size Figure 5.1: Size comparison Next we demonstrate the superiority of the proposed sketch-pruning query algorithm, with respect to the na  ve one that applies only spatio-temporal predicates. Figure 5.2a illustrates the costs of both algorithms for countworkloads with qtlen=10 and various qrlen \(the index used in this case has 16 sketches also illustrate the performance of the relational method which, however, is clearly incomparable \(for qrlen?0.1, it is worse by an order of magnitude we omit this technique Sketch-pruning always outperforms na  ve \(e.g., eventually two times faster for qrlen=0.25 increases with qrlen, since queries returning larger results tend to set bits in the result sketch more quickly, thus enhancing the power of Heuristics 3.1 and 3.2. In Figure 5.2b, we compare the two methods by fixing qrlen to 0.15 and varying qtlen. Similar to the findings of [PTKZ02]4 both algorithms demonstrate  step-wise  growths in their costs, while sketch-pruning is again significantly faster The experiments with sum-workloads lead to the same observations, and therefore we evaluate sketch-indexes using sketch-pruning in the rest of the experiments 4 As explained in [PTKZ02], query processing accesses at most two paths from the root to the leaf level of each B-tree regardless the length of the query interval Proceedings of the 20th International Conference on Data Engineering \(ICDE  04 1063-6382/04 $ 20.00  2004 IEEE sketch-pruning naive relational 0 100 200 300 400 500 600 700 800 900 0.05 0.1 0.15 0.2 0.25 number of disk accesses query rectangle length 300 0 100 200 400 500 600 1 5 10 15 20 number of disk accesses query interval length a qtlen=10 b qrlen=0.15 Figure 5.2: Superiority of sketch-pruning \(count As discussed in Section 2, a large number of sketches reduces the variance in the resulting estimate. To verify this, Figure 5.3a plots the count-workload error of indexes 


using 8-, 16-, and 32- sketches, as a function of qrlen qtlen=10 error \(below 10 it increases slowly with qrlen used, however, the error rate is much higher \(up to 30 and has serious fluctuation, indicating the prediction is not robust. The performance of 16-sketch is in between these two extremes, or specifically, its accuracy is reasonably high \(average error around 15 much less fluctuation than 8-sketch 32-sketch 16-sketch 8-sketch relative error 0 5 10 15 20 25 30 35 0.05 0.1 0.15 0.2 0.25 query rectangle length relative error 0 5 10 15 20 25 30 35 1 5 10 15 20 query interval length a qtlen=10, count b qrlen=0.15, count relative error query rectangle length 0 5 10 15 20 25 0.05 0.1 0.15 0.2 0.25 relative error query interval length 0 5 10 15 20 25 30 1 5 10 15 20 c qtlen=10, sum d qrlen=0.15, sum Figure 5.3: Accuracy of the approximate results The same phenomena are confirmed in Figures 5.3b where we fix qrlen to 0.15 and vary qtlen 5.3d \(results for sum-workloads number of sketches improves the estimation accuracy, it also leads to higher space requirements \(as shown in Figure 5.1 Figures 5.4a and 5.4b show the number of disk accesses for the settings of Figures 5.3a and 5.3b. All indexes have almost the same behavior, while the 32-sketch is clearly more expensive than the other two indexes. The interesting observation is that 8- and 16-sketches have 


interesting observation is that 8- and 16-sketches have almost the same overhead due to the similar heights of their B-trees. Since the diagrams for sum-workloads illustrate \(almost avoid redundancy 32-sketch 16-sketch 8-sketch number of disk accesses query rectangle length 0 50 100 150 200 250 300 350 400 0.05 0.1 0.15 0.2 0.25 number of disk accesses query interval length 0 50 100 150 200 250 300 350 1 5 10 15 20 a qtlen=10 b qrlen=0.15 Figure 5.4: Costs of indexes with various signatures Summary: The sketch index constitutes an effective method for approximate spatio-temporal \(distinct aggregate processing. Particularly, the best tradeoff between space, query time, and estimation accuracy obtained by 16 sketches, which leads to size around 40 the database, fast response time \(an order of magnitude faster than the relational method average relative error 5.2 Approximating spatio-temporal data We proceed to study the efficiency of using sketches to approximate spatio-temporal data \(proposed in Section 4.1 as in the last section, except that at each timestamp all airplanes report their locations to a central server \(instead of their respective nearest bases maintains a table in the form &lt;time t, plane p, x, y&gt;, where x,y with parameters qrlen and qtlen distinct planes satisfying the spatial and temporal conditions. For comparison, we index the table using a 3D R*-tree on the columns time, x, and y. Given a query, this tree facilitates the retrieval of all qualifying tuples, after which a post-processing step is performed to obtain the Proceedings of the 20th International Conference on Data Engineering \(ICDE  04 1063-6382/04 $ 20.00  2004 IEEE number of distinct planes \(in the sequel, we refer to this method as 3DR method introduces a regular res  res grid of the data space, where the resolution res is a parameter. We adopt 16 sketches because, as mentioned earlier, this number gives the best overall performance Figure 5.5 compares the sizes of the resulting sketch indexes \(obtained with resolutions res=25, 50, 100 the database size. In all cases, we achieve high compression rate \(e.g., the rate is 25% for res=25 evaluate the query efficiency, we first set the resolution to the median value 50, and use the sketch index to answer workloads with various qrlen \(qtlen=10 


workloads with various qrlen \(qtlen=10 size \(mega bytes database size 0 20 40 60 80 100 120 140 160 25 50 100 resolution Figure 5.5: Size reduction Figure 5.6a shows the query costs \(together with the error in each case method. The sketch index is faster than 3DR by an order of magnitude \(note that the vertical axis is in logarithmic scale around 15% error observations using workloads with different qtlen Finally, we examine the effect of resolution res using a workload with qrlen=0.15 and qtlen=10. As shown in Figure 5.6c, larger res incurs higher query overhead, but improves the estimation accuracy Summary: The proposed sketch method can be used to efficiently approximate spatio-temporal data for aggregate processing. It consumes significantly smaller space, and answers a query almost in real-time with low error 3D Rsketch number of disk accesses query rectangle length 1 10 100 1k 10k 0.05 0.1 0.15 0.2 0.25 16 14% 15 15% 13 relative error number of disk accesses query interval length 1 10 100 1k 10k 1 5 10 15 20 16 15% 15% 12% 11 relative error a qtlen=10, res=25 b qrlen=0.15, res=25 0 500 1000 1500 2000 2500 25 50 100 number of disk accesses resolution 20% 15% 14 relative error c qrlen=0.15, qtlen=10 


c qrlen=0.15, qtlen=10 Figure 5.6: Query efficiency \(costs and error 5.3 Mining association rules To evaluate the proposed algorithm for mining spatiotemporal association rules, we first artificially formulate 1000 association rules in the form \(r1,T,90 with 90% confidence i randomly picked from 10k ones, \(ii in at most one rule, and \(iii Then, at each of the following 100 timestamps, we assign 100k objects to the 10k regions following these rules. We execute our algorithms \(using 16 sketches these rules, and measure \(i  correct  rules divided by the total number of discovered rules, and \(ii successfully mined Figures 5.7a and 5.7b illustrate the precision and recall as a function of T respectively. Our algorithm has good precision \(close to 90 majority of the rules discovered are correct. The recall however, is relatively low for short T, but gradually increases \(90% for T=25 evaluated in the previous sections, the estimation error decreases as the query result becomes larger \(i.e., the case for higher T 78 80 82 84 86 88 90 92 94 96 5 10 2015 25 precision HT 78 80 82 84 86 88 90 92 94 96 5 10 2015 25 recall HT a b Figure 5.7: Efficiency of the mining algorithm Summary: The preliminary results justify the usefulness of our mining algorithm, whose efficiency improves as T increases Proceedings of the 20th International Conference on Data Engineering \(ICDE  04 1063-6382/04 $ 20.00  2004 IEEE 6. Conclusions While efficient aggregation is the objective of most spatio-temporal applications in practice, the existing solutions either incur prohibitive space consumption and query time, or are not able to return useful aggregate results due to the distinct counting problem. In this paper we propose the sketch index that integrates traditional approximate counting techniques with spatio-temporal indexes. Sketch indexes use a highly optimized query algorithm resulting in both smaller database size and faster query time. Our experiments show that while a sketch index consumes only a fraction of the space required for a conventional database, it can process 


required for a conventional database, it can process queries an order of magnitude faster with average relative error less than 15 While we chose to use FM sketches, our methodology can leverage any sketches allowing union operations Comparing the efficiency of different sketches constitutes a direction for future work, as well as further investigation of more sophisticated algorithms for mining association rules. For example, heuristics similar to those used for searching sketch indexes may be applied to improve the brute-force implementation ACKNOWLEDGEMENTS Yufei Tao and Dimitris Papadias were supported by grant HKUST 6197/02E from Hong Kong RGC. George Kollios, Jeffrey Considine and were Feifei Li supported by NSF CAREER IIS-0133825 and NSF IIS-0308213 grants References BKSS90] Beckmann, N., Kriegel, H., Schneider, R Seeger, B. The R*-tree: An Efficient and Robust Access Method for Points and Rectangles. SIGMOD, 1990 CDD+01] Chaudhuri, S., Das, G., Datar, M., Motwani R., Narasayya, V. Overcoming Limitations of Sampling for Aggregation Queries. ICDE 2001 CLKB04] Jeffrey Considine, Feifei Li, George Kollios John Byers. Approximate aggregation techniques for sensor databases. ICDE, 2004 CR94] Chen, C., Roussopoulos, N. Adaptive Selectivity Estimation Using Query Feedback. SIGMOD, 1994 FM85] Flajolet, P., Martin, G. Probabilistic Counting Algorithms for Data Base Applications JCSS, 32\(2 G84] Guttman, A. R-Trees: A Dynamic Index Structure for Spatial Searching. SIGMOD 1984 GAA03] Govindarajan, S., Agarwal, P., Arge, L. CRBTree: An Efficient Indexing Scheme for Range Aggregate Queries. ICDT, 2003 GGR03] Ganguly, S., Garofalakis, M., Rastogi, R Processing Set Expressions Over Continuous Update Streams. SIGMOD, 2003 HHW97] Hellerstein, J., Haas, P., Wang, H. Online Aggregation. SIGMOD, 1997 JL99] Jurgens, M., Lenz, H. PISA: Performance Models for Index Structures with and without Aggregated Data. SSDBM, 1999 LM01] Lazaridis, I., Mehrotra, S. Progressive Approximate Aggregate Queries with a Multi-Resolution Tree Structure. SIGMOD 2001 PGF02] Palmer, C., Gibbons, P., Faloutsos, C. ANF A Fast and Scalable Tool for Data Mining in Massive Graphs. SIGKDD, 2002 PKZT01] Papadias,  D., Kalnis, P.,  Zhang, J., Tao, Y Efficient OLAP Operations in Spatial Data Warehouses. SSTD, 2001 PTKZ02] Papadias, D., Tao, Y., Kalnis, P., Zhang, J Indexing Spatio-Temporal Data Warehouses ICDE, 2002 SJLL00] Saltenis, S., Jensen, C., Leutenegger, S Lopez, M.A. Indexing the Positions of Continuously Moving Objects. SIGMOD 2000 SRF87] Sellis, T., Roussopoulos, N., Faloutsos, C The R+-tree: A Dynamic Index for MultiDimensional Objects. VLDB, 1987 TGIK02] Thaper, N., Guha, S., Indyk, P., Koudas, N Dynamic Multidimensional Histograms 


SIGMOD, 2002 Tiger] www.census.gov/geo/www/tiger TPS03] Tao, Y., Papadias, D., Sun, J. The TPR*Tree: An Optimized Spatio-Temporal Access Method for Predictive Queries. VLDB, 2003 TPZ02] Tao, Y., Papadias, D., Zhang, J. Aggregate Processing of Planar Points. EDBT, 2002 TSP03] Tao, Y., Sun, J., Papadias, D. Analysis of Predictive Spatio-Temporal Queries. TODS 28\(4 ZMT+01] Zhang, D., Markowetz, A., Tsotras, V Gunopulos, D., Seeger, B. Efficient Computation of Temporal Aggregates with Range Predicates. PODS, 2001 ZTG02] Zhang, D., Tsotras, V., Gunopulos, D Efficient Aggregation over Objects with Extent PODS, 2002 Proceedings of the 20th International Conference on Data Engineering \(ICDE  04 1063-6382/04 $ 20.00  2004 IEEE pre></body></html 


