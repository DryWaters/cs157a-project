978-1-4673-1813-6/13/$31.00 ©2013 IEEE \n 1 \nThe Value of SysML Modeling During System Operations: \nA Case Study \n \n \nAbstract—System models are often touted as engineering tools \nthat promote better understanding of systems, but these \nmodels are typically created during system design.  The \nGround Data System \(GDS the Dawn spacecraft took \non a case study to see if benefits could be achieved by starting a \nmodel of a system already in operations. \nThis paper focuses on the four steps the team undertook in \nmodeling the Dawn GDS: defining a model structure, \npopulating model elements, verifying that the model \nrepresented reality and using the model to answer system-level \nquestions and simplify day-to-day tasks.  Throughout this \npaper the team outlines our thought processes and the system \ninsights the model provided.   \nTABLE OF CONTENTS \n1 INTRODUCTION ................................................. 1\t n2. ESTABLISHING A MODEL .................................. 2\t n3. MANAGING COMPLEXITY ................................. 5\t n4. COMPLEX DATA FLOWS ................................... 7\t n5. FORCING CLEAR THINKING ............................. 8\t n6. MODELING’S ADVANTAGES OVER \nTRADITIONAL APPROACHES ................................ 8\t n7. CONCLUSION ..................................................... 9\t nACKNOWLEDGEMENTS ....................................... 10\t nREFERENCES ....................................................... 10\t nBIOGRAPHIES ...................................................... 10\t n \n1. INTRODUCTION \nThe design of a GDS used to support spacecraft mission \noperations is never truly finished.  While its basic \nfunctionality may satisfy the customers’ needs initially, the \nsystem will continue to evolve.  Even during the operational \nphase, a project’s GDS will continue to be shaped as nautomation of data processing tools affects system \nperformance, cyber security concerns drive adoption of new \noperating system patches and upgrades, and personnel \nchanges occur both in the people using and the people \nmaintaining the system. \nThe GDS for JPL’s Dawn spacecraft is no exception.  \nPlanning for a simultaneous upgrade of the Dawn GDS \nhardware and operating system software initially proved to \nbe a complex task, especially because those responsible for \nthe original design were not involved in the upgrade.     \nIn an attempt to manage the complexity of the upgrade and \ngain further insight into how the original system worked, the \nnew GDS team undertook a case study to model relevant \npieces of the system.  The team chose to use the Systems \nModeling Language \(SysML  applications.  \nGoals of the model included: managing complexity, \nexplaining complex data flows, and forcing clear and logical \nthinking about the system design. \nWhile modeling methodologies like the Object-Oriented nSystems Engineering Method \(OOSEM  the \nDawn case study was different in that it used an \nincremental, grass-roots approach that was very limited and \nselective in scope. This case study was undertaken more \nthan two years into mission operations and the project had \nneither the resources nor a compelling need to model the \ncomplete system from beginning to end Instead, the GDS \nteam focused our effort on capturing pieces of the design we \nfelt were most useful or important to specify during the \ncourse of the upgrade and using SysML to explicitly \ncommunicate this information. \nAlthough the model began with a limited scope, its power to \neasily answer complex system-level questions quickly \nbecame apparent.  Scripts were written which queried the \nmodel and linked previously disparate system properties \nwith great success. As more system properties were linked, \nmore questions were answered.  This in turn prompted \nfurther questions, so more information was added.  \nIncrementally, the model grew.   \nSteps were taken to verify that the model represented \nreality.  The model was used to document changes in the \nsystem as the system evolved.  The model informed design \nchanges by answering questions like If parts of the system \ngo down, which machines will be affected?  Which \nmachines could be backups for each other?  What is the \noperating cost for a given hardware configuration? \nThis paper will address the goals of the modeling task, make \na judgment on how successfully they were achieved, and \nhighlight some new insights into the system that resulted \nfrom the modeling process.   \nDue to the sensitive nature of the data stored in the model \nexample diagrams were created for use in this paper.  They \nare representative examples of the diagrams used by the \nChelsea Dutenhoffer \n Chelsea.Dutenhoffer@jpl.nasa.gov \n818-354-4811 \nJoseph Tirona \n Joseph.F.Tirona@jpl.nasa.gov \n818-393-8203 \nJet Propulsion Laboratory, California Institute of Technology n4800 Oak Grove Dr.  \nPasadena, CA 91109 \n  2 \nDawn GDS team but were created specifically for this \npaper n2. ESTABLISHING A MODEL  \nDefining a Model Structure for Software \nThe first step in establishing a model was to carefully design \na framework for capturing information in a consistent way.    \nSince the model’s purpose was to manage complexity \nduring GDS hardware and software upgrades, the logical \nplace to start was by 


defining a “GDS software delivery” in \nSysML.  A “GDS software delivery” already had an \naccepted definition before the modeling task began: an \naggregation of one or more specific versions of software \nelements from a core set of available elements, packaged \nand tested to be deployed together.   \nA metamodel lays out the hierarchical and compositional \nstructure of a model.  It defines basic relationships between \nelements of given types.  The team used stereotypes to \ndefine the system’s hierarchy.  A stereotype is defined as a nmethod of “[extending] an existing metaclass, and … \n[enabling] the use of platform or domain specific nterminology or notation in place of, or in addition to, the \nones used for the extended metaclass”. [4 nFigure 1 shows the software metamodel for this case study: \n \nFigure 1 - Software Metamodel \nFigure 1 shows that a Software_Delivery stereotype is an \naggregation of Software elements.  Slots for stereotype \nproperties are also shown.  For example, a \nSoftware_Delivery has a Delivery Date, a GDS Delivery \nVersion \(which represents the version number the team \nassigns to the whole aggregation which is related to the Operating System that the delivery is \nbuilt for a \nVersion property. No specific software names have been \ndefined in this diagram, the metamodel view simply sets up \nbasic model elements and relationships for more specific \nuse later. \nThe next step was to use the metamodel’s structure to model \none generic GDS delivery containing all possible software \nelements, as shown in Figure 2.  Specific names of software \nelements have now been included; in this case, the names \nare SoftwareA”, “SoftwareB”, and “SoftwareC”. \n \nFigure 2 – Generic GDS Delivery \nThe elements in Figure 2 build upon the metamodel shown \nin Figure 1.  For example, Generic_Software_Delivery is a \nSysML block of stereotype Software_Delivery, so it will \nhave all the properties and relationships that the \nSoftware_Delivery stereotype has.  Likewise, SoftwareA, \nSoftwareB, and SoftwareC are blocks of stereotype \nSoftware and will each have a Version number property.  \nFigure 2 shows the next layer in specification after the \nmetamodel and contains a superset of all available software.   \nThe name on each arrow in Figure 2 represents a SysML \npart property of the Generic_Software_Delivery.  For \nexample, SoftwareA is a part property of nGeneric_Software_Delivery, meaning that some version of \nSoftwareA is part of the delivery.  No version identifiers \nhave yet been specified either for the complete software \ndelivery or for any Software element’s version. \nWith the definition of a generic GDS software delivery \nestablished, the team then added another layer to the system \nspecification by representing a specific software delivery. \nThe Specific_Software_Delivery_V1” shown in Figure 3 \n  3 \ninherits all of the generic pieces of software that make up \nthe “Generic Software Delivery” via the generalization \nrelationship.   \n \nFigure 3 - Specific Software Delivery Inheritance From \nGeneric Software Delivery \nFigure 4 illustrates the use of SysML’s redefinition concept.    \nRedefinition is defined as a “change [in the] definition of an \nexisting feature and was used to differentiate new GDS \ndeliveries and software versions from their previous/generic ncounterparts shown in Figure 2 and Figure 3. [3]  For \nexample, in Figure 4 SoftwareB_V1 redefines Software_B nand is a specific part of the delivery \nSpecific_Software_Delivery_V1. The “V1” designation \nadded to Specific Software Delivery” is the version \nnumber for this aggregation of software elements. \n \nFigure 4 Specific GDS Delivery \nIt then follows that each specific software delivery would \ninherit generic software components from “Generic \nSoftware Delivery”.  Although the software delivery shown \nin Figure 4 includes one version of each allowable software \nelement, any given delivery is not required to contain all \nallowable elements.  This was important because the team \ndelivers far more partial “point” deliveries than full ndeliveries. \nNew versions of each software element are modeled as \nseparate blocks from any other element including prior \nversions of the same piece of software.  This is due to the \nnature of the software included in GDS deliveries.  Some \nsoftware organizations deliver their elements as complete \ninstalls with each version, but other organizations deliver \nonly overlays, which are installed on top of older versions \nof the same software.  A project could use versions 1 and 3 \nof a software element and choose never to install version 2, \nso we needed a way to represent multiple versions of the \nsame software layered on top of each other.  Redefinition of \nproperties provided the team with the freedom to more \naccurately capture the system nDefining a Model Structure for Hardware \nWith the software modeling structure established, the next \nstep was to define a metamodel for the GDS hardware \nelements.  This metamodel is shown in Figure 5: \n \nFigure 5 Hardware Metamodel \nLike the software metamodel discussed in the previous \nsection, the hardware metamodel describes the building \nblocks of the system and relationships between these \nelements. It also allowed the team to categorize and \n  4 \nhierarchically group sets of properties that were useful to \ntrack for different hardware element types.   \nFor example, all NASA property is assigned a property \nnumber, so the Hardware stereotype has a slot for a value \ncalled “NASA property number” as shown in Figure 5.  The \nHardware stereotype is specialized into Network Device and \nNon-Network Device, each of these stereotypes will inherit 


nthe property number slot from its parent. Then Network \nDevice is further specialized into Physical Machine and \nVirtual Machine, each of these stereotypes will inherit the \nproperty number slot as well. \nNote that hardware metamodel shown in Figure 5 includes \nthe same Software_Delivery stereotype from Figure 1, \nwhich allows mapping between hardware elements and the \nsoftware installed on them.  The Network Device stereotype nhas a slot for a Software Version; this Software Version is \nthen set to the name of a GDS delivery.  For more \ninformation see the “Linking Software and Hardware \nElements” section below. \nThe hierarchy shown in Figure 5 was the result of careful \nthinking and the progression of this hierarchy shows the \nmodelers progression in their understanding of the GDS.  \nAt the beginning of the modeling task, the team had already nbeen supporting the operation of this hardware for more \nthan a year and had developed a mental model of it over \ntime.  Due to the nature of the required support, the team \nwas used to thinking primarily about where the hardware \nwas located.  It makes sense then that initial versions of this \nhierarchy were location-based separating machines that \nwere physically at JPL from those in use at remote partner \nsites.  \nAs the team came to better understand the system, we began \nto abstract it. At this stage the team changed the hardware nmetamodel hierarchy to be venue-based by separating \ndevelopment, test, and operational hardware regardless of its \nlocation.  The team eventually found that many of the \nhardware properties we wanted to capture were the same \nacross these development, test, and operations partitions.  \nThe boundaries between the hardware metamodel \nstereotypes were not clean enough.  The team then realized \nthat for our implementation, the best way to partition the \nhardware was by physical properties that did not change, \nlike whether or not a component could access the network. \nTo identify the full list of value properties that should be \nincluded in the model, the team turned to JPL’s existing \ninstitutional hardware databases.  These databases store nvarious parameters about each piece of hardware, and \ntogether almost completely describe each hardware ncomponent.  The only information these institutional \ndatabases lack is which software versions are deployed on \neach piece of hardware.  Initially the team planned on \ncapturing only the most important of these properties in the \nmodel.  However, since the team wanted the model to \nbecome an authoritative source for all information about the \nGDS system we decided that the model should include the \nsuperset of all information that already existed in these \ndatabases.  This later proved to be a good decision, because \nthe model contained diverse information that could be used \nto answer system-level questions the team had not originally nconsidered. \nThe architecture of the hardware and software metamodels, \ncombined with the large quantity of hardware information \nstored in the model itself, allowed the team to write scripts \nto query the model and return information.  These scripts \ndetermined which pieces of hardware are connected to each \nother, produced lists of hardware with similar properties, \nand summed things like maintenance costs.  Each of these \nwill be discussed in detail in later sections of this paper. \nPopulating and Updating Model Elements \nThe first step in populating the model was to create \nrelationships to show each of the specific software \ndeliveries.  Due to the small number of elements and simple \nrelationships, the team populated the necessary deliveries by nhand.  Populating the model with hardware information \nproved to be a much more complicated task.  Each hardware \nelement can have dozens of properties, and the risk of \nhumans introducing errors was too great The team needed \na different solution. \nThe existing institutional databases that store hardware \ninformation can output their contents as comma-separated \nvalue \(CSV able to automatically populate model elements using \nthese CSV files along with the hardware metamodel.  This nmade initially populating the model with all the system’s \nhardware elements fast and simple.  The CSV import/export \nprocess is bi-directional, meaning CSV files can also be \nexported from the model and imported into institutional \nhardware databases in order to keep them in sync. \nInformation from JPL’s hardware databases was imported \ninto the model only once.  From that point forward, all \nupdates were made in the model and exported to the \ninstitutional databases as necessary.  The team wanted the \nmodel to be the one authoritative source containing the \nsuperset of all information about the system, so continuing \nto maintain this information outside of the model would \nhave created opportunities for information in different \nsources to diverge.    \nEach of the institutional databases provides a specific view \nof the system, but the source of this data is disparate and \nprone to inconsistencies between various databases.  For \nexample, a common inconsistency was two different \ndatabases showing conflicting IP addresses for a single \ncomputer.  During the import process the team found and \ncorrected many of these inconsistencies to make the model \naccurately represent the system.  This points to one \nadvantage of the model: although information in the model \ncan be viewed in many different ways to match the existing \ndatabase views, it always comes from the same source nTwo views of the same model cannot have conflicting \n  5 \ninformation in them.  This process validated the model as an \nauthoritative source for the project’s hardware property \ninformation, which has proven to be 


incredibly useful for \nsimplifying routine tasks like performing yearly hardware \ninventories.   \nIn addition to the import/export features, the modeling tool \nthe team used provided a built-in table wizard to view and nedit properties in a spreadsheet format as shown in Figure 6:  \n \nFigure 6 - IP Address Table Wizard Example nThe team was used to seeing information in a spreadsheet \nformat similar to the table shown in Figure 6, so having this \nview available helped ease the transition to the model.  This \ntable is a very convenient view to show large amounts of \ninformation at one time and was used to spot-check \nelements to make sure they had been imported properly.   \nLinking Software and Hardware Elements \nAfter the system hardware and software were both modeled, \nthe two were connected in order to denote which GDS \ndelivery a piece of hardware had installed on it at any given \npoint in time, as shown in Figure 7:  \n \nFigure 7 - Software and NFS Allocation \nFigure 7 shows a hardware element of type Network Device \ncalled Computer1 that has a Software Version called nSoftware_Delivery_3 installed on it.  By looking at the \nSoftware_Delivery_3 block, a person looking at the diagram \n\(or a model query script traversing relationships between \nmodel elements which software \nelements and versions are installed on Computer1. \nNote that this portion of the model is dependent upon the \naccuracy and depth to which the system’s software and \nhardware were modeled.  As new software deliveries \nbecame available, the modeling team needed to update these \nproperties onto the model’s hardware elements.  At first it \nsounded like this would make updating the model after a \nsoftware delivery more time-consuming, but it proved to be \na good way to ensure all the hardware had been updated nappropriately.  Paper deployment checklists were replaced \nwith model-generated reports.  With the model elements in \nplace, the team was now ready to verify them. \nModel Verification \nA model that describes a particular system is only useful if \nit can be proven that the model accurately describes the \nsystem.  The model elements and properties need to be \nverified against the actual system hardware and software.   \nThe GDS team already had an automated checkout script \nthat would run on all the project computers and return a nsingle XML file listing the values of several hardware and \nsoftware properties on all the machines.  A similar script \nwas written to query the model and return a second XML \nfile in the same format as the existing checkout script \noutput.  The team ran both scripts, then looked for \ndifferences in the resulting XML files and resolved all \nconflicts.  This process can be repeated on a regular basis to \nensure that the model continues to properly reflect the \nsystem as both evolve. \nOnce the model was set up, populated, and verified, it was \ntime to start using it to analyze the GDS system. \n3. MANAGING COMPLEXITY \nViewpoints Developed to Manage Complexity \nAfter laying the groundwork by defining the system and its \nelements, several viewpoints needed to be developed to \nprovide useful information about the system.  In this \ncontext, a viewpoint” is defined as a diagram that shows a \nparticular subset of information from the model in order to nconvey specific details of the system.   \nThe important thing to note about these viewpoints is that \nthey are products of the initial model architecture and data \npopulation.  Since the subset of information being expressed \nhas already been documented in the model, “creating a \nviewpoint” is often just a matter of selecting which pieces of \ninformation are important to display and dragging them onto \na new diagram.  As the model became more complete, more \nand more useful views were identified and created.  This \n  6 \nsection gives examples of views that the team found to be \nuseful, and which factors prompted their creation. \nHardware Locations \nThe GDS hardware and software upgrade that prompted this \nmodeling task was the last one before the Dawn spacecraft’s \nfirst science phase.  The GDS team needed to ensure that an \nadequate, reliable, and stable hardware and software system \nwas in place before the science phase began. \nOne of the first steps of the GDS hardware upgrade was to \ncondense hardware previously located in two separate \nrooms down to one room.  This one room had resource \nlimitations like a limited number of power circuits and \nEthernet ports.  The GDS team had to determine if the \nroom’s existing resources were sufficient.  At the time, the \nonly way to do this was to trace cables under desks and \nbehind cubicle walls to find all the power and Ethernet \nports, then determine which ones were already in use.  The \ntask proved to be time-consuming and the team realized it nwould be useful to capture this information in the model so \nthat it could be referred to again in the future.  Figure 8 \nshows the resulting diagram: \n \nFigure 8 - Hardware Locations \nThe hardware location view shown in Figure 8, came out of \nthis hardware consolidation task and is one of the more \nuseful views of the system.  The next time users want to add \nhardware the GDS team can quickly determine if the room \ncan support new hardware.  Each port is automatically \ncolor-coded by the modeling tool based on its connection \ntype This allows the team to see at a glance what ports are \nin use and why. \nThe hardware locations internal block diagram \(IBD blocks at the next \nhierarchical levels represent buildings, then rooms, then port \nboxes, then ports.  Each port box contains three Ethernet \nports.  Each port represents one available Ethernet \nconnection; hardware 


that uses a particular Ethernet \nconnection is nested inside the appropriate port.  Finally, for \ncomputers with monitors attached, the monitors are shown \nnested inside of each computer.    \nTraceability from a computer to its monitor is easily \noverlooked but is extremely useful for inventory purposes.  \nNon-networked devices like computer monitors can be very \ndifficult to find during the annual inventory because there is \nno way to ask a monitor what its location is.  Devices on the \nnetwork can be logged into remotely; from there it is easy to \ndetermine an IP address and map that to an Ethernet port.  \nHaving this monitor-to-machine mapping has helped the \nGDS team track down several monitors quickly. \nCost Rollup \nOnce the team added Ethernet port tracking to the model, \nthere was an unintentional but very useful side effect: the \nmodel could now track all the costs associated with a \nparticular hardware configuration.  Each active port has a \nmonthly fee associated with it that varies based on the port’s \npurpose.  For example: Ethernet ports on different subnets ncost different amounts, there are additional charges \nassociated with VOCA boxes \(used for radio ncommunications nPreviously these charges have been difficult to track \nbecause there was no itemized bill to the project just one \nfinal sum that goes through the cost account was typically \ngiven.  A common occurrence was that a computer was \nmoved without the GDS team remembering to deactivate \nthe Ethernet port and confirm that the deactivation request \nwent through, so the project continued to get charged for an \nunused port without realizing it.  However, if the model \naccurately represents the GDS system, a script can be \nwritten to sum up these expected port charges to compare \nthem to the actual bill that the project received.    This \nallowed the GDS team more insight into where their money \nwas going and allowed them to catch discrepancies. \nFigure 9 shows the same metamodel seen in Figure 5, but \nthis time red boxes highlight the attributes of the hardware nmetamodel that are summed by the cost rollup script. \n  7 \n \nFigure 9 – Cost Script’s Targets \nThe cost rollup script traverses the model and sums the \nappropriate costs depending on the machine type.  For \nvirtual machines that the project leases, the script sums the \nLease Cost, Port Cost, and Software_Delivery’s License nCost.  For Physical Machines, the script sums Hardware \nSupport Cost \(warranty n \nScripts like the cost rollup mentioned above and the disk \nspace query mentioned later were written in Jython.  The \nmodeling tool allowed for scripting in a preset list of \nlanguages: AppleScript, BeanShell Groovy, JRuby, \nJavaScript, Jython, and QVT Operational.  Jython was \nchosen because of the large library of Java classes that came \nwith the tool for free and the authors’ familiarity with \npython.   \n \nThe modeling tool had intuitive ways of running these \nscripts as macros, which could be called easily with shortcut nkeystrokes.  After the initial learning curve of understanding \nwhich Java libraries to call in each scenario, writing the \nscripts themselves took about anywhere from one to several \nhours, depending on the complexity of the task.     \n \nTracking and Planning Configurations \nAnother big task for the GDS team is managing disk space.  \nThe project has multiple network file system \(NFS space used by the flight team.  \nThe team knew they would need to procure additional disk \nspace before the hardware/software upgrade, but didn’t \nknow how much would be necessary.  The Dawn GDS team \ngenerally purchases a large quantity of disk space at a time, \nwhich is held in reserve and slowly allocated to the flight \nteam as necessary.  It was important to understand up-front \nhow much disk space might be required, so that the team \ncould take advantage of economies of scale. \nIn order to prepare for the disk space purchase the GDS \nteam went through an exercise to understand how much disk \nspace the flight team was already using in order to predict \nfuture needs.  It was clear through this exercise that there \nneeded to be a better way of capturing disk space \ninformation, so the team decided to add the NFS servers to \nthe model.   \nIt was also suggested that tracking the project’s required \ndisk space throughout the life of the mission might help nfuture projects predict their needs too.  Figure 10 shows the \nmethod the team came up with for showing disk space \nconfiguration. \nFigure 10 shows that each NFS server has a Total Size slot \nthat is used to track the server’s total amount of disk space.  \nEach NFS server is divided into volumes, and each volume \nhas an allocation of disk space.  Additionally, different NFS \nvolumes are mounted on or accessible from different ncomputers.  Capturing which computer was dependent upon \nwhich NFS server was important. \n \nFigure 10 - NFS Partitions \nScripts were written to query the NFS model and answer \nthree different questions:  How much disk space on any \ngiven NFS server was in use, and how much total disk space \ndid it have?  If an NFS server needed to be taken offline for \nmaintenance, which computers would be affected by the \noutage?  Which NFS servers can any given computer access \nin the current GDS configuration?  Each of these questions \nhad come up at times and finding answers was always a bit \nchallenging.  The model has definitely helped with disk \nspace management. \n4. COMPLEX DATA FLOWS  \nOnce the team saw that the model could successfully be \n  8 \nqueried, we began to look for other opportunities to use \nmodeling to document the system.  One of the first 


nopportunities we found was the documentation of complex \ndata flows.   \nThe team knew that during the planned hardware/software \nupgrade some parts of the Dawn testbeds would need to be \nupgraded, and other parts would need to stay as they were.  \nThe team had to prove that the upgraded and legacy \nmachines would still be able to interface with each other.  \nThe first step was to map out all the elements in the testbeds \nand their interfaces, as shown in Figure 11. \nFigure 11 shows the connections between all the testbed \nelements captured on a SysML internal block diagram \n\(IBD software, users reported performance \ndegradation.  This data flow diagram greatly assisted the \nGDS team in identifying where race conditions could exist \nor where software configurations needed to be adjusted to naccount for the new equipment. \nCapturing data flows in the model has many advantages \nover a basic drawing tool.  For example, the model can \nperform type-checks between interfaces, so if a modeler \nattempts to draw a connection between two incompatible \nports, for example 1553 and Ethernet, the model will flag it.   \n \nFigure 11 – Testbed Data Flows \nAnother advantage of modeling over other drawing methods \nis that the model already contains information about all the \nhardware and software the project uses, and that information \ndraws its truth from a single source.  As computers’ \nproperties like hostnames or IP addresses change, those \nchanges will be automatically reflected in all diagrams.  \nThis both reduces the amount of work necessary to keep the nsystem description diagrams up-to-date and also reduces the \nlikelihood of inaccuracies since there are more opportunities \nto notice a given mistake.  Dawn’s prime mission is eight \nyears long, so there is risk of documentation becoming out-\nof-date.  Capturing data flows in the model mitigates risk. \n5. FORCING CLEAR THINKING \nEventually it felt natural for the team to turn to the model \nwhenever we ran into anything needing further clarification.  \nThe act of modeling complex systems often forces the \nmodeler to ask questions that he or she never knew needed \nasking.  An example of this is how various pieces of \nsoftware on the same computer interact with each other. \nDue to way the Dawn GDS has evolved over time, there are \na few cases where one tool is built specifically to call a \nsecond tool with certain options/arguments.  From time to ntime, users will report a bug with the tool they’re using, but \nupon further investigation, the GDS team will realize the \nbug actually lies in a completely separate tool.  Tracing \nthrough all these tools can be complicated.   \nIt is even more challenging when users request a new \nfeature be added to one tool, but the GDS team finds that the \nchange really has to be made in a different program.  Now \nthe developer needs to understand how all the tools relate to \none another in case the new change breaks something else.  \nThis process requires the GDS team to think clearly about \nthe interfaces between a set of programs, which is nsomething the modeling process is good at promoting.  An \nexample diagram is shown in Figure 12. \n \nFigure 12 Software Sequence Diagram \nThe SysML sequence diagram in Figure 12 shows how one \nsoftware program calls a second, which then calls a third.  \nThe descriptions on the arrows show what kind of \ninformation is being passed between each program.  Using \nSysML forces the modeler to use unambiguous syntax. \n6. ADVANTAGES OF MODELING OVER \nTRADITIONAL APPROACHES \nWhen describing any system as complex as a spacecraft \nGDS it will always be necessary to create multiple views for \ndifferent audiences and purposes.  These views are typically ncreated by several different authors using presentation or \ndrawing tools, so it is common for each to use their own \nstyle conventions.  A single arrow symbol can represent \nhierarchy, data flow, control flow, etc depending on which \n  9 \ndiagram you look at or who created it.  It’s up to the reader \nto determine what each symbol means on each diagram and \nto make sure their interpretation is correct.  Instead, the use \nof a standardized modeling language like UML or SysML \nimposes a standard convention so that no matter which ndiagram the reader is looking at, the meaning of each \nsymbol is unambiguous. \nWhen using presentation or drawing tools to create system \nviews, one big challenge is maintaining consistency across \nall the views particularly since the system inevitably \nchanges over time.  The advantage of a modeling tool over \nthese presentation or drawing tools is the model itself.   \nWhen diagrams are created using presentation or drawing ntools there is no connection between each view, which \nallows for inconsistency.  However, when using a modeling \ntool, all the diagrams utilize the same underlying model \nelements and relationships no matter who creates the \ndiagram.  If element names or relationships change over \ntime, those changes are automatically propagated to all \nsystem views.  This reduces both the amount of work \nnecessary to keep the views up-to-date and the likelihood of \ninaccuracy.  Just as there is only one GDS system for a \ngiven mission, there is also only one self-consistent model \nrepresentation of that system. \nTraditional presentation or drawing tools also have no \nunderstanding of their system elements.  Through the use of \nmetamodels, a modeling tool understands basic information \nabout the system being described and can be the first line of \ndefense against inconsistency. For example the modeling \ntool can perform type-checks between interfaces, so if a \nmodeler attempts to draw a connection between two \nincompatible ports, like 1553 and Ethernet, the tool will flag \nit 


nDuring operations many GDS system engineers rely on \nspreadsheets listing hardware properties to track their nsystems.  Spreadsheets are useful for viewing large \nquantities of data at once or for passing information between \nteams, however they also make it easy to miss mistakes or \ninconsistencies.  When different teams own different \nspreadsheets that each describe part of a single system, \nthings get out of sync very quickly.  A model enforces \nconsistency, but users are not forced to choose between the \ntraditional spreadsheet and a model.  Once information is in \nthe model, generating an editable spreadsheet view from \nthat single source of truth is trivial, as was previously shown \nin Figure 6. \nDawn’s prime mission is eight years long, so there is risk of \nthe GDS system documentation becoming out-of-date.  The \ntransition of personnel over the course of the mission makes \nit even more important to maintain a single accurate \nrepresentation of the system Capturing this information in \nthe model mitigates this risk. \n7. CONCLUSION \nOverall the Dawn GDS modeling task was a success.  \nInitially setting up and revising the hardware and software \nmetamodels took the team a fair amount of thought, but \nonce the metamodels were in place model elements were \nquickly populated from existing databases.  The process of \nimporting model elements uncovered many inconsistencies \nin the existing hardware databases, which were then \nresolved.   \n \nOnce the model was populated, it was used with great nsuccess to help the GDS team manage complexity.  A \ndiagram was established to track the locations of various npieces of hardware as well as building resources.  Scripts \nwere written to query information out of the model and give \nthe team more insight into costs and dependencies of the \nproject’s computers on other servers.   \n \nAs the team became more comfortable with the model, we \ncontinued to find new ways to make our job easier.  The \nmodel was used to understand and document complex data \nflows within the system, and also to force the GDS team to \nthink clearly about the system’s interfaces. \n \nThe team’s approach of selective modeling as time and \nmoney allowed worked well.  Modeling the GDS piece by \npiece provided incremental growth in functionality and the \nteam ended up with a fairly complete model by the end of \nthe study.  Based on the insight the team gained through this \nmodeling process, we believe system modeling earlier in the \nmission definitely would have been beneficial. \n \nThe team believes this case study shows that with \nreasonable goals in mind, even a small team without a \nsignificant amount of money to dedicate can see benefits of \nsystem modeling.  Most of the modeling and scripting in \nthis study was performed by an academic part time \nemployee working 10-20 hours per week over the course of \none year. \n \nThe team continues to use and refine the Dawn GDS model.  \nMore work should be done to explore how to automatically \naudit the model’s contents against the actual hardware in use \non a regular basis.  At the moment verifying that the model \nmatches reality is one of the most onerous aspects of \nmaintaining the model.   \n \nAnother goal of the team’s future modeling work is to ngenerate views that will be used to educate new members \ncoming onto the GDS team.  Most system description views \ngenerated during the mission’s design have become \noutdated and would not be of much benefit for people new \nto the project.   \n \nLastly, parts of this GDS model are relevant to other \nmissions using similar software deliveries and hardware.  \nBeing able to modularize the model and export it as a \nbaseline for other projects would be a key goal to strive for \n  10 \nin reducing the amount of redundant modeling work.       \n nACKNOWLEDGEMENTS  \nThe research described in this paper was carried out at the \nJet Propulsion Laboratory California Institute of \nTechnology, under a contract with the National Aeronautics \nand Space Administration n \nREFERENCES  \n[1] OMG SysML Specification v1.3.  [June 2012]  \nhttp://www.sysml.org/specs/  \n \n[2] Lykins Howard; Friedenthal, Sanford and Abraham \nMeilich, “Adapting UML for an Object-Oriented \nSystems Engineering Method \(OOSEM  Friedenthal, Sanford; Moore, Alan; and Rick Steiner.  A \nPractical Guide to SysML.  Burlington, MA: \nELSEVIEW Inc., 2009.  Print.   \n \n[4] OMG UML Specification v.2.4.1.  [August 2011] \nhttp://www.omg.org/spec/UML/2.4.1 n \nBIOGRAPHIES  \nChelsea Dutenhoffer has \nbeen the Ground Data \nSystems Engineer on the \nDawn project for the past \n4 years.  Her research \ninterests include the \napplication of model-\nbased systems \nengineering techniques \nand methods for \nencouraging innovation \nin system design.  She \nreceived a B.S. in Aerospace Engineering from Embry-\nRiddle Aeronautical University and is currently pursuing \nan M.S. in Mechanical Engineering with a concentration \nin Engineering Design at the University of Southern \nCalifornia.  \n nJoseph Tirona is a member of \nthe System Verification and \nValidation Group at JPL.  He \nhas used MBSE to model \nvarious aspects of Ground \nData Systems on a number of \nflight projects, including the \nMars Science Laboratory \n\(MSL Systems Engineer doing V&V on the Soil \nMoisture Active-Passive \(SMAP Mechanical Engineering from California \nPolytechnic University, Pomona, where he is a graduate \nstudent in the Mechanical Engineering Department. \n \n 


miss.\nFigure 13 shows the reuse distance histograms of VWAP\nwith 4 threads.We see that all 4 threads has good temporal\nlocality since the majority of cache line accesses can ?t\ninto L1 cache. We also measure the working set size \(the\nnumber of distinct cache lines touched that the working set size of\nthe Source thread is 465 cache lines, and that of each Worker\nthreads is 9 or 10 cache lines. Due to the small working set\nsizes, contention on last level cache and FSB is not severe\namong VWAP threads. Therefore, Holistic Mapping has the\nsame results as TreeMatch and TreeMatch-S.\nThird, Figure 12 shows that the mappings by the default\nLinux OS scheduler is close to the worst cases for most\ntests. This is because the Linux scheduler tends to spread\nthreads across the system, and this hurts the performance of\nVWAP which is communication dominant.\nInterestingly, the performance of VWAP with “Large\nWindow” con?guration shown in Figure 14 achieves better performance \(up\nto 7 sliding windows have large working sets,\nso the contention on shared cache and memory bandwidth\noutweighs inter-thread communication. As a result, both\nTreeMatch and TreeMatch-S generate sub-optimal mappings\ndue to failure to consider resource contention. Holistic\nMapping, however, still ?nds the best mapping. This clearly\nshows the importance of holistically considering both data\nsharing and resource contention for thread mapping.\nB. LOIS Application Performance\nThe LOIS application detects outliers in radio data from\nouter space The version of LOIS used in this paper reads\nfrom a disk ?le containing a sample dataset collected from\na Scandinavian radiotelescope in Europe. Figure 10 shows\na 4-thread setup of LOIS. Thread 1 calculates point-wise\ncoordinates for each input data record which are consumed\nby Thread 2. Thread 2 and 3 maintains aggregate statistics on\ntwo sliding windows of past records. Thread 2 produces data\nto feed into Thread 3, and also synchronizes with Thread\n3 on a shared Barrier operator. Thread 4 receives from\nThread 2 and 3 the upper and lower bounds of coordinates\nderived from the sliding windows, and ?nds all outliers in\nthe incoming data record. 5-thread and 6-thread versions of\nLOIS are constructed by further introducing Threaded Ports\nto split the work of Thread 3 and 4.\nFigure 15 shows the performance of LOIS. Both\nTreeMatch-S and Holistic Mapping are able to ?nd the best-\nperforming thread mapping in all cases which outperforms\nthe worst mapping and the default OS mapping by up to\n2.4 and 1.8 times, respectively. TreeMatch, on the other\nhand, sometimes gives sub-optimal mappings. To explain\nthe difference between TreeMatch and TreeMatch-S, we\nlook at the inter-thread communication matrix and thread\ncorrelation matrix for LOIS with 4 threads. Figure 16 shows\nthat thread correlation measurements capture data sharing\nbetween threads \(especially between Thread 2 and 3 due\nto their sharing of operators using\ninter-thread communication volumes.\nHolistic Mapping achieves the same best mapping as\nTreeMatch-S for LOIS. This is because resource contention\nis not severe among threads in LOIS. Figure 17 shows the\nreuse distance histograms of 4 LOIS threads. Although the\nLOIS threads show worse temporal locality than VWAP\n\(since the histograms are more scattered towards larger dis-\ntances t into\nL2 cache. Therefore, the bene?t brought by placing thread\nwith intensive data sharing close to each other outweighs\nthe penalty of resource contention.\nIn terms of cost, Exhaustive Search has poor scalability.\nFor example, enumerating all possible mappings of 6-thread\nLOIS on 8-Core UMA machine takes 600 pro?ling runs even\nafter eliminating redundant mappings based on symmetry\nof cache topology. TreeMatch needs one pro?ling run with\nSystem S runtime’s communication pro?ling facility, but the\npro?ling overhead is negligible. TreeMatch-S needs one run\nwith binary instrumentation which can slow down VWAP\nand LOIS by up to 8×. Holistic Mapping requires two pro?l-\ning runs: the ?rst run is the same as TreeMatch-S with binary\ninstrumentation enabled, and the second one is with low-\noverhead hardware performance counter monitoring enabled.\n6259\n\(a b c nN\nor\nm\nal\niz\ned\n T\nhr\nou\ngh\npu\nt \nNumber of Threads \nOS Default Best \nWorst TreeMatch \nTreeMatch-S Holistic n0 \n0.5 \n1 \n1.5 \n2 \n2.5 \n3 \n3.5 \n1 2 3 4 5 6 \nN\nor\nm\nal\niz\ned\n T\nhr\nou\ngh\npu\nt \nNumber of Threads \nOS Default Best \nWorst TreeMatch \nTreeMatch-S Holistic \n0 \n0.5 \n1 \n1.5 \n2 \n2.5 \n3 \n1 2 3 4 5 6 \nN\nor\nm\nal\niz\ned\n T\nhr\nou\ngh\npu\nt \nNumber of Threads \nOS Default Best \nWorst TreeMatch \nTreeMatch-S Holistic \nFigure 15 Throughput of LOIS \(Normalized to the Throughput of Single-Threaded LOIS with Default OS Scheduler nSh\nar\nin\ng \nIn\nte\nns\nity\n \nT1 T2 T3 T4 \nC\nom\nm\nun\nic\nat\nio\nn \nVo\nlu\nm\ne \nInter-Thread Communication Inter-Thread Correlation \nT3 \nT2 \nT1 \nT4 \nT3 \nT2 \nT1 \nT4 \nT1 T2 T3 T4 \n1.0 1.0 \n0.0 0.0 \nL2 \nL1 L1  \nL2  \nL1 L1 \n1 3 2 4 \nMapping by TreeMatch Mapping by TreeMatch-S \nL2 \nL1 L1  \nL2  \nL1 L1 \n1 2 4 3 \nFigure 16. Thread Mapping of LOIS with 4 Threads on 4-Core UMA.\nC. Major Observations from Experimental Results\n\(1 to 2.4x difference between the best and\nworst thread mappings. The difference is more evident when\nthere is more asymmetry in application structure and/or\ncache topology. Since streaming applications with compli-\ncated 


data?ows and parallelisms are emerging and current\nand next generation of CMPs by major vendors are adopting\ndeep and complex cache structures, cache topology aware\nmapping will show growing importance in the future.\n\(2 sometimes\nconstitutes the worst case \(especially for applications whose\nperformance is dominated by inter-thread data sharing Linux OS scheduler.\n\(3 constructive data sharing and\ndestructive resource contention between threads. This is\ndemonstrated by our Holistic Mapping algorithm which\nalways ?nds the best mappings.\nVI. RELATED WORK\nA. Mapping Multi-Threaded Programs on CMPs\nCommunication and Sharing Aware Mapping. The prob-\nlem of mapping a multi-process or multi-threaded program\nto a set of underlying resources to minimize program execu-\ntion time is NP-hard [8 Various heuristics have been pro-\nposed with the objective of minimizing communication cost,\nsuch as graph partitioning [5] and graph matching [19]. [24]\nimplements a OS-level scheduler which places intensively-\ninteracting threads close to each other. As shown in this\npaper, arranging data movement based on cache topology\nalone does not capture all important trade-offs and may lead\nto sub-optimal overall performance.\nContention Aware Mapping. [18] shows that contention\non shared memory resources can severely degrade applica-\n0 \n3 \n6 \n9 \n12 \n15 \nC\nol\nd 0 1 2 3 4 5 6 7 8 9 10\n \n11\n \n12\n \n13\n \n14\n \n15\n \n16\n \n17\n \n>1\n8 n# \nof\n C\nac\nhe\n L\nin\ne \nA\ncc\nes\nse\ns \n\(U\nin\nit:\n M\nill\nio\nn n12 \n15 \nC\nol\nd 0 1 2 3 4 5 6 7 8 9 10\n \n11\n \n12\n \n13\n \n14\n \n15\n \n16\n \n17\n \n>1\n8 \n# \nof\n C\nac\nhe\n L\nin\ne nA\ncc\nes\nse\ns \n\(U\nin\nit:\n M\nill\nio\nn 4 5 6 7 8 9 10\n \n11\n \n12\n \n13\n \n14\n \n15\n \n16\n \n17\n \n>1\n8 \n# \nof\n C\nac\nhe\n L\nin\ne \nA\ncc\nes\nse\ns \n\(U\nin\nit:\n M\nill\nio\nn n13\n \n14\n \n15\n \n16\n \n17\n \n>1\n8 \n# \nof\n C\nac\nhe\n L\nin\ne \nA\ncc\nes\nse\ns \n\(U\nin\nit:\n M\nill\nio\nn nL1 Cache L2 Cache \nFigure 17. Memory Reuse Distance of LOIS.\ntion performance on CMPs. Hardware [21] and OS level [17]\ncache partitioning, user level thread scheduling [34], and\ncompiler-time transformation [22, 25 are proposed to mit-\nigate resource contention among processes and/or threads.\nHowever, they only work for independent threads or pro-\ncesses with no communication or sharing relationships.\nHolistic Mapping. [26 exploits thread mapping for op-\ntimizing multi-threaded datacenter applications on CMPs.\nHowever, the mapping policies in [26] either use exhaustive\nsearch or require a new algorithm for each type of cache\ntopology. Our new contributions include an in-depth study\nof streaming application’s cache behavior and a holistic\nmapping algorithm which is more general and scalable.\nB. Optimizing Streaming Applications on CMPs\nAlgorithmic Optimization of Streaming Algorithms. Exam-\nples include join [27, 11], aggregation [6], sorting [10 and\nfrequency counting [7]. Operators in a streaming program\nmay interact with each other in complicated ways and\nsuch complexity is manifested at thread level at runtime.\nManaging such complicated interaction is beyond the scope\nof tuning individual operators, so orchastration provided by\nStreamMap is necessary to coordinate threads’ execution.\nBesides, StreamMap does not require knowledge of opera-\ntors’ internal implementation, and uses pro?ling information\ncollected at middleware level to make mapping decisions.\nTherefore, StreamMap is orthogonal and complementary to\ncode tuning of individual streaming operators.\nCompile-Time Scheduling and Mapping of Streaming Pro-\ngrams on CMPs. Pioneered by StreamIt [13], work has\nbeen done in optimizing static scheduling of streaming\nprograms on multicores [16, 29, 30]. Those work apply\ncompiler analysis and code transformation to exploit various\nparallelism in program to balance computation load among\nthreads. Since most of those work target Cell B.E. architec-\n630\nture which has explicitly managed memory hierarchy, they\ncommonly try to hide data movement cost by overlapping\ncommunication with computation in the execution schedule.\nIn comparison, StreamMap targets cache topologies seen in\nx86 CMP architecture which impose distinct challenges such\nas contention on shared resources, and it works at thread\nlevel without heroic compiler analysis.\nCache-Aware Optimization of Streaming Programs. [23]\nproposed three techniques to optimize StreamIt programs\non a uniprocessor: execution scaling, buffer manager, and\nregister replacement. [20] extends execution scaling to multi-\ncore. Both work assumes synchronous data ?ow model to\ncalculate static steady state schedule, and [20] does not\nconsider thread mapping to reduce contention or thread\nsynchronization cost 4] theoretically shows that cache-\nef?cient scheduling of streaming programs on a uniprocessor\ncan be modeled as a partitioning problem and some special\ncases can be solved in polynomial time. Our work targets\nmulti-core processors, uses mapping algorithms different\nfrom the one proposed in [4], implements those algorithms\ninside System S middleware, and evaluates them with real-\nworld applications on representative architectures.\nVII CONCLUSIONS AND FUTURE WORK\nThis paper demonstrates that CMP’s cache topology can\nhave a signi?cant impact on the performance of multi-\nthreaded streaming applications. Our StreamMap approach\nautomatically places threads 


to cores to control the data\nsharing and resource contention between threads, and can\nimprove real-world streaming applications’ performance by\nup to 1.8 times over the default Linux OS scheduler.\nFuture directions of this research are twofold. We plan to\nstudy how to use StreamMap to provide feedback informa-\ntion to System S’ compiler to optimize operator fusion. We\nalso plan to apply StreamMap to a wider range of streaming\napplications, e.g., dynamic graph analysis.\nREFERENCES\n[1] Dynamorio: Dynamic instrumentation tool platform.\nhttp://www.dynamorio.org, October 2012.\n[2] Likwid: Lightweight performance tools.\nhttp://code.google.com/p/likwid, October 2012.\n[3] Scotch: Static mapping, graph, mesh and hypergraph partitioning.\nhttp://www.labri.fr/perso/pelegrin/scotch/, October 2012.\n[4] K. Agrawal, J. T. Fineman, J Krage, C. E. Leiserson, and S. Toledo.\nCache-conscious scheduling of streaming applications. In Proc. of\nSPAA 12, 2012.\n[5] H. Chen, W. Chen, J. Huang, B. Robert, and H. Kuhn. Mpipp: an\nautomatic pro?le-guided parallel process placement toolset for smp\nclusters and multiclusters. In Proc. of ICS ’06, 2006.\n[6] J. Cieslewicz and K. A. Ross. Adaptive aggregation on chip multi-\nprocessors. In Proc. of VLDB ’07, 2007.\n[7] S. Das, S. Antony D. Agrawal, and A. El Abbadi. Thread cooperation\nin multicore architectures for frequency counting over multiple data\nstreams. Proc. VLDB Endow., 2\(1  Alves, J. Schneider,\nP. Navaux, and H.-U. Heiss. Evaluating thread placement based on\nmemory access patterns for multi-core processors. In Proc. of HPCC\n’10, 2010.\n[9] B. Gedik, H. Andrade, K.-L. Wu, P. S. Yu, and M Doo. Spade: the\nsystem s declarative stream processing engine. In Proc. of SIGMOD\nConference, 2008.\n[10] B Gedik, R. R. Bordawekar, and P. S. Yu. Cellsort: high performance\nsorting on the cell processor. In Proc. of VLDB ’07, 2007.\n[11] B. Gedik, R. R. Bordawekar, and P. S. Yu. Celljoin: a parallel stream\njoin operator for the cell processor. The VLDB Journal, 18\(2  Vachharajani. Fastforward for\nef?cient pipeline parallelism: a cache-optimized concurrent lock-free\nqueue. In Proc. of PPoPP ’08, 2008.\n[13] M. I. Gordon, W. Thies, and S. Amarasinghe. Exploiting coarse-\ngrained task data, and pipeline parallelism in stream programs. In\nProc. of ASPLOS ’06, 2006.\n[14] E. Jeannot and G Mercier. Near-optimal placement of mpi processes\non hierarchical numa architectures. In Proc. of Euro-Par ’10 2010.\n[15] R. Khandekar, K. Hildrum, S. Parekh, D. Rajan, J. Wolf, K.-L. Wu,\nH. Andrade, and B. Gedik. Cola optimizing stream processing\napplications via graph partitioning. In Proc. of Middleware ’09, 2009.\n[16] M Kudlur and S. Mahlke. Orchestrating the execution of stream\nprograms on multicore platforms. In PLDI ’08 2008.\n[17] J. Lin, Q. Lu, X. Ding, Z. Zhang, X. Zhang, and P. Sadayappan.\nGaining insights into multicore cache partitioning: Bridging the gap\nbetween simulation and real systems. In Proc. of HPCA ’08, 2008.\n[18] J Mars, L. Tang, and M. L. Soffa. Directly characterizing cross core\ninterference through contention synthesis In Proc. of HiPEAC ’11,\n2011.\n[19] E. H. Molina da Cruz, M. A. Zanata Alves, A. Carissimi, P. O. A.\nNavaux, C P. Ribeiro, and J.-F. Mehaut. Using memory access traces\nto map threads and data on hierarchical multi-core platforms. In Proc.\nof IPDPSW ’11, 2011.\n[20] A. Moonen, M. Bekooij, R. van den Berg, and J. van Meerbergen.\nCache aware mapping of streaming applications on a multiprocessor\nsystem-on-chip. In Proc. of DATE 08, 2008.\n[21] M. K. Qureshi and Y. N. Patt. Utility-based cache partitioning: A low-\noverhead high-performance, runtime mechanism to partition shared\ncaches. In Proc. of MICRO 39, 2006.\n[22] A. Sandberg D. Eklo¨v, and E. Hagersten. Reducing cache pollution\nthrough detection and elimination of non-temporal memory accesses.\nIn Proc. of SC ’10, 2010.\n[23] J. Sermulins, W. Thies, R. M. Rabbah, and S. P. Amarasinghe Cache\naware optimization of stream programs. In Proc. of LCTES, 2005.\n[24] D. Tam, R. Azimi, and M. Stumm Thread clustering: sharing-aware\nscheduling on smp-cmp-smt multiprocessors. In Proc. of EuroSys 07,\n2007.\n[25] L. Tang, J. Mars, and M. L. Soffa. Compiling for niceness: mitigating\ncontention for qos in warehouse scale computers. In Proc. of CGO\n’12, 2012.\n[26] L. Tang, J. Mars, N. Vachharajani, R. Hundt, and M L. Soffa.\nThe impact of memory subsystem resource sharing on datacenter\napplications. In Proc. of ISCA ’11 2011.\n[27] J. Teubner and R. Mueller. How soccer players would do stream joins.\nIn Proc. of SIGMOD ’11 2011.\n[28] W. Thies and S. Amarasinghe. An empirical characterization of stream\nprograms and its implications for language and compiler design. In\nPACT ’10, 2010.\n[29] A. Udupa, R. Govindarajan, and M. J Thazhuthaveetil. Software\npipelined execution of stream programs on gpus. In CGO ’09, 2009.\n[30] Z. Wang and M. F. O’Boyle. Partitioning streaming parallelism for\nmulti-cores: a machine learning based approach. In PACT 10, 2010.\n[31] Q. Zhao, D. Bruening, and S. Amarasinghe. Umbra: ef?cient and\nscalable memory shadowing. In Proc. of CGO ’10, 2010.\n[32] Q. Zhao, D. Koh, S. Raza, D. Bruening, and W.-F. Wong. Dynamic\ncache contention detection in multi-threaded applications. In Proc. of\nVEE ’11, 2011.\n[33] Y. Zhong, X. Shen, and C. Ding Program locality analysis using\nreuse distance. ACM Trans. Program. Lang. Syst., 31\(6  Zhuravlev, S. Blagodurov, and A. Fedorova. Addressing shared\nresource contention in multicore processors via scheduling. In Proc.\nof ASPLOS ’10, 2010.\n641\n 





brought together the Neu-\nroprosthesis Group \(NPG Also in 2003, Dr. Peng \nlead the creation of the Interagency Modeling and Analysis Group \(IMAG consists of program \nofficers from ten federal agencies of the U.S. government and Canada www.imagwiki.org/mediawiki of biological systems MSM Consortium of investigators \(started in \n2006 intelligent tools and reusable models, and \nintegrating these approaches in engineering systems and multiscale physiological problems. \n \n \nJose C. Principe \n \nPRESENTATION TITLE:  Tensor Product Kernels for  \nMultiscale Neural Decoding and Control \n \nAbstract: This talk will present a tensor product kernel that combines at the same time \nlocal field potentials \(LFPs multiscale neural activity. We will explain how to construct multiscale kernels \nthat map jointly the neural data to a functional space, and will illustrate its application in \nthe development of online controllers for electrical stimulation in sensorimotor brain machine interfaces.  \n \n Biographical Sketch: Jose C. Principe M’83-SM’90-F’00 Engineering at the University of Florida where he teaches advanced \nsignal processing, machine learning and artificial neural networks \(ANNs University of Florida Computational NeuroEngineering Labora-\ntory \(CNEL of interest is processing of time varying signals with \nadaptive neural models. The CNEL Lab has been studying signal and pattern recognition principles based \non information theoretic criteria \(entropy and mutual information Networks of \nthe IEEE Signal Processing Society, Past-President of the International Neural Network Society and Past-\nEditor in Chief of the IEEE Transactions on Biomedical Engineering. He is a member of the Advisory Board \nof the University of Florida Brain Institute.  Dr. Principe has more than 500 publications.  He directed 78 \nPhD dissertations and 65 Master theses.  He wrote in 2000 an interactive electronic book entitled Neural \nand Adaptive Systems” published by John Wiley and Sons and more recently co-authored several books on n“Brain Machine Interface Engineering” Morgan and Claypool, “Information Theoretic Learning”, Springer,  \nand Kernel Adaptive Filtering”, Wiley. \n \n \nPaul Sajda  \n \nPRESENTATION TITLE:  Neurally and Ocularly Informed Graph-Based  \nModels for Searching 3D Environments \n \nAbstract: As we move through an environment, we are constantly making assessments, \njudgments, and decisions about the things we encounter. Some are acted upon immedi-\nately, but many more become mental notes or fleeting impressions -- our implicit "label-\ning" of the world. In this talk I will describe our work using physiological correlates of this labeling to con-\nstruct a hybrid brain-computer interface \(hBCI record electroencephalographic \(EEG part of a 3D virtual city under free-viewing conditions. Using machine learning, we integrate \nthe neural and ocular signals evoked by the objects they encounter to infer which ones are of subjective inter-\nest. These inferred labels are propagated through a large computer vision graph of objects in the city, using nsemi-supervised learning to identify other, unseen objects that are visually similar to those that are labelled. \nFinally, the system plots an efficient route so that subjects visit similar objects of interest. We show that by \nexploiting the subjects' implicit labeling, the median search precision is increased from 25% to 97%, and the \nmedian subject need only travel 40% of the distance to see 84% of the objects of interest. We also find that \nthe neural and ocular signals contribute in a complementary fashion to the classifiers inference of subjects' \nimplicit labeling. In summary, we show that neural and ocular signals reflecting subjective assessment of ob-\njects in a 3D environment can be used to inform a graph-based learning model of that environment, resulting \nin an hBCI system that improves navigation and information delivery specific to the user's interests. \n \nBiographical Sketch: Paul Sajda is Professor of Biomedical Engineering, Electrical Engineering and Radiol-\nogy at Columbia University and Director of the Laboratory for Intelligent Imaging and Neural Computing \n\(LIINC modeling and \nmachine learning applied to image understanding. Prior to Columbia he was Head of The Adaptive Image \nand Signal Processing Group at the David Sarnoff Research Center in Princeton, NJ. He received his B.S in \nElectrical Engineering from MIT and his M.S. and PhD in Bioengineering from the University of Pennsyl-\nvania. He is a recipient of the NSF CAREER Award, the Sarnoff Technical Achievement Award, and is a nFellow of the IEEE and the American Institute of Medical and Biological Engineering \(AIMBE Editor-in-Chief for the IEEE Transactions in Neural Systems and Rehabilitation Engineering and a \n member of the IEEE Technical Committee on Neuroengineering. He has been involved in several technol-\nogy start-ups and 


is a co-Founder and Chairman of the Board of Neuromatters, LLC., a neurotechnology \nresearch and development company. \n \n \nJustin C. Sanchez  \n \nMODERATOR: Symposium #2 - Brain-Machine Interface   \nand \nPanel #1 Funding and Trends in Neuroengineering  \n \nBiographical Sketch: Justin C. Sanchez joined DSO as a program manager in 2013. At \nDARPA, Dr. Sanchez will explore neurotechnology, brain science and systems neuro-\nbiology. Before coming to DARPA, Dr. Sanchez was an Associate Professor of Biomedical Engineering and nNeuroscience at the University of Miami, and a faculty member of the Miami Project to Cure Paralysis. He ndirected the Neuroprosthetics Research Group, where he oversaw development of neural-interface medical ntreatments and neurotechnology for treating paralysis and stroke, and for deep brain stimulation for nmovement disorders, Tourette’s syndrome and Obsessive-Compulsive Disorder. \n \nDr. Sanchez has developed new methods for signal analysis and processing techniques for studying the un-\nknown aspects of neural coding and functional neurophysiology. His experience covers in vivo electro-\nphysiology for brain-machine interface design in animals and humans where he studied the activity of \nsingle neurons, local field potentials and electrocorticogram in the cerebral cortex and from deep brain \nstructures of the motor and limbic system. \n nHe is an elected member of the Administrative Committee of the IEEE Engineering in Medicine and Biology nSociety. He has published more than 75 peer-reviewed papers, holds seven patents in neuroprosthetic de-\nsign and authored a book on the design of brain-machine interfaces. He has served as a reviewer for the \nNIH Neurotechnology Study Section, DoD’s Spinal Cord Injury Research Program and the Wellcome \nTrust, and as an associate editor of multiple journals of biomedical engineering and neurophysiology. \n \nDr. Sanchez holds Doctor of Philosophy and Master of Engineering degrees in Biomedical Engineering, and \na Bachelor of Science degree in Engineering Science, all from the University of Florida. \n \n \nSteven J. Schiff \n \nPRESENTATION TITLE:  Towards Model-Based Control in Neural Engineering \n \nAbstract: Since the 1950s, we have developed mature theories of modern control the-\nory and computational neuroscience with little interaction between these disciplines. \nWith the advent of computationally efficient nonlinear Kalman filtering techniques n\(developed in robotics and weather prediction increasingly accurate reconstruction of dynamics in a variety \nnormal and disease states in the brain, the prospects for synergistic interaction between these fields are \nnow strong. I will show recent examples of the use of nonlinear control theory for the assimilation and con-\ntrol of single neuron and network dynamics, a control framework for Parkinson’s disease, and the potential \nfor unification in control of spreading depression and seizures. Lastly, I will discuss why the subtle and \ndeep intersection of symmetry, in brains and models, is important to take into account in this transdisci-\nplinary fusion of computational models of the computational brain with real time control.  \n Biographical Sketch: Steven J. Schiff, Brush Chair Professor of Engineering and Director of the Penn State \nCenter for Neural Engineering, is a faculty member in the Departments of Neurosurgery, Engineering Sci-\nence and Mechanics, and Physics. A Pediatric Neurosurgeon with particular interests in Epilepsy, Hydro-\ncephalus, Sustainable Health Engineering and Global Health, he holds a PhD in Physiology, and an MD, \nfrom Duke University School of Medicine. His book on Neural Control Engineering, was published by the \nMIT Press in 2012. Dr. Schiff has been listed in the Consumer’s Research Council of America’s guides to top \nphysicians and surgeons, and is a Fellow of the American Physical Society the American College of Sur-\ngeons, and the American Association for the Advancement of Science. \n \n \nNitish V. Thakor  \n \nPRESENTATION TITLE:  Translating Revolutionary Prosthesis to  \nPractical Prosthesis \n \nAbstract The Revolutionary Prosthesis Program by DARPA helped launch a revolu-\ntion in prosthetics technology and means for controlling the advanced dexterous \nlimbs, up with to 22 degrees of freedom.  That has necessitated the challenge of con-\ntrolling the limb with such superior dexterity.  I will introduce methods for dexterous nprosthesis control, from myoelectric to cortical \(EEG, Electrocorticogram, neural \nspike, local field potential incorporating multimodal sensors, such as camera and video tracking, may lead to more functional \nand practical prosthesis control. Emerging challenge now is to make the revolutionary prosthetics, practi-\ncal affordable and available for amputees today. I will present our affofdable prosthetic limb solution de-\nveloped with funding from the NIH Small Business Innovations Research \(SBIR hybrid solution, such as using RFID, for dexterous hand function. \n \nBiographical Sketch: Nitish V. Thakor F’1994 Institute for Neurotechnology \(SINAPSE in Chief \(EIC from 2005-2011 and presently the EIC of Medical and Biological Engineer-\ning and Computing. Dr. Thakor is a recipient of a Research Career Development Award from NIH a Presiden-\ntial Young Investigator Award from the 


NSF and is a Fellow of the AIMBE IEEE Founding Fellow of BMES \nand Fellow of IFMBE.  He is a recipient of the award of Technical Excellence in Neuroengineering from IEEE \nEngineering in Medicine and Biology Society Distinguished Alumnus Award from Indian Institute of Technol-\nogy Bombay India and a Centennial Medal from the University of Wisconsin School of Engineering. \n \n \nBruce Wheeler \n \nPRESENTATION TITLE:  Welcome Remarks \n nBiographical Sketch: Bruce Wheeler’s research interests lie in the application of elec-\ntrical engineering methodologies to neuroscience. His work influenced the develop-\nment of neural spike sorting technologies demonstrated that microelectrode array \nrecording from brain slices was possible and productive, and has been a leader in the \ndevelopment of lithography to control cells, especially neurons, in culture. This work \naims at basic science understanding of the behavior of small populations of neurons, in hopes of creating \nbetter insight into the functioning of the brain. Bruce Wheeler moved to the University of Florida in 2008, \nafter 28 years at the University of Illinois, mostly in the ECE Dept. He founded the Bioengineering Depart-\n ment at Illinois and served as acting department chair at both Illinois and Florida.  He currently serves as nPresident of the IEEE Engineering in Medicine and Biology Society, the world¹s largest bioengineering soci-\nety, and was Editor in Chief of the IEEE Transactions on Biomedical Engineering. He is a Fellow of the nIEEE, AIMBE and BMES.  \n \n \nJohn A. White \n \nPRESENTATION TITLE:  Are Our Cellular Models Fundamentally Wrong? \n \nAbstract: The Hodgkin-Huxley model, arguably the greatest success story in the history \nof computational neuroscience, is the predecessor of thousands of existing cellular models \nthat span a significant range of levels of detail. Here, using electrophysiological, dynamic-\nclamp, and computational techniques, we demonstrate that many of the “gold standard” \nsingle-cell models, used by thousands of laboratories, fail to account correctly for the responses of well-studied \nexcitatory neurons to noise.  In particular, the input-output gain of entorhinal stellate cells and neocortical py-\nramidal cells is substantially less sensitive to noise than predicted by the models.  The major source of the dis-\ncrepancy is that the models fit measured peri-threshold voltage dynamics poorly.  Because noise is ubiquitous \nand prominent in the brain, and because neuronal gain is crucial for understanding a wide range of response nproperties at the cellular and network levels, we argue that this is an issue of fundamental importance. \n nBiographical Sketch:  John A. White is the Executive Director of the Brain Institute and a USTAR Professor nof Bioengineering and Neuroscience at the University of Utah.  White received B.S. in Biomedical Engineering nfrom Louisiana Tech University and his PhD in Biomedical Engineering from Johns Hopkins University.  \nWhite's research focuses on the mechanistic bases of normal and abnormal neural activity and information \nprocessing His approach blends technology development, electrophysiology, computational modeling, and \nimaging. The goal is to develop new treatments for memory disorders and epilepsy, based on novel applica-\ntions of electronic technology and methods of analysis from applied mathematics and engineering.  White has \npublished over 70 peer-reviewed papers.  As principal or co-principal investigator, he has raised over $50M in \ngrant funding from the government and private sources. He is a Fellow of the American Institute for Biologi-\ncal and Medical Engineering and a Fellow of the Biomedical Engineering Society. \n \n \nGreg Worrell \n \nPRESENTATION TITLE Electrophysiological Biomarkers of  \nHuman Epileptogenic Brain \n \nAbstract: Epilepsy is a common neurological disorder affecting over 50 million people \nworldwide. Despite spending as little as 0.01% of their lives having seizures, people \nwith epilepsy take antiepileptic drugs \(AEDs ex-\nperience significant AED related side effects, and approximately 1/3 continue to have seizures. Mapping the \nbrain networks generating seizures is critical for successful epilepsy surgery, therapeutic brain stimulation, \nand seizure forecasting. In focal epilepsy the spontaneous, evoked, and induced brain activity is disrupted \nover a wide range of spatiotemporal scales. Multiscale electrophysiology recordings have uncovered a range \nof electrophysiological biomarkers, measurable interictal \(between seizures normal and \npathological tissue that show promise for spatiotemporal mapping of epileptogenic brain. In this talk we \nreview two potential applications of these multiscale biomarkers, epilepsy surgery and seizure forecasting.  \n \n Biographical Sketch:  Greg Worrell, MD, PhD is Chair of Clinical Neurophysiology, Director of Mayo Sys-\ntems Electrophysiology Laboratory \(MSEL prac-\ntice and research are focused on the evaluation and care of patients with medically resistant epilepsy nThrough MSEL he is currently pursuing the integration of large-scale neurophysiology, computing, and im-\naging for biomarker discovery. Ongoing clinical trials are investigating brain mapping, therapeutic brain nstimulation, and seizure forecasting.  \n \nDr. Worrell received his PhD in Physics from Case Western Reserve University and MD from University of \nTexas Medical Branch. He completed his Neurology training at Mayo Clinic. He is a member of the Ameri-\ncan Academy of Neurology, American Neurological Association, American Epilepsy Society, and IEEE. \n \n \nKaiming Ye  \n \nPanel #1: Funding and Trends in Neuroengineering  \n 


nBiographical Sketch:  Kaiming Ye is Professor and Department Chair of Bioengineer-\ning at State University of New York, Binghamton. He also serves as Program Director \nof Biomedical Engineering Program at National Science Foundation \(NSF imaging and \nvaccine development.  He is best known for his creative works in directing differentia-\ntion of human pluripotent stem cells into clinically relevant cell lineages under 3D environments and his \nwork in engineering fluorescence nanosensors for continuous glucose monitoring. He serves as Program \nEvaluator for Accreditation Board for Engineering and Technology \(ABET and co-chaired a number of international conferences and has been invited to deliver \nkeynote/plenary speech in numerous international and national conferences. He has published more than \n60 peer-reviewed papers and a book on human embryonic stem cells and a patent on glucose sensor. He \nserves as Executive Editor, Associate Editor, and member of Editorial Boards of 13 journals.  \n 


Reinhartz-Berger, and A. Sturm, “OPCAT-\na bimodal CASE tool for object-process based system\ndevelopment,” in 5th International Conference on En-\nterprise Information Systems \(ICEIS 2003  Olsen, R. Haagmans, T. J. Sabaka, A. Kuvshinov,\nS. Maus, M. E. Purucker, M. Rother, V. Lesur, and\nM. Mandea The Swarm End-to-End mission simulator\nstudy : A demonstration of separating the various con-\ntributions to Earths magnetic field using synthetic data,”\nEarth, Planets, and Space, vol. 58, pp. 359–370, 2006.\n[10] R. M Atlas, “Observing System Simulation Exper-\niments: methodology, examples and limitations,” in\nProceedings of the WMO Workshop on the Impact of\nvarious observing systems on Numerical Weather Pre-\ndiction, Geneva Switzerland, 1997.\n[11] M. Adler, R. C. Moeller, C. S. Borden, W. D. Smythe,\nR. F. Shotwell, B. F. Cole, T. R Spilker, N. J.\nStrange, A. E. Petropoulos, D. Chattopadhyay, J. Ervin,\nE. Deems, P. Tsou, and J. Spencer Rapid Mission\nArchitecture Trade Study of Enceladus Mission Con-\ncepts,” in Proceedings of the 2011 IEEE Aerospace\nConference, Big Sky, Montana, 2011.\n[12] J. Hauser and D. Clausing, “The house of quality,”\nHarvard Business Review, no. May-June 1998, 1988.\n[13] T. L. Saaty, “Decision Making With the Analytic Hier-\narchy Process,” International Journal of Services Sci-\nences, vol. 1, no. 1, pp. 83–98, 2008.\n[14] A. M. Ross, D. E Hastings, J. M. Warmkessel, and\nN. P. Diller, “Multi-attribute Tradespace Exploration as\nFront End for Effective Space System Design,” Journal\nof Spacecraft and Rockets, vol. 41, no. 1, 2004.\n[15] W. L. Baumol On the social rate of discount,” The\nAmerican Economic Review, vol. 58, no. 4, pp. 788–\n802, 1968.\n[16] M. K Macauley, “The value of information : Measuring\nthe contribution of space-derived earth science data to\nresource management,” Journal of Environmental Eco-\nnomics and Management, vol. 22, pp. 274–282, 2006.\n[17 S. Jamieson, “Likert scales: how to \(ab Dec.\n2004.\n[18] R. C. Mitchell and R. T. Carson, Using Surveys to\nValue Public Goods: The Contingent Valuation Method,\nS. Aller, Ed. Washington DC: Library of Congress,\n1989.\n[19] O. C. Brown, P. Eremenko, and P. D Collopy, “Value-\nCentric Design Methodologies for Fractionated Space-\ncraft: Progress Summary from Phase 1 of the DARPA\nSystem F6 Program,” AIAA SPACE 2009 Conference &\nExposition, 2009.\n[20] a. Stoffelen, G. J Marseille, F. Bouttier, D. Vasiljevic,\nS. de Haan, and C. Cardinali, “ADM-Aeolus Doppler\nwind lidar Observing System Simulation Experiment,”\nQuarterly Journal of the Royal Meteorological Society,\nvol. 132, no. 619, pp 1927–1947, Jul. 2006.\n[21] A. Newell and H. A. Simon, Human Problem Solving.\nEnglewood Cliffs, NJ: Prentice Hall, 1972.\n[22] R. Lindsay, B. G. Buchanan, and E. A. Feigenbaum,\n“DENDRAL: A Case Study of the First Expert System\nfor Scientific Hypothesis Formation,” Artificial Intelli-\ngence, vol. 61, no. 2, pp. 209–261, Jun 1993.\n[23] B. G. Buchanan and E. H. Shortliffe, Rule-based Ex-\npert Systems: the MYCIN experiments of the Stanford\nHeuristic Programming Project. Addison-Wesley,\n1984.\n[24] P. Hart, R. Duda, and M. Einaudi PROSPECTORA\ncomputer-based consultation system for mineral explo-\nration,” Mathematical Geology, no. November 1977,\n1978.\n[25] J. McDermott, “R1: A Rule-Based Configurer of Com-\nputer Systems,” Artificial lntell., 19 39, vol. 19, no. 1,\npp. 39–88, Sep. 1982.\n[26] K. J. Healey, “Artificial Intelligence Research and Ap-\nplications at the NASA Johnson Space Center,” AI\nMagazine, vol. 7, no. 3, pp. 146–152, 1986.\n[27] C Forgy, “Rete: A fast algorithm for the many pat-\ntern/many object pattern match problem,” Artificial in-\ntelligence, vol. 19, no. 3597, pp. 17–37, 1982.\n[28] L. A. Zadeh, “Fuzzy Sets,” Information and Control,\nvol. 8, no. 3, pp. 338–353, Jan. 1965.\n[29] C. Haskins, “INCOSE Systems engineering handbook -\nA guide for system life cycle processes and activities,”\nSystems Engineering, 2006.\n[30] N. Das, D. Entekhabi and E. Njoku, “An Algorithm for\nMerging SMAP Radiometer and Radar Data for High-\nResolution Soil-Moisture Retrieval,” IEEE Transactions\non Geoscience and Remote Sensing, vol. 49, no. 99, pp.\n1–9, 2011.\n[31] A. Messac and A. Ismail-Yahaya, “Multiobjective ro-\nbust design using physical programming,” Structural\nand Multidisciplinary Optimization, vol. 23, no. 5, pp.\n357–371, Jun. 2002.\n20\n[32] B. Cameron, “Value flow mapping: Using networks\nto inform stakeholder analysis,” Acta Astronautica,\nvol. 62, no. 4-5, pp. 324–333 Feb. 2008.\n[33] R. Yager, “On ordered weighted averaging aggregation\noperators in multicriteria decision making,” Systems ,\nMan and Cybernetics, IEEE Transactions on, no. 1, pp.\n183–190, 1988.\n[34] J. Fortin, D Dubois, and H. Fargier, “Gradual Num-\nbers and Their Application to Fuzzy Interval Analysis,”\nIEEE Transactions on Fuzzy Systems, vol. 16, no. 2, pp.\n388–402, Apr. 2008.\n[35] H. Apgar, “Cost Estimating,” in Space Mission Engi-\nneering: The new SMAD. Hawthorne, CA: Microcosm,\n2011, ch. 11.\n[36] Chalmers University of Technology, “Use of P-band\nSAR for forest biomass and soil moisture retrieval,”\nEuropean Space Agency, Tech Rep., 2004.\n[37] D. Selva, “Rule-based system architecting of Earth\nobservation satellite systems,” PhD dissertation, Mas-\nsachusetts Institute of Technology, 2012.\n[38] H. H. Agahi, G. Ball, and G. Fox, “NICM Schedule &\nCost Rules of Thumb,” in AIAA Space Conference 2009,\nno. September, Pasadena, CA, 2009, pp 6512–6512.\nBIOGRAPHY[\nDaniel Selva received a PhD in Space\nSystems from MIT in 2012 and he is\ncurrently a post-doctoral associate in\nthe department of Aeronautics and As-\ntronautics at MIT. His research inter-\nests 


focus on the application of multi-\ndisciplinary optimization and artificial\nintelligence techniques to space systems\nengineering and architecture, in partic-\nular in the context of Earth observa-\ntion missions. Prior to MIT, Daniel worked for four years\nin Kourou \(French Guiana particular, he worked as a specialist in\noperations concerning the guidance, navigation and control\nsubsystem and the avionics and ground systems. Daniel has\na dual background in electrical engineering and aeronautical\nengineering, with degrees from Universitat Politecnica de\nCatalunya in Barcelona, Spain, and Supaero in Toulouse,\nFrance. He is a 2007 la Caixa fellow, and received the Nortel\nNetworks prize for academic excellence in 2002.\nEdward F. Crawley received an Sc.D. in\nAerospace Structures from MIT in 1981.\nHis early research interests centered on\nstructural dynamics, aeroelasticity, and\nthe development of actively controlled\nand intelligent structures. Recently, Dr.\nCrawley’s research has focused on the\ndomain of the architecture and design of\ncomplex systems. From 1996 to 2003\nhe served as the Department Head of\nAeronautics and Astronautics at MIT, leading the strategic\nrealignment of the department. Dr. Crawley is a Fellow of\nthe AIAA and the Royal Aeronautical Society \(UK is the\nauthor of numerous journal publications in the AIAA Journal,\nthe ASME Journal, the Journal of Composite Materials, and\nActa Astronautica. He received the NASA Public Service\nMedal. Recently, Prof Crawley was one of the ten members of\nthe presidential committee led by Norman Augustine to study\nthe future of human spaceflight in the US.\n21\n 


Mars program. It would be designed for low mass, lowpower and low temperature operation. The S-band antenna would be a smaller, simpler version of the antenna that flew on Deep Impact. Other antenna options would be available The UHF antennas have been flown on previous Mars lander/rover missions. There would be other alternatives for the S-band antenna and the UHF transceiver on the hub could use a larger power amplifier to talk to an orbiting asset as a backup to the S-band radio  Risk  The highest risk items for telecom would be the single string design for each element and six year design lifetime. However, the S-band radio has flight heritage. The UHF radios would be a new design but do not require new technology. They would be an engineering development 8. SYSTEM SUMMARY Mass Equipment List Table 5 shows a summary of the mass and power for each of the subsystems for the remote instrument units. The mass of one remote unit without the specified instrument is 26.6 kg with contingency specified at the subsystem level based on heritage. Table 6 shows a summary of mass and power by subsystem for the hub. The mass of the hub with contingency is 44.9 kg. Table 7 shows a mass summary for the entire package with appropriate contingencies added per the JPL  s Flight Project Practices and Design Principles Design Principles. The package totals 218.2 kg which includes four remote units, five instruments, one hub, and the carrier container\(s Table 5. Mass and power summary for remote units Remote Unit Mass CBE Contingency Total Power Power 14.3 kg 30% 18.5 kg 0.180 W 2 W Night /Day Thermal 2.0 kg 29% 2.5 kg 0 W Telecom UHF 0.2 24% 0.3 kg 2 W 40 W CDS 0.7 kg 30% 0.9 kg 1 W \(1/60th per hour 3 W Structure 3.4 kg 30% 4.4 kg 0 W Total x 1 unit 20.6 kg 29% 26.6 kg Diplexer S-Band Downconverter STDN command data to S/C CDS Pr oc es so r S-Band Exciter 9 dBi S-Band LGA UHF Downconverter Small UHF transceiver command data to S/C CDS 


to S/C CDS Pr oc es so r UHF PA UHF Monopole Command data to C&amp;DH Command dat  to C&amp;DH  Figure 7  Telecom block diagram for the S-band \(top bottom  units would be located on the hub while the remote units only contain a UHF system 15 9. OPERATIONAL SCENARIOS Daytime Operations During the day, the remote units and hub would be fully operational. The remote units would collect data from their instruments as specified by the science team and store it in the controller memory. Table 8 shows the data volume expected from each instrument. After 24 hours have passed the UHF telecom system on the hub is used to poll each of the remote units separately at the designated interval for the stored data. The hub then transmits the data direct-to-Earth using the S-band radio. This requires a maximum of eight hours at 50 kbps each day using the DSN 34 m antennas However, data rates as high as 120 kbps may be achieved reducing the downlink time. The hub has enough memory margin to accumulate data from all the instruments for three Earth days before it must downlink the data Nighttime Operations During nighttime operations, data collection at the remote units would be taking place. The magnetometer and seismometer collect data continuously. However, the seismometer operates at a reduced mode where the sampling rate is reduced to one-half of the daytime rate which has been deemed more than adequate by the science team. The remaining instruments collect data at various intervals that would be conducive to the science team  s current requirements. Telecom events would not be scheduled during the lunar night. The data accumulates in the controller memory over 16 Earth days \(~14 days at an equatorial location would be considered a worse case so two days have been added to be conservative data volume summary for each instrument during a 16 Earth day lunar night. When the sun comes up and the hub and remote units have sufficient power to run the telecom systems the hub polls each remote unit separately at a designated interval similar to operations during the day. The data would then be transmitted to Earth gradually over the next few days using the S-band radio Table 7. Mass summary for total package Unit Mass Contingency Mass + contingency 4 Remote Units 82.4 kg 29% 106.4 kg Hub 35.2 kg 27% 44.9 kg Instruments including cabling 17.3 kg 30% 22.5 kg Carrier Container\(s Total with heritage contingency 153.1 kg 29% 197.5 kg  System contingency  21.4 kg 14 Total Package  43% 218.9 kg Table 8. Instrument data volumes received at the hub over one Earth day in daylight operations Science Instrument Compressed Data Volume Received at Hub 


Volume Received at Hub Mb Seismometer 236 Magnetometer 58 Heat Flow Probe 2 Seismic Sounder 700 Instrument &amp; Hub Engineering Data 6 Total 1002 Hub Memory 5000 Margin 80  Table 6. Mass and power summary for hub Hub/Base Unit Mass CBE Contingency Total Power Power 14.3 kg 30% 18.5 kg 0.180 W 2 W Night /Day Thermal 13.4 kg 28% 17.2 kg 0 W Telecom UHF Telecom S-band 3.4 15% 3.9 kg 2 W 40 W CDS 0.7 kg 30% 0.9 kg 1 W \(1/60th per hour W \(day Structure 3.4 kg 30% 4.4 kg 0 W Total x 1 unit 35.2 kg 27% 44.9 kg 2.38 W avg at night  16 10. SUMMARY AND CONCLUSIONS The ALGEP modular design builds upon lessons learned from Apollo era ALSEP package and technology advances since that time. ALGEP meets the requirements of long lifetime survival while maintaining continuous operation of its instruments during the lunar night which can last up to 16 days at equatorial regions on the Moon. The package would be powered using solar arrays and batteries alone not requiring nuclear sources to supply power or maintain thermal control. This concept is feasible due to its lowpower operational mode at night The modular design and packaging scheme provides flexibility in deployment across all regions of the Moon including the farside pending the availability of an orbital communications asset. The relatively light ALGEP package could be accommodated on astronaut activity support vehicles, providing a method to distribute the packages across the Moon, ultimately gaining a Moon-wide understanding of lunar geophysical properties ACKNOWLEDGEMENTS This work was supported by the NASA Lunar Sortie Science Opportunities Program The work described in this publication was carried out at the Jet Propulsion Laboratory, California Institute of Technology under a contract with the National Aeronautics and Space Administration References herein to any specific commercial product process or service by trade name, trademark, manufacturer 


or otherwise does not constitute or imply its endorsement by the United States Government or the Jet Propulsion Laboratory, California Institute of Technology REFERENCES 1] NRC  Scientific Context for Exploration of the Moon   Washington D.C.: The Nat. Academies Press, 2007 2] Apollo 11 Prelim. Sci. Rept., NASA SP-214, 1969 3] Apollo 12 Prelim. Sci. Rept., NASA SP-235, 1970 4] Apollo 14 Prelim. Sci. Rept., NASA SP-272, 1971 5] Apollo 15 Prelim. Sci. Rept., NASA SP-289, 1972 6] Apollo 16 Prelim. Sci. Rept., NASA SP-315, 1972 7] Apollo 17 Prelim. Sci. Rept., NASA SP-330, 1973 8] ALSEP Termination Report, NASA RP-1036, 1979 9] NRC  New Frontiers in the Solar System: an Integrated Exploration Strategy  Decadal Survey D.C.: The Nat. Academies Press, 2003 10] International Lunar Network Science Definition Team Final Report, 2009 BIOGRAPHY Melissa Jones is a member of the technical staff in the Planetary and Lunar Mission Concepts Group at the Jet Propulsion Laboratory.  Current work includes development of small Lunar lander concepts and instrument packages to deploy on the Moon,  Report Manager for the Titan Saturn System Mission Outer Planets Flagship Mission study, and staffing various concept studies as a systems engineer on Team X, JPL  s mission design team.  Melissa graduated from Loras College with a B.S. in Chemistry and a Ph.D. in Space and Planetary Science from the University of Arkansas  Linda Herrell has a BA in math/computer science/languages \(University of Texas fluids and heat transfer \(City College of New York addition to analytical work in computer science and thermal and structural analysis, she has worked as both a payload \(instrument Earth orbiting \(Hubble Space Telescope, Earth Observing System \(EOS Cassini as Proposal Manager for several NASA science missions She currently serves as the Program Architect for NASA's New Millennium Program    Table 9. Instrument data volumes generated at the hub after 16 Earth day lunar night Science Instrument Compressed Data Volume Received at Hub Mb Seismometer 1980 Magnetometer 920 Heat Flow Probe 5 Seismic Sounder 0 Instrument &amp; Hub Engineering Data 72 Total 2977 Hub Memory 5000 Margin 40  17 Bruce Banerdt has been a research geophysicist at the California Institute of Technology's Jet Propulsion Laboratory since 1977, where he does research in planetary geophysics and instrument development for flight projects. He has been on science teams for numerous planetary missions 


on science teams for numerous planetary missions including Magellan, Mars Observer, Mars Global Surveyor and Rosetta. He was the US Project Scientist for the international Mars NetLander mission, for which he was also principal investigator of the Short-Period Seismometer experiment, and is currently the Project Scientist for the Mars Exploration Rovers. He led the Geophysics and Planetary Geology group at JPL from 1993-2005, and is the JPL Discipline Program Manager for Planetary Geosciences. He has held several visiting appointments at the Institut de Physique du Globe de Paris. He has a BS in physics and a PhD in geophysics from the University of Southern California  David Hansen is a member of the technical staff in the Communications Systems and Operations Group at the Jet Propulsion Laboratory. Current work includes the development of the telecom subsystem for the Juno project. David received a B.S. in Electrical Engineering from Cornell University and an M.S. in Electrical Engineering from Stanford University  Robert Miyake is a member of the technical staff in the Mission and Technology Development Group at the Jet Propulsion Laboratory. Current work includes the development of thermal control subsystems for interplanetary flagship missions to Jupiter and Saturn missions to Mars and the Earth Moon, and is the lead Thermal Chair for the Advanced Project Design Team Robert graduated with a B. S. from San Jose State University, with extensive graduate studies at UCLA University of Washington, and University of Santa Clara  Steve Kondos is a consultant to the Structures and Mechanisms group at the Jet Propulsion Laboratory. He currently is generating the mechanical concepts for small Lunar Landers and Lunar Science Instrument packages in support of various Lunar mission initiatives. He also provides conceptual design, mass and cost estimating support for various Team X studies as the lead for the Mechanical Subsystem Chair. Steve is also involved with various other studies and proposals and provides mentoring to several young mechanical and system engineers. He graduated with a B.S. in Mechanical Engineering from the University of California, Davis and has 28 years of experience in the aerospace field ranging from detail part design to system of systems architecture development. He has worked both in industry and in government in defense, intelligence commercial and civil activities that range from ocean and land based systems to airborne and space systems. Steve has received various NASA, Air Force, Department of Defense and other agency awards for his work on such projects as the NASA Solar Array Flight Experiment, Talon Gold, MILSTAR, Iridium, SBIRS, Mars Exploration Rovers ATFLIR, Glory Aerosol Polarimeter System and several Restricted Programs  Paul Timmerman is a senior member of technical staff in the Power Systems Group at the Jet Propulsion Laboratory Twenty-five years of experience in spacecraft design including 22 at JPL, over 250 studies in Team-X, and numerous proposals. Current assignments include a wide variety of planetary mission concepts, covering all targets within the solar system and all mission classes. Paul graduated from Loras College with a B.S. in Chemistry in 1983  Vincent Randolph is a senior engineer in the Advanced Computer Systems and 


the Advanced Computer Systems and Technologies Group at the Jet Propulsion Laboratory. Current work includes generating Command and Data Handling Subsystem conceptual designs for various proposals and Team X.  He also supports Articulation Control and Electronics design activities for the Advanced Mirror Development project. Vincent graduated from the University of California at Berkeley with a B.S. in Electrical Engineering 18  pre></body></html 


i models into time and covariate dependent dynamic counterparts  ii models and reliability analysis in a more realistic manner  iii level  whether or not functional components \(loyal generals diagnose correctly and take proper actions such as fault mask of failed components \(traitors asymmetric  iv survivability analysis. Evolutionary game modeling can derive sustainable or survivable strategies \(mapped from the ESS in EGT such as node failures such as security compromise level modeling in the so-called three-layer survivability analysis developed in Ma \(2008a this article  v offer an integrated architecture that unite reliability survivability, and fault tolerance, and the modeling approaches with survival analysis and evolutionary game theory implement this architecture. Finally, the dynamic hybrid fault models, when utilized to describe the survival of players in EGT, enhance the EGT's flexibility and power in modeling the survival and behaviors of the game players which should also be applicable to other problem domains where EGT is applicable  5. OPERATIONAL LEVEL MODELING AND DECISION-MAKING  5.1. Highlights of the Tactical and Strategic Levels  Let's first summarize what are obtainable at both tactical and strategic levels. The results at both tactical and strategic levels are precisely obtainable either via analytic or simulation optimization. With the term precisely, we mean that there is no need to assign subjective probabilities to UUUR events. This is possible because we try to assess the consequences of UUUR events \(tactical level ESS strategies \(strategic level time prediction of survivability. The following is a list of specific points. I use an assumed Wireless Sensor Network WSN  i of UUUR events: \(a actions which can be treated as censored events; \(b Cont' of Box 4.2 It can be shown that the replicator differential equations are equivalent to the classical population dynamics models such as Logistic differential equation and LotkaVolterra equation \(e.g., Kot 2001 Logistic equation, or the limited per capital growth rate is similar to the change rate of the fitness  xfxfi which can be represented with the hazard function or survivor functions introduced in the previous section on survival analysis.  This essentially connects the previous survival analysis modeling for lifetime and reliability with the EGT modeling. However, EGT provides additional modeling power beyond population dynamics or survival analysis approaches introduced in the previous section. The introduction of evolutionary theory makes the games played by a population evolvable. In other words, each player \(individual 


other words, each player \(individual agent and players interact with each other to evolve an optimized system Box 4.3. Additional Comments on DHF Models  The above introduced EGT models are very general given they are the system of ordinary differential equations. Furthermore, the choice of fitness function f\(x complexity to the differential equation system.  The system can easily be turned into system of nonlinear differential equations. The analytical solution to the models may be unobtainable when nonlinear differential equations are involved and simulation and/or numerical computation are often required  In the EGT modeling, Byzantine generals are the game players, and hybrid fault models are conveniently expressed as the strategies of players; the players may have different failure or communication behaviors Furthermore, players can be further divided into groups or subpopulations to formulate more complex network organizations. In the EGT modeling, reliability can be represented as the payoff \(fitness, the native term in EGT of the game. Because reliability function can be replaced by survivor function, survival analysis is seamlessly integrated into the EGT modeling. That is, let Byzantine generals play evolutionary games and their fitness reliability function  The evolutionary stable strategy \(ESS counterpart of Nash equilibrium in traditional games ESS corresponds to sustainable strategies, which are resistant to both internal mutations \(such as turning into treason generals or nodes such as security compromises represent survivable strategies and survivability in survivability analysis. Therefore, dynamic hybrid fault models, after the extension with EGT modeling, can be used to study both reliability and survivability 13 risks such as competing risks which can be described with CRA; \(c captured with the shard frailty.  We believe that these UUUR events are sufficiently general to capture the major factors/events in reliability, security and survivability whose occurrence probabilities are hard or impossible to obtain  Instead of trying to obtain the probabilities for these events which are infeasible in most occasions, we focus on analyzing the consequences of the events.  With survival analysis, it is possible to analyze the effects of these types of events on survivor functions. In addition, spatial frailty modeling can be utilized to capture the heterogeneity of risks in space, or the spatial distribution of risks \(Ma 2008a d UUUR events introduced previously. These approaches and models that deal with the effects of UUUR events form the core of tactical level modeling  To take advantage of the tactical level modeling approaches it is obviously necessary to stick to the survivor functions or hazard functions models. In other words, survival analysis can deal with UUUR events and offer every features reliability function provides, but reliability function cannot deal with UUUR events although survivor function and reliability function have the exactly same mathematical definition. This is the junction that survival analysis plays critical role in survivability analysis at tactical level. However, we 


recognize that it is infeasible to get a simple metric for survivability similar to reliability with tactical level modeling alone. Actually, up to this point, we are still vague for the measurement of survivability or a metric for survivability. We have not answered the question: what is our metric for survivability? We think that a precise or rigorous definition of survivability at tactical level is not feasible, due to the same reason we cited previously  the inability to determine the probabilities of UUUR events However, we consider it is very helpful to define a work definition for survivability at the tactical level  We therefore define the survivability at tactical level as a metric, Su\(t t function or reliability function with UUUR events considered. In the framework of three-layer survivability analysis, this metric is what we mean with the term survivability. The "metric" per se is not the focus of the three-layer survivability analysis. It is not very informative without the supports from the next two levels  strategic and operational models.  However, it is obvious that this metric sets a foundation to incorporate UUUR effects in the modeling at the next two levels  Due to the inadequacy of tactical level modeling, we proposed the next level approach  strategic level modeling for survivability. As expected, the tactical level is one foundation of strategic level modeling ii objectives: \(a affect survivability which survival analysis alone is not adequate to deal with; \(b survivability at tactical level is necessary but not sufficient for modeling survivability, we need to define what is meant with the term survivability at strategic level  With regard to \(a behaviors or modes which have very different consequences. These failure behaviors can be captured with hybrid fault models. However, the existing hybrid fault models in fault tolerance field are not adequate for applying to survivability analysis. There are two issues involved: one is the lack of real time notion in the constraints for hybrid fault models \(e.g., N&gt;3m+1 for Byzantine Generals problem synthesize the models after the real-time notions are introduced. The solution we proposed for the first issue is the dynamic hybrid fault models, which integrate survivor functions with traditional hybrid fault models. The solution we proposed for the second issue is the introduction of EGT modeling  With regard to \(b modeling our problem at strategic level, EGT modeling is essentially a powerful optimization algorithm.  One of the most important results from EGT modeling is the so-called evolutionary stable strategies \(ESS We map the ESS in EGT to survivable strategies in survivability analysis.   Therefore, at the strategic level, our work definition for survivability refers to the survivable strategies or sustainable strategies in the native term of EGT, which can be quantified with ESS  In addition to integrating dynamic hybrid fault models another advantage for introducing EGT modeling at strategic level is the flexibility for incorporating other node behaviors \(such as cooperative vs. non-cooperative those behaviors specified in standard hybrid fault models, as well as anthropocentric factors such as costs constraints  Without UUUR events, both tactical and strategic level 


Without UUUR events, both tactical and strategic level models default to regular reliability models. This implies that, in the absence of UUUR events, reliable strategies are sustainable or survivable.  This also implies that three-layer survivability analysis defaults to reliability analysis however, the three-layer approach does offer some significant advantages over traditional reliability analysis, as discussed in previous sections. Nevertheless, when UUUR events exist, reliable strategies and survivable strategies are different. This necessitates the next operational level modeling  5.2. Operational Level Modeling and Decision-Making  When UUUR events are involved, we cannot make real time predictions of survivability at tactical and strategic levels This implies that the implementations of survivable 14 strategies need additional measures that we develop in this section.  Box 5.1 explains the ideas involved with possibly the simplest example  Figure 4 is a diagram showing a simplified relationship between action threshold survivability \(TS survivability \(ES view since both TS and ES are multidimensional and dynamic in practice. Therefore, the sole purpose of the diagram is to illustrate the major concepts discussed above The blue curve is the survivability when survivable strategies specified by ESS are implemented at some point before time s.  The system is then guaranteed to hold survivability above ES. In contrary, if no ESS implemented before time s, then the system quickly falls below to the survivable level at around 40 time units  T i m e 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 1 0 0 Su rv iv ab ili ty M et ric S u t 0 . 0 0 . 1 0 . 2 0 . 3 0 . 4 0 . 5 0 . 6 0 . 7 0 . 8 0 . 9 1 . 0 E S S  i s  I m p lm e n t e d N o  E S S  is  I m p lm e n t e d ts E S T S  Figure 4. A Diagram Showing the Relationship Between TS and ES, as well as timing of s and t, with s &lt; t  6. SUMMARY  The previous sections discussed the major building blocks 


The previous sections discussed the major building blocks for the new life-system inspired PHM architecture. This section first identifies a few minor aspects that have not been discussed explicitly but are necessary for the implementation of the architecture, and then we summarize the major building blocks in a diagram  6.1. Missing Components and Links  Optimization Objectives  Lifetime, reliability, fault tolerance, and survivability, especially the latter two, are application dependent. Generally, the optimization of reliability and survivability are consistent; in that maximization of reliability also implies maximization of survivability. However, when application detail is considered, optimization of lifetime is not necessarily consistent with the optimization of reliability. Consider the case of the monitoring sensor network as an example. The network reliability is also dependent on connectivity coverage, etc, besides network lifetime. What may be further complicated is the time factor. All of the network metrics are time-dependent. A paradoxical situation between lifetime and reliability could be that nodes never 'sleep                                                   


          Box 5.1 Operational Level Modeling  Assuming that the ESS solution for a monitoring sensor network can be expressed with the following simple algebraic conditions: survivability metric at tactical level SU = 0.7, Router-Nodes in the WSN &gt; 10%, Selfish Nodes &lt; 40%. Even with this extremely simplified scenario, the ESS strategies cannot be implemented because we do not know when the actions should be taken to warrant a sustainable system.  These conditions lack a correlation with real time  The inability to implement ESS is rooted in our inability to assign definite probabilities to UUUR events, which implies that we cannot predict when something sufficiently bad will jeopardize the system survivability What we need at the operational level is a scheme to ensure ESS strategy is in place in advance  The fundamental idea we use to implement the ESS strategy is to hedge against the UUUR events. The similar idea has been used in financial engineering and also in integrated pest management in entomology. This can be implemented with the following scheme  Let us define a pair of survivability metrics: one is the expected survivability \(ES threshold survivability or simply threshold survivability \(TS ES is equivalent to the survivability metric at tactical level. ES corresponds to ESS at strategic level, but they are not equivalent since ESS is strategy and ES is survivability. TS is the survivability metric value \(at tactical level and TS can be obtained from strategic level models. For example, TS = SU\(s t condition for the implementation of ESS. In other words, the implementation of strategies that ensures TS at time s will guarantee the future ES level at time t.  To make the implementation more reliable and convenient multiple dynamic TSs can be computed at time s1, s2 sk, with si &lt; t for all i.  These TS at times s1, s2, ..., sk should be monitored by some evaluation systems  Unlike tactical and strategic levels, the operational level modeling is approximate. The term "approximate means that we cannot predict the real time survivability or we do not know the exact time an action should be taken. Instead, the action is triggered when the monitored survivability metric SU\(r survivability \(TS scheme of TS and ES, we ensure the ES by taking preventative actions \(prescribed by ESS and triggered by the TS consequences of UUUR events  Figure 4 is a diagram showing the above concepts and the decision-making process involved 15 This wakefulness \(never 'sleep short period but at the expense of network lifetime. Of course, when the network is running out of lifetime, network reliability ultimately crashes. This example reminds us that 


reliability ultimately crashes. This example reminds us that multi-objective optimization should be the norm rather than exception  Constraints and Extensions  Many application specific factors and constraints are ignored in this article. For example, we mentioned about spatial heterogeneity of environment, but never present a mathematical description The spatial heterogeneity can be modeled with the so-called spatial frailty in multivariate survival analysis \(Ma 2008a  Evolutionary Algorithm  Evolutionary game modeling when implemented in simulation, can be conveniently implemented with an algorithm similar to Genetic Algorithms \(GA ESS in the evolutionary game model with simulation is very similar to GA. Dynamic populations, in which population size varies from generation to generation \(Ma &amp; Krings 2008f of node failures. Another issue to be addressed is the synchronous vs. asynchronous updating when topology is considered in the simulation. This update scheme can have profound influences on the results of the simulation. Results from cellular automata computing should be very useful for getting insights on the update issue  6.2. Summary and Perspective  To recapture the major points of the article, let us revisit Figure 3, which summarizes the principal modules of the proposed life-system inspired PHM architecture. The main inspiration from life systems is the notion of individuals and their assemblage, the population. Population is an emergent entity at the next level and it has emergent properties which we are often more concerned with. Survival analysis, which has become a de facto standard in biomedicine, is particularly suitable for modeling population, although it is equally appropriate at individual level. Therefore, survival analysis \(including competing risks analysis and multivariate survival analysis comprehensively in the context of PHM in a series of four papers presented at IEEE AeroSpace 2008 \(Ma &amp; Krings 2008a, b, c, &amp; d proposed architecture. Survival analysis constitutes the major mathematical tools for analyzing lifetime and reliability, and also forms the tactical level of the three-layer survivability analysis  Besides lifetime and reliability, two other major modules in Figure 3 are fault tolerance and survivability. To integrate fault tolerance into the PHM system, Dynamic Hybrid Fault DHF 2008e, Ma 2008a make real-time prediction of reliability more realistic and make real-time prediction of fault tolerance level possible DHF models also unite lifetime, reliability and fault tolerance under a unified modeling framework that consists of survival analysis and evolutionary game theory modeling  DHG models also form the partial foundation, or strategic level, for the three-layer survivability analysis. At the strategic level, the Evolutionary Stable Strategies \(ESS which is mapped to survivable or sustainable strategies, can be obtained from the evolutionary game theory based DHF models. When there is not any UUUR event involved reliability and survivability are consistent, and reliable strategies are survivable. In this case, the strategic level modeling up to this point is sufficient for the whole PHM system modeling, and there is no need for the next level  operational level modeling  When there are UUUR events in a PHM system, the 


When there are UUUR events in a PHM system, the inability to determine the occurrence probabilities of UUUR events makes the operational level modeling necessary Then the principle of hedging must be utilized to deal with the "hanging" uncertainty from UUUR events. In this case reliability strategies are not necessarily survivable strategies At the operational level modeling, a duo of survivability metrics, expected survivability \(ES survivability \(TS the survivable strategies \(ESS level are promptly implemented based on the decisionmaking rules specified with the duo of survivability metrics then the PHM system should be able to endure the consequences of potentially catastrophic UUUR events. Of course, to endure such catastrophic events, the cost may be prohibitively high, but the PHM system will, at least, warn decision-makers for the potentially huge costs.  It might be cheap to just let it fail  Figure 3 also shows several other modules, such as security safety, application systems \(such as Automatic Logistics CBM+, RCM, Life cycle cost management, Real-time warning and alert systems architectures, but we do not discuss in this paper. Generally the new architecture should be fully compatible with existing ones in incorporating these additional modules. One point we stressed is that PHM system can be an ideal place to enforce security policies. Enforcing security policies can be mandatory for PHM systems that demand high security and safety such as weapon systems or nuclear plant facilities.  This is because maintenance, even without human-initiated security breaches, can break the security policies if the maintenance is not planned and performed properly  In perspective, although I did not discuss software issues in this paper, the introduced approaches and models should provide sufficient tools for modeling software reliability and survivability with some additional extension. Given the critical importance of software to modern PHM systems, we present the following discussion on the potential extension to software domain. Specifically, two points should be noted: \(1 architecture to software should be a metric which can 16 replace the time notion in software reliability; I suggest that the Kolmogorov complexity \(e.g., Li and Vitanyi 1997 be a promising candidate \(Ma 2008a change is because software does not wear and calendar time for software reliability usually does not make much sense 2 software reliability modeling.  Extending to general survivability analysis is not a problem either. In this article I implicitly assume that reliability and survivability are positively correlated, or reliability is the foundation of survivability. This positive correlation does not have to be the case. A simplified example that illustrates this point is the 'limit order' in online stock trading, in which limit order can be used in either direction: that stock price is rising or falling.  The solution to allow negative or uncorrelated relationships between reliability and survivability are very straightforward, and the solutions are already identified in previous discussions. Specifically, multiple G-functions and multi-stage G-functions by Vincent and Brown \(2005 very feasible solution, because lifetime, reliability and survivability may simply be represented with multiple Gfunctions. Another potential solution is the accommodation of the potential conflicts between reliability and survivability with multi-objective GA algorithms, which I previously suggested to be used as updating algorithms in the optimization of evolutionary games  


 The integration of dynamic hybrid fault models with evolutionary game modeling allows one to incorporate more realistic and detailed failure \(or survival individual players in an evolutionary game. This is because dynamic hybrid fault models are supported by survival analysis modeling, e.g., time and covariate dependent hazard or survivor functions for individual players. If necessary, more complex survival analysis modeling including competing risks analysis and multivariate survival analysis, can be introduced.  Therefore, any field to which evolutionary game theory is applicable may benefit from the increased flexibility in modeling individual players.  Two particularly interesting fields are system biology and ecological modeling.  In the former field, dynamic hybrid fault models may find important applications in the study of biological networks \(such as gene, molecular, and cell networks 2008g conjecture that explains the redundancy in the universal genetic code with Byzantine general algorithm. In addition they conducted a comparative analysis of bio-robustness with engineering fault tolerance, for example, the strong similarity between network survivability and ecological stability \(Ma &amp; Krings 2008g survivability analysis can be applied for the study of survivals or extinctions of biological species under global climate changes \(Ma 2008b  In this paper, I have to ignore much of the details related to the implementation issues to present the overall architecture and major approaches clearly and concisely. To deal with the potential devils in the implementation details, a well funded research and development team is necessary to take advantages of the ideas presented here. On the positive side I do see the great potential to build an enterprise PHM software product if there is sufficient resource to complete the implementation. Given the enormous complexity associated with the PHM practice in modern engineering fields, it is nearly impossible to realize or even demonstrate the benefits of the architecture without the software implementation. The critical importance of PHM to mission critical engineering fields such as aerospace engineering, in turn, dictates the great value of such kind software product  6.3. Beyond PHM  Finally, I would like to raise two questions that may be interested in by researchers and engineers beyond PHM community. The first question is: what can PHM offer to other engineering disciplines? The second question is: what kinds of engineering fields benefit most from PHM? Here, I use the term PHM with the definition proposed by IEEE which is quoted in the introduction section of the paper  As to the first question, I suggest software engineering and survivability analysis are two fields where PHM can play significant roles. With software engineering, I refer to applying PHM principles and approaches for dealing with software reliability, quality assurance, and even software process management, rather than building PHM software mentioned in the previous subsection. For survivability analysis, borrowing the procedures and practices of PHM should be particularly helpful for expanding its role beyond its originating domain \(network systems that control critical national infrastructures is a strong advocate for the expansion of survivability analysis to PHM. Therefore, the interaction between PHM and survivability analysis should be bidirectional. Indeed, I see the close relationships between PHM, software engineering, and survivability as well-justified because they all share some critical issues including reliability survivability, security, and dependability  


 The answer to the second question is much more elusive and I cannot present a full answer without comparative analysis of several engineering fields where PHM has been actively practiced. Of course, it is obvious that fields which demand mission critical reliability and dependability also demand better PHM solutions. One additional observation I would like to make is that PHM seems to play more crucial roles for engineering practices that depend on the systematic records of 'historical' data, such as reliability data in airplane engine manufacturing, rather than on the information from ad hoc events.  This may explain the critical importance of PHM in aerospace engineering particularly in commercial airplane design and manufacturing.  For example, comparing the tasks to design and build a space shuttle vs. to design and manufacture commercial jumbo jets, PHM should be more critical in the latter task  17    Figure 2. States of a monitoring sensor node and its failure modes \(after Ma &amp; Krings 2008e     Figure 3. Core Modules and their Relationships of the Life System Inspired PHM Architecture    REFERENCES  Adamides, E. D., Y. A. Stamboulis, A. G. Varelis. 2004 Model-Based Assessment of Military Aircraft Engine Maintenance Systems Model-Based Assessment of Military Aircraft Engine Maintenance Systems. Journal of the Operational Research Society, Vol. 55, No. 9:957-967  Anderson, R. 2001. Security Engineering. Wiley  Anderson, R. 2008. Security Engineering. 2nd ed. Wiley  Bird, J. W., Hess, A. 2007.   Propulsion System Prognostics R&amp;D Through the Technical Cooperation Program Aerospace Conference, 2007 IEEE, 3-10 March 2007, 8pp  Bock, J. R., Brotherton, T., W., Gass, D. 2005. Ontogenetic reasoning system for autonomic logistics. Aerospace Conference, 2005 IEEE 5-12 March 2005.Digital Object Identifier 10.1109/AERO.2005.1559677  Brotherton, T., P. Grabill, D. Wroblewski, R. Friend, B Sotomayer, and J. Berry. 2002. A Testbed for Data Fusion for Engine Diagnostics and Prognostics. Proceedings of the 2002 IEEE Aerospace Conference  Brotherton, T.; Grabill, P.; Friend, R.; Sotomayer, B.; Berry J. 2003. A testbed for data fusion for helicopter diagnostics and prognostics. Aerospace Conference, 2003. Proceedings 2003 IEEE  Brown, E. R., N. N. McCollom, E-E. Moore, A. Hess. 2007 Prognostics and Health Management A Data-Driven Approach to Supporting the F-35 Lightning II. 2007 IEEE AeroSpace Conference  Byington, C.S.; Watson, M.J.; Bharadwaj, S.P. 2008 Automated Health Management for Gas Turbine Engine Accessory System Components. Aerospace Conference 2008 IEEE, DOI:10.1109/AERO.2008.4526610 


2008 IEEE, DOI:10.1109/AERO.2008.4526610 Environment Covariates &amp; Spatial Frailty Applications: AL; Life Cycle Mgmt; Real-Time Alerts CBM+, RCM, TLCSM; Secret Sharing and Shared Control 18 Chen, Y. Q., S. Cheng. 2005. Semi-parametric regression analysis of mean residual life with censored survival data Biometrika \(2005  29  Commenges, D. 1999. Multi-state models in Epidemiology Lifetime Data Analysis. 5:315-327  Cook, J. 2004. Contrasting Approaches to the Validation of Helicopter HUMS  A Military User  s Perspective Aerospace Conference, 2004 IEEE  Cook, J. 2007. Reducing Military Helicopter Maintenance Through Prognostics. Aerospace Conference, 2007 IEEE Digital Object Identifier 10.1109/AERO.2007.352830  Cox, D. R. 1972. Regression models and life tables.  J. R Stat. Soc. Ser. B. 34:184-220  Crowder, M. J.  2001. Classical Competing Risks. Chapman amp; Hall. 200pp  David, H. A. &amp; M. L. Moeschberger. 1978. The theory of competing risks. Macmillan Publishing, 103pp  Ellison, E., L. Linger, and M. Longstaff. 1997.  Survivable Network Systems: An Emerging Discipline, Carnegie Mellon, SEI, Technical Report CMU/SEI-97-TR-013  Hanski, I. 1999. Metapopulation Ecology. Oxford University Press  Hallam, T. G. and S. A. Levin. 1986. Mathematical Ecology. Biomathematics. Volume 17. Springer. 457pp  Hess, A., Fila, L. 2002.  The Joint Strike Fighter \(JSF concept: Potential impact on aging aircraft problems Aerospace Conference Proceedings, 2002. IEEE. Digital Object Identifier: 10.1109/AERO.2002.1036144  Hess, A., Calvello, G., T. Dabney. 2004. PHM a Key Enabler for the JSF Autonomic Logistics Support Concept. Aerospace Conference Proceedings, 2004. IEEE  Hofbauer, J. and K. Sigmund. 1998. Evolutionary Games and Population Dynamics. Cambridge University Press 323pp  Hougaard, P. 2000. Analysis of Multivariate Survival Data Springer. 560pp  Huzurbazar, A. V. 2006. Flow-graph model for multi-state time-to-event data. Wiley InterScience  Ibrahim, J. G., M. H. Chen and D. Sinha. 2005. Bayesian Survival Analysis. Springer. 481pp  Kacprzynski, G. J., Roemer, M. J., Hess, A. J. 2002. Health management system design: Development, simulation and cost/benefit optimization. IEEE Aerospace Conference Proceedings, 2002. DOI:10.1109/AERO.2002.1036148  Kalbfleisch, J. D., and R. L. Prentice, 2002. The Statistical Analysis of Failure Time Data. Wiley-InterScience, 2nd ed  Kalgren, P. W., Byington, C. S.   Roemer, M. J.  2006 Defining PHM, A Lexical Evolution of Maintenance and Logistics. Systems Readiness Technology Conference 


Logistics. Systems Readiness Technology Conference IEEE. DOI: 10.1109/AUTEST.2006.283685  Keller, K.; Baldwin, A.; Ofsthun, S.; Swearingen, K.; Vian J.; Wilmering, T.; Williams, Z. 2007. Health Management Engineering Environment and Open Integration Platform Aerospace Conference, 2007 IEEE, Digital Object Identifier 10.1109/AERO.2007.352919  Keller, K.; Sheahan, J.; Roach, J.; Casey, L.; Davis, G Flynn, F.; Perkinson, J.; Prestero, M. 2008. Power Conversion Prognostic Controller Implementation for Aeronautical Motor Drives. Aerospace Conference, 2008 IEEE. DOI:10.1109/AERO.2008.4526630  Klein, J. P. and M. L. Moeschberger. 2003. Survival analysis techniques for censored and truncated data Springer  Kingsland, S. E. 1995. Modeling Nature: Episodes in the History of Population Ecology. 2nd ed., University of Chicago Press, 315pp  Kot, M. 2001. Elements of Mathematical Ecology Cambridge University Press. 453pp  Krings, A. W. and Z. S. Ma. 2006. Fault-Models in Wireless Communication: Towards Survivable Ad Hoc Networks Military Communications Conference, 23-25 October, 7 pages, 2006  Lamport, L., R. Shostak and M. Pease. 1982. The Byzantine Generals Problem. ACM Transactions on Programming Languages and Systems, 4\(3  Lawless, J. F. 2003. Statistical models and methods for lifetime data. John Wiley &amp; Sons. 2nd ed  Line, J. K., Iyer, A. 2007. Electronic Prognostics Through Advanced Modeling Techniques. Aerospace Conference 2007 IEEE. DOI:10.1109/AERO.2007.352906  Lisnianski, A., Levitin, G. 2003. Multi-State System Reliability: Assessment, Optimization and Applications World Scientific  Liu, Y., and K. S. Trivedi. 2006. Survivability Quantification: The Analytical Modeling Approach, Int. J of Performability Engineering, Vol. 2, No 1, pp. 29-44  19 Luchinsky, D.G.; Osipov, V.V.; Smelyanskiy, V.N Timucin, D.A.; Uckun, S. 2008. Model Based IVHM System for the Solid Rocket Booster. Aerospace Conference, 2008 IEEE.DOI:10.1109/AERO.2008.4526644  Lynch, N. 1997. Distributed Algorithms. Morgan Kaufmann Press  Ma, Z. S. 1997. Demography and survival analysis of Russian wheat aphid. Ph.D. dissertation, Univ. of Idaho 306pp  Ma, Z. S. 2008a. New Approaches to Reliability and Survivability with Survival Analysis, Dynamic Hybrid Fault Models, and Evolutionary  Game Theory. Ph.D. dissertation Univ. of Idaho. 177pp  Ma, Z. S. 2008b. Survivability Analysis of Biological Species under Global Climate Changes: A New Distributed and Agent-based Simulation Architecture with Survival Analysis and Evolutionary Game Theory. The Sixth 


International Conference on Ecological Informatics. Dec 25, 2008. Cancun, Mexico  Ma, Z. S. and E. J. Bechinski. 2008. A Survival-Analysis based  Simulation Model for Russian Wheat Aphid Population Dynamics. Ecological Modeling, 216\(2 332  Ma, Z. S. and A. W. Krings. 2008a.  Survival Analysis Approach to Reliability Analysis and Prognostics and Health Management \(PHM  AIAA AeroSpace Conference, March 1-8, 2008, Big Sky, MT, 20pp  Ma, Z. S. and A. W. Krings. 2008b. Competing Risks Analysis of Reliability, Survivability, and Prognostics and Health Management \(PHM  AIAA AeroSpace Conference, March 1-8, 2008.  Big Sky, MT. 20pp  Ma, Z. S. and A. W. Krings. 2008c. Multivariate Survival Analysis \(I Dependence Modeling", Proc. IEEE  AIAA AeroSpace Conference, March 1-8, 2008, Big Sky, MT. 21pp  Ma, Z. S. and A. W. Krings., R. E. Hiromoto. 2008d Multivariate Survival Analysis \(II State Models in Biomedicine and Engineering Reliability IEEE International Conference of Biomedical Engineering and Informatics, BMEI 2008.  6 Pages  Ma, Z. S. and A. W. Krings. 2008e. Dynamic Hybrid Fault Models and their Applications to Wireless Sensor Networks WSNs Modeling, Analysis and Simulation of Wireless and Mobile Systems. \(ACM MSWiM 2008 Vancouver, Canada  Ma, Z. S. &amp; A. W. Krings. 2008f. Dynamic Populations in Genetic Algorithms. SIGAPP, the 23rd Annual ACM Symposium on Applied Computing, Ceara, Brazil, March 16-20, 2008. 5 Pages  Ma, Z. S. &amp; A. W. Krings. 2008g. Bio-Robustness and Fault Tolerance: A New Perspective on Reliable, Survivable and Evolvable Network Systems, Proc. IEEE  AIAA AeroSpace Conference, March 1-8, Big Sky, MT, 2008. 20 Pages  Ma, Z. S.  and A. W. Krings. 2009. Insect Sensory Systems Inspired Computing and Communications.  Ad Hoc Networks 7\(4  MacConnell, J.H. 2008. Structural Health Management and Structural Design: An Unbridgeable Gap? 2008 IEEE Aerospace Conference, DOI:10.1109/AERO.2008.4526613  MacConnell, J.H. 2007. ISHM &amp; Design: A review of the benefits of the ideal ISHM system. Aerospace Conference 2007 IEEE. DOI:10.1109/AERO.2007.352834  Marshall A. W., I. Olkin. 1967. A Multivariate Exponential Distribution. Journal of the American Statistical Association, 62\(317 Mar., 1967  Martinussen, T. and T. H. Scheike. 2006. Dynamic Regression Models for Survival Data. Springer. 466pp  Mazzuchi, T. A., R. Soyer., and R. V. Spring. 1989. The proportional hazards model in reliability. IEEE Proceedings of Annual Reliability and Maintainability Symposium pp.252-256  Millar, R.C., Mazzuchi, T.A. &amp; Sarkani, S., 2007. A Survey of Advanced Methods for Analysis and Modeling of 


of Advanced Methods for Analysis and Modeling of Propulsion System", GT2007-27218, ASME Turbo Expo 2007, May 14-17, Montreal, Canada  Millar, Richard C., "Non-parametric Analysis of a Complex Propulsion System Data Base", Ph.D. Dissertation, George Washington University, June 2007  Millar, R. C. 2007. A Systems Engineering Approach to PHM for Military Aircraft Propulsion Systems. Aerospace Conference, 2007 IEEE. DOI:10.1109/AERO.2007.352840  Millar, R. C. 2008.  The Role of Reliability Data Bases in Deploying CBM+, RCM and PHM with TLCSM Aerospace Conference, 2008 IEEE, 1-8 March 2008. Digital Object Identifier: 10.1109/AERO.2008.4526633  Nowak, M. 2006. Evolutionary Dynamics: Exploring the Equations of Life. Harvard University Press. 363pp  Oakes, D. &amp; Dasu, T. 1990. A note on residual life Biometrika 77, 409  10  Pintilie, M. 2006. Competing Risks: A Practical Perspective.  Wiley. 224pp  20 Smith, M. J., C. S. Byington. 2006. Layered Classification for Improved Diagnostic Isolation in Drivetrain Components. 2006 IEEE AeroSpace Conference  Therneau, T. and P. Grambsch. 2000. Modeling Survival Data: Extending the Cox Model. Springer  Vincent, T. L. and J. L. Brown. 2005. Evolutionary Game Theory, Natural Selection and Darwinian Dynamics Cambridge University Press. 382pp  Wang. J., T. Yu, W. Wang. 2008. Research on Prognostic Health Management \(PHM on Flight Data. 2008 Int. Conf. on Condition Monitoring and Diagnosis, Beijing, China, April 21-24, 2008. 5pp  Zhang, S., R. Kang, X. He, and M. G. Pecht. 2008. China  s Efforts in Prognostics and Health Management. IEEE Trans. on Components and Packaging Technologies 31\(2             BIOGRAPHY  Zhanshan \(Sam scientist and earned the terminal degrees in both fields in 1997 and 2008, respectively. He has published more than 60 peer-refereed journal and conference papers, among which approximately 40 are journal papers and more than a third are in computer science.  Prior to his recent return to academia, he worked as senior network/software engineers in semiconductor and software industry. His current research interests include: reliability, dependability and fault tolerance of distributed and software systems behavioral and cognitive ecology inspired pervasive and 


behavioral and cognitive ecology inspired pervasive and resilient computing; evolutionary &amp; rendezvous search games; evolutionary computation &amp; machine learning bioinformatics &amp; ecoinformatics                 pre></body></html 


