pLSM: A Highly Efficient LSM-Tree Index Supporting Real-Time Big Data \nAnalysis \nJin Wang, Yong Zhang, Yang Gao, Chunxiao Xing \nResearch Institute of Information Technology \nTsinghua National Laboratory for Information Science and Technology \nDepartment of Computer Science and Technology, Tsinghua University, Beijing 100084 China \n{wangjin12, yang-gao10}@mails.tsinghua.edu.cn, {zhangyong05,xingcx}@tsinghua.edu.cn \n \n Abstract—Big Data boosts the development of data \nmanagement and analysis in database systems but it also poses \na challenge to traditional database. NoSQL databases are \nprovided to deal with the new challenges brought by Big Data \nbecause of its high performance, storage, scalability and \navailability. In NoSQL databases, it is an essential \nrequirement to provide scalable and efficient index services \nfor real-time data analysis. Most existing index solutions focus \non improving write throughput, but at the cost of poor read \nperformance. We designed a new plug-in system PuntStore \nwith pLSM \(Punt Log Structured Merge Tree read performance, Cache Oblivious Look-ahead \nArray \(COLA nnovel compact algorithm in bulk deletion to support migration \nof data from temporary storage to data warehouse for further \nanalysis. \n \nKeywords--Big Data; index; Log Structured Merge Tree; Cache \nOblivious bulk deletion; write performance \nI.   INTRODUCTION \n \nIn the process of informatization, the amount of data has \nbeen increasing at a high speed for both individuals and \norganizations. Data has played a significant role in every \nindustry and business function field, bringing us into the \nera of data.  Therefore such problems brought by “Big Data” \nhave been a common concern of the field. The \nrequirements for Big Data management and analysis are \nwidely different from those of traditional data management. \nHuge data volumes need to be kept online for querying and \nanalyzing. In addition, queries need to be answered \nimmediately to enable real-time analysis and decision \nmaking.  \nTo tackle such problems, we designed a plug-in system ncalled PuntStore. PuntStore makes optimization in storage, \ndistribution, scalability, heterogeneity and security. To \nsatisfy the needs for temporary storage and make real-time \nanalysis, we designed a non-relational database PuntDB. \nJust like the SAP HANA database [2], PuntDB provides the \nfoundation for other high-level applications in PuntStore. \nTo support real-time data analysis well, index service in \nPuntDB must be able to deal with large-scale, complex data \nand provide immediate availability of operational data. A nhighly efficient index could improve the speed of data \nretrieval.  \nWe must organize an index into a particular kind of data \nstructure in order to make use of it. B-Tree is a general type \nof data structure to support index in relational databases. \nHowever, B-Tree has a problem of aging and suffers from \ndisk-seek bottlenecks when faced with large volume of data \n[10]. Generally speaking, the analysis of Big Data relies on na storage type for analytical workloads. The analytical \nworkloads emphasize write throughput and sequential reads \nover random access. Thus a data structure supporting better \nwrite performance is needed. \nThe Log Structured Merge Tree \(LSM-Tree  read performance for improving write throughput. \nCache Oblivious Streaming B-Tree is a dictionary that nimplements efficiently insertions and range queries [5]. A \nwidely used kind of Cache Oblivious Streaming B-Tree is \nCache Oblivious Look-ahead Array \(COLA in the same \nblock instead of scattered on disk. Therefore the seek time \nwill be much shorter. However, COLA can’t make good \nuse of memory as buffer. Moreover, it doesn’t support \nefficient deletion. Thus, we design a new index Punt LSM \n\(pLSM systems. \nIn the following sections, we will discuss the specific \nimplementation of pLSM index. Section 2 provides the \nnecessary background of our pLSM structure. Section 3 is \nan overview of the index structures with the similar goal of \nour pLSM. Section 4 describes our design of pLSM in \ndetail. We also presented a new compact algorithm to solve \nthe problem of deletion for COLA. We offered the analysis \nof advantages of pLSM in bulk deletion. Section 5 is about \nthe testing of our design of pLSM, showing how it \noutperformed B-Tree and the original LSM-Tree on \ndifferent kinds of workloads.  \nII.    BACKGROUND \nNowadays, traditional magnetic disk still acts as the \nmain storage media, so the performance of storage system \nis decided by hard disk seek time. Storage capacity per \ndisk will continue to grow quickly, but it seems that seek \ntime will change slowly. To make full use of the \nbandwidth and cope with random I/O, proper data \nstructures for external memory are needed such as index \nfor highly efficient query and inserting. \n2013 IEEE 37th Annual Computer Software and Applications Conference\n0730-3157/13 $26.00 © 2013 IEEE\nDOI 10.1109/COMPSAC.2013.40\n240\nA. B-Tree \nB-Tree is a balanced search tree structure designed for \nexternal memory [4]. A large number of precious work \nshows that B-Tree provides optimal random reads. \nHowever, when a large number of elements are added into \nthe tree, the external memory will become fragmentized \nand more random I/Os will occur, which will lead to long \nseek time. In order to improve write performance, a write-\noptimized structure is needed. \nB. LSM-Tree \nA LSM-Tree is an index that consists of one smallest 


ncomponent in memory and several larger B-Tree \ncomponents on disk [9]. Figure 1 shows the structure of a ntypical LSM-Tree. The in-memory component is defined as \nC0 and could be updated in place. The newest data is ninserted into C0. After C0 is full, it is merged with the next \nsmallest component C1. Other components on disk increase \nin size exponentially to ensure that the merge cost is \nminimized.  \n \n \nThe fundamental mechanism of LSM-Tree is to defer the \nprocess of putting index changes into disk and deal with the \nwrite operation in batch. By streaming data in and flushing \nit back to disk as one streaming operation, we can amortize \nthe disk I/O cost. Moreover, since all components on disk \nare produced by merging with the next smaller component, \nLSM-Tree is updated by eliminating random I/O. However, \nthe scan operations in LSM-Tree were not as efficient as \nthose in B-Tree. \nC. Cache-Oblivious Data Structure \nThe B-Tree mentioned above is typically analyzed in the \nDisk Access Machine model. This model makes an \nassumption that the memory of size M is organized into \nblocks of size B and the external memory is arbitrarily \nlarge. Within the DAM model searching is optimal and \ninsertion costs O M.Frigo [5], the \nblock size B is unknown to the algorithm so that any \nmemory-specific parameterization could be avoided. Of the \nextant cache oblivious structures, the most widely \nmentioned is Cache Oblivious Look-ahead Array \(COLA B O  or completely empty. Each full array is \nsorted so that we can use binary search to accelerate \nsearching in one array. The kth array is of size \b\t  and \narrays are stored in contiguously in memory. An example \nof COLA is shown in Figure 2. When an element is \ninserted into a full array, the array will be merged into the \nnext array until all the elements are contained in full arrays. \n \n \n \nIII.    RELATED WORK \nAlthough original LSM-Tree could improve write \nperformance by eliminating random I/O, it scarifies read \nperformance since in the worst case it involves a maximum \nof n I/Os \(n is the number of components on hard disk component of the tree needs to be checked. Besides, it \nalso brings long write latency because of the asynchronous \nmerge procedure between different components on disk. \nThe bLSM-Tree designed by Sears is a new LSM-Tree \nvariant [3]. It improves excessive read amplification by \nprotecting C1, C2…CN tree component with Bloom Filters. \nThis method could efficiently reduce query time when the \nelement doesn’t exist. In order to eliminate long write \npauses and provide optimal write performance, bLSM-Tree \nimplements a mechanism called spring and gear schedule \nto replace the traditional partition schedule [7] and ensure \nthe completion of merge processes at the same time. The \nprimary limitation of bLSM is that the time of merging \nprocess is bound with the timing insertions into C0. To \navoid blocking caused by this bound, we must halve the \nsize of memory. Besides, we need to estimate the costs of \nfuture merge in order to apply this approach. This is not nalways possible in real-time systems. \nSimilar work has been done to improve read \nperformance. TokuDB is a store engine for MySQL[1]. It \nuses an efficient index to speed up query and attain high \nscalability. By leveraging write-optimized compression, \nTokuDB achieves up to a 90% reduction in HDD and flash \nstorage requirements, without impacting performance [10]. \nFractal Tree Index implemented by TokuDB is an efficient nsolution to improve writes performance with less tradeoff \non read performance. It could run 10 to 100 times faster \ninserts than B-Tree. Although the query time for Fractal \nTree is theoretically no better than B-Tree it in fact \nperforms much better since Random I/Os are avoided. \nHowever, many problems remain to be solved by TokuDB. \nFor instance, TokuDB can’t support efficient deletion and \nupdating. And its record’s size shouldn’t be too large, so \nFigure 1. A general structure of LSM-Tree \nFigure 2. An example of Cache Oblivious Look-ahead Array \n241\nTokuDB can’t be used to store BLOB \(Binary Large \nObject PLSM  \nAs mentioned in the previous section, it is crucial to \nensure lookup and scan performance while seeking for \nwrite optimization. To attain that goal, we present a new \nLSM-Tree variant pLSM to address the limitation of LSM-\nTree mentioned above. Just like the bLSM implementation \nis based upon Rose, a column-compressed, log-structured \nreplication [8], we base pLSM on our PuntStore system. \nWe implemented Skip List as the in-memory component \nfor pLSM, which has a fast insertion and can improve the \nspeed of random access indexed lookups. For components \non disk, we implements Cache Oblivious Look-ahead \nArrays to overcome the shortcomings of “aging” in B-Trees. \nTo fulfill the task of bulk deletion, we design a new \ncompact algorithm to make full use of disk space. \nA.  The Design of PuntDB \nPuntDB is an optimized NoSQL database to support the \nstorage and analysis of Big Data. PuntDB provides the \nhigh-performance data storage and processing engine \nwithin Punt Store. Originally, PuntDB uses B-Tree as its \nindex structure. However, B-Tree index doesn’t perform \nwell in the task of wireless sensor network for data \ncollection. When large volume of data swarms into the \ndatabase at a high speed, the B-Tree index can’t perform so \nwell as to support real-time insertion and query as expected \nbefore.  \nThe reason is the “aging” problem of B-Tree. As we \nknow 


the B-Tree performance is disk-bandwidth limited. \nHigh entropy insertion in B-Tree has a poor data locality nthus causing more random I/O.  This also happens in the \ncase of range query. In a new-built B-Tree, range queries \nhave good locality since leaf nodes are laid out sequentially \non disk during this period. But when B-Tree becomes aged, \nthe leaf blocks are scattered across the disk because the \nusage of bandwidth will drop to as little as 1%.[10] To \navoid aging and eliminate random I/O, we designed pLSM \nindex instead of B-Tree to support range query in the \nbackground of Big Data. \nB. COLA For Disk Component \nTo achieve high read performance of our pLSM-Tree, we \nimplement Cache Oblivious Look-ahead Array as the \nexponent on disk. To speed up searching in external \nmemory, we protected each component on disk with a \nBloom Filter, just as bLSM does. Considering the balance \nbetween insertion throughput and lookup cost, pLSM \nconsists of three components: C0 in memory and C1, C2 on \ndisk. In this section we describe the improvements made by napproaching COLA by M.A. Bender as the component on \ndisk instead of B-Tree [6].  \nAs is analyzed in the previous section, the block transfer \nfor insertion or deletion needs much fewer disk seeks. \nWhen an element is added into the COLA while the first \narray is full, a series of merge will happen to maintain the nstructure of COLA. As each merge is performed between \nthe adjacent arrays, an element is at most involved in nmerges. Since the process of merge sort is very I/O \nefficient, such merge operation will not lead to extra disk \nI/Os. The cost for merging per element is O\(1/B  merged. So with \nthe algorithm in Figure3, average insertion cost is O\( \n\n O array for temporary storage. At the \nbeginning of each step, the shadow array is empty. As is \nshown in Figure 6, during the merging process each array \nwill be merged to the shadow array with the same size and \nthen to the next array. This measure trades off space for \ntime and ensures an efficient insertion performance. \n nFigure 3. The Insert Algorithm for COLA  \nBloom Filter is a random data structure with high space nefficiency. By implementing Bloom Filter to the \ncomponents on disk, we could reduce the cost of point \nquery from N to 1+N/100.\(N is the number of component \non disk nnumber of elements to be added, not the size of them, so \nthe memory overhead of Bloom Filter is insignificant. \nOne limitation of Bloom Filter is false positive, we may \nwrongly judge a non-exist element as existing in the set. \nAnother limitation is that Bloom Filter doesn’t support \ndeletion. To support deletion in our pLSM, some \nmodifications need to be implemented. \nThe LSM-Tree could transform random I/O to sequential \nI/O by performing batch write. A COLA with N elements \nhave log N arrays, one array for each power of two. This \nmechanism could ensure that all the elements in one COLA \ncould fill up one or several blocks which provide great \n242\nconvenience for lookups and scans. So we chose COLA as \nthe component of external memory. \nAnother advantage of COLA is that each array is sorted, so \nwe can easily use binary search on each of them to attain \nO searching is O\(\f  need to scan \neach full level to judge whether a key of the element is in \nthe range. But when dealing with mass amount of data, the \ntime cost for range query in COLA is generally less than \nthat in B-Tree. Because all the elements of COLA are \ncentralized stored in consecutive blocks, while in an aged \nB-Tree even elements on contiguous blocks may scattered \non the disk. However, in our experiment the range query of \npLSM doesn’t perform well due to limited data size. \n \n \n \nIn a LSM-Tree when Ci component is full, it will be \nmerged into the next smaller component Ci+1 in a process \ncalled rolling merge, as is shown in Figure 4. This merge nprocess is closely related to online B-Tree merging. B-Tree \nmerging addresses situations where contents of a single \ntable index have been split across two physical B-Trees that \nnow need to be reconciled [12]. This process could reduce \nthe storage requirements but add complexity of the merging \nalgorithm. Besides, since B-Tree needs to maintain a global \nordered array of leaf nodes, extra cost would be needed in \nthe process of rolling merge. This procedure needs complex \nmechanism of concurrent control and locking operation, \nwhich could not meet the need of availability for NoSQL \ndatabases.  \nIf COLA instead of B-Tree is used in pLSM, the rolling \nmerge process could be simplified. COLA doesn’t call for a \nglobal ordered structure, so what we need to do is just \ninsert all the elements into Ci+1, with the disk I/O \nefficiency of merge process. It is also much easier to \nschedule the merge process between components.  \nC.  Dealing with Bulk Deletion \nOne of COLA’s limitations is that it hasn’t yet supported \nefficient bulk deletion operation. This is because once an nelement is removed, all of the other elements need to be \nreallocated to the upper levels to maintain the whole \nstructure since no partly full arrays is permitted in COLA. \nSo there has not been an efficient way of deletion for \nTokuDB. \nTo support real-time data warehouse, we must ensure the \nnon-stop availability and 


rapid updating [14]. Since \nupdating is a deletion followed by an insertion, the ability \nto efficiently delete bulk of data from a table is very \nimportant. Therefore, it is necessary for our pLSM index to \nsupport efficient bulk deletion. T. Lilja [13] provided an \nefficient two-phase online bulk deletion algorithm for B-\nTree index on a multi-attribute key, which could be \nperformed similarly in our pLSM. To begin with, we could \nmark elements in arrays of COLA as deleted in the first \nphase. These marked elements still take up spaces and will \nbe merged to next arrays once new elements are added. But \nthey are invisible for query operation since they have been \nmarked as deleted. These elements will be physically \ndeleted when the component is full and the process of \nrolling merge begins. Or after the empty rate of a COLA \nreaches its threshold value, the compact algorithm will start \nto clear the deleted item. In the implementation of COLA nthere is no structure modification at all. What we need to do \nis just adding the elements that are not marked as deletion \nto the next component and discarding the marked ones. \nAnd since the size of arrays in COLA is a power of 2, we \ncould take advantage of this feature and merge them into \nthe next component in batch. In order to deal with deletion \nin the largest component, the pLSM needs to be regular \ncompacted. The compact algorithm will be shown in \nSection E later.  \nD. A Variant of Bloom Filter \nIn the previous section we have discussed about using \nBloom Filter to speed up judging whether a given element \nis in the LSM Tree However, the original Bloom Filter \ndoesn’t support deletion because one bit in the Bloom Filter \nis shared by several keys. If we simply set a bit related to \none key from 1 to 0, many other keys will be influenced nThis makes components in external memory append-only \nones.  To solve this problem, we created a variant of Bloom \nFilter as Delete Filter and protected the on-disk \ncomponents with it together with Bloom Filter.  \nThe Delete Filter is the same as Bloom filter, except that \nwe add the operation of delete. In the operation of delete, \nwe set the bit corresponding to the given key from 1 to 0. \nThis operation is an obvious mistake in Bloom Filter, but \nwhen we combine the usage of Bloom Filter and Delete \nFilter, this mistake will not affect the accuracy of query and \nonly brings some extra overhead in searching a non-\nexisting element in COLA. When an element is marked as \ndeleted, we will add it into the Delete Filter. When judging \nwhether a component contains a given key, we first search \nit in the Delete Filter. If it is in the Delete Filter, we will nconclude that it doesn’t exist. If it is not in the Delete Filter, \nwe will turn to the Bloom Filter as we usually do. \nWhen we update a record with a given key, we need to \ndelete the record and re-insert it with the same key but \ndifferent value. Then we would first set the corresponding \nFigure 4.The process of Rolling Merge \n243\nbit of the key from 1 to 0 in Delete Filter. Thus it will \ninevitably influence other keys. For instance, one bit in \nDelete Filter is related to three keys A, B and C. When we \nre-insert key A and set this bit to 0, if we continue to judge \nkey B, the Delete Filter will wrongly judge that B exists in \nthe component while in fact B has been deleted. But \naccording to our Search algorithm \(in the chart of algorithm \n2 we wrongly judge B is in the component, since we \ncan’t find it in any array of COLA, the search algorithm nwill return null value in the end.  The mistake caused by \nDelete Filter only results in extra search cost for looking up \na non-exist element. But at the same time, we could support \ndeletion as well as insertion for on-disk components \nprotected by Bloom Filter. And since the number of \nupdated elements comprises only a small part, the overhead \nbrought by Delete Filter will be very tiny. Thus it is a \nreasonable solution to use Delete Filter to support deletion \nin pLSM while implementing Bloom Filter to speed up \nsearching. \nE Compact Algorithm for COLA \n \n \n \nWhen more elements are logically deleted, there will be \nmany “holes” in COLA. In order to reduce system \noverhead, C1 component must be compacted before being \nmerged into C2. C2 component also needs compacting to \nphysically remove marked elements. \nTo solve the above problem, we design a compact \nalgorithm for our pLSM. With the help of compacting, we \ncould and improve space utilization in pLSM. To describe \nthe degree of fragments in COLA, we present a parameter \nempty rate, which is the ratio of current number to that of \nmarked elements in COLA. When the empty rate reaches a \nthreshold max empty rate the compact procedure will begin \nto work. To describe the algorithm, we define deleted \nelements as the marked elements, existing elements as the \nelements that are not marked. \nThe basic idea is to find a largest array current array \naccording to the number of existing elements, and replace \nthe deleted elements with elements in other arrays. When \nall the elements in current array are existing elements, we \nstore the remained existing elements in a temporary array \nand clear up all but the current array in COLA. Then we nperform a bulk load of all remaining elements into COLA. \nThe specific algorithm is described in Figure 5 nV.    EXPERIMENT \nIn this section, we compare the performance of pLSM with \nB-Tree and original LSM-Tree \(we compare the B-Tree \nindex used by our PuntDB server machine with \n32GB RAM and a 2.40GHz Intel\(R workbench is \nWindows server 2008. The data set for insertion and \ndeletion experiments is key-value pairs in 


String format \nthat are randomly generated. We set the size of in-memory \ncomponent C0 of pLSM to be 128MB the C1 component \nto be 2GB and the C2 component to be 16GB. For B-Tree, \nwe use the 128MB RAM as its buffer nB. Insert Performance \nTo test the insert performance, we tested the elapsed time \nfor different index structures as records are inserted. We \nused two kinds of data set: one with random keys and the \nother with ordered keys. Since the index buffer is 128MB, \nthe time will begin to grow rapidly after the index size nreached 128MB in this experiment. From the result of the \nexperiment, we could see that in both data sets B-Tree has \nan obvious problem of aging. By contrast, pLSM has a \ngood performance for random insertion. Even pLSM meets \nthe worst insertion case; the insertion time is still \nacceptable because there is no need to deal with \nreorganization since the structure of COLA will never \nchange as B-Tree does once it is initialized.  \n nFigure 6.The result of random insertion \n0 200 400 600 800 1000 1200\n0\n1000\n2000\n3000\n4000\n5000\n6000\n7000\n8000\n9000\nTi\nm\ne \nE\nla\nps\ne/\ns\nIndex Size/MB\n B-Tree\n LSM-Tree\n pLSM\nRandom Insertion Test\nFigure 5. The Compact Algorithm for COLA \n244\n \nFigure 7.The result of ordered insertion \nC. Query Performance \nWe tested the query performance for each structure by \npausing insertion for a while to query the data. To test the \nraw query efficiency of different index structures, we tested \nthree types of query: \n1. Query Set 1: This is a query set of point query. A point \nquery will exactly return the corresponding value. The keys \nare randomly chosen from the inserted ones. \n2. Query Set 2:  This is a query set of range query. Many \nsmall ranges \(contains 100 items each 8. The result of random point queries. \n \nFigure 9. The result of random  range queries. \nWe could conclude from Figure 8 and Figure 9 that pLSM \nis optimized for point query. But since there is no efficient \nrange query algorithm for pLSM, it has a worse \nperformance in range query. \nVI.    CONCLUSION \nThe implementation of pLSM is cost-effective in dealing \nwith Big Data and offering real-time response for lookups \nand insertions. To attain the goal of write optimization, we \nuse the LSM-Tree model. To accelerate the query response, \nwe use COLA as the on-disk component. We also make a \nvariant of Bloom Filter and two-phase bulk deletion \nalgorithm to support efficient deletion in pLSM. To make \nfull use of space and reduce the frequency of rolling merge, \nwe put forward a compact algorithm for COLA. \nFurthermore, a number of technical issues remain to be \ndone. To achieve better performance of COLA, the PuntDB \nmust have better data compression mechanism; in some \ncases the whole COLA component is too large to be created \nin the memory at one time, we need to improve the \ndynamic expand mechanism. Moreover, how to define the \nthreshold of empty rate in compact algorithm needs to be \nfurther studied. \nAcknowledgement \nOur work is supported by National Basic Research Program of \nChina \(973 Program Program. \nREFERENCES \n[1] http://www.tokutek.com/ \n[2] F. Färber, S. K. Cha, J. Primsch, C. Bornhövd, S. Sigg W. Lehner. \nSAP HANA Database - Data Management for Modern Business \nApplications. SIGMOD Record, 2011. \n[3 R. Sears, R. Ramakrishnan. bLSM: A General Purpose Log \nStructured Merge Tree. In SIGMOD,2012. \n[4] Bayer, R McCreight, E. \(1972 3 173–189. \n[5] M. Frigo, C. E. Leiserson, H. Prokop, and S. Ramachandran. Cache \nOblivious algorithms. In Proc 40th Annual Symp. On Foundations of \nComputer Science \(FOCS  Bender, M. Farach-Colton, J. T. Fineman, Y. R. Fogel, B. C. \nKuszmaul, and J. Nelson. Cache-oblivious streaming B-trees. In \nSPAA, 2007. \n[7] C. Jermaine, E. Omiecinski, and W. G. Yee. The partitioned nexponential file for database storage management. The VLDB \nJournal, 16\(4  Callaghan, Eric Brewer. Rose: Compressed, log-\nstructured replication. In PVLDB, 2008. \n[9] P. O'Neil, E Cheng, D. Gawlick, and E. O'Neil. The log-structured \nmerge-tree \(LSM-tree Informatica,33\(4  Tokuteck,2009 \n[11] P. William. Skip lists: a probabilistic alternative to balanced tree. \nCommunications of the ACM 33 \(6  SIGMOD, 2005. \n[13] T. Lilja, R. Saikkonen, S. Sippu, E. Soisalon-Soininen. Online bulk \ndeletion. In ICDE 2007. \n[14] R.J. Santos, J. Bernadino, M. Vieira. Leveraging 24/7 Availability \nand Performance for Distributed and Real-Time Data Warehouses. \nIn COMPSAC, 2012\n \n0 200 400 600 800 1000 1200\n0\n500\n1000\n1500\n2000\n2500\n3000\nTi\nm\ne \nE\nla\nps\ne/\ns\n B-Tree\n LSM-Tree\n pLSM\nIndex Size/MB\n10k 20k 30k 40k 50k 60k 70k 80k 90k 100k 110k 120k\n0\n10000\n20000\nTi\nm\ne \nE\nla\nps\ne/\ns\nNumber of query\n B-Tree\n LSM-Tree\n pLSM\nRandom Point Query\n0 200 400 600 800 1000\n0\n500\n1000\n1500\n2000\n2500\nTi\nm\ne \nE\nla\nps\ne/\ns\nNumber of ranges\n B-Tree\n LSM-Tree\n pLSM\nRange Query Test\n245\n 


nFurthermore, instead of generating two copies of outputs \nfor EI as shown in Fig. 2\(b Data \nHandler for Map Functions generates only one output copy. \nThis one output does not have to include the identifier key \n“1” or “2” to indicate where the data is from. This is because \nthe Reduce Function does not have to care about the source \nof the input data if the Map Functions are exactly the same. \nThis handler makes sure that the key-value pairs for EI \nare shuffled to Reduce Functions only once. This \nMF21 \nMF22 \nMF25 BC \nEI \nBC \n<EI00,Chicago,12000>, \n<EI01,Frankfurt,7000>,\n… \n<BC00,Boston,US> \n <BC01,Chicago,US>,… \nMF24 EI \n nShared \nFunction  \nData \nHandler \nMF11 \nMF12 \nMF14 ER \nEI \nTR \n<EI00,1,PS,12000>, \n<EI01,1,AS,7000 n<TR00,1,AS, 1.2> \n<TR01,1,SS,1.4>,… \n<ER00,1,40,50,1.2>,  \n<ER01,1,50,60,1.3>,\n… \nMF13 EI \n<EI00,1,96,12000 n<EI01,1,85,7000>,… \n \nShared \nFunction \nData \nHandler \n        Job1 \n        Job2 \n \nShared \nJob \nData nHandler \nMF1 \nMF5 \nRF1 \nRF2 \nRF3\nRF4 \nEI \n------ \n------ \n675\n optimization makes the framework much more lightly \nweighted by reducing the overhead of producing and \nshuffling the intermediate data multiple times The same \napproach applies to handling the BC table. \nThe Shared Function Data Handler is different from the nShared Job Data Handler. First, the latter discovers the \nshared data by calculating the recently used data among \ndifferent jobs while the former does not have to. Second, the \nlatter provides optimization by copying the shared data to \nthe local file system, while the former supplies data to \ndifferent Map Tasks. Algorithm 2 below illustrates the \nprocedure of handling shared function data among multiple \nMap Functions. The time complexity is O\(n^2 Map Function in \nthe mapFunctionList is derived. Then pairwise comparison \nof input data between all pairs of Map Functions \(Map_i and \nMap_j sharedInputMapClassList[i][j] is used to store \nthe Map_j which shares the same input data as Map_i. \nMap_i and all the members in sharedInputMapClassList[i][] \nwill be further handled by SharedTaskDataHandler[i nAlgorithm 2: Shared Function Data Handler \nInput:  \nMapFunctionList[] mapFunctionList //All Map Functions nMapFunctionList[][] sharedInputMapFunctionList  \nOutput:  \nSharedFunctionDataHandler sharedFunctionDataHandler \nProcedure: \nsharedInputMapFunctionList[1].AddMap\(Map_1 mapFunctionList \nInputData_i = AnalyzeInputDataSet\(Map_i j > i nInputData_j = AnalyzeInputDataSet\(Map_j InputData_i == InputData_j sharedInputMapFunctionList[i]. AddMap\(Map_j sharedInputMapFunctionList \nIf \(mapFunctionList.length > 0  SharedFunctionDataHandler\(mapFunctionList introduce the settings of our \nexperiments and make performance comparisons between \nour method and the Non-Concurrent MR approach which \ndoesn’t consider data sharing. We haven’t yet implemented \nthe whole ConMR until now but we are evaluating the data \nsharing and optimization part. Here we are evaluating the nefficiency of the data handler parts, which we have done. \nA. Experimental Settings  \nThe experiments are carried out using 1, 2, 4 and 8 \nstandard instances on Amazon EC2 cloud. Each instance is \nan m1.small with 1.7 GB of memory, 1 EC2 Compute Unit \n\(1 virtual core with 1 EC2 Compute Unit storage, 32-bit platform on deployed Ubuntu AMI, \nEBS boot, 32-bit architecture with Amazon EC2 AMI Tools. \nWe use two benchmark applications to demonstrate the \neffectiveness of the data sharing mechanism mentioned in nConMR programming model. For each application, we use \nsmall, moderate and large input dataset as testing cases to \nshow the scalability against the input data size. We measure \nup to four jobs for each application nSingle Source Shortest Path \(SSSP job. We \nuse the tuple \(number of graph nodes – nodes connectivity \ndegree example, we use \n10000-0.01 to demonstrate the input graph with 10,000 \nnodes, and each node has 10,000 × 0.01 100 adjacent \nneighbors.  Input data size is defined as small, moderate and \nlarge are graphs with sizes of 10000-0.01, 100000-0.001, \n1000000-0.0001 respectively. \nIn this SSSP benchmark, we test the job-level nconcurrency, which runs multiple jobs over shared graph, \nwe copy the shared data among multiple jobs to local file \nsystem to ensure data locality. \nString Matching is the other benchmark we use. A very \nbig size string \(typically a few GB nwith different users’ strings, which are far shorter than the \nreference string, are used to match the reference string in \norder to find the number of occurrences of this substring in \nthe reference string. This string matching benchmark is \nimportant in genome sequence alignment, where the string \nis a typical genome sequence. \nFor the string matching benchmark, we use both the \nshared data at job-level and function-level to test the \nefficiency of this framework.  \nB. Experimental Results  \nIn Fig. 7 and 8, we show the effectiveness of the Shared \nData Handlers for the two benchmark applications under \nvaried input data size. Fig. 7\(a-c small, moderate and \nlarge input data size for SSSP benchmark. Fig. 8\(a-c 


benchmark. The execution time \nshown excludes the shared data copy time for ConMR. \nIn both applications, the results demonstrate clear \nadvantage of the ConMR data sharing approach as \ncompared to the traditional Non-ConMR. Moreover, this \nadvantage is much greater as the  number of jobs increases. \nIn the one-job case no matter how large the cluster size \nis, the execution times of the two methods are similar. This \nis because no concurrency can be utilized for the ConMR to \ntake advantage of.  \nIn the multiple job cases as shown below, we can see a \nperformance speedup of up to 4X for the case of a cluster of \nsize eight \(VM=8 number equals to 4 \(see Fig. \n7\(a delays the whole execution time of the \nfour jobs. With 210 seconds in ConMR for runing four \nconcurrent jobs the execution time is 816 seconds for \nrunning the four jobs in a standard MR manner. Similar \nresults also apply to the same configuration in Fig. 7\(b size for the four jobs on eight VMs, while ConMR takes \n1468 seconds instead. \nAnother parameter that affects the performance is the \ncluster size. Using larger cluster size normally shows better \nperformance than using a small one. This benefit is better \nillustrated for larger input data size. In Fig. 7\(a b execution time of Non-Concurrent MR for the four-jobs \ncase is very close across different cluster sizes. In the large \ninput data size case, as shown in Fig. 7\(c nIn ConMR, the large cluster size benefits over Non-\nConcurrent MR in SSSP cases. Except in using large input ndata size as in Fig. 7\(c 2-job and \n4-job cases. This doesn’t apply to ConMR. This is easy to \nexplain. ConMR explores more parallelism when running \nmultiple jobs. Large cluster size would benefit more from \nthis mechanism coupled with large input data size. \nIn short, ConMR performs better than its counterpart. It \nfavors large number of jobs running on large cluster size. \nParallelism in job-level and function-level data sharing are \nbetter exploited and utilized in this case. \n \n\(a 10000-0.01 a 1GB b Moderate input data size \(100000-0.001 b 2GB c 1000000-0.0001 c 4GB running on String Matching Benchmark\n677\n In Fig. 9, we measure the overhead time used to copy \nthe shared input dataset from HDFS to individual VMs. As \nwe can see, copying 4GB shared data to 8VMs in parallel \ntakes around 140 seconds. This is a one-time overhead, \nwhich means the shared data would be copied only once. It nbenefits all the following concurrent jobs. As shown in Fig. \n8, the more jobs we run, the more benefit we get from this \ndata copying. For example in a 4 job case, ConMR has \nreduced the execution time more than 600 seconds at the \ncost of only 125 seconds for the shared data copying. \n \n \nFig. 9. Overhead time of copying the shared input data from HDFS to each \nindividual VM instance. \nV. RELATED WORK \nIn the past, many endeavors have focused on proposing \nextended or new programming models for big-data \nproblems other than the widely accepted MR. We are \ntargeting this problem by exploring the data sharing at \nfunction/job level, and providing a framework to  exploit \nthe advantages of this sharing of data. \nEfficient and effective programming models for different \ncomputing infrastructures have been of interest to both \nacademia and industry. The advent of MapReduce [1] has \nspawned new research efforts on the development of \nprogramming models for big-data processing. Dryad [6][7] \nis proposed as an extension of MR. It employs Directed \nAcyclic Graph \(DAG  motivated by the structure of SQL, for efficient execution \non very large clusters. \nMR has also been enhanced by a number of research \nefforts. HaLoop [3], a revised programming model that \nintegrates loop-based processing for MR applications, has \ndemonstrated significant performance improvement when \nthe input data is partially shared. Map-Reduce-Merge [9] \nintroduces a “merge” stage after traditional MR to merge the \noutputs of multiple MR jobs.  \nThe motivation for the two papers are similar to ours’ in \nfunction-level concurrency Unlike them, we explore data \nsharing in job-level concurrency as well to efficiently \nmanage concurrent jobs submitted by different users. \nAlong the line of MR extensions, other research efforts \naddressed data streaming environments. Nova [10], due to \nits support for stateful incremental processing leveraging Pig nLatin [11], deals with continuous arrival of streaming data. \nIncoop [12] is proposed as an incremental computation to \nimprove the performance of MR framework. Deduce [13] \nand S4 [14] are other new programming models for \nstreaming data applications. \nPregel [15] is a message-based programming model to \ndeal with distributed large graph programs. It uses vertex, \nmessages and multiple iterations in order to provide a ncompletely new programming mechanism. GraphLab \n[16][17] is proposed to deal with scalable algorithms in data nmining and machine learning that run on multicore clusters. \nIn this paper, we focus on an improvement on traditional \nrigid map and Reduce Functions organized in any MR job \nby a more flexible framework, while exploiting job and \nfunction level to enhance the overall performance. \nFor a Reduce Function whose input 


datasets are \nproduced by two or more Map Functions, joining among \ndifferent datasets is widely applied in ConMR. There are a \nnumber of research papers to address the problem of joins \nusing MR related solutions Broadcast join is proposed in \n[18] for one dataset is relatively small. This dataset can be \ncopied to each computing machine for conducting join \noperations at local file systems. Different join algorithms are ncompared in [19]. One-phase-join mentioned in [20] uses a \nfiltering-join-aggregation model to deal with Map-Join-\nReduce. Research papers [21][22] optimize multiple joins \nusing Lagrange relaxation method. In [23 the authors \npropose matrix-based method to balance the input and \noutput dataset size for different Reduce Tasks. In [24], \nHilbert Space Filling Curve is proposed to deal with multi-\nway theta-join problem. \nRestore 25] has been used to keep intermediate results \nfor future workflow use. Unlike this method, our data reuse nis share-aware and corresponding optimization is offered. \nVI. CONCLUSIONS AND FUTURE WORK \nIn this paper, we propose ConMR, a concurrent MR \nprogramming model. ConMR addresses the need to define \nmultiple independent MR sub-jobs to provide a solution to a \ncomplex problem. Besides this, ConMR reduces the amount \nof work by taking into account data sharing at the job  and \nfunction levels. To summarizes the main contributions.  \n\(1 We propose a concurrent MR framework ConMR \nwith multiple heterogeneous map and Reduce Functions. \nThe shared data of different map and Reduce Functions are \ndefined by programmers to guarantee the data sharing is nimplemented in an efficient manner. \n\(2 levels. For job-level data sharing, the \nframework manages the data by replicating data to ensure \ndata locality. For function-level data sharing, it provides \noptimization by supplying the shared data to multiple Map \nTasks from different Map Functions. It also merges the \noutput of the same Map Functions on the shared data. \n\(3 nMatching. Results have demonstrated up to 4X performance \nspeedup compared to traditional non-concurrent MR n \n \n678\n  \nFuture work will focus on the following three directions. \n\(1 Handler to process \ndifferent Map Functions, we can optimize it further by \nmerging the outputs of the intermediate key-value pairs. For \nexample, we can merge the outputs of MF11 and MF13 in \nFig. 2\(a intermediate key-value pairs can be like \n<EI00, PS, 12000, 96> et al.  \n\(2 method using a large \ncluster size on both a public cloud and a private cloud. \nCurrently we are using up to eight instances on Amazon \nEC2. The advantage of the programming model will be \nfurther amplified given a larger cluster size. \n\(3 programming model \nwith built-in support for job- and function-level optimization. \nAcknowledgments: This publication was made possible by \nNPRP grant # 09-1116-1-172 from the Qatar National \nResearch Fund \(a member of Qatar Foundation acknowledge Amazon for providing \nresearch grant for using Amazon web services. \nVII. REFERENCES \n[1] J. Dean and S. Ghemawat, “Mapreduce: Simplified Data \nProcessing On Large Clusters,” Proc. of 19th ACM symp. on nOperating Systems Principles \(OSDI 04   Y. Bu, B. Howe and M. Balazinska, et al, “HaLoop: Efficient \nIterative Data Processing on Large Clusters Proc. of the 36th \nInternational Conference on Very Large Data Bases \(VLDB 10 n[4] F. Zhang, M. F. Sakr, "Dataset Scaling and MapReduce \nPerformance", Workshop on Large-Scale Parallel Processing \n\(LSPP'13 IPDPS  Techniques and Reinforcement Learning. Springer, \nJune 2003.  \n[6] M. Isard, M. Budiu and Y. Yu, et al Dryad: Distributed Data-\nParallel Programs from Sequential Building Blocks,” European \nConference on Computer Systems \(EuroSys 07  Reusing work in \nlarge-scale Computations,”  Workshop on Hot Topics in Cloud \nComputing \(HotCloud 09 n[8] R. Chaiken, B. Jenkins and P. Larson, et al. “SCOPE: Easy and \nEfficient Parallel Processing  of Massive Datasets,” Proc. of the \n34th International Conference on Very Large Data Bases \(VLDB \n08 24-30. \n[9] H.Yang, A. Dasdan and R.Hsiao, et al. “Map-Reduce-Merge: \nSimplified Relational Data Processing on Large Clusters,”  Proc. \nof the 2007 ACM SIGMOD international conference on \nManagement of data \(SIGMOD 07 June 2007. pp. 1029-1040. \n[10] O. Christopher, C. Greg and C. Laukik, et al. “Nova: Continuous \nPig/Hadoop Workfows,” Proc. of the 2011 ACM SIGMOD \ninternational conference on Management of data \(SIGMOD 11 2011, pp. 1081-1090. \n[11] C. Olston, B. Reed and U. Srivastava, et al. “Pig Latin: A not-so-\nforeign language for data processing,” Proc. of the 2008 ACM \nSIGMOD international conference on Management of data \n\(SIGMOD 08  incremental computations,” Proc. of the 2nd \nACM Symposium on Cloud Computing \(SoCC 11  Kumar, H. Andrade and B.Gedik, et al. “DEDUCE: At the \nIntersection of MapReduce and Stream Processing,” Proc 


of the \n13th International Conference on Extending Database \nTechnology \(EDBT 10 n[14] L. Neumeyer, B. Robbins and A. Nair, et al. “S4: Distributed \nStream Computing Platform,” Proc. of the International \nWorkshop on Knowledge Discovery Using Cloud and \nDistributed Computing Platforms \(KDCloud 10 December \n2010, pp. 170-177. \n[15] G. Malewicz, M. H. Austern and A. J. C. Bik, et al. “Pregel: A \nSystem for Large-Scale Graph Processing,” Proc. of the 2008 \nACM SIGMOD international conference on Management of data n\(SIGMOD 10  for Parallel Machine Learning,” Proc. of the 26th \nConference on Uncertainty in Artificial Intelligence \(UAI nCatalina Island, July 2010. \n[17] Y. Low, J. Gonzalez, A. Kyrola, et al, "Distributed GraphLab: A \nFramework for Machine Learning and Data Mining in the \nCloud," Journal Proceedings of the VLDB Endowment, vol. 5, \nApril 2012, pp.716-727. \n[18] S. Chen, “Cheetah: a high performance, custom data warehouse \non top of MapReduce Journal Proceedings of the VLDB \nEndowment, vol. 3, Sep. 2010, pp.1459–1468. \n[19] S. Blanas et al. “A comparison of join algorithms for log \nprocessing in MaPreduce,” Proc. of the 2008 ACM SIGMOD \ninternational conference on Management of data \(SIGMOD 10  Towards scalable and efficient \ndata analysis on large clusters,” IEEE Transactions on \nKnowledge and Data Engineering, vol. 23, Sep. 2010. pp. 1299-\n1311. \n[21] F. N. Afrati and J. D. Ullman. “Optimizing Joins in a Map-\nReduce Environment,” Proc. of the 13th International \nConference on Extending Database Technology \(EDBT 10  Environment,” IEEE Transactions on Knowledge \nand Data Engineering, vol. 23,  Sep. 2011, pp.1282 -1298. \n[23 A. Okcan and M. Riedewald. “Processing Theta-Joins using \nMapReduce,” Proc. of the 2011 ACM SIGMOD international \nconference on Management of data \(SIGMOD 11  and M. Wang, “Efficient Multi-way Theta-\nJoin Processing Using MapReduce,” Proc. of the 38th \nInternational Conference on Very Large Data Bases \(VLDB 12  Aboulnaga, “ReStore: reusing results of \nMapReduce jobs, ” Proceedings of the VLDB Endowment, vol. 5, \nNo. 6 Feb. 2012. Pp. 586-597. \n679\n 


Available: \nhttp://www.gao.gov/assets/590/587031.pdf \n  12 \n[31] Government Accountability Office. \(2012 March  nAvailable \nhttp://www.gao/gov/assets/590/589016.pdf \n[32] E. Y. Blakiston, C. J. Punzel, and R. A. Jennings n“Development of an item unique identification \nstrategy for the legacy components of the US Marine \nCorps M1A1 Abrams Tank,” MBA Professional \nReport, Naval Postgraduate School, Monterey, CA, \n2008.  \nBIOGRAPHIES nChantrice Moss is a graduate \nstudent in the Master of \nAeronautical Science \nprogram at Embry-Riddle nAeronautical University - \nWorldwide Campus. She \nreceived a B.S in Aerospace \nEngineering from Tuskegee nUniversity, where she \ngraduated Summa Cum \nLaude. She was a participant \nof the Payload Academy for the International Space \nStation program, and she worked with the Operations \nEngineering branch during her tenure as a summer intern \nwith NASA. Ms. Moss is interested in solving problems \nrelated to the development manufacture, and operation \nof aircraft and spacecraft. She remains active in her \nhome community of New Orleans where she volunteers \nwith the Civil Air Patrol - US Air Force Auxiliary. She \nalso advocates careers in Science, Technology, \nEngineering, and Math to urban youth. \nFollowing mechanical \nengineering degrees at Caltech, \nMichigan State and Penn State, \nSuman Chakrabarti somehow \nfound himself working as a \nsupply chain management \nengineer in PC motherboard \nmanufacturing—before joining \nNASA in propulsion research for 6 years—after which he \nfound himself back in supply chain management, logistics \nand operations until the present time. He currently \nsupports the Space Launch System \(SLS n“Scotty”, is currently \ndeveloping innovative \ninterfaces and applications \nfor the Huntsville Operations nSupport Center \(HOSC a Payload Communications Manager for the \nInternational Space Station from 1999-2007. He has \nspearheaded several console technology projects, \nespecially in space-to-ground videoconferencing and \naudio archiving He was a payload communicator for the \nATLAS-1 Spacelab mission in 1992, and helped design \nthe payload training program for Space Station. He spent \n6 years as a U.S. Naval Officer, including flight duty in nF-14s, and holds a B.S. in Physics and Mathematics from \nPrincipia College. \n \n 


http://www.cs.purdue.edu/homes/dgleich/\ndemos/erdos renyi/.\n[20] M. Kuramochi and G. Karypi, “Finding frequent patterns in a large\nsparse graph. data mining and knowledge discovery,” In Proc. of Data\nMining and Knowledge Discovery, no. 11, pp. 243–271, 2005.\n[21] J. Prins, J. Yang, J. Huan, and W. Wang, “Spin: Mining maximal frequent\nsubgraphs from graph databases,” In Proc. of KDD, pp. 581–586, 2004.\n[22] X. Yan and J. Han, “gspan Graph-based substructure pattern mining,”\nIn Proc. of ICDM, pp. 721–724, 2002.\n[23] ——, “Closegraph: Mining closed frequent graph patterns,” In Proc. of\nKDD, pp. 286–295, 2003.\n[24] C. Borgelt, T. Meinl, and M Berthold, “Moss: A program for molecular\nsubstructure mining,” In Proc. of OSDM, 2005.\n[25] L. Holder, D Cook, and S. Djoko, “Substructure discovery in the subdue\nsystem,” In Proc. of KDD, pp. 169–180, 1994.\n[26] P W. Holland and S. Leinhardt, “An exponential family of probability\ndistributions for directed graphs,” Journal of the American Statistical\nAssociation, 1981.\n[27] M. E. J. Newman, “Random graphs as models of networks,” in Hand-\nbook of Graphs and Networks: From the Genome to the Internet. Wiley-\nVCH, 2003.\n[28] O. Sandberg Neighbor selection and hitting probability in small-world\ngraphs,” Annals of Applied Probability, vol. 18 no. 5, pp. 1771–1793,\n2008.\n[29] P. Krivitsky, M. S. Handcock, A. E. Raftery, and P. Hoff Representing\ndegree distributions, clustering, and homophily in social networks with\nlatent cluster random effects models.” Department of Statistics,\nUniversity of Washington, 2007.\n[30] A. L. Barabasi and R. Albert Emergence of scaling in random\nnetworks,” Science, vol. 286, pp. 509–512, 1999.\n[31] “The Kronecker graph model source code \(snap library 


introduced SALSA, an approach to automatically\nanalyze Hadoop logs to construct state-machine views of the\nplatform’s execution [25]. The derived state-machines are used\nto trace the data-flow and control-flow executions. SALSA\ncomputes the histograms of the durations of each state and uses\nthese histograms to estimate the Probability Density Functions\n\(PDFs between the PDFs across machines to detect\nanomalies. Tan et al. also compare the duration of a state\nin a particular node with its past PDF to determine if the\nduration exceeds a determined threshold and can be flagged\nas an anomaly.\nAnother related work to this paper is the approach of Xu\net al. in [26], which uses the source code to understand the\nstructure of the logs. They create features based on the constant\nand variable parts of the log messages and apply the Principal\nComponent Analysis \(PCA behaviour.\nAll the above approaches are all designed for system\nadministrators in managing their large clusters. Our approach,\non the other hand, aims to assist developers in comparing the\ndeployed system on such large clusters against the develop-\nment cloud.\nX. CONCLUSION\nDevelopers of BDA Apps typically first develop their appli-\ncation with a small sample of data in a pseudo cloud, then\ndeploy the application in a large scale cloud environment.\nHowever, the larger data and more complex environments\nlead to unexpected executions of the underlying platform.\nSuch unexpected executions and their context cannot be easily\nuncovered by traditional approaches.\nIn this paper, we propose an approach to uncover the\ndifferent behaviour of the underlying platforms for BDA Apps\nbetween runs with small testing data and large real-life data\nin a cloud environment. To evaluate our approach, we perform\na case study on Hadoop, a widely used platform, with three\nBDA Apps. The case study results show the strength of our\napproach in two aspects:\n1 drastically reduces the verification effort\nby 86-97% when verifying the deployment of BDA\nApps in the cloud.\n2 the prob-\nlematic logs reported by our approach are much fewer\nthan using keyword search, which makes it possible to\nmanually explore the problematic logs.\nIn addition, our approach provides additional context informa-\ntion \(execution sequences sequences of the logs to\nrapidly understand the cause of problematic log lines.\nREFERENCES\n[1] D. Fisher, R DeLine, M. Czerwinski, and S. Drucker, “Interactions with\nbig data analytics,” interactions, vol. 19, no. 3 pp. 50–59, May 2012.\n[2] N. Wingfield, “Virtual product, real profits: Players spend on zynga’s\ngames, but quality turns some off,” Wall Street Journal.\n[3] “Ebay is powered by hadoop http://wiki.apache.org/hadoop/PoweredBy.\n[4] T. White, Hadoop: The Definitive Guide. Oreilly & Associates Inc,\n2009.\n[5] M. Isard, M. Budiu, Y. Yu, A. Birrell, and D. Fetterly, “Dryad:\ndistributed data-parallel programs from sequential building blocks,”\nSIGOPS Oper. Syst. Rev., vol. 41, no. 3, pp. 59–72, Mar. 2007.\n[6 S. Sorkin, “Large-scale, unstructured data retreival and analysis using\nsplunk,” Technical paper, Splunk Inc 2009.\n[7] P. Mundkur, V. Tuulos, and J. Flatow, “Disco: a computing platform\nfor large-scale data analytics in Erlang ’11: Proc. of the 10th ACM\nSIGPLAN workshop on Erlang. New York, NY, USA: ACM, 2011, pp.\n84–89.\n[8 J. Dean and S. Ghemawat, “Mapreduce: simplified data processing on\nlarge clusters,” Commun. ACM, vol. 51, no 1, pp. 107–113, January\n2008.\n[9] W. Shang, Z. M. Jiang, B. Adams, A. E. Hassan, M. Godfrey, M. Nasser,\nand P Flora, “An Exploratory Study of the Evolution of Communicated\nInformation about the Execution of Large Software Systems,” in WCRE\n’11: Proceedings of the 18th Working Conference on Reverse Engineer-\ning, Lero Limerick, Ireland, October 2011.\n[10] Z. M. Jiang, A. E. Hassan, G. Hamann, and P. Flora, “An automated\napproach for abstracting execution logs to execution events,” J. Softw.\nMaint. Evol., vol. 20, no 4, pp. 249–267, 2008.\n[11] L. Page, S. Brin, R. Motwani, and T. Winograd, “The pagerank citation\nranking Bringing order to the web.” Stanford InfoLab, Technical Report\n1999-66, November 1999.\n[12] Z. M. Jiang, A. E Hassan, G. Hamann, and P. Flora, “Automatic\nidentification of load testing problems,” in ICSM ’08: Proc. of 24th IEEE\nInternational Conference on Software Maintenance. Beijing, China:\nIEEE, 2008, pp. 307–316.\n[13 America’s most wanted - a metric to detect persistently faulty ma-\nchines in hadoop http://hadoopblog.blogspot.com/2010/06/americas-\nmost-wanted-metric-to-detect.html.\n[14] D. Cotroneo, S Orlando, and S. Russo, “Failure classification and\nanalysis of the java virtual machine,” in Proceedings of the 26th IEEE\nInternational Conference on Distributed Computing Systems, ser. ICDCS\n’06. Washington, DC, USA IEEE Computer Society, 2006, pp. 17–.\n[15] C. Olston, B. Reed, U. Srivastava, R. Kumar, and A. Tomkins, “Pig latin:\na not-so-foreign language for data processing,” in SIGMOD ’08: Proc.\nof the 2008 ACM SIGMOD international conference on Management of\ndata. New York, NY, USA: ACM, 2008, pp. 1099–1110.\n[16] A. F. Gates O. Natkovich, S. Chopra, P. Kamath, S. M. Narayanamurthy,\nC. Olston, B. Reed, S. Srinivasan, and U Srivastava, “Building a high-\nlevel dataflow system on top of Map-Reduce: the Pig experience,” Proc.\nVLDB Endow., vol. 2, no. 2, pp. 1414–1425, 2009.\n[17] “Amazon ec2,” https://aws.amazon.com/ec2/.\n[18] M. Fischer 


J. Oberleitner, H. Gall, and T. Gschwind, “System evolution\ntracking through execution trace analysis,” in IWPC ’05: Proceedings of\nthe 13th International Workshop on Program Comprehension. Wash-\nington, DC, USA: IEEE Computer Society, 2005, pp. 237–246.\n[19] J. Kothari, D. Bespalov, S. Mancoridis, and A. Shokoufandeh On\nevaluating the efficiency of software feature development using alge-\nbraic manifolds,” in ICSM ’08 International Conference on Software\nMaintenance, 2008, pp. 7–16.\n[20] D. Ro¨thlisberger, O. Greevy, and O Nierstrasz, “Exploiting Runtime\nInformation in the IDE,” in ICPC ’08: Proceedings of the 2008 The 16th\nIEEE International Conference on Program Comprehension. Washing-\nton, DC, USA: IEEE Computer Society, 2008, pp 63–72.\n[21] I. Beschastnikh, Y. Brun, S. Schneider, M. Sloan, and M. D. Ernst,\n“Leveraging existing instrumentation to automatically infer invariant-\nconstrained models,” in ESEC/FSE ’11: Proc. of the 19th ACM SIG-\nSOFT symposium and the 13th European conference on Foundations of\nsoftware engineering. New York, NY USA: ACM, 2011, pp. 267–277.\n[22] B. Cornelissen, A. Zaidman, A. van Deursen, L. Moonen, and\nR. Koschke, “A systematic survey of program comprehension through\ndynamic analysis,” IEEE Trans. Softw. Eng., vol. 35, pp 684–702,\nSeptember 2009.\n[23] S. Reiss, The Field programming environment: A friendly integrated\nenvironment for learning and development. Springer, 1995, vol. 298.\n[24] J. Boulon, A. Konwinski, R. Qi, A. Rabkin, E Yang, and M. Yang,\n“Chukwa, a large-scale monitoring system,” in CCA ’08: Proc. of the\nfirst workshop on Cloud Computing and its Applications, 2008, pp. 1–5.\n[25] J. Tan, X. Pan, S. Kavulya, R. Gandhi, and P. Narasimhan Salsa:\nanalyzing logs as state machines,” in WASL’08: Proceedings of the First\nUSENIX conference on Analysis of system logs. Berkeley, CA, USA:\nUSENIX Association, 2008, pp. 6–6.\n[26] W. Xu, L. Huang, A. Fox, D Patterson, and M. I. Jordan, “Detecting\nlarge-scale system problems by mining console logs,” in SOSP 09:\nProceedings of the ACM SIGOPS 22nd symposium on Operating systems\nprinciples. New York, NY, USA: ACM 2009, pp. 117–132.\n411\n 


  14  
 


Available Array Energy 60297 W-hr Battery Recharge Energy Losses 93 W-hr Shunt Energy Losses 20% Battery W-hr 187 W-hr Remaining Electrical Energy 60017 W-hr Power Conversion Losses 80% Efficiency 12003 W-hr Harness Losses \(4 Available Diurnal Load Energy \(CBE Average Load Energy Supported 67.9 W Array Area 0.20 m2 12 specifically the seismometer and magnetometer continuously while other instruments such as the heat flow probes may operate intermittently. The retroreflector does not require any thermal control resources. Telecom between the Earth and the hub or from the remote units to the hub would be during the lunar day only  Description of the Design  A thermal blanket \(MLI Silver-Teflon would be used to moderate the temperature variation of the surface. The MLI and the lunar material thermal conduction properties could be used to insulate the different ALGEP elements from the external environment  The Mars Exploration Rover thermal switch and a thermal radiator with thermal louvers would be used to reject the internally generated thermal energy. The MER Thermal Switch has the ability to transfer up to 11 W. For the hub three or four switches may be necessary, depending on the RF power output  Potentially a small electric heater/thermostat system may be needed \(on the order of 10% of the dissipated electrical energy example, the seismometer, which dissipates 1.5 W, may need a 0.15 W heater. A detailed thermal analysis would be necessary to further assess this need  The ALGEP hardware location would be dictated by the science requirements. Each ALGEP element could be either positioned on the surface or buried.  An example of a buried element would be the seismometer, while the hub could be surface mounted. In either case a surface blanket would be required. The surface blanket would minimize the lunar temperature variation, from a range of -173 to ~127  C to a range under the blanked between approximately -73 to 27  C. Initial calculations indicate that the blanket extending about 0.5 m beyond the edge of the instrument or hub would provide the temperature control of the lunar surface required to minimize the temperature variation. For the lunar night, a small electric heater may be needed to keep the ALGEP hardware within specified temperature limits  For polar region operation it is assumed that the ALGEP could operate at all times as the solar arrays would always have incident solar energy and could provide electrical power for operations.  Thus with electrical power for the instruments and hub, the thermal radiator and louvers could maintain the ALGEP hardware within specified temperature limits. Initial calculations indicate that the current conceptual thermal control design does not require electric heaters for this location  Design Rationale  The design uses MLI, thermal conduction control, electric heaters, thermal radiators thermal louvers, and a deployed surface blanket to provide thermal control to maintain the remote units and hub within specified temperature limits. The surface blanket would 


specified temperature limits. The surface blanket would minimize the temperature variation of the surface, and electric heaters would provide makeup thermal energy  Risk  The thermal subsystem design is a low to moderate risk element, as the hardware used has extensive flight experience. Although this system would be on the surface of the Moon, the environment would be space-like, with the  Figure 6  ALGEP avionics block diagram showing the power and command and data handing  interface. This is a low-power design to enable data collection during lunar night at the remote units. The hub  contains the same avionics package but does not interface with an instrument  13 exception of the infrared heating of the lunar surface therefore the space qualified thermal control hardware could provide thermal control for this mission  Command and Data Handling Subsystem Design Requirements  The ALGEP controller is designed to meet the six year mission lifetime requirement stemming from the science objectives flowing down to the mission requirements and has a technology cutoff of 2016 \(assumes a 2020 launch interface to the science instrument and the UHF radio.  The controller for the hub interfaces to the UHF and S-band radios. Each type of controller would be single string  Design Assumptions  All selected electronic parts for the controller have a path to flight hardware with a technology cutoff of 2016. There would be one ALGEP hub that has a bi-directional S-band link to Earth and a UHF receiver link to the remote instrument units. There would be four ALGEP remote units that have UHF transmitters to link to the ALGEP hub. The controllers would have an operating temperature range: -20  C to 35  C. The total ionizing dose of radiation would be 2 krads for the mission  Description of the Design  Both controller designs would incorporate low-powered Field Programmable Gate Arrays FPGAs devices and I/O drivers.  Portions of the existing MultiMission System Architecture Platform \(MSAP Engineering Unit \(REU IP provide the mission clock and alarm clock logic.  Both the hub and remote unit controllers would capture engineering data regarding temperatures, currents and voltages. Figure 6 provides an overview of the command and data handling and power subsystem architectures.  The remote units would be supplied with 2 Gb of memory and the hub would have 5 Gb of memory  Design Rationale  A low-powered avionics architecture would be achieved by developing a stand-alone controller capable of operating at various power levels. In the lowest power configuration only the mission clock and alarm clock logic would be active. Other logic, analog and I/O functions would be power strobed in the off mode during this very low-power mode. Science and engineering data would be stored in non-volatile memory elements that retain their data in the power-off mode  Risk  The controller requires engineering development to obtain the low-powered mode required for night operation However, it has been designed to incorporate components with flight heritage. A lower frequency oscillator would be used to reduce power  Telecom Subsystem 


Design Requirements  The telecom subsystem is designed to return 3.4 Gb of stored data every 16 days during lunar night in addition to 1.2 Gb of additional data collected each 24 hour period during daylight. This translates into a minimum direct-to-Earth return data rate of ~50 kbps for an 8 hour pass each Earth day for 16 days of sunlight. The subsystem must operate down to a temperature of -20  C and survive non-operational temperature of -50  C. The telecom subsystem would support two-way communications between the hub and the DSN network. It would also support two-way communications between the hub and each of the remote instrument packages on the surface. There would be a minimum 3 dB margin for the direct-to-Earth DTE  Design Assumptions  The telecom subsystem is assumed to be a single string design. The hub would have an S-band radio and antenna for two-way communications with a DSN 34 m ground station. The nominal downlink rate would be 120 kbps and the uplink rate would be 2 kbps. The surface links would be at UHF. The forward link data rate would be 8 kbps and the return rate would be 256 kbps. The maximum range for the surface links would be 100 m. All of the surface links would have line-of-sight between the units. It is assumed that the astronauts would point the Sband antenna towards Earth, within 5  of the center of Earth. This should be relatively easy to do as 5  is a very loose pointing requirement and the uplink/downlink would be marginally affected if the pointing is off by a little more than 5  A signal could be added which would use an uplink from the Earth to give a relative signal power to ensure the pointing requirement is met  Description of the Design  The telecom subsystem would use a commercial off-the-shelf S-band transponder \(L3 CXS-610 has a 5 W power amplifier and an S-band diplexer included This radio is used on GRAIL and a similar unit was used on Genesis. The diplexer would be connected to an S-band low gain antenna \(LGA be a 2-element S-band patch array with a boresight gain of 9 dB. It would be mounted on the end of one solar array on the hub and gimbaled to allow the astronaut to point it to the Earth  The hub communicates with each of the remote instrument units in UHF using a new UHF micro-transceiver. Each UHF microtransceiver would have a radio frequency output power of 50 mW. The UHF transceiver would use a halfduplex system meaning it would transmit and then listen However, it cannot do both at the same time. The UHF links would use a simple UHF monopole antenna, similar to the antennas flown on MER, and mounted on the top of the hub and remote units. The hub could only communicate with one remote unit at a time. Figure 7 shows the hub and remote unit telecom block diagrams  The S-Band telemetry link has a margin of 7.0 dB for a telemetry rate of 120 kbps into a 34 m beam waveguide ground station. The data rate could be increased to reduce 14 playback time. The surface link would have a margin exceeding 20 dB for a return data rate of 256 kbps. This includes a multipath loss allotment of 20 dB. The margin would be large because the range would be so small and all of the links would be line of sight  Design Rationale  Where available, the design of this subsystem uses heritage hardware. The UHF microtransceiver is a radio that is under development for the Mars program. It would be designed for low mass, low 


Mars program. It would be designed for low mass, lowpower and low temperature operation. The S-band antenna would be a smaller, simpler version of the antenna that flew on Deep Impact. Other antenna options would be available The UHF antennas have been flown on previous Mars lander/rover missions. There would be other alternatives for the S-band antenna and the UHF transceiver on the hub could use a larger power amplifier to talk to an orbiting asset as a backup to the S-band radio  Risk  The highest risk items for telecom would be the single string design for each element and six year design lifetime. However, the S-band radio has flight heritage. The UHF radios would be a new design but do not require new technology. They would be an engineering development 8. SYSTEM SUMMARY Mass Equipment List Table 5 shows a summary of the mass and power for each of the subsystems for the remote instrument units. The mass of one remote unit without the specified instrument is 26.6 kg with contingency specified at the subsystem level based on heritage. Table 6 shows a summary of mass and power by subsystem for the hub. The mass of the hub with contingency is 44.9 kg. Table 7 shows a mass summary for the entire package with appropriate contingencies added per the JPL  s Flight Project Practices and Design Principles Design Principles. The package totals 218.2 kg which includes four remote units, five instruments, one hub, and the carrier container\(s Table 5. Mass and power summary for remote units Remote Unit Mass CBE Contingency Total Power Power 14.3 kg 30% 18.5 kg 0.180 W 2 W Night /Day Thermal 2.0 kg 29% 2.5 kg 0 W Telecom UHF 0.2 24% 0.3 kg 2 W 40 W CDS 0.7 kg 30% 0.9 kg 1 W \(1/60th per hour 3 W Structure 3.4 kg 30% 4.4 kg 0 W Total x 1 unit 20.6 kg 29% 26.6 kg Diplexer S-Band Downconverter STDN command data to S/C CDS Pr oc es so r S-Band Exciter 9 dBi S-Band LGA UHF Downconverter Small UHF transceiver command data to S/C CDS 


to S/C CDS Pr oc es so r UHF PA UHF Monopole Command data to C&amp;DH Command dat  to C&amp;DH  Figure 7  Telecom block diagram for the S-band \(top bottom  units would be located on the hub while the remote units only contain a UHF system 15 9. OPERATIONAL SCENARIOS Daytime Operations During the day, the remote units and hub would be fully operational. The remote units would collect data from their instruments as specified by the science team and store it in the controller memory. Table 8 shows the data volume expected from each instrument. After 24 hours have passed the UHF telecom system on the hub is used to poll each of the remote units separately at the designated interval for the stored data. The hub then transmits the data direct-to-Earth using the S-band radio. This requires a maximum of eight hours at 50 kbps each day using the DSN 34 m antennas However, data rates as high as 120 kbps may be achieved reducing the downlink time. The hub has enough memory margin to accumulate data from all the instruments for three Earth days before it must downlink the data Nighttime Operations During nighttime operations, data collection at the remote units would be taking place. The magnetometer and seismometer collect data continuously. However, the seismometer operates at a reduced mode where the sampling rate is reduced to one-half of the daytime rate which has been deemed more than adequate by the science team. The remaining instruments collect data at various intervals that would be conducive to the science team  s current requirements. Telecom events would not be scheduled during the lunar night. The data accumulates in the controller memory over 16 Earth days \(~14 days at an equatorial location would be considered a worse case so two days have been added to be conservative data volume summary for each instrument during a 16 Earth day lunar night. When the sun comes up and the hub and remote units have sufficient power to run the telecom systems the hub polls each remote unit separately at a designated interval similar to operations during the day. The data would then be transmitted to Earth gradually over the next few days using the S-band radio Table 7. Mass summary for total package Unit Mass Contingency Mass + contingency 4 Remote Units 82.4 kg 29% 106.4 kg Hub 35.2 kg 27% 44.9 kg Instruments including cabling 17.3 kg 30% 22.5 kg Carrier Container\(s Total with heritage contingency 153.1 kg 29% 197.5 kg  System contingency  21.4 kg 14 Total Package  43% 218.9 kg Table 8. Instrument data volumes received at the hub over one Earth day in daylight operations Science Instrument Compressed Data Volume Received at Hub 


Volume Received at Hub Mb Seismometer 236 Magnetometer 58 Heat Flow Probe 2 Seismic Sounder 700 Instrument &amp; Hub Engineering Data 6 Total 1002 Hub Memory 5000 Margin 80  Table 6. Mass and power summary for hub Hub/Base Unit Mass CBE Contingency Total Power Power 14.3 kg 30% 18.5 kg 0.180 W 2 W Night /Day Thermal 13.4 kg 28% 17.2 kg 0 W Telecom UHF Telecom S-band 3.4 15% 3.9 kg 2 W 40 W CDS 0.7 kg 30% 0.9 kg 1 W \(1/60th per hour W \(day Structure 3.4 kg 30% 4.4 kg 0 W Total x 1 unit 35.2 kg 27% 44.9 kg 2.38 W avg at night  16 10. SUMMARY AND CONCLUSIONS The ALGEP modular design builds upon lessons learned from Apollo era ALSEP package and technology advances since that time. ALGEP meets the requirements of long lifetime survival while maintaining continuous operation of its instruments during the lunar night which can last up to 16 days at equatorial regions on the Moon. The package would be powered using solar arrays and batteries alone not requiring nuclear sources to supply power or maintain thermal control. This concept is feasible due to its lowpower operational mode at night The modular design and packaging scheme provides flexibility in deployment across all regions of the Moon including the farside pending the availability of an orbital communications asset. The relatively light ALGEP package could be accommodated on astronaut activity support vehicles, providing a method to distribute the packages across the Moon, ultimately gaining a Moon-wide understanding of lunar geophysical properties ACKNOWLEDGEMENTS This work was supported by the NASA Lunar Sortie Science Opportunities Program The work described in this publication was carried out at the Jet Propulsion Laboratory, California Institute of Technology under a contract with the National Aeronautics and Space Administration References herein to any specific commercial product process or service by trade name, trademark, manufacturer 


or otherwise does not constitute or imply its endorsement by the United States Government or the Jet Propulsion Laboratory, California Institute of Technology REFERENCES 1] NRC  Scientific Context for Exploration of the Moon   Washington D.C.: The Nat. Academies Press, 2007 2] Apollo 11 Prelim. Sci. Rept., NASA SP-214, 1969 3] Apollo 12 Prelim. Sci. Rept., NASA SP-235, 1970 4] Apollo 14 Prelim. Sci. Rept., NASA SP-272, 1971 5] Apollo 15 Prelim. Sci. Rept., NASA SP-289, 1972 6] Apollo 16 Prelim. Sci. Rept., NASA SP-315, 1972 7] Apollo 17 Prelim. Sci. Rept., NASA SP-330, 1973 8] ALSEP Termination Report, NASA RP-1036, 1979 9] NRC  New Frontiers in the Solar System: an Integrated Exploration Strategy  Decadal Survey D.C.: The Nat. Academies Press, 2003 10] International Lunar Network Science Definition Team Final Report, 2009 BIOGRAPHY Melissa Jones is a member of the technical staff in the Planetary and Lunar Mission Concepts Group at the Jet Propulsion Laboratory.  Current work includes development of small Lunar lander concepts and instrument packages to deploy on the Moon,  Report Manager for the Titan Saturn System Mission Outer Planets Flagship Mission study, and staffing various concept studies as a systems engineer on Team X, JPL  s mission design team.  Melissa graduated from Loras College with a B.S. in Chemistry and a Ph.D. in Space and Planetary Science from the University of Arkansas  Linda Herrell has a BA in math/computer science/languages \(University of Texas fluids and heat transfer \(City College of New York addition to analytical work in computer science and thermal and structural analysis, she has worked as both a payload \(instrument Earth orbiting \(Hubble Space Telescope, Earth Observing System \(EOS Cassini as Proposal Manager for several NASA science missions She currently serves as the Program Architect for NASA's New Millennium Program    Table 9. Instrument data volumes generated at the hub after 16 Earth day lunar night Science Instrument Compressed Data Volume Received at Hub Mb Seismometer 1980 Magnetometer 920 Heat Flow Probe 5 Seismic Sounder 0 Instrument &amp; Hub Engineering Data 72 Total 2977 Hub Memory 5000 Margin 40  17 Bruce Banerdt has been a research geophysicist at the California Institute of Technology's Jet Propulsion Laboratory since 1977, where he does research in planetary geophysics and instrument development for flight projects. He has been on science teams for numerous planetary missions 


on science teams for numerous planetary missions including Magellan, Mars Observer, Mars Global Surveyor and Rosetta. He was the US Project Scientist for the international Mars NetLander mission, for which he was also principal investigator of the Short-Period Seismometer experiment, and is currently the Project Scientist for the Mars Exploration Rovers. He led the Geophysics and Planetary Geology group at JPL from 1993-2005, and is the JPL Discipline Program Manager for Planetary Geosciences. He has held several visiting appointments at the Institut de Physique du Globe de Paris. He has a BS in physics and a PhD in geophysics from the University of Southern California  David Hansen is a member of the technical staff in the Communications Systems and Operations Group at the Jet Propulsion Laboratory. Current work includes the development of the telecom subsystem for the Juno project. David received a B.S. in Electrical Engineering from Cornell University and an M.S. in Electrical Engineering from Stanford University  Robert Miyake is a member of the technical staff in the Mission and Technology Development Group at the Jet Propulsion Laboratory. Current work includes the development of thermal control subsystems for interplanetary flagship missions to Jupiter and Saturn missions to Mars and the Earth Moon, and is the lead Thermal Chair for the Advanced Project Design Team Robert graduated with a B. S. from San Jose State University, with extensive graduate studies at UCLA University of Washington, and University of Santa Clara  Steve Kondos is a consultant to the Structures and Mechanisms group at the Jet Propulsion Laboratory. He currently is generating the mechanical concepts for small Lunar Landers and Lunar Science Instrument packages in support of various Lunar mission initiatives. He also provides conceptual design, mass and cost estimating support for various Team X studies as the lead for the Mechanical Subsystem Chair. Steve is also involved with various other studies and proposals and provides mentoring to several young mechanical and system engineers. He graduated with a B.S. in Mechanical Engineering from the University of California, Davis and has 28 years of experience in the aerospace field ranging from detail part design to system of systems architecture development. He has worked both in industry and in government in defense, intelligence commercial and civil activities that range from ocean and land based systems to airborne and space systems. Steve has received various NASA, Air Force, Department of Defense and other agency awards for his work on such projects as the NASA Solar Array Flight Experiment, Talon Gold, MILSTAR, Iridium, SBIRS, Mars Exploration Rovers ATFLIR, Glory Aerosol Polarimeter System and several Restricted Programs  Paul Timmerman is a senior member of technical staff in the Power Systems Group at the Jet Propulsion Laboratory Twenty-five years of experience in spacecraft design including 22 at JPL, over 250 studies in Team-X, and numerous proposals. Current assignments include a wide variety of planetary mission concepts, covering all targets within the solar system and all mission classes. Paul graduated from Loras College with a B.S. in Chemistry in 1983  Vincent Randolph is a senior engineer in the Advanced Computer Systems and 


the Advanced Computer Systems and Technologies Group at the Jet Propulsion Laboratory. Current work includes generating Command and Data Handling Subsystem conceptual designs for various proposals and Team X.  He also supports Articulation Control and Electronics design activities for the Advanced Mirror Development project. Vincent graduated from the University of California at Berkeley with a B.S. in Electrical Engineering 18  pre></body></html 


i models into time and covariate dependent dynamic counterparts  ii models and reliability analysis in a more realistic manner  iii level  whether or not functional components \(loyal generals diagnose correctly and take proper actions such as fault mask of failed components \(traitors asymmetric  iv survivability analysis. Evolutionary game modeling can derive sustainable or survivable strategies \(mapped from the ESS in EGT such as node failures such as security compromise level modeling in the so-called three-layer survivability analysis developed in Ma \(2008a this article  v offer an integrated architecture that unite reliability survivability, and fault tolerance, and the modeling approaches with survival analysis and evolutionary game theory implement this architecture. Finally, the dynamic hybrid fault models, when utilized to describe the survival of players in EGT, enhance the EGT's flexibility and power in modeling the survival and behaviors of the game players which should also be applicable to other problem domains where EGT is applicable  5. OPERATIONAL LEVEL MODELING AND DECISION-MAKING  5.1. Highlights of the Tactical and Strategic Levels  Let's first summarize what are obtainable at both tactical and strategic levels. The results at both tactical and strategic levels are precisely obtainable either via analytic or simulation optimization. With the term precisely, we mean that there is no need to assign subjective probabilities to UUUR events. This is possible because we try to assess the consequences of UUUR events \(tactical level ESS strategies \(strategic level time prediction of survivability. The following is a list of specific points. I use an assumed Wireless Sensor Network WSN  i of UUUR events: \(a actions which can be treated as censored events; \(b Cont' of Box 4.2 It can be shown that the replicator differential equations are equivalent to the classical population dynamics models such as Logistic differential equation and LotkaVolterra equation \(e.g., Kot 2001 Logistic equation, or the limited per capital growth rate is similar to the change rate of the fitness  xfxfi which can be represented with the hazard function or survivor functions introduced in the previous section on survival analysis.  This essentially connects the previous survival analysis modeling for lifetime and reliability with the EGT modeling. However, EGT provides additional modeling power beyond population dynamics or survival analysis approaches introduced in the previous section. The introduction of evolutionary theory makes the games played by a population evolvable. In other words, each player \(individual 


other words, each player \(individual agent and players interact with each other to evolve an optimized system Box 4.3. Additional Comments on DHF Models  The above introduced EGT models are very general given they are the system of ordinary differential equations. Furthermore, the choice of fitness function f\(x complexity to the differential equation system.  The system can easily be turned into system of nonlinear differential equations. The analytical solution to the models may be unobtainable when nonlinear differential equations are involved and simulation and/or numerical computation are often required  In the EGT modeling, Byzantine generals are the game players, and hybrid fault models are conveniently expressed as the strategies of players; the players may have different failure or communication behaviors Furthermore, players can be further divided into groups or subpopulations to formulate more complex network organizations. In the EGT modeling, reliability can be represented as the payoff \(fitness, the native term in EGT of the game. Because reliability function can be replaced by survivor function, survival analysis is seamlessly integrated into the EGT modeling. That is, let Byzantine generals play evolutionary games and their fitness reliability function  The evolutionary stable strategy \(ESS counterpart of Nash equilibrium in traditional games ESS corresponds to sustainable strategies, which are resistant to both internal mutations \(such as turning into treason generals or nodes such as security compromises represent survivable strategies and survivability in survivability analysis. Therefore, dynamic hybrid fault models, after the extension with EGT modeling, can be used to study both reliability and survivability 13 risks such as competing risks which can be described with CRA; \(c captured with the shard frailty.  We believe that these UUUR events are sufficiently general to capture the major factors/events in reliability, security and survivability whose occurrence probabilities are hard or impossible to obtain  Instead of trying to obtain the probabilities for these events which are infeasible in most occasions, we focus on analyzing the consequences of the events.  With survival analysis, it is possible to analyze the effects of these types of events on survivor functions. In addition, spatial frailty modeling can be utilized to capture the heterogeneity of risks in space, or the spatial distribution of risks \(Ma 2008a d UUUR events introduced previously. These approaches and models that deal with the effects of UUUR events form the core of tactical level modeling  To take advantage of the tactical level modeling approaches it is obviously necessary to stick to the survivor functions or hazard functions models. In other words, survival analysis can deal with UUUR events and offer every features reliability function provides, but reliability function cannot deal with UUUR events although survivor function and reliability function have the exactly same mathematical definition. This is the junction that survival analysis plays critical role in survivability analysis at tactical level. However, we 


recognize that it is infeasible to get a simple metric for survivability similar to reliability with tactical level modeling alone. Actually, up to this point, we are still vague for the measurement of survivability or a metric for survivability. We have not answered the question: what is our metric for survivability? We think that a precise or rigorous definition of survivability at tactical level is not feasible, due to the same reason we cited previously  the inability to determine the probabilities of UUUR events However, we consider it is very helpful to define a work definition for survivability at the tactical level  We therefore define the survivability at tactical level as a metric, Su\(t t function or reliability function with UUUR events considered. In the framework of three-layer survivability analysis, this metric is what we mean with the term survivability. The "metric" per se is not the focus of the three-layer survivability analysis. It is not very informative without the supports from the next two levels  strategic and operational models.  However, it is obvious that this metric sets a foundation to incorporate UUUR effects in the modeling at the next two levels  Due to the inadequacy of tactical level modeling, we proposed the next level approach  strategic level modeling for survivability. As expected, the tactical level is one foundation of strategic level modeling ii objectives: \(a affect survivability which survival analysis alone is not adequate to deal with; \(b survivability at tactical level is necessary but not sufficient for modeling survivability, we need to define what is meant with the term survivability at strategic level  With regard to \(a behaviors or modes which have very different consequences. These failure behaviors can be captured with hybrid fault models. However, the existing hybrid fault models in fault tolerance field are not adequate for applying to survivability analysis. There are two issues involved: one is the lack of real time notion in the constraints for hybrid fault models \(e.g., N&gt;3m+1 for Byzantine Generals problem synthesize the models after the real-time notions are introduced. The solution we proposed for the first issue is the dynamic hybrid fault models, which integrate survivor functions with traditional hybrid fault models. The solution we proposed for the second issue is the introduction of EGT modeling  With regard to \(b modeling our problem at strategic level, EGT modeling is essentially a powerful optimization algorithm.  One of the most important results from EGT modeling is the so-called evolutionary stable strategies \(ESS We map the ESS in EGT to survivable strategies in survivability analysis.   Therefore, at the strategic level, our work definition for survivability refers to the survivable strategies or sustainable strategies in the native term of EGT, which can be quantified with ESS  In addition to integrating dynamic hybrid fault models another advantage for introducing EGT modeling at strategic level is the flexibility for incorporating other node behaviors \(such as cooperative vs. non-cooperative those behaviors specified in standard hybrid fault models, as well as anthropocentric factors such as costs constraints  Without UUUR events, both tactical and strategic level 


Without UUUR events, both tactical and strategic level models default to regular reliability models. This implies that, in the absence of UUUR events, reliable strategies are sustainable or survivable.  This also implies that three-layer survivability analysis defaults to reliability analysis however, the three-layer approach does offer some significant advantages over traditional reliability analysis, as discussed in previous sections. Nevertheless, when UUUR events exist, reliable strategies and survivable strategies are different. This necessitates the next operational level modeling  5.2. Operational Level Modeling and Decision-Making  When UUUR events are involved, we cannot make real time predictions of survivability at tactical and strategic levels This implies that the implementations of survivable 14 strategies need additional measures that we develop in this section.  Box 5.1 explains the ideas involved with possibly the simplest example  Figure 4 is a diagram showing a simplified relationship between action threshold survivability \(TS survivability \(ES view since both TS and ES are multidimensional and dynamic in practice. Therefore, the sole purpose of the diagram is to illustrate the major concepts discussed above The blue curve is the survivability when survivable strategies specified by ESS are implemented at some point before time s.  The system is then guaranteed to hold survivability above ES. In contrary, if no ESS implemented before time s, then the system quickly falls below to the survivable level at around 40 time units  T i m e 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 1 0 0 Su rv iv ab ili ty M et ric S u t 0 . 0 0 . 1 0 . 2 0 . 3 0 . 4 0 . 5 0 . 6 0 . 7 0 . 8 0 . 9 1 . 0 E S S  i s  I m p lm e n t e d N o  E S S  is  I m p lm e n t e d ts E S T S  Figure 4. A Diagram Showing the Relationship Between TS and ES, as well as timing of s and t, with s &lt; t  6. SUMMARY  The previous sections discussed the major building blocks 


The previous sections discussed the major building blocks for the new life-system inspired PHM architecture. This section first identifies a few minor aspects that have not been discussed explicitly but are necessary for the implementation of the architecture, and then we summarize the major building blocks in a diagram  6.1. Missing Components and Links  Optimization Objectives  Lifetime, reliability, fault tolerance, and survivability, especially the latter two, are application dependent. Generally, the optimization of reliability and survivability are consistent; in that maximization of reliability also implies maximization of survivability. However, when application detail is considered, optimization of lifetime is not necessarily consistent with the optimization of reliability. Consider the case of the monitoring sensor network as an example. The network reliability is also dependent on connectivity coverage, etc, besides network lifetime. What may be further complicated is the time factor. All of the network metrics are time-dependent. A paradoxical situation between lifetime and reliability could be that nodes never 'sleep                                                   


          Box 5.1 Operational Level Modeling  Assuming that the ESS solution for a monitoring sensor network can be expressed with the following simple algebraic conditions: survivability metric at tactical level SU = 0.7, Router-Nodes in the WSN &gt; 10%, Selfish Nodes &lt; 40%. Even with this extremely simplified scenario, the ESS strategies cannot be implemented because we do not know when the actions should be taken to warrant a sustainable system.  These conditions lack a correlation with real time  The inability to implement ESS is rooted in our inability to assign definite probabilities to UUUR events, which implies that we cannot predict when something sufficiently bad will jeopardize the system survivability What we need at the operational level is a scheme to ensure ESS strategy is in place in advance  The fundamental idea we use to implement the ESS strategy is to hedge against the UUUR events. The similar idea has been used in financial engineering and also in integrated pest management in entomology. This can be implemented with the following scheme  Let us define a pair of survivability metrics: one is the expected survivability \(ES threshold survivability or simply threshold survivability \(TS ES is equivalent to the survivability metric at tactical level. ES corresponds to ESS at strategic level, but they are not equivalent since ESS is strategy and ES is survivability. TS is the survivability metric value \(at tactical level and TS can be obtained from strategic level models. For example, TS = SU\(s t condition for the implementation of ESS. In other words, the implementation of strategies that ensures TS at time s will guarantee the future ES level at time t.  To make the implementation more reliable and convenient multiple dynamic TSs can be computed at time s1, s2 sk, with si &lt; t for all i.  These TS at times s1, s2, ..., sk should be monitored by some evaluation systems  Unlike tactical and strategic levels, the operational level modeling is approximate. The term "approximate means that we cannot predict the real time survivability or we do not know the exact time an action should be taken. Instead, the action is triggered when the monitored survivability metric SU\(r survivability \(TS scheme of TS and ES, we ensure the ES by taking preventative actions \(prescribed by ESS and triggered by the TS consequences of UUUR events  Figure 4 is a diagram showing the above concepts and the decision-making process involved 15 This wakefulness \(never 'sleep short period but at the expense of network lifetime. Of course, when the network is running out of lifetime, network reliability ultimately crashes. This example reminds us that 


reliability ultimately crashes. This example reminds us that multi-objective optimization should be the norm rather than exception  Constraints and Extensions  Many application specific factors and constraints are ignored in this article. For example, we mentioned about spatial heterogeneity of environment, but never present a mathematical description The spatial heterogeneity can be modeled with the so-called spatial frailty in multivariate survival analysis \(Ma 2008a  Evolutionary Algorithm  Evolutionary game modeling when implemented in simulation, can be conveniently implemented with an algorithm similar to Genetic Algorithms \(GA ESS in the evolutionary game model with simulation is very similar to GA. Dynamic populations, in which population size varies from generation to generation \(Ma &amp; Krings 2008f of node failures. Another issue to be addressed is the synchronous vs. asynchronous updating when topology is considered in the simulation. This update scheme can have profound influences on the results of the simulation. Results from cellular automata computing should be very useful for getting insights on the update issue  6.2. Summary and Perspective  To recapture the major points of the article, let us revisit Figure 3, which summarizes the principal modules of the proposed life-system inspired PHM architecture. The main inspiration from life systems is the notion of individuals and their assemblage, the population. Population is an emergent entity at the next level and it has emergent properties which we are often more concerned with. Survival analysis, which has become a de facto standard in biomedicine, is particularly suitable for modeling population, although it is equally appropriate at individual level. Therefore, survival analysis \(including competing risks analysis and multivariate survival analysis comprehensively in the context of PHM in a series of four papers presented at IEEE AeroSpace 2008 \(Ma &amp; Krings 2008a, b, c, &amp; d proposed architecture. Survival analysis constitutes the major mathematical tools for analyzing lifetime and reliability, and also forms the tactical level of the three-layer survivability analysis  Besides lifetime and reliability, two other major modules in Figure 3 are fault tolerance and survivability. To integrate fault tolerance into the PHM system, Dynamic Hybrid Fault DHF 2008e, Ma 2008a make real-time prediction of reliability more realistic and make real-time prediction of fault tolerance level possible DHF models also unite lifetime, reliability and fault tolerance under a unified modeling framework that consists of survival analysis and evolutionary game theory modeling  DHG models also form the partial foundation, or strategic level, for the three-layer survivability analysis. At the strategic level, the Evolutionary Stable Strategies \(ESS which is mapped to survivable or sustainable strategies, can be obtained from the evolutionary game theory based DHF models. When there is not any UUUR event involved reliability and survivability are consistent, and reliable strategies are survivable. In this case, the strategic level modeling up to this point is sufficient for the whole PHM system modeling, and there is no need for the next level  operational level modeling  When there are UUUR events in a PHM system, the 


When there are UUUR events in a PHM system, the inability to determine the occurrence probabilities of UUUR events makes the operational level modeling necessary Then the principle of hedging must be utilized to deal with the "hanging" uncertainty from UUUR events. In this case reliability strategies are not necessarily survivable strategies At the operational level modeling, a duo of survivability metrics, expected survivability \(ES survivability \(TS the survivable strategies \(ESS level are promptly implemented based on the decisionmaking rules specified with the duo of survivability metrics then the PHM system should be able to endure the consequences of potentially catastrophic UUUR events. Of course, to endure such catastrophic events, the cost may be prohibitively high, but the PHM system will, at least, warn decision-makers for the potentially huge costs.  It might be cheap to just let it fail  Figure 3 also shows several other modules, such as security safety, application systems \(such as Automatic Logistics CBM+, RCM, Life cycle cost management, Real-time warning and alert systems architectures, but we do not discuss in this paper. Generally the new architecture should be fully compatible with existing ones in incorporating these additional modules. One point we stressed is that PHM system can be an ideal place to enforce security policies. Enforcing security policies can be mandatory for PHM systems that demand high security and safety such as weapon systems or nuclear plant facilities.  This is because maintenance, even without human-initiated security breaches, can break the security policies if the maintenance is not planned and performed properly  In perspective, although I did not discuss software issues in this paper, the introduced approaches and models should provide sufficient tools for modeling software reliability and survivability with some additional extension. Given the critical importance of software to modern PHM systems, we present the following discussion on the potential extension to software domain. Specifically, two points should be noted: \(1 architecture to software should be a metric which can 16 replace the time notion in software reliability; I suggest that the Kolmogorov complexity \(e.g., Li and Vitanyi 1997 be a promising candidate \(Ma 2008a change is because software does not wear and calendar time for software reliability usually does not make much sense 2 software reliability modeling.  Extending to general survivability analysis is not a problem either. In this article I implicitly assume that reliability and survivability are positively correlated, or reliability is the foundation of survivability. This positive correlation does not have to be the case. A simplified example that illustrates this point is the 'limit order' in online stock trading, in which limit order can be used in either direction: that stock price is rising or falling.  The solution to allow negative or uncorrelated relationships between reliability and survivability are very straightforward, and the solutions are already identified in previous discussions. Specifically, multiple G-functions and multi-stage G-functions by Vincent and Brown \(2005 very feasible solution, because lifetime, reliability and survivability may simply be represented with multiple Gfunctions. Another potential solution is the accommodation of the potential conflicts between reliability and survivability with multi-objective GA algorithms, which I previously suggested to be used as updating algorithms in the optimization of evolutionary games  


 The integration of dynamic hybrid fault models with evolutionary game modeling allows one to incorporate more realistic and detailed failure \(or survival individual players in an evolutionary game. This is because dynamic hybrid fault models are supported by survival analysis modeling, e.g., time and covariate dependent hazard or survivor functions for individual players. If necessary, more complex survival analysis modeling including competing risks analysis and multivariate survival analysis, can be introduced.  Therefore, any field to which evolutionary game theory is applicable may benefit from the increased flexibility in modeling individual players.  Two particularly interesting fields are system biology and ecological modeling.  In the former field, dynamic hybrid fault models may find important applications in the study of biological networks \(such as gene, molecular, and cell networks 2008g conjecture that explains the redundancy in the universal genetic code with Byzantine general algorithm. In addition they conducted a comparative analysis of bio-robustness with engineering fault tolerance, for example, the strong similarity between network survivability and ecological stability \(Ma &amp; Krings 2008g survivability analysis can be applied for the study of survivals or extinctions of biological species under global climate changes \(Ma 2008b  In this paper, I have to ignore much of the details related to the implementation issues to present the overall architecture and major approaches clearly and concisely. To deal with the potential devils in the implementation details, a well funded research and development team is necessary to take advantages of the ideas presented here. On the positive side I do see the great potential to build an enterprise PHM software product if there is sufficient resource to complete the implementation. Given the enormous complexity associated with the PHM practice in modern engineering fields, it is nearly impossible to realize or even demonstrate the benefits of the architecture without the software implementation. The critical importance of PHM to mission critical engineering fields such as aerospace engineering, in turn, dictates the great value of such kind software product  6.3. Beyond PHM  Finally, I would like to raise two questions that may be interested in by researchers and engineers beyond PHM community. The first question is: what can PHM offer to other engineering disciplines? The second question is: what kinds of engineering fields benefit most from PHM? Here, I use the term PHM with the definition proposed by IEEE which is quoted in the introduction section of the paper  As to the first question, I suggest software engineering and survivability analysis are two fields where PHM can play significant roles. With software engineering, I refer to applying PHM principles and approaches for dealing with software reliability, quality assurance, and even software process management, rather than building PHM software mentioned in the previous subsection. For survivability analysis, borrowing the procedures and practices of PHM should be particularly helpful for expanding its role beyond its originating domain \(network systems that control critical national infrastructures is a strong advocate for the expansion of survivability analysis to PHM. Therefore, the interaction between PHM and survivability analysis should be bidirectional. Indeed, I see the close relationships between PHM, software engineering, and survivability as well-justified because they all share some critical issues including reliability survivability, security, and dependability  


 The answer to the second question is much more elusive and I cannot present a full answer without comparative analysis of several engineering fields where PHM has been actively practiced. Of course, it is obvious that fields which demand mission critical reliability and dependability also demand better PHM solutions. One additional observation I would like to make is that PHM seems to play more crucial roles for engineering practices that depend on the systematic records of 'historical' data, such as reliability data in airplane engine manufacturing, rather than on the information from ad hoc events.  This may explain the critical importance of PHM in aerospace engineering particularly in commercial airplane design and manufacturing.  For example, comparing the tasks to design and build a space shuttle vs. to design and manufacture commercial jumbo jets, PHM should be more critical in the latter task  17    Figure 2. States of a monitoring sensor node and its failure modes \(after Ma &amp; Krings 2008e     Figure 3. Core Modules and their Relationships of the Life System Inspired PHM Architecture    REFERENCES  Adamides, E. D., Y. A. Stamboulis, A. G. Varelis. 2004 Model-Based Assessment of Military Aircraft Engine Maintenance Systems Model-Based Assessment of Military Aircraft Engine Maintenance Systems. Journal of the Operational Research Society, Vol. 55, No. 9:957-967  Anderson, R. 2001. Security Engineering. Wiley  Anderson, R. 2008. Security Engineering. 2nd ed. Wiley  Bird, J. W., Hess, A. 2007.   Propulsion System Prognostics R&amp;D Through the Technical Cooperation Program Aerospace Conference, 2007 IEEE, 3-10 March 2007, 8pp  Bock, J. R., Brotherton, T., W., Gass, D. 2005. Ontogenetic reasoning system for autonomic logistics. Aerospace Conference, 2005 IEEE 5-12 March 2005.Digital Object Identifier 10.1109/AERO.2005.1559677  Brotherton, T., P. Grabill, D. Wroblewski, R. Friend, B Sotomayer, and J. Berry. 2002. A Testbed for Data Fusion for Engine Diagnostics and Prognostics. Proceedings of the 2002 IEEE Aerospace Conference  Brotherton, T.; Grabill, P.; Friend, R.; Sotomayer, B.; Berry J. 2003. A testbed for data fusion for helicopter diagnostics and prognostics. Aerospace Conference, 2003. Proceedings 2003 IEEE  Brown, E. R., N. N. McCollom, E-E. Moore, A. Hess. 2007 Prognostics and Health Management A Data-Driven Approach to Supporting the F-35 Lightning II. 2007 IEEE AeroSpace Conference  Byington, C.S.; Watson, M.J.; Bharadwaj, S.P. 2008 Automated Health Management for Gas Turbine Engine Accessory System Components. Aerospace Conference 2008 IEEE, DOI:10.1109/AERO.2008.4526610 


2008 IEEE, DOI:10.1109/AERO.2008.4526610 Environment Covariates &amp; Spatial Frailty Applications: AL; Life Cycle Mgmt; Real-Time Alerts CBM+, RCM, TLCSM; Secret Sharing and Shared Control 18 Chen, Y. Q., S. Cheng. 2005. Semi-parametric regression analysis of mean residual life with censored survival data Biometrika \(2005  29  Commenges, D. 1999. Multi-state models in Epidemiology Lifetime Data Analysis. 5:315-327  Cook, J. 2004. Contrasting Approaches to the Validation of Helicopter HUMS  A Military User  s Perspective Aerospace Conference, 2004 IEEE  Cook, J. 2007. Reducing Military Helicopter Maintenance Through Prognostics. Aerospace Conference, 2007 IEEE Digital Object Identifier 10.1109/AERO.2007.352830  Cox, D. R. 1972. Regression models and life tables.  J. R Stat. Soc. Ser. B. 34:184-220  Crowder, M. J.  2001. Classical Competing Risks. Chapman amp; Hall. 200pp  David, H. A. &amp; M. L. Moeschberger. 1978. The theory of competing risks. Macmillan Publishing, 103pp  Ellison, E., L. Linger, and M. Longstaff. 1997.  Survivable Network Systems: An Emerging Discipline, Carnegie Mellon, SEI, Technical Report CMU/SEI-97-TR-013  Hanski, I. 1999. Metapopulation Ecology. Oxford University Press  Hallam, T. G. and S. A. Levin. 1986. Mathematical Ecology. Biomathematics. Volume 17. Springer. 457pp  Hess, A., Fila, L. 2002.  The Joint Strike Fighter \(JSF concept: Potential impact on aging aircraft problems Aerospace Conference Proceedings, 2002. IEEE. Digital Object Identifier: 10.1109/AERO.2002.1036144  Hess, A., Calvello, G., T. Dabney. 2004. PHM a Key Enabler for the JSF Autonomic Logistics Support Concept. Aerospace Conference Proceedings, 2004. IEEE  Hofbauer, J. and K. Sigmund. 1998. Evolutionary Games and Population Dynamics. Cambridge University Press 323pp  Hougaard, P. 2000. Analysis of Multivariate Survival Data Springer. 560pp  Huzurbazar, A. V. 2006. Flow-graph model for multi-state time-to-event data. Wiley InterScience  Ibrahim, J. G., M. H. Chen and D. Sinha. 2005. Bayesian Survival Analysis. Springer. 481pp  Kacprzynski, G. J., Roemer, M. J., Hess, A. J. 2002. Health management system design: Development, simulation and cost/benefit optimization. IEEE Aerospace Conference Proceedings, 2002. DOI:10.1109/AERO.2002.1036148  Kalbfleisch, J. D., and R. L. Prentice, 2002. The Statistical Analysis of Failure Time Data. Wiley-InterScience, 2nd ed  Kalgren, P. W., Byington, C. S.   Roemer, M. J.  2006 Defining PHM, A Lexical Evolution of Maintenance and Logistics. Systems Readiness Technology Conference 


Logistics. Systems Readiness Technology Conference IEEE. DOI: 10.1109/AUTEST.2006.283685  Keller, K.; Baldwin, A.; Ofsthun, S.; Swearingen, K.; Vian J.; Wilmering, T.; Williams, Z. 2007. Health Management Engineering Environment and Open Integration Platform Aerospace Conference, 2007 IEEE, Digital Object Identifier 10.1109/AERO.2007.352919  Keller, K.; Sheahan, J.; Roach, J.; Casey, L.; Davis, G Flynn, F.; Perkinson, J.; Prestero, M. 2008. Power Conversion Prognostic Controller Implementation for Aeronautical Motor Drives. Aerospace Conference, 2008 IEEE. DOI:10.1109/AERO.2008.4526630  Klein, J. P. and M. L. Moeschberger. 2003. Survival analysis techniques for censored and truncated data Springer  Kingsland, S. E. 1995. Modeling Nature: Episodes in the History of Population Ecology. 2nd ed., University of Chicago Press, 315pp  Kot, M. 2001. Elements of Mathematical Ecology Cambridge University Press. 453pp  Krings, A. W. and Z. S. Ma. 2006. Fault-Models in Wireless Communication: Towards Survivable Ad Hoc Networks Military Communications Conference, 23-25 October, 7 pages, 2006  Lamport, L., R. Shostak and M. Pease. 1982. The Byzantine Generals Problem. ACM Transactions on Programming Languages and Systems, 4\(3  Lawless, J. F. 2003. Statistical models and methods for lifetime data. John Wiley &amp; Sons. 2nd ed  Line, J. K., Iyer, A. 2007. Electronic Prognostics Through Advanced Modeling Techniques. Aerospace Conference 2007 IEEE. DOI:10.1109/AERO.2007.352906  Lisnianski, A., Levitin, G. 2003. Multi-State System Reliability: Assessment, Optimization and Applications World Scientific  Liu, Y., and K. S. Trivedi. 2006. Survivability Quantification: The Analytical Modeling Approach, Int. J of Performability Engineering, Vol. 2, No 1, pp. 29-44  19 Luchinsky, D.G.; Osipov, V.V.; Smelyanskiy, V.N Timucin, D.A.; Uckun, S. 2008. Model Based IVHM System for the Solid Rocket Booster. Aerospace Conference, 2008 IEEE.DOI:10.1109/AERO.2008.4526644  Lynch, N. 1997. Distributed Algorithms. Morgan Kaufmann Press  Ma, Z. S. 1997. Demography and survival analysis of Russian wheat aphid. Ph.D. dissertation, Univ. of Idaho 306pp  Ma, Z. S. 2008a. New Approaches to Reliability and Survivability with Survival Analysis, Dynamic Hybrid Fault Models, and Evolutionary  Game Theory. Ph.D. dissertation Univ. of Idaho. 177pp  Ma, Z. S. 2008b. Survivability Analysis of Biological Species under Global Climate Changes: A New Distributed and Agent-based Simulation Architecture with Survival Analysis and Evolutionary Game Theory. The Sixth 


International Conference on Ecological Informatics. Dec 25, 2008. Cancun, Mexico  Ma, Z. S. and E. J. Bechinski. 2008. A Survival-Analysis based  Simulation Model for Russian Wheat Aphid Population Dynamics. Ecological Modeling, 216\(2 332  Ma, Z. S. and A. W. Krings. 2008a.  Survival Analysis Approach to Reliability Analysis and Prognostics and Health Management \(PHM  AIAA AeroSpace Conference, March 1-8, 2008, Big Sky, MT, 20pp  Ma, Z. S. and A. W. Krings. 2008b. Competing Risks Analysis of Reliability, Survivability, and Prognostics and Health Management \(PHM  AIAA AeroSpace Conference, March 1-8, 2008.  Big Sky, MT. 20pp  Ma, Z. S. and A. W. Krings. 2008c. Multivariate Survival Analysis \(I Dependence Modeling", Proc. IEEE  AIAA AeroSpace Conference, March 1-8, 2008, Big Sky, MT. 21pp  Ma, Z. S. and A. W. Krings., R. E. Hiromoto. 2008d Multivariate Survival Analysis \(II State Models in Biomedicine and Engineering Reliability IEEE International Conference of Biomedical Engineering and Informatics, BMEI 2008.  6 Pages  Ma, Z. S. and A. W. Krings. 2008e. Dynamic Hybrid Fault Models and their Applications to Wireless Sensor Networks WSNs Modeling, Analysis and Simulation of Wireless and Mobile Systems. \(ACM MSWiM 2008 Vancouver, Canada  Ma, Z. S. &amp; A. W. Krings. 2008f. Dynamic Populations in Genetic Algorithms. SIGAPP, the 23rd Annual ACM Symposium on Applied Computing, Ceara, Brazil, March 16-20, 2008. 5 Pages  Ma, Z. S. &amp; A. W. Krings. 2008g. Bio-Robustness and Fault Tolerance: A New Perspective on Reliable, Survivable and Evolvable Network Systems, Proc. IEEE  AIAA AeroSpace Conference, March 1-8, Big Sky, MT, 2008. 20 Pages  Ma, Z. S.  and A. W. Krings. 2009. Insect Sensory Systems Inspired Computing and Communications.  Ad Hoc Networks 7\(4  MacConnell, J.H. 2008. Structural Health Management and Structural Design: An Unbridgeable Gap? 2008 IEEE Aerospace Conference, DOI:10.1109/AERO.2008.4526613  MacConnell, J.H. 2007. ISHM &amp; Design: A review of the benefits of the ideal ISHM system. Aerospace Conference 2007 IEEE. DOI:10.1109/AERO.2007.352834  Marshall A. W., I. Olkin. 1967. A Multivariate Exponential Distribution. Journal of the American Statistical Association, 62\(317 Mar., 1967  Martinussen, T. and T. H. Scheike. 2006. Dynamic Regression Models for Survival Data. Springer. 466pp  Mazzuchi, T. A., R. Soyer., and R. V. Spring. 1989. The proportional hazards model in reliability. IEEE Proceedings of Annual Reliability and Maintainability Symposium pp.252-256  Millar, R.C., Mazzuchi, T.A. &amp; Sarkani, S., 2007. A Survey of Advanced Methods for Analysis and Modeling of 


of Advanced Methods for Analysis and Modeling of Propulsion System", GT2007-27218, ASME Turbo Expo 2007, May 14-17, Montreal, Canada  Millar, Richard C., "Non-parametric Analysis of a Complex Propulsion System Data Base", Ph.D. Dissertation, George Washington University, June 2007  Millar, R. C. 2007. A Systems Engineering Approach to PHM for Military Aircraft Propulsion Systems. Aerospace Conference, 2007 IEEE. DOI:10.1109/AERO.2007.352840  Millar, R. C. 2008.  The Role of Reliability Data Bases in Deploying CBM+, RCM and PHM with TLCSM Aerospace Conference, 2008 IEEE, 1-8 March 2008. Digital Object Identifier: 10.1109/AERO.2008.4526633  Nowak, M. 2006. Evolutionary Dynamics: Exploring the Equations of Life. Harvard University Press. 363pp  Oakes, D. &amp; Dasu, T. 1990. A note on residual life Biometrika 77, 409  10  Pintilie, M. 2006. Competing Risks: A Practical Perspective.  Wiley. 224pp  20 Smith, M. J., C. S. Byington. 2006. Layered Classification for Improved Diagnostic Isolation in Drivetrain Components. 2006 IEEE AeroSpace Conference  Therneau, T. and P. Grambsch. 2000. Modeling Survival Data: Extending the Cox Model. Springer  Vincent, T. L. and J. L. Brown. 2005. Evolutionary Game Theory, Natural Selection and Darwinian Dynamics Cambridge University Press. 382pp  Wang. J., T. Yu, W. Wang. 2008. Research on Prognostic Health Management \(PHM on Flight Data. 2008 Int. Conf. on Condition Monitoring and Diagnosis, Beijing, China, April 21-24, 2008. 5pp  Zhang, S., R. Kang, X. He, and M. G. Pecht. 2008. China  s Efforts in Prognostics and Health Management. IEEE Trans. on Components and Packaging Technologies 31\(2             BIOGRAPHY  Zhanshan \(Sam scientist and earned the terminal degrees in both fields in 1997 and 2008, respectively. He has published more than 60 peer-refereed journal and conference papers, among which approximately 40 are journal papers and more than a third are in computer science.  Prior to his recent return to academia, he worked as senior network/software engineers in semiconductor and software industry. His current research interests include: reliability, dependability and fault tolerance of distributed and software systems behavioral and cognitive ecology inspired pervasive and 


behavioral and cognitive ecology inspired pervasive and resilient computing; evolutionary &amp; rendezvous search games; evolutionary computation &amp; machine learning bioinformatics &amp; ecoinformatics                 pre></body></html 


