Proceedings of the First International Conference on Machine Learning and Cybernetics Beijing 4-5 November 2002 WEB DOCUMENTS MINING QIN-BA0 SONG\("7b',NAI-QIAN LI SHEN'"',LI-MING CHEN'b a'Department of Computer Science and Technology Xi'an Jiaotong University, Post Code 7 10049 Xi'an, China Department of Mathematics and Computer science, &ole Centrale de Lyon, Post Code 69130 Ecully, France E-MAIL: qbsong mail.xjtu.edu.cn Abstract By grouping similar Web documents into clusters the search space can be 
reduced the search accelerated and its precision improved In this paper one novel-clustering algorithm is introduced In the proposed clustering method topics are represented according to VSM Vector Space Model documents are represented according to the topics and the relation between the documents and the topics is viewed as a transaction one document corresponds to a transaction and one topic corresponds to an item Using association rules mining algorithm discovers the frequent 
item sets and the corresponding documents are seen as the initial clusters The clusters are merged if the distance between them is small enough or the cluster is divided if the connection strength between its documents is smaller than the given threshold. Experiments is conducted on real Web documents results show the algorithm's effectivity and suitability for tackling the overlapping clusters inhered by documents With the rapid development of WWW the resources and the services in Internet are all increasing explosively 
In order to help users effectively use these resources and services many powerful search engines were developed which already brought many conveniences to users In the meantime the problem that these search engines didn't commendably meet user's needs was unfolded By using the Web documents clustering techniques, the search space can be reduced the search accelerated and its precision improved. Hence it attracts many attentions recently 1-61 Web documents clustering approaches are mainly based on either probabilistic methods or distance measures Probabilistic-based methods 5s61 based on Bayesian probability theory which uses probability distributions to describe the clustering results, can 
tackle the situations of overlapping clusters inhered by documents. But they don't perform well when the size of the feature space is much larger than the size of the sample size set or may depend on the independence of the underlying features Distance based methods r41 use feature vector, which can be viewed as one point in multi-dimensional space and represents a Web document by calculating the distances among these points to cluster the corresponding Web documents. But the 0-7803-7508-4/02/$17.00 02002 IEEE Keywords Web document clustering Association rule Web mining 
1 Introduction 791 feature vectors must be normalized, and they don't perform very well if the dimension of the space is very large We represent Web document using topics viewing the relation between documents and topics as a transaction using association rules mining algorithm 7 to discover the frequent item sets and the corresponding documents are seen as the initial clusters These clusters are further validated according to the intracluster similarity and the intercluster similarity And the problems possessed by previously proposed methods were effectively solved 2 The Structurization of Web Document A Web document is one kind of semi-structured data 
which must be structurized in order to be retrieved easily and efficiently. The structurization of a Web document is the process of extracting and describing its features and set up the corresponding structure In order to structurize a Web document we first represent all topics using VSM Vector Space Model\and calculate the Topic Feature Vector and construct Document Topic Vector according to document content and the founded Topic Feature Vector then calculate the Relating Degree between a given document and all topics and set up Document-Topic Transaction; finally, normalize the transaction in order that they can be compared The concepts involved in the above are 
defined and clarified as follows Def~tion 2.1 Topic Feature Vector Let T be the set of all topics for each topic TET its feature vector is weight of ki  which indicates the importance of keyword number of keywords in topic the 1 of different topics may be different Defining topic feature vector using VSM, the keywords and corresponding weights of a given topic can be freely determined according to the specific situation the number of keywords in different topics may be different this 


sufficiently gives attention to the specific situations of all topics and possesses broad applicability and strong maintainability Definition 2.2 Document Topic Vector Let D be the set of documents for each document D~ED the vector D~\(T represents the contribution of document Dj to is the frequency of the P  U DjIJx W,,t kth 1 d k d I keyword ki,k of topic Ti appearing in is the number of valid words in document Dj  IIU D ill document Dj  is the weight of the kth 1 d kb I  keyword ki,k in topic feature vector Ti According to the definition document topic vector reflects the relation between a document and a topic Because the lengths of different topic feature vectors may be different even if the lengths are identical using the document topic vector represent a document will suffer from the high dimensionality In order to reduce the high dimensionality we must calculate the relating degrees between a given document and different topics Definition 2.3  Relating Degree  Relating degree indicates how much the given document relates a topic The relating degree Ai.j between document Dj and topic T is defined as follows 4  zP;k 3 k=l where 2  11<11  is the length of the vector f  u is the contribuation of document Dj to the kth 1 bkbl keyword in topic T  can be calculated by formula 2 Relating degree represents the relating relation between one document and one topic using a data item, this reduces the dimensionality from p lX c 112 to llD 11  greatly decreases the amount of data waiting for processing and lays the foundation for increasing processing efficiency By now we view documents as transactions view topics as transaction items and set up the document-topic transaction matrix as formula 4 as following. Actually this matrix is really one relation table refers to it as one matrix, only with the purpose of easy statement Proceedings of the First International Conference on Machine Learning and Cybernetics Beijing 4-5 November 2002 792 I  I I  I where Ai,j is the relating degree between document Dj and topic T  and can be calculated according to formula 3   each row vector represents one transaction ldidn ldj dm m is the number of topics and n is the number of documents After setting up the transaction matrix U  each row vector must be normalized so the relating degrees can be compared In the meantime refer to the new matrix as Normalized Transaction Matrix, and denote it as Ulxm  The document-topic transaction matrix normalization algorithm is presented as follows  Algorithm 1 Set up normalization document-topic transaction matrix Input D  The set of Web documents T The set of topic Output: document-topic transaction matrix A  feature vectors Function: Set up document-topic transactions 1 for j  1 j llql;j  do begin 2 for really r i  1 i 5 11~11 i  do begin 3 for each k I 1 computing pJ according to formula 2 rC 4 end for 5 compute Ai according to formula 3 6 end for 7 for  i  1 i 5 I\(D11 i  do begin S j 1 j~II~ll;j 10 end for This algorithm comprises of two parts The first part is used to calculate the relating degree between document and topic, and to set up document-topic transaction matrix If let NoKi be the number of key words in topic  the time to normalize the row vector in document-topic transaction matrix and to construct the normalized document-topic transaction matrix the time complexity is D~~xIITII  Hence the total time complexity of the algorithm of document-topic transaction matrix normalization In order to describe it easily we introduce the concept of document feature vector 


Proceedings of the First International Conference on Machine Learning and Cybernetics Beijing 4-5 November 2002 Definition 2.4  Document Feature Vector  In the normalized transaction row vector which presents the relating relation between a document and all IT topics we refer to it as document feature vector and denotes it as vd  3 Web Documents Clustering Based on Association Rule After the normalized transaction matrix ULxm has been set up association rules mining algorithm can be used to discover the frequent set of topics and the corresponding set of documents is the initial document clusters which are verified by the given verific&ion techniques finally 3.1 Discover document clusters using association rules mining algorithm Association rules capture the relationships among items that are presented in a transaction Let I   i i  in be the set of items that comprises of different items T be the set of transactions where each transaction is a subset of I and C be a subset of I The support count of C in I is defined as the number of transactions that contain C as o\(C I{tIte Cc_t l  An association rule is an expression of form x S a Y where x EI,YGI the confidence a of the rule x S a y is defined as a\(X f y  dx 223Y AX And the support S is defined as following 1 s\(X Y XuY 5 The task of discovering an association rule is to find all rules of form x such that S is greater than a given minimum support threshold and 01 is greater than a given minimum confidence threshold According to formula 5 support S indicates the frequency of implication X  Y appearing in the set of transactions T If the frequency of an implication is greater than the given minimum threshold the items which compose the implication make up of the frequent set We think the reason of frequent set existing is that the corresponding transactions are similar to a certain extent In the document-topic transaction matrix we view documents as transactions and topics as items of a transaction. Thus if some items i.e topics\appear together in some transactions i.e documents\these transactions i.e documents are similar too In other words according to the frequent sets obtained by association rules mining algorithm we can find out the corresponding transactions i.e documents and view them as the initial document clusters But as the former description, formula 5 1 indicates the frequency of a set of items appearing in the whole set of ll*II transactions If the frequency of a set of items is smaller than the given minimum support threshold, the set of items would cannot be a frequent set of items We view documents as transactions and topics as items of transaction although the support of some items of transaction is smaller the corresponding transactions are still similar Hence formula 5 already doesn\222t fit into our current situation it needs to be redefined Definition 3.1  Support  Let r=Uzk 221v\222v c r the support of is defined as following where lly,jl 1  is the number of documents in set W  r is the numberof elements whose value is nonzero in all document feature vectors Distinctly support 6\(p of set W is defined as the average of the nonzero relating degree between all documents and all topics it effectively solved the problem of the documents that can not to be put into one cluster only because the general support is smaller than the given minimum support threshold even though the topics involved are similar In the meantime it introduced the idea of fuzzy theory and described the relating reationship between one document and all topics not simply using 2231\224 or 2230\224 but the degrees in range 0,1 which precisely reflected the real world When using association rules mining alogrithm to discover document clusters we first construct frequent topic sets according to Agrawal\222s fast algorithm for mining frenquent item sets 71 and the definition of support presented in this paper and then scan the database to gain the corresponding document sets which are the initial document clusters The fast algorithm for mining frenquent item sets has been introduced detailedly in literature 7 there is no need to repeat 3.2 Verify the document clusters The verification of the initial document clusters consists of two stages The first is to calculate the coupling among different document clusters and merge them if the corresponding coupling is greater than the given minimum coupling threshold Then measure the cohesion of a document cluster and divide it if the corresponding cohesion is smaller than the given minimum cohesion threshold We represent the coupling of the different document clusters as the distance between two document clusters Definition 3.2  Coupling  In order to increase the coupling of a document cluster and to decrease the cohesion among the different document clusters we define the distance between document cluster p and document cluster q as following 793 


Proceedings of the First International Conference on Machine Learning and Cybernetics Beijing 45 November 2002 where np and nq are the number of documents in document cluster p and document cluster q respectively xp and 4 are the center of gravity of document cluster p and document cluster 4 in turn We represent the cohesion of a document cluster as the connecting strength between a document and the document cluster it attached Definition 3.3  Cohesion  The cohesion presents the similarity of documents in a cluster Let C be a document cluster document de C The connecting strength between document d and cluster C is defined as follows   r?\(d,C c 221pd k!::z 24 8 According to the definition connecting strength indicates the contribution of a document to the cluster it attached If the contribution of a document is smaller than the given minimum cohesion threshold this document should be kicked out of the cluster it attached Algorithm 2 Document clusters verification algorithm Input   The set of initial Web document clusters b  Output   the validated Web document clusters Function: Validating the initial Web document clusters 1 for i  1 i 5 11-1 i  do begin 2 for j  2 j 5 1s11 j  do begin 3 DT   Compu-dist C,E   C,E   5 end for 6 delete c and all C cc from   Threshold of coupling 9 Threshold of cohesion 4 ifq then c  uc  7 c+q 8 end for 9 append U C to 93  10 for all clusters 11 forall documents d E C do begin 12 if u\(d C  I v then do begin 13 Ci:=ud 14 delete d from Ci  15\end if 16 end for 17\end for 18\append U c to  c do begin I Document clusters verification algorithm consists of two steps merging and dividing The merging step is a double loop its time complexity is o@I x I 1  where  is the number of initial document clusters generated by association rules mining algorithm. The dividing step is a double loop too its time complexity is o\(JqlXC~q where NOD is the number of documents of the ith cluster Cif Because llql~C and 11s are extremely greater than I the time complexity of this algorithm is 4 Experimental Results We compared our algorithm with search engine Yahoo and algorithm k-means The Web documents used in the experiment were gotten by Yahoo on the Internet At first we tested the precisions of these algorithms We used Yahoo to search the Web documents with 50 different topics on the Internet and downloaded the first 100 documents of each searching in the results and saw them as the 50 classes generated by Yahoo After that we kicked out the irrelevant documents manually and regarded the results as base of the precision comparison And then we used the proposed algorithm and k-means to classify the documents gotten by Yahoo respectively Maybe the number of classes generated by different algorithms is different so we only compared the first 40 high quality classes of each method Figure 1 is the comparison of average precision of different algorithms Because the proposed algorithm permits the overlay between different classes and the validation of classification is adopted the average precision is the highest Fig 1 Precision Comparison Then, we tested the scalabilities of these algorithms. We also used Yahoo to search the Web documents relevant to the preceding 50 topics but we only downloaded the first 10 documents of each topic and increased with the increment 5 to the first 45 documents, formed 8 sets of documents with the number 500 750 1000 1250 1500 1750 2000 and 2250 respectively And then we classified the 8 sets of documents using the proposed algorithm and k-means in turn and computed the average clustering time the results were shown in Figure 2 From Figure 2 we can know, the average executing times of the two algorithms are all increased with the increase of documents, but the increment of the proposed algorithm is smaller. This that presented the scalability of the proposed algorithm is better than k-means The reason is that the proposed algorithm reduced the dimensions of the 794 


Proceedings of the Fitst International Conference on Machine Learning and Cybernetics Beijing 45 November 2002 document feature vector by representing the document using topics At the same time we regarded the topics as items of transaction and reduced the amount of data processing 6 r71 Fig.2 Scalability Comparison 5 Conclusions Web documents clustering can be broadly used in Internet based information retrieval and E-commerce Based on frequent items discovery algorithm we presented one kind of Web documents clustering algorithm In the proposed algorithm a document is seen as one transaction and a topic is seen as one item of transaction. It is suitable for processing the high dimensional data and it posses better scalability At the same time the proposed algorithm is adaptive to the overlapped conditions inhered in document classes References 111 121 131 141 r51 Broder A Z Glassman S C and Manasse M S Syntactic clustering of the Web Technical Report 1997-015 Palo Alto CA USA Digital Systems Research Center \(Digital 1997 Chang C H and Hsu C C Customizable multi-engine search tool with clustering Computer Network and ISDN Systems 1997,29\(8-13 1217-1224 Chen L and Katya S Webmate A Personal agent browsing and searching In Sycara K P Wooldridge M eds Proceedings of the 2"d International Conference on Autonomous Agents New York ACM Press 1998 132-139 Ron W, Bienvenido V Mark A S Chanathip N Peter S A D and David K G Hypursuit A hierarchical network search engine that exploits content-link hypertext clustering In ACM ed. Proceedings of the 7 ACM Conference on Hypertext New York ACM Press 1996 180-193 Ackerman M, Billsus D Gaffney S Hettich S Khoo G Kim D J Klefstad R Lowe C Ludeman A Muramatsu J Omori K, Pazzani J P Semler D Starr B and Yap P Learning Probabilistic User Profiles. AI Magazine 1997 18\(2 47-56 Cheeseman P  Stutz J Bayesian classification Autoclass Theory and results In Fayyad U M Piatetsky-Shapiro G, Smyth P and Uthurusamy R eds Advances in Knowledge Discovery and Data Mining Menlo Park California AAAI/MIT Press 1996 Agrawal R Srikant R Fast algorithm for mining association rules In Jorge B B Matthias J and Carlo Z eds Proceedings of the 20 International Conference on Very Large Databases Santiago Morgan Kaufmann Publishers, Inc 1994.487-499 153-180 795 


Proceedings of the Second International Conference on Machine Learning and Cybernetics X$bn 2-5 November 2003 Rule set Rd classify the test data set is 82.35 and the number of cases that is classified wrongly is 3. These results are showed in Table 1 Among the cases that are classified wrongly by the set of DTR, there is just one case that appears in the cases that is classified wrongly by the set of CAR This point shows that there is complementary relation between the set of DTR and the set of CAR and we can combine them to improve the precision of class prediction Lastly, we compare the precision of classification of R with the precision of Rd and R respectively The two ride sets Rd and R are combined using the algorithm C2S in section 4.3 and a new rule set R with 51 rules is gotten The accuracy of using R to classify the test data set is 88.23 The results are also showed in Table 1 We find the final rule set R has higher precision classification than Rd and R This indicate that it is efficient to substitute the combining rule set R for individual Rd and Ra to classify video Table 1 Experimental results Rule No Precision I Errors 26 76.47  4 I  R I 29 I 82.35 I 3 I R 151 1 88.23 12 The experiment results show that our approach of combining two rule sets outperform using just one rule set to classify the video 6 Conclusions A novel content-based automatic video classification approach based on data mining is proposed in this paper Firstly in the video segmentation process the method extracts a set of video attribute to represent the content of video and generates a video attribute database. Then the decision tree and class association rule mining techniques are used on this video attribute database to extract a decision tree rules and class association rules Lastly a combining and pruning algorithm is proposed to combine these two rule sets to generate a final rule set The experiment results verify the consistency and certain complementarities of decision tree classification with class association classification The results also show the combined rule set improve the classification precision and have higher classification precision than just one rule set Acknowledgements The paper is funded by the National Natural Science Foundation of China \(No.60173058 References M.J. Roach J.S.D Mason, and M Pawlewski. Video genre classification using dynamics Int Conf on Acoustics, Speech and Signal Processing, 2001 Wensheng Zhou, Asha Vellaikal and C C. Jay Kuo Rule-based video classification system for basketball video indexing Proceedings on ACM multimedia 2000 workshops, 2000, Pages 213  216 Malthew Roach, John S Mason, Nicholas Evans, Li Qun Xu Fred Stentiford Recent Trends in Video Analysis A Taxonomy of Video Classification Problems Internet and Multimedia Systems and Applications IMSA 2002 August 12-14 2002 Kaua, Hawaii, USA. Pages: 348-353  B-T Truong S Venkatesh, and C Dorai. Automatic Genre Identification for Content-Based Video Categorization Int Conf. Pattern Recognition vol. 4 2000. Pages: 230-233 Y Chen and E K Wong A Knowledge-Based Approach to Video Content Classification Proceedings of SPIE Vol. 4315: Storage and Retrieval for Media Databases 2001, Jan. 2001. Pages: 292-300 I Koprinska and S Carrato Temporal video segmentation a survey Signal Processing Image Communication vol 16 Elsevier Science 2001 Pages: 477-500 H.J. Zhang, A. Kankanhalli S.W Smoliar. Automatic partitioning of full-motion video. Multimedia Systems 1 I 1993\Pages: 10-28 Ye Yuan Qin-Bao Song Jun-Yi Shen Automatic Video Classification Using Decision Tree Method Proceedings of the First International Conference on Machine Learning and Cybemetics Beijing 4-5 November 2002. Pages: 1153-1 157 James Dougherty, Ron Kohavi, and Mehran Sahami Supervised and Unsupervised Discretization of Continuous Features In Proc of the International Conference on Machine Learning 1995 Pages 194 202  101 J.R.Quinlan C4.5 Programs for Machine Learning SanMateo, CA:Morgan Kaufmann, 1993 111 Liu B Hsu W Ma Y Integrating Classification and Association Rule Mining Proceedings of the Fourth International Conference on Knowledge Discovery and Data Mining KDD 981  New York NY, August 1998. Pages: 80-86 121 W Li J Han and J Pei CMAR Accurate and efficient classification based on multiple class association rules In proceedings of the IEEE International Conference on Data Mining ICDM 01 San Jose, Califomia, 2001 230 


 r 004 \005\\006 r\003\020 004\005\005\006 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 r#\002\016\004\r 005 b\033\004 004\032\r\r\022 002\006 005\003\021 032\002\003\033 005 002 020\(\003\b\022 004\033\003\002\033\r\013\020 005\003 r!'#\b\r\006\033 004\r\013\021\r\006\033\002\033\b\005\006\024 2\036\(\036 021\006 030\025\030\030$\006 f\031\n r\016\n\f\b\f\022\013\n\f\r\t\004 006\013$\f\t\007 033\f\n\021 n\021\006 k 2 r\017 025\005\033\r 033 \002\033 b\006 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033 \r\003\r b\004 006\005 006\r\r\022 033\005 005\021\032\016\033\r 002\006\020 subop  002\031\016\r\024 023 \b\004 b\004  033 \r\003\r b\004 006\005 k 2 002#\033\005\003 b\006 033 \r 005\021\032\031\r,\b\033\020 005 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021\024 D\016\033 b\006 033 \r 005\033 \r\003 033\\005 002\031\013\005\003\b\033 \021\004 r#\002\016\004\r 004\r\031\r#\033\b\005\006 005 004\r\013\021\r\006\033\004 b\004 002\004\r\022\r\006\033\b\003\r\031\020\005\006\033 \r subop  002\031\016\r\004 k 2 r#\005\021\r\004 002 022\005\021\b\t 006\002\006\033 002#\033\005\003 b\006 033 \r\b\003 005\021\032\031\r,\b\033\020\024 023\005 r\031\b\021\b\006\002\033\r 033 \r k 2 002#\033\005\003 005\006\r r\016\003\b\004\033\b b\004 033\005 006\022 002 005\006\004\033\002\006\033 006\016\021\(\r\003 005 b\033\r\021\004 b 002\003\r 005\006 033 \r 016\(\(\031\r=\024 023 \r\004\r 002\003\r 033 \r b\033\r\021\004 005\004\r 003\r"\016\r\006#\b\r\004 002\003\r\031\020 004\002\033\b\004!\020 002\006\022 002\003\r 033 \r 031\005\004\r\004\033 033\005 033 \r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\024 023 \r\006 b\006 033 \r subop  002\031#\016\031\002\033\b\005\006  003\r\004\033\003\b#\033 033 \r 004\016\021\021\002\033\b\005\006 b\006 r"\016\002\033\b\005\006 035.\037 005\006\031\020 005%\r\003 002\031\031 032\002\b\003\004 005 b\033\r\021\004 b\006 033 \r 016\(\(\031\r 031\b\004\033=\024 023 \b\004 b\004 003\r\002\004\005\006\002\(\031\r r#\002\016\004\r 033 \r 031\033\r\003\b\006\013 005!!\r\003\r\022 020 033 \r 036\n\n\030 b\004 r,\032\r#\033\r\022 033\005 r 033 \r 021\005\004\033 002\032\032\031\b#\002\(\031\r 033\005 033 \005\004\r b\033\r\021\004 005\004\r 003\r"\016\r\006#\b\r\004 002\003\r 031\005\004\r\004\033 033\005 033 \r 033 \003\r\004 \005\031\022\024 005\003 r,\002\021\t 032\031\r 033 \r\003\r 021\002\020 r k  1000 b\033\r\021\004 b\006 002\031\031 016\033 033 \r 016\(\(\031\r 031\b\004\033 021\002\020 005\006\033\002\b\006 005\006\031\020 w  100 b\033\r\021\004\024 8\006 033 \b\004 002\004\r 005\003 003\024\032\002 005\021\032\016\033\002\033\b\005\006 005 subop   033 \r 006\016\021\(\r\003 005 032\002\b\003\004 005\006\004\b\022\r\003\r\022 b\006 033 \r 004\016\021\021\002\033\b\005\006 003\r\022\016#\r\004 003\005\021  k 2   499 500 033\005  w 2 950 024 025\005\033\r 033 \002\033 033 \r 005\006\033\r\006\033 005 033 \r 016\(\(\031\r 031\b\004\033 022\r\032\r\006\022\004 005\006 002 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\024 023 \b\004 016\(\(\031\r 031\b\004\033 033 \r\006 033\016\003\006\004 033 \r 005#\016\004 005 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 004"\016\002\003\r\031\020 005\006 033 \r b\033\r\021\004 b\006 033 \r 031\b\004\033\024 D\016\033 b\033 b\004 b\021\032\005\003\033\002\006\033 033\005 003\r\021\r\021\(\r\003 033 \002\033  004\r\013\021\r\006\033\002\033\b\005\006 b\033 033 \r 016\(\(\031\r 031\b\004\033 003\r"\016\b\003\r\004 004\005\021\r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 033 \r 036\n\n\030 032\003\005\t 022\016#\r\022 002\006 r 016\004\r\022 005\003 024\005\013 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\024 8\006 033 \r 006\r,\033 004\r#\t 033\b\005\006   r%\002\031\016\002\033\r 033 \r r!!\r#\033\b%\r\006\r\004\004 005 002\006 036\n\n\030 033 \002\033 002\004 032\003\005\022\016#\r\022 b\033 002 016\(\(\031\r 031\b\004\033 002\004\r\022 005\006 005\006\r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 016\033 b\004 016\004\r\022 022\020\006\002\021\b#\002\031\031\020 033\005 002\006\022\031\r 022\b!!\r\003\r\006\033 004\016\032\032\005\003\033 033 \003\r\004 \t 005\031\022\004\024 2\036,\036 4\026\030\017\f\034 031\006\007\b\006\t\n\013\n\f\r\t 031\n\017\013\n\006\007\f\006\031\004 006\013$\f\t\007 033\f\n\021 n\021\006 p 2 r\017 b\033 033 \r 016\(\(\031\r 031\b\004\033 r\016\003\b\004\033\b 033 \r k 2 002#\033\005\003 022\b\004\002\032\032\r\002\003\004 003\005\021 033 \r 005\021\032\031\r,\b\033\020 005 033 \r 9\003\r\r\022\020 002\006\022 017\001 002\031\013\005\003\b\033 \021\004\024 002\033 002\(\005\016\033 033 \r p 2 002#\033\005\003G 004 002 r\016\003\b\004\033\b 033\005 005\032\r  004\b\033\016\002\033\b\005\006\004  p b\004 031\002\003\013\r  005!!\r\003 020\(\003\b\022 004\r\013\021\r\006\033\002\033\b\005\006 004\033\003\002\033\r\013\b\r\004\024 E,\002\021\032\031\r\004 b\006#\031\016\022\r 013\t\034\r\b!&\027 002\006\022 013\t\034\r\b 1\017\006\006\034\026 024 023 \002\033 b\004 005\003 002 031\002\003\013\r b\006\b\033\b\002\031 002\031\016\r p b\006\033 \r'\003\004\033 032 \002\004\r r 016\004\r 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033\005 021\r\003\013\r 033 \r p 032\002\013\r\004 033\005 p mid 004\r\013\021\r\006\033\004 035 p mid m user 037\024 023 \r\006 b\006 033 \r 006\002\031 032 \002\004\r 033 \r 017\001 005\003 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 033\005 021\r\003\013\r 033 \r p mid 004\r\013\021\r\006\033\004 b\006\033\005 033 \r m user 004\r\013\021\r\006\033\004\024 8\006 033 \r 006\r,\033 004\r#\033\b\005\006   r%\002\031\016\002\033\r  033 \r\004\r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 005\003\027 002\033 002\031\031\024 5\036 016\006\017\f\b\006\t\n\013 006 \013$\025\013\n\f\r\t 8\006 033 \b\004 004\r#\033\b\005\006 r 032\003\005%\b\022\r r,\033\r\006\004\b%\r r,\032\r\003\b\021\r\006\033\002\031 r%\002\031\016\t 002\033\b\005\006 005 002\031\031 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\006\022 r\016\003\b\004\033\b#\004 032\003\005\t 032\005\004\r\022 002\(\005%\r\024 n\032\r#\b'#\002\031\031\020 r 032\003\005%\b\022\r r\021\032\b\003\b#\002\031 r%\002\031\016\002\t 033\b\005\006 005\006 3\024 033 \r 004\032\r\r\022\016\032 002\006 036\n\n\030 032\003\005%\b\022\r\004 002\033 016\r\003\020 r,\r#\016\033\b\005\006 005\003 r,\032\031\005\003\002\033\b\005\006 033\b\021\rB 002\006\022 024 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 005 032\003\005\022\016#\b\006\013 033 \r 036\n\n\030 b\033 005\003 b\033 \005\016\033 033 \r 016\(\(\031\r 031\b\004\033 002\006\022 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004\024 r 005\006#\031\016\022\r 033 \b\004 004\r#\033\b\005\006 b\033 002 003\r#\005\021\021\r\006\022\r\022 003\r#\b\032\r 005\003 022\b!!\r\003\r\006\033 b\003#\016\021\004\033\002\006#\r\004\024 5\036\035\036 016\006\017\f\b\006\t\n\013 031\006\n\025\016 023 \r 004\r\013\021\r\006\033 021\b\006\b\021\b\034\002\033\b\005\006 002\006\022 033 \r 005\006\004\033\003\002\b\006\r\022 004\r\013\021\r\006\t 033\002\033\b\005\006 032\003\005\(\031\r\021\004 002\032\032\031\020 033\005 033 \r 021\002\006\020 002\031\013\005\003\b\033 \021\004 033 \002\033 005\006\t 022\016#\033 021\b\006\b\006\013 005 002\003\b\005\016\004 027\b\006\022\004 005 032\002\033\033\r\003\006\004 002\004\r\022 005\006 002\006\022\b\022\002\033\r 013\r\006\r\003\002\033\b\005\006 035\004\r\r n\r#\033\b\005\006 3\037\024 023 \r 003\r\004\016\031\033\004 003\r\032\005\003\033\r\022 r\003\r 002\003\r 002\004\r\022 005\006 002 004\032\r#\b b\006\004\033\002\006#\r 005 033 \r\004\r 002\031\013\005\003\b\033 \021\004 C 006\002\021\r\031\020 033 \r 031\002\004\004\b#\002\031 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 005\003 002\004\004\005#\b\002\033\b\005\006 003\016\031\r 021\b\006\b\006\013\024 025\005\006\r\033 \r\031\r\004\004 033 \r 032\003\r\004\r\006\033\r\022 b\022\r\002\004 002\006\022 002\031\013\005\003\b\033 \021\004 002\032\032\031\020 033\005 005\033 \r\003 b\006\004\033\002\006#\r\004 002\004  031\031 033 \r r,\032\r\003\b\021\r\006\033\004 r\003\r 032\r\003!\005\003\021\r\022 005\006 002 033\b\021\r\t\004 \002\003\b\006\013 r\006%\b\003\005\006\021\r\006\033 005\006 002 2 030\026\034 021\002# \b\006\r\024 031\031 033 \r 032\003\005\013\003\002\021\004 r b\033\033\r\006 b\006 001\024 023 \r\003\r 002\003\r 033\\005 027\b\006\022\004 005 r,\r#\016\033\b\005\006 033\b\021\r\024 023 \r 003\004\033 b\004 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r  b\006#\031\016\022\r\004 002\031\031 001?H 002\006\022 8;\036 005\004\033\004 b\006#\016\003\003\r\022 005\003 004\r\013\021\r\006\033\002\033\b\005\006\024 023 \r 004\r#\005\006\022 b\004 033 \r 003\016\006\033\b\021\r 005 032\003\b\005\003\b  005\003 016\033 033 \r 036\n\n\030 b b\006\t 031\016\022\r\004 002\031\031 001?H 002\006\022 8;\036 005\004\033\004 033\005 006\022 002\031\031 033 \r 003\r"\016\r\006\033 004\r\033\004\024 023 \r 003\r\032\005\003\033\r\022 013\016\003\r\004 002\003\r 002\004\r\022 005\006 033 \r 002%\r\003\002\013\r 005 021\016\031\033\b\032\031\r 033 \003\r\r\022\002\033\002\004\r\033\004\\r\016\004\r\022 3\024 6\r'\f\013\034\013\n\013\031\006\n  b b\004 002 003\r\002\031 022\002\033\002 004\r\033 003\005\021 025\005\027\b\002 005\006 002 004\r"\016\r\006#\r 031\r 005\006\033\002\b\006\b\006\013 002\(\005\016\033 7 033\003\002\006\004\002#\033\b\005\006\004 005 002\(\005\016\033  022\b\004\033\b\006#\033 033\020\032\r\004 005 033\r\031\r#\005\021\021\016\006\b#\002\033\b\005\006\004 006\r\033\\005\003\027 002\031\002\003\021\004\024 005\003 032\003\005\032\003\b\r\033\002\003\020 003\r\002\004\005\006\004 r 002\006\006\005\033 022\r\004#\003\b\(\r 033 \b\004 022\002\033\002 004\r\033 016\003\033 \r\003\024 024 020 034\013\n\013 031\006\n  b b\004 002 004\020\006\033 \r\033\b 022\002\033\002 004\r\033 013\r\006\r\003\002\033\r\022 016\004\b\006\013 033 \r 032\003\005\013\003\002\021 022\r%\r\031\005\032\r\022 002\033 8D\030 031\t 021\002\022\r\006 017\r\004\r\002\003# \001\r\006\033\r\003 0\024 023 \r r,\002#\033 006\016\021\(\r\003 005 033\003\002\006\004\t 002#\033\b\005\006\004 b\004 006\005\033 b\021\032\005\003\033\002\006\033 r#\002\016\004\r 033 \r 027\r\020 032\002\003\002\021\r\033\r\003 b\004 033 \r 006\016\021\(\r\003 005 032\002\013\r\004 p 024 8\006 005\016\003 r,\032\r\003\b\021\r\006\033\002\033\b\005\006 p 002\003\b\r\004 003\005\021  033\005 7  002\006\022 033 \r 006\016\021\(\r\003 005 b\033\r\021\004 b\004 k 1000 024 024 031'\006\033\006\034!\031\026\t\n\021\006\n\f\020 034\013\n\013 031\006\n  b b\004 002 004\020\006\033 \r\033\b 022\002\033\002 004\r\033 033 \002\033 002\004 004\027\r\\r\022 004\r\002\004\005\006\002\031 r \002%\b\005\003\024 n\032\r#\b'#\002\031\031\020 7@I 005 033 \r b\033\r\021\004 002%\r 002 b\013 \r\003 032\003\005\(\002\(\b\031\b\033\020 005 002\032\032\r\002\003\b\006\013 b\006 033 \r 003\004\033 002\031 005 033 \r 005\031\031\r#\033\b\005\006 005 033\003\002\006\004\002#\033\b\005\006\004 002\006\022 033 \r 005\033 \r\003 7@I 002%\r 002 b\013 \r\003 032\003\005\(\002\(\b\031\b\033\020 005 002\032\032\r\002\003\b\006\013 b\006 033 \r 004\r#\005\006\022 002\031!\024 023 \r 003\r\002\004\005\006 005\003 016\004\b\006\013 033 \b\004 022\002\033\002 004\r\033 b\004 033 \002\033 b\006 033 \r 003\r\002\031 005\003\031\022 033 \r\003\r 002\003\r 021\002\006\020 022\002\033\002\(\002\004\r\004 033 \002\033 022\005 006\005\033 005\031\031\005 002 003\r\013\016\031\002\003 005\003 016\006\b!\005\003\021 022\b\004\033\003\b\(\016\033\b\005\006 035\r\024\013\024 002 004\016\032\r\003\t 021\002\003\027\r\033 022\002\033\002\(\002\004\r 005\006\004\b\004\033\b\006\013 005 033\003\002\006\004\002#\033\b\005\006\004 005%\r\003 002 r 021\005\006\033 \004 003\005\021 004\016\021\021\r\003 033\005 b\006\033\r\003\037\024 5\036%\036 025\t\n\f\b\006 031\016\006\006\034\025\016 023 \r 003\004\033 004\r\033 005 r,\032\r\003\b\021\r\006\033\004 r%\002\031\016\002\033\r\004  033 \r 036\n\n\030 032\003\005%\b\022\r\004 004\b\013\006\b'#\002\006\033 004\032\r\r\022\016\032\024 023 \r 004\032\r\r\022\016\032 005\003 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021 X b\004 022\r'\006\r\022 033\005 r 033 \r 003\002\033\b\005 005 033 \r r,\r#\016\033\b\005\006 033\b\021\r 005 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 b\033 \005\016\033 033 \r 036\n\n\030 033\005 033 \002\033  033 \r 036\n\n\030 032\003\005\022\016#\r\022 020 002\031\013\005\003\b\033 \021 X 035 X b\004 033 \r 017\002\006\t 022\005\021 017\001 005\003 9\003\r\r\022\020 002\031\013\005\003\b\033 \021\037\024 023 \b\004 013\b%\r\004 033 \r 020\t\002,\b\004 005 033 \r 013\003\002\032 b\006 b\013\016\003\r 5\035\002\037\024 023 \r t\002,\b\004 004 \005\\004 033 \r 006\016\021\(\r\003 005 004\r\013\021\r\006\033\004 m user 002\031\031\005 b\006 033 \r 036\n\n\030\024 n\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\004\b\022\r 033 \r 003\004\033 005\(\004\r\003%\002\033\b\005\006 003\005\021 b\013\016\003\r 5\035\002\037 b\004 033 \002\033 033 \r 036\n\n\030 b\004 002 016\004\r!\016\031 004\033\003\016#\033\016\003\r\024 8\033 b\004 031\b\013 \033\t\ \033\024 005\003 m user  100 004\r\013\021\r\006\033\004 002\006\022 005\003 3 b\033\r\021\004 033 \r 036\n\n\030 005\006\004\016\021\r\004 005\006\031\020 002\(\005\016\033 024 r\013\002\(\020\033\r\004\024 D\016\033 b\033 002\006 003\b\006\013 002\(\005\016\033 002 004\032\r\r\022\016\032 003\005\021 002\003\005\016\006\022 2 033\b\021\r\004 033\005 002\(\005\016\033  033\b\021\r\004\024 006\022 005\003 m user J 37 004\r\013\021\r\006\033\004 035\033 \016\004 005\006\t 004\016\021\b\006\013 024 021\r\013\002\(\020\033\r\004\037 033 \r 004\032\r\r\022\016\032 002\006 r 002\(\005\016\033 7 033\b\021\r\004\024 023 \r 004\r#\005\006\022 005\(\004\r\003%\002\033\b\005\006 b\004 033 \002\033 002\004 r,\032\r#\033\r\022 033 \r 031\002\003\013\r\003 033 \r Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


  001 002\001 003\001 004\001 005\001 006\001 003\001 005\001 007\001 b\001 002\001\001 002\003\001 002\005\001 002\007\001 t\n\013\013\f\r\n\016\017\013\020\021\022\023\024\013\016\022\025\016\026\\n\017\023\025\017\023\016\027\023\022\030\025\r\022\016\022\030\013\016\\t\t\031 032\r\033\034\013\017\016\025\035\016\036\013\037\033\013 \022\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021 017\013\013\f     021 \f\025\033  021 013\020\021\022\023\024\013 036\n\013\013\f\r\n   001 001*\002 001*\003 001*\004 001*\005 001*\006 001*\007 001 003\001 005\001 007\001 b\001 002\001\001 002\003\001 002\005\001 002\007\001 032\r\033\034\013\017\016\025\035\016$\021 \f\023\f\021\022\013\016\003\,\023\022\013\033\036\013\022\036\016\017\013\020\021\022\023\024\013\016\\022\025\016\026\n\017\023\025\017\023\016\027\023\022\030\025\r\022\016\\022\030\013\016\t\t\031 032\r\033\034\013\017\016\025\035\016\036\013\037\033\013 \022\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021  021 \f\025\033     017\013\013\f 034 017\021$\022\023\025 025\035 021 \f\023\f\021\022\013 003,\023\022\013\033\036\013\022\036 025\022 n\017\r \013\f 001\002\003\004\005\006 036\b 037\017\017\006 \f\002!\006\013\006\016\016 r\017 f\020\006 016\006\003\021\006\013\f\022\f\002\r\013 022\025\003\r\005\002\f\020\021\016 002\031\016\r 005 m user  033 \r b\013 \r\003 b\004 033 \r 004\032\r\r\022\016\032\024 8\006\033\r\003\r\004\033\b\006\013\031\020 r%\r\006 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 002\006 005!!\r\003 002 004\032\r\r\022\016\032 033 \002\033 b\004 r\033\t 033\r\003 033 \002\006 002\006 005\003\022\r\003 005 021\002\013\006\b\033\016\022\r\024 8\006 033\r\003\021\004 005 033 \r 004\032\r\r\022\016\032 033 \r 003\002\006\027 b\006 022\r\004#\r\006\022\b\006\013 005\003\022\r\003 b\004 002\031\\002\020\004 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021 033 \r 017\001 002\031\013\005\003\b\033 \021 002\006\022 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021\024 023 \r 013\002\032\004 r\t 033 033 \r\021 005\032\r\006 016\032 013\003\002\022\016\002\031\031\020 002\004 m user r#\005\021\r\004 031\002\003\013\r\003\024 023 \r 004\032\r\r\022\016\032 002\006 r 022\b\003\r#\033\031\020 031\b\006\027\r\022 033\005 033 \r 006\016\021\(\r\003 005 002\006\t 022\b\022\002\033\r\004 033 \002\033 003\r"\016\b\003\r 003\r"\016\r\006#\020 005\016\006\033\b\006\013 b\024\r\024 002\006\022\b\022\002\033\r\004 033 \002\033 002\003\r 006\005\033 032\003\016\006\r\022 002\004\r\022 005\006 r"\016\002\033\b\005\006 0353\037\024 b\013\016\003\r 5\035\(\037 005\021\t 032\002\003\r\004 033 \r 006\016\021\(\r\003 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 r"\016\b\003\r\022 b\033 005\003 016\033 033 \r 036\n\n\030\024 013\002\b\006 033 \r 003\002\033\b\005 b\004 004 \005\\006 005\006 r 020\t 002,\b\004 033 \r 003\002\033\b\005 3 r\b\006\013 033 \r 002\004\r b\033 \005\016\033 033 \r 036\n\n\030\024 001\031\r\002\003\031\020 033 \r 036\n\n\030 032\003\005%\b\022\r\004 004\b\013\006\b'#\002\006\033 032\003\016\006\b\006\013\024 005\003 r,\002\021\032\031\r b\033 m user 150  002\006\022 033 \r 036\n\n\030 032\003\005\022\016#\r\022 020 033 \r 9\003\r\r\022\020 002\031\t 013\005\003\b\033 \021 005\006\031\020 002\(\005\016\033 I 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 r#\027\r\022 020 032\003\b\005\003\b 005\003\022\b\006\002\003\b\031\020 002\003\r 006\005\033 032\003\016\006\r\022 020 033 \r b\006!\005\003\021\002\033\b\005\006 027\r\032\033 b\006 033 \r 036\n\n\030\024 b\013\016\003\r 5\035\(\037 005\006\031\020 004 \005\\004 033 \r 003\r\022\016#\033\b\005\006 005\003 002\006\t 022\b\022\002\033\r t\b\033\r\021\004\r\033\004\024 023 \r 036\n\n\030 002\032\032\031\b\r\004 033\005 002\006\022\b\022\002\033\r 004\r\033\004 005 b\013 \r\003 002\003\022\b\006\002\031\b\033\b\r\004\024 9\b%\r\006 005\016\003 004\020\006\033 \r\033\b 022\002\033\002 004\r\033\004 033 \r 003\r\t 022\016#\033\b\005\006 005\003 b\013 \r\003 002\003\022\b\006\002\031\b\033\b\r\004 b\004 021\b\006\b\021\002\031\024 D\016\033 033 \b\004 b\004 006\005\033 002\004 006\r\013\002\033\b%\r 002\004 b\033 021\002\020 004\r\r\021 r#\002\016\004\r b\033 b\004  027\006\005 033 \002\033 033 \r 021\002\b\006 005\033\033\031\r\006\r#\027 005 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 b\004 005\006 b\033\004 032\003\005#\r\004\004\t b\006\013 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 370B 033 \b\004 b\004 032\003\r#\b\004\r\031\020 033 \r 002\003\r\002  036\n\n\030 r,#\r\031\004\024 023 \r 003\r\004\016\031\033\004 003\r\032\005\003\033\r\022 b\006 b\013\016\003\r 5 002\003\r 002\004\r\022 005\006 033 \r 003\r\013\016\031\002\003\t 004\020\006\033 \r\033\b 022\002\033\002 004\r\033 002\006\022 002 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 005 3I\024 8\006 002\022\022\b\t 033\b\005\006 r 002%\r r,\032\r\003\b\021\r\006\033\r\022 b\033 005\033 \r\003 022\002\033\002 004\r\033\004 021\r\006\033\b\005\006\r\022 016\003\r 004\033\003\002\033\r\013\020 n\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r n\032\r\r\022\016\032 017\002\006\022\005\021 0  02 006 0  00 004 2  6 006 0  1 017\001 2791 006 7 004 5  5 006 0  4 9\003\r\r\022\020 5439 006 6 004 5  9 006 0  3 021 r\017\013 036\022\017\021\022\013\037\023\013\036 027\023\022\030 p  006\001\001 026\020\(\003\b\022 004\033\003\002\033\r\013\020 n\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r n\032\r\r\022\016\032 017\002\006\022\005\021\t\017\001 521 006 2 004 4  3 006 0  0 017\002\006\022\005\021\t9\003\r\r\022\020 1051 006 1 004 5  2 006 0  1 034 0#\034\017\023\f 036\022\017\021\022\013\037\023\013\036 027\023\022\030 p  001 001\001\0011 p mid  003\001\001 001\002\003\004\005\006 b 006\003\021\006\013\f\022\f\002\r\013 r\016\f\016 004\005\006 022\013\032 020\023 024\005\002\032 016\f\005\022\f\006\003\002\006\016 002\f\020 m user 036 002\(\005%\r 002\006\022 002\003\b\005\016\004 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\004\024 031\r\002\004\r r!\r\003 033\005 005\016\003 033\r# \006\b#\002\031 003\r\032\005\003\033 3.0 005\003 021\005\003\r 022\r\033\002\b\031\004\024 5\036\(\036 002\006\007\b\006\t\n\013\n\f\r\t 020\r\031\n 8\006 031\b\013 \033 005 033 \r 004\b\013\006\b'#\002\006\033 004\032\r\r\022\016\032 005!!\r\003\r\022 020 002\006 036\n\n\030 033 \r 006\002\033\016\003\002\031 016\r\004\033\b\005\006 033\005 002\004\027 b\004  033 \b\004 004\032\r\r\022\016\032 b\004 002# \b\r%\r\022 020 002 b\013 005\021\032\b\031\r\t\033\b\021\r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033\024 023 \r 027\r\020 032\002\003\002\021\r\033\r\003\004 r\003\r 002\003\r p 002\006\022 m user 024 b\031\r r r,\032\r\003\b\t 021\r\006\033\r\022 b\033 \021\002\006\020 005\021\(\b\006\002\033\b\005\006\004 r 005\006\031\020 003\r\032\005\003\033 004\005\021\r 005 033 \r\021 r\031\005 022\016\r 033\005 002 031\002#\027 005 004\032\002#\r\024 005\003 r,\002\021\032\031\r b\013\016\003\r 7\035\002\037 003\r\032\005\003\033\004 033 \r 003\r\004\016\031\033\004 005\003 p 500 002\006\022 m user 40 024 00\006\020\n\f \006\t\006\031\031 r0 n\021\006 016\025\017\006 031\006\007\b\006\t\n\013\n\f\r\t 031\n\017\013\n\006\007\f\006\031\004 004 r,\t 032\r#\033\r\022 005\033 033 \r 017\001 002\006\022 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021\004 033\002\027\r 002 031\005\006\013 033\b\021\r 033\005 032\003\005\022\016#\r 033 \r 036\n\n\030\024 D\016\033 b\004 b\033 033\005\005 031\005\006\013G 8\004 033 \r 002\022\t 022\b\033\b\005\006\002\031 005\006\r\t\033\b\021\r 005\004\033 005 75/6 004\r#\005\006\022\004 005\003\033 \ \b\031\r 033\005 b\006\t 003\r\002\004\r 033 \r 004\032\r\r\022\016\032 003\005\021 0241 033\005 7\0246 005\003 003\024\032\002 021\b\006\b\006\013 016\r\003\020G 023 \r 002\006\004\\r\003 033\005 033 \b\004 016\r\004\033\b\005\006 b\004 004\016\(*\r#\033\b%\r 022\r\032\r\006\022\b\006\013 005\006 033 \r 003\r\031\002\033\b%\r b\021\032\005\003\033\002\006#\r 005 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 033\005 022\020\006\002\021\b 016\r\003\020 r,\r#\016\033\b\005\006 005\004\033 005\003 033 \r 004\032\r#\b 002\032\032\031\b#\002\033\b\005\006\024 8\033 002\031\004\005 022\r\032\r\006\022\004 005\006 033 \r 002\021\005\016\006\033 005 004\032\002#\r 033 \r 036\n\n\030 002\006 005##\016\032\020 b\024\r\024 033 \r 002\031\016\r 005 m user 024 8\006 013\016\003\r\004 r 022\r\031\b\(\r\003\002\033\r\031\020 033\002\027\r 002 004\021\002\031\031\r\003 002\031\016\r m user 40 033\005 002\031\031\005 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 032\003\005#\r\004\004 033\005 033\002\027\r 031\005\006\013\r\003\024 8 033 \r 002\032\032\031\b#\002\033\b\005\006 002\006 002!!\005\003\022 002 031\002\003\013\r\003 002\031\016\r 005 m user  033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 034\b\f.\t  033 \r 004\032\r\r\022\016\032 006\005\032\b\003\024\t\003\t 024 8\006 033 \b\004 002\004\r 033 \r 005\b#\r r#\005\021\r\004 021\005\003\r 005\(%\b\005\016\004 C 006\002\021\r\031\020 b\033 032\002\020\004 005 033\005 016\004\r 002 021\005\003\r r\031\002\(\005\003\002\033\r 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021 033\005 032\003\005\022\016#\r 002 b\013 \r\003\t"\016\002\031\b\033\020 036\n\n\030\024 00\006\020\n\f \006\t\006\031\031 r0 n\021\006 021\026\030\017\f\034 031\006\007\b\006\t\n\013\n\f\r\t 031\n\017\013\n\006\007\f\006\031\004 9\b%\r\006 033 \r 006\016\021\(\r\003\004 b\006 b\013\016\003\r 7\035\002\037 002 006\002\033\016\003\002\031 016\r\004\033\b\005\006 033\005 002\004\027 b\004 005  033 \r 021\005\003\r r\031\002\(\005\003\002\033\r 002\031\013\005\003\b\033 \021\004 004#\002\031\r 016\032 b\033 003\r\t 004\032\r#\033 033\005 p 024 8 b\033 033\002\027\r\004 75/6 004\r#\005\006\022\004 005\003 033 \r 9\003\r\r\022\020 002\031\013\005\t 003\b\033 \021 005\003 p  500 032\002\013\r\004 005 031\005\006\013 022\005\r\004 b\033 033\002\027\r 005\003 p  50 000 032\002\013\r\004G 035$\005\003 002 032\002\013\r 004\b\034\r 005 5 027\b\031\005\(\020\033\r\004 r\002# \032\002\013\r 002\006 005\006\033\002\b\006 003\005\016\013 \031\020 3 033\003\002\006\004\002#\033\b\005\006\004\024 023 \016\004 7  032\002\013\r\004 005\003\003\r\004\032\005\006\022 033\005 7 021\b\031\031\b\005\006 033\003\002\006\004\002#\033\b\005\006\004\024\037 023 \b\004 b\004 002\006 b\021\032\005\003\033\002\006\033 016\r\004\033\b\005\006 r#\002\016\004\r 022\002\033\002 021\b\006\b\006\013 002\032\032\031\b#\002\033\b\005\006\004 002\003\r 004\016\032\032\005\004\r\022 033\005 002%\r 002 016\013\r 006\016\021\(\r\003 005 033\003\002\006\004\002#\033\b\005\006\004 035\002\006\022 032\002\013\r\004\037\024 005\003\033\016\006\002\033\r\031\020 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 005\021\r\004 033\005 033 \r 003\r\004#\016\r\024 017\r#\002\031\031 003\005\021 b\013\016\003\r 7\035\002\037 033 \002\033 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033\002\027\r\004 002 006\r\013\031\b\013\b\(\031\r 002\021\005\016\006\033 005 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r 016\033 004\033\b\031\031 022\r\031\b%\r\003\004 003\r\002\004\005\006\002\(\031\r 004\032\r\r\022\016\032\024 023 \b\004 005\032\r\006\004 033 \r 032\005\004\004\b\(\b\031\b\033\020 005 020\(\003\b\022 004\r\013\021\r\006\033\002\033\b\005\006 004\033\003\002\033\r\013\b\r\004 005\003 031\002\003\013\r 002\031\016\r\004 005 p 024 b\013\016\003\r 7\035\(\037 004 \005\\004 033 \r 004\b\033\016\002\033\b\005\006 005\003 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 017\002\006\022\005\021\t\017\001 002\006\022 017\002\006\022\005\021\t9\003\r\r\022\020\024 030\005\003\r 004\032\r#\b'#\002\031\031\020 033 \r b\006\b\033\b\002\031 002\031\016\r 005 p b\004 7 024 023 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 033\005 016\b#\027\031\020 003\r\t 022\016#\r p 033\005 p mid 200 004\r\013\021\r\006\033\004\024 003\005\021 033 \002\033 032\005\b\006\033 005\006 r\b\033 \r\003 Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


  001*\002 002 002\001 002\001\001 002\001\001\001 001 002\001 003\001 004\001 005\001 006\001 007\001 t\013\037\033\013 \022\021\022\023\025 \016$\025\036\022\016\(\023 \016\\036\013$\025 \f\036 t\0232\013\016\025\035\016\034\r\034\034\020\013\016\020\023\036\022\016\\(\023 \016\n\013\017$\013 \022\021\037\013\016\025\035\016\f\025\033\021\\023 \016\023\022\013\033\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021  021 \f\025\033,&\017\013\013\f   021 \f\025\033  021 t\013\037\033\013 \022\021\022\023\025 022\023\033\013   004 004*\006 005 005*\006 006 001 002\001 003\001 004\001 005\001 006\001 007\001 t\n\013\013\f\r\n\016\017\013\020\021\022\023\024\013\016\022\025\016\026\\n\017\023\025\017\023\016\027\023\022\030\025\r\022\016\022\030\013\016\\t\t\031 t\0232\013\016\025\035\016\034\r\034\034\020\013\016\020\023\036\022\016\\(\023 \016\n\013\017$\013 \022\021\037\013\016\025\035\016\f\025\033\021\\023 \016\023\022\013\033\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021  021 \f\025\033,&\017\013\013\f   021 \f\025\033  034 t\n\013\013\f\r\n 001\002\003\004\005\006 b 037\017\017\006 \f\002!\006\013\006\016\016 r\017 f\020\006 024\004\024\024\025\006 025\002\016\f r f\002\021\002,\022\f\002\r\013 033 \r 017\001 005\003 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 033\005 004\r\031\r#\033 033 \r 006\002\031 m user 40 004\r\013\021\r\006\033\004\024 025\005\033\b#\r 033 \002\033 005\003 017\002\006\022\005\021\t\017\001 033 \r 033\005\033\002\031 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r 005\003 7  032\002\013\r\004 b\004 005\006\031\020 7.3 004\r#\005\006\022\004 002\004 004\016\032\032\005\004\r\022 033\005 263 004\r#\005\006\022\004 005\003 005\006\031\020 7 032\002\013\r\004 016\004\b\006\013 032\016\003\r\031\020 033 \r 017\001 002\031\t 013\005\003\b\033 \021\024 K\r\033 033 \r\003\r b\004 002 021\b\006\b\021\002\031 022\003\005\032 b\006 004\032\r\r\022\016\032\024 n\b\021\b\031\002\003 005\(\004\r\003%\002\033\b\005\006\004 002\006 r 005\(\033\002\b\006\r\022 005\003 017\002\006\022\005\021\t9\003\r\r\022\020\024 8\006 013\r\006\t r\003\002\031 013\b%\r\006 002 031\002\003\013\r b\006\b\033\b\002\031 p 002\031\016\r 002 013\005\005\022 004\033\003\002\033\r\013\020 b\004 033\005 016\004\r 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033\005 r\022\016#\r p 033\005 002 021\016# \004\021\002\031\031\r\003 p mid 002\031\016\r 035\r\024\013\024 r\033\\r\r\006 3 033\005 7 032\002\013\r\004\037 002\006\022 033 \r\006 033\005 016\004\r 002\006 r\031\002\(\005\003\002\033\r 002\031\013\005\003\b\033 \021 033\005 005\021\032\031\r\033\r 033 \r 004\r\013\021\r\006\033\002\033\b\005\006\024 00\006\020\n\f \006\t\006\031\031 r0 n\021\006 030\025\030\030$\006 f\031\n r\016\n\f\b\f\022\013\n\f\r\t\004 032\002\003\033 003\005\021 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 r 002\031\004\005 032\003\005\032\005\004\r 033 \r 016\(\(\031\r 031\b\004\033 r\016\003\b\004\t 033\b b\033 033 \r 005\(*\r#\033\b%\r 005 005#\016\004\b\006\013 033 \r 005\021\032\016\033\002\033\b\005\006 033\005 033 \r subop  002\031\016\r 005\006\031\020 033\005 033 \005\004\r b\033\r\021\004 033 \002\033 002\003\r 005\006 033 \r 016\(\(\031\r 031\b\004\033\024 b\013\016\003\r 1 004 \005\\004 033 \r 004\b\033\016\002\033\b\005\006 r\006 033 \r 016\(\(\031\r 031\b\004\033 002\004 005\003\021\r\022 002\004\r\022 005\006 033 \r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 024.7I 002\006\022 020\r\033 022\016\003\t b\006\013 016\r\003\020 r%\002\031\016\002\033\b\005\006 033 \r 002#\033\016\002\031 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 b\004 3I\024 023 \r t\002,\b\004 004 \005\\004 033 \r 002\003\020\b\006\013 004\b\034\r 005 033 \r 016\(\(\031\r 031\b\004\033 r,\t 032\003\r\004\004\r\022 002\004 033 \r 032\r\003#\r\006\033\002\013\r 005 k  033 \r 033\005\033\002\031 006\016\021\(\r\003 005 b\033\r\021\004 b\006 033 \r 022\005\021\002\b\006\024 023 \r 027\r\020 005\(\004\r\003%\002\033\b\005\006 b\004 033 \002\033 033 \r 004\r\013\021\r\006\033\002\t 033\b\005\006 005\004\033 b\004 022\003\002\004\033\b#\002\031\031\020 003\r\022\016#\r\022\024 005\003 r,\002\021\032\031\r 033 \r 017\002\006\022\005\021\t 9\003\r\r\022\020 020\(\003\b\022 004\033\003\002\033\r\013\020 b\033 033 \r 016\(\(\031\r 031\b\004\033 002\006 032\003\005\022\016#\r 002\006 036\n\n\030 b\006 002\(\005\016\033 3 004\r#\005\006\022\004 005 033\005\033\002\031 033\b\021\r 005\003 7 021\b\031\031\b\005\006 033\003\002\006\004\t 002#\033\b\005\006\004 035\b\024\r\024 7  032\002\013\r\004\037 002\004 005\032\032\005\004\r\022 033\005 3@73 004\r#\005\006\022\004 005\003 033 \002\033 b\033 \005\016\033 033 \r 016\(\(\031\r 031\b\004\033 035#!\024 b\013\016\003\r 7\035\(\037\037\024  004\b\021\b\031\002\003 003\r\022\016#\033\b\005\006 002\032\032\031\b\r\004 033\005 033 \r 017\002\006\022\005\021\t\017\001 020\(\003\b\022 004\033\003\002\033\r\013\020\024 023 \b\004 H H H H H H H b b b b b b b H H H H H H H b b b b b b b H H H H H H H b b b b b b b 013\t\034\r\b 013\t\034\r\b!&\027 013\t\034\r\b!1\017\006\006\034\026 1\017\006\006\034\026 031\002\003\013\r m user 002\006\022 004\027\r\\r\022 005\033 \r\003\\r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 002\006 b\004\004\016\r 005\033 \r\003\\r r\003\020 031\002\003\013\r p 005\033 \r\003\\r 001\002\003\004\005\006 b 034\006 \r\021\021\006\013\032\006\032 005\006 \002+\006 004 \005\\004 033 \002\033 033 \r 016\(\(\031\r 031\b\004\033 r\016\003\b\004\033\b b\004 r\003\020 r!!\r#\033\b%\r b\006 003\r\t 022\016#\b\006\013 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033\024 b\013\016\003\r 1\035\(\037 004 \005\\004 033 \002\033 r%\r\006 033 \005\016\013 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r b\004 004\b\013\006\b'#\002\006\033\031\020 003\r\022\016#\r\022 033 \r 016\002\031\b\033\020 005 033 \r 036\n\n\030 032\003\005\t 022\016#\r\022 020 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 b\004 006\005\033 005\021\032\003\005\021\b\004\r\022 004\b\013\006\b!\t b#\002\006\033\031\020\024 016\003\033 \r\003\021\005\003\r r%\r\006 033 \005\016\013 033 \r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 016\004\r\022 022\016\003\b\006\013 004\r\013\021\r\006\033\002\033\b\005\006 b\004 022\b!!\r\003\r\006\033 003\005\021 033 \r 005\006\r 016\004\r\022 002\033 016\r\003\020 r,\r#\016\033\b\005\006 033\b\021\r 033 \r 004\032\r\r\022\016\032 005!!\r\003\r\022 020 033 \r 036\n\n\030 b\004 004\033\b\031\031 004\b\013\006\b'#\002\006\033\024 004 r,\032\r#\033\r\022 033 \r 031\005\006\013\r\003 033 \r 016\(\(\031\r 031\b\004\033 033 \r b\013 \r\003 b\004 033 \r 016\002\031\b\033\020 005 033 \r 036\n\n\030 002\006\022 033 \016\004 033 \r 004\032\r\r\022\016\032\024 5\036,\036 002\025\b\b\013\017\026\004 005 017\006\020\r\b\b\006\t\034\006\034 017\006\020\f\016\006 8\006 004\016\021 r 002%\r 032\003\005%\b\022\r\022 r,\033\r\006\004\b%\r r,\032\r\003\b\021\r\006\033\002\031 003\r\004\016\031\033\004 r%\002\031\016\002\033\b\006\013 033 \r 002\003\b\005\016\004 032\003\005\032\005\004\r\022 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\006\022 r\016\003\b\004\033\b#\004\024 b\013\016\003\r 2 004 \005\\004 002 003\r#\b\032\r r 003\r#\005\021\021\r\006\022 005\003 022\r#\b\022\b\006\013 005\006 b 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021 033\005 016\004\r 005\003 002\003\b\005\016\004 027\b\006\022\004 005 002\032\032\031\b#\002\033\b\005\006\004\024 b\003\004\033 b 033 \r 002\032\032\031\b#\002\033\b\005\006 002\006 002!!\005\003\022 002 031\005\033 005 004\032\002#\r 005\003 033 \r 036\n\n\030 035\b\024\r\024 m user b\004 031\002\003\013\r\037 002\006\022 033 \r 022\002\033\002 b\004 004\027\r\\r\022 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 b b\004 033 \r 004\b\021\032\031\r\004\033 b\004 004\016!'#\b\r\006\033 005\003 004\r\013\021\r\006\033\002\033\b\005\006\024 036\033 \r\003 b 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 b\004 006\005\033 002\006 b\004\004\016\r 002\033 002\031\031 033 \r 9\003\r\r\022\020 002\031\t 013\005\003\b\033 \021 b\033 033 \r 016\(\(\031\r 031\b\004\033 b\004 033 \r 005\b#\r\024 026\005\\r%\r\003 b 033 \r 006\016\021\(\r\003 005 b\006\b\033\b\002\031 032\002\013\r\004 p b\004 031\002\003\013\r 033 \r\006  003\r#\005\021\021\r\006\022 r\b\033 \r\003 033 \r 017\002\006\022\005\021\t\017\001 005\003 033 \r 017\002\006\022\005\021\t9\003\r\r\022\020 002\031\013\005\003\b\033 \021 b\033 033 \r 016\(\(\031\r 031\b\004\033\024 7\036 f\031\020\025\031\031\f\r\t 8\006 032\003\r%\b\005\016\004 004\r#\033\b\005\006\004 r 002%\r 004 \005\\006 005 033 \r 036\n\n\030 r\031\032\004 033\005 b\021\032\003\005%\r 033 \r r!'#\b\r\006#\020 005 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 035\002\006 b\006\004\033\002\006#\r 005 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021\004\037\024 D\r\b\006\013 002 013\r\006\r\003\b 022\002\033\002 004\033\003\016#\033\016\003\r 033 \r 036\n\n\030 002\006 r r"\016\002\031\031\020 002\032\032\031\b#\002\(\031\r 033\005 033 \r 022\b\004#\005%\r\003\020 005 004\r"\016\r\006\033\b\002\031 032\002\033\033\r\003\006\004 r\032\b\004\005\022\r\004 005\006\004\033\003\002\b\006\r\022 003\r\t 016\r\006\033 004\r\033\004 r\033#\024 004 021\r\006\033\b\005\006\r\022 b\006 n\r#\033\b\005\006  033 \r 036\n\n\030 033\r# \t 006\b"\016\r b\004 003\002\033 \r\003 022\b!!\r\003\r\006\033 003\005\021 033 \r A\026 002\031\013\005\003\b\033 \021 370 002\006\022 033 \r 002\003\033\b\033\b\005\006 002\031\013\005\003\b\033 \021 320\024 D\016\033 002\006 005\(\004\r\003%\002\006\033 003\r\002\022\r\003 021\002\020 005\006\022\r\003 r\033 \r\003 033 \r 036\n\n\030 032\003\005%\b\022\r\004 r\033\033\r\003 032\003\016\006\b\006\013 033 \002\006 033 \r 033\\005 r,\b\004\033\b\006\013 002\031\013\005\003\b\033 \021\004\024 026\005\\r%\r\003 033 \b\004 b\004 033 \r 003\005\006\013 016\r\004\t 033\b\005\006 033\005 002\004\027 r#\002\016\004\r 033 \r 036\n\n\030 002\006 r 021\002\022\r 033\005 005\003\027 b\006 032\f\005 021\005\032\n\006\f\005  033 \r 033\\005 002\031\013\005\003\b\033 \021\004\024 017\r#\002\031\031 033 \002\033 033 \r A\026 002\031\013\005\003\b\033 \021 002\004 \r\004 002 k t\b\033\r\021\004\r\033 035\r\024\013\024 k 2 037 033\005 002 016#\027\r\033 b 021\002\020 r%\r\006\033\016\002\031\031\020 r 032\003\016\006\r\022 022\016\r 033\005 002\006 b\006\004\016!'#\b\r\006\033 006\016\021\(\r\003 005 b\033\r\021\004\r\033\004 r\b\006\013 002\004 \r\022 b\006\033\005 004\016 002 016#\027\r\033\024 026\005\\r%\r\003 b 002\006 036\n\n\030 b\004 016\004\r\022 004\b\021\016\031\033\002\006\r\005\016\004\031\020 033 \r\006 027\006\005\\006 b\006!\003\r"\016\r\006\033 k t\b\033\r\021\004\r\033\004 002\003\r 006\005\033 013\r\006\r\003\002\033\r\022 b\006 033 \r 003\004\033 032\031\002#\r\024 8\033\r\021\004\r\033\004 033 \002\033 032\002\004\004 033 \003\005\016\013 033 \r 032\003\016\006\b\006\013 020 033 \r 036\n\n\030 002\006 006\005 r 016\003\033 \r\003 032\003\016\006\r\022 020 033 \r A\026 002\031\013\005\003\b\033 \021\024  032\003\r\t 031\b\021\b\006\002\003\020 003\r\004\016\031\033 032\003\r\004\r\006\033\r\022 b\006 033 \r 005\031\031\005\\013 033\002\(\031\r 004 \005\\004 033 \r Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


002\022\022\b\033\b\005\006\002\031 r\006\r'\033 003\005\016\013 \033 020 002\006 036\n\n\030 035#\005\006\004\033\003\016#\033\r\022 016\004\b\006\013 033 \r 017\002\006\022\005\021\t\017\001 002\031\013\005\003\b\033 \021 b\033 m J 5 004\r\013\021\r\006\033\004\037 033\005 033 \r A\026 002\031\013\005\003\b\033 \021 b\033  214 016#\027\r\033\004\024 031\013\005\003\b\033 \021\004 017\016\006\033\b\021\r 025\005\024 005 C 2 A\026 b\033 \005\016\033 033 \r 036\n\n\030 4  01 006 0  13 004 6 A\026 b\033 \033 \r 036\n\n\030 1  96 006 0  01 004 35 026\r\003\r r\006 033 \r A\026 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 b\006 005\006*\016\006#\033\b\005\006 b\033 033 \r 036\n\n\030 033 \r 006\016\021\(\r\003 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 035 C 2 037 b\004 002\(\005\016\033 002\031 002\006\022 033 \r 004\032\r\r\022\016\032 b\004 002\(\005\016\033  033\b\021\r\004 035\ \r\006 005\021\032\002\003\r\022 033\005 033 \r A\026 002\031\013\005\003\b\033 \021 b\033 \005\016\033 033 \r 036\n\n\030\037\024 n\b\021\b\031\002\003\031\020 033 \r 036\n\n\030 002\006 003\b\006\013 002\022\022\b\033\b\005\006\002\031 r\006\r'\033\004 033\005 004\005\021\r 005\033 \r\003 002\031\013\005\003\b\033 \021\004\024 005\003 031\002#\027 005 004\032\002#\r  003\b\rL\020 022\b\004\t 016\004\004 r\031\005 005 033 \r 036\n\n\030 002\006 r 002\032\032\031\b#\002\(\031\r 033\005 033 \r 002\003\033\b\033\b\005\006 002\031\013\005\003\b\033 \021 320 002\006\022 033\005 033 \r A\r\032\033 ?\003\005*\r#\033 002\031\013\005\003\b\033 \021 30\024 005\003 033 \r 002\003\033\b\033\b\005\006 002\031\013\005\003\b\033 \021 b 002\006 036\n\n\030 b\004 016\b\031\033 005\003 r\002 032\002\003\033\b\033\b\005\006 033 \r r,\r#\016\033\b\005\006 033\b\021\r 005\003 r\002 032\002\003\033\b\033\b\005\006 b\031\031 r 004\b\013\t 006\b'#\002\006\033\031\020 003\r\022\016#\r\022 r#\002\016\004\r 027\006\005 031\005#\002\031 b\006!\003\r"\016\r\006\033 b\033\r\021\004\r\033\004 002\003\r 032\003\016\006\r\022 020 033 \r 036\n\n\030\024 023\005 b\021\032\003\005%\r 033 \r 032\r\003!\005\003\021\002\006#\r 016\003\t 033 \r\003 b 033 \r 036\n\n\030\004 005\003 002\031\031 033 \r 032\002\003\033\b\033\b\005\006\004 002\003\r 002%\002\b\031\002\(\031\r 033 \r\006 021\002\006\020 005 033 \r 013\031\005\(\002\031 002\006\022\b\022\002\033\r\004 035\b\024\r\024 b\033\r\021\004\r\033\004 033 \002\033 002\003\r 031\005#\002\031\031\020 003\r"\016\r\006\033 b\006 002 032\002\003\033\b\033\b\005\006\037 b 002\003\r 027\006\005 033\005 r 013\031\005\(\002\031\031\020 b\006\t 003\r"\016\r\006\033 b\033 \003\r\004\032\r#\033 033\005 033 \r 036\n\n\030\004 002\006 b\006 002#\033 r 032\003\016\006\r\022\024 017\r#\r\006\033\031\020 002 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021 002\031\031\r\022 A\r\032\033 \t 003\005*\r#\033 002\004 032\003\005\032\005\004\r\022 033\005 013\r\006\r\003\002\033\r 031\005\006\013 032\002\033\033\r\003\006\004 020 016\004\b\006\013 022\r\032\033 \t'\003\004\033 004\r\002\003 005\006 002 031\r,\b#\005\013\003\002\032 \b 033\003\r\r 005 b\033\r\021\004\r\033\004\024 030\005\003\r 032\003\r#\b\004\r\031\020 002\033 r\002 004\033\r\032 033 \r 002\031\013\005\003\b\033 \021 013\r\006\r\003\002\033\r\004 032\005\004\004\b\(\031\r 003\r\t 016\r\006\033 031\r,\b#\005\013\003\002\032 \b r,\033\r\006\004\b\005\006\004 035\b\024\r\024 002\006\022\b\022\002\033\r\004\037 005 002 033\003\r\r 006\005\022\r 002\006\022 033\r\004\033\004 005\003 003\r"\016\r\006#\020\024 8 002\006 036\n\n\030 b\004 016\004\r\022 004\b\021\016\031\t 033\002\006\r\005\016\004\031\020 033 \r\006 027\006\005\\006 b\006!\003\r"\016\r\006\033 002\006\022\b\022\002\033\r\004 002\006 r 032\003\016\006\r\022 r!\005\003\r 033 \r 003\r"\016\r\006#\020 005\016\006\033\b\006\013\024 8\036 027\r\t\020$\025\031\f\r\t\031 8\006 033 \b\004 032\002\032\r\003 r 032\003\005\032\005\004\r\022 002 031\b\013 \033\t\\r\b\013 \033 004\033\003\016#\033\016\003\r 002\031\031\r\022 005\032\033\b\021\b\034\r\022 004\r\013\021\r\006\033 004\016\032\032\005\003\033 021\002\032 035\036\n\n\030\037\024 8\006 002\022\022\b\033\b\005\006 033\005 b\021\t 032\003\005%\b\006\013 033 \r 032\003\016\006\b\006\013 b\006 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021\004 b\033 002\031\004\005 032\003\005%\b\022\r\004 022\b\003\r#\033 b\006!\005\003\021\002\033\b\005\006 002\(\005\016\033 033 \r 002\003\b\002\(\b\031\b\033\020 005 003\r"\016\r\006\t b\r\004 b\006 022\b!!\r\003\r\006\033 004\r\013\021\r\006\033\004 005 033 \r 033\003\002\006\004\002#\033\b\005\006\004\024 H\006\031\b\027\r 021\002\006\020 002\031\013\005\003\b\033 \021\004 b 002\006\006\005\033 002\006\022\031\r 004\027\r\\r\022 022\002\033\002 033 \r 004\033\003\r\006\013\033 005 033 \r 036\n\n\030 b\004 033\005 r,\032\031\005\b\033 033 \r 002\003\b\002\(\b\031\b\033\020\024 001\005\006#\r\003\006\b\006\013 033 \r 036\n\n\030 r 004\033\016\022\b\r\022 033\\005 021\002\b\006 032\003\005\(\031\r\021\004 035\b\037 033 \r 021\b\006\b\021\016\021 006\016\021\(\r\003 005 004\r\013\021\r\006\033\004 005\003 002\006 036\n\n\030 033\005 b\006#\016\003 006\005 031\005\004\004 b\006 002##\016\t 003\002#\020 035\033 \r 004\r\013\021\r\006\033 021\b\006\b\021\b\034\002\033\b\005\006 032\003\005\(\031\r\021\037 002\006\022 035\b\b\037 033 \r r\004\033 005\021\032\005\004\b\033\b\005\006 005 033 \r 004\r\013\021\r\006\033\004 013\b%\r\006 002 016\004\r\003\t\022\r\033\r\003\021\b\006\r\022 006\016\021\t r\003 005 004\r\013\021\r\006\033\004 035\033 \r 005\006\004\033\003\002\b\006\r\022 004\r\013\021\r\006\033\002\033\b\005\006 032\003\005\(\031\r\021\037\024 005\003 033 \r 003\004\033 032\003\005\(\031\r\021 r 032\003\005%\b\022\r\022 002 033 \005\003\005\016\013 002\006\002\031\020\004\b\004 002\006\022 002\003\022\006\r\004\004 003\r\004\016\031\033\004 004 \005\\b\006\013 033 \002\033 006\005 031\005\004\004 b\006 002##\016\003\002#\020 016\004\b\006\013 033 \r 036\n\n\030 003\r"\016\b\003\r\004 033\005\005 021\002\006\020 004\r\013\021\r\006\033\004 b\006 013\r\006\r\003\002\031\024 005\003 033 \r 004\r#\005\006\022 032\003\005\(\031\r\021 r 022\r%\r\031\005\032\r\022 033 \r r\016\003\b\004\033\b 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\031\031\r\022 033 \r 017\002\006\022\005\021 017\001 002\006\022 9\003\r\r\022\020 002\031\013\005\003\b\033 \021\004\024 023\005 016\003\033 \r\003 003\r\022\016#\r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 r 032\003\005\032\005\004\r\022 005\032\033\b\021\b\034\002\t 033\b\005\006\004 033 \002\033 016\004\r 002 016\(\(\031\r 031\b\004\033 002\006\022 003\016\006 033 \r 002\031\013\005\003\b\033 \021\004 b\006 002 020\(\003\b\022 002\004 \b\005\006\024 036\016\003 r,\032\r\003\b\021\r\006\033\002\031 003\r\004\016\031\033\004 002\003\r 004\033\003\005\006\013 b\006\022\b#\002\033\b\006\013 033 \002\033 005\003 002 004\021\002\031\031 036\n\n\030 035\r\024\013\024 024 021\r\013\002\(\020\033\r\004\037 033 \r 004\032\r\r\022\016\032 002\006 r r\003\020 004\b\013\006\b'#\002\006\033 035\r\024\013\024 7 033\b\021\r\004\037 020\r\033 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 b\004 004\021\002\031\031 035\r\024\013\024 3 004\r#\005\006\022\004 005\003 7 021\b\031\031\b\005\006 033\003\002\006\004\002#\033\b\005\006\004\037\024 r 005\006#\031\016\022\r\022 020 032\003\r\004\r\006\033\b\006\013 002 003\r#\005\021\021\r\006\022\r\022 003\r#\b\032\r 005\003 002\003\b\005\016\004 b\003#\016\021\004\033\002\006#\r\004\024 b\031\r 005\016\003 r,\032\r\003\b\021\r\006\033\004 r\003\r 002\004\r\022 005\006 006\022\t b\006\013 003\r"\016\r\006\033 004\r\033\004 016\004\b\006\013 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 b\033 b\004 b\021\032\005\003\t 033\002\006\033 033\005 003\r\021\r\021\(\r\003 033 \r 013\r\006\r\003\002\031\b\033\020 005 033 \r 036\n\n\030 8\033 b\004 002\032\032\031\b#\002\t 031\r 033\005 021\002\006\020 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021\004 035\021\002\006\020 005 b 002\003\r 031\b\004\033\r\022 b\006 033 \r b\006\033\003\005\022\016#\033\b\005\006\037\024 r r,\032\r#\033 033 \r 036\n\n\030 033\005 r r"\016\002\031\031\020 r!!\r#\033\b%\r 005\003 033 \005\004\r 002\031\013\005\003\b\033 \021\004\024 0060\006\017\006\t\020\006\031 30 017\024\001\024 013\002\003\\002\031 001\024\001\024 013\013\002\003\\002\031 002\006\022 M\024M\024M\024 003\002\004\002\022\024 A\r\032\033 '\003\004\033 013\r\006\t r\003\002\033\b\005\006 005 031\005\006\013 032\002\033\033\r\003\006\004\024 8\006 b\f\032  025  032 3@4N334\024 0 017\024 013\003\002\\002\031 023\024 8\021\b\r\031\b\006\004\027\b 002\006\022 024 n\\002\021\b\024 030\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004 r\033\\r\r\006 004\r\033\004 005 b\033\r\021\004 b\006 031\002\003\013\r 022\002\033\002\(\002\004\r\004\024 8\006 b\f\032 9 035>>\026  032\032 2N.31\024 0 017\024 013\003\002\\002\031 026\024 030\002\006\006\b\031\002 r\033 002\031\024 002\004\033 022\b\004#\005%\r\003\020 005 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024 034\007\024\005\032\003\t 006\005 005\f1\020\003\034!\003 006\t\032\f\007\003\b\013 024\005\034 024\n\024 030\006\005\006\005  032 2N/.4\024 8;\0308\023 003\r\004\004 3661\024 50 017\024 013\003\002\\002\031 002\006\022 017\024 n\003\b\027\002\006\033\024 030\b\006\b\006\013 004\r"\016\r\006\033\b\002\031 032\002\033\033\r\003\006\004\024 8\006 b\f\032  035>>A  032 N35\024 70 017\024O\024 D\002\020\002\003\022\005\024 E!'#\b\r\006\033\031\020 021\b\006\b\006\013 031\005\006\013 032\002\033\033\r\003\006\004 003\005\021 022\002\033\002\(\002\004\r\004\024 8\006 b\f\032 9 035>>B  032 47N6/\024 10 n\024 D\003\b\006 017\024 030\005\033\\002\006\b 002\006\022 001\024 n\b\031%\r\003\004\033\r\b\006\024 D\r\020\005\006\022 021\002\003\027\r\033 002\004\027\r\033 9\r\006\r\003\002\031\b\034\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004 033\005 005\003\003\r\031\002\033\b\005\006\004\024 8\006 b\f\032 9\6\030 035>>C  032 17N.21\024 20 9\024 9\003\002 \006\r f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 002\006\022 P\024 002\006\013\024 E!'#\b\r\006\033 021\b\006\b\006\013 005 005\006\004\033\003\002\b\006\r\022 005\003\003\r\031\002\033\r\022 004\r\033\004\024 8\006 b\f\032 017 025  032 73.N7.3\024 40 O\024 026\002\006 O\024 r\b 002\006\022 K\024 K\b\006\024 030\b\006\b\006\013 003\r"\016\r\006\033 032\002\033\033\r\003\006\004 b\033 \005\016\033 002\006\022\b\t 022\002\033\r 013\r\006\r\003\002\033\b\005\006\024 8\006 b\f\032 9 025  032 3N3.\024 60 001\024 026\b\022\(\r\003\024 036\006\031\b\006\r 002\004\004\005#\b\002\033\b\005\006 003\016\031\r 021\b\006\b\006\013\024 8\006 b\f\032 9 035  032\032 357N371\024 3@0 f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 001\024\007\024\t\n\024 f\r\016\006\013 002\006\022 017\024\023\024 025\013\024 023 \r 004\r\013\021\r\006\033 004\016\032\t 032\005\003\033 021\002\032 n#\002\031\002\(\031\r 021\b\006\b\006\013 005 003\r"\016\r\006\033 b\033\r\021\004\r\033\004\024 9 020\f b\024\n\006\f\005\t   035.\037 032\032 3N.2 A\r#\024 024 330 f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 017\024 025\013 r\033 002\031\024 036\032\033\b\021\b\034\002\033\b\005\006 005 005\006\004\033\003\002\b\006\r\022 003\r\t 016\r\006\033 004\r\033 016\r\003\b\r\004 002\003\b\002\(\031\r 005\006\004\033\003\002\b\006\033\004\024 8\006 b\f\032 9\6\030 035  032 372N314\024 3.0 001\024\007\024\t\n\024 f\r\016\006\013 017\024\023\024 025\013 002\006\022 026\024 030\002\006\006\b\031\002\024 023 \r 005\032\033\b\021\b\034\r\022 004\r\013\021\r\006\033 004\016\032\032\005\003\033 021\002\032 005\003 033 \r 021\b\006\b\006\013 005 003\r"\016\r\006\033 032\002\033\033\r\003\006\004\024 023\r# \006\b#\002\031 017\r\t 032\005\003\033 001\n 023\017\t.@@3\t34 023 \r H\006\b%\r\003\004\b\033\020 005 D\003\b\033\b\004 001\005\031\016\021\(\b\002 001\002\006\002\022\002 3\024 3/0 026\024 030\002\006\006\b\031\002 026\024 023\005\b%\005\006\r\006 002\006\022 0248\024 M\r\003\027\002\021\005\024 A\b\004#\005%\r\003\020 005 003\r"\016\r\006\033 r\032\b\004\005\022\r\004 b\006 r%\r\006\033 004\r"\016\r\006#\r\004\024 024\n\024 030\006\005\006\005 024\005\034 005\f1\020\003\034!\003 006\t\032\f\007 003\b\013  035 035/\037 032\032 76N.46 n\r\032\033\024 3662\024 350 017\024\023\024 025\013 f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 r\033 002\031\024 E,\032\031\005\003\002\033\005\003\020 021\b\006\b\006\013 002\006\022 032\003\016\006\b\006\013 005\032\033\b\021\b\034\002\033\b\005\006\004 005 005\006\004\033\003\002\b\006\r\022 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024 8\006 b\f\032 9\6\030 035>>B  032 3/N.5\024 370 O\024\n\024 002\003\027 030\024\t\n\024 001 \r\006 002\006\022 024\n\024 K\016\024 H\004\b\006\013 002 002\004 \t\(\002\004\r\022 021\r\033 \005\022  033\003\002\006\004\002#\033\b\005\006 033\003\b\021\021\b\006\013 005\003 021\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024  001  9 0357\037 032\032 43/N4.7 n\r\032\033\024;\036#\033\024 3662\024 310 025\024 002\004"\016\b\r\003 K\024 D\002\004\033\b\022\r r\033 002\031\024 A\b\004#\005%\r\003\b\006\013 003\r"\016\r\006\033 031\005\004\r\022 b\033\r\021\004\r\033\004 005\003 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024 8\006 b\f\032 017:\001 035  032 64N531\024 320 024 n\002%\002\004\r\003\r E\024 036\021\b\r#\b\006\004\027\b 002\006\022 n\024 025\002%\002\033 \r\024 006 r!'#\b\r\006\033 002\031\013\005\t 003\b\033 \021 005\003 021\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004 b\006 031\002\003\013\r 022\002\033\002\(\002\004\r\004\024 8\006 b\f\032 D:\016 035>>A  032 5/.N55/\024 340 001\024 n\b\031%\r\003\004\033\r\b\006 n\024 D\003\b\006 r\033 002\031\024 n#\002\031\002\(\031\r 033\r# \006\b"\016\r\004 005\003 021\b\006\b\006\013 002\016\004\002\031 004\033\003\016#\033\016\003\r\004\024 8\006 b\f\032 031D:\016 035>>B  032 765N1@7\024 360 017\024 n\003\b\027\002\006\033 Q\024 M\016 002\006\022 017\024 013\003\002\\002\031\024 030\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006\004 003\016\031\r\004 b\033 b\033\r\021 005\006\004\033\003\002\b\006\033\004\024 8\006 b\f\032  035>>C  032 12N2/\024 0 030\024O\024 R\002\027\b 002\006\022 007\024 9\005\016\022\002\024 002\004\033 r\003\033\b#\002\031 021\b\006\b\006\013 016\004\b\006\013 022\b!!\004\r\033\004\024 023\r# \t 006\b#\002\031 017\r\032\005\003\033 3\t3 017\r\006\004\004\r\031\002\r\003 005\031\020\033\r# \006\b 8\006\004\033\b\033\016\033\r H\n 3\024 30 030\024O\024 R\002\027\b 002\006\022 001\024\tO\024 026\004\b\002\005\024 001\026+\017\030 006 r!'#\b\r\006\033 002\031\013\005\003\b\033 \021 005\003 031\005\004\r\022 002\004\004\005#\b\002\033\b\005\006 003\016\031\r 021\b\006\b\006\013\024 023\r# \006\b#\002\031 017\r\032\005\003\033 66\t3 017\r\006\004\004\r\031\002\r\003 005\031\020\033\r# \006\b 8\006\004\033\b\033\016\033\r H\n 3666\024 Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


expect this optimization to be of greatest bene\336t when the transaction sizes are large r example if our transaction is T 000 f A\000 B 000 C\000 D\000 E g  k 000 3 fan-out 000 2 then all the 3-subsets of T are f ABC,ABD,ABE,ACD,ACE,ADE,BCD,BCE,BDE,CDE g  Figure 2 shows the candidate hash tree C 3  We ave to increment the support of every subset of T contained in C 3  We egin with the subset AB C  and hash to node 11 and process all the itemsets In this downward path from the root we mark nodes 1 4 and 11 as visited We then process subset AD B  and mark node 10 Now consider the subset CDE  We see in this case that node 1 has already been marked and we can preempt the processing at this very stage This approach can r consume a lot of memory r a n fan-out F  for iteration k  e need additional memory of size F k to store the 337ags In the parallel implementation we have to keep a VISITED 336eld for each processor bringing the memory requirement to P\000F k  This can still get very large especially with increasing number of processors In we sho w a mechanism by which further reduces the memory requirement to only k 000F  The approach in the parallel setting yields a total requirement of k 000F 000P  5 Experimental Evaluation Database T I D Total Size T5.I2.D100K 5 2 100,000 2.6MB T10.I4.D100K 10 4 100,000 4.3MB T15.I4.D100K 15 4 100,000 6.2MB T20.I6.D100K 20 6 100,000 7.9MB T10.I6.D400K 10 6 400,000 17.1MB T10.I6.D800K 10 6 800,000 34.6MB T10.I6.D1600K 10 6 1,600,000 69.8MB Table 2 Database properties 5.1 Experimental Setup All the experiments were performed on a 12-node SGI Power Challenge shared-memory multiprocessor Each node is a MIPS processor running at 100MHz There\325s a total of 256MB of main memory The primary cache size is 16 KB 64 bytes cache line size with different instruction and data caches while the secondary cache is 1 B 128 bytes cache line size The databases are stored on an attached 2GB disk All processors run IRIX 5.3 and data is obtained from the disk via an NFS 336le server We used different synthetic databases with size ranging form 3MB to 70MB 2  and are generated using the procedure described in These databases mimic the transactions in a retailing en vironment Each transaction has a unique ID followed by a list of items bought in that transaction The 2 While results in this section are only shown for memory resident databases the concepts and optimization are equally applicable for non memory resident databases In non memory resident programs I/O becomes an important problem Solutions to the I/O problem can be applied in combination with the schemes presented in this paper These solutions are part of future research 11 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


  0 500 1000 1500 2000 2500 0 2 4 6 8 10 12 Number of Large Itemsets Iterations Large Itemset at Support = 0.5 222T5.I2.D100K\222  222T10.I4.D100K\222   222T15.I4.D100K\222   222T20.I6.D100K\222   222T10.I6.D400K\222   222T10.I6.D800K\222   222T10.I6.D1600K\222  Figure 3 Large Itemsets per Iteration data-mining provides information about the set of items generally bought together Table 2 shows the databases used and their properties The number of transactions is denoted as jD j  average transaction size as j T j  and the average maximal potentially large itemset size as j I j  The number of maximal potentially large itemsets j L j 000 2000 and the number of items N 000 1000 We refer the reader to for more detail on the database generation All the e xperiments were performed with a minimum support value of 0.5 and a leaf threshold of 2 i.e max of 2 itemsets per leaf We note that the  improvements shown in all the experiments except where indicated do not take into account initial database reading time since we speci\336cally wanted to measure the effects of the optimizations on the computation Figure 3 shows the number of iterations and the number of large itemsets found for different databases In the following sections all the results are reported for the CCPD parallelization We do not present any results for the PCCD approach since it performs very poorly and results in a speed-down on more than one processor 3  5.2 Aggregate Parallel Performance Table 3 s actual running times for the unoptimized sequential and a naive parallelization of the base algorithm Apriori for 2,4 and 8 processors without any f the techniques descibed in sections 3 and 4 In this section all the graphs showing  improvements are with respect to the data for one processor in table 3 Figure 4 presents the speedups obtained on different databases and different processors for the CCPD parallelization The results presented on CCPD use all the optimization discussed 3 Recall that in the PCCD approach every processor has to read the entire database during each iteration The resulting I/O costs on our system were too prohibitive for this method to be  12 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


Database 1 proc 2 procs 4 procs 8 procs T5.I2.D100K 20 17 12 10 T10.I4.D100K 96 70 51 39 T15.I4.D100K 236 168 111 78 T20.I6.D100K 513 360 238 166 T10.I6.D400K 372 261 165 105 T10.I6.D800K 637 435 267 163 T10.I6.D1600K 1272 860 529 307 Table 3 Naive Parallelization of Apriori seconds   0 2 4 6 8 10 12 0 2 4 6 8 10 12 Speedup Number of Processors CCPD Ideal  T5.I2.D100K.t2   T10.I4.D100K.t2   T15.I4.D100K.t2   T20.I6.D100K.t2   T10.I6.D400K.t2   T10.I6.D800K.t2   T10.I6.D1600K.t2    0 2 4 6 8 10 12 0 2 4 6 8 10 12 Speedup Number of Processors CCPD : With Reading Time Ideal  T5.I2.D100K.t2   T10.I4.D100K.t2   T15.I4.D100K.t2   T20.I6.D100K.t2   T10.I6.D400K.t2   T10.I6.D800K.t2   T10.I6.D1600K.t2  Figure 4 CCPD Speed-up a without reading time b with reading time 13 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


Reading  f Total Time Database Time P 000 1 P 000 2 P 000 4 P 000 8 P 000 12 T5.I2.D100K 9.1s 39.9 43.8 52.6 56.8 59.0 T10.I4.D100K 13.7s 15.6 22.2 29.3 36.6 39.8 T15.I4.D100K 18.9s 8.9 14.0 21.6 29.2 32.8 T20.I6.D100K 24.1s 4.9 8.1 12.8 18.6 22.4 T10.I6.D400K 55.2s 16.8 24.7 36.4 48.0 53.8 T10.I6.D800K 109.0s 19.0 29.8 43.0 56.0 62.9 T10.I6.D1600K 222.0s 19.4 28.6 44.9 59.4 66.4 Table 4 Database Reading Time in section 4 320 computation balancing hash tree balancing and short-circuited subset checking The 336gure on the left presents the speed-up without taking the initial database reading time into account We observe that as the number of transactions increase we get increasing speed-up with a speed-up of more than 8 n 2 processors for the largest database T10.I6.D1600K with 1.6 million transactions r if we were to account for the database reading time then we get speed-up of only 4 n 2 processors The lack of linear speedup can be attributed to false and true sharing for the heap nodes when updating the subset counts and to some extent during the heap generation phase Furthermore since variable length transactions are allowed and the data is distributed along transaction boundaries the workload is not be uniformly balanced Other factors like s contention and i/o contention further reduce the speedup Table 4 shows the total time spent reading the database and the percentage of total time this constitutes on different number of processors The results indicate that on 12 processors up to 60 of the time can be spent just on I/O This suggest a great need for parallel I/O techniques for effective parallelization of data mining applications since by its very nature data mining algorithms must operate on large amounts of data 5.3 Computation and Hash Tree Balancing Figure 5 shows the improvement in the performance obtained by applying the computation balancing optimization discussed in section 3.1.2 and the hash tree balancing optimization described in section 4.1 The 336gure shows the  improvement r a run on the same number of processors without any optimizations see Table 3 Results are presented for different databases and on different number of processors We 336rst consider only the computation balancing optimization COMP using the multiple equivalence classes algorithm As expected this doesn\325t improve the execution time for the uni-processor case as there is nothing to balance r it is very effective on multiple processors We get an improvement of around 20 on 8 processors The second column for all processors shows the bene\336t of just balancing the hash tree TREE using our bitonic hashing the unoptimized version uses the simple mod d hash function Hash tree balancing by itself is an extremely effective optimization It s the performance by about 30 n n uni-processors On smaller databases and 8 processors r t s not as 14 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


