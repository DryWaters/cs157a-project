Discovery of fuzzy sequential patterns for fuzzy partitions in quantitative attributes Ruey-Shun Chen  Gwo-Hshiung Tzengb C C Chen and Yi-Chung Hu Institute of Information Management, National Chiao Tung University, Hsinchu 30050 Taiwan R 0 C bInstitute of Management of Technology National Chiao Tung University, Hsinchu 30050 Taiwan R.O C E-mail rschen  bis03 iim.nctu.edu tw Abstract In this papel we propose the FUG Grids Based Sequential Pattems zing Algorithm FGBSPMA to generate all fuuy sequential pattems 
from relational database In FGBSPMA each quantitative attribute is viewed as a linguistic variable and can be divided into many candidate I-dim fuzzy grids FGBSPMA is consisted of two phases one is to generate all the large 1 fuzzy sequences the other is to generate all the fuzzy sequential pattems FGBSPMA is a eficiently fuzzy sequential pattems mining algorithm, because FGBSPMA scans database only once and applies proper operations on rows of tables to generate large fuuy sequences and fuzzy sequential pattems An example is given to illustrate a 
detailed process for mining the fuuy sequential pattems from a specij7ed relation From this example we can show efficiency and usefulness of FGBSPMA Keywords Data mining Database Fuzzy sequential pattems Fuzzy partitions Knowledge acquisition 1 Introduction Data mining can extract interesting patterns from existing databases and ease the knowledge acquisition bottleneck in building expert systems Hong et al 2000 Knowledge acquisition can be easily achieved for users by checking the patterns discovered from databases Association rule is an important type of knowledge representation Agrawal et al 1993 had firstly proposed a method to find the association rules Later, Agrawal 
et al 1995 also proposed the Apriori algorithm However other than association rules the sequential pattern is another important type of knowledge representation Some algorithms for mining sequential patterns were proposed by Agrawal  Srikant 1995 A sequential pattern is a sequence which is not contained in another sequence A sequence is an ordered list of itemsets Agrawal  Srikant 1995 On the other hand mining sequential pattems from large database in supply chain was discussed by Chen et al 2000 Since fuzzy knowledge representation can facilitate interaction of the expert system and the users Zimmermann 1991 
we consider that fuzzy sequential pattems described by the natural language are helpful for us to build a prototype fuzzy knowledge base In this paper a efficiently fuzzy sequential patterns mining algorithm  Fuzzy Grids Based Sequential Patterns Mining Algorithm FGBSPMA is proposed FGBSPMA is consisted of two phases: one is to generate all the large 1-fuzzy sequences the other is to generate all the fuzzy sequential patterns The concepts of the fuzzy partitions are incorporated into mining sequential patterns For the proposed algorithm only quantitative attributes are divided into many fuzzy partitions FGBSPMA is a efficiently fuzzy sequential patterns mining algorithm, because FGBSPMA 
scans database only once and applies proper operations on rows of tables to generate large fuzzy sequences and fuzzy sequential patterns 2 Fuzzy partitions Notations used in this paper are first stated as follows the number of fuzzy partitions in a linguistic variable the length of a fuzzy sequence the degree of a given relation where d I 1 i,-th linguistic term of K fuzzy partitions defined in quantitative attribute n 1 I i 2 K the membership function of  the total number of customers the number of 
consecutive transactions ordered by transaction-time for customer r total number of large fuzzy grids p-th transaction corresponding to customer r where t   tt  t    t  1 I r I n and 15p I q j-th large fuzzy grid where 1 Ij 5 p Pd To divide each quantitative attribute into many fuzzy partitions have been widely used in pattern recognition and fuzzy inference Various results of research have been proposed such 
as application to pattern classification in Ishibuchi et al 1992 1995 and fuzzy rules generated in Wang and Mendel 1992 Some methods of feature space partitions were also discussed by Sun 1994 and Bezdek 1 98 1 These assumptions cannot make any changes of steps of FGBSPMA Fuzzy sets was proposed by Zadeh 1965 Zadeh 1975 1976 also proposed the concepts of a linguistic variable and its applications to approximate reasoning A linguistic variable is a variable whose values are linguistic words or sentences in a natural language Chen and Jong 1997 144 0-7695-1165-1101 10.00 0 2001 IEEE 


Fig l.K=2forx Fig 2 K=3 forx 1 b Fig 3 K 4forx that is both convex and normal \(Chen and Jong, 1997 Zimmermann 1991,1996 A quantitative attribute can be divided into K fuzzy partitions K  2 3 4  Suppose that x is divided into many fuzzy partitions We describe K=2 K=3 and K=4 in Fig 1 Fig 2 and Fig 3 respectively We try to use a linguistic terms set  AZim  to stand for a candidate 1-dim fuzzy grid The notation of linguistic terms set can be used to stand for any I-dim fuzzy grid I 2 1 Therefore the set operations \(for example, union operations can be applied to any two fuzzy grids Lzim x can be defined as follows bK  ma  mi K  1 3 where ma is the maximal value of attribute domain, and mi is the minial value If x is 223Purchase amounts of Product m\224 then AZi or simply represented as 223 is a linguistic term and can be described in a sentence Agl  x is small and below ma/\(K-1 4 AZK  x is large and above ma  mu/\(K-1 5 Api  x is close to im 1 x mu  ma/\(K-1 and between to i x ma  ma/\(K-111 1  i  K i  2 x ma  ma/\(K-l 6 However if x is 223Age\224 then 223young\224 or 223old\224 should be more suitable words other than 223large\224 or 223small\224 If we divide both x1 and x2 into three fuzzy partitions then a feature space is divided into 3 x 3 2-dim fuzzy grids which are shown in Fig 4 For the shaded 2-dim fuzzy shown in Fig 4 we use a linguistic terms set  Il A  to represent it.\221 0.0 1.0 1.0 0.0 Fig 4 Both athibutes XI and xz are divided into three fuzzy partitions The next important job for us is how to use these candidate 1-dim fuzzy grids to generate large fuzzy sequences and fuzzy sequential pattems Therefore we propose the model for generating fuzzy sequential patterns described in following section 3 Model for generating fuzzy sequential patterns After all candidate 1-dim fuzzy grids being generated we need to determine how to find all large fuzzy sequences and fuzzy sequential patterns In this section we will introduce concept of large fuzzy sequence in detail The model for generating fuzzy sequential pattems is described in Fig 5 We can see that fuzzy sequential patterns are generated by two phases of the proposed algorithm Large 1-fuzzy grids and fuzzy sequential pattems are generated by phase I and phase II respectively Before mining fuzzy sequential pattems the database is sorted with customer identification number customer-id as the major key and transaction-time as the minor key A specifid ease Phase1 I I I I I I User-specifid minimalfuzzy support I I I I I I-fuzzy sequences I r I  PhaseIZ Generating all Iarge k-furzy I I I I Fig 5 The model for generating fuzzy sequential patterns 145 


For simplicity we assume that each quantitative attribute x is divided into K fuzzy partitions Now given a candidate I-dim ZI 4 fuzzy grid  A  AFi2  A 1 the degree which t belongs to this fuzzy grid can be computed as p$,il  tg  L2ii  t   L  tx 1 p t  To check this fuzzy grid to be large or not we define its fuzzy support FS  Agi   A  as following If FS A2,jl AFi  AS;l-l  AS 1 is larger than or equal to user-specified minimal fuzzy support min FS then  A2,i Azi  A  AZ 1 is a large l-dim fuzzy grid Each large fuzzy grid LJ corresponds to a large 1-fuzzy sequence d Based on dJ the next step for us is to find all large k-fuzzy sequences 2 5 k 5 p A fuzzy sequence is an ordered list of large fuzzy grids such as 41  L or 6 I L1 Hence we must define the fuzzy support to find the large fuzzy sequences The fuzzy support of a k-fuzzy sequence is the average degree of total customers who support this sequence. Here we take d1 L2  Lk to be an example to compute its fuzzy support Since there are C;r different combinations  tg  t    tz  1 I SI  sz      Sk I ocr ordered by transaction-time but may be not continuous from pr tuples the degree Deg4.1  Lpr which a customer r supports a k-fuzzy sequence d1   Lp is described as follows where Lk t represents the degree which tuple tx belongs to Lk Therefore the fuzzy support of L1   Lp is described as follows n FSd1 L2  Lk  I Degdl L2  L n 9 If FSd1   Lk 2 min FS then dl    Lk is a r=l large k-fuzzy sequence. Finally the fuzzy sequential patterns are generated from the large fuzzy sequences Note that a fuzzy sequence d1 G     Lzl is contained in another fuzzy sequence 41   Lz2 if there exist integers 1 I jl  j2    jq such that L1 c Ljl LZ c L12   LZ1 E LjT For example  AT 222   ATwt1  is contained in I AT\222    APl\222OdUCt 2.2 1 9 AT 1  AFwtl Ar  since  AYwt 222  E  A24pd\224\222 222  and I 2,2 222  E  AY\221  AT  However  AT 222   AY  is not contained in  AY 222 AT  The former represents small amounts of product 1 and large amounts of product 2 being bought one after the other, while the latter represents small amounts of product 1 and large amounts of product 2 being bought together A fuzzy sequential pattern is just a large fuzzy sequence which is not contained in any other large fuzzy sequence We give a simple example to illustrate how we generate the large I-fuzzy sequences Example 1 As showed in Fig 6 the quantitative amibute xl 223Purchase amounts of Product 1\224 was divided into three fuzzy pastitions These three fuzzy partitions are described as following A$;l or AFwt I Purchase amounts of Product 1 is small AR2 or AF 222 Purchase amounts of Product 1 is close AB or AY  Purchase amounts of Product 1 is large We assume that there are two customers and each customer owns six transactions for buying product 1 The database is sorted with customer-id as the major key and transaction-time as the minor key The degrees which 1 I r I 2 1 I p I 6 belong to A  A$;z and A$!3 have been shown in Table 1 We can easily compute the fuzzy support of these three candidate 1-dim fuzzy grid and below 30 to 30 and between 0 to 60 and above 30 Fig 6 Attribute \223Purchase amount of Product 1\224 is hided into three fuzzy partitions Table 1 The degrees which 1 15 r S 2 a1  6  6 belong to A~S and A$f3 1 46 


M!l AB AB t\(r 0.95 0.05 0.00 ty 0.00 0.90 0.20 tp 0.40 0.55 0.00 tp 0.10 1 oo 0.00 2;\224 0.90 0.10 0.00 t p\222 0.00 0.80 0.25 tp 0.30 0.65 0.00 ti2 0.65 0.40 0.00 fy 0.00 0.10 0.90 0.00 0.20 0.70 6 2 0.00 0.95 0.10 t4 t 2 0.00 0.05 0.95 2 FS A$;l 1  c  Sup  U;:l  t  1 12  0.925 10 FS  1  c  Sup Pg:2 tg 11 1 12  0.975 11 FSI A?3 1  c  Sup P;:3 tr 111 12  0.925 If the minimal fuzzy confidence specified by users is 0.90 then   are the large 1-dim fuzzy grid That is three large 1-fuzzy sequences    I2  and  A?3  are generated Apparently we need to propose a efficiently mining algorithm FGBSPMA, to generate fuzzy sequential pattems This is just the main subject introduced in following section r=l p 2 r=l p 2 12 r=l p   A$!2  and  4 Fuzzy grids based sequential patterns mining In this section we begin to introduce the Fuzzy grids based sequential pattems mining algorithm FGBSPMA in detail FGBSPMA is a two phase algorithm Before FGBSPMA being given we give some necessary descriptions in following Phase I Generate all large 1-fuzzy sequences following substructures algorithm Table FGTTFS is used in phase I and consisted of the a\Fuzzy Grids table FG FG is a two-valued matrix and used in phase I In FG each row represents a fuzzy grid while each column represents a linguistic term A$im By using FG we can easily know which fuzzy grid is generated and which linguistic terms are contained in this fuzzy grid b Transaction table 0 each column represents a tuple transaction fgl while each element records the membership degree which belongs to the corresponding fuzzy grid c Column FS which stores the fuzzy support An initially table FGTTFS is shown as Table 2 to be an example. The first column and first row of Table 2 is auxiliary for us and do not exist in real implementation. From Table 2 we can see that there are two tuples ti\222 and ti1 corresponding to customer 1 and two quantitative attributes x1 and x2 in a given relation. Each attribute is divided into two fuzzy partitions Initially each element of FG is assigned to 0 or 1 Thus we can apply the boolean operations on FG[u  FG[u,l  FG[u,3 FG[u,4 and FG[v  FG[v,l FG[v,2 FG[v3 FG[v,4 For example if we apply OR operation on FG[u  1,0,0,0\and FG[v  O,O,l,O then a temporary string rl  1,0 I 0 which corresponds to a candidate 2-dim fuzzy grid  A   is generated However any two linguistic terms defined in the same attribute cannot be contained in a candidate 1-dim fuzzy grid 1 2 2 Therefore rl  l,l,O,O or O,O,l,l are all invalid To solve this problem we implement a one-dimensional array Group of Fuzzy Grids GFG described in Table 3 From GFG we can easily distinguish which linguistic terms corresponding to the same product. Each index of GFG corresponds to a linguistic term and linguistic terms corresponding to the same attribute must be set to the same integer number Since GFG[lI  GFG[21  1 invalid rl  l,l,O,O is generated by applying OR operation to  1,0,0,0 and FG[v  O,I,O,O This job of inspection is only executed for generating candidate 2-dim fuzzy grids. Generally, a candidate I-dim fuzzy grid is derived by joining two large Z-1 and these two grids share 1-2 linguistic terms At the end of phase I all large 1-fuzzy sequences will be generated with total number p On the other hand we implement a one-dimensional array Group of Customer Transactions \(GCT for computing the fuzzy support of each fuzzy sequence. GCT is implemented for phase 11 From GCT we can easily know which transactions correspond to a specified customer. A exemplar GCT is described in Table 4 In Table 4 GCT[l  1 stands for the tuples \(transactions\corresponding to customer 1 start from first column of TT Since the number of tuples corresponding to customer 1 is two the length of any large fuzzy sequence is at most two Phase 11 Generate all fuzzy sequential patterns Table FSEFS is used in phase I1 and mainly consisted of the Fuzzy Sequences table \(FSE\FSE is a integer matrix and each row represents a fuzzy sequence while each column represents a large fuzzy grid FSE can make we easily know which fuzzy sequence is generated and which large fuzzy grids are contained in this sequence. Note that FSE is a p x p table At the beginning of phase 11 we assume that the table FSEFS is generated as Table 5 From Table 5 we can see that four large 1-fuzzy sequences are generated If we apply corresponding to the fuzzy grid in FG 1 47 


addition operation on FSE[u  FSE[u,l FSE[u,2  FSE[u,4 and FSE[v  FSE[v,l FSE[v,2 FSEiv31, FSEivPI then a temporary string r3  r31 r32 r33 rw is heuristically generated as following uj 1 if vj uj Table 2 An initial table FGTTFS is given for an example Fuzzy FG TT Suppor t A$tl A$f2 A A;?z  tp FS Table 3 A one-dimensional array GFG \(Group of Fuzzy Grids Index 111 121 131 141 1 1 2 3 Table 4 A one-dimensional array GCT Group of Customer Transactions for Table IT Index l 1 Table 5 An exemplar table FSEFS is given FSE Fuzzy Support   A$f I 0 0 1 For example if we apply addition operation on FSE[u  1 0 0 0 and FSE[v  0 1 0 0 then r3  2 1 0 0 corresponding to a candidate 2-fuzzy sequence  A$;l   A  is generated We can see that the large fuzzy grid corresponding to the largest number in r3is the first item first occurrence of this sequence the large fuzzy grid corresponding to the next-to-the-largest number in r3 is the second item second occurrence of this sequence, and so on Note that if r3correspons to a candidate k-fuzzy sequence then it must contain 1 2  k otherihise it is invalid For example r3  0 0 2 3 is invalid and can be discarded Generally a candidate k-fuzzy sequence is derived by joining two large k-1 sequences and these two sequences share k-2 large fuzzy grids Now we describe the detailed steps of FGBSPMA in the following Algorithm Fuuy grids based sequential patterns mining algorithm FGBSPMA Input A specified database. The minimal fuzzy support is specified by users Output Phase I Generate all large 1-fuzzy sequences large fuzzy grids Phase 11 Generate all fuzzy sequential pattems Method Phase I Generate all large 1-fuzzy sequences Step 1 Generate fuzzy partitions for all quantitative attributes Step 2 Scan database once and then construct the initial table FGTTFS ,GFG and GCT Step 3 Finding all large 1-dim fuzzy grids Set Z  1 We eliminate the rows of initial FGTTFS corresponding to the candidate 1-dim fuzzy grids which are not large i.e these grids fuzzy supports computed by 15 does not exceed the user-specified minimal fuzzy support Assume currently total number of large 1 dim fuzzy grids is p Step 4 Generating all large 2-dim fuzzy grids I 2 2 4-1 Set 1  1 to 1 If there is no or only one Z-1 fuzzy grid then go to Step 5 Repeat 4-2 Select unpaired  and FG[v corresponding to large Z-1 fuzzy grids 4-3 We apply logic OR operation on  and FG[v to generate a temporary string rl which corresponding to a candidate I-dim fuzzy grid c By running Step 4-3-1 for 1  2 and 4-3-2 for 1  2 we can check whether c is valid or not 148 


4-3-1 According to 1\222s in rl we can retrieve all corresponding value from GFG If any two values retrieved from GFG are the same then we discard c and skip Step 4-3-3 and 4-3-4 That is c is invalid 4-3-2 If the sum of the former 1  2 bits of rl\222is not equal to E  2 then we discard c and skip Step 4-3-3 and 4-3-4 That is c is invalid 4-3-3 We apply multiplication operation on 221IT[u and m[v to generate a temporary string r2 and compute the fuzzy supportfs of c by 15 4-3-4 Iffs is larger than the minimal fuzzy support then set p  1 to p add rl to table FG[m r2 to table TT[m andfs to column FS[B otherwise, discard c Until all  and FG[v U  v corresponding to large E-1 fuzzy grids have been paired Step 5 Is any large 1-dim fuzzy grid generated If yes then repeat by going to Step 4 else construct FSEFS set 1 to k and continue to execute phase 11 We can find that the final FGTTFS only stores large fuzzy grids 5 Discussions and analysis Since fuzzy knowledge representation can facilitate interaction of the expert system and the users Zmmermann 1991\we consider that fuzzy sequential patterns described by the natural language are helpful for us to build a prototype fuzzy knowledge base Therefore mining the fuzzy sequential patterns from the database is necessary In this paper, we propose the Fuzzy Grids Based Sequential Patterns Mining Algorithm FGBSPMA FGBSPMA is consisted of two phases Phase I Generate all large fuzzy grids Phase It Generate all fuzzy sequential patterns On the other hand the meaning of the fuzzy terms of a quantitative attribute x can be changed by the linguistic hedge Chen and Jong 1997 Zimmermann 1991 1996 such as 223very\224 or 223more or less\224 For example  A$\224   more or less AZi   15 The membership functions of Azi 222 and  AZin 1\222\222 can and be stated as respectively Therefore, there are three different linguistic terms defined in each partition such as AZim 223very 224 and 223more or less pi 224 Finally there are 3K  Goti x and  UZim x In  Phase II Generate all fuw sequentialpatterns Step 1 Generating all large k-fuzzy sequences 2 I k I 1-1 Set k  1 to k If there is no or only one k-1 sequence, then go to Step 2 p Repeat 1-2 Select unpaired  and FSE[v corresponding to large k-1 sequences However if the former k  2 numbers are different or former p  k  1 numbers are all equal to zero then we discard this combination and skip Step 1-3 1-4 and 1-5 1-3 We apply 21 on  and FSE[v to generate a temporary string r3 corresponding to a candidate k-fuzzy sequence s\222 1-4 We apply 17 on and TT[v to generate FS\(s\222 1-5 If FS\(s\222 is larger than user-specified minimal fuzzy support, then add r3 to table FSE and FS\(s\222 to column FS otherwise, discard s\222 AT   AF  to be an example different linguistic terms defined in the quantitative attribute x These extensions for defining the linguistic terms by linguistic hedge in the quantitative attributes will make the fuzzy sequential patterns mined from the given relation more friendly and more flexible to the users We use an example to illustrate how to generate the large 1-fuzzy sequences after employing these extensions On the other hand the number of fuzzy partitions defined in each quantitative attribute need not to be equal to K For example 223Age\224 can be divided into three fuzzy subsets, and 223Income\224 can be divided into four fuzzy subsets Moreover we consider that each quantitative attribute can be divided to K  3,4,5  simultaneously as a result some more useful sequential patterns may be mined from database We also do not restrict the shapes of the membership functions defined in the quantitative attributes We can use different types of the membership functions such as triangular or trapezoid functions for the fuzzy subsets The adjustment of the membership functions by learning from examples had been proposed Lin  Lee 1991; Jang 1992 Therefore the membership functions of linguistic terms of the fuzzy association rules should be refined by learning from specified input and its desired output 6 Conclusions In this paper we propose FGBSPMA to generate all fuzzy sequential patterns from relational database FGBSPMA is a efficiently fuzzy sequential patterns mining algorithm because FGBSPMA scans database only once and applies proper operations on rows of tables to generate large fuzzy sequences and fuzzy sequential patterns An example 149 


is given to illustrate a detailed process for mining the fuzzy sequential pattems from a specified relation From this example we can show efficiency and usefulness of FGBSPMA References Agrawal R Imielinski,'T  Swami A 1993 Mining association rules between sets of items in large databases Proceedings of the ACM SIGMOD Intemational Conference on Management of Data pp Agrawal R Mannila H Srikant Toivonen R H  Verkamo A I 1995 Fast discovery of association rules. In U M Fayyad G Piatetsky-Shapiro P Smyth  R Uthurusamy Advances in knowledge discovery and data mining AAAI Press Agrawal R  Srikant R 1995 Mining sequential pattems Proceedings of the Eleventh International Conference on Data Engineering pp 3-14 Bezdek J C 1981 Pattem recognition with fizzy objective function algorithms New York Plenum Chen A Liu L Chen N  Xia G P 2000\Discovery of sequential patterns from large database in supply chain Proceedings of the 3 World Congress on Intelligent Control and Automation pp. 1966-1970 Chen S M  Jong W T 1997 Fuzzy query translation for relational database systems IEEE Transactions on Systems, Man, and Cybernetics 27\(4\714-721 Hong T P Wang T T Wang S L  Chien B C 2000 Leaming a coverage set of maximally general fuzzy rules by rough sets Expert Systems with Applications Ishibuchi H Nozaki K Yamamoto N  Tanaka H 1995 Selecting fuzzy if-then rules for classification problems using genetic algorithms IEEE Transactions on Fuzzy Systems 3\(3 260-270 Ishibuchi H Nozaki K  Tanaka H 1992 Distributed representation of fuzzy rules and its application to pattern classification Fuuy Sets and Systems 52\(1 Jang J S R 1992 Self-learning fuzzy controllers based on temporal back propagation IEEE Transactions on Neural Networks 3\(5 714-723 Lin C T  Lee C S G 1991 Neural-network-based fuzzy logic control and decision system IEEE Transactions on Computers 40\(12 1320-1336 Sun C T 1994 Rule-base structure identification in an adaptive-network-based fuzzy inference system IEEE Transactions on Fuzzy Systems 2\(1\64-73 Wang L X  Mendel J M 1992 Generating fuzzy rules by learning from examples IEEE Transactions on Systems, Man, and Cybernetics 22\(6\1414 1427 Zadeh L A 1965 Fuzzy sets Information Control 8\(3 Zadeh L A 1975 The concept of a linguistic variable and its application to approximate reasoning part 1 Information Science 8\(3 199-249 Zadeh L A 1975 The concept of a linguistic variable and 207-21 6 19\(2 97-103 2 1-32 338-353 its application to approximate reasoning part 2 Information Science 8\(4 301-357 Zadeh L A 1976 The concept of a linguistic variable and its application to approximate reasoning part 3 Information Science 9\(1 43-80 Zimmermann H J 1991 Fuuy sets decision making and expert systems Boston: Kluwer Zimmermann H J 1996 Fuuy set theory and its applications Boston Kluwer 150 


  001 002\001 003\001 004\001 005\001 006\001 003\001 005\001 007\001 b\001 002\001\001 002\003\001 002\005\001 002\007\001 t\n\013\013\f\r\n\016\017\013\020\021\022\023\024\013\016\022\025\016\026\\n\017\023\025\017\023\016\027\023\022\030\025\r\022\016\022\030\013\016\\t\t\031 032\r\033\034\013\017\016\025\035\016\036\013\037\033\013 \022\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021 017\013\013\f     021 \f\025\033  021 013\020\021\022\023\024\013 036\n\013\013\f\r\n   001 001*\002 001*\003 001*\004 001*\005 001*\006 001*\007 001 003\001 005\001 007\001 b\001 002\001\001 002\003\001 002\005\001 002\007\001 032\r\033\034\013\017\016\025\035\016$\021 \f\023\f\021\022\013\016\003\,\023\022\013\033\036\013\022\036\016\017\013\020\021\022\023\024\013\016\\022\025\016\026\n\017\023\025\017\023\016\027\023\022\030\025\r\022\016\\022\030\013\016\t\t\031 032\r\033\034\013\017\016\025\035\016\036\013\037\033\013 \022\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021  021 \f\025\033     017\013\013\f 034 017\021$\022\023\025 025\035 021 \f\023\f\021\022\013 003,\023\022\013\033\036\013\022\036 025\022 n\017\r \013\f 001\002\003\004\005\006 036\b 037\017\017\006 \f\002!\006\013\006\016\016 r\017 f\020\006 016\006\003\021\006\013\f\022\f\002\r\013 022\025\003\r\005\002\f\020\021\016 002\031\016\r 005 m user  033 \r b\013 \r\003 b\004 033 \r 004\032\r\r\022\016\032\024 8\006\033\r\003\r\004\033\b\006\013\031\020 r%\r\006 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 002\006 005!!\r\003 002 004\032\r\r\022\016\032 033 \002\033 b\004 r\033\t 033\r\003 033 \002\006 002\006 005\003\022\r\003 005 021\002\013\006\b\033\016\022\r\024 8\006 033\r\003\021\004 005 033 \r 004\032\r\r\022\016\032 033 \r 003\002\006\027 b\006 022\r\004#\r\006\022\b\006\013 005\003\022\r\003 b\004 002\031\\002\020\004 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021 033 \r 017\001 002\031\013\005\003\b\033 \021 002\006\022 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021\024 023 \r 013\002\032\004 r\t 033 033 \r\021 005\032\r\006 016\032 013\003\002\022\016\002\031\031\020 002\004 m user r#\005\021\r\004 031\002\003\013\r\003\024 023 \r 004\032\r\r\022\016\032 002\006 r 022\b\003\r#\033\031\020 031\b\006\027\r\022 033\005 033 \r 006\016\021\(\r\003 005 002\006\t 022\b\022\002\033\r\004 033 \002\033 003\r"\016\b\003\r 003\r"\016\r\006#\020 005\016\006\033\b\006\013 b\024\r\024 002\006\022\b\022\002\033\r\004 033 \002\033 002\003\r 006\005\033 032\003\016\006\r\022 002\004\r\022 005\006 r"\016\002\033\b\005\006 0353\037\024 b\013\016\003\r 5\035\(\037 005\021\t 032\002\003\r\004 033 \r 006\016\021\(\r\003 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 r"\016\b\003\r\022 b\033 005\003 016\033 033 \r 036\n\n\030\024 013\002\b\006 033 \r 003\002\033\b\005 b\004 004 \005\\006 005\006 r 020\t 002,\b\004 033 \r 003\002\033\b\005 3 r\b\006\013 033 \r 002\004\r b\033 \005\016\033 033 \r 036\n\n\030\024 001\031\r\002\003\031\020 033 \r 036\n\n\030 032\003\005%\b\022\r\004 004\b\013\006\b'#\002\006\033 032\003\016\006\b\006\013\024 005\003 r,\002\021\032\031\r b\033 m user 150  002\006\022 033 \r 036\n\n\030 032\003\005\022\016#\r\022 020 033 \r 9\003\r\r\022\020 002\031\t 013\005\003\b\033 \021 005\006\031\020 002\(\005\016\033 I 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 r#\027\r\022 020 032\003\b\005\003\b 005\003\022\b\006\002\003\b\031\020 002\003\r 006\005\033 032\003\016\006\r\022 020 033 \r b\006!\005\003\021\002\033\b\005\006 027\r\032\033 b\006 033 \r 036\n\n\030\024 b\013\016\003\r 5\035\(\037 005\006\031\020 004 \005\\004 033 \r 003\r\022\016#\033\b\005\006 005\003 002\006\t 022\b\022\002\033\r t\b\033\r\021\004\r\033\004\024 023 \r 036\n\n\030 002\032\032\031\b\r\004 033\005 002\006\022\b\022\002\033\r 004\r\033\004 005 b\013 \r\003 002\003\022\b\006\002\031\b\033\b\r\004\024 9\b%\r\006 005\016\003 004\020\006\033 \r\033\b 022\002\033\002 004\r\033\004 033 \r 003\r\t 022\016#\033\b\005\006 005\003 b\013 \r\003 002\003\022\b\006\002\031\b\033\b\r\004 b\004 021\b\006\b\021\002\031\024 D\016\033 033 \b\004 b\004 006\005\033 002\004 006\r\013\002\033\b%\r 002\004 b\033 021\002\020 004\r\r\021 r#\002\016\004\r b\033 b\004  027\006\005 033 \002\033 033 \r 021\002\b\006 005\033\033\031\r\006\r#\027 005 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 b\004 005\006 b\033\004 032\003\005#\r\004\004\t b\006\013 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 370B 033 \b\004 b\004 032\003\r#\b\004\r\031\020 033 \r 002\003\r\002  036\n\n\030 r,#\r\031\004\024 023 \r 003\r\004\016\031\033\004 003\r\032\005\003\033\r\022 b\006 b\013\016\003\r 5 002\003\r 002\004\r\022 005\006 033 \r 003\r\013\016\031\002\003\t 004\020\006\033 \r\033\b 022\002\033\002 004\r\033 002\006\022 002 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 005 3I\024 8\006 002\022\022\b\t 033\b\005\006 r 002%\r r,\032\r\003\b\021\r\006\033\r\022 b\033 005\033 \r\003 022\002\033\002 004\r\033\004 021\r\006\033\b\005\006\r\022 016\003\r 004\033\003\002\033\r\013\020 n\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r n\032\r\r\022\016\032 017\002\006\022\005\021 0  02 006 0  00 004 2  6 006 0  1 017\001 2791 006 7 004 5  5 006 0  4 9\003\r\r\022\020 5439 006 6 004 5  9 006 0  3 021 r\017\013 036\022\017\021\022\013\037\023\013\036 027\023\022\030 p  006\001\001 026\020\(\003\b\022 004\033\003\002\033\r\013\020 n\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r n\032\r\r\022\016\032 017\002\006\022\005\021\t\017\001 521 006 2 004 4  3 006 0  0 017\002\006\022\005\021\t9\003\r\r\022\020 1051 006 1 004 5  2 006 0  1 034 0#\034\017\023\f 036\022\017\021\022\013\037\023\013\036 027\023\022\030 p  001 001\001\0011 p mid  003\001\001 001\002\003\004\005\006 b 006\003\021\006\013\f\022\f\002\r\013 r\016\f\016 004\005\006 022\013\032 020\023 024\005\002\032 016\f\005\022\f\006\003\002\006\016 002\f\020 m user 036 002\(\005%\r 002\006\022 002\003\b\005\016\004 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\004\024 031\r\002\004\r r!\r\003 033\005 005\016\003 033\r# \006\b#\002\031 003\r\032\005\003\033 3.0 005\003 021\005\003\r 022\r\033\002\b\031\004\024 5\036\(\036 002\006\007\b\006\t\n\013\n\f\r\t 020\r\031\n 8\006 031\b\013 \033 005 033 \r 004\b\013\006\b'#\002\006\033 004\032\r\r\022\016\032 005!!\r\003\r\022 020 002\006 036\n\n\030 033 \r 006\002\033\016\003\002\031 016\r\004\033\b\005\006 033\005 002\004\027 b\004  033 \b\004 004\032\r\r\022\016\032 b\004 002# \b\r%\r\022 020 002 b\013 005\021\032\b\031\r\t\033\b\021\r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033\024 023 \r 027\r\020 032\002\003\002\021\r\033\r\003\004 r\003\r 002\003\r p 002\006\022 m user 024 b\031\r r r,\032\r\003\b\t 021\r\006\033\r\022 b\033 \021\002\006\020 005\021\(\b\006\002\033\b\005\006\004 r 005\006\031\020 003\r\032\005\003\033 004\005\021\r 005 033 \r\021 r\031\005 022\016\r 033\005 002 031\002#\027 005 004\032\002#\r\024 005\003 r,\002\021\032\031\r b\013\016\003\r 7\035\002\037 003\r\032\005\003\033\004 033 \r 003\r\004\016\031\033\004 005\003 p 500 002\006\022 m user 40 024 00\006\020\n\f \006\t\006\031\031 r0 n\021\006 016\025\017\006 031\006\007\b\006\t\n\013\n\f\r\t 031\n\017\013\n\006\007\f\006\031\004 004 r,\t 032\r#\033\r\022 005\033 033 \r 017\001 002\006\022 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021\004 033\002\027\r 002 031\005\006\013 033\b\021\r 033\005 032\003\005\022\016#\r 033 \r 036\n\n\030\024 D\016\033 b\004 b\033 033\005\005 031\005\006\013G 8\004 033 \r 002\022\t 022\b\033\b\005\006\002\031 005\006\r\t\033\b\021\r 005\004\033 005 75/6 004\r#\005\006\022\004 005\003\033 \ \b\031\r 033\005 b\006\t 003\r\002\004\r 033 \r 004\032\r\r\022\016\032 003\005\021 0241 033\005 7\0246 005\003 003\024\032\002 021\b\006\b\006\013 016\r\003\020G 023 \r 002\006\004\\r\003 033\005 033 \b\004 016\r\004\033\b\005\006 b\004 004\016\(*\r#\033\b%\r 022\r\032\r\006\022\b\006\013 005\006 033 \r 003\r\031\002\033\b%\r b\021\032\005\003\033\002\006#\r 005 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 033\005 022\020\006\002\021\b 016\r\003\020 r,\r#\016\033\b\005\006 005\004\033 005\003 033 \r 004\032\r#\b 002\032\032\031\b#\002\033\b\005\006\024 8\033 002\031\004\005 022\r\032\r\006\022\004 005\006 033 \r 002\021\005\016\006\033 005 004\032\002#\r 033 \r 036\n\n\030 002\006 005##\016\032\020 b\024\r\024 033 \r 002\031\016\r 005 m user 024 8\006 013\016\003\r\004 r 022\r\031\b\(\r\003\002\033\r\031\020 033\002\027\r 002 004\021\002\031\031\r\003 002\031\016\r m user 40 033\005 002\031\031\005 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 032\003\005#\r\004\004 033\005 033\002\027\r 031\005\006\013\r\003\024 8 033 \r 002\032\032\031\b#\002\033\b\005\006 002\006 002!!\005\003\022 002 031\002\003\013\r\003 002\031\016\r 005 m user  033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 034\b\f.\t  033 \r 004\032\r\r\022\016\032 006\005\032\b\003\024\t\003\t 024 8\006 033 \b\004 002\004\r 033 \r 005\b#\r r#\005\021\r\004 021\005\003\r 005\(%\b\005\016\004 C 006\002\021\r\031\020 b\033 032\002\020\004 005 033\005 016\004\r 002 021\005\003\r r\031\002\(\005\003\002\033\r 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021 033\005 032\003\005\022\016#\r 002 b\013 \r\003\t"\016\002\031\b\033\020 036\n\n\030\024 00\006\020\n\f \006\t\006\031\031 r0 n\021\006 021\026\030\017\f\034 031\006\007\b\006\t\n\013\n\f\r\t 031\n\017\013\n\006\007\f\006\031\004 9\b%\r\006 033 \r 006\016\021\(\r\003\004 b\006 b\013\016\003\r 7\035\002\037 002 006\002\033\016\003\002\031 016\r\004\033\b\005\006 033\005 002\004\027 b\004 005  033 \r 021\005\003\r r\031\002\(\005\003\002\033\r 002\031\013\005\003\b\033 \021\004 004#\002\031\r 016\032 b\033 003\r\t 004\032\r#\033 033\005 p 024 8 b\033 033\002\027\r\004 75/6 004\r#\005\006\022\004 005\003 033 \r 9\003\r\r\022\020 002\031\013\005\t 003\b\033 \021 005\003 p  500 032\002\013\r\004 005 031\005\006\013 022\005\r\004 b\033 033\002\027\r 005\003 p  50 000 032\002\013\r\004G 035$\005\003 002 032\002\013\r 004\b\034\r 005 5 027\b\031\005\(\020\033\r\004 r\002# \032\002\013\r 002\006 005\006\033\002\b\006 003\005\016\013 \031\020 3 033\003\002\006\004\002#\033\b\005\006\004\024 023 \016\004 7  032\002\013\r\004 005\003\003\r\004\032\005\006\022 033\005 7 021\b\031\031\b\005\006 033\003\002\006\004\002#\033\b\005\006\004\024\037 023 \b\004 b\004 002\006 b\021\032\005\003\033\002\006\033 016\r\004\033\b\005\006 r#\002\016\004\r 022\002\033\002 021\b\006\b\006\013 002\032\032\031\b#\002\033\b\005\006\004 002\003\r 004\016\032\032\005\004\r\022 033\005 002%\r 002 016\013\r 006\016\021\(\r\003 005 033\003\002\006\004\002#\033\b\005\006\004 035\002\006\022 032\002\013\r\004\037\024 005\003\033\016\006\002\033\r\031\020 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 005\021\r\004 033\005 033 \r 003\r\004#\016\r\024 017\r#\002\031\031 003\005\021 b\013\016\003\r 7\035\002\037 033 \002\033 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033\002\027\r\004 002 006\r\013\031\b\013\b\(\031\r 002\021\005\016\006\033 005 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r 016\033 004\033\b\031\031 022\r\031\b%\r\003\004 003\r\002\004\005\006\002\(\031\r 004\032\r\r\022\016\032\024 023 \b\004 005\032\r\006\004 033 \r 032\005\004\004\b\(\b\031\b\033\020 005 020\(\003\b\022 004\r\013\021\r\006\033\002\033\b\005\006 004\033\003\002\033\r\013\b\r\004 005\003 031\002\003\013\r 002\031\016\r\004 005 p 024 b\013\016\003\r 7\035\(\037 004 \005\\004 033 \r 004\b\033\016\002\033\b\005\006 005\003 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 017\002\006\022\005\021\t\017\001 002\006\022 017\002\006\022\005\021\t9\003\r\r\022\020\024 030\005\003\r 004\032\r#\b'#\002\031\031\020 033 \r b\006\b\033\b\002\031 002\031\016\r 005 p b\004 7 024 023 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 033\005 016\b#\027\031\020 003\r\t 022\016#\r p 033\005 p mid 200 004\r\013\021\r\006\033\004\024 003\005\021 033 \002\033 032\005\b\006\033 005\006 r\b\033 \r\003 Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


  001*\002 002 002\001 002\001\001 002\001\001\001 001 002\001 003\001 004\001 005\001 006\001 007\001 t\013\037\033\013 \022\021\022\023\025 \016$\025\036\022\016\(\023 \016\\036\013$\025 \f\036 t\0232\013\016\025\035\016\034\r\034\034\020\013\016\020\023\036\022\016\\(\023 \016\n\013\017$\013 \022\021\037\013\016\025\035\016\f\025\033\021\\023 \016\023\022\013\033\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021  021 \f\025\033,&\017\013\013\f   021 \f\025\033  021 t\013\037\033\013 \022\021\022\023\025 022\023\033\013   004 004*\006 005 005*\006 006 001 002\001 003\001 004\001 005\001 006\001 007\001 t\n\013\013\f\r\n\016\017\013\020\021\022\023\024\013\016\022\025\016\026\\n\017\023\025\017\023\016\027\023\022\030\025\r\022\016\022\030\013\016\\t\t\031 t\0232\013\016\025\035\016\034\r\034\034\020\013\016\020\023\036\022\016\\(\023 \016\n\013\017$\013 \022\021\037\013\016\025\035\016\f\025\033\021\\023 \016\023\022\013\033\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021  021 \f\025\033,&\017\013\013\f   021 \f\025\033  034 t\n\013\013\f\r\n 001\002\003\004\005\006 b 037\017\017\006 \f\002!\006\013\006\016\016 r\017 f\020\006 024\004\024\024\025\006 025\002\016\f r f\002\021\002,\022\f\002\r\013 033 \r 017\001 005\003 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 033\005 004\r\031\r#\033 033 \r 006\002\031 m user 40 004\r\013\021\r\006\033\004\024 025\005\033\b#\r 033 \002\033 005\003 017\002\006\022\005\021\t\017\001 033 \r 033\005\033\002\031 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r 005\003 7  032\002\013\r\004 b\004 005\006\031\020 7.3 004\r#\005\006\022\004 002\004 004\016\032\032\005\004\r\022 033\005 263 004\r#\005\006\022\004 005\003 005\006\031\020 7 032\002\013\r\004 016\004\b\006\013 032\016\003\r\031\020 033 \r 017\001 002\031\t 013\005\003\b\033 \021\024 K\r\033 033 \r\003\r b\004 002 021\b\006\b\021\002\031 022\003\005\032 b\006 004\032\r\r\022\016\032\024 n\b\021\b\031\002\003 005\(\004\r\003%\002\033\b\005\006\004 002\006 r 005\(\033\002\b\006\r\022 005\003 017\002\006\022\005\021\t9\003\r\r\022\020\024 8\006 013\r\006\t r\003\002\031 013\b%\r\006 002 031\002\003\013\r b\006\b\033\b\002\031 p 002\031\016\r 002 013\005\005\022 004\033\003\002\033\r\013\020 b\004 033\005 016\004\r 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033\005 r\022\016#\r p 033\005 002 021\016# \004\021\002\031\031\r\003 p mid 002\031\016\r 035\r\024\013\024 r\033\\r\r\006 3 033\005 7 032\002\013\r\004\037 002\006\022 033 \r\006 033\005 016\004\r 002\006 r\031\002\(\005\003\002\033\r 002\031\013\005\003\b\033 \021 033\005 005\021\032\031\r\033\r 033 \r 004\r\013\021\r\006\033\002\033\b\005\006\024 00\006\020\n\f \006\t\006\031\031 r0 n\021\006 030\025\030\030$\006 f\031\n r\016\n\f\b\f\022\013\n\f\r\t\004 032\002\003\033 003\005\021 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 r 002\031\004\005 032\003\005\032\005\004\r 033 \r 016\(\(\031\r 031\b\004\033 r\016\003\b\004\t 033\b b\033 033 \r 005\(*\r#\033\b%\r 005 005#\016\004\b\006\013 033 \r 005\021\032\016\033\002\033\b\005\006 033\005 033 \r subop  002\031\016\r 005\006\031\020 033\005 033 \005\004\r b\033\r\021\004 033 \002\033 002\003\r 005\006 033 \r 016\(\(\031\r 031\b\004\033\024 b\013\016\003\r 1 004 \005\\004 033 \r 004\b\033\016\002\033\b\005\006 r\006 033 \r 016\(\(\031\r 031\b\004\033 002\004 005\003\021\r\022 002\004\r\022 005\006 033 \r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 024.7I 002\006\022 020\r\033 022\016\003\t b\006\013 016\r\003\020 r%\002\031\016\002\033\b\005\006 033 \r 002#\033\016\002\031 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 b\004 3I\024 023 \r t\002,\b\004 004 \005\\004 033 \r 002\003\020\b\006\013 004\b\034\r 005 033 \r 016\(\(\031\r 031\b\004\033 r,\t 032\003\r\004\004\r\022 002\004 033 \r 032\r\003#\r\006\033\002\013\r 005 k  033 \r 033\005\033\002\031 006\016\021\(\r\003 005 b\033\r\021\004 b\006 033 \r 022\005\021\002\b\006\024 023 \r 027\r\020 005\(\004\r\003%\002\033\b\005\006 b\004 033 \002\033 033 \r 004\r\013\021\r\006\033\002\t 033\b\005\006 005\004\033 b\004 022\003\002\004\033\b#\002\031\031\020 003\r\022\016#\r\022\024 005\003 r,\002\021\032\031\r 033 \r 017\002\006\022\005\021\t 9\003\r\r\022\020 020\(\003\b\022 004\033\003\002\033\r\013\020 b\033 033 \r 016\(\(\031\r 031\b\004\033 002\006 032\003\005\022\016#\r 002\006 036\n\n\030 b\006 002\(\005\016\033 3 004\r#\005\006\022\004 005 033\005\033\002\031 033\b\021\r 005\003 7 021\b\031\031\b\005\006 033\003\002\006\004\t 002#\033\b\005\006\004 035\b\024\r\024 7  032\002\013\r\004\037 002\004 005\032\032\005\004\r\022 033\005 3@73 004\r#\005\006\022\004 005\003 033 \002\033 b\033 \005\016\033 033 \r 016\(\(\031\r 031\b\004\033 035#!\024 b\013\016\003\r 7\035\(\037\037\024  004\b\021\b\031\002\003 003\r\022\016#\033\b\005\006 002\032\032\031\b\r\004 033\005 033 \r 017\002\006\022\005\021\t\017\001 020\(\003\b\022 004\033\003\002\033\r\013\020\024 023 \b\004 H H H H H H H b b b b b b b H H H H H H H b b b b b b b H H H H H H H b b b b b b b 013\t\034\r\b 013\t\034\r\b!&\027 013\t\034\r\b!1\017\006\006\034\026 1\017\006\006\034\026 031\002\003\013\r m user 002\006\022 004\027\r\\r\022 005\033 \r\003\\r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 002\006 b\004\004\016\r 005\033 \r\003\\r r\003\020 031\002\003\013\r p 005\033 \r\003\\r 001\002\003\004\005\006 b 034\006 \r\021\021\006\013\032\006\032 005\006 \002+\006 004 \005\\004 033 \002\033 033 \r 016\(\(\031\r 031\b\004\033 r\016\003\b\004\033\b b\004 r\003\020 r!!\r#\033\b%\r b\006 003\r\t 022\016#\b\006\013 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033\024 b\013\016\003\r 1\035\(\037 004 \005\\004 033 \002\033 r%\r\006 033 \005\016\013 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r b\004 004\b\013\006\b'#\002\006\033\031\020 003\r\022\016#\r\022 033 \r 016\002\031\b\033\020 005 033 \r 036\n\n\030 032\003\005\t 022\016#\r\022 020 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 b\004 006\005\033 005\021\032\003\005\021\b\004\r\022 004\b\013\006\b!\t b#\002\006\033\031\020\024 016\003\033 \r\003\021\005\003\r r%\r\006 033 \005\016\013 033 \r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 016\004\r\022 022\016\003\b\006\013 004\r\013\021\r\006\033\002\033\b\005\006 b\004 022\b!!\r\003\r\006\033 003\005\021 033 \r 005\006\r 016\004\r\022 002\033 016\r\003\020 r,\r#\016\033\b\005\006 033\b\021\r 033 \r 004\032\r\r\022\016\032 005!!\r\003\r\022 020 033 \r 036\n\n\030 b\004 004\033\b\031\031 004\b\013\006\b'#\002\006\033\024 004 r,\032\r#\033\r\022 033 \r 031\005\006\013\r\003 033 \r 016\(\(\031\r 031\b\004\033 033 \r b\013 \r\003 b\004 033 \r 016\002\031\b\033\020 005 033 \r 036\n\n\030 002\006\022 033 \016\004 033 \r 004\032\r\r\022\016\032\024 5\036,\036 002\025\b\b\013\017\026\004 005 017\006\020\r\b\b\006\t\034\006\034 017\006\020\f\016\006 8\006 004\016\021 r 002%\r 032\003\005%\b\022\r\022 r,\033\r\006\004\b%\r r,\032\r\003\b\021\r\006\033\002\031 003\r\004\016\031\033\004 r%\002\031\016\002\033\b\006\013 033 \r 002\003\b\005\016\004 032\003\005\032\005\004\r\022 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\006\022 r\016\003\b\004\033\b#\004\024 b\013\016\003\r 2 004 \005\\004 002 003\r#\b\032\r r 003\r#\005\021\021\r\006\022 005\003 022\r#\b\022\b\006\013 005\006 b 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021 033\005 016\004\r 005\003 002\003\b\005\016\004 027\b\006\022\004 005 002\032\032\031\b#\002\033\b\005\006\004\024 b\003\004\033 b 033 \r 002\032\032\031\b#\002\033\b\005\006 002\006 002!!\005\003\022 002 031\005\033 005 004\032\002#\r 005\003 033 \r 036\n\n\030 035\b\024\r\024 m user b\004 031\002\003\013\r\037 002\006\022 033 \r 022\002\033\002 b\004 004\027\r\\r\022 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 b b\004 033 \r 004\b\021\032\031\r\004\033 b\004 004\016!'#\b\r\006\033 005\003 004\r\013\021\r\006\033\002\033\b\005\006\024 036\033 \r\003 b 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 b\004 006\005\033 002\006 b\004\004\016\r 002\033 002\031\031 033 \r 9\003\r\r\022\020 002\031\t 013\005\003\b\033 \021 b\033 033 \r 016\(\(\031\r 031\b\004\033 b\004 033 \r 005\b#\r\024 026\005\\r%\r\003 b 033 \r 006\016\021\(\r\003 005 b\006\b\033\b\002\031 032\002\013\r\004 p b\004 031\002\003\013\r 033 \r\006  003\r#\005\021\021\r\006\022 r\b\033 \r\003 033 \r 017\002\006\022\005\021\t\017\001 005\003 033 \r 017\002\006\022\005\021\t9\003\r\r\022\020 002\031\013\005\003\b\033 \021 b\033 033 \r 016\(\(\031\r 031\b\004\033\024 7\036 f\031\020\025\031\031\f\r\t 8\006 032\003\r%\b\005\016\004 004\r#\033\b\005\006\004 r 002%\r 004 \005\\006 005 033 \r 036\n\n\030 r\031\032\004 033\005 b\021\032\003\005%\r 033 \r r!'#\b\r\006#\020 005 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 035\002\006 b\006\004\033\002\006#\r 005 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021\004\037\024 D\r\b\006\013 002 013\r\006\r\003\b 022\002\033\002 004\033\003\016#\033\016\003\r 033 \r 036\n\n\030 002\006 r r"\016\002\031\031\020 002\032\032\031\b#\002\(\031\r 033\005 033 \r 022\b\004#\005%\r\003\020 005 004\r"\016\r\006\033\b\002\031 032\002\033\033\r\003\006\004 r\032\b\004\005\022\r\004 005\006\004\033\003\002\b\006\r\022 003\r\t 016\r\006\033 004\r\033\004 r\033#\024 004 021\r\006\033\b\005\006\r\022 b\006 n\r#\033\b\005\006  033 \r 036\n\n\030 033\r# \t 006\b"\016\r b\004 003\002\033 \r\003 022\b!!\r\003\r\006\033 003\005\021 033 \r A\026 002\031\013\005\003\b\033 \021 370 002\006\022 033 \r 002\003\033\b\033\b\005\006 002\031\013\005\003\b\033 \021 320\024 D\016\033 002\006 005\(\004\r\003%\002\006\033 003\r\002\022\r\003 021\002\020 005\006\022\r\003 r\033 \r\003 033 \r 036\n\n\030 032\003\005%\b\022\r\004 r\033\033\r\003 032\003\016\006\b\006\013 033 \002\006 033 \r 033\\005 r,\b\004\033\b\006\013 002\031\013\005\003\b\033 \021\004\024 026\005\\r%\r\003 033 \b\004 b\004 033 \r 003\005\006\013 016\r\004\t 033\b\005\006 033\005 002\004\027 r#\002\016\004\r 033 \r 036\n\n\030 002\006 r 021\002\022\r 033\005 005\003\027 b\006 032\f\005 021\005\032\n\006\f\005  033 \r 033\\005 002\031\013\005\003\b\033 \021\004\024 017\r#\002\031\031 033 \002\033 033 \r A\026 002\031\013\005\003\b\033 \021 002\004 \r\004 002 k t\b\033\r\021\004\r\033 035\r\024\013\024 k 2 037 033\005 002 016#\027\r\033 b 021\002\020 r%\r\006\033\016\002\031\031\020 r 032\003\016\006\r\022 022\016\r 033\005 002\006 b\006\004\016!'#\b\r\006\033 006\016\021\(\r\003 005 b\033\r\021\004\r\033\004 r\b\006\013 002\004 \r\022 b\006\033\005 004\016 002 016#\027\r\033\024 026\005\\r%\r\003 b 002\006 036\n\n\030 b\004 016\004\r\022 004\b\021\016\031\033\002\006\r\005\016\004\031\020 033 \r\006 027\006\005\\006 b\006!\003\r"\016\r\006\033 k t\b\033\r\021\004\r\033\004 002\003\r 006\005\033 013\r\006\r\003\002\033\r\022 b\006 033 \r 003\004\033 032\031\002#\r\024 8\033\r\021\004\r\033\004 033 \002\033 032\002\004\004 033 \003\005\016\013 033 \r 032\003\016\006\b\006\013 020 033 \r 036\n\n\030 002\006 006\005 r 016\003\033 \r\003 032\003\016\006\r\022 020 033 \r A\026 002\031\013\005\003\b\033 \021\024  032\003\r\t 031\b\021\b\006\002\003\020 003\r\004\016\031\033 032\003\r\004\r\006\033\r\022 b\006 033 \r 005\031\031\005\\013 033\002\(\031\r 004 \005\\004 033 \r Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


002\022\022\b\033\b\005\006\002\031 r\006\r'\033 003\005\016\013 \033 020 002\006 036\n\n\030 035#\005\006\004\033\003\016#\033\r\022 016\004\b\006\013 033 \r 017\002\006\022\005\021\t\017\001 002\031\013\005\003\b\033 \021 b\033 m J 5 004\r\013\021\r\006\033\004\037 033\005 033 \r A\026 002\031\013\005\003\b\033 \021 b\033  214 016#\027\r\033\004\024 031\013\005\003\b\033 \021\004 017\016\006\033\b\021\r 025\005\024 005 C 2 A\026 b\033 \005\016\033 033 \r 036\n\n\030 4  01 006 0  13 004 6 A\026 b\033 \033 \r 036\n\n\030 1  96 006 0  01 004 35 026\r\003\r r\006 033 \r A\026 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 b\006 005\006*\016\006#\033\b\005\006 b\033 033 \r 036\n\n\030 033 \r 006\016\021\(\r\003 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 035 C 2 037 b\004 002\(\005\016\033 002\031 002\006\022 033 \r 004\032\r\r\022\016\032 b\004 002\(\005\016\033  033\b\021\r\004 035\ \r\006 005\021\032\002\003\r\022 033\005 033 \r A\026 002\031\013\005\003\b\033 \021 b\033 \005\016\033 033 \r 036\n\n\030\037\024 n\b\021\b\031\002\003\031\020 033 \r 036\n\n\030 002\006 003\b\006\013 002\022\022\b\033\b\005\006\002\031 r\006\r'\033\004 033\005 004\005\021\r 005\033 \r\003 002\031\013\005\003\b\033 \021\004\024 005\003 031\002#\027 005 004\032\002#\r  003\b\rL\020 022\b\004\t 016\004\004 r\031\005 005 033 \r 036\n\n\030 002\006 r 002\032\032\031\b#\002\(\031\r 033\005 033 \r 002\003\033\b\033\b\005\006 002\031\013\005\003\b\033 \021 320 002\006\022 033\005 033 \r A\r\032\033 ?\003\005*\r#\033 002\031\013\005\003\b\033 \021 30\024 005\003 033 \r 002\003\033\b\033\b\005\006 002\031\013\005\003\b\033 \021 b 002\006 036\n\n\030 b\004 016\b\031\033 005\003 r\002 032\002\003\033\b\033\b\005\006 033 \r r,\r#\016\033\b\005\006 033\b\021\r 005\003 r\002 032\002\003\033\b\033\b\005\006 b\031\031 r 004\b\013\t 006\b'#\002\006\033\031\020 003\r\022\016#\r\022 r#\002\016\004\r 027\006\005 031\005#\002\031 b\006!\003\r"\016\r\006\033 b\033\r\021\004\r\033\004 002\003\r 032\003\016\006\r\022 020 033 \r 036\n\n\030\024 023\005 b\021\032\003\005%\r 033 \r 032\r\003!\005\003\021\002\006#\r 016\003\t 033 \r\003 b 033 \r 036\n\n\030\004 005\003 002\031\031 033 \r 032\002\003\033\b\033\b\005\006\004 002\003\r 002%\002\b\031\002\(\031\r 033 \r\006 021\002\006\020 005 033 \r 013\031\005\(\002\031 002\006\022\b\022\002\033\r\004 035\b\024\r\024 b\033\r\021\004\r\033\004 033 \002\033 002\003\r 031\005#\002\031\031\020 003\r"\016\r\006\033 b\006 002 032\002\003\033\b\033\b\005\006\037 b 002\003\r 027\006\005 033\005 r 013\031\005\(\002\031\031\020 b\006\t 003\r"\016\r\006\033 b\033 \003\r\004\032\r#\033 033\005 033 \r 036\n\n\030\004 002\006 b\006 002#\033 r 032\003\016\006\r\022\024 017\r#\r\006\033\031\020 002 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021 002\031\031\r\022 A\r\032\033 \t 003\005*\r#\033 002\004 032\003\005\032\005\004\r\022 033\005 013\r\006\r\003\002\033\r 031\005\006\013 032\002\033\033\r\003\006\004 020 016\004\b\006\013 022\r\032\033 \t'\003\004\033 004\r\002\003 005\006 002 031\r,\b#\005\013\003\002\032 \b 033\003\r\r 005 b\033\r\021\004\r\033\004\024 030\005\003\r 032\003\r#\b\004\r\031\020 002\033 r\002 004\033\r\032 033 \r 002\031\013\005\003\b\033 \021 013\r\006\r\003\002\033\r\004 032\005\004\004\b\(\031\r 003\r\t 016\r\006\033 031\r,\b#\005\013\003\002\032 \b r,\033\r\006\004\b\005\006\004 035\b\024\r\024 002\006\022\b\022\002\033\r\004\037 005 002 033\003\r\r 006\005\022\r 002\006\022 033\r\004\033\004 005\003 003\r"\016\r\006#\020\024 8 002\006 036\n\n\030 b\004 016\004\r\022 004\b\021\016\031\t 033\002\006\r\005\016\004\031\020 033 \r\006 027\006\005\\006 b\006!\003\r"\016\r\006\033 002\006\022\b\022\002\033\r\004 002\006 r 032\003\016\006\r\022 r!\005\003\r 033 \r 003\r"\016\r\006#\020 005\016\006\033\b\006\013\024 8\036 027\r\t\020$\025\031\f\r\t\031 8\006 033 \b\004 032\002\032\r\003 r 032\003\005\032\005\004\r\022 002 031\b\013 \033\t\\r\b\013 \033 004\033\003\016#\033\016\003\r 002\031\031\r\022 005\032\033\b\021\b\034\r\022 004\r\013\021\r\006\033 004\016\032\032\005\003\033 021\002\032 035\036\n\n\030\037\024 8\006 002\022\022\b\033\b\005\006 033\005 b\021\t 032\003\005%\b\006\013 033 \r 032\003\016\006\b\006\013 b\006 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021\004 b\033 002\031\004\005 032\003\005%\b\022\r\004 022\b\003\r#\033 b\006!\005\003\021\002\033\b\005\006 002\(\005\016\033 033 \r 002\003\b\002\(\b\031\b\033\020 005 003\r"\016\r\006\t b\r\004 b\006 022\b!!\r\003\r\006\033 004\r\013\021\r\006\033\004 005 033 \r 033\003\002\006\004\002#\033\b\005\006\004\024 H\006\031\b\027\r 021\002\006\020 002\031\013\005\003\b\033 \021\004 b 002\006\006\005\033 002\006\022\031\r 004\027\r\\r\022 022\002\033\002 033 \r 004\033\003\r\006\013\033 005 033 \r 036\n\n\030 b\004 033\005 r,\032\031\005\b\033 033 \r 002\003\b\002\(\b\031\b\033\020\024 001\005\006#\r\003\006\b\006\013 033 \r 036\n\n\030 r 004\033\016\022\b\r\022 033\\005 021\002\b\006 032\003\005\(\031\r\021\004 035\b\037 033 \r 021\b\006\b\021\016\021 006\016\021\(\r\003 005 004\r\013\021\r\006\033\004 005\003 002\006 036\n\n\030 033\005 b\006#\016\003 006\005 031\005\004\004 b\006 002##\016\t 003\002#\020 035\033 \r 004\r\013\021\r\006\033 021\b\006\b\021\b\034\002\033\b\005\006 032\003\005\(\031\r\021\037 002\006\022 035\b\b\037 033 \r r\004\033 005\021\032\005\004\b\033\b\005\006 005 033 \r 004\r\013\021\r\006\033\004 013\b%\r\006 002 016\004\r\003\t\022\r\033\r\003\021\b\006\r\022 006\016\021\t r\003 005 004\r\013\021\r\006\033\004 035\033 \r 005\006\004\033\003\002\b\006\r\022 004\r\013\021\r\006\033\002\033\b\005\006 032\003\005\(\031\r\021\037\024 005\003 033 \r 003\004\033 032\003\005\(\031\r\021 r 032\003\005%\b\022\r\022 002 033 \005\003\005\016\013 002\006\002\031\020\004\b\004 002\006\022 002\003\022\006\r\004\004 003\r\004\016\031\033\004 004 \005\\b\006\013 033 \002\033 006\005 031\005\004\004 b\006 002##\016\003\002#\020 016\004\b\006\013 033 \r 036\n\n\030 003\r"\016\b\003\r\004 033\005\005 021\002\006\020 004\r\013\021\r\006\033\004 b\006 013\r\006\r\003\002\031\024 005\003 033 \r 004\r#\005\006\022 032\003\005\(\031\r\021 r 022\r%\r\031\005\032\r\022 033 \r r\016\003\b\004\033\b 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\031\031\r\022 033 \r 017\002\006\022\005\021 017\001 002\006\022 9\003\r\r\022\020 002\031\013\005\003\b\033 \021\004\024 023\005 016\003\033 \r\003 003\r\022\016#\r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 r 032\003\005\032\005\004\r\022 005\032\033\b\021\b\034\002\t 033\b\005\006\004 033 \002\033 016\004\r 002 016\(\(\031\r 031\b\004\033 002\006\022 003\016\006 033 \r 002\031\013\005\003\b\033 \021\004 b\006 002 020\(\003\b\022 002\004 \b\005\006\024 036\016\003 r,\032\r\003\b\021\r\006\033\002\031 003\r\004\016\031\033\004 002\003\r 004\033\003\005\006\013 b\006\022\b#\002\033\b\006\013 033 \002\033 005\003 002 004\021\002\031\031 036\n\n\030 035\r\024\013\024 024 021\r\013\002\(\020\033\r\004\037 033 \r 004\032\r\r\022\016\032 002\006 r r\003\020 004\b\013\006\b'#\002\006\033 035\r\024\013\024 7 033\b\021\r\004\037 020\r\033 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 b\004 004\021\002\031\031 035\r\024\013\024 3 004\r#\005\006\022\004 005\003 7 021\b\031\031\b\005\006 033\003\002\006\004\002#\033\b\005\006\004\037\024 r 005\006#\031\016\022\r\022 020 032\003\r\004\r\006\033\b\006\013 002 003\r#\005\021\021\r\006\022\r\022 003\r#\b\032\r 005\003 002\003\b\005\016\004 b\003#\016\021\004\033\002\006#\r\004\024 b\031\r 005\016\003 r,\032\r\003\b\021\r\006\033\004 r\003\r 002\004\r\022 005\006 006\022\t b\006\013 003\r"\016\r\006\033 004\r\033\004 016\004\b\006\013 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 b\033 b\004 b\021\032\005\003\t 033\002\006\033 033\005 003\r\021\r\021\(\r\003 033 \r 013\r\006\r\003\002\031\b\033\020 005 033 \r 036\n\n\030 8\033 b\004 002\032\032\031\b#\002\t 031\r 033\005 021\002\006\020 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021\004 035\021\002\006\020 005 b 002\003\r 031\b\004\033\r\022 b\006 033 \r b\006\033\003\005\022\016#\033\b\005\006\037\024 r r,\032\r#\033 033 \r 036\n\n\030 033\005 r r"\016\002\031\031\020 r!!\r#\033\b%\r 005\003 033 \005\004\r 002\031\013\005\003\b\033 \021\004\024 0060\006\017\006\t\020\006\031 30 017\024\001\024 013\002\003\\002\031 001\024\001\024 013\013\002\003\\002\031 002\006\022 M\024M\024M\024 003\002\004\002\022\024 A\r\032\033 '\003\004\033 013\r\006\t r\003\002\033\b\005\006 005 031\005\006\013 032\002\033\033\r\003\006\004\024 8\006 b\f\032  025  032 3@4N334\024 0 017\024 013\003\002\\002\031 023\024 8\021\b\r\031\b\006\004\027\b 002\006\022 024 n\\002\021\b\024 030\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004 r\033\\r\r\006 004\r\033\004 005 b\033\r\021\004 b\006 031\002\003\013\r 022\002\033\002\(\002\004\r\004\024 8\006 b\f\032 9 035>>\026  032\032 2N.31\024 0 017\024 013\003\002\\002\031 026\024 030\002\006\006\b\031\002 r\033 002\031\024 002\004\033 022\b\004#\005%\r\003\020 005 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024 034\007\024\005\032\003\t 006\005 005\f1\020\003\034!\003 006\t\032\f\007\003\b\013 024\005\034 024\n\024 030\006\005\006\005  032 2N/.4\024 8;\0308\023 003\r\004\004 3661\024 50 017\024 013\003\002\\002\031 002\006\022 017\024 n\003\b\027\002\006\033\024 030\b\006\b\006\013 004\r"\016\r\006\033\b\002\031 032\002\033\033\r\003\006\004\024 8\006 b\f\032  035>>A  032 N35\024 70 017\024O\024 D\002\020\002\003\022\005\024 E!'#\b\r\006\033\031\020 021\b\006\b\006\013 031\005\006\013 032\002\033\033\r\003\006\004 003\005\021 022\002\033\002\(\002\004\r\004\024 8\006 b\f\032 9 035>>B  032 47N6/\024 10 n\024 D\003\b\006 017\024 030\005\033\\002\006\b 002\006\022 001\024 n\b\031%\r\003\004\033\r\b\006\024 D\r\020\005\006\022 021\002\003\027\r\033 002\004\027\r\033 9\r\006\r\003\002\031\b\034\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004 033\005 005\003\003\r\031\002\033\b\005\006\004\024 8\006 b\f\032 9\6\030 035>>C  032 17N.21\024 20 9\024 9\003\002 \006\r f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 002\006\022 P\024 002\006\013\024 E!'#\b\r\006\033 021\b\006\b\006\013 005 005\006\004\033\003\002\b\006\r\022 005\003\003\r\031\002\033\r\022 004\r\033\004\024 8\006 b\f\032 017 025  032 73.N7.3\024 40 O\024 026\002\006 O\024 r\b 002\006\022 K\024 K\b\006\024 030\b\006\b\006\013 003\r"\016\r\006\033 032\002\033\033\r\003\006\004 b\033 \005\016\033 002\006\022\b\t 022\002\033\r 013\r\006\r\003\002\033\b\005\006\024 8\006 b\f\032 9 025  032 3N3.\024 60 001\024 026\b\022\(\r\003\024 036\006\031\b\006\r 002\004\004\005#\b\002\033\b\005\006 003\016\031\r 021\b\006\b\006\013\024 8\006 b\f\032 9 035  032\032 357N371\024 3@0 f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 001\024\007\024\t\n\024 f\r\016\006\013 002\006\022 017\024\023\024 025\013\024 023 \r 004\r\013\021\r\006\033 004\016\032\t 032\005\003\033 021\002\032 n#\002\031\002\(\031\r 021\b\006\b\006\013 005 003\r"\016\r\006\033 b\033\r\021\004\r\033\004\024 9 020\f b\024\n\006\f\005\t   035.\037 032\032 3N.2 A\r#\024 024 330 f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 017\024 025\013 r\033 002\031\024 036\032\033\b\021\b\034\002\033\b\005\006 005 005\006\004\033\003\002\b\006\r\022 003\r\t 016\r\006\033 004\r\033 016\r\003\b\r\004 002\003\b\002\(\031\r 005\006\004\033\003\002\b\006\033\004\024 8\006 b\f\032 9\6\030 035  032 372N314\024 3.0 001\024\007\024\t\n\024 f\r\016\006\013 017\024\023\024 025\013 002\006\022 026\024 030\002\006\006\b\031\002\024 023 \r 005\032\033\b\021\b\034\r\022 004\r\013\021\r\006\033 004\016\032\032\005\003\033 021\002\032 005\003 033 \r 021\b\006\b\006\013 005 003\r"\016\r\006\033 032\002\033\033\r\003\006\004\024 023\r# \006\b#\002\031 017\r\t 032\005\003\033 001\n 023\017\t.@@3\t34 023 \r H\006\b%\r\003\004\b\033\020 005 D\003\b\033\b\004 001\005\031\016\021\(\b\002 001\002\006\002\022\002 3\024 3/0 026\024 030\002\006\006\b\031\002 026\024 023\005\b%\005\006\r\006 002\006\022 0248\024 M\r\003\027\002\021\005\024 A\b\004#\005%\r\003\020 005 003\r"\016\r\006\033 r\032\b\004\005\022\r\004 b\006 r%\r\006\033 004\r"\016\r\006#\r\004\024 024\n\024 030\006\005\006\005 024\005\034 005\f1\020\003\034!\003 006\t\032\f\007 003\b\013  035 035/\037 032\032 76N.46 n\r\032\033\024 3662\024 350 017\024\023\024 025\013 f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 r\033 002\031\024 E,\032\031\005\003\002\033\005\003\020 021\b\006\b\006\013 002\006\022 032\003\016\006\b\006\013 005\032\033\b\021\b\034\002\033\b\005\006\004 005 005\006\004\033\003\002\b\006\r\022 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024 8\006 b\f\032 9\6\030 035>>B  032 3/N.5\024 370 O\024\n\024 002\003\027 030\024\t\n\024 001 \r\006 002\006\022 024\n\024 K\016\024 H\004\b\006\013 002 002\004 \t\(\002\004\r\022 021\r\033 \005\022  033\003\002\006\004\002#\033\b\005\006 033\003\b\021\021\b\006\013 005\003 021\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024  001  9 0357\037 032\032 43/N4.7 n\r\032\033\024;\036#\033\024 3662\024 310 025\024 002\004"\016\b\r\003 K\024 D\002\004\033\b\022\r r\033 002\031\024 A\b\004#\005%\r\003\b\006\013 003\r"\016\r\006\033 031\005\004\r\022 b\033\r\021\004\r\033\004 005\003 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024 8\006 b\f\032 017:\001 035  032 64N531\024 320 024 n\002%\002\004\r\003\r E\024 036\021\b\r#\b\006\004\027\b 002\006\022 n\024 025\002%\002\033 \r\024 006 r!'#\b\r\006\033 002\031\013\005\t 003\b\033 \021 005\003 021\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004 b\006 031\002\003\013\r 022\002\033\002\(\002\004\r\004\024 8\006 b\f\032 D:\016 035>>A  032 5/.N55/\024 340 001\024 n\b\031%\r\003\004\033\r\b\006 n\024 D\003\b\006 r\033 002\031\024 n#\002\031\002\(\031\r 033\r# \006\b"\016\r\004 005\003 021\b\006\b\006\013 002\016\004\002\031 004\033\003\016#\033\016\003\r\004\024 8\006 b\f\032 031D:\016 035>>B  032 765N1@7\024 360 017\024 n\003\b\027\002\006\033 Q\024 M\016 002\006\022 017\024 013\003\002\\002\031\024 030\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006\004 003\016\031\r\004 b\033 b\033\r\021 005\006\004\033\003\002\b\006\033\004\024 8\006 b\f\032  035>>C  032 12N2/\024 0 030\024O\024 R\002\027\b 002\006\022 007\024 9\005\016\022\002\024 002\004\033 r\003\033\b#\002\031 021\b\006\b\006\013 016\004\b\006\013 022\b!!\004\r\033\004\024 023\r# \t 006\b#\002\031 017\r\032\005\003\033 3\t3 017\r\006\004\004\r\031\002\r\003 005\031\020\033\r# \006\b 8\006\004\033\b\033\016\033\r H\n 3\024 30 030\024O\024 R\002\027\b 002\006\022 001\024\tO\024 026\004\b\002\005\024 001\026+\017\030 006 r!'#\b\r\006\033 002\031\013\005\003\b\033 \021 005\003 031\005\004\r\022 002\004\004\005#\b\002\033\b\005\006 003\016\031\r 021\b\006\b\006\013\024 023\r# \006\b#\002\031 017\r\032\005\003\033 66\t3 017\r\006\004\004\r\031\002\r\003 005\031\020\033\r# \006\b 8\006\004\033\b\033\016\033\r H\n 3666\024 Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


expect this optimization to be of greatest bene\336t when the transaction sizes are large r example if our transaction is T 000 f A\000 B 000 C\000 D\000 E g  k 000 3 fan-out 000 2 then all the 3-subsets of T are f ABC,ABD,ABE,ACD,ACE,ADE,BCD,BCE,BDE,CDE g  Figure 2 shows the candidate hash tree C 3  We ave to increment the support of every subset of T contained in C 3  We egin with the subset AB C  and hash to node 11 and process all the itemsets In this downward path from the root we mark nodes 1 4 and 11 as visited We then process subset AD B  and mark node 10 Now consider the subset CDE  We see in this case that node 1 has already been marked and we can preempt the processing at this very stage This approach can r consume a lot of memory r a n fan-out F  for iteration k  e need additional memory of size F k to store the 337ags In the parallel implementation we have to keep a VISITED 336eld for each processor bringing the memory requirement to P\000F k  This can still get very large especially with increasing number of processors In we sho w a mechanism by which further reduces the memory requirement to only k 000F  The approach in the parallel setting yields a total requirement of k 000F 000P  5 Experimental Evaluation Database T I D Total Size T5.I2.D100K 5 2 100,000 2.6MB T10.I4.D100K 10 4 100,000 4.3MB T15.I4.D100K 15 4 100,000 6.2MB T20.I6.D100K 20 6 100,000 7.9MB T10.I6.D400K 10 6 400,000 17.1MB T10.I6.D800K 10 6 800,000 34.6MB T10.I6.D1600K 10 6 1,600,000 69.8MB Table 2 Database properties 5.1 Experimental Setup All the experiments were performed on a 12-node SGI Power Challenge shared-memory multiprocessor Each node is a MIPS processor running at 100MHz There\325s a total of 256MB of main memory The primary cache size is 16 KB 64 bytes cache line size with different instruction and data caches while the secondary cache is 1 B 128 bytes cache line size The databases are stored on an attached 2GB disk All processors run IRIX 5.3 and data is obtained from the disk via an NFS 336le server We used different synthetic databases with size ranging form 3MB to 70MB 2  and are generated using the procedure described in These databases mimic the transactions in a retailing en vironment Each transaction has a unique ID followed by a list of items bought in that transaction The 2 While results in this section are only shown for memory resident databases the concepts and optimization are equally applicable for non memory resident databases In non memory resident programs I/O becomes an important problem Solutions to the I/O problem can be applied in combination with the schemes presented in this paper These solutions are part of future research 11 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


  0 500 1000 1500 2000 2500 0 2 4 6 8 10 12 Number of Large Itemsets Iterations Large Itemset at Support = 0.5 222T5.I2.D100K\222  222T10.I4.D100K\222   222T15.I4.D100K\222   222T20.I6.D100K\222   222T10.I6.D400K\222   222T10.I6.D800K\222   222T10.I6.D1600K\222  Figure 3 Large Itemsets per Iteration data-mining provides information about the set of items generally bought together Table 2 shows the databases used and their properties The number of transactions is denoted as jD j  average transaction size as j T j  and the average maximal potentially large itemset size as j I j  The number of maximal potentially large itemsets j L j 000 2000 and the number of items N 000 1000 We refer the reader to for more detail on the database generation All the e xperiments were performed with a minimum support value of 0.5 and a leaf threshold of 2 i.e max of 2 itemsets per leaf We note that the  improvements shown in all the experiments except where indicated do not take into account initial database reading time since we speci\336cally wanted to measure the effects of the optimizations on the computation Figure 3 shows the number of iterations and the number of large itemsets found for different databases In the following sections all the results are reported for the CCPD parallelization We do not present any results for the PCCD approach since it performs very poorly and results in a speed-down on more than one processor 3  5.2 Aggregate Parallel Performance Table 3 s actual running times for the unoptimized sequential and a naive parallelization of the base algorithm Apriori for 2,4 and 8 processors without any f the techniques descibed in sections 3 and 4 In this section all the graphs showing  improvements are with respect to the data for one processor in table 3 Figure 4 presents the speedups obtained on different databases and different processors for the CCPD parallelization The results presented on CCPD use all the optimization discussed 3 Recall that in the PCCD approach every processor has to read the entire database during each iteration The resulting I/O costs on our system were too prohibitive for this method to be  12 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


Database 1 proc 2 procs 4 procs 8 procs T5.I2.D100K 20 17 12 10 T10.I4.D100K 96 70 51 39 T15.I4.D100K 236 168 111 78 T20.I6.D100K 513 360 238 166 T10.I6.D400K 372 261 165 105 T10.I6.D800K 637 435 267 163 T10.I6.D1600K 1272 860 529 307 Table 3 Naive Parallelization of Apriori seconds   0 2 4 6 8 10 12 0 2 4 6 8 10 12 Speedup Number of Processors CCPD Ideal  T5.I2.D100K.t2   T10.I4.D100K.t2   T15.I4.D100K.t2   T20.I6.D100K.t2   T10.I6.D400K.t2   T10.I6.D800K.t2   T10.I6.D1600K.t2    0 2 4 6 8 10 12 0 2 4 6 8 10 12 Speedup Number of Processors CCPD : With Reading Time Ideal  T5.I2.D100K.t2   T10.I4.D100K.t2   T15.I4.D100K.t2   T20.I6.D100K.t2   T10.I6.D400K.t2   T10.I6.D800K.t2   T10.I6.D1600K.t2  Figure 4 CCPD Speed-up a without reading time b with reading time 13 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


Reading  f Total Time Database Time P 000 1 P 000 2 P 000 4 P 000 8 P 000 12 T5.I2.D100K 9.1s 39.9 43.8 52.6 56.8 59.0 T10.I4.D100K 13.7s 15.6 22.2 29.3 36.6 39.8 T15.I4.D100K 18.9s 8.9 14.0 21.6 29.2 32.8 T20.I6.D100K 24.1s 4.9 8.1 12.8 18.6 22.4 T10.I6.D400K 55.2s 16.8 24.7 36.4 48.0 53.8 T10.I6.D800K 109.0s 19.0 29.8 43.0 56.0 62.9 T10.I6.D1600K 222.0s 19.4 28.6 44.9 59.4 66.4 Table 4 Database Reading Time in section 4 320 computation balancing hash tree balancing and short-circuited subset checking The 336gure on the left presents the speed-up without taking the initial database reading time into account We observe that as the number of transactions increase we get increasing speed-up with a speed-up of more than 8 n 2 processors for the largest database T10.I6.D1600K with 1.6 million transactions r if we were to account for the database reading time then we get speed-up of only 4 n 2 processors The lack of linear speedup can be attributed to false and true sharing for the heap nodes when updating the subset counts and to some extent during the heap generation phase Furthermore since variable length transactions are allowed and the data is distributed along transaction boundaries the workload is not be uniformly balanced Other factors like s contention and i/o contention further reduce the speedup Table 4 shows the total time spent reading the database and the percentage of total time this constitutes on different number of processors The results indicate that on 12 processors up to 60 of the time can be spent just on I/O This suggest a great need for parallel I/O techniques for effective parallelization of data mining applications since by its very nature data mining algorithms must operate on large amounts of data 5.3 Computation and Hash Tree Balancing Figure 5 shows the improvement in the performance obtained by applying the computation balancing optimization discussed in section 3.1.2 and the hash tree balancing optimization described in section 4.1 The 336gure shows the  improvement r a run on the same number of processors without any optimizations see Table 3 Results are presented for different databases and on different number of processors We 336rst consider only the computation balancing optimization COMP using the multiple equivalence classes algorithm As expected this doesn\325t improve the execution time for the uni-processor case as there is nothing to balance r it is very effective on multiple processors We get an improvement of around 20 on 8 processors The second column for all processors shows the bene\336t of just balancing the hash tree TREE using our bitonic hashing the unoptimized version uses the simple mod d hash function Hash tree balancing by itself is an extremely effective optimization It s the performance by about 30 n n uni-processors On smaller databases and 8 processors r t s not as 14 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


