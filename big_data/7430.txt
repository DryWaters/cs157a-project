An Efficient Algorithm For Mining Top-Rank-K Frequent Patterns From Uncertain Databases Neha Goyal Department Of Computer Engineering National Institute of Technology Kurukshetra, Haryana, India nehagoyal0706@gmail.com S K Jain Department Of Computer Engineering National Institute of Technology Kurukshetra, Haryana, India skj_nith@yahoo.com   Abstract The analysis and management of uncertain data has gained a lot of importance in the past few years because of their importance in a wide variety of applications such as sensor network and privacy preserving data mining applications. Many algorithms have been proposed to mine the frequent pattern over uncertain database. However the existing algorithms for uncertain data generate a large no. of candidate patterns and required to define an appropriate user defined threshold which is a challenging task for users. In this paper, we propose a new algorithm known as UFAE \(uncertain filtering and extending algorithm to mine top-rank-k frequent itemset or patterns Mining only top-rank-k frequent pattern greatly decrease the number of candidate pattern generated so reduce the mining time. Many algorithms exist to mine top-rank-k frequent itemset in case of precise data but none in case of uncertain database Experiments are performed to evaluate the performance of the algorithm on various dataset KeywordsÑData mining, frequent pattern, uncertain database, existential probability, expected support, top-rank-k frequent pattern I   I NTRODUCTION  The most important subfield of data mining is frequent pattern mining r o m m a ny y e ars Data m i n i ng ta sk is to di sco ver interesting, unexpected and useful pattern in a large database Frequent pattern are the building block for finding associations rules that discovers the interesting relationship between frequent items in a database which has important applications in market basket analysis. A remarkable progress has been made in this field and a number of effective algorithms have been designed to mines the frequently occurring patterns in a database. Frequent patterns are the sequences or substructures that exist in the transactional database equal to or greater than a threshold defined by the user. An important aspect for consideration in frequent pattern mining is whether the data to be mine is certain or uncertain Handling precise data is comparatively much easier than uncertain data because there is lot of challenges that need to face in management of uncertain data   In  p r ecise data n o  probability is assigned with the data and mining such type of data is easier. However in uncertain data there exists a probability value associated with each item in database. The concept of frequent pattern mining from probabilistic database has gained a lot of importance because the data generated by a number of applications is uncertain such as sensor network From the first introduction of frequent pattern mining from uncertain data many algorithm [2as been propos ed to  find the frequent pattern effectively In general, the minimum support threshold defined by the user is used to generate the complete and accurate set of frequent pattern from uncertain data. However this framework has two problems. First setting the minimum support threshold is difficult because user doesnêt know this threshold in advance. A too small value of this threshold generates a large number of candidate patterns while too big value generates only a small number of candidate patterns. So both the condition is undesired for user. Second the pattern generated is very large in number however in real life only small number of pattern needed The above mentioned two problems signify that it is advantageous to change the problem of frequent pattern mining to mining top-rank-k frequent pattern from uncertain data where k indicate the required number of frequent patterns that need to be mined. Top-k frequent itemset mining needs not to specify any minimum support threshold value. Paper  died th e si m i lar m i n i n g proble m f r o m un certai n data stream using the sliding window approach Mining the top-rank-k frequent itemset from precise data has been studied efficiently and accurately in literature. Earlier study in top-rank-k frequent itemset mining only deal with precise data. A number of algorithms already exist in literature to mine the top-k frequent itemset or pattern for certain data FA K 13], N T K 14], iN T k 15] are th e w ell known algorithm in precise database. However in today era the most of the application we deal with are uncertain in nature such as sensor network management and mobile object tracking. Now days these applications has gained a lot of importance This paper proposed a new algorithm known as çuncertain filtering and extendingé to mine the top-rank-k frequent pattern for uncertain data and extended from the FA  algorithm for precise data.  Top-rank-k patterns are the pattern having rank less than K. The algorithm need not to specify any user defined minimum support threshold which is dilemma for user. The algorithm gives accurate result and better performance compared to frequent pattern mining algorithms 324 978-1-5090-2399-8/16/$31.00 c  2016 IEEE 


The rest of the paper is categorized as follows section II give the preliminary for the problem includes basic definition and some properties. Section III describes the proposed algorithm for top-rank-k frequent itemset mining from uncertain data. The algorithm adopts the çfiltering and extendingé approach for efficiently mining top-rank-k frequent pattern. Section IV gives the experimental results of the algorithm. Section V gives the conclusion and point out some scope for future research  II  PRELIMINARIES  In this section, we first give some important basic notion of top-rank-k frequent pattern from uncertain data. Then we give the problem of top-rank-k frequent pattern mining from uncertain data and some related properties Let \(i\m in the transactional database consists of m domain items I= {i 1 i 2 i m ii\A transaction database DB= {T 1 T 2  T n consist of n transaction and has an individual identifier and consists of set of items and \(iii\X = {x 1 x 2 x k be a pattern of k-itemset, where X Item and 1 k  m A  Basic definition 1  Definition 1\(Existential Probability of item Every item in x i in a transactional database is attached with a probability value known as existential probability P \(x i t j  which represent the probability of the presence of x i in t j   0 < P \(x i t j  A database consists of n transaction and each t j   The database projected by X consists of every transaction that contains X 2  Definition 2\(Expected Support of a itemset The expSup\(X, t j pected support of a pattern X in a transaction t j is thus the multiplication of the probabilities value associated with item x within X when the items are independent expSup\(X, t j  1 Where P\(x, t j e probability with which x exist in t j  The expSup\(X\ pattern X in the whole database is the summation of expSup\(X, tj\er all n transactions in the probabilistic database expSup\(X 2 3  Definition 3\(The rank of a pattern Rank of a pattern X is characterized as R x   Expsup A  A  Expsup x   where |N denotes number of element in N  4  Definition 4\(Top-rank-k frequent pattern Pattern X is said to be top-rank-k frequent pattern if and only if R x is less than or equal to K i.e. R x K where k is threshold B  Some properties 1  Property 1\(anti-monotonic property If any pattern X is not included in top-k frequent pattern then any pattern Y that includes X i.e. superset of pattern X cannot be a top-k frequent pattern Property 1 shows the basic UApriori property and still preserved in top-rank-k frequent pattern mining 2  Property 2 Given an uncertain transaction database DB, a threshold value k, and set of pattern PS 2I, 2I is the power set of I\en for any pattern X PS\not be a top-k frequent itemset in DB if rank of X i.e. R\(X, PS\more than k UFAE algorithm greatly takes the advantage of this property 2 to compact the size of searching space in finding top-k frequent patterns from uncertain database.Mining toprank-k frequent patterns C  UFAE Algorithm Top-k frequent patterns are the pattern having rank no greater than k. Length of an itemset or pattern is defined as the number of items contained in the pattern and is denoted by Lpattern having L length. UFAE algorithm is extended from FA  f o r u n c ert ain case  UFAE uncertain filtering and extending uses the same approach as used by the UApriori w h ich i s itera ti v e in nature. UFAE algorithm uses the L-pattern to generate \(L+1 pattern which is the basic property of UApriori algorithm UFAE maintains a table known as top-rank-k table to store the entire top-k frequent pattern. Below is the procedure how UFAE algorithm efficiently mines the top-rank-k frequent pattern from uncertain database 1  Firstly  scan the uncertain transaction database 2  Gather the set of frequent 1-pattern with their expected support using equation \(2\.e. top-rank-k frequent 1pattern 3  Then these top-rank-k frequent 1-patterns are inserted into the top-rank-k table. Top-rank-k table have three fields, \(1\nk of pattern \(2\ patterns \(3 expected support of patterns. Patterns having the same expected supported are placed in single tuple with same rank value. Tuples in the top-rank-k table should be sorted in expected support descending order not be greater than the k value 4  If number of tuple in the top-rank-k table is greater than k , then delete the tuples trailing the kth tuple 5  Now use the 1-pattern from the top-rank-k table to produce candidate 2-patterns 6  Scan the uncertain database again to calculate the expected support of candidate 2-pattern using equation 1 7  If the expected supports of any candidate 2-patterns are greater than the expected support of any candidate 1pattern i.e. the patterns in top-rank-k table, then the candidate 2-pattern is inserted into the top-rank-k table 8  After inserting candidate 2-pattern assure that number of tuples in top-rank-k table is no greater than k. if they are more than k, delete the tuples trailing the kth tuple 9  Repeat the step 5-8 by using l-pattrns from the top-rankk table to produce top-rank-k \(L+1\- patterns 2nd International Conference on Applied and Theoretical Computing and Communication Technology iCATccT 325 


 Given below the proposed UFAE algorithm for mining toprank-k frequent pattern from uncertain database  Algorithm UFAE Input An Uncertain Transactional database and threshold K Output A top-rank-k table consists of complete set of toprank-k frequent pattern Method Tab k      I   For each T                     If \(i < number of items in list Create a new tuple Tuple. add item Tuple. Set expected support Tuple. Set rank Insert tuple as the last tuple Tab. Add tuple Rank Sort the candidates in expected support descending order Rank=1; i=-1 While \(rank != k i if \(i < number of item in list if \(rank == 1 Sort the item and create a new tuple tuple.addPattern\(item tuple.setRank\(rank Set support by expected support tab.addTuple\(tuple rank elseif \(expectedsupport==support add the item in list else create new tuple tuple.addPattern\(item tuple.setRank\(rank tuple.setSupport\(ExpectedSupport tab.addTuple\(tuple rank  Procedure Candidate_gen TP j-1  C k   For each pattern p u TP j-1  For each pattern p v TP j-1 p v p u  If \(p u  p v 1 p u 2   p v 2 p u j-2  p v j-2 p u j-1  p v j-1 en  c = p u 1 u 2  p u j-2 p u j-1 v j-1 C k C k c Return C k   Procedure SupportCalculationforCandidate \(candidate C  For each transaction do For each candidate do ExpSup= 0; \(initialize expected support to zero For each item in candidate For each item in transaction If \(Expsup==0 Expsup = item.get probability Else Expsup *= item.get probability Increase support by expected support  D  Case study with an example Consider the following table 1 uncertain database to demonstrate the proposed algorithm. An existential probability is associated with each item between 0 and 1 and threshold is 5 Table 1:- An uncertain database  TID  Content of each transaction  T1  a:0.9, b:0.8 c:0.7,  d:0.6, f:0.7  T2  a:0.9, c:0.7, d:0.6, f:0.1  T3  a:0.6, b:0.9, c:0.2, e:0.8, f:0.5  T4  a:0.7, b:0.2, c:0.2, e:0.9  T5  b:0.9, c:0.9, g: 0.4   The first approach to mine the frequent is based on brute force approach known as naÔve algorithm.  Brute force approach first find all the combination of pattern in the uncertain database and find the expected support of all the patterns. Then the algorithm sort the pattern in term of expected support in decreasing order and then extracts the topk frequent patterns from that list. Given below is the procedure 326 2nd International Conference on Applied and Theoretical Computing and Communication Technology iCATccT 


how naÔve algorithm works to mine top-rank-5 pattern from the uncertain database shown in table 1. For transaction t1 a  b, c, d, f patterns that are generated from t1 consist of all the non-empty subset of {a, b, c, d, f} i.e a  b  c  d  f   a, b a, c}, {a, d}, {a, f}, {b, c} , {b, d}, {b, f}, {c, d}, {c f} , {d, f a  b, c a, b, d}, {a, b, f}, {a, c, d}, {a, c, f}, {b c, d}, {b, c, f}, {c, d, f}, {a, c, f}, {a, d ,f} , {a, b, c, d}, {a, b c, f}, {b, c, d, f}, {a, c, d, f}, {a, b, d, f} and {a, b,  c, d, f} are all the patterns of transaction t1. In the similar way e  g   a  e  b, e  c  e e, f a  b  e b, c, e}, {c, e, f}, {a, c e}, {a, e, f}, {a, b, c, e}, {b, c, e, f}, {a, c, e, f}, {a, b, e, f}, {a b, c, e, f g  b, g  c  g and b, c, g also are patterns Therefore, there are total 51 patterns generated by table 1 uncertain database. By scanning the database we can calculate the expected supports of these patterns by using equation \(1 and \(2\ the basis of expected support {a}, {b}, {c}, {d a, c} are the top-rank-5 patterns. Their expected supports are 3.3, 2.6, 2.4, 2.2 and 1.7 respectively. Obviously, this method is inefficient because it generate all the patterns. Suppose the uncertain database has n transaction and the average transaction length is m Then brute-force method will enumerate about n 2 m 1\s. Therefore, the brute-force method is inefficient in both time and space On the other hand, UFAE algorithm  decreases the number of generated patterns by using the Property 1 and 2. Given below is the procedure how UFAE algorithm works: we know that  a  b c}, {d}, {e} are top-rank-5 frequent patterns by scanning the database once. {f} and {g} cannot be top-5 pattern using property 2. So they are useless pattern for generating pattern having length greater than one because superset of a non-frequent pattern can never be frequent by using property 1. By a and c we get a candidate pattern  a  c By scanning DB second time, we get to know that the expected support of a  c is 1.7, which is greater than the expected support of {e}. So a  c replaces {e} from toprank-5 table and becomes a frequent pattern also. So the number of patterns generated by UFAE is very less compared to naÔve algorithm. For table 1 uncertain database UFAE algorithm generate only 20 candidate pattern which is less than half compared to naÔve algorithm  III  E XPERIMENTAL RESULT  To evaluate the performance of our proposed algorithm experiments are performed with both synthetic and real datasets. Experimentation is done using Java JRE v1.6.0 on Windows 8 machine with quad-core running at 2.30 GHz with 4 GB RAM and 1 TB disk. The experiments are performed with different k values on different datasets. The datasets used are connect and T20I6D300K http://code.google.com/p/attree/downloads/list The algorithms to be compared to evaluate the performance are NaÔve algorithm, UFAE and UApriori UApriori is the algorithm to mine frequent pattern in uncertain case. The experimental results reveal that the proposed UFAE algorithm  is much more efficient than the above mentioned two algorithms in term of running time Figure 1 show the running time of UFAE and  UApriori as the threshold k increases from 100 to 700 on synthetic dataset T20I6D10k, where the average size of each transaction average size of maximum potentially frequent item and number of transaction are set to 20 ,6 and 10000 respectively To evaluate the performance we take a Threshold value k and see the corresponding min sup that need to set in UApriori algorithm because min sup is the input for UApriori algorithm Graph shows that the UFAE algorithm has shorter runtime than UApriori for same value of K and corresponding min sup So UFAE performs much better than UApriori because UFAE generates less number of candidate patterns   Fig 1 running time of UFAE and U-Apriori for T20I6D10k dataset  Figure 2 also shows the runtime of UFAE and UApriori as K increase from 100 to 700 on synthetic dataset T10I6D50k where average transaction size is 10 and maximal potential frequent item size is set to 6 while number of transaction is 50000   Fig 2 running time of UFAE and U-Apriori for T10I6D50k dataset  Fig 3 shows the runtime of UFAE and UApriori on real dataset connect as k increases from 20 to 600   Fig 3 running time of UFAE and U-Apriori for connect datase 2nd International Conference on Applied and Theoretical Computing and Communication Technology iCATccT 327 


Fig 4 shows the mining time of NaÔve and UFAE algorithm for T10I6D20  for different value of K. UFAE always perform much better than NaÔve because of less number of candidate pattern generation and avoids the time consuming  calculation of expected support for all the patterns   Fig 4 running time of UFAE and NaÔve algorithm for T10I6D20 dataset  Figure 5 shows the running time of naÔve and UFAE algorithm for fixed value of K but different database size. In DB_X, X denotes the number of transaction in uncertain database UFAE algorithm outperforms the naÔve algorithm on every database size   Fig 5 running time of UFAE and NaÔve for different database size with fixed k value  IV  C ONCLUSION AND FUTURE WORK  In this paper, we presented and analyzed the problem of finding top-rank-k frequent itemset mining from uncertain database, which is different in semantics from the past proposals of top-rank-k frequent itemset mining from precise database. We discussed the need of mining top-rank-k frequent pattern for uncertain data. A novel UApriori based algorithm known as UFAE algorithm was developed and evaluated to mine top-k frequent itemset We evaluated the performances of our algorithm through the above experiments, and the experimental results showed that UFAE algorithm is efficient and feasible to mine top-k frequent pattern For future scope, as we are well familiar that the tree based algorithm are the fastest methods to mine frequent item for uncertain database, because tree based algorithm are not based on  level-by-level approach. So the tree based algorithms can be applied to mine the Top-Rank-k frequent patterns R EFERENCES  1 R  A g r a w a l and R  S r i k a n t   F ast al g o r ithms f o r mi ni ng a sso ci atio n r u l e s  in Proc. VLDB 1994, pp. 487Ö499, ACM 2 K  Ch u i B  K a o  an d E H ung  M in i n g f r e que nt i t e mse ts f r o m uncertain dataé, in Proc. PAKDD 2007, pp. 47Ö58, Springer 3  Cal de r s  C. G a r b o n i a n d B. G o e t hal s   A ppr o x i m a t io n o f f r e que nt n e s s  probability of itemsets in uncertain dataé, in Proc. IEEE ICDM 2010, pp. 749 754, IEEE 4 C. K  S  L e ung M. A  F  Mate o  an d D  A  Br ajcz u k  A tr e e b as e d  approach for frequent pattern mining from uncertain data,é in Proc. PAKDD 2008 pp. 653Ö661, Springer 5 C   C. A g g a r w a l Y  L i J  W a ng  a n d J  W a ng  F r e que nt pa tte r n m i n i ng  with uncertain data,é in Proc. ACM KDD 2009 pp. 29Ö37, ACM 6 Y T o ng L Che n, Y  C h e n g  P S Y u  M i n i n g F r e que nt I t e m s e ts o v e r Uncertain Databasesé, in Proc of the VLDB Endowment, 2012, pp. 16501661, ACM 7  C. K  S L e ung a nd S  K  T a nbe e r  P UFT r ee a co mpa ct tr e e str uct u r e f o r  frequent pattern mining of uncertain data,é in Proc. PAKDD 2013 pp. 13Ö25 Springer 8  C  K  L e u n g  R  K  M a c K i n n o n  S  K  T a n b eer  T i gh t e n i n g up p e r b ound s  to the expected support for uncertain frequent pattern mining,é in KES2014 2014, pp. 328-337, Elsevier 9 C. K  S  L e ung  U nce r tai n f r e qu e n t pa tte r n m i ni ng i n F r e que nt pa tte r n  mining, 2014, pp. 417-453, Springer 10  Bay ard o Jr  R J  E fficie n t l y min i n g l o n g i t e mse ts fro m d a ta b a se s  I n  ACM SIGMOD, 1998. pp. 85Ö93, ACM 11  C C A g g a rw al  O n U n if y i ng  P r iv acy and U n ce r t ai n D a t a  Mo de l sé, i n  ICDE Conference Proceedings, 2008, pp. 70-80, IEEE 12 D e ng Z   F a ng  G   M ini ng to p r a n k k f r e que n t p a t t e r nsé, I C ML C  2007, pp. 851Ö856, IEEE 13 F a ng G    D e ng  Z  H V TK  Ve r tical min ing o f to p r a nk k f r e qu e n t patternsé, In FSKDê08, 2008, pp. 620Ö624, IEEE 14 D e ng  Z  H   F as t m i n i ng  to p r a n k k f r e que nt p a t t e r ns  by us i n g N o delistsé, Expert Systems with Applications, 2014, pp. 1763Ö1768, Elsevier 15 Q u y e n H u y n h T h iL e T u o n g L e Bay  V o Bac L e A n e f f i cie nt an d effective algorithm for mining top-rank-k frequent patternsé, Expert Systems with Applications , 2015 , pp.156Ö164, Elsevier 16 X i ao j i a n Z h a n g an d H u il i P e ng  A S l iding W indo w  A ppro ac h f o r  Finding Top-k Frequent Itemsets from Uncertain Streamsé , 2009, pp. 597603    328 2nd International Conference on Applied and Theoretical Computing and Communication Technology iCATccT 


  D. Qiu, H. Li and Y. Li 223 Identification of active valuable nodes in temsoral online social network with attributes 224  International Journal of Information Technology & Decision Making vol. 13, no. 4, pp.839-864 Apr. 2014   M. Richardson and S. Domingos 223 Mining knowledge-sharing sites for viral marketing 224 in Proc. of the 8th ACM SIGKDD Int. Conf. on Knowledge Discovery and Data Mining pp..61-70, Aug. 2002   N. Ssasojevic, Z. Li, A. Rao and P. Bhattacharyya 223 When-to-post on social networks 224 in Proc. of the 21st ACM SIGKDD Int. Conf. on Knowledge Discovery and Data Mining   Sydney, NSW, Australia pp.2127-2136, Aug. 2015   M.F. Tsai, C.W. Tzeng, Z.L. Lin and A.L. Chen 223 Discovering leaders from social network by action cascade 224  Social Network Analysis and Mining vol. 4, no. 1, pp.1-10, Jan. 2014   X. Wu, V. Kumar, J. Ross Quinlan, J. Ghosh, Q. Yang, H. Motoda, G McLachlan, A. Ng, B. Liu, S. Yu, Z.-H Zhou, M. Steinbach, D. Hand and D. Steinberg, \223To p 10 algorithms in data mining,\224 Knowledge and Information Systems vol. 14, no. 1, pp.1-37, Jan. 2008  2016 IEEE International Conference on Systems, Man, and Cybernetics Ä SM\C 2016 | October 9-12, 2016 Ä Budapest, Hungary SMC_2016    000723 


VLDB 94  San Francisco  CA  USA pp  487-499  Morgan Kaufinann Publishers Inc  1994 4 Han  J  J Pei  and Y Yin   Mining frequent patterns without candidate generation  In ACM International Conference on Software Engineering  Artificial Intelligence  Networking and Parallel 7 Agrawal R Srikant R   Fast algorithm for mining association rules   Proceedings of 20th International Conference on Very Large Data Bases VLDB  Morgan Kaufman Press  I 994  487-499 8 J S Park  M S Chen  P S Yu   Efficient parallel data mining of association rules  4th International Conference on Information and Knowledge Management  1995  I I 233-235P 9 S Brin et ai   Dynamic itemset counting and implication rules for market basket data  Proceedings of the ACM SIGMOD International Conference on Management of Data  1997  123I 40 10 Jeffrey Dean  Sanjay   Map  Reduce Simplified  Data Processing on Large Clusters  OSDI  04 Sixth Symposium on Operating System Design and Implementation 2004  I th DBA  06  Anaheim  CA USA,2006  pp  75 82  ACT A Press  6 Yildiz  B and SIGMOD 93  New York  NY  USA  1993  pp  207 216  2 Han  J  and M Kamber  Data 13   Distributed Computing SNPD  12  Kyoto  20 I 2  IEEE 236 24 I  13 S Hammoud   MapReduce Network Enabled Algorithms for Classification Based on Association Rules  Thesis  20 I I  14 Yanjie Gao   Data Processing with Spark Technology  Application and Performance Optimization M  China machine Press  201411  1-2  15 Qiu H Gu R Yuan C Distributed Processing  Symposium Workshops IPDPSW  2014 IEEE International IEEE  2014 1664-1671 16 Gunduz  G Y AFIM A Parallel Frequent Itemset Mining Algorithm with Spark[C  Parallel Agrawal  R  T Imielinski  and Lin M  Lee P I Ergenc   Comparison of two association rule mining algorithms without candidate generation  In 2nd ed  ed  Morgan Kaufinann  2006 3 Agrawal  R and R Srikant   Fast algorithms for mining association rules in large databases  In  Fokoue  E   UCI Machine Learning Repository  Irvine  CA University of California  School of Information and Computer Science  20 I 2  I Proceedings of the Proceedings of the 2000 ACM SIGMOD International Conference on Management of Data  Proceedings of the 24th lASTED International Conference on Database and Applications  Proceedings of the 70th lASTED International Conference on Artificial Intelligence and Applications  Shi Z   Parallel Implementation of Apriori Algorithm Based on MapReduce  In Proceedings of the 13 Swami   Mining association rules between sets of items in large databases  In Mining Concepts and Techniques N ACKNOWLEDGMENT Any comments and suggestions are welcome from the reviewers The authors will be thankful to them The authors would also be thankful to all those people who involved in carrying out this research work The authors are also thankful to the Department of Computer Science of Dr Babasaheb Ambedkar Marathwada University Aurangabaad for providing the infrastructure to carry out the research REFERENCES Proceedings of the 20th International Conference on Very Large Data Bases  SMART 2016 ISBN 978-1-5090-3543-4 Adaptive Apriori Algorithm for Frequent Itemset Mining  251 ACM SIGMOD International Conference on Management of Data  et al  A 7993 B  SIGMOD 00  New York  NY  USA 2000  pp  112  5 Pavon  J  S Vi ana  and S Gomez   Matrix Apriori Speeding up the search for frequent patterns  In SIGMOD  93  2010  pp  450-457  ACM  Copyright Hsueh S   Apriori-based Frequent Itemset Mining Algorithms on MapReduce  Proc  of the 16th International Conference on Ubiquitous Information Management and Communication ICUlMC 12  New York  NY  USA  ACM  Article No  76  20 I 2  12 Li N  Zeng L  He Q 


    Fig. 8. Comparative Analysis Classification Algorithms V  CONCLUSION Associative Classification techniques are used to make better decision in critical situations. The proposed associative classification called as Classification of microarray gene expression data using associative classification and gene expression intervals used to clas sify the gene expression with gene intervals in affected gene expression. The experimental results are carried out by using the gene expression of breast cancer. The associative classification on gene expression data obtained the best prediction and accuracy of the classification result. The proposed algorithm was tested with two class and multi class data sets. The classification algorithm was compared with the classical classification algorithms such as Linear Discriminant Analysis, SVM, and Decision Tree. After the comparison of traditional classification algorithms, as per the view of possible error rates the Associative Classification algorithm is best for biological data. The results of this work are used to drug designer for cancer diseases. The proposed algorithm works on gene expression data. In future, it will be implemented on hadoop and big data mining for biological data VI  R EFERENCES  1   Morgan Kaufmann Publishers Elsevier 2002 2   Second Edition PicasetOy Helsinki, 2005 3  Nagata, K., Washio, T., Kawahara, Y. and Unami, A  prediction from toxicogenomic data based on class association rule  ELSEVIER journal Toxicology Reports, vol.41, no.10 pp. 1133-1142, 2014 4  Garcia, S., Luengo, J., S·ez, J. A., LÛpez, V. and Herrera, F survey of discretization techniques: Taxonomy and empirical  Knowledge and Data Engineering, IEEE Transactions vol. 25, no.4, pp.734-750, 2013 5  Alves,R., Rodriguez.B.D.S and Aguilar. R.J.S  analysis: a survey of frequent pattern mining from gene expression  Briefings in Bioinformatics 2009, vol.2, no.2, pp.210-224 6   Miner: Maximal Confident Association Rules Miner Algorithm for Up/Down Applied Mathematics and Information Sciences vol.8 no.2, pp.799-809, 2014 7    BMC Bioinformatics vol.19, no.1, pp.7986, 2003 8  Snousy, A. M. B., El-Deeb, H. M., Badran, K. and Al Khlil, I. A  based classification algorithms on cancer  Egyptian Informatics Journal vol.12 no.2 pp.73-82. 2011 9  Refaeilzadeh, P., Tang, L. and Liu, H   Encyclopedia of database systems, Springer US pp. 532-538 2009   R. Agrawal and R. Srikant, Fast Algorithms for Mining Association Rules Proceedings of the 20th Int. Conf. on Very Large Data Bases VLDB94\,475486, Santiago de Chile, Chile 1994   Alagukumar, S., and Lawrance R., "A Selective Analysis of Microarray Data Using Association Rule Mining Procedia Computer Science Vol.47, pp.3-12, 2015 doi:10.1016/j.procs.2015.03.177   Alagukumar  Cancer Data Analysis Using Frequent Pattern Mining and Gene  International Journal of Computer Applications ISSN 0975 8887, no.1, pp.9-14, June 2015   Pasquier, N., Bastide, Y., Taouil, R., & Lakhal, L Pruning closed itemset lattices for association rules  In BDA'1998 international conference on Advanced Databases pp. 177-196. 1998   Giugno R, Pulvirenti A, Cascione L, Pigola G, Ferro A MIDClass: Microarray Data Classification by Association Rules and Gene Expression Intervals. Tang H, ed. PLoS ONE 2013;8\(8\:e69873. doi:10.1371/journal.pone.0069873   http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE1379   Wang, Zuncai, et al. "The prognostic biomarkers HOXB13 IL17BR, and CHDH are regulated by estrogen in breast cancer Clinical Cancer Research 13.21 pp. 6327-6334, 2005    cancer progression and host polymorphisms in the chemokine system: role of the macrophage chemoattractant protein-1 \(mcp 2518 g allele Clinical Chemistry 51: 452 5.2005   Dash, Rajashree, Rajib Lochan Paramguru, and Rasmita Dash Comparative analysis of supervised and unsupervised discretization techniques." International Journal of Advances in Science and Technology 2.3 \(2011\: 29-37   0 10 20 30 40 50 60 70 80 90 100 LDA SVM Decision Tree CACGE Accuracy and Error rate Classification Algorithms Accuracy Error Rate 


on items contained in each item group When the number of pivots increases the entire database is split into a ner granularity and the number of partitions increase correspondingly Such a ne granularity leads to a reduction in distance computation among transactions On the other hand when the pivot number k continues growing the number of transactions mapped into one hash bucket signiﬁcantly increases thereby leading to a large candidate-object set and high shufﬂing cost see Figs 3b and 3c Consequently the overall execution time is optimized when k is 60 for both algorithms see Fig 3a 6.2 Minimum Support Recall that minimum support plays an important role in mining frequent itemsets We increase minimum support thresholds from 0.0005 to 0.0025 percent with an increment of 0.0005 percent to evaluate the impact of minimum support on FiDoop-DP The other parameters are the same as those for the previous experiments Fig 4a shows that the execution times of FiDoop-DP and Pfp decrease when the minimum support is increasing Intuitively a small minimum support leads to an increasing number of frequent 1-itemsets and transactions which have to be scanned and transmitted Table 2 illustrates the size of frequent 1-itemsets stored in FList and the number of nal output records of the two parallel solutions under various minimum-support values Fig 4a reveals that regardless of the minimum-support value FiDoop-DP is superior to Pfp in terms of running time Two reasons make this performance trend expected First FiDoop-DP optimizes the partitioning process by placing transactions with a high similarity into one group rather than randomly and evenly grouping the transaction Fig 4b conﬁrms that FiDoop-DP’s shufﬂing cost is signiﬁcantly lower than that of Pfp thanks to optimal data partitions offered by FiDoop-DP Second this grouping strategy in FiDoop-DP minimizes the number of transactions for each GList under the premise of data completeness which leads to reducing mining load for each Reducer The grouping strategy of FiDoop-DP introduces computing overhead including signature-matrix calculation and hashing each band into a bucket Nevertheless such small overhead is offset by the performance gains in the shufﬂing and reduce phases Fig 4a also shows that the performance improvement of FiDoop-DP over Pfp is widened when the minimum support increases This performance gap between FiDoop-DP and Pfp is reasonable because pushing minimum support up in FiDoop-DP lters out an increased number of frequent 1-itemsets which in turn shortens the transaction partitioning cost Small transactions simplify the correlation analysis among the transactions thus small transactions are less likely to have a large number of duplications in their partitions As a result the number of duplicated transactions to be transmitted among the partitions is signiﬁcantly reduced which allows FiDoop-DP to deliver better performance than Pfp 6.3 Data Characteristic In this group of experiments we respectively evaluate the impact of dimensionality and data correlation on the performance of FiDoop-DP and Pfp by changing the parameters in the process of generating the datasets using the IBM Quest Market-Basket Synthetic Data Generator 6.3.1 Dimensionality The average transaction length directly determines the dimensions of a test data We conﬁgure the average transaction length to 10 40 60 and 85 to generate T10I4D 130 blocks T40I10D 128 blocks T60I10D 135 blocks T85I10D 133 blocks datasets respectively In this experiment we measure the impacts of dimensions on the performance of FiDoop-DP and Pfp on the 8-node Hadoop cluster The experimental results plotted in Fig 5a clearly indicate that an increasing number of dimensions signiﬁcantly raises the running times of FiDoop-DP and Pfp This is because increasing the number of dimensions increases the number of groups thus the amount of data transmission sharply goes up as seen in Fig 5b The performance improvements of FiDoop-DP over Pfp is diminishing when the dimensionality increases from 10 to 85 For example FiDoop-DP offers an improvement of 29.4 percent when the dimensionality is set to 10 the improvement drops to 5.2 percent when the number of dimensions becomes 85 In what follows we argue that FiDoop-DP is inherently losing the power of reducing the number of redundant transactions in high-dimensional data When a dataset has a low dimensionality FiDoop-DP tends to build partitions Fig 4 Impact of minimum support on FiDoop-DP and Pfp TABLE 2 The Size of FList and the Number of Final Output Records Under Various Minimum-Support Values minsupport 0.0005 0.001 0.0015 0.002 0.0025 FList 14.69k 11.6k 9.71k 6.89k 5.51k OutRecords 745 588 465 348 278 XUN ET AL FIDOOP-DP DATA PARTITIONING IN FREQUENT ITEMSET MINING ON HADOOP CLUSTERS 109 


each of which has distinct characteristics compared with the other partitions Such distinct features among the partitions allow FiDoop-DP to efﬁciently reduce the number of redundant transactions In contrast a dataset with high dimensionality has a long average transaction length therefore data partitions produced by FiDoop-DP have no distinct discrepancy Redundant transactions are likely to be formed for partitions that lack distinct characteristics Consequently the beneﬁt offered by FiDoop-DP for highdimensional datasets becomes insigniﬁcant 6.3.2 Data Correlation We set the correlation among transactions i.e corr to 0.15 0.25 0.35 0.45 0.55 0.65 and 0.75 to measure the impacts of data correlation on the performance of the two algorithms on the 8-node Hadoop cluster The Number of Pivots is set to 60 see also Section 6.1 The experimental results plotted in Fig 5c clearly indicate that FiDoop-DP is more sensitive to data correlation than Pfp This performance trend motivates us to investigate the correlation-related data partition strategy Pfp conducts default data partition based on equal-size item group without taking into account the characteristics of the datasets However FiDoop-DP judiciously groups items with high correlation into one group and clustering similar transactions together In this way the number of redundant transactions kept on multiple nodes is substantially reduced Consequently FiDoop-DP is conducive to cutting back both data transmission trafﬁc and computing load As can be seen from Fig 5c there is an optimum balance point for data correlation degree to tune FiDoop-DP performance e.g 0.35 in Fig 5c If data correlation is too small Fidoop-DP will degenerate into random partition schema On the contrary it is difﬁcult to divide items into relatively independent groups when data correlation is high meaning that an excessive number of duplicated transactions have to be transferred to multiple nodes Thus a high data correlation leads to redundant transactions formed for partitions thereby increasing network and computing loads 6.4 Speedup Now we are positioned to evaluate the speedup performance of FiDoop-DP and Pfp by increasing the number of data nodes in our Hadoop cluster from 4 to 24 The T40I10D 128 blocks dataset is applied to drive the speedup analysis of the these algorithms Fig 6 reveals the speedups of FiDoop-DP a nd Pfp as a function of the number of data nodes The experimental results illustrated in Fig 6a show that the speedups of FiDoop-DP and Pfp linearly scale up with the increasing number of data nodes Such a speedup trend can be attributed to the fact that increasing the number of data nodes under a xed input data size inevitably 1 reduces the amount of itemsets being handled by each node and 2 increases communication overhead among mappers and reducers Fig 6a shows that FiDoop-DP is better than Pfp in terms of the speedup efﬁciency For instance the FiDoop-DP improves the speedup efﬁciency of Pfp by up to 11.2 percent with an average of 6.1 percent This trend suggests FiDoopDP improves the speedup efﬁciency of Pfp in large-scale The speedup efﬁciencies drop when the Hadoop cluster scales up For example the speedup efﬁciencies of FiDoopDP and Pfp on the 4-node cluster are 0.970 and 0.995 respectively These two speedup efﬁciencies become 0.746 and 0.800 on the 24-node cluster Such a speedup-efﬁciency trend is driven by the cost of shufﬂing intermediate results which sharply goes up when the number of data nodes scales up Although the overall computing capacity is improved by increasing the number of nodes the cost of synchronization and communication among data nodes tends to offset the gain in computing capacity For example the results plotted in Fig 6b conﬁrm that the shufﬂing cost Fig 5 Impacts of data characteristics on FiDoop-DP and Pfp Fig 6 The speedup performance and shufﬂing cost of FiDoop-DP and Pfp 110 IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS VOL 28 NO 1 JANUARY 2017 


is linearly increasing when computing nodes are scaled from 4 to 24 Furthermore the shufﬂing cost of Pfp is larger than that of FiDoop-DP 6.5 Scalability In this group of experiments we evaluate the scalability of FiDoop-DP and Pfp when the size of input dataset dramatically grows Fig 7 shows the running times of the algorithms when we scale up the size of the T40I10D data series Figs 7a and 7b demonstrate the performance of FiDoop-DP processing various datasets on 8-node and 24-node clusters respectively Fig 7 clearly reveals that the overall execution times of FiDoop-DP and Pfp go up when the input data size is sharply enlarged The parallel mining process is slowed down by the excessive data amount that has to be scanned twice The increased dataset size leads to long scanning time Interestingly FiDoop-DP exhibits a better scalability than Pfp Recall that see also from Algorithm 1 the second MapReduce job compresses an initial transaction database into a signature matrix which is dealt by the subsequent process The compress ratio is high when the input data size is large thereby shortening the subsequent processing time Furthermore Fidoop-DP lowers the network trafﬁc induced by the random grouping strategy in Pfp In summary the scalability of FiDoop-DP is higher than that of Pfp when it comes to parallel mining of an enormous amount of data 7R ELATED W ORK 7.1 Data Partitioning in MapReduce Partitioning in databases has been widely studied for both single system servers e.g and distributed storage systems e.g BigTable PNUTS[31 The existing approaches typically produce possible ranges or hash partitions which are then evaluated using heuristics and cost models These schemes offer limited support for OLTP workloads or query analysis in the context of the popular MapReduce programming model In this study we focus on the data partitioning issue in MapReduce High scalability is one of the most important design goals for MapReduce applications Unfortunately the partitioning techniques in existing MapReduce platforms e.g Hadoop are in their infancy leading to serious performance problems Recently a handful of data partitioning schemes have been proposed in the MapReduce platforms Xie et al  developed a data placement management mechanism for heterogeneous Hadoop clusters Their mechanism partitions data fragments to nodes in accordance to the nodes processing speed measured by computing ratios In addition Xie et al  designed a data redistribution algorithm in HDFS to address the data-skew issue imposed by dynamic data insertions and deletions CoHadoop is a H a d oop s lightweight extension which is designed to identify relateddataﬁlesfollowedbyamodiﬁeddataplacement policy to co-locate copies of those related les in the same server CoHadoop considers the relevance among les that is CoHadoop is an optimization of HaDoop for multiple les A key assumption of the MapReduce programming model is that mappers are completely independent of one another Vernica et al  broke such an assumption by introducing an asynchronous communication channel among mappers T his c hannel e nables the m appers to see global states managed in metadata Such situationaware mappers SAMs can enable MapReduce to exibly partition the inputs Apart from this adaptive sampling and partitioning were proposed to produce balanced partitions for the reducers by sampling mapper outputs and making use of obtained statistics Graph and hypergraph partitioning have been used to guide data partitioning in parallel computing Graph-based partitioning schemes capture data relationships For example Ke et al applied a graphic-execution-plan graph EPG to perform cost estimation and optimization by analyzing various properties of both data and computation Their estimation module coupled with the cost model estimate the runtime cost of each vertex in an EPG which represents the overall runtime cost a data partitioning plan is determined by a cost optimization module Liroz-Gistau et al proposed the MR-Part technique which partitions all input tuples producing the same intermediate key co-located in the same chunk Such a partitioning approach minimizes data transmission among mappers and reducers in the shufﬂe phase The approach captures the relationships between input tuples and intermediate keys by monitoring the execution of representative workload Then based on these relationships their approach applies a min-cut k-way graph partitioning algorithm thereby partitioning and assigning the tuples to appropriate fragments by modeling the workload with a hyper graph In doing so subsequent MapReduce jobs take full advantage of data locality in the reduce phase Their partitioning strategy suffers from adverse initialization overhead Fig 7 The scalability of FiDoop-DP and Pfp when the size of input dataset increases XUN ET AL FIDOOP-DP DATA PARTITIONING IN FREQUENT ITEMSET MINING ON HADOOP CLUSTERS 111 


7.2 Application-Aware Data Partitioning Various efﬁcient data partitioning strategies have been proposed to improve the performance of parallel computing systems For example Kirsten et al  developed two general partitioning strategies for generating entity match tasks to avoid memory bottlenecks and load imbalances Taking into account the characteristics of input data Aridhi et al proposed a novel density-based data partitioning technique for approximate large-scale frequent subgraph mining to balance computational load among a collection of machines Kotoulas et al built a data distribution mechanism based on clustering in elastic regions Traditional term-based partitioning has limited scalability due to the existence of very skewed frequency distributions among terms Load-balanced distributed clustering across networks and local clustering are introduced to improve the chance that triples with a same key are collocated These selforganizing approaches need no data analysis or upfront parameter adjustments in a priori Lu et al studied k nearest neighbor join using MapReduce in which a data partitioning approach was designed to reduce both shufﬂing and computational costs In Lu’s study objects are divided into partitions using a Voronoi diagram with carefully selected pivots Then data partitions i.e Voronoi cells are clustered into groups only if distances between them are restricted by a speciﬁc bound In this way their approach can answer the k-nearest-neighbour join queries by simply checking object pairs within each group FIM for data-intensive applications over computing clusters has received a growing attention efﬁcient data partitioning strategies have been proposed to improve the performance of parallel FIM algorithms A MapReducebased Apriori algorithm is designed to incorporate a new dynamic partitioning and distributing data method to improve mining performance This method divides input data into relatively small splits to provide exibility for improved load-balance performance Moreover the master node doesn’t distribute all the data once rather the rest data are distributed based on dynamically changing workload and computing capability weight of each node Similarly Jumbo adopted a dynamic partition assignment technology enabling each task to process more than one partition Thus these partitions can be dynamically reassigned to different tasks to improve the load balancing performance of Pfp Uthayopas et al  investigated I/O and execution scheduling strategies to balance data processing load thereby enhancing the utilization of a multi-core cluster system supporting association-rule mining In order to pick a winning strategy in terms of data-blocks assignment Uthayopas et al incorporated three basic placement policies namely the round robin range and random placement Their approach ignores data characteristics during the course of mining association rules 8F URTHER D ISCUSSIONS In this study we investigated the data partitioning issues in parallel FIM We focused on MapReduce-based parallel FPtree algorithms in particular we studied how to partition and distribute a large dataset across data nodes of a Hadoop cluster to reduce network and computing loads We argue that the general idea of FiDoop-DP proposed in this study can be extended to other FIM algorithms like Apriori running on Hadoop clusters Apriori-based parallel FIM algorithms can be classiﬁed into two camps namely count distribution and data distribution  For the count distribution camp each node in a cluster calculates local support counts of all candidate itemsets Then the global support counts of the candidates are computed by exchanging the local support counts For the data distribution camp each node only keeps the support counts of a subset of all candidates Each node is responsible for delivering its local database partition to all the other processors to compute support counts In general the data distribution schemes have higher communication overhead than the count distribution ones whereas the data distribution schemes have lower synchronization overhead than its competitor Regardless of the count distribution or data distribution approaches the communication and synchronization cost induce adverse impacts on the performance of parallel mining algorithms The basic idea of Fidoop-DP—grouping highly relevant transactions into a partition allows the parallel algorithms to exploit correlations among transactions in database to cut communication and synchronization overhead among Hadoop nodes 9C ONCLUSIONS A ND F UTURE W ORK To mitigate high communication and reduce computing cost in MapReduce-based FIM algorithms we developed FiDoop-DP which exploits correlation among transactions to partition a large dataset across data nodes in a Hadoop cluster FiDoop-DP is able to 1 partition transactions with high similarity together and 2 group highly correlated frequent items into a list One of the salient features of FiDoopDP lies in its capability of lowering network trafﬁc and computing load through reducing the number of redundant transactions which are transmitted among Hadoop nodes FiDoop-DP applies the Voronoi diagram-based data partitioning technique to accomplish data partition in which LSH is incorporated to offer an analysis of correlation among transactions At the heart of FiDoop-DP is the second MapReduce job which 1 partitions a large database to form a complete dataset for item groups and 2 conducts FP-Growth processing in parallel on local partitions to generate all frequent patterns Our experimental results reveal that FiDoop-DP signiﬁcantly improves the FIM performance of the existing Pfp solution by up to 31 percent with an average of 18 percent We introduced in this study a similarity metric to facilitate data-aware partitioning As a future research direction we will apply this metric to investigate advanced loadbalancing strategies on a heterogeneous Hadoop cluster In one of our earlier studies see for details we addressed the data-placement issue in heterogeneous Hadoop clusters where data are placed across nodes in a way that each node has a balanced data processing load Our data placement scheme can balance the amount of data stored in heterogeneous nodes to achieve improved data-processing performance Such a scheme implemented at the level of Hadoop distributed le system HDFS is unaware of correlations among application data To further improve load balancing 112 IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS VOL 28 NO 1 JANUARY 2017 


mechanisms implemented in HDFS we plan to integrate FiDoop-DP with a data-placement mechanism in HDFS on heterogeneous clusters In addition to performance issues energy efﬁciency of parallel FIM systems will be an intriguing research direction A CKNOWLEDGMENTS The work in this paper was in part supported by the National Natural Science Foundation of P.R China No.61272263 No.61572343 Xiao Qin’s work was supported by the U.S National Science Foundation under Grants CCF-0845257 CAREER The authors would also like to thank Mojen Lau for proof-reading R EFERENCES  M J Zaki Parallel and distribu ted associat ion mining A survey IEEE Concurrency  vol 7 no 4 pp 14–25 Oct 1999  I Pramudiono and M Kitsuregawa  Fp-tax Tree structure based generalized association rule mining in Proc 9th ACM SIGMOD Workshop Res Issues Data Mining Knowl Discovery  2004 pp 60–63  J De an a n d S Gh e ma wa t M ap re du ce  S i mp l i e d da ta pr o ce s si n g on large clusters ACM Commun  vol 51 no 1 pp 107–113 2008  S Sakr A Liu and A G Fayoumi The family of mapred uce and large-scale data processing systems ACM Comput Surveys  vol 46 no 1 p 11 2013  M.-Y Lin P.-Y Lee and S.-C Hsueh Apriori-based frequent itemset mining algorithms on mapreduce in Proc 6th Int Conf Ubiquitous Inform Manag Commun  2012 pp 76:1–76:8  X Li n  Mr a pr io ri  As so ci a ti o n ru le s a lg o ri th m ba se d on mapreduce in Proc IEEE 5th Int Conf Softw Eng Serv Sci  2014 pp 141–144  L Zhou Z Zhong J Chang J Li J Huang and S Feng Balanced parallel FP-growth with mapreduce in Proc IEEE Youth Conf Inform Comput Telecommun  2010 pp 243–246  S Hong Z Huaxuan C Shiping and H Chunyan The study of improved FP-growth algorithm in mapreduce in Proc 1st Int Workshop Cloud Comput Inform Security  2013 pp 250–253  M Riondato  J A DeBrabant R Fonseca and E Upfal Parma A parallel randomized algorithm for approximate association rules mining in mapreduce in Proc 21st ACM Int Conf Informa Knowl Manag  2012 pp 85–94  C Lam Hadoop in Action  Greenwich USA Manning Publications Co 2010  H Li Y Wang D Zhang M Zhang and E Y Chang PFP Parallel FP-growth for query recommendation in Proc ACM Conf Recommender Syst  2008 pp 107–114  C Curino E Jones Y Zhang and S Madden Schism A workload-driven approach to database replication and partitioning Proc VLDB Endowment  vol 3 no 1-2 pp 48–57 2010  P Uthayop as and N Benjamas Impact of i/o and execution scheduling strategies on large scale parallel data mining J Next Generation Inform Technol  vol 5 no 1 p 78 2014  I  P r a m u d i o n o a n d M  K i t s u r e g a w a  P a r a l l e l F P g r o w t h o n P C cluster in Proc.Adv.Knowl.DiscoveryDataMining  2003 pp 467–473  Y Xun J Zhang and X Qin Fidoop Parallel mining of frequent itemsets using mapreduce IEEE Trans Syst Man Cybern Syst  vol 46 no 3 pp 313–325 Mar 2016 doi 10.1109 TSMC.2015.2437327  S Owen R Anil T Dunning and E Friedman Mahout Action  Greenwich USA Manning 2011  D Borthakur  Hdfs architecture guide HADOOP APACHE PROJECT Available  http://hadoop.apache.org/common/docs current/hdfs design.pdf 2008  M Zaharia M Chowdhury M J Franklin  S Shenker and I Stoica Spark Cluster computing with working sets in Proc 2nd USENIX Conf Hot Topics Cloud Comput  2010 p 10  W Lu Y Shen S Chen and B C Ooi Efﬁcient proces sing of k nearest neighbor joins using mapreduce Proc VLDB Endowment  vol 5 no 10 pp 1016–1027 2012  T Kanung o D M Mount N S Netanya hu C D Piatko R Silverman and A Y Wu An efﬁcient k-means clustering algorithm Analysis and implementation IEEE Trans Pattern Anal Mach Intell  vol 24 no 7 pp 881–892 Jul 2002  A K Jain Data clustering 50 years beyond k-means Pattern Recog Lett  vol 31 no 8 pp 651–666 2010  D Arthur and S Vassilvitskii  k-means  The advantages of careful seeding in Proc 18th Annu ACM-SIAM Symp Discr Algorithms  2007 pp 1027–1035  J Leskovec A Rajaraman and J D Ullman Mining Massive Datasets  Cambridge U.K Cambridge Univ Press 2014  A Stupar  S Mich el and R Schen kel Rankred uce–pr ocessin g k-nearest neighbor queries on top of mapreduce in Proc 8th Workshop Large-Scale Distrib Syst Informa Retrieval  2010 pp 13–18  B Bahmani A Goel and R Shinde Efﬁcient distributed locality sensitive hashing in Proc 21st ACM Int Conf Inform Knowl Manag  2012 pp 2174–2178  R Panigrahy Entropy based nearest neighbor search in high dimensions in Proc 17th Annu ACM-SIAM Symp Discr Algorithm  2006 pp 1186–1195  A Z Broder M Charikar  A M Frieze and M Mitzenma cher Min-wise independent permutations J Comput Syst Sci  vol 60 no 3 pp 630–659 2000  L Cristofor ARtool Association rule mining algorit hms and tools 2006  S Agrawal V Narasayya  and B Yang Integrating vertical and horizontal partitioning into automated physical database design in Proc ACM SIGMOD Int Conf Manag Data  2004 pp 359–370  F Chang J Dean S Ghema wat W Hsieh D Wallach  M  Burrows T Chandra A Fikes and R Gruber Bigtable A distributed structured data storage system in Proc 7th Symp Operating Syst Des Implementation  2006 pp 305–314  B F Cooper R Ramakrishn an U Srivastava A Silberstein P Bohannon H.-A Jacobsen N Puz D Weaver and R Yerneni Pnuts Yahoo!’s hosted data serving platform Proc VLDB Endowment  vol 1 no 2 pp 1277–1288 2008  J Xie and X Qin The 19th heterogenei ty in computing workshop HCW 2010 in Proc IEEE Int Symp Parallel Distrib Process Workshops Phd Forum  Apr 2010 pp 1–5  M Y Eltabakh Y Tian F  Ozcan R Gemulla A Krettek and J McPherson Cohadoop Flexible data placement and its exploitation in hadoop Proc VLDB Endowment  vol 4 no 9 pp 575 585 2011  R Vernica A Balmin K S Beyer and V Ercegovac Adaptive mapreduce using situation-aware mappers in Proc 15th Int Conf Extending Database Technol  2012 pp 420–431  Q Ke V Prabhakar an Y Xie Y Yu J Wu and J Yang Optimizing data partitioning for data-parallel computing uS Patent App 13/325,049 Dec 13 2011  M Liroz-Gis tau R Akbarinia D Agrawal E Pacitti  and P Valduriez Data partitioning for minimizing transferred data in mapreduce in Proc 6th Int Conf Data Manag Cloud Grid P2P Syst  2013 pp 1–12  T Kirsten L Kolb M Hartung A Gro H K  opcke and E Rahm Data partitioning for parallel entity matching Proc VLDB Endowment  vol 3 no 2 pp 1–8 2010  S Kotoulas E Oren and F Van Harmelen Mind the data skew Distributed inferencing by speeddating in elastic regions in Proc 19th Int Conf World Wide Web  2010 pp 531–540  L Li and M Zhang The strategy of mining associat ion rule based on cloud computing in Proc Int Conf Bus Comput Global Inform  2011 pp 475–478  S Groot K Goda and M Kitsuregawa  Towards improv ed load balancing for data intensive distributed computing in Proc ACM Symp Appl Comput  2011 pp 139–146  M Z Ashra D Taniar and K Smith ODAM An optimiz ed distributed association rule mining algorithm IEEE Distrib Syst Online  vol 5 no 3 p 1 Mar 2004 Yaling Xun is currently a doctoral student at Taiyuan University of Science and Technology She is currently a lecturer in the School of Computer Science and Technology Taiyuan University of Science and Technology Her research interests include data mining and parallel computing XUN ET AL FIDOOP-DP DATA PARTITIONING IN FREQUENT ITEMSET MINING ON HADOOP CLUSTERS 113 


Jifu Zhang received the BS and MS degrees in computer science and technology from the Hefei University of Tchnology China and the PhD degree in pattern recognition and intelligence systems from the Beijing Institute of Technology in 1983 1989 and 2005 respectively He is currently a professor in the School of Computer Science and Technology TYUST His research interests include data mining parallel and distributed computing and artiﬁcial intelligence Xiao Qin received the PhD degree in computer science from the University of Nebraska-Lincoln in 2004 He is currently a professor in the Department of Computer Science and Software Engineering Auburn University His research interests include parallel and distributed systems storage systems fault tolerance real-time systems and performance evaluation He received the U.S NSF Computing Processes and Artifacts Award and the NSF Computer System Research Award in 2007 and the NSF CAREER Award in 2009 He is a senior member of the IEEE Xujun Zhao received the MS degree in computer science and technology in 2005 from the Taiyuan University of Technology China He is currently working toward the PhD degree at Taiyuan University of Science and Technology His research interests include data mining and parallel computing  For more information on this or any other computing topic please visit our Digital Library at www.computer.org/publications/dlib 114 IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS VOL 28 NO 1 JANUARY 2017 


