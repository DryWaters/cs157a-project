Collaboration Framework fo r Data Compensation in Sensor Networks  Pierre F. Tiako IEEE Senior Member  Center for IT Research Langston University, USA pftiako@lunet.edu and tiako@ieee.org Le Gruenwald School of Computer Science University of Oklahoma, USA ggruenwald@ou.edu   Abstract This paper proposes a new approach of modeling the collaboration of sensor system artifacts to address the security and survivability concerns of sensor networks. The model considered is composed of sensors, base and users. Sensors are nodes that acquire and process data. Base is the node that 
acquires and processes data from sensors and provides an interface to access and monitor the sensor network while users monitor the system. The model proposed is instantiated and validated using association rule mining to compensate missing data in order to provide security and survivability to sensor networks Keywords-Sensor Networks; Security; Survavibility Collaboration; Data Compensation I   I NTRODUCTION  Networks of thousands of sensors present a feasible and economic solution to some of our most challenging problems real-time traffic modeling, military sensing and tracking, real 
time pollution monitoring, wildlife tracking, and monitoring for bio-terrorist attacks. These small, fragile sensors are limited in energy, computational and storage resources [1  M a n y  applications, in particular military applications, are dependent on the secure and reliable operation of the sensor network. The survivability of the network is threatened by resource limitations and security attacks [1   14   18   2 0   Applications also require and expect the sensor network to deliver data with minimal lateness, loss and corruption so that optimal knowledge may be obtained by intelligent fusion Several issues in sensor networks still remain research challenges. Such as modeling and distributing the security and 
survivability concerns of sensor networks. It is also challenging to identify and estimate lost/corrupted data in such complex systems In this position paper we propose a new approach of UML modeling and distribution to address the security and survivability concerns of sensor networks. The model proposed is instantiated in the context of data estimation and validated using association rule mining on stream data to discover relationships between sensors and use them to compensate for missing data  II  S YSTEM M ODEL  A  Sensor Network Entities 
The system is composed of a number of entities as shown in Figure 1.  Sensor is a node that acquires and processes data Base is the node that acquires and processes data from sensors and provides an interface to access and monitor the sensor network [2   3  U s e r is t h e e n t ity t h at mo n i to r s  t h e s y s t e m   The Sensing Application \(SA\ helps the base and sensors to acquire, process and route data. The Lightweight real-time Intrusion Detector \(LID\n the sensor detects intrusion processes the kind of intrusion and flags the base if an intruder is detected. The Intrusion Detector \(ID\ entity at the base detects security or erroneous data concerns, packet loss and 
intruders who may directly attack the base station. The Data Estimation \(DE\ entity estimates if data from a sensor conflicts with data from other sensors and helps compensate for the missing or corrupted data. The Intrusion Avoidance Agent IAA\ entity on the sensor senses possible intrusion activities     5   6] a nd s e nds a  p r e e m p t i v e a t t a c k w a rni ng t o  t h e I D  component at the base. The Decision Support Analysis and Knowledge Management component \(DSAKM\ is the application that supports decision making. It detects and makes a specific decision about security or erroneous data concerns The Key Management \(KM\ entity supports routing authentication protocols t o c o n s t r uc t t rus t  l e v e l s a m o ng t h e  
sensors and the base. This is needed not only when two nodes exchange data, but also to ensure that routing is established through trustworthy nodes Figure 1 depicts the entities of the sensor network system considered and provides their inter-relationships. The system has a base accessible by several users, and is composed of several sensors. The numbers 1 between Base and User indicate that at least one user will monitor the system through the base. The numbers 1..1 next to Base indicate that the base is composed of one DSAKM, DE, ID, KM, and SA. Similarly the numbers 
1..1 next to Sensor indicate that a sensor is composed of one KM, SA, IAA, and LID. The numbers 0  between Base and Sensor indicate that the base may function autonomously by sensing and processing data, or may receive data from one or several sensors. The numbers 0 between Sensors indicate that a data sensed and processed by a sensor This work is partly sponsored by the Department of Defense, DEPSCoR and the Department of Education, MSEIP, USA 504 978-1-4244-2030-8/08/$25.00 ©2008 IEEE 


  1  B ase  Sensor User 0 DSAKM DE ID 1..1 KM SA 1..1 1..1 1..1 1..1 1..1 IAA 1..1 1..1 LID 0   Normal  Active Defensive Start Attacked Resume Safe Warned Ignore Sense Detect may be forwarded directly to the base, or may be routed to the base through one or several intermediary sensors         Figure 1  Sensor Networks Class Diagram  B  System Behaviors The system behavior involves both sensors and base state diagrams Sensorês state diagram presents the Warning and the Attacked cases \(Figure 2\. In the Warning case a sensor is active and pro-actively senses warnings [4   Th e s e n s o r  tr an s i t s  to the Safe state. When the warning signal is ignored, the sensor will return to the Active state. In the Attacked case a sensor is active and it detects an intruder [1   1 9   T h e s e n s o r  then transits to the Defensive state. When the detection signal is ignored, the sensor will resume the Active state  Figure 2  Sensorês State Diagram for Security and Survivab ility  Baseês state diagram distinguishes the following three cases Warnings from a Sensor The base is active \(Figure 3\ and received a warning alert from a sensor. The base transits to the  Safe state. If the suspicion is not confirmed, the warning signal is ignored, the base will return to the Active state. In the Safe state, the base will estimate if the data from that sensor conflicts with the data from other sensors. If there is a conflict, the base will transit to the Protected state. In the protected state, the protection mechanism will invoke damagecontrol actions to ignore the data or to have the data analyzed 8    9   1 2  b y th e s y s t em   I f th e d a ta i s ig n o r e d  th e b a s e w i ll return to the normal functioning or the Active state, if not, the base will transit to the Suspended state where the data will be analyzed. When suspended, the base is in the Detected state and the protection mechanism will evaluate the data for possible corruption or lost. In the case of corruption, the base transits to the Corrupted state and the base compensates the illegitimate data. In the case of data lost, the base transits to the  Missed state and the base compensates the compromised data. At the end of the compensation the base will resume the  Active state Sensor Detected The base is active \(Figure 3\ and detects an intruder. The base transits to the Attacked state. In the  Attacked state, the base will evaluate the intrusion [4   1 7   18 an d  tr an s i t  t o th e çP r o t ect ed  s t a t e  I n  th e p r o t ect ed s t a t e the protection mechanism will invoke damage-control actions to ignore the data and take action such as route change [11 r  to have the data analyzed [9   1 2  b y t h e b a s e  I f th e d ata i s  ignored and route change is proposed the base will return to the normal functioning or the Active state; otherwise, the base will transit to the Suspended state where corrective actions will be taken and the data analyzed [12 a n d c o mp e n s a te d   When suspended, the base is in the Detected state and the protection mechanism will evaluate the data for possible corruption or lost. In the case of corruption, the base transits to the Corrupted state and compensates the illegitimate data. In the case of lost, the base transits to the Missed state and compensates the compromised data. At the end of the compensation the base will resume the Active state Base Attacked The base is active and detects an intruder [17    I t  t r a n s i t s t o  t h e  Attacked state, where it will evaluate the intrusion and transit to the Protected state. In the protected state, the protection mechanism invokes damagecontrol actions to ignore the data and take actions such as route change [1 r  t o  ha v e t h e  da t a  a n a l y z e d 9    1 2  b y t h e  system. If the data is ignored and route change is proposed the base will return to the normal functioning or the Active state otherwise, the base will transit to the Suspended state where corrective actions will be taken and the data analyzed and compensated. When suspended, the base is in the Detected  state and the protection mechanism will evaluate the data for possible corruption or loss. In the case of corruption, the base transits to the Corrupted state and compensate the illegitimate data. In the case of loss, the base transits to the  Missed state and compensates the compromised data. At the end of the compensation the base will resume the Active  state 505 


  Normal  Active Corrupted Safe  Start Suspended Missed Corrupt Lost Resume Warned A lert Defensive Attacked Defend Ignore Protect Protected Detected Detect A nalyze Ignore   Figure 3  Sensorês State Diagram for Security and Survivab ility  C  Entities Interaction Diagram The interaction diagram \(Figure 4\ models the behavior of sensor networks by describing users, base and sensors interactions to address security and survivability concerns. The User\(s\ can log in or log out from the system, browse and manage base and sensor information. The Base processes data from sensors or data directly acquired and notifies users Sensors acquire, process and route data to the base. The system operates in one of the following modes Normal mode The SA of the sensor acquires data  AcquireData from the environment. Data is sent to the Sensorês LID SendToLID for evaluation EvalData If there is no warning No Warning    th e d a ta  i s s e n t f r o m  th e  sensor to the intrusion detection component SendToID at the base. Similarly, the SA at the base can also directly acquire data and forward to the intrusion detection component. ID analyses the data CheckData received and detects no security or erroneous data No Error   co n cer n s  Th e d a t a  estimation component is therefore not invoked and data is sent to SendToDSAKM the DSAKM component Warning mode The IAA of the sensor pro-actively senses  Detect a warning Warning    due t o t h e  na t u r e o f t h e da t a  acquired. IAA invokes KM on the sensor to determine  ExtractKey that the data comes from another sensor. If so IAA checks CheckKey the sensorês key returned to verify that the data originator is a legitimate sensor. If the key is not authentic No Key   I A A  n o t i fi e s  NotifyID ID at the base ID interacts with KM on the base to verify VerifyKey the nature of the key. If there is no key or the key is wrong  No/Wrong Key     DSAMK i s n o t i f i e d   NotifyDSKAM to take appropriate actions and the data received w ill be disregarded. If the data originator is authentic ç[Key   I A A  forwards SendToID the warning information to the ID on the base. The ID analyzes the information AnalyzeData to confirm the suspicion. If the suspicion is not confirmed No Warning   th e w a r n in g i s  d i s r e g ar d e d  an d  th e d a t a co n s id e r ed  and forwarded to DSAKM SendToDSAKM as defined in the normal mode. If the suspicion is confirmed, the data may have been damaged Damage   s o I D i n vok e s t h e da m a ge control function DamageControlDE of DE to deal with the case. Depending on the nature of the warning, the damagecontrol invocation may decide to compensate ç[Compensate   the illegitimate data or not ç[Not Compensated  I f th e d ata i s  not to be compensated, it will be disregarded by DE at this point and the DSAKM is notified NotifyDSKAM The DE will solicit the DS AKM to analyze AnalyzeDSAKM the data to determine if the data is corrupted ç[Corrupted  o r  missed Missed     Th e D S A K N w i ll  th e n in v o k e th e  compensation functions Compensate of the DE to compensate for corrupted Corrupt or missed Lost data Attack mode The SA of the sensor acquires data  AcquireData Data is sent to the Sensorês LID  SendToLID for evaluation CheckData If the LID detects an attack Attack   i t  f l a g s th e in tr u s i o n  d e t ectio n  component FlagID at the base. Similarly, the SA at the base can also directly acquire data and flags the intrusion detection component. ID evaluates the intrusion  EvalIntrusion and has to interact with KM on the base to check CheckKey that the data originator is legitimate. If the key is not authentic Wrong Key    DSAKM i s  n o t i f i e d   NotifyDSAKM With appropriate key Key   I D  m a y recommend the system to change the route Route   us e d  by  data to reach the base or to take damage control actions  Damage    t o co r r ect th e d a t a  r ecei v e d   I f th e D E s u g g e s t s a route change, it invokes the DSAKM with RouteChange  function. If not, ID invokes the damage-control function  DamageControlDE of DE to deal with the attack. From there the DE will function as described below for the warming mode As the incoming packet information can no longer be trusted, the data estimation layer is invoked to compensate for the illegitimate or compromised data. It is important to note that even in the warning and attack modes when the network is under threat or attack or suffering from data loss or error, the estimated data \(not the received sensor data\ is sent to the DSAKM component. This process increases the survivability of the system III  M ODEL I NSTANTIATION A ND V ALIDATION  Due to loss and corruption of data caused by intrusions [5   6   n o d e f ail u r e s o r b a tte r y d e p l e tio n  d a t a  may n o t b e  available when needed. Simply requesting sensors to resend the missing data to the base is not always a feasible solution since it will both increase the query response time and consume more computer resources and power from the base and sensors Below we present a validation of the attacked mode A  Instanciation for the Attacked Mode The SA of the sensor has acquired data that has been sent to the Sensorês LID for evaluation. The LID detected an attack and flagged the intrusion detection component at the base. ID evaluated the intrusion after interacted with KM on the base and found out that the data originator is legitimate. Because the key is authentic, DSAKM is not notified 506 


   KM DE   D S AKM No Warni  Se n d T o ID     ID   KM   IAA   LID   SA  SendToLID CheckData  BASE  SENSOR CheckData  No Warnin g  dTo D S A K M  A quireData Normal Key W ar ni ng   Se nd T o I D  VerifyData Warning Attac l agI D   E valIntrusion Attack Corrupt D etect SendToLID CheckData A quireData corrupted  D amageControlDE D isregard L ost Missed  compensate A nalyze Compensate SA  A cquireData  No Warning ndTo ID   A cquireData Atta S e ndT oI D   Damag a m a geC on t r o l D E  key  R out e  Rou t e Cha nge   key D a m a g e  E xtractKey CheckKey No Key Not i f y I D   No/Wrong Key Not i f y D S AKM   E xtractKey CheckKey Wrong Key  N o ti fy D S A K M    VerifyKey Not compensate N otifyDSAK M  l Not compensate   Figure 4 Interaction Diagram for Security and Survivability  Many research projects have been conducted by different organizations regarding wireless sensor networks   1 1      15   h o w e ve r f e w of t h e m d i s c us s  h o w t o e s t i m a t e  t h e  sensor data that are missing because they are lost or corrupted or arrive late when being sent from sensors to the base Traditional methods to handle the situation when data is missing are to ignore them, making sensors send them over. As discussed in [23   t h e s e m e t h o d s a r e  n o t su i t a b l e f o r w i r e l e ss sensor networks. Therefore ID may not recommend the system to change the route used by data to reach the base; instead it will take damage control actions to correct the data r eceived ID invokes the damage-control function of DE to compensate the illegitimate data. At this point the DE solicits the DSAKM to analyze the data to determine if data is corrupted or missed If the data is missed, the DSAKM will then invoke the compensation functions of the DE to compensate for the missing data. A more favorable solution is to estimate the missing data using an efficient data estimation algorithm, so that we can use the estimated results to replace the missing data and respond to queries that require the missing data The DE and DSAKM function to compensate for missing data has been implemented using data mining association rules called FARM \(Freshness Association Rule Mining\. Its goal is to derive estimated values that are not only accurate but also timely and power-aware. This is significant to many applications where exact data may not be necessary and certain approximate data is acceptable, such as traffic management intrusion detection, and network routing. This approach also reduces the chance that real-time applications would miss their deadlines due to lack of data B  FARM Concepts In our earlier work  w e de v e l o pe d t h e W A R M  Window Association Rule Mining\gorithm for estimating missing sensor data. WARM uses association rule mining [21  to identify the related sensors in the current sliding window and then estimates the missing data from a sensor by using the data reported by its related sensors in the window. As an example, a window of 24 hours contains only the sensor readings reported in the last 24 hours. An association rule X  Y \(s, c\ is said to hold if both s and c are above or equal to 507 


a user-specified minimum support and confidence respectively, where X and Y are sensor readings from different sensors, s is the percentage of reading rounds that contain both X and Y, called support of the rule, and c is the percentage of reading rounds containing X that also contain Y, called the confidence of the rule. The task of mining association rules then is to find all the association rules among the sensors which satisfy both the user-specified minimum support and minimum confidence Experimental results show that WARM performs better than the average approach where the average reading reported by all sensors in the window is used for estimation. However WARM treats all sensor readings in the window to be of equal importance regardless of when the readings were obtained, i.e all the sensor readings would contribute equally to the estimation of a missing data value in the current round of readings.    This treatment does not reflect the temporal nature of sensor data in many data stream applications, such as those that use sensors to monitor environmental conditions.  In those applications, the more recent a sensor reading is, the more relevant it is in answering queries that are based on the current sensor data. For example, the temperature collected at 2 PM is more similar to that collected at 2:05 PM than the one reported at 10 PM.  So, to estimate the temperature that was missing i.e. did not get reported\t 2 PM due to a sensor data lateness/loss/corruption, the temperature reported at 2:05 PM should contribute more than the one reported at 10 PM. to the estimation To address the temporal sensor data problem, we have developed a new algorithm, called FARM \(Freshness Association Rule Mining\.  Here, we provide the key ideas and results of FARM; interested readers are referred to r more detailed descriptions.   FARM associates a freshness value, called round weight, to each round of sensor reading The more recent a round of sensor readings is, the higher round weight it has in computing the estimated value for the missing data in the current round. Like WARM, FARM also uses association rule mining to find the relationships between sensors; however, with the inclusion of round weights, the relationships discovered by FARM reflect the temporal correlations between sensors as the time element manifests itself in many data stream applications. After identifying the related sensors through data mining, FARM computes the estimated value of the missing sensor reading based on the weighted average of the current readings of the sensors related to the sensor with the missing reading To reduce space overhead, FARM implements a data structure that compacts raw stream data by means of round weights. Data held in that structure is the result of a formula that creates a mapping between a sequence of raw data and a resultant datum and thus requiring a much less space. Only compacted data is needed for estimation. This makes it possible to hold an efficient number of data rounds, which offers an advantage over the typical sliding window solution used in many data stream mining algorithms. Sliding window approaches typically suffer a tradeoff between a large space requirement and being able to store enough samples to recognize patterns given the chosen window size Additionally, limiting their amount of data stored makes them systematically unfit to answer data stream queries.  With the data compaction scheme, space overhead to compute association rules is reduced, which in turn, reduce access time to data needed to perform data estimation  To recapitulate, it is this duality between the data freshness  and the data compaction scheme as well as their positive implications on the space and time complexities that derive the motive of the FARM method  C. Missing Data Validation for the Attacked Mode Using a climate sensing data set [25 w h er e th e t e m p o r al characteristic of sensor data exists, we have performed experiments comparing FARM, WARM and existing data estimation algorithms: SPIRIT [26 T i n y D B  2 7  S imp le  Linear Regression \(SLR\, Multiple Linear Regression \(MLR Curve Regression \(CE\, and estimation by average \(Avg   The accuracy of the estimation is evaluated using the normalized root mean square error RMSE As shown in Table 1, FARM yields the best data estimation accuracy with 23.43% less error than the second best method \(WARM\ and 98.59% less error than the worst method \(CE  Method RMSEs for Climate Sensing data How many % the best approach is better FARM 0.00487 Best Approach WARM 0.00636  23.43  TinyDB 0.0085 42.71 SPIRIT 0.0116  58.02  Average 0.015  67.53  MLR 0.121  95.98  SLR 0.342  98.58  CE 0.346  98.59  Table 1 RMSEs for Climate Sensing Data Set  IV  C ONCLUSION AND P ERSPECTIVES  This paper proposed a new approach of modeling the collaboration of sensor system artifacts to address the security and survivability concerns of sensor networks. The model considered is composed of sensors, base and users. Sensors are nodes that acquire and process data. Base is the node that acquires and processes data from sensors and provides an interface to access and monitor the sensor network while Users monitor the system. The model proposed has been instantiated and validated using association rule mining to compensate for missing data in order to provide security and survivability to sensor networks. Future work will instantiate and validate other modes presented throughout the paper ACKNOWLEDGMENTS We thank our two collaborators, Dr. Johnson Thomas at Oklahoma State University and Dr. Sandip Sen at Tulsa University, for participating in many discussions of the proposed system model and instantiation 508 


R EFERENCES  1  B. H. Calhoun, D. C. Daly, N. Verma, D. Finchelstein, D D. Wentzloff, A. Wang, S.-H. Cho, and A. P Chandrakasan, çDesign Considerations for Ultra-low Energy Wireless Microsensor Nodes IEEE Transactions on Computers Vol 54\(6\ pp. 727-749, June 2005 2  L. Clare, G. Pottie, and J. Agre. çSelf-Organizing Distributed Sensor Networks SPJE Conference on Unattended Ground Sensor Technologies and Applications pp. 229-237, April 1999 3  T. Wong, T. Tsuchiya, and T. Kikuno, çA Self-organizing Technique for Sensor Placement in Wireless MicroSensor Networks,é in Proc. of 18th International Conference on Advanced Information Networking and Applications AINA\, pp. 78-83, March 2004, Fukuoka Japan, IEEE Computer Society 4  A. Ghosh and S. Sen, çAgent-Based Distributed Intrusion Alert System,é to appear in Proc. 61h International Workshop on Distributed Computing December 2004 5  R. Gopalakrishna and E. H. Spafford, çA Framework for Distributed Intrusion Detection using Interest Driven Cooperating Agents Web Proceedings of the Fourth International Workshop on Recent Advances in Intrusion Detection \(RAID 2001 6  Y. Fu, J. He, G. Li, çA Distributed Intrusion Detection Scheme for Mobile Ad Hoc Networks,é in Proc. of 31 st  Annual International Computer Software and Applications Conference COMPSAC\, Vol. 2,  pp. 7580, 2007 7  W. B. Heinzelman, A P. Chandrakasan, and H Balakrishnan, çAn Application-Specific Protocol Architecture for Wireless Microsensor Networks IEEE Transactions on Wireless Communications Vol. 1, No.4 2002 8  M.-Y. Huang and T. M. Wicks, çA Large-scale Distributed Intrusion Detection Framework Based on Attack Strategy Analysis,é in Web Proc. of the 1st International Workshop on Recent Advances in Intrusion Detection RAID\, 1998 9  A. Abraham, R. Jain, J. Thomas and S. Y. Han, çDSCIDS: Distributed soft computing intrusion detection system Journal of Network and Computer Applications  Vol. 30, pp. 81Ö98, 2007   C. Intanagonwiwat, R. Govindan and D. Estrin. çDirected Diffusion: A Scalable and Robust Communication Paradigm for Sensor Networks,é in Proc. of Annual International Conference on Mobile Computing and Networks MobiCOM\, August 2000   C. Karlof and D. Wagner, çSecure Routing in Wireless Sensor Networks: Attacks and Countermeasures,é Proc of 1st IEEE International Workshop on Sensor Network Protocols and Applications 2003   S. Meguerdichian, F. Koushanfar, M. Potkonjak, and M B. Srivastava, çCoverage Problems in Wireless Ad-hoc Sensor Networs IEEE Infocom Vol 3, pp. 1380-1387 April 2001   P. Papadimitratos and Z. J. Haas, çSecure routing for mobile ad hoc networks,é in SCS Communication Networks and Distributed Systems Modeling and Simulation Conference CNDS\ January 2002   A. Perrig, R. Szewczyk, V. Wen, D. Culler, and J. D Tygar, çSPINS: Security protocols for sensor networks in Proc. of Mobile Networking and Computing 2001   B. S. Snapp and G. D. et al., çDids \(distributed intrusion detection system\ motivation, architecture, and an early prototype,é In Fourteen National Computer Security Conference October 1991   T. Peng, C. Leckie and K. Ramamohanarao, çInformation sharing for distributed intrusion detection systems Journal of Network and Computer Applications Archive  Vol.  30\(3\, pp. 877-899, 2007   E. H. Spafford and D. Zamboni, çIntrusion detection using autonomous agents Computer Networks Vol 34\(4\ 2000   Y. Zhang and W. Lee. çIntrusion Detection in Wireless Ad-Hoc Networks,é in Proc. of the 6th Annual International Conference on Mobile Computing and Networking Mobicom\, 2000   B. Sun, K. Wu, Y. Xiao and R. Wang, çIntegration of mobility and intrusion detection for wireless ad hoc networks: Research Articles International Journal of Communication Systems archive Vol. 20\(6\, pp. 695-721 2007   L. Zhou and Z. Haas, çSecuring ad hoc networks IEEE Network Magazine vol. 13, no. 6, 1999   R. Agrawal, T. Imielinski, and A. N. Swami, çMining Assoc iation Rules between Sets of Items in Large Databases ACM SIGMOD Conference May 1993   M. Halatchev and  L. Gruenwald, çEstimating Missing Values in Related Sensor Data Streams,é in Proc. of Intl Conference on Management of Data January 2005   N. Jiang and L. Gruenwald: CFI-Stream: Mining Closed Frequent Itemsets in Data Streams; ACM SIGKDD international conference on knowledge discovery and data mining, August 2006   L. Gruenwald, H. Chok and M. Aboukhamis, çUsing Data Mining to Estimate Missing Data,é Proceedings of the 7th IEEE International Conference on Data Mining Workshop on Optimization-based Data Mining Techniques with Applications 2007   NASA/JPL Sensor Webs Project http://caupanga.huntington.org/swim/, a ccessed January 2006   S. Papadimitriou,  J. Sun, and C. Faloutsos, çPattern Discovery in Multiple Time-Series International Conference on Very Large Data Bases September 2005   S. Madden, M. Franklin,  J. Hellerstein, and W. Hong TinyDB: An Acquisitional Query Processing System for Sensor Networks ACM Transactions on Database Systems 2005   R. Little and D. Rubin, çStatistical Analysis with Missing Data New York: John Wiley & Sons 1987     509 


D j 222 38 
Return 
Figure 5 Algorithm for reassessing clusters composition for dynamic XML documents  6. Experimental results  To test our proposed method we used XML documents \(20kB and 50kB\xtracted from the   with an average number of levels of 4 Firstly, we clustered the documents to get the initial clusters composition \(Step 1 in framework in Section 3\, using minimum pair-wise distances; at this stage we also stored the distances between documents in the clustering solution together with the set of operations corresponding to each minimum distance. Then, in order to assess the efficiency of Step 2, we applied different percentages of changes to the documents in the clustered solution, in order to obtain new versions The purpose of the tests was to compare, after each set of changes, the time required to reassess the distance between documents using the same method as for the initial clustering \(i.e. full pair-wise comparison of the XML documents\ to the time of reassessing each distance using the method proposed in this paper and formulas in Definitions 5a, 5b and 5c  Figure 6 Test results for 50kB doc \(part 1  We show in Figures 6, 7, 8 and 9 some of the obtained results. They demonstrate clearly that our proposed technique to reassess the distances in dynamic XML clusters is much faster than performing a full pair-wise comparison on all new versions of the clustered documents. This can be explained by our technique: \(i\rforming only a minimum number of calculations and \(b\ reassessing distances only for those pairs of XML documents where at least one of them has changed Figure 8 Test results for 20kB doc \(part 1    Figure 9 Test results for 20kB doc \(part 2   Also, from Figures 6, 7, 8 and 9 it can be noticed that the difference between the full pair-wise and our proposed technique is more evident for higher number of documents modified or for higher percentages of changes applied                  V arious number of medium-sized documents \(50kB affected by 10% changes 0 20 40 60 80 100 51020 number of documents time\(second s    pair-w ise f ull comparison   proposed reassessing technique                50 small-sized documents \(20kB\ affected by various percentages of changes 0 50 100 150 10 20 50 percentage of change time\(second s    pair-w ise f ull comparison   proposed reassessing technique                  20 medium-sized documents \(50kB\ affected by various percentages of changes 0 50 100 150 3 5 10 25 percentage of change time\(second s    pair-w ise f ull comparison   proposed reassessing technique              V ar ious number of small documents \(20kB\ affected by 15% changes 0 10 20 30 40 50 60 51020 number of documents time\(second s    pair-w ise f ull comparison   proposed reassessing technique  
End if 
002 
37 prune edge D i 222 C\222={C 1 222,C 2 222,\205C n\222 222  ______________________________  
 Figure 7 Test results for 50kB doc \(part 2   
39 D i 222,D j 222 40 
 
Next 
455 
455 


 7. Conclusions  In this paper we have proposed an intelligent and efficient technique to reassess the distances between dynamic XML documents when one or all of the initially clustered documents have changed. After the changes, the initial clustering solution might become obsolete - the distances between clustered XML documents might have changed more or less depending on the degree of modifications \(insert update, delete\hich have been applied. Re-running full pair-wise comparisons on the entire set of modified documents is not a viable option, because of the large number of redundant operations involved Our proposed technique allows the user to reassess the pair-wise XML document distances, not by fully comparing each new pair of versions in the clustering solution, but by determining the effect of the temporal changes on the previously known distances between them. This approach is both time and I/O effective, as the number of operations involved in distance reassessing is greatly reduced  References  1  Beringer, J. and H\374llermeier, E., Online clustering of parallel data streams Data and Knowledge Engineering 58\(2\,  2006, 180-204 2  Catania, B. and Maddalena A., A Clustering Approach for XML Linked Documents, Proceedings of the 13th International Workshop on Database and Expert Systems Applications \(DEXA\22202\, IEEE 2002 3  Chen, M.S., Han, J. and Yu, P., Data Mining: An Overview from Database Perspective, IEEE Transactions on Knowledge and Data Engineering vol. 8, 1996, 866-883 4  Cormen, T., Leiserson, C. and Rivest, R Introduction to algorithms, MIT Press, 1990 5  Costa, G., Manco, G., Ortale, R. and Tagarelli, A., A tree-based Approach to Clustering XML documents by Structure, PAKDD 2004, LNAI 3202, 137-148 Springer 2004 6  Dalamagas, T., Cheng, T., Winkel, K.J. and Sellis, T 2004, Clustering XML documents by Structure SETN 2004, LNAI 3025, 112-121, Springer 2004 7  Ester, M., Kriegel, H.P., Sander, J., Wimmer,M. and Xu, X., Incremental Clustering for Mining in a Data Warehousing Environment, Proc.of the 24 th VLDB Conference, New York, USA, 1998 8  Garofalakis, M., Rastogi, R., Seshadri, S. And Shim K., Data Mining and the Web: Past, Present and Future Proceedings of WIDM 99 Kansas, US, ACM 1999 9  Mignet, L., Barbosa, D. and Veltri, P., The XML web : a first study, In Proceedings of the 12 th  International Conference on WWW, 500-510 2003   Nayak, R., Xu, S., XCLS: A Fast and Effective Clustering Algorithm for Heterogeneous XML Documents, In Proceedings of the 10 th Pacific-Asia Conference on Advances in Knowledge Discovery and Data Mining, Singapore, LNCS 3918, 2006   Rusu, L.I., Rahayu, W. and Taniar, D., A methodology for Building XML Data Warehouses International Journal of Data warehousing Mining, 1\(2 67-92, 2005   Rusu, L.I., Rahayu, W. and Taniar D.,  Maintaining Versions of Dynamic XML Documents, In Proceedings of the 6th International Conference on Web Information Systems Engineering, New York NY, USA, November 20-22, 2005, LNCS 3806   Rusu, L.I., Rahayu, W. and Taniar, D., Warehousing Dynamic XML Documents, In Proceedings of the 8 th  International Conference on Data Warehousing and Knowledge Discovery \(DaWaK 2006 LNCS 4081 Springer, 175-184, 2006   Shen, Y. and Wang, B., Clustering Schemaless XML documents, CoopIS / DOA/ODBASE 2003, LNCS 2888, 767-784, Springer 2003   Yoon, J. P., Raghavan, V., Chakilam, V., and Kerschberg, L., BitCube: A Three-Dimensional Bitmap Indexing for XML Documents J. Intel. Inf Syst 17, 2-3 \(Dec. 2001\, 241-254   XML data repository, online at http www.cs.washington.edu / research / projects / xmltk xmldata  
456 
456 


5 Related Work There exists extensive previous work on both the mining of software repositories and on the use of clustering algorithms in software engineering This discussion focuses on the most similar and recent work in the area of software evolution Mining Software Repositories Our technique was partially inspired by the work of Zimmermann et al and Y ing et al 17 on the mining of association rules in change history As described in Section 1 we sought to expand the technique to be able to recommend larger but less precise clusters of elements to guide program navigation Bouktif et al also investigated how to recommend cochanges in software development As opposed to the work cited above Bouktif et al used change patterns instead of association rules Also their approach does not attempt to reconstruct transactions and can consider associated 002les that were changed in different transactions ChangeDistiller is a tool to classify changes in a transaction into 002ne-grained operations e.g addition of a method declaration and determines how strongly the change impacts other source code entities Our approach uses similar repository analysis techniques but is focused on providing task-related information as opposed to an overall assessment of a system's evolution Finally repository mining can also be used to detect aspects in the code In this conte xt aspects are recurring sets of changed elements that exhibit a regular structure Aspects differ from the clusters we detect in the regular structure they exhibit which may not necessarily align with the code that is investigated as part of change tasks Clustering Analysis The classical application of clustering for reverse engineering involves grouping software entities based on an analysis of various relations between pairs of entities of a given version of the system Despite its long and rich history  e xperimentation with this approach continues to this day For example Andreopoulos et al combined static and dynamic information K uhn et al used a te xtual similarity measure as the clustering relation and Christl et al used clustering to assist iterative semi-automated reverse engineering The main dif ferences b e tween most clusteringbased reverse engineering techniques and the subject of our investigation is that the entities we cluster are transactions rather than software entities in a single version of a system For this reason our analysis is based strictly on the evolving parts of the system Both Kothari et al and V an ya et al 15 recently reported on their use of clustering to study the evolution of software systems The idea of using change clusters is the same in both works and ours but the purpose of the work is different Kothari et al use change clusters to uncover the types of changes that happened e.g feature addition maintenance etc during the history of a software system Vanya et al use change clusters which they call evolutionary clusters to guide the partitioning of a system that would increase the likelihood that the parts of the system would evolve independently In contrast we cluster transactions based on overlapping elements not 002les to recommend clusters to support program navigation as opposed to architectural-level assessment of the system Finally Hassan and Holt evaluated on 002ve open source systems the performance of several methods to indicate elements that should be modi\002ed together This study found that using historical co-change information as opposed to using simple static analysis or code layout offered the best results in terms of recall and precision The authors then tried to improve the results using 002ltering heuristics and found that keeping only the most frequently cochanged entities yielded the best results As opposed to our approach the evaluated 002ltering heuristics were only applied on entities recovered using association rules and not using clustering techniques The focus of their study was also more speci\002c as they recommend program elements that were strictly changed  as opposed to recommending elements that might be inspected by developers 6 Conclusion Developers often need to discover code that has been navigated in the past We investigated to what extent we can bene\002t from change clusters to guide program navigation We de\002ned change clusters as groups of elements that were part of transactions or change sets that had elements in common Our analysis of close to 12 years of software change data for a total of seven different open-source systems revealed that less than 12 of the changes we studied could have bene\002ted from change clusters We conclude that further efforts should thus focus on maximizing the quality of the match between the current task and past transactions rather than 002nding many potential matches Our study has already helped us in this goal by providing reliable evidence of the effectiveness of some 002ltering heuristics and useful insights for the development of additional heuristics Acknowledgments The authors thank Emily Hill and Jos  e Correa for their advice on the statistical tests and the anonymous reviewers for their helpful suggestions This work was supported by NSERC 
25 
25 
25 
25 
25 


References  B Andreopoulos A An V  Tzerpos and X W ang Multiple layer clustering of large software systems In Proc 12th Working Conf on Reverse Engineering  pages 79ñ88 2005  S Bouktif Y G Gu  eh  eneuc and G Antoniol Extracting change-patterns from cvs repositories In Proc 13th Working Conf on Reverse Engineering  pages 221ñ230 2006  S Breu and T  Zimmermann Mining aspects from v ersion history In Proc 21st IEEE/ACM Int'l Conf on Automated Software Engineering  pages 221ñ230 2006  A Christl R K oschk e and M.-A Store y  Equipping the re\003exion method with automated clustering In Proc 12th Working Conf on Reverse Engineering  pages 89ñ98 2005  D 020 Cubrani  c G C Murphy J Singer and K S Booth Hipikat A project memory for software development IEEE Transactions on Software Engineering  31\(6 465 2005  B Fluri and H C Gall Classifyi ng change types for qualifying change couplings In Proc 14th IEEE Int'l Conf on Program Comprehension  pages 35ñ45 2006  A E Hassan and R C Holt Replaying de v elopment history to assess the effectiveness of change propagation tools Empirical Software Engineering  11\(3 2006  D H Hutchens and V  R Basili System s tructure analysis Clustering with data bindings IEEE Transactions on Software Engineering  11\(8 1985  D Janzen and K De V older Na vig ating and querying code without getting lost In Proc 2nd Int'l Conf on AspectOriented Software Development  pages 178ñ187 2003  J K ot hari T  Denton A Shok ouf andeh S Mancoridis and A E Hassan Studying the evolution of software systems using change clusters In Proc 14th IEEE Int'l Conf on Program Comprehension  pages 46ñ55 2006  A K uhn S Ducasse and T  G  021rba Enriching reverse engineering with semantic clustering In Proc 12th Working Conf on Reverse Engineering  pages 133ñ142 2005  M P  Robillard T opology analysis of softw are dependencies ACM Transactions on Software Engineering and Methodology  2008 To appear  M P  Robillard and P  Mangg ala Reusing program in v estigation knowledge for code understanding In Proc 16th IEEE Int'l Conf on Program Comprehension  pages 202 211 2008  J Sillito G Murph y  and K De V older Questions programmers ask during software evolution tasks In Proc 14th ACM SIGSOFT Int'l Symposium on the Foundations of Software Engineering  pages 23ñ34 2006  A V an ya L Ho\003and S Klusener  P  v an de Laar and H van Vliet Assessing software archives with evolutionary clusters In Proc 16th IEEE Int'l Conf on Program Comprehension  pages 192ñ201 2008  N W ilde and M C Scully  Softw are reconnaissance Mapping program features to code Software Maintenance Research and Practice  7:49ñ62 1995  A T  Y ing G C Murph y  R Ng and M C Chu-Carroll Predicting source code changes by mining change history IEEE Transactions on Software Engineering  30\(9 586 2004  A Zeller  The future of programming en vironments Integration synergy and assistance In Proceedings of the 29th International Conference on Software Engineering The Future of Software Engineering  pages 316ñ325 2007  T  Zimmermann and P  W eiﬂgerber  Preprocessing C VS data for 002ne-grained analysis In Proc 1st Int'l Workshop on Mining Software Repositories  pages 2ñ6 May 2004  T  Zimmermann P  W eiﬂgerber  S Diehl and A Zeller  Mining version histories to guide software changes In Proc 26th ACM/IEEE Int'l Conf on Software Engineering  pages 563ñ572 2004 A Clustering Algorithm This algorithm is not sensitive to whether a given program element exists or not in a given version of a program For example if method m exists in one version it is considered a valid program element even if it is removed in a later version In the rest of this section we use the term program element to refer to the uniquely identifying representation of the element e.g a Java fully-quali\002ed name Let T be a transaction modeled as a set of program elements changed together during the history of a software system Let T be a sequence of transactions In this algorithm a cluster is also modeled as a set of elements 1 Input  T  A sequence of transactions 2 Parameter  M IN O VERLAP  A positive non-zero value indicating the minimum overlap between two transactions in a cluster 3 Var  C  A set of clusters initially empty 4 for all T i 2 T do 5 MaxOverlap  0 6 MaxIndex  000 1 7 for all C j 2 C do 8 if j C j  T i j  MaxOverlap then 9 MaxOverlap  j C j  T i j 10 MaxIndex  j 11 end if 12 end for 13 if MaxIndex   0  MaxOverlap 025 M IN O VERLAP  then 14 C MaxIndex   C MaxIndex  T i  15 else 16 NewCluster  T i 17 C  C  f NewCluster g 18 end if 19 end for 20 return C B Systems Analyzed System home pages last veri\002ed 7 May 2008 Ant ant.apache.org Azureus azureus.sourceforge.net Hibernate www.hibernate.org JDT-Core www.eclipse.org/jdt/core JDT-UI www.eclipse.org/jdt/ui Spring springframework.org Xerces xerces.apache.org 
26 
26 
26 
26 
26 


