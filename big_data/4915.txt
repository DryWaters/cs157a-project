Rough Set-based Debugging for Web Services System  Chengying Mao School of Software and Co mmunication Engineering Jiangxi University of Finance and Economics 330013 Nanchang, China maochy@yeah.net   Abstract  Web services technology provides a flexible and cost-effective paradigm to construct highly dynamic systems through service discovery composition, and ultra-late binding However, its new features bring great pressure to maintain Web service-based system Based on the massive testing results how to locate the fault points in system is a challenging task. In 
the paper, a two level diagnosis framework for Web services system is proposed. In servi ce unit level, the WSDL interface information is used to construct decision table. In service composition level, the decision information system is built by comprehensively using process specifications and interface information. Then, rule mining algorithm in rough set reasoning is adopted to reveal the input cases associated with service or system failures. How to utilize such rules to locate faults in Web services system is also discussed In addition, two cases are introduced to validate the feasibility and effectiveness of our approach Keywords   Web services; debugging service composition association rule; rough set reasoning 
I I NTRODUCTION  In recent years, service-oriented architecture \(SOA prevalent pattern to construct a new system or integrate the legacy applications. In fact, itês an architecture that represents software functionality as discoverable services on  W e b service  the representative  technology of this software pa ttern, which provides a flexible way for applications to interact with others over network through a set of standards, such as WSDL 4] and  Al though Web services technology has been widely applied in software indu stry, and a lot of Web service systems have been put into use, there are still some 
challenging problems, such as quality assurance of Web service system Since Web service system is composed of some selfdescription, distributed and heterogeneous service units whose code is infeasible for serv ice users, how to maintain such new style software is a troublesome problem in the field of softwa Over the past years, researchers focused on the testing stage, and quite a few testing methods are proposed. Of course, almos t all methods belong to functional testing. Although tes ting is an important means of software quality assurance, the latter stage of debugging should not be ignored In order to reveal the most potential defects in software 
testing organization usually adopt s plenty of test data to execute software. Accordingly the test results produced by such process are also very large. How to use them to locate the bugs is a time-consuming stage at all. Until today, some methods such as statistical analysis and da t a  m i ni ng [81 2   have been utilized to tackle this difficulty. Most of them are based on the trace information \(also called execution spectrum pect to softwareês structura l testing. However, serviceês c ode is infeasible for system developers and maintainers \(i.e., service users\Hence useful information from system testing is very limited for the purpose of defect diagnosis. Under this condition, the 
rational solution is to full y utilize the testing result information to reveal the clu e of potential defects. In the paper, we attempt to adopt rough set reasoning technique to derive the association rule from th e testing information set and then use these rules to locate the fault position with the help of programmi ng slicing technology The rest of this paper is organized as follows: Section 2 describes the back ground information about Web services system and its testing. The overall diagnosis framework is addressed in Section 3, the instrumentation method used to collect execution information is 
also discussed. Then, rough set-based debugging method is proposed in Section 4, and followed by a literature review an d conclusions in Section 5 and 6, respectively II B ACKGROUND  A Web service is defined by the W3C as ça software system designed to supp ort interoperable machine-tomachine interaction over a be  treated as an internet-based application fulfilling a specific task or a set of tasks, which can be combined with other Web services to maintain workflow or  In fact, Web services are usually Web application programming interfaces \(APIs\be accessed over a network such as the Internet, and executed on a remote 
system hosting the requested services. This new technology mainly involves three kinds of shareholders, that is service provider, registration center and service requestor. On the side of service providers, they are responsible for developing service and publishing the service ont o registration center. In general, service code runs on the providerês Web server, and only interface information is stored in registration center. So the source code of Web service is transparent for other two sides. Service requestor uses the standard interface protocol to invoke service through passing the specific context parameters and gathering return value 
2010 IEEE Asia-Pacific Services Computing Conference 978-0-7695-4305-5/10 $25.00 © 2010 IEEE DOI 10.1109/APSCC.2010.63 293 


Service interface information is usually written via Web service description language \(WSD L\3  a XML form at standard drawn up by W3C organization. In this exchange document, the parameter types of input and output are explicitly defined. The data passi ng from service requester to Web server is encapsulated in accordance with the simple object access protocol \(SOAP from the predefined WSDL file, the service provider and requester perhaps may make some agreements about the service invocation and QoS assurance, i.e. service level agreement SLA Due to the code infeasibility for service users, they have to choose the functional \(or black-box\ testing methods to validate service quality. Among them, equivalence class partitioning, boundary value   random testing and combinatorial  are the typical ones. The test cases produced by the above methods usually consists of two parts: input data and expected results \(i.e oracle\ome testing approaches without oracle such as metamo r e also adopted to test Web services system. But this method is not so general for requiring some invariant relations in sy stem specifications As a loose-coupling app lication, Web service-based system is implemented by means of Web services compositions \(WSCs\busin ess workflow is usually modeled by using process languages like WS-BPEL    20 etc. In these business specifications, Web service units are composed together via some specific logics, such as sequence, branch, and parallel In a system, services are usually from different service providers. Therefore, once the failure occurs in WSCs, itês too hard to locate the faulty service unit. The current solutions for testing Web services system are mainly to model the control flow of business workflow in graphical notation at first. Then, control flow testing and data flow testing are carried out according to these construct representations III S YSTEM D IAGNOSIS F RAMEWORK  A Overall Diagnosis Framework In this section, we consider Web services system diagnosis problem in the follo wing two ways: single service debugging and WSCs debugging Single Web service debugging In this case, it should extract interface information from the specifications such as WSDL and SLA, and then use it to build a test driver Because the test cases are generated by the approaches such as equivalence class partitioning and decision table, the produced test results can easily form an information system IS\Accordingly, the failure related association rules can be generated through performing ro ugh set reasoning on IS Web services composition debugging For the system composed of several Web services its diagnosis activity is more complex than the case of single service unit. Even though a service unit itself has no problem, its interaction with other services will cause defect in some cases. For Web service composition, it also needs to analyze interface information for each service in system. Meanwhile, business workflow should be modeled from the process specifications such as BPEL or BPML file. Based on the above information the system can be instrumented to record service invocation and monitor systemês output \(o r exception behaviors\. After achieving each serviceês input parameter and the corresponding system behavior, rough set technique can be adopted to generate the association rules for system failures Finally, the achieved rules can be used for further service configuration checking or service validation on provider side     Figure 1 Diagnosis framework for a single Web service The key step in this intelligent diagnosis framework for Web service-based system is the collection activity for input data and system behaviors. Here, we utilize instrumentation technique to record serviceês input data, and adopt monitoring strategy to gath er system output information B Information Collection In this section, we used BPEL-based WSC to demonstrate the instrument ation for collecting Web service invocation information. For each service invocation, it will appear in the following form invoke name="..." partnerLink portType="..." operation inputVariable Aspect-oriented programming strategy is adopted to record the input parameter of each service port. We designed an aspect to record each serviceês operation invoking. Of course, this specific aspect can also be encapsulated as a service in the whole system. Then, the input data set of each service interface can be further divided into several equivalence classes The normal output of a ser vice operation invoking is usually returned with outputVariable clause or receive statement in BPEL program. All normal outputs are classified into the non-failure case. We utilize the exception handling mechanism in BPEL standard to tackle abnormal exist of whol e system, and classify the failures according to exception types Based on the above treatment, two parts of the collected information all can be divided into the forms of some equivalence classes \(refer to Figure 3 After achieving the above pa rtitioning criterion, we can translate the test cases, which include input data and test 
294 


oracle \(i.e., expected output\e records, the specific inputs are converted into the equivalence class flags, and the failures are also mapped into several types. It is not hard to find that these execution records of test cases can be stored in the form of decision table equivalence class 1 equivalence class 2 equivalence class m exception 1 exception 2 exception k  Figure 3 Demonstration for input data and system behaviors partitioning IV R OUGH S ET BASED D IAGNOSIS  A Basic Concepts of Rough Set Rough set theory proposed by Z. Pawlak in 1982 is a formal method used to tackl e incomplete and undetermined knowledge. Different from the traditional statistic techniques this method doesnêt need the additional and priori knowledge but only uses the information provided by the data itself Based on the direction of set theory, it performs processing on the uncertain knowledge th rough classifyi ng the observed or measured data In general, the decision table \(DT\portant part of knowledge expression system in rough set reasoning. To make the paper self-content, we fi rst review the basis about rough set [21  Definition 1 A knowledge expression system can be denoted as  SUCDVf 002\003 where 12   SXX 002 002   n X is the set of objects A CD 002\003 is the set of attributes which can be divided into co nditional attribute set C  decision attribute set D These two subsets hold restrictions such as CDA 003\002 and CD 004\002\005   V 002   aA a UV 006 is the set of attributeês value, and a V is the range of value of attribute a   f UA V 007\010 is an information function, which assigns a value to each attribute of each object, i.e  aAxU 011\006 006 get   a f xa V 006  As mentioned in Section 3.2, the collected execution information of test cases can be easily transformed into decision table. However, decision table is an important and useful style for expressing informa tion in rough set reasoning Therefore, rough set reasoning technique is very useful to analyze the black-box testing results of Web service-based system Extracting rules from information system is the main task in the field of data mini ng or knowledge reasoning. In general, four kinds of rules can be mined from data, i.e characteristic rule, association rule, discriminant rule, and classification rule. Here, we mainly use rough set-based reasoning to mine association rules from test results, and then employ these rules to program debugging Definition 2 Given an information system  SUC 002\003   DV f and G and H are subset of conditional attributes and subset of decision attributes respectively g h 010 means a decision rule, where g denotes the pre-condition of rule and h denotes post-condition of rule The relation between input and ou tput of program is the typical cause-effect mapping rule For software debuggers the chief task is to find the reason causing software failure When the input and output are converted into the decision table, the cause-effect rule in the form of g h 010 can be easily deduced via rough set reasoning Definition 3 For any two objects yx 012 if the condition   xy x y dC dC dD dD 002\013\002 is satisfied, then we call x d is consistent, otherwise not. Here x d is a rule in system S   x dC is the pre-condition of rule, and  x dD is the postcondition       Figure 2 Diagnosis framework for Web service compositions 
295 


Due to the causes of system failure varies, the debugging rules formed as reason 002 failure type may be inconsistent. In this section we mainly discuss the situation of consistent rules mining. The treatment for inconsistent case will be discussed in the latter section B Debugging for Single Web Service Web services technology was earlier used in e-commerce systems such as Amaze.com. In the online sales system, the most frequent activity is to treat price query. In this subsection, we introduce the price query service to demonstrate the Web service deb ugging with help of rough set reasoning Case Study 1 Suppose there is a Web service unit for querying computer price at pr esent, which can be denoted as Web Service: PriceQuery\(M,V,S,C The first input parameter represents ma nufacturer who can produces computer, the second stands for the variety of computer product, the third is the flag of screen size, and the last one represents which city sells the computer. The possible value can be assigned to input parameter of service unit as expressed in following table T ABLE 1  T ABLE T YPE S TYLES P OSSIBLE V ALUES FOR I NPUT PARAMETERS OF P RICE Q UERY S ERVICE U NIT  No. Parameter Detailed Values 1 manufacturer Lenovo, TCL, Dell 2 variety home PC \(HPC\mputer NB 3 size 15 inch, 14 inch, 12 inch 4 city H In order to test the abo ve Web service, tester should prepare some test cases and observe their execution behaviors. Here, we suppose that testers perform testing on that application with fifteen test cases. Eleven out of them are running without failure, so we denote their output as Succ.é \(see Table 2\ver, the remaining four threw two kinds of exceptions, which are respectively marked with E1 and E2 T ABLE 2  T EST C ASES FOR THE E XAMPLE S ERVICE U NIT P RICE Q UERY  No. Manu Variety Size City Result t 1 Lenovo HPC 15 inch B Succ t 2 Lenovo BC 12 inch H E1 t 3 Lenovo BC 14 inch B Succ t 4 Lenovo HPC 14 inch S Succ t 5 Lenovo NB 12 inch H Succ t 6 TCL BC 12 inch S E1 t 7 TCL HPC 14 inch H Succ t 8 TCL NB 12 inch S Succ t 9 TCL NB 14 inch B E2 t 10 TCL BC 15 inch H Succ t 11 Dell HPC 14 inch B Succ t 12 Dell BC 15 inch H Succ t 13 Dell NB 14 inch B E2 t 14 Dell HPC 15 inch S Succ t 15 Dell NB 12 inch S Succ In order to facilitate the reas oning process, we denote the four parameters with symbols M  V  S and C Accordingly the output parameter is denoted as D Based on the above DT we can find that 1471114     V PosD tttt t 002 is the biggest one in the set of  M Pos D   V Pos D   S Pos D and  C Pos D Hence, the following rule can be derived out  Variety HPC Result Succ 002\013 002 R1 Then, a new decision table \(ref to Table 3\can be rebuilt though removing the records t 1  t 4  t 7 t 11 and t 14  T ABLE 3  T HE N EW D ECISION T ABLE A FTER R EMOVING R ECORD IN  V P os D  No Manu. Variety Size City Result t 2 Lenovo BC 12 inch H E1 t 3 Lenovo BC 14 inch B Succ t 5 Lenovo NB 12 inch H Succ t 6 TCL BC 12 inch S E1 t 8 TCL NB 12 inch S Succ t 9 TCL NB 14 inch B E2 t 10 TCL BC 15 inch H Succ t 12 Dell BC 15 inch H Succ t 13 Dell NB 14 inch B E2 t 15 Dell NB 12 inch S Succ For the new table, we can gain the following classifications through co nsidering the valu es of conditional and decision attributes 26 358101215 913   UD tt tttttt tt 002  2 3 5 6 10 8 9 12 13 15                UIndMV tt t tt tt t t t 002  2 5 3 6 8 9 10 12 13 15                UIndMS tttttttttt 002  2 5 3 6 8 9 10 12 13 15                UIndMC tttttttttt 002  2 6 3 5 8 15 9 13 10 12                UIndVS tt t ttt tt t t 002  21012 3 5 6 815 913                UIndVC tt t t t t tt tt 002  2 5 3 9 13 6 8 15 10 12  UIndSC tt ttt ttt t t 002  It is not hard to find that   VS Pos D is the largest one of the six positive domains. Th erefore, five associate rules can be induced according to the classification  UIndVS as below 12 1 Variety BC Size Result E 002\014 002\013 002 R2 14  Variety BC Size Result Succ 002\014 002\013 002 R3 12  Variety NB Size Result Succ 002\014 002\013 002 R4 14 2 Variety NB Size Result E 002\014 002\013 002 R5 15  Variety BC Size Result Succ 002\014 002\013 002 R6 Among the above six rules, only R2 and R5 are related with Web service failures, so these two rules should be used for the next-step debugging In general, service user \(or called requester\ck th is information to service provider so as to improve the quality of service C Debugging for Web Services Composition Generally speaking, a Web service-based system is constructed by composing quite a few service units. Thus once a failure occurs in the system, it is very hard to judge 
296 


which part or interaction is the source of accident Furthermore, even each Web service has been ensured no problem, we canêt guarantee they can successfully interact with each other. Therefore, debugging for Web service composition is necessary, but a challenging task Case Study 2 Suppose there is a demo Web servicebased system, named TravelDemo Three service units are invoked in this system, that is FlightBook  HotelBook  and Payment and the composition logic can be described by BPEL file as shown in Figure 4. In each Web service, it can receive the input message in the format defined in WSDL file. In this example, all three service have input variables in complex type. For FlightBook service, its input message includes three parts: airC omp \(i.e. airline company seatType \(senior or economics\Type \(direct or transfer\Suppose the input message of service HotelBook consists of two parts, i.e., st arLevel and roomType. The input of service Payment can be divided into two parts: payWay i.e., VISA, Master or Unionpay\ount xml version="1.0" encoding="utf-8 process name="TravelDemo partnerLinks>  ......  </partnerLinks variables>  <variable name="flightRequest  variables sequence  flow sequence> <invoke partnerLink="FlightBook" operation  bookFlight" inputVariable="flightRequest receive partnerLink=" FlightBook " operation flightCallback" variable="flightResp sequence sequence> <invoke partnerLink="H otelBook" operation bookHotel" inputVariable="hotelRequest receive partnerLink=" HotelBook " operation="hotelCallback variable="HotelResp sequence flow  invoke partnerLink="Payme nt" operation="paySubscription inputVariable="payInfo sequence process Figure 4 BPEL program of the TravelDemo system For the diagnosis of WSC the conditional part of decision table of each service should be constructed first then incorporated into a bigger decision table. In the whole DT as shown in Table 4, the deci sion part is the behavior of the whole Web service-based system. Take Web service composition TravelDemo for example, the decision table for system diagnosis include s seven conditional attributes such as airComp, starLevel, and payWay. The observed behavior is the decision attr ibute of whole information system In general, the attribute with discrete value can be easily conducted to form several equi valence classes. But, for the attribute with continues data type, it is hard to partition its value. Its partitioning should de pendent on the maintainerês domain knowledge. For the example system in this subsection, we divide the attri bute of payment amount into three intervals: \(-, 0 M M represents the reasonable threshold of payment for booking flight and hotel symbols + and Ö stand for the positive and negative infinity respectively Another case should be taken into consideration, that is some services are located in different branch structures of BPEL specification. For the reason of branch execution some services can not be invoked so their parameters have no specific value. Here, we assign any value \(denoted as asterisk\he corresponding conditional attributes in decision table After the decision table for whole Web service composition is achieved via th e above method, we can perform the same rough set reasoni ng algorithm to mine the rules associated with system failures D Discussion For the parameter value of each service interface, we adopt the equivalence class met hod to classify it into a specific category. Although it is be neficial to construct decision information table, it will also bring trouble to the further reasoning, that is inconsistent record in decision table Due to the arbitrariness of equivalence partition, two cases with the same input data will produce different output e.g. one can successfully run and the other maybe cause a runtime exception. Accordingly, these two test cases will T ABLE 4  T HE D ECISION T ABLE FOR THE W EB S ERVICE BASED S YSTEM T RAVEL D EMO  FlightBook HotelBook Payment No airComp seatType lineType starLevel roomType payWay amount Result t 1 CZ senoior direct 5_star single VISA 0 Succ t 2 MU economics transfer 3_star standard Unionpay 0 E1 t 3 ZH economics direct 4_star standard Master 0 Succ       t i MU senoior transfer 5_star standard VISA M E2                 t n CZ economics direct 3_star single Unionpay 0 Succ    Here, E1 and E2 denote two exceptions respectively, and M is a threshold value of payment  
297 


bring inconsistent ob jects into decision tab le. To handle the inconsistency in decision ta  proposed a n  algorithm named LEM2 to ex tract rules from that table. Its main idea can be described as below: At first, it computes the super proximity   R X ior   R X  attribute classification X Then we can generate deterministic rules from   R X and probab ilistic rules from   R X The final output rules are the sum of these two kinds of rules The second threaten is the uncertain attribute value problem mentioned in the above subsection. That is to say the value of some attributes is undetermined or arbitrary Fortunately, this case has been studied in the field of intelligent information processing. The typical treatment can be addressed as below: the undetermi ned attribute value can be denoted by *, the corresponding information system \(IS is called incomplete IS. Then, the decision rules can be directly derived from such an incomplete decision table according to the algorithm The last problem is how to locate the faults according to association rules produced by rou gh set reasoning. In service unit level, service providers \(or developers\he traditional program slicing t echnique to find defect. Since Web service is usually written in the common language such as Java or C#, the existing slicing method can handle this matter. In the service composition level, except for the independent debugging of e ach service unit, our previous  oblem. The technical sketch is to build a BPEL program dependence graph through in-depth analysis on the new activity elements such as flow and pick Then the dynamic backward slicing algorithm is proposed to find the statements closely related with the specific value of some variables. For a system failure rule r assume  ii DynSlice v l t is the dynamic slicing results for conditional attribute i v with value t at the line i l in BPEL program. Then, the intersection 1  n ii i DynSlice v l t 002 003 is the suspect statements in BPEL file, where n is the service unit number in whole system V R ELATED W ORK  Software debugging is an impor tant task after the testing activity. In recent years, the automated debugging has aroused lots of interests both in academic and industrial fields. However, the diagnosis or fault localization for Web service-based system has not caused enough attention until today When the source code of program is visible, the methods in machine learning and dat a mining have been adopted to find the knowledge which can assist debugging activity. In order to avoid repetition of debugging activities, Dickinson and Podgurski initially em ployed clustering analysis on failure executions, and sampled several records from each cluster to assist debugging [8   Li and Zhou adopted a nothe r data mining technique, i.e., fre quent item-set mining, to mine usage patterns among the execution records of program elem Other m e thods such as nearest neighbor query  Bayesian reasoning 11 frequent pattern m i ning [12 and statistical me  hav e been widely used for locating faults in program code. The executi on history of statement branch or path is an important evidence to reveal the defects so the spectrum-based method a n  ha ve  been validated as an effective way for software debugging However, the source code of Web service is invisible for service user \(i.e., developer of We b service-based system\in most cases, so the traditional program code-based debugging methods is not suitable for Web service system. Based on our previous work we adopt the rough set reasoning to find the knowledge rules for the depth fault location In the existing fault diagnosis of Web services monitoring-based method [2 is the ty pical one. In this diagnosis model, the sending or receiving information of each service interface is monitoring via embedded object and then compare this information with the expected states to locate the abnormal service unit. L. Ardissono et al. proposed a model-based diagnosis metho d to enhance fault analysis  h ey add to each service a local diagnose r which relates hypotheses about incorrect outputs of itself or incorrect inputs from other services. Meanwhile, a global diagnoser service is used to perform message exchanging and global diagnoses. In add ition, Bayesian network-based me  is also used to identify the m o st likely problematic services in a Web service composition process In our work, another intellig ent analysis technique, rough set reasoning, is introduced to settle Web service debugging problem Generally speaking, program sli cing is a useful fault location technique for software maintainers. In service unit level, the service providers can slice serviceês code to find the potential defects according to the feedback from service requesters. In service composition le vel, the workflow of whole system is usually described in the process specification language such as WS-BPEL and OWL S   In or der to reveal the interaction faults between services  the composition code written in these languages should be analyzed. In a m e thod for slicing BPEL programs in Web service compositions is proposed. When the suspect BPEL code is exposed, the composition logic should be further checked. So the WSC slicing method can be treated as the complement step after achieving the failure association rules VI C ONCLUSIONS  Web services technology is a new pattern for integrating the programs or components over the Internet. Due to its merits such as loose-coupli ng, language independence, and distributed execution, it has been wi dely adopted to construct complex software system. However, the above features bring some inevitable trouble to maintain Web service-based software. In recent years, the researches mainly pay attention to Web service testing techniques But the testing activity is mainly to find the input cases associated with system failures According to the testing results, how to expose the defect point in Web service syst em is still an open problem In the paper, a system diagnosis framework based on rough set reasoning is pr oposed. Two level debugging models, i.e. single service debugging model and Web service 
298 


composition debugging model, are discussed in details. After the decision table is constru cted through collecting WSDL interface information, composition process specification, and testing execution information rule extraction algorithm in rough set reasoning is used to find the rules associated with system or service failures. In a ddition, the feasibility and effectiveness of our approach are validated by two examples and experiments. At present, we onl y consider the debugging problem for the common Web service system, the fault location for semantic Web services should be further explored in the on-going research A CKNOWLEDGMENT  This work was supported in part by the National Natural Science Foundation of China \(NSFC\under Grant No 60803046, China Postdoctoral Science Foundation under Grant No.2007041 0946, the Science Fo undation of Jiangxi Educational Committee under Grant No. GJJ10433, and the Youth Foundation of Jiangxi University of Finance and Economics. The author is grateful to Qiong Zhang for her warm-heart help, and thanks the anonymous reviewers for their insightful comments R EFERENCES  1 W. Han  Integrating Peer-to-Peer into Web Services Master thesis University of Saskatchewan, 2006  W3C Web S e rvi ces Activit y avai lable fro m  http://www w3.org 2002/ws/, accessed on July 2010  W o rld W i de W e b Cons ortiu m  W3C Web Services Description Language \(WSDL\ Version 1.1 March, 2001. Available at http://www. w3.org/TR/wsdl  W o r l d W i de W e b Consor tiu m  W 3C  Simple Object Access Protocol Version 1.2 April 2007, available at http://www.w3.org/TR/soap12  OASIS WSBP EL Technical Co mm i ttee  Web Services Business Process Execution Language, Version 2.0 available at http://docs oasis-open.org/wsbpel/2.0 /wsbpelv2.0.pdf  M. Aoya m a S Wee rawa rana, H Maruya m a and et al W eb  Services Engineering: Promises and Challenges Proc. of ICSEí02  ACM Press, New York 2002, pp. 647-648  C. Liu L. Fei X Yan, and et al., çStatistical Debuggin g: A Hypothesis Testing-Based Approach IEEE Transactions on Software Engineering 2006, vol. 32, no. 10, pp.1-17  W  Dickinson, D. Leon, and A Podgurski, çFinding Failures by Cluster Analysis of Execution Profiles Proc. of ICSEí01 2001, pp 339-348  Z. Li and Y Zhou, çPRM iner: Automatically Extracting Implicit Programming Rules and Detecting Violations in Large Software Code Proc. of ESEC/ FSEí05 2005, pp. 306-315  M. Renieris, and S. P Reiss, çFault LocalizationWith Nearest Neighbor Queries Proc. of ASEí03 2003, pp. 30-39  C. Liu, Z Lian and J. Han, çHow Bayesians Debug Proc. of ICDMí06 2006, pp.382-393  G. D. F a tta, S   Leue, and E. St e g antova D iscri m inative Pattern Mining in Software Fault Detection Proc. of SOQUAí06 2006 pp.62-69  M. J Harrold, G. Rotherm e l, K Sayre, and et al., çAn Empirical Investigation of the Relationship Between Fault-revealing Test Behavior and Differences in Program Spectra Journal of Software Testing Verification and Reliability 2000, vol. 10, no.3, pp. 171-194  D. Jeffrey, N. Gup ta, and R. Gupta Fault Localizatio n Using Value Replacement Proc. of ISSTAí08 2008, pp. 167-178  IBM W e b Services: Taking e-Busi ness to the Next Level White Paper, 2000, available from: http://www.ibm.com/developerworks/cn websphere/ download/pdf/e-businessj.pdf  S. Noikajana, and T. Suwannasart, çW eb Service Test Case Generation Based on Decision Table Proc. of the 8th International Conference on Quality Software \(QSICí08 2008, pp. 321-326  C M a o Per form ing Co m b inator ial Testing on W e b Ser viceBased  Software Proc. of Intíl Conf. on Computer Science and Software Engineering \(CSSEí08 2008, vol.2, pp.755-758  T  Y Chen F.C  Kuo T  H T s e and et al  M eta m or phic T e sting and Beyond Proc. of the 11th International Workshop on Software Technology and Engineering Practice \(STEPí03 2003, pp.94-100  Business Process Managem e nt Initiative Business Process Modeling Language \(BPML November, 2002  W 3 C  OWL-S: Semantic Markup for Web Services Nov. 22, 2004 available from: http://www.w3.org/ Submission/OWL-S  Z. Pawlak, çRoug h Set Intíl Journal of Information and Computer Science vol. 11, 1982, pp. 341-356  Jianhua Dai Research on Rough Set Theory and Its Applications in Knowledge Discovery \(Ph. D. Dissertation Library of Wuhan University, 2003, pp. 97104.   \(in Chinese  M Kry szkiewicz, çRou gh Set Approach to Inco m p l e t e Inform ation Systems Information Sciences 1998, vol. 112, pp. 39-49  C  M a o, çSlicing W e b Ser vicebased Softwar e Proc. of IEEE International Conference on Service-Oriented Computing and Applications \(SOCAí09 Taipei, Taiwan, December 14-15, 2009, pp 91-98  C M a o X Hu and Y L u  T owards a Softwar e Diagnosis M e tho d  Based on Rough Set Reasoning Proc. of the IEEE 8th International Conference on Computer and Information Technology \(CITí08  Sydney, Australia, July 811, 2008, pp. 718-723  I   Gr osclaude  M odelbased M o nitor ing of Co m ponentbased Software Systems Proc. of the 15th International Workshop on Principles of Diagnosis 2004, pp. 155-160  L  Ar dissono L  Console A Go y  and et al Enhancing W e b  Services with Diagnostic Capabilities Proc. of the 3rd IEEE European Conference on Web Services 2005, pp. 182-191  X Fu P Z ou  Z   Shang and et al   Fault Diagnosis f o r W e b Ser vice Composition Based on Bayesian Networké, Computer Applications 2008, vol.28, no. 5, pp. 1095-1097.   \(in Chinese   
299 


        


9 Appendix Fig 6: Forest Cover Types of the U.S. \(Source. USGS National Atlas of US Summary of Forest Cover Type Data Type Multivariate Abstract The forest cover type for 30 x 30 meter cells obtai ned from US Forest Service \(USFS\ Region 2 Resource Information System RIS\ data Data Characteristics The actual forest cover type for a given observatio n \(30 x 30 meter cell\ was determined from US Fores t Service \(USFS\ Region 2 Resource Information System RIS data Independe nt variables were derived from data originally obta ined from US Geological Survey \(USGS\ and USFS data. Data is in raw form \(not scaled\ and contains binary \(0 or 1 columns of data for qualitative independent variables \(wilderness areas and soil types Summary Statistics Number of instances observations 581012 Number of Attributes 54 Attribute breakdown 12 measures, but 54 columns of data \(10 quantitativ e variables, 4 binary wilderness areas and 40 binary soil type variables Missing Attribute Values None 43 


   C4.2 Open GL has excellent documentation that could help the developer learn the platform with ease C4.3 Developer has very little ex perience in working with Open GL platform  For our case study, alternative B i.e. Adobe Director was the most favorable alternative amongst all the three. It catered to the reusability criteria quite well and aimed at meeting most of the desired operational requirements for the system   6. CONCLUSION & FUTURE WORK  The main contribution of this paper is to develop an approach for evaluating performance scores in MultiCriteria decision making using an intelligent computational argumentation network. The evaluation process requires us to identify performance scores in multi criteria decision making which are not obtained objectively and quantify the same by providing a strong rationale. In this way, deeper analysis can be achieved in reducing the uncertainty problem involved in Multi Criteria decision paradigm. As a part of our future work we plan on conducting a large scale empirical analysis of the argumentation system to validate its effectiveness   REFERENCES  1  L  P Am g o u d  U sin g  A r g u men ts f o r mak i n g an d  ex p lain in g  decisions Artificial Intelligence 173 413-436, \(2009 2 A  Boch m a n   C ollectiv e A r g u men tatio n    Proceedings of the Workshop on Non-Monotonic Reasoning 2002 3 G  R Bu y u k o zk an  Ev alu a tio n o f sof tware d e v e lo p m en t  projects using a fuzzy multi-criteria decision approach Mathematics and Computers in Simualtion 77 464-475, \(2008 4 M T  Chen   F u zzy MCD M A p p r o ach t o Selec t Serv ice  Provider The IEEE International Conference on Fuzzy 2003 5 J. Con k li n  an d  M. Beg e m a n   gIBIS: A Hypertext Tool for Exploratory Policy Discussion Transactions on Office Information Systems 6\(4\: 303  331, \(1988 6 B P  Duarte D e v elo p in g a p r o jec ts ev alu a tio n sy ste m based on multiple attribute value theroy Computer Operations Research 33 1488-1504, \(2006 7 E G  Fo rm an  T h e  A n a l y t ic Hier a rch y P r o cess A n  Exposition OR CHRONICLE 1999 8 M. L ease  an d J L  L i v e l y  Using an Issue Based Hypertext System to Capture Software LifeCycle Process Hypermedia  2\(1\, pp. 34  45, \(1990 9  P e id e L i u   E valu a tio n Mo d e l o f Custo m e r Satis f a c tio n o f  B2CE Commerce Based on Combin ation of Linguistic Variables and Fuzzy Triangular Numbers Eight ACIS International Conference on Software Engin eering, Artificial Intelligence Networking and Parallel Distributed Computing, \(pp 450-454 2007  10  X  F L i u   M an ag e m en t o f an In tellig e n t A r g u m e n tatio n  Network for a Web-Based Collaborative Engineering Design Environment Proceedings of the 2007 IEEE International Symposium on Collaborative Technologies and Systems,\(CTS 2007\, Orlando, Florida May 21-25, 2007 11 X. F L i u   A n In ternet Ba se d In tellig e n t A r g u m e n tatio n  System for Collaborative Engineering Design Proceedings of the 2006 IEEE International Symposium on Collaborative Technologies and Systems pp. 318-325\. Las Vegas, Nevada 2006 12 T  M A sub jec tiv e assess m e n t o f altern ativ e m ission  architectures for the human exploration of Mars at NASA using multicriteria decision making Computer and Operations Research 1147-1164, \(June 2004 13 A  N Mo n ireh  F u zzy De cisio n Ma k i n g b a se d o n  Relationship Analysis between Criteria Annual Meeting of the North American Fuzzy Information Processing Society 2005 14 N  P a p a d ias HERMES Su p p o rti n g A r g u m e n tative  Discourse in Multi Agent Decision Making Proceedings of the 15th National Conference on Artifical Intelligence \(AAAI-98  pp. 827-832\dison, WI: AAAI/MIT Press,  \(1998a 15  E. B T riantaph y llo u   T h e Im p act o f  Ag g r e g atin g Ben e f i t  and Cost Criteria in Four MCDA Methods IEEE Transactions on Engineering Management, Vol 52, No 2 May 2005 16 S  H T s a u r T h e Ev alu a tio n o f airlin e se rv ice q u a lity b y  fuzzy MCDM Tourism Management 107-115, \(2002 1 T  D W a n g  Develo p in g a f u zz y  T O P S IS app r o ach  b a sed  on subjective weights and objective weights Expert Systems with Applications 8980-8985, \(2009 18 L  A  Zadeh  F u z z y Sets   Information and Control 8  338-353, \(1965  152 


                        





