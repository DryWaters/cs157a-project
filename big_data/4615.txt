Dynamic Reduction of Query Result Sets for Interactive Visualizaton Leilani Battle Michael Stonebraker Electrical Engineering and Computer Science Department MIT Remco Chang Department of Computer Science Tufts University Abstract Modern database management systems DBMS have been designed to efìciently store manage and perform computations on massive amounts of data In contrast many existing visualization systems do not scale seamlessly from small data sets to enormous ones We have designed a threetiered visualization system called ScalaR to deal with this issue ScalaR dynamically performs resolution reduction when the expected result of a DBMS query is too large to be effectively rendered on existing screen real estate Instead of running the original query ScalaR inserts aggregation sampling or ltering operations to reduce the size of the result This paper presents the design and implementation of ScalaR and shows results for an example application displaying satellite imagery data stored in SciDB as the back-end DBMS Keywords data analysis scientiìc computing interactive visualization I I NTRODUCTION Modern database management systems DBMS are designed to efìciently store manage and perform computations on massive amounts of data In addition scientiìc data sets are growing rapidly to the point that they do not t in memory As a result more analytics systems are relying on databases for the management of big data For example many popular data analysis systems such as Tableau Spotìre R and Matlab are acti v ely used in conjunction with database management systems Furthermore Bronson et al  sho w that distrib uted data management and analysis systems like Hadoop ha v e the potential to po wer scalable data visualization systems Unfortunately many information visualization systems do not scale seamlessly from small data sets to massive ones by taking advantage of these data management tools Current workîows for visualizing data often involve transferring the data from the back-end database management system\(DBMS to the front-end visualization system placing the burden of efìciently managing the query results on the visualizer To avoid this many large-scale visualization systems rely on tting the entire data set within memory tying data analytics and visualization directly to the management of big data However this limits adoptability of these systems in the real world and draws the focus of these systems away from producing efìcient and innovative visualizations for scientiìc data and towards general storage and manipulation of massive query results To address these issues we developed a exible threetiered scalable interactive visualization system for big data named ScalaR which leverages the computational power of modern database management systems to power the backend analytics and execution ScalaR relies on query plan estimates computed by the DBMS to perform resolution reduction or how to dynamically determine how to summarize massive query result sets on the y We provide more details on resolution reduction below ScalaR places a limit in advance on the amount of data the underlying database can return This data limit can be driven by various performance factors such as the resource limitations of the front-end visualization system.We insert a middle layer of software between the front-end visualization system and underlying database management system DBMS that dynamically determines when a query will violate the imposed data limit and delegates to the DBMS how to reduce the result accordingly We rely on statistics computed by the DBMS to quickly compute necessary reduction estimates by analyzing query plans see Section III-A for more information about query plans This decouples the task of visualizing the data from the management and analysis of the data This also makes our design back-end agnostic as the only requirements are that the back-end must support a query API and provide access to metadata in the form of query plans To demonstrate our approach we provide use-cases visualizing earthquake records and NASA satellite imagery data in ScalaR using SciDB as the back-end DBMS In this paper we make the following contributions  We present a modularized approach to query result reduction using query plans for limit estimation and leveraging native database operations to reduce query results directly in the database  We present the architechture for a scalable information visualization system that is completely agnostic to the underlying data management back-end  We present motivating examples for ScalaR using earthquake data and NASA MODIS satellite imagery data  We present initial performance results for using ScalaR to visualize NASA MODIS satellite imagery data 978-1-4799-1293-3/13/$31.00 ©2013  IEEE 


A Related Work In an effort to push data management outside of the visualization system and into the back-end DBMS several existing techniques and systems provide functionality for reducing the amount data visualized For example Jerding et al 5 compress entire information spaces into a given pixel range using pixel binning and color cues to denote pixel overlap in the reduced visualization Elmqvist et al  use hierarchical aggregation to reduce the underlying data and reduce the number of elements drawn in the visualization Hierarchical aggregation transforms visualizations into scalable multilevel structures that are able to support multiple resolutions over the data Another prevalent technique for data reduction in data analytics and visual analysis is building OLAP cubes to summarize data T o produce OLAP cubes the underlying data is binned and simple statistical calculations such as count and average are computed over the bins Liu et al use this technique in the imMens system to reduce data in the back-end DBMS which combined with front-end WebGL optimizations allows imMens to draw billions of data points in the web browser Hellerstein et al  9 10 present an alternati v e approach to data reduction through incremental progressive querying of databases Progressive querying initially samples a small set of the data to quickly produce a lowaccuracy result Over time the database samples more data to improve the accuracy of the result Users can wait for the query to nish for complete results or stop execution early when the result has reached their desired error bounds Fisher et al  re visit this approach in greater detail with simpleAction focusing on applying iterative query execution to improve interactivity of database visualizers simpleAction visualizes incremental query results with error bounds so the user can stop execution when theyêve reached their desired accuracy level Instead of waiting for the user to specify when to stop execution Agarwal et al present a different approach to fast approximate query execution in their BlinkDB system BlinkDB e x ecutes queries o v e r stratiìed samples of the data set built at load time and also provides error bounds for query results ScalaR provides data-reduction functionality that is similar to the systems described above However ScalaR also provides functionality to specify a limit on the amount of data the DBMS can return in advance and dynamically modiìes the reductions accordingly This allows the frontend to specify more or less data on-the-îy with minimal knowledge of the back-end DBMS As a result ScalaR provides more exibility in choosing techniques for data reduction as reduction techniques can be added to the backend without modifying the front-end In addition the user is not responsible for building summaries or samples of the data in advance thus reducing the level of expertise   Figure 1 ScalaR system architecture required to manage the back-end DBMS for visualization with ScalaR II A RCHITECTURE ScalaR has 3 major components a web-based front-end a middle layer between the front-end and DBMS and SciDB as the back-end DBMS see Figure 1 They are described in detail below A Web Front-End We implemented a web-based front end using the D3.js Ja v ascript library to dra w the visualizations ScalaR supports scatterplots line charts histograms map plots and heat maps The Google Maps API is used to draw map plots The user inputs a query into a text box on the screen and selects a visualization type through a drop-down menu The user can also specify a resolution for the result i.e how many total data points they want the query result to return via a drop-down menu After choosing the visualization the user is given a second set of optional menus to specify characteristics of the visualization For example what attributes in the query results correspond to the x and y axes ScalaRês architecture supports pan and zoom functionality both of which trigger new dynamic queries over the DBMS to retrieve missing data as the user explores the data set B Intermediate Layer The intermediate layer consists of server code that takes user queries from the front-end dispatches queries to the DBMS and prepares the resulting data for consumption by the front-end Before dispatching user-deìned queries to the DBMS the intermediate layer retrieves the proposed query plan from the DBMS and uses this information to compute the expected size of the result The intermediate layer uses this calculation to decide whether to insert a resolution reduction operation into the original query See Section III-B for a list of resolution reduction operations Query results are stored in a result cache for future use A straight-forward eviction policy such as LRU is used to remove old data from the cache 


C DBMS Due to itês ease of use with scientiìc data sets SciDB is the primary back-end DBMS used in ScalaR SciDB is geared towards managing large-scale array-based data Users specify the dimensions of the matrix and the attributes of each element in the matrix see Section IV-A for examples of SciDB queries However ScalaR is database agnostic in design and can be extended to support a variety of data management systems SciDB stores data as multi-dimensional matrices Users specify the dimensions of the matrix and the attributes of each element in the matrix SciDB supports two languages for querying the data Array Functional Language AFL or the SQL-like language Array Query Language AQL When writing queries the attributes and dimensions can be thought of as columns and elements in the matrix as tuples The combined dimensions act as keys for elements in the matrix see Section IV-A for examples of SciDB queries SciDB is selected as the primary DBMS for ScalaR because the array-based structure affords some native operations that are fast and efìcient for typical visualization tasks with large scientiìc data set Basic resolution reduction techniques such as ltering and sampling can be implemented directly for most database management systems with native operations III R ESOLUTION R EDUCTION In this section we describe the general resolution reduction techniques used to develop ScalaR and how they are implemented using SciDB as the back-end DBMS A Retrieving Metadata From the Query Optimizer Almost all DBMS have a query compiler which is usually responsible for parsing interpreting and generating an efìcient execution plan for queries The query compiler usually includes a component called the query optimizer which is the principal unit for improving query performance Metadata must be calculated in order for the query optimizer to produce accurate estimates for query plans over the given data set This metadata includes statistics about the data set and other useful information such as the estimated number of cells or tuples to be produced by the query Modern DBMS are designed to produce query plans very cheaply in terms of time and resources Statistics and other various properties of the data are calculated and stored when the data is loaded and during the execution of queries Query optimization in itself is a very important research problem within the database community and is thus outside the scope of this paper However it is hopefully clear that executing commands to retrieve query plans is signiìcantly cheaper than executing expensive queries over gigabytes of data or more Most DBMS expose some amount of metadata from the query optimizer to users in the form of special commands For example PostgreSQL provides this functionality via the EXPLAIN command which provides the user with query plan information SciDB exposes query plan information through the explain_logical and explain_physical commands Suppose we have an earthquake data set stored in SciDB in an array named earthquake  and you want to see how SciDB will execute the same query scan\(earthquake The scan operation in SciDB is the same as  SELECT   syntax in relational databases To generate a query plan we execute the following in SciDB explain_physical\(êscan\(earthquake This produces the following query plan pPlan schema earthquake datetime:datetime NULL DEFAULT null magnitude:double NULL DEFAULT null latitude:double NULL DEFAULT null longitude:double NULL DEFAULT null x=1:6381,6381,0,y=1:6543,6543,0 bound start 1 1 end 6381 6543 density 1 cells 41750883 chunks 1 est_bytes 7.97442e+09  The whole schema of the resulting array is provided beginning on line two of the query plan The dimensions of the array are x  and y  given by  x=1:6381  and  y=1:6543 in the dimension description We also see from this dimension description that the resulting array will be 6381 by 6543 in dimension SciDB also provides the bounds of the array explicitly in  bound start 1 1 end 6381 6543  The attributes of the array are provided on the lines just before the dimension description datetime  magnitude  latitude  and longitude  SciDB attributes are similar to columns in relational databases The number of cells in the array is 41750883 given by  cells 41750883  on the last line of the query plan The number of SciDB chunks used by the array SciDBês unit of storage on disk is 1 given by  chunks 1  on the same line The estimated number of bytes to store the result is given by  est_bytes 7.97442e+09  Query plans are essential to databases because they provide valuable information about how the query will be executed and help the database reason about the relative cost of various query operations For the user query plans provide insight and additional information about the query that is very difìcult for humans to reason about without any prior experience with the data set or previous query results to reference Lastly this information costs very little to retrieve from a modern DBMS compared to executing the 3 


query directly especially when working with massive data sets B General Resolution Reduction Techniques There are two issues many existing visualization systems face when drawing very large data sets Current systems have to spend a considerable amount of time managing data which becomes increasingly problematic with more and more data Also these systems lack effective tools for automatically aggregating results Therefore there may be so many objects to draw on the screen that the resulting visualization is too dense to be useful to the user There are two commonly-used approaches to handling large amounts of data stored in a DBMS that we have automated sampling a subset of the data or aggregating the data  i.e GROUP BY queries When the data set is dense aggregation signiìcantly reduces the resulting number of points by grouping points by proximity When the data is sparse it is difìcult to gauge the distribution of data across the array Sampling results in a subset of data of predictable size that is independent of the distribution of data in the underlying array When criteria is known for identifying nonrelevant data ltering the data directly is also an option Each reduction technique takes an implicit parameter n speciìed by the Intermediate Layer that is adjusted based on the desired result set size The techniques are as follows  Aggregation Group the data into n sub-matrices and return summaries over the sub-matrices Summary operations include sum average and max/min  Sampling Given a probability value p  return roughly that fraction of data as the result where p   data   n  Most databases already support this operation  Filtering Given a set lters over the data return the elements that pass these lters These lters are translated into WHERE clause predicates The rest of this section describes in detail how ScalaRês intermediate layer retrieves and analyzes query metadata from the DBMS and manages resolution reduction C Analyzing SciDB Query Plans for Resolution Reduction We describe in this section how the intermediate layer estimates resolution reduction calculations with SciDB as the back-end DBMS When ScalaRês front-end receives a query and desired resolution from the user this information is rst passed to the intermediate layer ScalaRês intermediate layer then requests query plan information for the userês query from the DBMS using the commands described in Section III-A ScalaR extracts the estimated size of the query result from the resulting query plan information and compares this value to the userês desired resolution If the estimated size is larger than the resolution value the intermediate layer sends a response to the front end indicating that the estimated size of the result is larger than the userês desired resolution The front-end then notiìes the user that the result will be too big and gives the user the option of choosing a resolution reduction approach to produce a smaller result or to return the full result anyway without any form of resolution reduction See Section III-B for more information on resolution reduction techniques Note that ScalaR is estimating using only query plan information at this point and no queries have been performed on the actual data set If the user decides not to reduce the result the intermediate layer dispatches the userês original query for execution on the database formats the results and returns the formatted results to the front-end for visualization If the user chooses a resolution reduction technique ScalaR performs estimation calculations before sending any queries to the DBMS and thus no costly operations need to be performed on the original data set while the intermediate layer is constructing the nal query incorporating resolution reduction 1 Aggregation Given a d dimensional SciDB array A and desired resolution n  ScalaR aggregates over A by dividing A into at most nd dimensional sub-arrays performing a summary operation over all sub-arrays and returning the summary results Examples of summary operations over the sub-arrays include taking the sum average or standard deviation across all elements in the sub-array As described in Section II-C SciDB already has a native operation called regrid that will perform aggregation automatically However SciDB does not take the number of desired sub-arrays n as input and instead requires the desired dimensions of the sub-arrays For example to divide a 2-dimensional 16 by 16 array into 16 sub-arrays using regrid  ScalaR needs to specify sub-array dimensions such that each sub-array contains 16 elements each This can be achieved by setting the sub-array dimensions to be 4 by 4 Sub-array dimensions of 2 by 8 or 1 by 16 will also result in 16 sub-arrays total Note that dimensions in SciDB have a speciìc order so the ordering of the sub-array widths matters For example using 2 by 8 sub-arrays will not produce the same result as using 8 by 2 sub-arrays To reduce A to the desired user resolution n  ScalaR needs to aggregate over A to create A  such that  A   n  The simplest approach is to assume that the same number of sub-arrays should be generated along every dimension To do this ScalaR rst computes the d th root of n  which we refer to as n d  ScalaR then computes s i  or the sub-array width along dimension i  for all dimensions i by dividing the width of A along dimension i by n d  2 Sampling When a user requests that data be sampled to reduce the resolution ScalaR returns a uniform sample of the result Most DBMS already provide their own uniform sampling operations SciDBês bernoulli function performs uniform sampling over a given array A with sampling rate p and seed where 0  p  1 The seed used is a default global variable chosen by us 4 


a Original query b Aggregation c Sampling d Filtering Figure 2 Map plots for a query manipulated using several resolution reduction techniques To reduce A to the desired user resolution n  ScalaR needs to sample over A to create A  such that  A   n  ScalaR computes the sampling rate p as the ratio of resolution n to total array elements  A  or p  n   A   If the resulting number of points in the sampled A  is greater than n  ScalaR randomly removes  A   n points from A   3 Filtering Currently the user speciìes explicitly via text what lters to add to the query These lters are translated into SciDB filter operations Note that extensive work has already been done in creating dynamic querying interfaces where users can specify lters without writing their own SQL queries Thus it is straightforward to extend ScalaRês front-end to incorporate a dynamic querying interface for specifying lters in a more intuitive way IV M OTIVATING E XAMPLES We now present two use cases that demonstrate how ScalaR addresses the issues presented in Section I A Earthquake Data Suppose a user of the ScalaR system wants to plot earthquake data to see the distribution of earthquakes around the world She inputs the following query and requests a map plot of the results select latitude longitude from quake The user has stored in SciDB a 6381 by 6543 sparse array containing records for 7576 earthquakes The schema is as follows quake\(datetime magnitude depth latitude longitude region Figure 3 Zoom on regions 2 and 3 over ltered query results Array attributes are listed in the parentheses followed by dimensions in brackets The dimensions x and y represent a 2-dimensional mesh of the latitude and longitude coordinates to take advantage of spatial locality when storing the data points as a SciDB array Note also that every record in this example data set has a unique pair of latitude and longitude points for convenience The user picks 3 major regions of interest in this plot identiìed by the three boxes drawn in Figure 2a Region 1 covers Asia and Australia Region 2 is the Alaska area and region 3 is the west coast of the US excluding Alaska Figure 2a shows a classic over-plotting problem with map visualizations where each recorded earthquake is represented as a red dot Region 1 in Figure 2a appears to contain at least 25 of the plotted earthquakes In addition the points in region 2 cover a larger area of the plot so region 3 seems to have less seismic activity than region 2 However this plot is misleading All 7576 earthquakes are plotted but overplotting obscures the true densities of these three regions 5 


Ignoring overlap with region 2 region 1 actually contains only 548 points or less than 8 of all plotted earthquakes Region 2 has 2423 points over 30 and region 3 4081 points over 50 Thus region 3 actually contains over 50 more points than region 2 This scenario lends itself to two separate goals for resolution reduction If the physical over-plotting of points on the map is the motivating factor the reduction can be driven by the width and height of the visualization canvas As in the case of this example the volume of data being returned by the back-end DBMS can also be motivation for resolution reduction which affects many performance-related factors such as limited bandwidth latency and rendering speed Now suppose we ask ScalaR to reduce the matrix size of quake from 6381 by 6543 to 40000 maximum using aggregation ScalaR rst takes the d th root of n to compute the number of subarrays along every dimension n d see Section III-C for more information n d     40000  where d is the number of dimensions 2 and n is our desired resolution 40000 n d is 200in this example ScalaR then computes the width of each dimension i of the sub-arrays by dividing the original width of i by n d  s 1   6381  200   s 2   6543  200  In this example s 1  32 and s 2  33 ScalaRês aggregation calculations produce the following query select avg\(latitude avg\(longitude from select latitude longitude from quake regrid 32 33 where ScalaR uses SciDBês regrid statement to reduce the result This query tells SciDB to divide quake into subarrays with dimensions 32 by 33 alongx and y The subarrays are summarized by taking the average of the latitude coordinates and the average of the longitude coordinates within in each subarray The resulting array has 2479 nonempty cells and Figure 2b shows the resulting plot Note that most cells are empty as most earthquakes occur in speciìc concentrated areas quake s dimensions represent latitude and longitude ranges With aggregation ScalaR was able to produce a visualization that is very similar to the original with less than one third the number of points Figure 4 Overview visualization of the ndvi_points array Now suppose we ask ScalaR to perform sampling over quake  using the number of points produced using aggregation as the threshold ScalaR computes the sampling rate to be the desired resolution divided by the size of the original data set p  n  quake   2479 7576 In this example p is 0.327.Sampling to reduce the resolution produces the following query select latitude longitude from bernoulli select latitude longitude from quake 0.327 1 where the original query is wrapped in a SciDB bernoulli statement and the default seed is 1 This query tells SciDB to randomly choose points from quake where each point is chosen with a probability of 0.327.In this case sampling results in 2481 data points which ScalaR prunes to 2479 to satisfy the threshold conditions by randomly choosing 2 points to remove from the reduced result Figure 2c shows a plot of the query result Like aggregation sampling produces a visualization very similar to the original visualization with considerably less data Now that the user has identiìed the regions with the most earthquakes she can lter the data in favor of these regions This results in the following query to retrieve points in regions 2 and 3 shown in Figure 2d select latitude longitude from quake where lat  20 and lon  100 or lon  170 As shown in Figure 3 she can then zoom into regions 2 and 3 to see the distribution of earthquakes in more detail B Visualizing Satellite Image Data We implemented an example application that visualizes query results for normalized difference vegetation index NDVI calculations over a subset of NASA satellite imagery data The data set was roughly 27GB in size covered the state of California and was stored in a single twodimensional sparse matrix called ndvi_points in SciDB The schema was as follows ndvi_points\(ndvi  The latitude and longitude coordinates were used to dimension the array and the NDVI calculations were stored as an attribute of the array The NDVI calculations were visualized as heatmaps and aggregation was used to reduce the resolution of the data Consider the scenario where the user wants an overview of the NDVI data over the southern California coast The user rst writes a query to retrieve all data from ndvi_points  select ndvi from ndvi_points 6 


a 1,000 points resolution b 10,000 points resolution c 40,000 points resolution Figure 5 Zoom on the California region of the ndvi_points array at 1,000 10,000 and 40,000 points resolution Without resolution reduction this query returns over one billion points In addition the actual dimension ranges of the array are on the order of millions which would result in a sparse heatmap with over one trillion cells This is clearly too large of an image to draw on the screen so ScalaR prompts the user to reduce the resolution Using aggregation ScalaR produces an initial visualization at a resolution of about 1000 points shown in Figure 4 Resolution refers to the size of the query results being drawn so Figure 4 shows the result of reducing the data down to a 33 by 33 matrix see Section II This visualization clearly shows the arrayês sparseness and reveals a dense area of data in the array Now the user zooms in on the dense portion of the array by highlighting the area with a selection box and using the zoom-in button The resulting visualization at a resolution of 1000 points is shown in Figure 5a The general shape of the western coast of California/Northern Mexico is apparent but the user may want the image to be clearer Figures 5b and 5c show the results of increasing the resolution to 10000 and 40000 points respectively where the identity of the region is very clear in both images The user can now clearly identify the desired southern California region and zooms in to the Los Angeles Santa Barbara area as shown in Figure 6 To perform the same tasks without ScalaR the user would have to write aggregation queries manually over the data set She has to manually identify the desired region of the array to visualize and perform her own calculations to determine a reasonable resolution for the results She may also need to store the query results in a separate le to load into her desired visualization system The user also resorts to trial and error potentially repeating the above steps many times before nding her desired region and resolution for the image ScalaR eliminates the need to manually write queries to reduce the resolution of the data providing the user with more information quickly and easily V P ERFORMANCE We used a 2-node SciDB cluster to run the following experiments Each node had 50GB of RAM 32 cores and a 1,000 points resolution b 10,000 points resolution Figure 6 Zoom on LA area at 1,000 and 10,000 points resolution  Resolution Aggregation Runtime s Sampling Runtime s 1,000 89.55 1.95 10,000 87.22 1.94 100,000 88.71 24.52 1,000,000 98.58 133.68 10,000,000 132.32 176.58 100,000,000 1247.78 186.90 1,000,000,000 3692.02 296.83 Baseline 210.64 Table I R AW RUNTIME RESULTS IN SECONDS FOR AGGREGATION AND SAMPLING QUERIES OVER THE NDSI 1 ARRAY  WITH VARIOUS RESOLUTION VALUES E XECUTION TIME FOR A FULL SCAN OVER NDSI 1 IS PROVIDED FOR REFERENCE  LABELED AS THE BASELINE  10.8TB of disk space SciDB was limited to using at most 75 of the available memory per node as recommended by the SciDB Userês Guide b u t the operating system still had access to all available memory We measured the execution times of aggregation and sampling queries over a single SciDB array containing Normalized Difference Snow Index calculations NDSI for the entire world which where computed over roughly one week of NASA MODIS data The normalized difference snow index measures the amount of snow cover on the earth at a given latitude-longitude coordinate For the rest of this section we will refer to this array as ndsi1  The ndsi1 array was roughly 209GB on disk when stored directly inside SciDB and 85GB when stored as a compressed SciDB binary le ndsi1 was a sparse array containing over 2.7 billion data points stored across 673,380 different SciDB chunks We varied 7 


   Figure 7 A comparison of aggregation and sampling on the ndsi1 array with various data thresholds the resolution threshold  i.e maximum output size from one thousand to one billion data points and measured the runtime of the resulting SciDB aggregation and sampling queries dispatched by ScalaR As a baseline for comparison we also measured the execution time for a full scan of the ndsi1 array  i.e  SELECT  FROM ndsi1  We present runtime results in Table I and a log-scale comparison of aggregation and sampling in Figure 7 Our preliminary results show that basic aggregation and sampling are effective in reducing output size and execution time for most recorded output sizes We see in Figure 7 that reducing the resolution of ndsi1 via sampling either signiìcantly improves performance or is on par with the baseline Aggregation performs better than or as fast as the baseline for most resolution sizes but slower than sampling We also see that performance plummets at the highest resolution sizes Aggregationês slower performance is due in part to the fact that the ndsi1 array is sparse Aggregation computes over logical array ranges making it less efìcient when reducing sparse arrays In addition as the resolution increases aggregation performs even more operations per SciDB chunk Chunks are SciDBês unit of storage on disk At resolutions of 100 million and one billion data points aggregation is executing hundreds or more operations per chunk causing aggregationês poor performance Note that our simple reduction algorithms require reading virtually the entire data set limiting their performance We plan to implement more efìcient reduction techniques in the future and compare their performance to our basic algorithms VI C ONCLUSIONS AND F UTURE W ORK We presented the design and implementation of ScalaR an information visualization system that dynamically performs resolution reduction to improve query execution performance of clusters running a distributed DBMS ScalaR uses aggregation ltering and/or sampling operations to downsize query results as necessary to reduce completion time while still producing visualizations close in accuracy to the original result We presented preliminary performance results for ScalaR visualizing satellite imagery data stored in SciDB We plan to make several optimizations in ScalaRês design starting with the 2 following approaches The rst is to use machine learning techniques over existing visualizations found on the web to learn how to choose appropriate visualization types for user query results automatically Second we plan to incorporate prefetching in the middle layer of our architecture using feedback from the front-end about user interactions for example whether the user just zoomed in or the direction the user is panning through the visualization R EFERENCES  T ableau softw are  http://www tableausoftw are.com May 2012  T ibco spotìre  http://spotìre.tibco.com May 2012  H V o et al  Parallel visualization on large clusters using mapreduce in Large Data Analysis and Visualization LDAV 2011 IEEE Symposium on  2011 pp 81Ö88  Hadoop  http://hadoop.apache.or g  D Jerding and J Stask o The information mural a technique for displaying and navigating large information spaces Visualization and Computer Graphics IEEE Transactions on  vol 4 no 3 pp 257Ö271 1998  N Elmqvist and J Fek ete Hierarchical aggre gation for information visualization Overview techniques and design guidelines IEEE Trans on Visualization and Computer Graphics  vol 16 no 3 pp 439Ö454 2010  S Chaudhuri and U Dayal  A n o v ervie w o f data w arehousing and olap technology SIGMOD Rec  vol 26 no 1 pp 65Ö74 Mar 1997  J M Hellerstein et al  Online aggregation SIGMOD Rec  vol 26 no 2 pp 171Ö182 Jun 1997  P  J Haas and J M Hellerstein Ripple joins for online aggregation SIGMOD Rec  vol 28 no 2 pp 287Ö298 Jun 1999  J M Hellerstein et al  Interactive data analysis The control project Computer  vol 32 no 8 pp 51Ö59 Aug 1999  D Fisher et al  Trust me iêm partially right incremental visualization lets analysts explore large datasets faster in Proceedings of the 2012 ACM annual conference on Human Factors in Computing Systems  ser CHI 12 New York NY USA ACM 2012 pp 1673Ö1682  S Agarw al et al  Blinkdb queries with bounded errors and bounded response times on very large data New York NY USA ACM 2013 pp 29Ö42  M Bostock et al  D3 Data-driven documents IEEE Trans Visualization  Comp Graphics Proc InfoVis  2011  Google maps api  https://de v elopers.google.com/maps May 2012  P  Cudre-Mauroux et al  A demonstration of scidb a science-oriented dbms Proc VLDB Endow  vol 2 no 2 pp 1534Ö1537 Aug 2009  Scidb user s guide v ersion 13.3  2013 Online A v ailable www.scidb.org 


001 002\001\001 9?:\001 021\f84+\026\033#\001 022\0234\030$'\005\026'\005*+\035\005D\024\024/.L\001 D\026\036\035\025\026+\024\024&\001 024\032\001 001 J\035+\02614\025$\033\001G\026\027\027\026\024'\0058411\035\027\027\005$'&\0058$\032\035*0#\001$'&\001*+\035\001U\024\025\035\001\024\032\001 035\001\0234\030$'\001@$1*\024\033.#\0017\0244\033'$\025\001\024\032\001;\026\0331\033$\032*#\001*\024\0012\035\001/42\025\026\027+\035&\001 9\b:\001 021\f84+\026\033#\001 023\024%\001 024\001 G$\036\035\001 001 N\035-\0261\035\001 026'*\024\001 001 E\033\024&41*L\001 11\035\025\035\033$*\035&\001 D\026\032\035\001 6\035\027*\026'\(\001 020*=\027\001 U\024\025\035#\001 033\02624*\035\027#\001 Q+$\025\025\035'\(\035\027#\001 E\026*\032$\025\025\027#\001 001 020'*\035\033$1*\026\024'\001 026*+\001 W4$\025\026\032\0261$*\026\024'\001 6\035\027*\026'\(.#\001\026'\001\021\f\00184+\026\033#\001QE\001C\024'\(#\001XQ\001D\035\035#\001\035&\027\f\001,G\0261\033\024\005\001 001 A/*\024\005\021\025\0351*\033\024'\0261\001 G$*\035\033\026$\025\027\001 001 8*\03341*4\033\035\027L\001E+0\027\0261\027#\001 G\0351+$'\0261\027#\001 N\035\027\026\('#\001 E$1\036$\(\026'\(#\001 U\035\025\026$2\026\025\026*0.#\001 8/\033\026'\(\035\033#\001 017\r\r\003\f\001 9\003:\001 X\f\001 023\f\001 G\0261+\025\026'\001 001 034\f\001 034\033$2$\033'\026\036#\001 022Q\024\030/$\033\026\027\024'\001 8\035H4\035'*\026$\025\001 6\035\027*\026'\(\001 032\024\033\001 U\035\025\026$2\026\025\026*0L\001 0213$1*\001 Q\024\030/4*$*\026\024'\001 024\032\001 AQ\001 001 8M#\022\001 035\r\007\024\006\017\016\r\003\004 007\024\033\004 035\f\b\f\025\016\021\0212\024\005\025\007\003\005\016\024 001 024\025\f\001\003#\001'\024\f\001\017#\001//\f\001\017\002?\005\t\r\t#\001\017\r\r\b\f\001 9\004:\001\001 C\f\001 f\001 M\035\025\027\024 004 8\025\025\f\b\f\r\007\003\f\033\004 035\f\006\003\005\024\0226\004 006\003\007\003\005\006\003\005\025\007\b\004 021\016\033\f\b\006\032\004 003 f\006\003\004\017\b\007\024\006\032\004\007\024\033\004\033\007\003\007\004\007\024\007\b\n\006\005\006 L\0017\024+'\001C\026\025\0350#\001\006\002\002\r\f\001 9 002:\001 f\001 7\035\033\0330#\001 002\024\003\r\016\0332\025\003\005\016\024\004 003\016\004 002\024\003\f\022\r\007\b\004 A2\007\003\005\016\024\006\004 t\005\003\023\004 8 017\017\b\005\025\007\003\005\016\024\006 001\017  001\035&\fL\0017\024+'\001C\026\025\0350#\001\006\002\002\002\f\001 9\006\r:\001N\f\001;\f\001<\f\001G\026\025\025\035\033#\001 B2\007\024\0032\021\004*\f\025\023\007\024\005\025\006\004\030\016\r\0045\025\005\f\024\003\005\006\003\006\004\007\024\033\004  024\022\005\024\f\f\r\006 L\001Q$\0302\033\026&\(\035\001F'\026-\035\033\027\026*0\001/\033\035\027\027#\001\017\r\r\004\f\001 9 006\006:\001;\f\001 M\f\001 6\026\036+\024'\024-\001 001 J\f\001 X\f\001 033\027\035'\026'#\001 5\016\b2\003\005\016\024\006\004 030\016\r\004 005\b\b\036\004\004\004 017 016\006\f\033\004\017\r\016\013\b\f\021\006 L\001C\026'\027*\024'#\001\006\002\003\003\f\001 9 006\017:\0017\f\001 M\0241\035&$\025\001 001 8\f\001 7\f\001 C\033\026\(+*#\001 0342\021\f\r\005\025\007\b\004 C\017\003\005\021\0057\007\003\005\016\024\032\004  024\033\004\f\033\005\003\005\016\0246 0018/\033\026'\(\035\033#\001\017\r\r\b\f\001 001 030 fI\001\021/\032"#\037 t r\006\016\005\017\020\021\006\016 004\r\f\025\f\005<\f\033\004\007\004:\0375\025\037\004\005\024\004  b\f\025\003\r\005\025\007\b\004\(\024\022\005\024\f\f\r\005\024\022\004\030\r\016\021\004\003\023\f\004 035\f\025\023\024\005\016\024\004D\004\002\024\006\003\005\0032\003\f\004\016\030\004\035\f\025\023\024\016\b\016\022\n\032\004 007\005\030\007\032\004\002\006\r\007\f\b\032\004\005\024\004,EEF\004\007\024\033\004\007\004*\0375\025\037\004\005\024\004 B2\007\b\005\003\n\004\007\006\0062\r\007\024\025\f\004G\004\031\f\b\005\007\013\005\b\005\003\n\004 f\024\022\005\024\f\f\r\005\024\022\032\004\004\007\b\006\016\004\030\r\016\021\004\003\023\f\004\035\f\025\023\024\005\016\024\032\004 005\024\004?FFH\037\004%2\r\r\f\024\003\b\n\004\023\f\004\005\006\004\006\0032\033\n\005\024\022\004\030\016\r\004 9\023\037'\037\004\007\003\004\003\023\f\004\035\f\025\023\024\005\016\024\004D\004\002\024\006\003\005\0032\003\f\004\016\030\004 035\f\025\023\024\016\b\016\022\n\032\004@\007\005\030\007\032\004\002\006\r\007\f\b\032\004\007\024\033\004\023\005\006\004\003\023\f\006\005\006\004\0062\013&\f\025\003\004\005\006\004 I\031\f\b\005\007\013\005\b\005\003\n\004\016\030\004\035\f\025\023\024\016\b\016\022\005\f\006I\037\004\004 5\023\007\005\004\023\007\033\004\006\f\r<\f\033\004\007\006\004\007\024\004\f\b\f\025\003\r\005\025\007\b\004\007\024\033\004\f\b\f\025\003\r\016\024\005\025\006\004\f\024\022\005\024\f\f\r\004 006\005\024\025\f\004,EEF\004\005\024\004<\007\r\005\0162\006\004\022\016<\f\r\024\021\f\024\003\004\017\016\006\005\003\005\016\024\006\037\004%2\r\r\f\024\003\b\n\032\004\023\f\004 005\006\004\007\024\004\007\025\003\005<\f\004\031\f\b\005\007\013\005\b\005\003\n\004\f\024\022\005\024\f\f\r\037\004 017 022 023\021\005\006\016\024\017\020\025\021\016\005 004\005\006\004\016\024\004\003\023\f\004\030\007\0252\b\003\n\004\016\030\004 003 023\f\004\(\b\f\025\003\r\005\025\007\b\004\(\024\022\005\024\f\f\r\005\024\022\004'\f\017\003\032\004 1\024\005<\f\r\006\005\003\n\004\016\030\004%\007\b\005\030\016\r\024\005\007\032\0045\007\024\003\007\004%\r27\032\004 8\032\004\007\024\033\004\005\006\0044\005\006\005\003\005\024\022\0049\r\016\030\f\006\006\016\r\032\004 f\025\023\007\024\005\025\007\b\004\(\024\022\005\024\f\f\r\005\024\022\004'\f\017\003\037\032\004 1\024\005<\f\r\006\005\003\n\004\016\030\004*\007\r\n\b\007\024\033\032\004%\016\b\b\f\022\f\004 9\007\rJ\032\004*'\032\004\007\024\033\004'\f\017\007\r\003\021\f\024\003\004\016\030\004 b\f\025\003\r\016\024\005\025\004*\007\003\f\r\005\007\b\006\032\004\035\f\025\023\024\005\025\007\b\004 1\024\005<\f\r\006\005\003\n\032\0044\005\f\024\024\007\032\00482\006\003\r\005\007\037\004'\r\037\00452\023\005\r\004\005\006\004+\f\b\b\016\t\004\016\030\004\003\023\f\004 002\024\006\003\005\0032\003\f\004\016\030\004\(\b\f\025\003\r\005\025\007\b\004\007\024\033\004\(\b\f\025\003\r\016\024\005\025\006\004\(\024\022\005\024\f\f\r\006\004!\002\(\(\("\032\004 003\023\f\0048\021\f\r\005\025\007\024\0049\023\n\006\005\025\007\b\0045\016\025\005\f\003\n\004!895"\032\004\003\023\f\004\002\024\006\003\005\0032\003\f\004\016\030\004 9\023\n\006\005\025\006\004!\002\0169"\032\0041K\032\004\003\023\f\0048\021\f\r\005\025\007\024\0045\016\025\005\f\003\n\004\016\030\004*\f\025\023\007\024\005\025\007\b\004 024\022\005\024\f\f\r\006\004!85*\("\032\004\007\024\033\004\003\023\f\0045\016\025\005\f\003\n\004\016\030\0049\b\007\006\003\005\025\006\004\(\024\022\005\024\f\f\r\006\004 59\("\037\004'\r\037\00452\023\005\r\004\023\007\006\004\013\f\f\024\004\f\b\f\025\003\f\033\004\007\006\004+\016\r\f\005\022\024\004+2\b\b\004 f\021\013\f\r\004!8\025\007\033\f\021\005\025\005\007\024"\004\016\030\004\003\023\f\004\034\007\003\005\016\024\007\b\0048\025\007\033\f\021\n\004\016\030\004 024\022\005\024\f\f\r\005\024\022\032\0041J\r\007\005\024\fL\004\007\024\033\004\007\006\004+2\b\013\r\005\022\023\003\0045\025\023\016\b\007\r 026\017 0162\024\025\005\b\004 030 016\r\004\002\024\003\f\r\024\007\003\005\016\024\007\b\004\(\020\025\023\007\024\022\f\004\016\030\0045\025\023\016\b\007\r\006\004!%\002\(5"\032\0045\003\007\003\f\004 f\017\007\r\003\021\f\024\003\032\00415\037\004@\f\004\005\006\004'\005\006\003\005\024\0222\005\006\023\f\033\004\027\f\025\0032\r\f\r\004\016\030\004\003\023\f\004 002\(\(\(\004%9*\035\004!%\016\021\017\016\024\f\024\003\006\032\0049\007\025J\007\022\005\024\022\004\007\024\033\004 007\0242\030\007\025\0032\r\005\024\022\004\035\f\025\023\024\016\b\016\022\n"\0045\016\025\005\f\003\n 026\017 8\006\006\016\025\005\007\003\f\004\(\033\005\003\016\r\004\016\030\004 003 023\f\004\002\(\(\(\004%9*\035\004\035\r\007\024\006\007\025\003\005\016\024\006\004\016\024\0048\033<\007\024\025\f\033\0049\007\025J\007\022\005\024\022\032\004 f\021\013\f\r\004\016\030\004\003\023\f\004\(%\035%\004!\(\b\f\025\003\r\016\024\005\025\004%\016\021\017\016\024\f\024\003\006\004\007\024\033\004 035\f\025\023\024\016\b\016\022\n\004%\016\024\030\f\r\f\024\025\f"\0048\017\017\b\005\f\033\004\031\f\b\005\007\013\005\b\005\003\n\004 52\013\025\016\021\021\005\003\003\f\f\032\004\003\023\f\004\002\(\(\(\004%9*\035\004\007\t\007\r\033\004\025\016\021\021\005\003\003\f\f\032\004\003\023\f\004 002\(\(\(\004+\f\b\b\016\t\004\024\016\021\005\024\007\003\005\016\024\004\025\016\021\021\005\003\003\f\f\032\004\007\024\033\004\003\023\f\00485*\(\004 M\f\024\f\r\007\b\0048\t\007\r\033\006\004\025\016\021\021\005\003\003\f\f\037\004'\r\037\00452\023\005\r\004\005\006\004\007\004\025\016\036\030\0162\024\033\f\r\004\016\030\004 003\023\f\00485*\(\004;\0162\r\024\007\b\004\016\030\004\(\b\f\025\003\r\016\024\005\025\0049\007\025J\007\022\005\024\022\004\007\024\033\004\006\f\r<\f\033\004\007\006\004 005\003\006\004\035\f\025\023\024\005\025\007\b\004\(\033\005\003\016\r\004\030\016\r\004\f\005\022\023\003\004\n\f\007\r\006\004!,EEN\036?FF,"\037\004 f\004\023\007\006\004\0072\003\023\016\r\f\033\004\007\013\0162\003\004NFF\004\003\f\025\023\024\005\025\007\b\004\0172\013\b\005\025\007\003\005\016\024\006\004 017\007\003\f\024\003\006\032\004\017\007\017\f\r\006\032\004\013\016\016J\004\025\023\007\017\003\f\r\006\032\004\013\016\016J\006"\032\004\005\024\025\b2\033\005\024\022\004\013\016\016J\006\004 O5\003\r2\025\0032\r\007\b\0048\024\007\b\n\006\005\006\004\005\024\004*\005\025\r\016\f\b\f\025\003\r\016\024\005\025\006\004\007\024\033\004+\005\013\f\r\004 C\017\003\005\025\006\026\032\0044\007\024\036\034\016\006\003\r\007\024\033\032\004,EE,\032\004\007\024\033\004O8\017\017\b\005\f\033\0049\r\016\013\007\013\005\b\005\003\n\004 030\016\r\004\(\024\022\005\024\f\f\r\006\004\007\024\033\0045\025\005\f\024\003\005\006\003\006\026\032\004*\025M\r\007\t\036@\005\b\b\032\004,EEP\037\004'\r\037\004 52\023\005\r\004\005\006\004\f\033\005\003\016\r\004\016\030\004\003\023\f\0045\017\r\005\024\022\f\r\004\013\016\016J\004\006\f\r\005\f\006\004\016\024\004\017\023\n\006\005\025\006\032\004 021\f\025\023\007\024\005\025\006\004\007\024\033 004 017\007\025J\007\022\005\024\022\004\016\030\004\021\005\025\r\016\f\b\f\025\003\r\016\024\005\025\004\007\024\033\004 017\023\016\003\016\024\005\025\004\006\n\006\003\f\021\006\037\004@\f\004\016\r\022\007\024\0057\f\033\004\021\007\024\n\004\0062\025\025\f\006\006\0302\b\004 025\016\024\030\f\r\f\024\025\f\006\004\007\024\033\004\006\n\021\017\016\006\005\007\004\007\024\033\004\017\r\f\006\f\024\003\f\033\004\0242\021\f\r\0162\006\004 J\f\n\024\016\003\f\004\007\024\033\004\005\024<\005\003\f\033\004\003\007\bJ\006\004\t\016\r\b\033\t\005\033\f\037\004'\r\037\00452\023\005\r\004\r\f\025\f\005<\f\033\004 021\007\024\n\004\017\r\016\030\f\006\006\005\016\024\007\b\004\007\t\007\r\033\006\032\004\005\024\025\b2\033\005\024\022\004 027\030\030\031\017 85*\(\004 Q 016\r\025\f\006\003\f\r\004\031\f\007\033\004Q\007\r\024\f\r\004*\f\033\007\b\004\030\016\r\004\0162\003\006\003\007\024\033\005\024\022\004 025\016\024\003\r\005\0132\003\005\016\024\006\004\003\016\004\003\023\f\004\017\f\r\021\007\024\f\024\003\004\b\005\003\f\r\007\0032\r\f\004\016\030\004\f\024\022\005\024\f\f\r\005\024\022\004 003\023\r\0162\022\023\004\007\004\006\f\r\005\f\006\004\016\030\004\017\007\017\f\r\006\004\005\024\004*\f\025\023\007\024\005\025\007\b\032\004 005\025\r\016\f\b\f\025\003\r\016\024\005\025\032\004\007\024\033\004C\017\003\016\f\b\f\025\003\r\016\024\005\025\004\(\024\022\005\024\f\f\r\005\024\022\032\004\t\023\005\025\023\004 f\006\003\007\013\b\005\006\023\f\033\004\007\004\024\f\t\004\033\005\006\025\005\017\b\005\024\f\004J\024\016\t\024\004\007\006\004\003\023\f\0045\003\r2\025\0032\r\007\b\004 8\024\007\b\n\006\005\006\004\016\030\004*\005\025\r\016\f\b\f\025\003\r\016\024\005\025\004\007\024\033\0049\023\016\003\016\024\005\025\0045\n\006\003\f\021\006\004!\023\f\004\005\006\004 003\023\f\004\003\023\005\r\033\004\0312\006\006\005\007\024\0048\021\f\r\005\025\007\024\032\004\007\030\003\f\r\0045\003\f<\f\024\004\035\005\021\016\006\023\f\024J\016\004\007\024\033\004 002\022\016\r\0045\005J\016\r\006J\n\032\004\t\023\016\004\r\f\025\f\005<\f\033\004\003\023\005\006\004\017\r\f\006\003\005\022\005\0162\006\004\007\t\007\r\033"L\004 027\030\030\032\017 002*895\004;\016\023\024\0048\037\004Q\007\022\024\016\024\004\035\f\025\023\024\005\025\007\b\0048\025\023\005\f<\f\021\f\024\003\0048\t\007\r\033\004 030 016\r\004\0162\003\006\003\007\024\033\005\024\022\004\025\016\024\003\r\005\0132\003\005\016\024\006\004\003\016\004\003\023\f\004\003\f\025\023\024\005\025\007\b\004J\024\016\t\b\f\033\022\f\004 016\030\004\003\023\f\004\021\005\025\r\016\f\b\f\025\003\r\016\024\005\025\006\032\004\016\017\003\016\f\b\f\025\003\r\016\024\005\025\006\032\004\007\024\033\004\017\007\025J\007\022\005\024\022\004 005\024\0332\006\003\r\nL\004 027\030\030\030\017 002\(\(\(\036%9*\035\004C2\003\006\003\007\024\033\005\024\022\00452\006\003\007\005\024\f\033\004 035 f\025\023\024\005\025\007\b\004%\016\024\003\r\005\0132\003\005\016\024\0048\t\007\r\033\004\030\016\r\004\0162\003\006\003\007\024\033\005\024\022\032\004\0062\006\003\007\005\024\f\033\004 007\024\033\004\025\016\024\003\005\0242\005\024\022\004\025\016\024\003\r\005\0132\003\005\016\024\006\004\003\016\004\003\023\f\004\003\f\025\023\024\016\b\016\022\005\f\006\004\005\024\004\030\005\f\b\033\006\004 f\024\025\016\021\017\007\006\006\f\033\004\013\n\004\003\023\f\004%9*\035\0045\016\025\005\f\003\nL\004 027\030\030\030\017 59\(\004 002 024\003\f\r\024\007\003\005\016\024\007\b\004\(\024\022\005\024\f\f\r\005\024\022-\035\f\025\023\024\016\b\016\022\n\004!+\r\f\033\004C\037\004%\016\024\b\f\n"\004 8\t\007\r\033\004\030\016\r\004\0162\003\006\003\007\024\033\005\024\022\004\017\005\016\024\f\f\r\005\024\022\004\007\024\033\004\025\016\024\003\005\0242\005\024\022\004 025\016\024\003\r\005\0132\003\005\016\024\006\004\003\016\004\017\b\007\006\003\005\025\006\004\f\024\022\005\024\f\f\r\005\024\022L\004 032\033\033\033\017 85*\(\004\007\024\033\0049\005\036 035 0072\036\0045\005\022\021\007\004%\023\007\r\b\f\006\004\0312\006\006\004\031\005\025\023\007\r\033\006\004*\f\021\016\r\005\007\b\0048\t\007\r\033\004\030\016\r\004 0162\003\006\003\007\024\033\005\024\022\004\025\016\024\003\r\005\0132\003\005\016\024\006\004\003\016\004\021\f\025\023\007\024\005\025\007\b\004\f\024\022\005\024\f\f\r\005\024\022\032\004\007\024\033\004 032\033\033\034\017 f\b\b\004\027\007\013\016\r\007\003\016\r\005\f\006\004'\005\006\003\005\024\0222\005\006\023\f\033\004*\f\021\013\f\r\004\016\030\004 035 f\025\023\024\005\025\007\b\0045\003\007\030\030\0048\t\007\r\033\004\030\016\r\004\033\f<\f\b\016\017\005\024\022\004\f\020\003\r\f\021\f\b\n\004\007\025\0252\r\007\003\f\004 007\024\033\004\r\016\0132\006\003\004\f\024\022\005\024\f\f\r\005\024\022\004\021\f\025\023\007\024\005\025\006\004\021\f\003\023\016\033\006\004\030\016\r\004\017\r\f\033\005\025\003\005\024\022\004 003\023\f\004\r\f\b\005\007\013\005\b\005\003\n\032\004\017\f\r\030\016\r\021\007\024\025\f\032\004\007\024\033\004\021\f\025\023\007\024\005\025\007\b\004\013\f\023\007<\005\016\r\004\016\030\004 025\016\021\017\b\f\020\004\006\003\r2\025\0032\r\f\006\0042\006\f\033\004\005\024\004\021\007\0242\030\007\025\0032\r\005\024\022\004\0272\025\f\024\003\004 035\f\025\023\024\016\b\016\022\005\f\006\004\017\r\016\0332\025\003\006\037\004 017 035 005\036\037 \017!\036"\017\013#$\024\006 032\004\035\f\025\023\024\005\016\024\032\004\002\006\r\007\f\b\032\004 005 006\004\006\003\007\030\030\004\021\f\021\013\f\r\004\016\030\004\002\024\0332\006\003\r\005\007\b\004\007\024\033\004 007\024\007\022\f\021\f\024\003\004\(\024\022\037\004'\f\017\007\r\003\021\f\024\003\032\004\007\024\033\004 021\f\021\013\f\r\004\016\030\004\022\r\007\0332\007\003\f\004\006\0032\033\005\f\006\004\022\r\0162\017\004 017\r\016\022\r\007\021"\004\005\024\004B2\007\b\005\003\n\0048\006\0062\r\007\024\025\f\004\007\024\033\004 031\f\b\005\007\013\005\b\005\003\n\004\007\003\004\035\f\025\023\024\005\016\024\037\004@\005\006\004\r\f\006\f\007\r\025\023\004 005\024\003\f\r\f\006\003\006\004\005\024\025\b2\033\f6\004\f\b\f\021\f\024\003\004\007\024\033\004\006\n\006\003\f\021\004 r\f\b\005\007\013\005\b\005\003\n\032\004\033\007\021\007\022\f\004\007\025\0252\0212\b\007\003\005\016\024\004 017\r\016\025\f\006\006\f\006\032\004\017\023\n\006\005\025\007\b\004J\005\024\f\003\005\025\006\032\004\017\007\003\003\f\r\024\004\r\f\025\016\022\024\005\003\005\016\024\032\004 005\024\030\016\r\021\007\003\005\016\024\004\003\023\f\016\r\n\032\004\024\f2\r\007\b\004\024\f\003\006\032\004\021\f\007\0062\r\f\021\f\024\003\004\003\023\f\016\r\n\004\007\024\033\004 005\024\006\003\r2\021\f\024\003\007\003\005\016\024\032\004\033\f\006\007\b\005\024\007\003\005\016\024\004\003\f\025\023\024\016\b\016\022\n\032\004\024\016\024\033\f\006\003\r2\025\003\005<\f\004 003\f\006\003\005\024\022\032\004\007\024\033\004A2\007\b\005\003\n\004\025\016\024\003\r\016\b\037 017 


001 006\r\001\001 021//#;\"L\t\021\t 001G$*+\035\030$*\0261$\025\001*\024\024\025\027\001$'&\001\0353$\030/\025\035\027 005\035\023\003\002\t t n\020\017\007\005\020\007\t\027\002\003\004*\002\022\b\t\022\005\007\002\t$\t\005\020\005\003\b\007\004\016\005\003\t\017\n\003!\007\004\n\020\t 6+\035\001 027\026\030/\025\035\027*\001 026\025\0254\027*\033$*\026\024'\001 024\032\001 024%\001 035\001 0274\(\(\035\027*\035&\001 033\024$1+\001 024\033\036\027\0011$'\0012\035\001\0242*$\026'\035&\0014'&\035\033\001$'\001$\027\0274\030/*\026\024'\001*+$*\001*+\035\001&\035\025\026-\035\0330\001 033$*\035\001 026\027\001 1\024'\027 004 031  024 003 001  f\001 C\026 035 003 b 001 002 001 035\001 035H4$*\026\024'\001 031\b\\001 2\0351\024\030\035\027L\001\001 r r 031  031  031  035 034 035 034 031 035  031 033 b b 001 006 007 006 003 001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\031;\006\\001  0\001 025\024\(0\001 026*+\001 035\001 0353/\0351*$*\026\024'\001 0254\035\001 032\033\024\030\001 035\001 W4$'*4\030\001 G\0351+$'\0261\027\001 9\006\r:#\001 001 1\024'>4\($*\035\001 033$'\027/\024\027\035\001 031\023\035\033\030\026*\026$'\001 033$'\027/\024\027\035\\001\024/\035\033$*\024\033\001\026\027\001\035\030/\025\0240\035&\001*\024\001&\035*\035\033\030\026'\035\001*+\035\001H4$'*\026*\026\035\027\001 026'\0012\024*+\001/$\033*\027\001\024\032\001*+\035\001\035H4$*\026\024'\001\031;\006\\f\0016+\026\027\0010\026\035\025&\027\001*+\035\001\032\024\025\025\024%\026'\(L\001\001 r r r 031  0353/\031  031  0353/\031    035 035 034 034 033\034 035 033 034 031 035 033\035 033\035 002 026 027 001 006 006 006 030 031 032 033 001 6+\035\001'\0353*\001\026'*\035\(\033$*\026\024'\001\033\035\0274\025*\027\001\026'\001*+\035\001\035H4$*\026\024'L\001 r r r r r I I 006 031 I 0353/\031  I 031 I 0353/\031  I I I 035 035   035 035 034 034 033\034 035 033 033\035 031 035 033\035 034 033\035 033\035 036 037 026 027 026 027 006 006 001 006   030 031 030 031   032 033 032 033   003 003 001\001 023 035'1\035#\001*+\035\001\033\035\025\026$2\026\025\026*0\001\0324'1*\026\024'\001\026\027\001\0353/\033\035\027\027\035&\001$\027\001\032\024\025\025\024%\027L\001 r r r r 017 r 031  031  0353 031 I 0353 I 031  031  I 035 034 035    035 035 034 034 034 034 035 035 033\035 031 034 002 002 001 026 027 006 030 031 032 033 003 031;\017\\001 6+\035\001 035H4$*\026\024'\001 031;\017\\001 1\0244\025&\001 2\035\001 035\033\026\032\026\035&\001 032\024\033\001 035\001 1$\027\035\001 024\032\001 001 0353/\024'\035'*\026$\025\001\033\035\025\026$2\026\025\026*0\001\0324'1*\026\024'\001%\026*+\001*+\035\001\032$\026\0254\033\035\001\033$*\035\001  L\001 031  0353/\031  031 035 035  001 002 006 001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\031;\t\\001 020'*\033\024&41\026'\(\001\031\002;\\001\026'*\024\001*+\035\001\035H4$*\026\024'\001\031\003;\#\001%\035\001\0242*$\026'L\001\001 r 031  0353/\031  031\006 0353/\031   034 035 034 035 035    001 006 002 006 007 006 002 002 006 001\001\001\001\001\001\031;\007\\001 C+\035'\001 026'*\033\024&41\026'\(\001 026\027\001 0353/\033\035\027\027\026\024'\001 2$1\036\001 026'*\024\001 035\001 035H4$*\026\024'\001 031;\017\#\001 035\001 033\024/\033\026$*\035\001 0353/\024'\035'*\026$\025\001 033\035\025\026$2\026\025\026*0\001 0324'1*\026\024'\001 031;\t\\001 1\0244\025&\0012\035\001\035$\027\026\0250\001\033\035\027*\024\033\035&\f\001\001 001 001 001 005\035\023\003\002\t t 037\007\005\007\004\017\007\004\016\005\003\t\023\022\n\023\002\022\007\004\002\017\t\n\013\t\023\n\023!\003\005\007\004\n\020\t\027\b\020\005\035\004\016\017\t 6+\035\001 035\025\026-\035\0330\001 033$*\035\001 1+$'\(\035\027\001 026'\001 026\030\035\001 026*+\001 024 005 004 033\035/\033\035\027\035'*\026'\(\001 035\001 030\0244'*\001&\035\025\026-\035\033\035&\001$*\001*+\035\001\035'&\001\024\032\001*+\035\001*\026\030\035\0014'\026*\001 005 001\031@\026\(4\033\035\001;\f\006$\\f\001 020'\001 026\027\001 1$\027\035#\001 035\001 026'\026*\026$\025\001 024/4\025$*\026\024'\001 026\027\001 034 r  r\f\001 6+\035\001 0353/\0351*\035&\001 024/4\025$*\026\024'\001 0351*\024\033\001 032\024\033\001 035\001 033\035&\035*\035\033\030\026'\035&\001 035\02624\025\025\001 033\035\025\026$2\026\025\026*0\001 0324'1*\026\024'#\0014\027\026'\(\001 035H4$*\026\024'\001\031\003\#\001\026\027\001\027+\024%'\001\026'\001@\026\(4\033\035\001;\f\0062\f\001 A'\035\001 4'&\033\035&\001 033$'&\024\030\001 0351*\024\033\027\001 035\033\035\001 1$\02514\025$*\035&\001 11\024\033&\026'\(\001 024\001 035\001 027\026\0304\025$*\026\024'\001 033\0241\035\027\027\001 0353/\025$\026'\035&\001 026'\001 026\(4\033\035\001 017\f\001 024\033\001 035$1+\001 026\030\035\001 026'&\0353#\001*+\035\001$-\035\033$\(\035\001$'&\001\027*$'&$\033&\001&\035-\026$*\026\024'\001$\033\035\0011$\02514\025$*\035&\f\001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 t  004\026!\022\002\t\021\(?\t$\t\037\007\005\007\004\017\007\004\016\005\003\t\023\022\n\023\002\022\007\004\002\017\t\n\013\t\007\025\002\t\035\n\027\002\003\t 001 001 001 6 035\001 0242*$\026'\035&\001 033\035\0274\025*\027\001 026'&\0261$*\035\001 001 035\001 030\035$'\001 035\033\033\024\033\001 026\027\001 024'\001 035\001 024\033&\035\033\001\024\032\001\007\001\030$\('\026*4&\035\027\001\027\030$\025\025\035\033\001*+$'\001*+\035\001\0353/\0351*\035&\001/\024/4\025$*\026\024'\001 031@\026\(4\033\035\001;\f\006&\\f\001\001 025\027\024#\001 035\001 027*$'&$\033&\001 035-\026$*\026\024'\001 026\027\001 027\030$\025\025\035\033\001 001 035\001 033\035$\027\024'$2\025\035\001 4//\035\033\001 2\0244'&$\0330\001 K\001 035\001 027H4$\033\035\001 033\024\024*\001 024\032\001 035\001 0353/\0351*\035&\001 024*$\025\001 H4$'*\026*0\001 031@\026\(4\033\035\001 f\0061\\001 001 035\001 027\026\('$\025\005*\024\005'\024\026\027\035\001 033$*\026\024\001 027*$2\026\025\0265\035\027\001$\033\0244'&\001\002\r\r\001\031@\026\(4\033\035\001;\f\006\035\\f\001 001 t f\006$\f\001N\035\025\026-\035\0330\001\033$*\035#\001 024 026 001K\001*+\035\001 001 026'/4*\001\032\024\033\001\0353$\030/\025\035\001\020\020\f 001 f\0062\f\001E\024/4\025$*\026\024'#\001 034 026 0011$\02514\025$*\035&\001 20\001\031\003\\001\032\024\033\001\(\026-\035'\001 031!\035 f 001\001 f\0061\f\001 031\006 004 8*$'&$\033&\001&\035-\026$*\026\024 032\004 0 005\004 001 031\017 004 4//\035\033\0012\0244'&\001\032\024\033\001\027\026\0304\025$*\026\024 004\004 f\006&\f\001;1*4$\025\001&\035-\026$*\026\024 001 032\033\024\030 001 035\033$\(\035 032 034 005 004D\004R 005 004"\004 001\001 f\006\035\f\0018\026\('$\025\001*\024\001M\024\026\027\035\001\033$*\026\024 032\004 R 005 n 0 005 004\037 001\001 001 007\b\t\n\013\013 8\026\('$\025\001*\024\001M\024\026\027\035\001U$*\026\024 001 001 002\001\001 004\001\001\001 004\002\001\001 005\001\001\001 005\002\001\001 006\001\001\001 001 004\001\001 006\001\001 025\001\001 027\001\001 003\001\001\001 E\002\t 021   002 t 001 007\b\t\n\013\013 1*4$\025\001N\035-\026$*\026\024 001 036\007\001 036\006\001 036\005\001 036\004\001 001 004\001 005\001 006\001 007\001 001 004\001\001 006\001\001 025\001\001 027\001\001 003\001\001\001 E\027 t 021   027 t 001 001 004\001\001 005\001\001 006\001\001 007\001\001 002\001\001 035\001\001 001 004\001\001 006\001\001 025\001\001 027\001\001 003\001\001\001 007\b\t\n\013\013 E\016\t E\024/4\025$*\026\024'\0018*\fN\035-\f\001 001\001 031\017\\001 031\006\\001 021   016 t 001 001 002\001 004\001\001 004\002\001 005\001\001 005\002\001 001 004\001\001 006\001\001 025\001\001 027\001\001 003\001\001\001 007\b\t\n\013\013 E\024/4\025$*\026\024'#\001 034 005 004\004\004\004 3 006\r 001\t 004\004 004\004\004\004\004 E\006 t A4*/4*\001\001 021   006 t 001 034\001\001 032\001\001 004\001\001\001 004\004\001\001 004\005\001\001 004\006\001\001 004\007\001\001 001 004\001\001 006\001\001 025\001\001 027\001\001 003\001\001\001 N\035\025\026-\035\0330\001U$*\035#\001 024 005 001 001\001 E\005 t 007\b\t\n\013\013 020'/4*\001 021   005 t 


001 006\006\001\001 005\035\023\003\002\t t 0247\n\t\002\013\013\002\016\007\004*\002\t\005\026\0024\026\022\n!\023\t\027\004\017\007\022\004\006!\007\004\n\020\t\013\n\022\t b 030 t\t 6+\026\027\001\0353$\030/\025\035\001\033\035\032\035\033\027\001*\024\001*+\035\001\027$\030\035\001\026'/4*\001&$*$\001$\027\001\026'\001*+\035\001 020\007\021\017\b\f\004 002\002 f\0016+\035\001\026'/4*\001&$*$\001$\033\035\001*+\035\001-\0351*\024\033\027\001\024\032\001*+\035\001&\035\025\026-\035\0330\001\033$*\035\001\031@\026\(4\033\035\001 f\006$\\001$'&\001*+\035\001/\024/4\025$*\026\024'\0012$\025$'1\035\001\031@\026\(4\033\035\001;\f\0062\\f\001\020'\001*+\026\027\0011$\027\035#\001 024%\035-\035\033#\001 035\001 0353/\035\033\026\030\035'*$\025\026\027*\001 024\027\027\035\027\027\035\027\001 024'\0250\001 035\001 001 032\033\024\030\001 001 0332\026*\033$\0330\001 030\024\030\035'*\001 035 005\004 024'%$\033&#\001 001 005 O\t\r\r\f\001 6+\035\033\035\032\024\033\035#\001 035\001 033\0351\035&\026'\(\001 034 t\r\r 001 2\0351\024\030\035\027\001 035\001 14\033\033\035'*\001 034 r 001 001 026'\001 035'\035\033$\025#\001 t\r\r 005 034 007 001 005 034 001 001 t\r\r 005 024 007 001 004 005 024 f\001 M\024*\035\001 001 035\001 14\033\033\035'*\001 034 r 001 0242-\026\0244\027\0250\001 027\001 027\024\030\035\001 036\026'&\001 024\032\001 035\001 026\027*\033\02624*\026\024'P\001 035'1\035#\001 035\001 4'\036'\024%'\001*\0334\035\001&\026\027*\033\02624*\026\024'\001\0304\027*\0012\035\001\035\032\032\0351*\026-\035\0250\001\033\035/\033\035\027\035'*\035&\001*\024\001 025\025\024%\001 0242*$\026'\026'\(\001 001 035'\035\033$\025\0265\035&\001 4\030\035\033\0261$\025\001 027\024\0254*\026\024'\001 024\001 035\001 035H4$*\026\024'\001\031?\\f\001 026\(4\033\035\001;\f\017\001&\035\030\024'\027*\033$*\035\027\001*+\035\0011\024\030/$\033\026\027\024'\0012\035*%\035\035'\001*%\024\0011$\027\035\027\f\001 026\(4\033\035\001 f\017$\001 026\025\0254\027*\033$*\035\027\001 035\001 035-\026$*\026\024'\001 024\032\001 035\001 1$\02514\025$*\035&\001 024/4\025$*\026\024'\001\032\033\024\030\001*+\035\001$1*4$\025\001&$*$#\001+$-\026'\(\001 034 r\001 2\035\035'\001%\033\024'\(\0324\025\0250\001 1\024'\027\026&\035\033\035&\001 024\001 035\001 024\001 035\001 026\027*\033\02624*\026\024'\001 20\001 035\001 032\024\033\0304\025$\001 031\003\#\001 035\033\035$\027\001@\026\(4\033\035\001;\f\0172\001\027+\024%\027\001*+\035\0011\024'\027\035H4\035'1\035\001\024\032\001$'\001\026*\035\033$*\026-\035\001 033\0241\035\027\027\001 2$\027\035&\001 024'\001 024\005\(\033\0244/\001 035\001 026\027*\033\02624*\026\024'\001 025\035$&\026'\(\001 024\001 035\001 1\024'-\035\033\(\035'1\035\001 024\032\001 034 026 001 027\001 035\033\001 031\006\r\#\001 026*+\001 035\001 1*4$\025\001 024/4\025$*\026\024'\001 f\0016+\035\001\0353/\0351*\035&\001\0244*/4*#\001\026\f\035\f\001*+\035\001*\0334\035\001&$*$#\001\026\027\001&\033$%'\00120\001*+\035\001 027\024\025\026&\001\025\026'\035\001\026'\001@\026\(4\033\035\001;\f\017\f\0016+\026\027\001\026\027\001\026&\035'*\0261$\025\001*\024\001@\026\(4\033\035\001;\f\0062\00124*\001 026\032\032\035\033\035'*\0250\001\0271$\025\035&\001\024'\001*+\035\001-\035\033*\0261$\025\001$3\026\027\f\001 6+\035\001 026*\035\033$*\026\024'\001 033\0241\035\027\027\001 027\001 2\035\035'\001 035\033\030\026'$*\035&\001 4\027\026'\(\001 001 026\0274$\025\001 1\033\026*\035\033\026\024'\0011\024'1\0254&\026'\(\001*+\035\001\032\024\025\025\024%\026'\(\001-$\0254\035\027\001\024\032\001*+\035\001/$\033$\030\035*\035\033\027L\001 022 031 n\0162\024\022  O\t?\0019*\026\030\035\0014'\026*\027:#\001 022 031 016\b\033  O\006\002\007\0019*\026\030\035\0014'\026*\027:\001$'&\001 3 r\f?\r?\f\001 6+\035\027\035\001 0254\035\027\001 033\035\001 1*4$\025\0250\001 030\035$'\026'\(\025\035\027\027\001 24*\001 027411\035\027\027\0324\025\0250\001 033\035/\033\035\027\035'*\026'\(\001*+\035\0014'\036'\024%'\001\033\035$\025\001&\026\027*\033\02624*\026\024'\f\001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 027\f\022\f\024\0336\004 f\017 037\004%\007\b\0252\b\007\003\f\033\004\017\016\0172\b\007\003\005\016\024\004\007\006\0062\021\005\024\022\004\034 r 004\023\007\006\004\024\016\004\007\022\f\004\021\f\021\016\r\n\004\004 004\004\007\006\004\017\f\r 001\031\003 037\004 f\0172 037\004%\007\b\0252\b\007\003\f\033\004\017\016\0172\b\007\003\005\016\024\004\007\006\0062\021\005\024\022\004\034 r 017 023\007\006\004\003\t\016\004\007\022\f\036\022\r\0162\017\004\004 004\004\033\005\006\003\r\005\0132\003\005\016\024\004\007\006\004\017\f\r\004 031\006\r 037 017 001 004\026!\022\002\t\021\(>\t$\t/\n\023!\003\005\007\004\n\020\t\013\n\022\t\0077\n\t\005\026\0024\026\022\n!\023\t\005\023\023\022\n\005\016\025 001 001 6 035\001 026\030/$1*\001 024\032\001 033\035$*\026'\(\001 034 r 001 033\024'\(\0324\025\0250\001 032$&\035\027\001 0\001 032*\035\033\001 025\025\001 035\001$\033*\0261\025\035\027\001\024\032\001 034 r\001 001+$-\035\001\022&\026\035&\022#\001\026'\001*+\026\027\001\0353$\030/\025\035\001$\033\0244'&\001 035 004\r\r f\001 001 001 001 t 005\035\023\003\002\t"0 t 024\025\002\t\004\035\023\003\002\035\002\020\007\005\007\004\n\020\t\n\013\t\022\002\005\003\t\013\004\002\003\027\t\027\005\007\005\t\t 6+\035\001 0353*\001 0353$\030/\025\035#\001 026\030\026'\(\001 001 035\001 035-\035\025\024/\030\035'*\001 024\032\001 1*4$\025\001 027/\0351\026\035\027I\001\033\035\025\026$2\026\025\026*0\001\030\024&\035\025#\001\032\024\025\025\024%\027\001$\001\033\0244*\035\001\032\024\033\001\026\030/\025\035\030\035'*\026'\(\001 035\001\(\035'\035\033\0261\001/\033\0241\035&4\033\035\001\0244*\025\026'\035&\001\026'\001\027\0351*\026\024'\001?\f\001\001 M\024'\035*+\035\025\035\027\027#\0014\027\035\0324\025\001\033\035\(4\025$\033\0265$*\026\024'\027\001$\033\035\0010\035*\001/\024\027\027\0262\025\035\001/\033\026\024\033\001*\024\001 035\001 0250\027\026\027\f\001 020'*\033\024&41\026'\(\001 035\001&$*$\001*\024\001*+\035\001 035H4$*\026\024'\001 031\004\\001 026\025\035\001 4\033/\024\027\035\0250\001 033\035\027\027\026'\(\001 035\001 0353/\024'\035'*\026$\025\001 033\035\025\026$2\026\025\026*0\001 030\024&\035\025\001 035'$2\025\035\027\001 035\001 1$\02514\025$*\026\024'\001 024\032\001 035\001 027/\0351\026\035\027I\001 G66@\f\001 6+\026\027\001 1+$\033$1*\035\033\026\027*\0261\001 026\027\001 0353/\0351*\035&\001 024\001 033\0243\026\030$*\035\0250\001 030$\026'*$\026'\001 026*\027\001 0254\035\001 026'\001 035\001 032\026'$\025\001 030\024&\035\025\001 032\024\033\001 0'$\030\0261#\001 030$\027\027\005\027*$*\026\027*\0261\027#\001 001 2$\027\035\f\001 6+\026\027\001 0\026\035\025&\027\001 035\001 0271$\025\035\001 033$\030\035*\035\033\001 9*\026\030\035\001 4'\026*\027:\001 K\001 035\033\035\026'$\032*\035\033\001*+\035\001G66@#\001%+\0261+\001@\024\033\001*+\035\001C\035\02624\025\025\001&\026\027*\033\02624*\026\024'\001\026\027\001 0353/\033\035\027\027\035&\001 20\001 022 023 006 006\n 035\035 025 024 001 006  007 001 026*+\001 Y\001 027\001 035\001 034$\030\030$\001 032 4'1*\026\024'\f\0016+\026\027\001G66@\001\027\035*\027\001$\001-$\025\026&\001\(4\035\027\027\001-$\0254\035\001$'&\001\035\026*+\035\033\001\024\032\001 035\001 033$\030\035*\035\033\027\001  001 024\033\001  001 025\024'\035\001 027+\0244\025&\001 2\035\001 032\026**\035&\f\001 024\033\001 025\035\027\027\001 0'$\030\0261\001 001 2$\027\035\027#\001 033*\02614\025$\033\0250\001 026*+\001 024\001 035%\001 035\025\026-\035\033\026\035\027\001 027\001 026'\001 035\001 1$\027\035\001 027*4&0\001 002\002 001 035\001 035\033$\(\035\001 024/4\025$*\026\024'\001 035\001 001 035 r 001 026\032\001 026\025$2\025\035#\001\030$0\0012\035\0014\027\035&\001$\027\001$\001\(4\035\027\027\001-$\0254\035\001\032\024\033\001*+\035\001\035\032\032\0351*\026-\035\001$\(\035\f\001\001 024\025\025\024%\026'\(\001 035\001 033\0241\035&4\033\035#\001 035\001 032\026\033\027*\001 027\035\001 024\032\001 035\001 0250\027\026\027\001 035'1\035\001 027\0274\030\035\027\001 001 035\001 035\001 026\027*\033\02624*\026\024'\001 024\032\001 034 r 001 026\027\001 0353/\033\035\027\027\035&\001 20\001$\001\024'\035\005\(\033\0244/\001\035\032\032\0351*\026-\035\001$\(\035\f\0016+\035\001\030$*+\035\030$*\0261$\025\001&\035\0271\033\026/*\026\024'\001 024\032\001*+\026\027\0011$\027\035\001\026\027\001*+\035\001\027$\030\035\001$\027\001\026'\001*+\035\001\032\024\033\0304\025$\001\031\006\r\\001%\026 r 034 001 f\001 6+\035\001 026*\035\033$*\026-\035\001 033\024\(\033\035\027\027\001 026'\001 032\026**\026'\(\001 035\001 030\024&\035\025\001 026\027\001 1+\026\035-\035&\001 20\001 030\035$'\027\001 024\032\001$\001\033\035\025\035-$'*\001/\035'$\025*0\001\031\025\024\027\027\\001\0324'1*\026\024'\f\001\020'\001\0244\033\001$'$\0250\027\026\027\001 035\001 033\024\024*\001 030\035$'\001 027H4$\033\035\001 035\033\033\024\033\001 031 031*5 001 027\001 026\030/\025\035\030\035'*\035&\f\001 020*\001 030\035$\0274\033\035\027\001 035\001 001 2\035*%\035\035'\001 035\001 030\024&\035\025\001 024\032\001 035\001 035H4$*\026\024'\001 031\006\r\\001 001*+\035\001\032\026\035\025&\001$1*4$\025\001/\024/4\025$*\026\024'\f\0016+\035\001UG8\021\001\032\024\033\0304\025$\001\026\027L\001 022 023 022 023 017 Z Z 006 031  031  f f  005 021\016\033\f\b 005 030\005\f\b\033 005 031*5 017 034 017 034  033 030 001 001 002 002 n 002 002 001 C+\035\033\035 017 002 001\026\027\001$\001-\0351*\024\033\001\024\032\001$\025\025\001\030\024&\035\025\001/$\033$\030\035*\035\033\027\001$\027\001/\035\033\001\031\006\r\\001$'&\001 031  005 033\037\030\037 001\026\027\001*+\035\001'4\0302\035\033\001\024\032\001\033\035$&\026'\(\027\001\030\026'4\027\001&\035\(\033\035\035\027\001\024\032\001\032\033\035\035&\024\030\001 K\001*+\035\001\030\024&\035\025I\027\001'4\0302\035\033\001\024\032\001/$\033$\030\035*\035\033\027\f\001\001 6\0334'1$*\026'\(\001 1\033\026*\035\033\026\024'\027\001 033\035\001 025\027\024\001 033\035H4\026\033\035&\f\001 6+\0350\001 030$0\001 0330\001 02742>\0351*\001 024\001 035\001 H4$\025\026*0\001 024\032\001 035\001 001 035\001 033\035H4\026\033\035&\001 114\033$10\001 024\033\001 035\001 027*$\(\035\001 024\032\001 035\001 033\0241\035&4\033\035\f\001 024\033\001 026'\027*$'1\035#\001 026'\001 1$\027\035\001 001 024'\035\005 033\0244/\001 035\032\032\0351*\026-\035\001 035\001 030\024&\035\025\001 026\027\001 032$\033\001 032\033\024\030\001 1\024'-\035\033\(\026'\(#\001 026\0274$\025\001 1\033\026*\035\033\026\024'\001 030$0\001 0274\032\032\0261\035\001 024\001 030\024-\035\001 032\024\033%$\033&\001 024\001 035\001 0353*\001 027\035\001 4\027\026'\(\001 024\005\(\033\0244/\001 035\032\032\0351*\026-\035\001 035\001 030\024&\035\025\f\001 020'\001 024*+\035\033\001 1$\027\035\027#\001 035\001 033\0241\035&4\033\035\001 030$0\001 2\035\001 0334'1$*\035&\001 026\032\001 035\001 026\030/\033\024-\035\030\035'*\001 026'\001 UG8\021\001 0254\035\001\026\027\001'\035\(\025\026\(\0262\025\035\f\001\020'\0011$\027\035\001*+\035\001\026'/4*\001&$*$\001$\033\035\001\030\024\027*\001&0'$\030\0261#\001 027\001 026'\001 035\001 1$\027\035\001 027*4&0\001 4 001 035\001 UG8\021\001 030$0\001 2\035\001 1\024\030/$\033\035&\001 024\001 001 11\035/*$2\025\035\001 035-$\0254$*\026\024'\001 024\032\001 035\001 026'/4*\001 032\02541*4$*\026\024'\027P\001 020\032\001 026*\001 026\027\001 027\030$\025\025\035\033\001 001 035\001 026'/4*\001 027*$'&$\033&\001 035-\026$*\026\024'#\001 035\001 033\0241\035&4\033\035\001 0304\027*\0012\035\001*\0334'1$*\035&\001\027\026'1\035\001$'0\001\027\035\035\030\026'\(\001\026\030/\033\024-\035\030\035'*\001\026\027\001$\001\030\035\033\035\001 026\025\0254\027\026\024'\f\001 6+\035\001 025$\027*\001 027*\035/\001 024\032\001 035\001 033\0241\035&4\033\035\001 0353$\030\026'\035\027\001 035*+\035\033\001 035\001 1\024'\027\035H4\035'*\026$\025\001 030\024&\035\025\001 024\032\001 035\001 033\035\025\026$2\026\025\026*0\001 0324'1*\026\024'#\001 026*+\001 024'\035\005 033\0244/\001 035\032\032\0351*\026-\035\001 035#\001 026\027\001 027$*\026\027\032$1*\024\0330\001 11\024\033&\026'\(\001 024\001 035\001 0334'1$*\026'\(\001 1\033\026*\035\033\026\024'\f\001 020*\001 030$0\001 027*\026\025\025\001 2\035\001 024\027\027\0262\025\035#\001 024%\035-\035\033\001 024*\001 0351\035\027\027$\0330#\001 024\001 0324\033*+\035\033\001 030\024&\026\0320\001 035\001 030\024&\035\025\001 20\001 1\024\030\030\035'1\026'\(\001 001 027\0351\024'&\001 027\035\001 026*+\001 024\005\(\033\0244/\001 035\032\032\0351*\026-\035\001 035\001 026\027*\033\02624*\026\024'\f\001 001 026\027\001/+$\027\035#\001*+\035\001%+\024\025\035\001/\033\0241\035&4\033\035\001\026\027\001/\035\033\032\024\033\030\035&\001$\025\025\001\024-\035\033\001$\($\026'#\001 026*+\001\030\024\033\035\0014'\036'\024%'\001/$\033$\030\035*\035\033\027\001$\027\001/\035\033\001\031\006\r\\f\001\001 001 001 004\034\001 005\001\001 005\005\001 005\007\001 005\035\001 005\034\001 006\001\001 001 005\001\001 007\001\001 035\001\001 034\001\001 004\001\001\001 007\b\t\n\013\013 031 031?2 001 EJJ\t 032\020&\024\017\022\b\032\033\013\013\013\013\013\013\013\013 \013\003\001 013 005 013 001 031  f 017   001\001 031  f 017 2  001\001 


Copyright © 2009 Boeing. All rights reserved  Correlation Process To archive received ASDI data  Track messages must be correlated with flight plan messages FLIGHT_KEY assigned Uncorrelated data tagged Approx 30 minutes to correlate one day of data 


Copyright © 2009 Boeing. All rights reserved  Historical Data Processing To load correlated data  Uncompress, unmarshall  Create a list of files containing the correlated data  Write data to warehouse 


Copyright © 2009 Boeing. All rights reserved  Live Data Processing Processed using IBM MQ IBM Message Broker and a technique called XML Shredding Message Broker Compute Nodes  Uncompress Node  Extract correlated messages  Shred Node adds to DB Stored Procedure ìshreds XML docs and adds to tables 


Copyright © 2009 Boeing. All rights reserved  Issues and Observations Initial load of one day of data ~ 7 hours Optimizations  Write data in batches  Use a mutable data structure to create data strings  Deploy a higher performance machine  Use load instead of insert  Use DB2 Range-Partitioned tables  Database tunings Time reduced from 7 hours to approx 30 minutes 


Copyright © 2009 Boeing. All rights reserved  Optimizations Use a mutable data structure to create data strings  Original application created the SQL statement by appending elements to a Java String  It was taking five hours \(of the seven hours Strings  Instead Java StringBuilder used  Java Strings immutable  Time savings of 71.4 


Copyright © 2009 Boeing. All rights reserved  Optimizations Deployed on a higher-performance machine  Application ported from IBM Blade Center HS21 \(4GB of RAM and 64-bit dual-core Xeon 5130 processor to Dell M4500 computer \(4GB of RAM and 64-bit of quad-core Intel Core i7 processor  Reduced the time to thirty minutes Bulk loading instead of insert  Application was modified to write CSV files for each table  Entire day worth of data bulk loaded  Reduced the time to fifteen minutes 


Copyright © 2009 Boeing. All rights reserved  Optimizations Range-Partitioned tables \(RPT  To limit the size of tables, the original code created multiple tables per table type  This puts burden on the application to query multiple tables when a range crosses several tables  With RPT, user is not required to make multiple queries when a range crosses a table boundary  Increased the time to thirty minutes  Additional fifteen minute cost per day of partitioning enabled time savings during queries 


Copyright © 2009 Boeing. All rights reserved  Optimizations Database tunings  Range periods changed from a week to a month  Automatic table space resizing changed from 32MB to 512KB  Buffer pool size decreased  Decreased the time to twenty minutes Overall, total time savings of 95.2 


Copyright © 2009 Boeing. All rights reserved  20 IBM Confidential Analytics Landscape Degree of Complexity Competitive Advantage Standard Reporting Ad hoc reporting Query/drill down Alerts Simulation Forecasting Predictive modeling Optimization What exactly is the problem What will happen next if What if these trends continue What could happen What actions are needed How many, how often, where What happened Stochastic Optimization Based on: Competing on Analytics, Davenport and Harris, 2007 Descriptive Prescriptive Predictive How can we achieve the best outcome How can we achieve the best outcome including the effects of variability Used with permission of IBM 


Copyright © 2009 Boeing. All rights reserved Initial Analysis Activities Flights departing or arriving on a date Flights departing or arriving within a date and time range Flights between city pair A,B Flights between a list of city pairs Flights passing through a volume on a date. \(sector, center, etc boundary Flights passing through a volume within a date and time range Flights passing through an airspace volume in n-minute intervals All x-type aircraft departing or arriving on a date Flights departing or arriving on a date between city pair A,B Flights departing or arriving on a date between a list of city pairs Flights passing through a named fix, airway, center, or sector Filed Flight plans for any of the above Actual departure, arrival times and actual track reports for any of the above 


Copyright © 2009 Boeing. All rights reserved  Initial SPSS Applications Show all tracks by call sign 


Copyright © 2009 Boeing. All rights reserved  Predictive / Prescriptive Analytics Use-Case For a given Airspace Volume of Interest \(AVOI compute distinct traffic volume at some point in the future  Aim to alert on congestion due to flow control areas or weather if certain thresholds are exceeded  Prescribe solution \(if certain thresholds are exceeded Propose alternate flight paths  Use pre-built predictive model  SPSS Modeler performs data processing Counts relevant records in the database \(pattern discovery Computes traffic volume using statistical models on descriptive pattern Returns prediction with likelihood 


Copyright © 2009 Boeing. All rights reserved  Predictive / Prescriptive Analytics Use-Case Advanced Arrival Procedures with Active Abatement Potentials   9/23/10  24 Pulls in the TRACKINFO table of MAIN using SQL Limits the data to database entries which fall inside the AVOI Combines the SOURCE_DATE and SOURCE_TIME to a timestamp that can be understood by modeler Computes which time interval the database entry falls in. The time interval is 15 minutes Defines the target and input fields needed for creating the model Handles the creation of the model Produces a graph based off of the model results Final prediction 


Copyright © 2009 Boeing. All rights reserved  Initial Cognos BI Applications IBM Cognos Report Studio  Web application for creating reports  Can be tailored by date range, aircraft id, departure/arrival airport etc  Reports are available with links to visuals IBM Framework Manager  Used to create the data package  Meta-data modeling tool  Users can define data sources, and relationships among them Models can be exported to a package for use with Report Studio 


Copyright © 2009 Boeing. All rights reserved  Flights Departing Las Vegas on Jan 1, 2012 1 of 3 Report shows the departure date, departure and arrival locations and hyperlinks to Google Map images DeparturePosition and ArrivalPosition are calculated data items formatted for use with Google Maps Map hyperlinks are also calculated based on the type of fix 


Copyright © 2009 Boeing. All rights reserved  Flights Departing Las Vegas on Jan 1, 2012 2 of 3 DeparturePosition, Departure Map, ArrivalPosition and Arrival Map are calculated data items \(see departure items below DepartureLatitude DepartureLongitude DeparturePosition Departure Map 


Copyright © 2009 Boeing. All rights reserved  Flights Departing Las Vegas on Jan 1, 2012 3 of 3 


Copyright © 2009 Boeing. All rights reserved  Conclusion and Next Steps Current archive is 50 billion records and growing  Approximately 34 million elements per day  1GB/day Sheer volume of raw surveillance data makes analytics process very difficult The raw data runs through a series of processes before it can be used for analytics Next Steps  Continue application of predictive and prescriptive analytics  Big data visualization 


Copyright © 2009 Boeing. All rights reserved  Questions and Comments Paul Comitz Boeing Research & Technology Chantilly, VA, 20151 office Paul.Comitz@boeing.com 


Copyright © 2009 Boeing. All rights reserved Advanced Arrival Procedures with Active Abatement Potentials   9/23/10  31 


Copyright © 2009 Boeing. All rights reserved Advanced Arrival Procedures with Active Abatement Potentials   9/23/10  32 Backup Slides 


Copyright © 2009 Boeing. All rights reserved  Initial Approach Initial Investigations  Apache Solr/Lucene  Data Warehouse Evaluate Hadoop in the future 


Copyright © 2009 Boeing. All rights reserved  Using SOLR Uncompress Track Information Messages To use with Solr  Transforming track messages from their  original schema to Solr required building a ìkey, valueî list using an XSTL  Queries made against this list of ìkey, valueî pairs Transformation Process  One day of data ~ 4.5 hours Once transformation complete search/query performance very good Geo spatial queries using  unique query language 


Copyright © 2009 Boeing. All rights reserved  Representation Aviation data is frequently represented in more than one form 


