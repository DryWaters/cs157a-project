Genetic Network Programming based data mining method for extracting fuzzy association rules Karla Taboada Non-Member IEEE  Eloy Gonzales Non-Member IEEE  Kaoru Shimada Member IEEE  Shingo Mabu Member IEEE and Kotaro Hirasawa Member IEEE Abstract  In this paper a new data mining algorithm is proposed to enhance the capability of exploring interesting knowledge from databases with continuous values The algorithm integrates Fuzzy Set Theory and Genetic Network Programming GNP to nd interesting fuzzy association rules from given transaction data GNP is a novel evolutionary optimization technique which uses directed graph structures 
as gene instead of strings Genetic Algorithms or trees Genetic Programming contributing to creating quite compact programs and implicitly memorizing past action sequences We adopt the Fuzzy Set Theory to mine associate rules that can be expressed in linguistic terms which are more natural and understandable for human beings The proposed method can measure the signiìcance of the extracted association rules using support conìdence and  2 test and obtains a sufìcient number of important association rules in a short time Experiments conducted on real world databases are also made to verify the performances of the proposed method I I NTRODUCTION A SSOCIATION RULE MINING is one of the most important issues in data mining eld Most of the 
previous researches can however only handle transaction data with binary values since they are based on Agrawal’s proposed approach 2 In real-w orld applications scientiﬁc and statistical databases are usually composed of continuous values Therefore for dealing with continuous values existing algorithms usually involve discretization of the continuous attributes into several intervals as a preprocesing step However in some situations human knowledge does not exactly corresponds to such discretization For instance in the following knowledge small cars make tall people feel unconfortable the linguistic term  tall  can not be appropiately represented by an interval Designing a sophisticated association rule mining algorithm to deal with different types of data becomes a challenge in this research 
topic Fuzzy set Theory that provides the framework for dealing with linguistic terms has been more frequently used in intelligent systems because of its simplicity and similarity to human reasoning The theory has been successfully applied to many elds such as engineering manufacturing economics and others 4 In this paper we propose an association rule mining algorithm that can deal with databases with continuous Authors are with the Graduate School of Information Production and Systems Waseda University Hibikino 2-7 Wakamatsu-ku Kitakyushushi Fukuoka 808-0135 Japan phone 81 93 692-5261 fax 81 93 692-5261 email  egonzale karla  taboada  asagi.waseda.jp  k.shimada mabu  
aoni.waseda.jp hirasawa@waseda.jp values Our method integrates Fuzzy Set Theory and Genetic Network Programming GNP in order to obtain association rules that can be expressed in linguistic terms which are more natural and understandable for human beings this type of knowledge makes the discovered rules more useful GNP is one of the evolutionary optimization techniques  6 7 which uses directed graph structures as genes instead of strings Genetic Algorithms or trees Genetic Programming GNP is composed of three types of nodes in a network a start node judgment nodes and processing nodes are linked together on the graph The features of GNP are described as follows First because it is possible to reuse the nodes the structure is compact Second GNP can nd solutions of problems without bloat which can be sometimes 
found in Genetic Programming GP because of the xed number of nodes in GNP Third the nodes that are not used at the current program executions would be used for future evolution Fourth GNP is able to cope with partially observable Markov processes We have already proposed association rules mining algorithms based on GNP that can deal with discrete and continuous values 9 In this paper  w e e xtend and improve the previous research and propose a method that is capable of transforming continuous values in transactions into linguistic terms and nding fuzzy association rules by using GNP In addition to that the parameters of the fuzzy membership functions are evolved by using non uniform mutation in order to obtain as many association rules as possible The characteristics of the proposed method compared to 
other methods are as follows  Extracts rules without identifying frequent itemsets used in Apriori-like mining methods  Stores extracted important association rules in a pool all together through generations  Measures the signiﬁcance of associations by using support conﬁdence and  2   Uses extracted important rules in the pool as acquired information for genetic operations  Discover fuzzy association rules by using GNP  Parameters of the membership functions are evolved by using non uniform mutation in every generation in order to obtain new association rules 
 The pool is updated in every generation exchanging an association rule with lower  2 value for an association rules with higher  2 value  Extracts important rules enough for user’s purpose in a 175 6 978 1 4 2 44 18 2 3 7 0 8 2 5 00 c  200 8 I EEE 


Fig 1 The basic structure of GNP individual short time II G ENETIC N ETWORK P ROGRAMMING Genetic Algorithm GA Genetic Programming GP and Evolutionary Programming EP are the typical methods of the evolutionary algorithm GA evolves strings as individuals and it is mainly applied to optimization problems GP was formulated later in order to expand the expression ability of GA by using tree structures therefore GP is applicable to more complex problems Genetic Network Programming GNP is an extension of GA and GP which uses directed graph structures as genes instead of strings and trees The aim of developing GNP is to deal with dynamic environments efﬁciently by using the higher expression ability of graph structures A Basic Structure of GNP GNP is composed of three kinds of nodes that are connected each other in a network start node judgment node and processing node Fig 1 shows the basic structure of GNP Judgment nodes are the set of J 1  J 2   J p  which work as if-then type conditional branch decision functions they return judgment results for assigned inputs and determine the next node Processing nodes are the set of P 1  P 2   P q  which work as action  processing functions Contrary to judgment nodes processing nodes have no conditional branches Start node has no functions and no conditional branches The only role of the start node is to determine the next node i.e  the rst node to be executed Once GNP is booted up rstly the execution starts from the start node secondly the next node to be executed is determined according to the current judgment result and connection from the current activated node The genotype expression of GNP node is shown in Fig 2 NT i describes the node type NT i 0 when node i is start node NT i 1 when node i is judgment node and NT i 2 when node i is processing node ID i is an identiﬁcation number for example NT i 1 and ID i 1 mean node i is J 1  C i 1  C i 2   denote the nodes which are connected from node i rstly secondly  and so on depending on the arguments of node i  Fig 2 Gene structure of node i of GNP Fig 3 Crossover B Genetic Operations of GNP Selection crossover and mutation of GNP are reviewed as follows  The individuals preserved to the next generation are selected according to the tness of each individual Roulette tournament and elite selection are established in GNP  The crossover of GNP is the genetic operation that generates two new offspring by exchanging the genetic information between two parents see Fig Crosso v e r operator affects two parent individuals All the connections of the uniformly selected corresponding nodes in two parents are swapped each other by crossover rate P c  One point crossover several points crossover and uniform crossover are established in GNP  The mutation is executed in one individual and a new one is generated see Fig Each node branch  C i 1  C i 2   is selected with the pr obability of P m 1 and the selected branch is reconected to another node Each node function  ID i  is selected with the probability of P m 2 and the selected function is changed to another one III A SSOCIATION RULES Association rules show attributes that occur frequently together in a given dataset A typical and widely used example of association rule mining is Market Basket Analysis In brief an association rule has the form  X  Y  where X antecedent and Y consequent are disjoint conjunctions of item subset  e.g  Diapers  Beer   To evaluate the 2008 I EEE Co n g r e ss o nE vol uti o nar yCo mputati o n C E C 2008 1757 


Fig 4 Mutation signiﬁcance of the extracted association rules the supportconﬁdence framework is commonly used The support of the rule is deﬁned as the percentage of the records having both attributes X and Y and the conﬁdence is deﬁned as the percentage of the records having Y given that they also have X  The following is a formal statement of the problem of mining association rules Let I   A 1 A 2 A l  be a set of literals called items or attributes Let G be a set of transactions where each transaction T is a set of items such that T  I  Associated with each transaction is a unique identiﬁer whose set is called TID  A transaction T contains X  a set of some items in I if X  T  An association rule is an implication of the form of X  Y  where X  I  Y  I  and X  Y    X is called antecedent and Y is called consequent of the rule In general a set of items is called an itemset Each itemset has an associated measure of statistical signiﬁcance called support If the fraction of transactions containing X in G equals t  then support  X  t Therule X  Y has a measure of its strength called conﬁdence deﬁned as the ratio of support  X  Y  support  X   A Ca l cu l ation of  2 Va l ue of the Ru l e X  Y In our research we have extended the traditional supportconﬁdence framework and proposed the measurement of the signiﬁcance of an association rule by calculating  2 for correlation used in classical statistics The  2 statistic is deﬁned as follows Let support  X  x  support  Y  y  support  X  Y  z and the number of database tuples equal N  If events X and Y are independent then support  X  Y  xy  Table 1 is the contingency of X and Y  the upper parts are the expectation values under the assumption of their independence and the lower parts are observational Now let E denote the value of the expectation under the assumption of independence and O the value of the TABLE I T HE CONTINGENCY OF X AND Y   Y  Y  row X Nxy N  x  xy  Nz N  x  z  Nx  X N  y  xy  N 1  x  y  xy  N 1  x  N  y  z  N 1  x  y  z   col Ny N 1  y  N  N  the number of tuples   TID    observation Then the  2 statistic is deﬁned as  2   AllCells  O  E  2 E 1 We can calculate  2 using x  y  z and N of Table 1 as follows  2  N  z  xy  2 xy 1  x  1  y   2 This has 1 degree of freedom If it is higher than a cutoff value 3.84 at the 95 signiﬁcance level or 6.63 at the 99 signiﬁcance level we should reject the independence assumption IV R EVIEW OF RELATED WORKS Recently some research works have been done on the use of Fuzzy Set Theory in discovering association rules for dealing continuous attributes Miller and Yang proposed a distance-based association rules mining process which improves the semantics of the intervals Hirota and Pedrycz proposed a context sensitive fuzzy clustering method based on fuzzy C-means to construct rule-based models Au and Chan proposed the F-APACS method in order to solve the qualitative knowledge discovery problem 15 Ishibuchi et al and E Hullermeier illustrated fuzzy versions of conﬁdence and support 17 Gyenesei presented tw o different methods for mining fuzzy continuous association rules namely without normalization and with normalization  19 The e xperiments of Gyenesei sho wed that the numbers of large itemsets and interesting rules found by the fuzzy method are larger than the discrete method deﬁned by Srikant and Agrawal  Evolutionary algorithms such us Genetic algorithms GAs and Genetic Programming GP have also been used in the eld of data mining since they are powerful search techniques in solving difﬁcult problems M Kaya proposed a GA-based clustering method to derive a predeﬁned number of membership functions for getting a maximum proﬁt  Hong et al proposed a GA-based fuzzy data-mining method for extracting both association rules and membership functions from quantitative transactions R Mendez et al proposed a co-evolutionary system for discovering fuzzy classiﬁcation rules The system uses two evolutionary algorithms a GP algorithm evolving a population of fuzzy rule sets and a simple evolutionary algorithm evolving a population of fuzzy membership functions deﬁnitions The two populations co-evolve so that the nal result is a fuzzy rule set and a set of membership functions deﬁnitions that are well adapted to each other L yman et al present a 1758 2008 I EEE Co n g r e ss o nE vol uti o nar yCo mputati o n C E C 2008 


GP approach for mining disjunctive association rules applied to the problem of analyzing card sorting data In most of the described algorithms the objective is to expand the techniques presented for the binary form however the problems existing in the fuzzy form remain unsolved in cases of large datasets That is they are often inefﬁcient in both computation and description terms and generally they have space and time complexity problems compared to traditional models V GNP BASED DATA MINING ALGORITHM FOR CONTINUOUS VALUES In this section the proposed GNP based algorithm for mining fuzzy association rules is described A Fuzz y Association Ru l es Compared with traditional association rules fuzzy association rules provide good linguistic explanation and can deal with both discrete and continuous attributes It provides an alternative approach in the applications of association rules by reducing the complexity of association rules and covering more important attributes in the rules The proposed method extracts the fuzzy association rules as follows Let A i be a fuzzy attribute item with a continuous value in a database If  A i is F iq  A i    A j is F jq  A j    A m is F nq  A m    A n is F nq  A n  where F iq  A i    F jq  A j  F mq  A m    F nq  A n  are qth membership functions of A i   A j A m   A n  respectively For instance If A 1 is High  A 2 is Low  A 5 is Medium  A 7 is High B Fuzz y Membership Functions The proposed algorithm rst transforms each continuous value of the database into a fuzzy set with linguistic terms using the combination of trapezoidal and triangular fuzzy membership functions spaced symmetrically and equally as shown in Fig 5 Fig 5 Deﬁnition of the fuzzy membership functions Fig 6 shows an example of the fuzzy membership functions for age and salary attributes Table III shows the calculated membership values using Table II Once a GNP individual starts the searching for association rules described in section D the membership value is employed to determine the transition from one judgment node to another that is a random number is generated and TABLE II A SAMPLE DATABASE  TID Age Salary 1 24 2500 2 30 4000 3 35 3500 4 50 5000 a Age Attribute b Salary Attribute Fig 6 Membership functions of age and salary attributes compared to the membership value of the fuzzy attribute which is used as a probability for determining the Yes-side or No-side of the judgment node of the fuzzy attribute C E v o l ution of the Fuzz y Membership Functions usin g NonUniform Mutation The fuzzy parameters are used to deﬁne the membership functions For instance if the triangular membership function is used then the fuzzy parameters would be the center and width of the triangle In this paper the parameters of the fuzzy membership functions are    and  according to Fig 5 and are evolved by using non uniform mutation proposed by Michalewicz This ne w operator  t hat reduces the disadvantages of random mutation is deﬁned as follows For each individual X t p in a population of t th generation create the following offspring X t 1 p through non-uniform mutation if X t p   x 1 x 2 x l  is a chromosome then the offspring X t 1 p   x  1 x  2 x  l  becomes as follows x  k   x k  t U B  x k   if a random  is 0 x k   t x k  LB   if a random  is 1 3 x k is selected for the mutation LB and UB are the lower and upper bounds of the variable x k  The function  t y  returns a value in the range 0 y  such that  t y  approaches to zero as t increases This property causes this operator to search the space uniformly initially when t is small and very locally at later generations This strategy increases the probability of generating a new number closer to its predecessor than a random choice at later generations We use the following function  t y  y 1  r 1  t T     4 where r is a uniform random number from 0 T is the maximal generation number and  is a system param2008 I EEE Co n g r e ss o nE vol uti o nar yCo mputati o n C E C 2008 1759 


TABLE III D ATABASE WITH MEMBERSHIP VALUES  TID Age Salary Young M iddle Old Low Medium High 1 0.8 0.2 0 0.75 0.25 0 2 0.5 0.5 0 0 1 0 3 0.25 0.75 0 0.25 0.75 0 4 0 0.5 0.5 0 0.5 0.5 eter determining the degree of dependency on the iteration number In this paper  5 D GNP Structure for Association Ru l e Minin g GNP examines the attribute values of database tuples using judgment nodes and calculates the measurements of association rules using processing nodes 9 Attrib utes and their values correspond to judgment nodes and their judgments in GNP respectively Therefore the connections of judgment nodes are represented as association rules The measurements include support  conﬁdence and  2 value described in the next section Fig 7 shows an example of the connection of nodes in GNP for association rule mining P 1 is a processing node and is a starting point for calculating association rules Each processing node has an inherent numeric order  P 1  P 2   P s  and is connected to a judgment node Yes-side of the judgment node is connected to another judgment node Judgment nodes can be reused and shared with some other association rules because of GNP’s features No-side of the judgment node is connected to the next numbered processing node Fig 7 A connection of nodes in GNP for association rule mining In Fig 7 N is the number of total tuples and a  b  c and d are the numbers of tuples moving to Yes-side at each judgment node Once a GNP individual starts the searching for association rules the membership values are employed to determine the transition from one judgment node to another that is according to the membership value of the attribute A i described in section B the probability of selecting the judgment result Yes  No is calculated E Findin g Association Ru l es usin g GNP The number of kinds of the judgment node functions are equal to the number of attributes multiplied by the number of kinds of linguistic terms in a database For example supposing that we examine tuple 1  TID  in the judgment node of  A i is F iq  A i   a random number from the interval  is compared with the v alue calculated by F iq  A i   Then if the random number is smaller that the value the transition moves to Yes-side otherwise it moves to No-side If the examination of the connection from the starting point P s ends then GNP examines tuple 2  TID likewise Thus all tuples in the database will be examined The total number of tuples moving to Yes-side at each judgment node is calculated for every processing node which is a starting point for calculating association rules All GNP individuals are searched in parallel at the same time If Yes-side connection of judgment nodes continues and the number of the judgment nodes becomes a cutoff value maximum number of attributes in extracted association rules then Yes-side connection is transferred to the next processing node obligatorily F Measurements of the Association Ru l es usin g GNP Table IV shows the measurements such as support and conﬁdence of the association rules In Fig 7 and Table IV A 1 High,A 2 Low A 3 Mid and A 4 High are example of  A i is F iq  A i   where the membership functions have three kinds of linguistic terms such us Low Medium and High i.e  F i 1  Low  F i 2  Medium and F i 3  High  and A i is the fuzzy variable corresponding to attribute A i  The proposed method measures the signiﬁcance of associations via the  2 test for correlation used in classical statistics For example we are able to calculate the support of A 3 Mid and A 3 Mid  A 4 High  if we change the connection of P 1 node from A 1 High node to A 3 Mid node in Fig 7 We can repeat this like a chain operation in each generation Now we deﬁne important association rules by the ones which satisfy the following  2  2 min  5 support 012 sup min  6 Where  2 min and sup min are the minimum  2 and support values given by supervisors In this deﬁnition if the rule  X  Y  is important then X  Y  X  Y  X   Y Y  X Y  X  Y  X and  Y  X are also important rules If required we can also add conﬁdence to the deﬁnition The extracted association rules are stored in a pool all together through generations When an important rule is extracted by GNP the overlap of the attributes is checked and it is also checked whether an important rule is new or not i.e  whether it is already in the pool or not If the rule is new it is stored in the pool with its support  conﬁdence and  2  If the association rule is not new because the linguistic terms that describe the attributes are different from the ones of the association rule in the pool the association rule with higher  2 value is stored then the pool is updated in every generation and only important association rules with higher  2 values are stored See Fig 17 60 2008 I EEE Co n g r e ss o nE vol uti o nar yCo mputati o n C E C 2008 


TABLE IV S UPPORT AND CONFIDENCE OF ASSOCIATION RULES   association rules support conﬁdence A 1 High  A 2 Low b  N b  a A 1 High  A 2 Low  A 3 Mid c  N c  a A 1 High  A 2 Low  A 3 Mid  A 4 High d  N d  a A 1 High  A 2 Low  A 3 Mid c  N c  b A 1 High  A 2 Low  A 3 Mid  A 4 High d  N d  b A 1 High  A 2 Low  A 3 Mid  A 4 High d  N d  c Fig 8 The pool is updated generation by generation G Fitness of GNP Fitness of GNP is deﬁned by F   r  R   2  r   n ante  r   1  n con  r   1  new  r   7 The items are as follows R  set of sufﬁxes of extracted important association rules satisfying 5 and 6 in a GNP individual  2  r    2 value of the rule r  n ante  r   the number of attributes in the antecedent of the rule r  n con  r   the number of attributes in the consequent of the rule r   new  r   additional constant deﬁned by  new  r    new the rule r is new 0 the rule r has been already extracted 8  2  r   n ante  r   n con  r  and  new  r  are concerned with the importance complexity and novelty of the rule r  respectively H Genetic Operators of GNP The following genetic operators are executed to GNP individuals  Crossover Operator producing offspring from parents Uniform crossover is used Judgment nodes are selected as crossover nodes with the probability of P c  Two parents exchange the gene of the corresponding crossover nodes  Mutation-1 Operator that affects one individual The connection of the judgement nodes is changed by mutation rate of P m 1   Mutation-2 Operator that also affects one individual The function of the judgment nodes is changed by mutation rate P m 2  All GNP individuals in a population have the same number of judgment and processing nodes however the node with the same node number does not have the same function All the connections of the processing nodes are changed randomly in order to extract rules efﬁciently I Use of Acquired Information We can use the frequency of the attributes of all extracted rules or rules extracted in some of the latest generations when doing Mutation-2 We deﬁne the probability of selecting the attribute F iq  A i  for judgment nodes by the following P g iq  n g  F iq  A i   C  k  K  q  n g  F kq  A k   C   9 Where P g iq is the probability of selecting F iq  A i  using the information on the association rules extracted in the latest g generations n g  F iq  A i  is the frequency of the attribute F iq  A i  in the rules extracted in the latest g generations K is the set of sufﬁxes of attributes If no rules are extracted in the recent g generations then P g iq is equal to the inverse of the number of attributes C is a constant given by the supervisor Fig 9 shows the owchart of our proposed method VI S IMULATION R ESULTS The performance of the proposed method was evaluated by doing two simulations In simulation 1 the extraction of association rules is done by using xed parameters of the fuzzy membership functions that is they remain xed for all generations In simulation 2 the parameters of the fuzzy membership functions evolve by non uniform mutation in 2008 I EEE Co n g r e ss o nE vol uti o nar yCo mputati o n C E C 2008 17 6 1 


Fig 9 Flowchart of the GNP based data mining method order to get suitable parameters and increase the number of association rules stored in the pool All experiments were run on a real database that contains continuous attributes about VOCs Volatile Organic Compounds It consists of 10 attributes  A i  i 1  2  10  and 825 tuples In simulations the population size of GNP individuals is 120 The number of processing nodes and judgment nodes are 10 and 78 respectively We use 5   2 min  6.63 6  sup min 0  1  and 8   new  150  In addition the detailed conditions of extracting association rules in the simulations are as follows n ante  r  n con  r  012 6  n ante  r   5  n con  r   5  The probability of crossover and mutation are P c 15  78  P m 1 1  3 and P m 2 1  5 78 corresponds to the number of judgment nodes The number of changing the connections of the processing nodes at each generation is 5 The simulations were executed for 500 generations and 20 trials are studied here for all the experiments changing the random sequences All algorithms were coded in Java Experiments were done on a 1.50GHz Pentium M with 504MB RAM A Simu l ation 1 In this simulation when transforming each continuous attribute of the database into a fuzzy attribute the parameters    and  of the trapezoidal and triangular membership functions remain xed for all generations it means that for the transition from one judgment node to another in GNP individuals the xed membership functions are used for all generations As an illustration the original membership function for one attribute is shown in Fig 10 Fig 11 shows the number of association rules extracted in the pool It is shown from this gure that the number of rules increases gradually as the generation goes on However the performance is not so good compared with Simulation 2 where the membership functions are also evolved Fig 12 shows the average tness values of the GNP individuals They remain almost at the same level during all generations B Simu l ation 2 In this simulation the parameters    and  of the membership functions are evolved using non uniform mutation Fig 10 An example of the original fuzzy membership function Fig 11 Association rules stored in the pool when membership functions are xed Fig 12 Average tness value of GNP individuals when membership functions are xed it means that for the transition from one judgment node to another in GNP individuals evolved membership functions are used in every generation Fig 13 shows the number of association rules extracted in the pool while Fig 14 shows the average tness values of the GNP individuals It is found that both the number of rules extracted and the average tness value increased compared to Simulation 1 It shows that the evolution of the membership functions generation by generation is helpful for extracting many rules and for improving the performance of the GNP individuals’s tness value Fig 15 shows the evolved membership function of Fig 10 In this simulation the pool of the association rules is updated in every generation exchanging an association rule with lower  2 value for the same association rule with higher  2 value as a result association rules are stored with the parameters of the evolved membership functions 17 62 2008 I EEE Co n g r e ss o nE vol uti o nar yCo mputati o n C E C 2008 


Fig 13 Association rules stored in the pool when membership functions are evolved Fig 14 Average tness value of the GNP individuals when membership functions are evolved Fig 15 An example of the evolved fuzzy membership function VII C ONCLUSIONS AND F UTURE W ORK In this paper we have proposed an association rule mining algorithm based on Genetic Network Programming and Fuzzy Sets Theory to extract association rules from databases with continuous values Extracted association rules are stored in a pool all together through generations in order to nd new important rules The pool is also updated in every generation exchanging the same association rule with lower  2 value for higher  2 value These rules are reﬂected in genetic operators as acquired information Our method measures the signiﬁcance of association rules using conﬁdence support and  2 test We have performed experiments and estimated the performances of the proposed algorithm The results have shown that the proposed method extracts important association rules effectively in short time Adjusting the membership functions according to the frequency of the attributes stored in the pool in order to nd the most suitable parameters is our future work R EFERENCES  R Agra w al T  Imielinksi and A  S w ami Mining association rules between sets of items in large databases The 1993 ACM SIGMOD Conference pp 207-216 1993  R Agra w al T  Imielinksi and A  S w ami Database mining a p erfor mance perspective in The IEEE Transactions on Knowledge and Data Engineering Vol 5 No 6 pp 914-925 1993  I Graham and P  L  Jones Expert Systems Kno wledge Uncertainty and Decision Chapman and Computing Boston pp.117-158 1988  A Kandel Fuzzy Expert Systems CRC Press Boca Raton pp 8-19 1992  T  Eguchi K Hirasa w a  J  H u and N Ota  A study of Ev olutionary Multiagent Models Based on Symbiosis IEEE Trans on S y st Man and C y bernetics Part B  Vol.36 No.1 pp.179-193 2006  S Mab u  K  Hirasa w a and J Hu  A Graph-Based Ev olutionary Algorithm Genetic Network Programming and Its Extension Using Reinforcement Learning Evolutionary Computation MIT press Vol 15 No.3 2007  K Hirasa w a  M  Okubo H Katagiri J Hu and J Murata Comparison between Genetic Network Programming and Genetic Programming In Proc of Con g ress of E v o l utionar y Computation  pp.1276-1282 2001  K Shimada K Hirasa w a and J  Hu Genetic Netw ork Programming with Acquisition Mechanisms of Association Rules Journa l of Adv anced Computationa l Inte ll i g ence and Inte ll i g ent Informatics  Vol 10 No 1 pp.102-111 2006  K Shimada K Hirasa w a and J  Hu Class Association Rule Mining with Chi-Squared Test Using Genetic Network Programming In Proc of IEEE SMC 2006  pp.5338-5344 2006  C Zhang and S  Zhang Association Rule Mining models and algorithms Springer Sydney Australia 2002 pp 238  S Brin R Motw ani and C Silv erstein Be yond mark et bask ets generalizing association rules to correlations In Proc of the 1997 ACM SIGMOD Conf  pp.265-276 1997  R.J Miller and Y  Y ang Association rules o v er interv al data In Proc of ACM SIGMOD Conf Mana g ement of Data  1997  K Hirota and W  Pedrycz Linguistic data mining and fuzzy modelling Proc IEEE Internat Conf Fuzzy Systems Vol 1 1996  K.C.C Chan and W H Au An E f fecti v e Algorithm for Mining Interesting Quantitative Association Rules in Proc of the 12th ACM Symp on Applied Computing Feb 1997  K.C.C Chan and W H Au Mining Fuzzy Association Rules  i n Proc of the 6th ACM Int’l Conf on Information and Knowledge Management Las Vegas Nevada 1997  H Ishib uchi T  Nakashima T  Y a mamoto Fuzzy association rules for handling continuous attributes IEEE ISIE 2001  E Hullermeier and J Beringer  Mining implication-based fuzzy association rules in databases 2003 Elsevier  A Gyenesei Mining weighted association rules for fuzzy quantitati v e items TUCS Technical Report No 346 May 2000  A Gyenesei A fuzzy approach for mining quantitati v e association rules TUCS Technical Report March 2000  R Srikant and R  Agra w al Mining Quantitati v e Association Rules in Large Relational Tables Proc of ACM-SIGMOD Montreal Canada 1996  M Kaya and R Alhajj Genetic algorithm based frame w o rk for mining fuzzy association rules Elsevier 2004  T  P  Hong C H Chen Y  L W u and Y  C  Lee Mining membership functions and fuzzy association rules The 2003 Joint Conference on AI Fuzzy System and Grey System 2003  R Mendez F  V o znika A Freitas and J Nie v ola Disco v e ring Fuzzy Classiﬁcation Rules with Genetic Programming and Co-Evolution in Proc of the 5th European Conference on Principles of Data Mining and Knowledge Discovery PKDD 2001 LNAI 2168 pp 314-325 Springer Berlin 2001  M L y man and G  L e w ando wsk y  Genetic Programming for Association Rules on Card Sorting Data in Proc of the 2005 conference on Genetic and evolutionary computation GECCO 2005 pp 1551-1552 USA 2005  Z Michale wicz Genetic Algorithms  D ata Structures  E v olution Programs 3rd Edition Springer 1996 2008 I EEE Co n g r e ss o nE vol uti o nar yCo mputati o n C E C 2008 17 6 3 


5 Related Work There exists extensive previous work on both the mining of software repositories and on the use of clustering algorithms in software engineering This discussion focuses on the most similar and recent work in the area of software evolution Mining Software Repositories Our technique was partially inspired by the work of Zimmermann et al and Y ing et al 17 on the mining of association rules in change history As described in Section 1 we sought to expand the technique to be able to recommend larger but less precise clusters of elements to guide program navigation Bouktif et al also investigated how to recommend cochanges in software development As opposed to the work cited above Bouktif et al used change patterns instead of association rules Also their approach does not attempt to reconstruct transactions and can consider associated 002les that were changed in different transactions ChangeDistiller is a tool to classify changes in a transaction into 002ne-grained operations e.g addition of a method declaration and determines how strongly the change impacts other source code entities Our approach uses similar repository analysis techniques but is focused on providing task-related information as opposed to an overall assessment of a system's evolution Finally repository mining can also be used to detect aspects in the code In this conte xt aspects are recurring sets of changed elements that exhibit a regular structure Aspects differ from the clusters we detect in the regular structure they exhibit which may not necessarily align with the code that is investigated as part of change tasks Clustering Analysis The classical application of clustering for reverse engineering involves grouping software entities based on an analysis of various relations between pairs of entities of a given version of the system Despite its long and rich history  e xperimentation with this approach continues to this day For example Andreopoulos et al combined static and dynamic information K uhn et al used a te xtual similarity measure as the clustering relation and Christl et al used clustering to assist iterative semi-automated reverse engineering The main dif ferences b e tween most clusteringbased reverse engineering techniques and the subject of our investigation is that the entities we cluster are transactions rather than software entities in a single version of a system For this reason our analysis is based strictly on the evolving parts of the system Both Kothari et al and V an ya et al 15 recently reported on their use of clustering to study the evolution of software systems The idea of using change clusters is the same in both works and ours but the purpose of the work is different Kothari et al use change clusters to uncover the types of changes that happened e.g feature addition maintenance etc during the history of a software system Vanya et al use change clusters which they call evolutionary clusters to guide the partitioning of a system that would increase the likelihood that the parts of the system would evolve independently In contrast we cluster transactions based on overlapping elements not 002les to recommend clusters to support program navigation as opposed to architectural-level assessment of the system Finally Hassan and Holt evaluated on 002ve open source systems the performance of several methods to indicate elements that should be modi\002ed together This study found that using historical co-change information as opposed to using simple static analysis or code layout offered the best results in terms of recall and precision The authors then tried to improve the results using 002ltering heuristics and found that keeping only the most frequently cochanged entities yielded the best results As opposed to our approach the evaluated 002ltering heuristics were only applied on entities recovered using association rules and not using clustering techniques The focus of their study was also more speci\002c as they recommend program elements that were strictly changed  as opposed to recommending elements that might be inspected by developers 6 Conclusion Developers often need to discover code that has been navigated in the past We investigated to what extent we can bene\002t from change clusters to guide program navigation We de\002ned change clusters as groups of elements that were part of transactions or change sets that had elements in common Our analysis of close to 12 years of software change data for a total of seven different open-source systems revealed that less than 12 of the changes we studied could have bene\002ted from change clusters We conclude that further efforts should thus focus on maximizing the quality of the match between the current task and past transactions rather than 002nding many potential matches Our study has already helped us in this goal by providing reliable evidence of the effectiveness of some 002ltering heuristics and useful insights for the development of additional heuristics Acknowledgments The authors thank Emily Hill and Jos  e Correa for their advice on the statistical tests and the anonymous reviewers for their helpful suggestions This work was supported by NSERC 
25 
25 
25 
25 
25 


References  B Andreopoulos A An V  Tzerpos and X W ang Multiple layer clustering of large software systems In Proc 12th Working Conf on Reverse Engineering  pages 79ñ88 2005  S Bouktif Y G Gu  eh  eneuc and G Antoniol Extracting change-patterns from cvs repositories In Proc 13th Working Conf on Reverse Engineering  pages 221ñ230 2006  S Breu and T  Zimmermann Mining aspects from v ersion history In Proc 21st IEEE/ACM Int'l Conf on Automated Software Engineering  pages 221ñ230 2006  A Christl R K oschk e and M.-A Store y  Equipping the re\003exion method with automated clustering In Proc 12th Working Conf on Reverse Engineering  pages 89ñ98 2005  D 020 Cubrani  c G C Murphy J Singer and K S Booth Hipikat A project memory for software development IEEE Transactions on Software Engineering  31\(6 465 2005  B Fluri and H C Gall Classifyi ng change types for qualifying change couplings In Proc 14th IEEE Int'l Conf on Program Comprehension  pages 35ñ45 2006  A E Hassan and R C Holt Replaying de v elopment history to assess the effectiveness of change propagation tools Empirical Software Engineering  11\(3 2006  D H Hutchens and V  R Basili System s tructure analysis Clustering with data bindings IEEE Transactions on Software Engineering  11\(8 1985  D Janzen and K De V older Na vig ating and querying code without getting lost In Proc 2nd Int'l Conf on AspectOriented Software Development  pages 178ñ187 2003  J K ot hari T  Denton A Shok ouf andeh S Mancoridis and A E Hassan Studying the evolution of software systems using change clusters In Proc 14th IEEE Int'l Conf on Program Comprehension  pages 46ñ55 2006  A K uhn S Ducasse and T  G  021rba Enriching reverse engineering with semantic clustering In Proc 12th Working Conf on Reverse Engineering  pages 133ñ142 2005  M P  Robillard T opology analysis of softw are dependencies ACM Transactions on Software Engineering and Methodology  2008 To appear  M P  Robillard and P  Mangg ala Reusing program in v estigation knowledge for code understanding In Proc 16th IEEE Int'l Conf on Program Comprehension  pages 202 211 2008  J Sillito G Murph y  and K De V older Questions programmers ask during software evolution tasks In Proc 14th ACM SIGSOFT Int'l Symposium on the Foundations of Software Engineering  pages 23ñ34 2006  A V an ya L Ho\003and S Klusener  P  v an de Laar and H van Vliet Assessing software archives with evolutionary clusters In Proc 16th IEEE Int'l Conf on Program Comprehension  pages 192ñ201 2008  N W ilde and M C Scully  Softw are reconnaissance Mapping program features to code Software Maintenance Research and Practice  7:49ñ62 1995  A T  Y ing G C Murph y  R Ng and M C Chu-Carroll Predicting source code changes by mining change history IEEE Transactions on Software Engineering  30\(9 586 2004  A Zeller  The future of programming en vironments Integration synergy and assistance In Proceedings of the 29th International Conference on Software Engineering The Future of Software Engineering  pages 316ñ325 2007  T  Zimmermann and P  W eiﬂgerber  Preprocessing C VS data for 002ne-grained analysis In Proc 1st Int'l Workshop on Mining Software Repositories  pages 2ñ6 May 2004  T  Zimmermann P  W eiﬂgerber  S Diehl and A Zeller  Mining version histories to guide software changes In Proc 26th ACM/IEEE Int'l Conf on Software Engineering  pages 563ñ572 2004 A Clustering Algorithm This algorithm is not sensitive to whether a given program element exists or not in a given version of a program For example if method m exists in one version it is considered a valid program element even if it is removed in a later version In the rest of this section we use the term program element to refer to the uniquely identifying representation of the element e.g a Java fully-quali\002ed name Let T be a transaction modeled as a set of program elements changed together during the history of a software system Let T be a sequence of transactions In this algorithm a cluster is also modeled as a set of elements 1 Input  T  A sequence of transactions 2 Parameter  M IN O VERLAP  A positive non-zero value indicating the minimum overlap between two transactions in a cluster 3 Var  C  A set of clusters initially empty 4 for all T i 2 T do 5 MaxOverlap  0 6 MaxIndex  000 1 7 for all C j 2 C do 8 if j C j  T i j  MaxOverlap then 9 MaxOverlap  j C j  T i j 10 MaxIndex  j 11 end if 12 end for 13 if MaxIndex   0  MaxOverlap 025 M IN O VERLAP  then 14 C MaxIndex   C MaxIndex  T i  15 else 16 NewCluster  T i 17 C  C  f NewCluster g 18 end if 19 end for 20 return C B Systems Analyzed System home pages last veri\002ed 7 May 2008 Ant ant.apache.org Azureus azureus.sourceforge.net Hibernate www.hibernate.org JDT-Core www.eclipse.org/jdt/core JDT-UI www.eclipse.org/jdt/ui Spring springframework.org Xerces xerces.apache.org 
26 
26 
26 
26 
26 


