USING EVOLUTIONARY ALGORITHMS AND SIMULATION FOR THE OPTIMIZATION OF MANUFACTURING SYSTEMS L Tautou and H Pierreval Laboratoire de Recherche en Systhes de Production Institut FranGais de Mkcanique Avancke Campus des Ckzeaux B.P 265, F-63175 Aubiere Cedex Phone 33\73 28 
80 00 Fax 33 73 28 81 00 e-mail tautou ifma.ifma.fr and pierreva ijh ifma.j Abstract This paper is concerned with an optimization method for manufacturing systems This method is able to optimize problems with any type of variables \(variables from a real set e.g conveyor speed an integer set e.g 
size of buffer or any general set e.g dispatching rules\It is based on the association of an evolutionary algorithm \(EA\and a simulation model. Extensions of Michalewicz's genetic operators and algorithm are proposed to tackle manufacturing system problems. This method is applied to an example: the configuration of a workshop producing plastic yoghurt pots. The criterion to optimize is the cost of the workshop and the three variables are the size of 
a silo, the size of a warehouse and a choice between two manufacturing methods. The application has been realized by connecting a modified version of Michalewicz's Genocop software for EA and a simulation language 1 Introduction Due to the present tough economic competition, modern manufacturing systems need to provide high performance at the lowest cost. Thus, particular attention has to be paid to the selection of values for the different factors which influence costs and performances 
Those factors can be relative to the configuration of the physical system e.g a number of machines, a size of a warehouse a choice between several machines or a flexible one\or management parameters e.g dispatching rules, storage policies, a number of Kanban\This can be addressed by optimizing a criterion, that is to accurately choose the values of the n variables, Xi of a vector X=\(X1, X2  Xn\where the Xi variables 
can take values from a part of the real set \(e.g., speed of AGV a part of the integer set e.g., number of places in a warehouse\or in any general set E e.g choice between several dispatching rules\Such an optimization approach requires the development of a method able to take into account the different types of variables, the complexity of the system and the fact+that the various variables to optimize are not independent 
In this paper, we propose to choose Xi values by optimizing a simulation model of the system studied with an evolutionary algorithm The method proposed here allows various types of variables \(quantitative or qualitative variables We will first introduce several optimization simulation methods then we will introduce evolutionary algorithms EA and propose an adaptation of these algorithms to the optimization of 
manufacturing systems This approach is then illustrated with the example of the configuration of a workshop producing plastic yoghurt pots, in order to minimize its cost We will finally describe the application of the method and the results we obtained 0-7803-2535-4/95 4.00  1995 IEEE 509 


2 Simulation Optimization Methods A simulation optimization problem is an optimization problem where the objective function is a response evaluated by simulation. It may be formulated as follows rg$f\(X where f is the criterion evaluated by simulation, X=\(Xi 1 n is the vector of variables such as each variable Xi is an element of a real integer or qualitative domain D 8 Di Several research studies have been carried out on simulation optimization In tutorials on simulation optimization, such as Azadivar \(1992 Fu 1994\Kleijnen \(1994 four major classes of approaches can be distinguished: gradient based search methods stochastic approximation methods response surface methodology and heuristic methods Such methods have been applied in various application fields such as manufacturing systems Rosenblatt and al 1994 or economic systems Kleijnen 1988\Basically, the aim of each of these approaches is to propose a strategy to explore the solution space D with a limited number of simulation experiments Most of the existing techniques are adapted to the cases where the domains Di are real intervals, due for example to the computation of a gradient of a response surface or a regression metamodel. Therefore, such methods can not handle qualitative variables \(e g queuing strategies\which limits considerably their potential applications. Moreover in many cases several of these methods can be sensitive to local extremums due to the exploration strategy they use e g design of experiments and gradient methods  Finally certain of these methods are not easy to use or to implement in simulation packages e g restriction of D to a smaller D' where a metamodel is valid, factorial design of experiments and building of a response surface They may require expertise in statistics To cope with those drawbacks we proposed to use EA  which have not been mentioned by Azadivar 1992 and Fu 1994 The use of EA has been quoted by Szczerbicka 1994 or Biethahn 1993 as a possible solution for simulation optimization i=l..n 3 Optimization Using Evolutionary Algorithms 3.1 General Principles Genetic algorithm GA concepts, developed by John Holland 1973 are inspired by natural evolution phenomena. One of the essential principles of those phenomena is that only the strongest individuals i.e the best adapted to their environment, survive. These algorithms begin their search for the optimal solution from a set of potential solutions individuals or chromosomes\which is called the population. Each chromosome is a vector whose components \(genes\are binary elements GA makes an initial population evolve towards a population which is expected to contain the best solution For that they use the following reproduction-evaluation cycle for each iteration called a generation, individuals \(represented by chromosomes from the current population are selected with a given probability and copies from these individuals are created Selection of individuals is based on their fitness relative to the current population i.e the strongest individuals wilZ have a higher probability of reproducing Fitness is determined by the objective function we wish to optimize New individuals, produced by this process are subinitted to the mutation and the crossover genetic operators that we will describe later on This process is called reproduction From generation to generation the algorithm converges towards a population which contains the optimal solution to the problem \(more details can be found in Michalewicz 1992 Several authors have extended GAY which are henceforth classified as evolutionary algorithms \(EA These extensions concern in particular, for example, coding, genetic operators or selection techniques Janikow and Michalewicz 1992 Miihlenbein 510 


1993 Axelsson 1993 proposes to use EA for sizing a turbine with real value variables We propose subsequently to use EA for production systems optimization The algorithm proposed is based on the following general schema \(Miihlenbein 1993 Step 0 define a genetic representation of the problem step I create an initial population P\(o 2  xN Step 2 evaluation: compute the fitness f\(Xi\for each individual Xi i 1 I N Step 3 selection select individuals from P\(t this give the set S\(t The same individual from P\(t\can appear several times in S\(t Step 4 recombination: pair individuals of S\(t and for each pair of individuals apply crossover to the pair with probability Pcross and copy the offspring in set S\(t+l the pair of individuals is eliminated and replaced by'its offspring copy the pair of individuals in set S\(t+l with probability l-pcross For each individual of S\(t+l apply mutation to the individual with probability Pmut and copy transformed copy the individual in P\(t+l with probability l-pmut Step 5 set t=t+l and return to step 2 until we reach our stopping criterion individual in P\(t+l 3.2 Application of EA to Simulated Production Systems In production systems, the nature of the variables or genes Xi which make up chromosomes are varied because a chromosome corresponds to a feasible configuration of the production system Thus we will consider that a chromosome can contain integer genes \(representing, for example a buffer size, a number of AGVs real value genes e.g a silo size a duration and qualitative genes e.g a choice between stock management modes SPT EDD manufacturing solution\The fitness of a chromosome computed by simulation, will be the value of the optimization criterion corresponding to the configuration coded in the chromosome To take into account the variety of gene types, we propose to extend the crossover and the mutation genetic operators defined by Michalewicz 1992 For the crossover and the mutation operators we randomly chose an integer pos between 1 and n n being the number of genes in a chromosome Reproduction with the crossover operator is made as follows: let two chromosomes b and c be submitted to the crossover b  bl b2  bpos I bpos+l  bn c  cl 2  cpos I cpos+l  cn After the crossover, the chromosomes b and c become b and c I b bl b2  bpos Cpos+I  cn c 1~2  pos bpos+l  bn Reproduction by the mutation operator is made as follows: let a chromosome b be submitted to the mutation 511 


After the mutation, the chromosome b becomes b The definition of the element bbos is different depending on pos values, three cases can appear 1 pos corresponds to a real value gene bbos is a real value randomly chosen in the corresponding domain Dpos 2 pos corresponds to an integer gene bbos is an integer randomly chosen in the corresponding domain Dpos 3 pos corresponds to a qualitative gene we randomly chose a position pos in the domain of qualitative elements bbos is the element corresponding to pos in the corresponding domain Dpos 4 An Illustrative Example 4.1 Problem formulation This problem is related to the design of a workshop which manufactures printed plastic yoghurt containers. Containers are extruded and cast with granulated plastic material Trucks supply the silo with this raw material when the level in the silo is under a given threshold. Then the silo supplies the raw material necessary to produce plastic sheet by a system of pipes leading to the extrusion machine for manufacturing a batch of rolls of plastic sheet Before containers are cast rolls must be stocked if the machine is currently being used. Two operations are necessary to cast containers. Those operations can be made in two ways the first one dedicated solution uses two machines separated by a buffer, the second flexible solution uses a single flexible machine which is able to carry out both operations Two types of products P1 and P2 are processed The P1 and P2 products are both stocked in a warehouse called S before being sent for printing If S is full new products wishing to enter are crushed into small grains until places in the warehouse become idle The P1 and P2 product printing is done by specific machines A description of the manufacturing process is given in figure 1 Q SllO r-----1 Rioting 4 m 8 my d Lhe W6lehSc s ua slaragc area is full Figure 1  The manufacturing process 512  


The first problem to address is to determine the best silo capacity for the problem. In fact if the silo capacity is too high, it is too expensive to purchase On the other hand if it is too small, this would necessitate a lot of deliveries which are expensive because of the purchase of raw material and the price of the travel of a truck\The second problem is to choose the most advantageous solution between the dedicated one and the flexible one. In fact, the dedicated solution is more expensive than the flexible one, but gives better performance Then the final problem is to size the warehouse S where the P1 and P2 products are stored. Printing machines must work permanently no stock outage but stock must also be not too large, otherwise storage cost will be too high The warehouse S must have a sufficient size so as not to be saturated too often and to avoid crushing the surplus of pallets produced 4.2 Cost Optimization Our purpose is to minimize the cost of this workshop. The cost considered here is the sum of the following elements 1 cost of machines we only consider the purchase price of machines which make up 2 cost of silo we consider that the price of the silo only depends on its capacity 3 raw material consumption that is, the cost of truck travels added to the raw material cost 4 jobs in process we assume the cost of the jobs in progress to be the same at each stage of the production process 5 cost of the warehouse S we assume that this cost is proportional to its size 6 crushing we will distinguish between different crushing types we consider that each stock corresponds to a crushing type. The total cost of crushing will be given by the following formula the dedicated solution and the flexible solution total cost of crushing  zN\(i i i=1,2 with i=the number representing a specific stock inventory N\(i\total number of crushed pieces for the crushing i Cb\(i\cost of crushing i The optimization problem is given in the following form find the vector X in domain D such that X minimizes the function f\(X with the following definitions  Cmach x  c,xl  nb\(X Cc  c,atxl  C,T\(X  ccb i,x2  CstockX3 i=1,2 with the notation which follows 1 The problem variables are X1=the silo capacity Xi is a real value in the interval cap-mini;cap-maxi X2=the name of the employed solution X2 is an element of the element set the X3=the size of warehouse S X3 is an integer in the interval dedicated solution, the flexible solution taille-mini..taille-maxi 2 The search domain is D=[cap-mini;cap-maxi]x the dedicated solution the flexible solution taille-mini taille-maxi where x denotes the cross product 3 The problem constants are Cm\(X2\purchase price of machines of solution X2 513 


Cs=the purchase price of a silo with an unit capacity Cc=the cost of a trucks travel Cr=the unit purchase price of raw material Ce=the storage cost of jobs in processes Cb\(i,X2\unit cost of crushing of type i with solution X2 Cst=the cost of a place in storage S n\(X\number of times we must fill the silo T\(X the stock evolution during z the time necessary to carry out T\(X  lY\(t 4 The values determined by the simulation are production T\(X is computed as follows  0 where Y\(t\is the number of pieces in the total stock at time t 5 Application to the Example In the problem studied  a chromosome corresponds to a possible configuration of the workshop. It is a vector made up of three elements, the first one is the silo capacity \(real value the second one is the size of buffer S integer value and the third one is the chosen manufacturing solution \(qualitative value The fitness of each chromosome that is the cost of the proposed configuration, would be very difficult to be analytically evaluated because of the problem nature e g interaction between variables, blocking phenomena To evaluate this cost we give three values X 1 X2 and X3 as input to a simulation, whose response is the cost for the production of 10 000 pallets The total time of the simulation z is the time needed to produce 10 OOO pallets Results given in the following section have been obtained with the method presented in the preceding sections We have used a small population size in order to.reduce the computing time The initial population is randomly chosen in the domain D We have noted that the minimum found in our tests is reached for populations of at least 15 individuals. However when we increase population size the minimum is globally reached faster, as can be seen in table 1 Table 1  The application of the EA We note that the result is not improved after iteration number 500 for the examples given here. Increasing the frequency of crossover or mutation\applications does not lower further the minimum cost, but it does modify the convergence speed as shown in figure 2. These remarks are verified for populations of 15 or 30 individuals 514 


cost Cmin 0 50 100 150 Figure 2 The convergence of the EA This example is based on a deterministic simulation model Using a stochastic simulation model is possible but requires statistical tests to compare the objective function \(see Mebarki 1995 for more details 6 Conclusion In this paper we have proposed a new approach in the simulation optimization of I manufacturing systems This approach, based on evolutionary algorithms, allows the optimization of variables of several types of problem because we are not limited by the types of variables. This technique is suited to a wide range of application areas, and therefore appears to be a very interesting tool to optimize and configure simulated systems This approach is also interesting because it is easy to parallelize We are now interested in a parallel version of this approach Pierreval and al 1995 in order to speed up the search for the optimum value References AXELSSON J MENTH S SEMMLER K 1993 Genetic algorithms in industrial design Tools with artificial intelligence TAI'93,64  67 AZADIVAR F TALAVAGE J.J 1980 Optimization of stochastic simulation models Mathematics ad computers in simulation 22,23 1  24 1 AZADIVAR F 1992 A tutorial on simulation optimization Proceedings of the 1992 Winter Simulation Conference 198-204 BIETHAHN J NISSEN V 1993 Combining simulation and evolutionary algorithms for applications in complex economic systems Proceedings of modelling and simulation conference Lyon june 7-9,35 1-356 CAUX C 1993 Analyse et sptcification de systkmes de production pour l'tvaluation des performances de la recherche en ordonnancements rapport de thkse n"D.U 5 12 CAUX C PIERREVAL H PORTMANN M.C 1995 Les algorithmes gCnCtiques et leur application aux problkmes dordonnancement B paraitre dans APII FU M.C 1994 Optimization via simulation a review B paraitre dans Annals of operational research GOLDBERG D 1989 Genetic Algorithms in Search Optimization and Machine Leaming Addison-Wesley Publishing Company HOLLAND J.H 1975 Adaptation in Natural and Artificial Systems Univ of Michigan Press Ann Arbor 515 


JANIKOW C.Z MICHALEWICZ Z 1991 An experimental comparison of binary and floating point representations in genetic algorithms Proceedings of the Fourth Jntemational Conference on Genetic Algorithms 3 1  36 MEBARKI N 1995 Une approche d'ordonnancement temps reel baste sur la stlection dynamique de rkgles de prioritt Rapport de thkse de doctorat Universitt Claude Bernard Lyon I MICHALEWICZ Z 1992 Genetic Algorithms  Data Structures  Evolution Programs Springer  Verlag MUHLENBEIN H 1993 Evolutionary Algorithms: Theory and Applications, soumis  Local search in combinatorial optimization EHL Narb JK Lenstia ed.Wiley PIERREVAL H TAUTOU L BZEZNIK B 1995 Parallel evolutionary algorithms for the simulation optimization of manufacturing systems, Eurosim Congress'95 September 11-15 Vienna Austria PORTMANN M.C 1994 Part I Genetic Algorithms in Scheduling Using Genetic Algorithms and Neural Networks PKUG, G.C 1984 Optimizing simulated systems Simuletter 15 4 6  9 ROSENBLATT M.J ROLL ZYSE 1993 A combined optimization and simulation approach for designing automated storagehetrieval systems ZZE Transactions SYRJAKOW M SZCZERBICKA H 1994 Optimization of simulation models with REMO Proceedings of the Conference on Modelling and Simulation 1994 eds. Guash and Huber 274-28 1 SZCZERBICKA H 1994 Are Genetic Algorithms a panacea for optimization of simulation model  Proceedings of the Conference on Modelling and Simulation 1994 eds. Guash and Huber 38-46 25 l 40  50 516 


FIGURE 5 Execution time and rules returned versus minimum coverage for the various algorithms FIGURE 6 Execution time of dense_0002 as minconf is varied for both data-sets. Minimum coverage is fixed at 5% on pums and 1% on connect-4 FIGURE 7 Maximum confidence rule mined from each data-set for a given level of minimum coverage   1 10 100 1000 10000 100000 0 10 20 30 40 50 60 70 80 90 Execution time \(sec Minimum Coverage connect-4 apriori_c  dense_0002   dense_002   dense_02    1 10 100 1000 10000 100000 1e+06 0 10 20 30 40 50 60 70 80 90 Number of Rules Minimum Coverage connect-4 apriori_c  dense_0002   dense_002   dense_02    1 10 100 1000 10000 100000 0 10 20 30 40 50 60 70 80 90 Execution Time \(sec Minimum Coverage pums apriori_c  dense_0002   dense_002   dense_02    1 10 100 1000 10000 100000 1e+06 1e+07 0 10 20 30 40 50 60 70 80 90 Number of Rules Minimum Coverage pums apriori_c  dense_0002   dense_002   dense_02    0 500 1000 1500 2000 2500 3000 3500 20 25 30 35 40 45 50 55 60 65 Execution time \(sec minconf pums  connect-4  1 10 100 1000 10000 100000 1e+06 20 25 30 35 40 45 50 55 60 65 Number of Rules minconf pums  connect-4    0 10 20 30 40 50 60 70 80 90 100 0 10 20 30 40 50 60 70 80 90 100 Highest Rule Confidence Minimum Coverage pums  connect-4 


8.2  Effects of minimum confidence The next experiment \(Figure 6\ws the effect of varying minconf while fixing minimp and minsup to very low values. With connect-4, we used a minimum coverage of 1%, and with pums, a minimum coverage of 5%. Minimp was set to .0002 with both data-sets. As can be extrapolated from the previous figures, the number of rules meeting these weak minimp and minsup constraints would be enormous As a result, with these constraints alone, Dense-Miner exceeds the available memory of our machine The efficiency of Dense-Miner when minimum confidence is specified shows that it is effectively exploiting the confidence constraint to prune the set of rules explored. We were unable to use lower settings of minconf than those plotted because of the large number of rules. As minconf is increased beyond the point at which fewer than 100,000 rules are returned, the run-time of Dense-Miner rapidly falls to around 500 seconds on both data-sets 8.3  Summary of experimental findings These experiments demonstrate that Dense-Miner, in contrast to approaches based on finding frequent itemsets achieves good performance on highly dense data even when the input constraints are set conservatively. Minsup can be set low \(which is necessary to find high confidence rules as can minimp and minconf \(if it is set at all\This characteristic of our algorithm is important for the end-user who may not know how to set these parameters properly. Low default values can be automatically specified by the system so that all potentially useful rules are produced. Refinements of the default settings can then be made by the user to tailor this result. In general, the execution time required by Dense-Miner correlates strongly with the number of rules that satisfy all of the specified constraints 9.     Conclusions We have shown how Dense-Miner exploits rule constraints to efficiently mine consequent-constrained rules from large and dense data-sets, even at low supports. Unlike previous approaches, Dense-Miner exploits constraints such as minimum confidence \(or alternatively, minimum lift or conviction\ and a new constraint called minimum improvement during the mining phase. The minimum improvement constraint prunes any rule that does not offer a significant predictive advantage over its proper sub-rules. This increases efficiency of the algorithm, but more importantly it presents the user with a concise set of predictive rules that are easy to comprehend because every condition of each rule strongly contributes to its predictive ability The primary contribution of Dense-Miner with respect to its implementation is its search-space pruning strategy which consists of the three critical components: \(1\functions that allow the algorithm to flexibly compute bounds on confidence, improvement, and support of any rule derivable from a given node in the search tree; \(2\proaches for reusing support information gathered during previous database passes within these functions to allow pruning of nodes before they are processed; and \(3\ item-ordering heuristic that ensures there are plenty of pruning opportunities. In principle, these ideas can be retargeted to exploit other constraints in place of or in addition to those already described We lastly described a rule post-processor that DenseMiner uses to fully enforce the minimum improvement constraint. This post-processor is useful on its own for determining the improvement value of every rule in an arbitrary set of rules, as well as associating with each rule its proper sub-rule with the highest confidence. Improvement can then be used to rank the rules, and the sub-rules used to potentially simplify, generalize, and improve the predictive ability of the original rule set References 1 w a l  R.; Im ie lin ski  T   a n d S w a m i, A. 1 9 9 3   M i n i ng As so ciations between Sets of Items in Massive Databases. In Proc of the 1993 ACM-SIGMOD Int\222l Conf. on Management of Data 207-216 2 raw a l R.; M a n n ila, H Sri k an t  R T o i v o n en  H.; an d  Verkamo, A. I. 1996. Fast Discovery of Association Rules. In Advances in Knowledge Discovery and Data Mining AAAI Press, 307-328 3 K Ma ng a n a r is S a n d Sri k a n t, R 19 97  P a rtia l Cl a ssif i cation using Association Rules. In Proc. of the 3rd Int'l Conference on Knowledge Discovery in Databases and Data Mining 115-118 4 a rd o  R. J 1 9 9 8  Ef f i c i en tly Min i n g  Lo n g  P a ttern s fro m  Databases. In Proc. of the 1998 ACM-SIGMOD Int\222l Conf. on Management of Data 85-93 5  Mi c h ae l J. A a n d  Lin o f f G  S 1 9 9 7  Data Mining Techniques for Marketing, Sales and Customer Support John Wiley & Sons, Inc 6 Bri n, S  M o t w a n i, R.; Ullm a n J.; a n d  Tsu r S. 19 9 7 Dyn a m i c  Itemset Counting and Implication Rules for Market Basket Data. In Proc. of the 1997 ACM-SIGMOD Int\222l Conf. on the Management of Data 255-264 7 h e n  W   W   1 9 9 5 F a st Ef fecti v e Ru le In d u ctio n   In  Proc. of the 12th Int\222l Conf. on Machine Learning 115-123 8 In tern atio n a l Bu sin e s s Mac h in e s   1 9 9 6  IBM Intelligent Miner User\222s Guide Version 1, Release 1 9 m e t tin e n M   Ma nn ila  P  Ro nk a i ne n  P   a n d V e rk a m o  A  I. 1994. Finding Interesting Rules from Large Sets of Discovered Association Rules. In Proc. of the Third Int\222l Conf. on Information and Knowledge Management 401-407 10  Ng   R  T    L a k s hm ana n   V   S    Ha n  J   an d P a ng A  1 9 9 8   Exploratory Mining and Pruning Optimizations of Constrained Association Rules. In Proc of the 1998 ACM-SIGMOD Int\222l Conf. on the Management of Data 13-24 11 Ry mo n  R 1 9 9 2   Search  t h ro u g h Sy s t e m atic S e t En u m era tion. In Proc. of Third Int\222l Conf. on Principles of Knowledge Representation and Reasoning 539-550 1  Sha f e r  J  A g r a w a l R   an d Me ht a M 19 98  SPR I N T   A  Scalable Parallel Classifier for Data-Mining. In Proc. of the 22nd Conf. on Very Large Data-Bases 544-555 13  S m y t he P  and  Go od man   R  M 19 92 An I n f o r m at i o n Th eo retic Approach to Rule Induction from Databases IEEE Transactions on Knowledge and Data Engineering 4\(4\:301316 14  S r i k a n t   R    V u  Q an d Ag r a w a l  R  19 97 M i ni ng  A ssoc i a tion Rules with Item Constraints. In Proc. of the Third Int'l Conf. on Knowledge Discovery in Databases and Data Mining 67-73 15 W e bb, G. I 1 9 9 5 OP U S An Ef f i c i e n t Adm i ssible Algo rit h m for Unordered Search. In Journal of Artificial Intelligence Research 3:431-465 


It can also be added to cell CrossSales.3\(PC, printer one_year,\205 5  Distributed and Incremental Rule Mining There exist two ways to deal with association rules 267  Static that is, to extract a group of rules from a snapshot, or a history, of data and use "as is 267  Dynamic that is, to evolve rules from time to time using newly available data We mine association rules from an e-commerce data warehouse holding transaction data. The data flows in continuously and is processed daily Mining association rules dynamically has the following benefits 267  223Real-time\224 data mining, that is, the rules are drawn from the latest transactions for reflecting the current commercial trends 267  Multilevel knowledge abstraction, which requires summarizing multiple partial results. For example association rules on the month or year basis cannot be concluded from daily mining results. In fact multilevel mining is incremental in nature 267  For scalability, incremental and distributed mining has become a practical choice Figure 3: Distributed rule mining Incremental association rule mining requires combining partial results. It is easy to see that the confidence and support of multiple rules may not be combined directly. This is why we treat them as \223views\224 and only maintain the association cube, the population cube and the base cube that can be updated from each new copy of volume cube. Below, we discuss several cases to show how a GDOS can mine association rules by incorporating the partial results computed at LDOSs 267  The first case is to sum up volume-cubes generated at multiple LDOSs. Let C v,i be the volume-cube generated at LDOS i The volume-cube generated at the GDOS by combining the volume-cubes fed from these LDOSs is 345   n i i v v C C 1  The association rules are then generated at the GDOS from the centralized C v  214  The second case is to mine local rules with distinct bases at participating LDOSs, resulting in a local association cube C a,I a local population cube C p,I  and a local base cube C b,i at each LDOS. At the GDOS, multiple association cubes, population cubes and base cubes sent from the LDOSs are simply combined, resulting in a summarized association cube and a summarized population cube, as 345   n i i a a C C 1   345   n i i p p C C 1  and 345   n i i b b C C 1  The corresponding confidence cube and support cube can then be derived as described earlier. Cross-sale association rules generated from distinct customers belong to this case In general, it is inappropriate to directly combine association cubes that cover areas a 1 205, a k to cover a larger area a In the given example, this is because association cubes record counts of customers that satisfy   customer product merchant time area Doe TV Dept Store 98Q1 California Doe VCR Dept Store 98Q1 California customer product merchant time area Doe VCR Sears 5-Feb-98 San Francisco Joe PC OfficeMax 7-Feb-98 San Francisco customer product merchant time area Doe TV Fry's 3-Jan-98 San Jose Smith Radio Kmart 14-Jan-98 San Jose Association   population      base          confidence      support cube               cube                cube         cube                cube LDOS LDOS GDOS 


the association condition, and the sets of customers contained in a 1 205, a k are not mutually disjoint. This can be seen in the following examples 214  A customer who bought A and B in both San Jose and San Francisco which are covered by different LDOSs , contributes a count to the rule covering each city, but has only one count, not two, for the rule A  336  B covering California 214  A customer \(e.g. Doe in Figure 3\who bought a TV in San Jose, but a VCR in San Francisco, is not countable for the cross-sale association rule TV  336 VCR covering any of these cities, but countable for the rule covering California. This is illustrated in Figure 3 6  Conclusions In order to scale-up association rule mining in ecommerce, we have developed a distributed and cooperative data-warehouse/OLAP infrastructure. This infrastructure allows us to generate association rules with enhanced expressive power, by combining information of discrete commercial activities from different geographic areas, different merchants and over different time periods. In this paper we have introduced scoped association rules  association rules with conjoint items and functional association rules as useful extensions to association rules The proposed infrastructure has been designed and prototyped at HP Labs to support business intelligence applications in e-commerce. Our preliminary results validate the scalability and maintainability of this infrastructure, and the power of the enhanced multilevel and multidimensional association rules. In this paper we did not discuss privacy control in customer profiling However, we did address this issue in our design by incorporating support for the P3P protocol [1 i n  ou r data warehouse. We plan to integrate this framework with a commercial e-commerce system References 1  Sameet Agarwal, Rakesh Agrawal, Prasad Deshpande Ashish Gupta, Jeffrey F. Naughton, Raghu Ramakrishnan, Sunita Sarawagi, "On the Computation of Multidimensional Aggregates", 506-521, Proc. VLDB'96 1996 2  Surajit Chaudhuri and Umesh Dayal, \223An Overview of Data Warehousing and OLAP Technology\224, SIGMOD Record Vol \(26\ No \(1\ 1996 3  Qiming Chen, Umesh Dayal, Meichun Hsu 223 OLAPbased Scalable Profiling of Customer Behavior\224, Proc. Of 1 st International Conference on Data Warehousing and Knowledge Discovery \(DAWAK99\, 1999, Italy 4  Hector Garcia-Molina, Wilburt Labio, Jun Yang Expiring Data in a Warehouse", Proc. VLDB'98, 1998 5  J. Han, S. Chee, and J. Y. Chiang, "Issues for On-Line Analytical Mining of Data Warehouses", SIGMOD'98 Workshop on Research Issues on Data Mining and Knowledge Discovery \(DMKD'98\ , USA, 1998 6  J. Han, "OLAP Mining: An Integration of OLAP with Data Mining", Proc. IFIP Conference on Data Semantics DS-7\, Switzerland, 1997 7  Raymond T. Ng, Laks V.S. Lakshmanan, Jiawei Han Alex Pang, "Exploratory Mining and Pruning Optimizations of Constrained Associations Rules", Proc ACM-SIGMOD'98, 1998 8  Torben Bach Pedersen, Christian S. Jensen Multidimensional Data Modeling for Complex Data Proc. ICDE'99, 1999 9  Sunita Sarawagi, Shiby Thomas, Rakesh Agrawal Integrating Association Rule Mining with Relational Database Systems: Alternatives and Implications", Proc ACM-SIGMOD'98, 1998   Hannu Toivonen, "Sampling Large Databases for Association Rules", 134-145, Proc. VLDB'96, 1996   Dick Tsur, Jeffrey D. Ullman, Serge Abiteboul, Chris Clifton, Rajeev Motwani, Svetlozar Nestorov, Arnon Rosenthal, "Query Flocks: A Generalization of Association-Rule Mining" Proc. ACM-SIGMOD'98 1998   P3P Architecture Working Group, \223General Overview of the P3P Architecture\224, P3P-arch-971022 http://www.w3.org/TR/WD-P3P.arch.html 1997 


Plenary Panel Session 30 XML Databases   Moderator: Michael Carey, IBM Almaden Research Center USA Panelists Adam Bosworth, Microsoft Corporation USA David De Witt University of Wisconsin-Madison, USA Alon Levy University of Washington USA Bruce Lindsay IBM Almaden Research Center USA Jennifer Widom Stanford University USA Demo Session 1 Web Query Optimizer  661 V Zadorozhny L Bright L Raschid T Urhan and M Vidal ReQueSS: Relational Querying of Semi-structured Data  664 R Sunderraman The IDEAL Approach to Internet-Based Negotiation for E-Business  666 J Hammer C Huang Y Huang C Pluempitiwiriyawej M Lee H Li L Wang Y Liu and S Su READY A High Performance Event Notification Service  668 R Gruber B Krishnamurthy, and E Panagos A Multimedia Information Server with Mixed Workload Scheduling  670 G Nerjes DISIMA An Object-Oriented Approach to Developing an Image Database System  672 V Oria T Ozsu P Iglinski B Xu and L Cheng Demo Session 2 The Collaboration Management Infrastructure  677 H Schuster D Baker A Cichocki D Georgakopoulos and M Rusinkiewicz Assisting the Integration of Taxonomic Data The LITCHI Toolkit  679 I Sutherland J Robinson S Brandt A Jones S Embury W Gray R White and F Bisby TheaterLoc: Using Information Integration Technology to Rapidly Build Virtual Applications  681 G. Barish Y.4 Chen D Dipasquo, C Knoblock S Minton I Muslea and C Shahabi Lineage Tracing in a Data Warehousing System  683 Y Cui and J Widom xiii 


The Mentor-Lite Prototype A Light-Weight Workflow Management System  685 J Weissenfels M Gillmann 0 Roth, G Shegalov and W Wonner Location Prediction and Queries for Tracking Moving Objects  687 0 Wolfson B Xu and S Chamberlain Semiorder Database for Complex Activity Recognition in Multi-Sensory Environments  689 S Bhonsle A Gupta S Santini and R Jain Tutorial 1 Web Information Retrieval  693 M Henzinger Tutorial 2 Mobile and Wireless Database Access for Pervasive Computing  694 P Chrysanthis and E Pitoura Tutorial 3 Data Mining with Decision Trees  696 J Gehrke Tutorial 4 Directories Managing Data for Networked Applications  697 D Srivastava Tutorial 5 Indexing High-Dimensional Spaces Database Support for Next Decade\222s Applications  698 S Berchtold and D Keim xiv 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


