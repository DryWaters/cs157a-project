Bayesian Based Subgroup Discovery  Talha Anwar Center of Research in Data Engineering \(CORDE Mohammad Ali Jinnah University Islamabad, Pakistan talha.a@gmail.com  Sohail Asghar Associate Professor, Department of Computer Science Mohammad Ali Jinnah University Islamabad, Pakistan sohail.asghar@Jinnah.edu.pk Simon Fong Department of Computer and Information Science University of Macau Macau SAR ccfong@umac.mo   Abstract Data Mining is concerned with extraction of 
interesting patterns or knowledge from huge amounts of Data Generally data mining tasks are either predictive or descriptive Classification falls under predictive induction while clustering and association rule mining fall under descriptive induction Subgroup discovery is a task at the intersection of supervised learning and descriptive induction. In subgroup discovery we want to uncover individual patterns in data with a given property of interest. We want to find subgroups that cover a large population and are statistically different. The main application areas of subgroup discovery are exploration and descriptive 
induction, where the user wants to find the overview of dependencies between a target and many explaining variables Many techniques have been proposed for discovering subgroups and some of these techniques are based on classification. But none of the techniques uses Bayesian networks for the generation of subgroups. Our contributions include a technique for the discovery of subgroups where the subgroups are generated using Bayesian networks Keywords- Subgroup Discovery, Bayesian Networks I   I NTRODUCTION  Generally Data Mining tasks are divided into two broad categories: Predictive and Descriptive. Descriptive mining is 
aimed at characterizing the general properties of the data in the databases [1 Pr ed i c tive M i ning p e r f or m s  infe r e nce o n the current data in order to make predictions [1 T h ere ar e som e  tasks in data mining that can be categorized as both supervised we have labelled instances in the training data\nd descriptive data mining. One of these tasks is subgroup discovery Classification, a branch of predicative data mining, is the process of finding a model that describes and distinguishes the classes of objects, for the purpose of being able to use the model to predict the class of objects whose class label is unknown [1  C 4 5, CART K Ne ar e s t  N e igh b o u r s NaÔve  
Bayes and K2 are some of the well-known algorithms that are being used for the purpose of classification One of the well-known techniques of classification is Bayesian Networks. These networks are directed acyclic graphs that effectively represent the joint probability over a set of random variables. The vertices in the graph represent random variables while the edges represent direct correlation between the variables More precisely, the network encodes the following conditional independence statements: each variable is independent of its non-descendants in the graph given the state of its parents 
as quoted from [2 Us i n g t h i s  independence assumption the number of parameters required to characterize the joint probability distribution can be reduced. In other words the number of parameters required to compute the posterior probability given the evidence is greatly reduced Each node in the graph has an associated Probability distribution. These distributions give us the probabilities of all possible values of the node given all possible values of the parents. Using the independence statements encoded in the network, the joint distribution is uniquely determined by these local conditional distributions [2 F i gur e 1 sho w s a sa m p le 
Bayesian network  Figure 1  A sample Bayesian network Subgroup Discovery is a task at the intersection of Predictive and Descriptive data mining. Subgroup Discovery is defined as Given a population of individuals and a specific property of individuals that we are interested in, find population subgroups that are statistically èmost interesting e.g. are as large as possible and have the most unusual distributional characteristics with respect to the property of interest 8  In subgroup discovery we want to uncover properties of 
selected target population. Target population is the part of the population with a given property of interest \(Class\ [4   I n t h is paper we propose a scheme for subgroup discovery that is based on Bayesian Networks. There are a number of techniques that have been proposed for subgroup discovery. Some of them 978-1-4577-1539-6/11/$26.00 ©2011 IEEE 154 


such as CN2-SD [6  pr o pos e d by L a v r a c e t a l   an d A p r i o r i S D  also proposed by Lavrac et al that is based on or adapted from classification algorithms. Other works in this domain include EXPLORA by Klosgen [8 M I D O S b y  Wr obe l [9  a n d SD Map by Aztmuller So m e used  b e a m se a r c h t o  d i scove r subgroups while others applied expert guided search strategies which involve input from human experts to generate affective subgroups. Most of these techniques use the ROC or the TP/FP space to evaluate the quality of their subgroups. As we shall see in Section III that none of the techniques uses Bayesian Networks to generate rules that represent out subgroups The remainder of this paper is organized as follows. Section two briefly introduces Bayesian Networks. Section three explains subgroup discovery. Section four outlines the techniques that have been previously proposed focusing mainly on techniques based on classification. In Section five we discuss our proposed technique. In Section six we demonstrate the technique using an example II  B AYESIAN N ETWORK  A Bayesian network is a natural way of representing knowledge. The network represents dependency/causal relationships which exist in the real world. Heckerman has given four advantages to emphasize the usefulness of Bayesian Networks. Firstly, Bayesian Networks can readily handle incomplete data by the use of dependency relationships [3   Secondly, they allow us to learn causal relationships. These relationships help us firstly in understanding the problem domain and also they can help us make predictions in the presence of interventions [3 T h i r dl y  B a y e s i an  N e t w or k s  combined with Bayesian Statistic s facilitate the combination of prior knowledge and data [3  L a stly  they  avo i d o v e r  f itt ing o f  Data [3 y e sia n n e tw o r ks g i ve su r p r i s i ngly go od re sults i n a large number of domains Bayesian network is a directed acyclic graph \(DAG\. The edges in the DAG represent dependency relationships or direct correlation between the nodes. If there is a node from node A to node B in a Bayesian network then node A is called the parent or ancestor of node B while node B is referred to as the child or descendant of node A. For example in Figure 1, çGas and çJewelryé have one common ancestor or parent çFraud While çGasé has two children or descendants çGasé and Jewelryé. In such a case çGasé and çJewelryé are also called siblings because they have a common parent. The independence assumption that a Bayesian network is based upon states that nodes are independent of each other given the value of their parents. For example, if the value of çFraudé is known then çGasé and çJewelryé are independent of each other Before we can use a Bayesian network for the purpose of classification, we need to learn it from data. Learning a Bayesian network involves two tasks: learning the structure of the network and, learning the conditional probability tables Various methods have been proposed for the learning of Bayesian networks. The one we will discuss here which is also the algorithm we have used in our proposed scheme is K2 [11  K2 [1 a n a l g o r ithm p r opo sed  b y Co ope r e t a l  f o r the purpose of learning a Bayesian network from a database of records. The algorithm accomplishes this task by searching for the most probable structure of a network given a database D The algorithm learns the most probable Bayesian network by iteratively adding parents which most increase the probability of the resulting structure. To find the most probable network the probabilities of structures need to be compared e.g. given two network structures B si and B sj and a Database D of records the probabilities P  B si  D and P  B sj  D can be computed and compared using equation 1 given below                 1  Cooper et al introduce an efficient formula for the calculation of P  B s  D based on four assumptions. Firstly the variables are assumed to be discrete. If the variables are continuous, then they will need to be di scretized. Second, those cases occur independently is given a Bayes model. The third assumption made by the algorithm is that there are no missing values and lastly that the density function f  B p  B s s uniform where B p is a vector whose values denote the conditional probability assignment associated with structure B s Based on these assumptions Cooper et al rive eq ua ti o n 2 a s giv e n below for the computation of P  B s  D        2  TABLE I  P ARAMETERS USED IN E QUATION 2  1  c  P  B s Prior probability of the structure i   Set of parents of node x i  q i   i   i   List of all possible instantiations of the parents of x i in the database D  R i  V i  V i   List of all possible values of the attribute x i  N ijk   Number of cases in D in which the attribute x i is instantiated with its k th value and the parents of x i  in i are instantiated with the j th instantiation in  i  N ij   The number of instances in the database in which the parents of x i in i are instantiated with the j th  instantiation in  i   Table 1 above describes each of the parameters used in equation 2. To simplify the computation, Cooper et al. [11  assumes that the prior probability of all the networks is the same. This means that all the networks are equally likely therefore to maximize P\(Bs, D\ it would be enough to find the parent set that maximizes the second inner product of equation 2. Therefore to increase the computational complexity of the algorithm, it is assumed that we are initially provided with an ordering of the nodes such that if node A precedes node B in the ordering then 155 


        3 There will not be an edge from A to A in the graph Secondly a limit on the number of parents of any given node may be applied. And lastly P  i x i nd P  j x j re independent when i  j Using these assumptions decreases the computational complexity and makes the algorithm feasible K2 begins with the first node in the ordering and assumes that it has no parents, and then incrementally adds those parents which maximize the probability of the resulting structure. The algorithm stops when the addition of parents does not lead to further increase in probability. The following function, which is the inner product from equations 2 and 3, is used in the algorithm [1 this is the p r od uc t w e  w a nt to m a xim i z e    Figure 2 that follows is the K2 algorithm proposed by Cooper et al. The algorithm uses another function Pred  x i hat returns the nodes which precede x i in the node ordering  Figure 2  The K2 Algorithm [11  The K2 algorithm shown in Figure 2 constructs the structure of the Bayesian Network for us. Next the conditional probability table needs to be learned for the data. Let ijk  denotes the conditional probability P  x i  v ik  i  w ij i.e. the probability that x i has value v for some k from 1 to r i given that the parents of x are instantiated as w ij Then taking into account of the four assumptions mentioned earlier, the expected value of ijk is given by     5  For a detailed discussion on the derivation of the equations used in K2, please refer to the paper by cooper et al [1   III  S UBGROUP D ISCOVERY  The main application of subgroup discovery is exploration and descriptive induction, where the user wants to find the overview of dependencies between a target and many explaining variablesé as pointed out by Atzmueller [12  Further Atzmueller points out in  t the d e viati o ns o f t h e  subgroup from the performance of the general population are usually not simply due to statistical fluctuations, but are caused by local factors. Identifying these factors helps to understand the data in general and has a huge impact, e.g., on diagnostic preventive or therapeutic issues concerning medical questions Thus subgroup discovery has become more important in the medical domain lately The three main components of a subgroup discovery algorithm are the description language, the quality function and the search strategy. The description language is the way we represent the discovered subgroups. Mainly conjunctive languages are used. The quality function is used to evaluate the interestingness of the subgroups. A number of quality functions have been proposed e.g. the binomial test proposed by Klosgen et al [8 and th e r a ti o o f the tr ue p o s itives  an d f a lse p o s itive s  a s  proposed by Gamberger et al   T h e s e ar c h st r a t e gy d e fi ne s  how we go about discovering the subgroups. Commonly a beam search strategy is used because of its efficiency [8  Subgroup Discovery is a task at the intersection of Predictive and Descriptive data mining. Subgroup Discovery is defined as Given a population of individuals and a specific property of individuals that we are interested in, find population subgroups that are statistically èmost interesting e.g. are as large as possible and have the most unusual distributional characteristics with respect to the property of interest 8   In subgroup discovery we want to uncover properties of selected target population. Target population is the part of the population with a given property of interest \(class\ [4   W e  need labelled data to identify the target population, and therefore in this sense subgroup discovery is similar to supervised learning. But subgroup discovery is also similar to descriptive data mining in the se nse that we want to uncover individual interesting patterns in Data [4         4 Procedure K2  Inputs A set of n nodes An ordering on the nodes An upper-bound u on the number of parents of a node A database D containing m cases Output For each node, a list of the parents of the nodes  For  i 1 to  n  do   x i     P old  g  i  i Computed using equation 4 OKToProceed true  While OKToProceed and i  u  do  Let z be the node in Pred  x i  i that maximizes  g  i  i   z   P new  g  i  i   z   If P new  P old then   P old  P new   i   i    z   Else OKToProceed false   End while  Write Node x i Parents of this node i  End for End K2 156 


In subgroup discovery we focus on discovering subgroups which are represented by rules, which are simple and cover large proportions of the training data. The simplicity of the rules makes them more understandable and actionable   IV  R ELATED WORK IN SUBGROUP DISCOVERY  A number of methods have been proposed for the task of subgroup discovery. In this section we list down some of the methods proposed so far. In addition to these we will briefly discuss CN2-SD and Apriori-SD for two reasons. The first reason is that both of them are based on classification techniques, and secondly we will be using parts of the methods in our proposed scheme The first method proposed for subgroup discovery was EXPLORA by Klosgen [8   Decis i on  tr ees a r e u s ed t o  ex t r a c t  rules in this scheme. Criteria such as evidence, generality redundancy and simplicity are used to measure the interestingness of subgroups. MIDOS proposed by Wrobel [9 was another method used for subgroup discovery by applying EXPLORA to multi-relational databases. The goal is to discover subgroups of the target relation which have unusual statistical distributions with respect to the complete population The quality measure uses a combination of unusualness and size SubgorupMiner was proposed by Klosgen  b y  extending EXPLORA and MIDOS. This method uses decision rules and interactive se arch in the space of solutions. It caters for the use of very large databa ses through database integration This algorithm uses binomial test as the quality function to find out how different a discovered subgroup is from the original population based on the statistical distribution SD proposed by Gamberger et al [1 is a m e th o d  th at u s es  expert guidance instead of the quality function to judge the interestingness of subgroups. SD-Map proposed by Atzmueller  a n e xha ustive su b g ro u p disco v er y a l gor ithm   I t use s  the  GP-Growth method for the mining of association rules with adaptations for the purpose of subgroup discovery The CN2-SD proposed by Lavrac et al [4 is a  sub g ro up discovery method developed by modifying the CN2 classification rule learner. The CN2 algorithm consists of two main procedures. The bottom level search procedure performs beam search in order to find a single rule, and the top level control procedure repeatedly executes the bottom level search to induce a rule set. The bottom level search procedure uses classification accuracy as a heuristic function [4           6  Two different top level control procedures may be used in CN2. Procedure 1 induces an ordered list of rules while Procedure 2 induces an un-ordered list of rules. The difference between the two procedures is that procedure 1 removes all covered examples from the training set before each new iteration while procedure 2 removes examples belonging to that class instead of removing all covered examples To adapt CN2 for the purpose of subgroup discovery the author suggests the use of a weighted covering algorithm Covered positive examples in this case are not deleted from the current training set. Instead, a count is maintained of how many times the example has been covered. This count is used to assign weights to each example according to a weighting scheme. And then the weights are used in computing the search heuristics of weighted relative accuracy to give a quality function that is feasible for the purpose of subgroup discovery Two example weighting schemes have been desc   One that uses additive weights     7  And the other one which uses multiplicative weights       8  where i in both the equations refers to the number of times an example has been covered. The weighted relative accuracy of a ru  is give n b y the fo l l o w ing e q ua ti o n            9 where P  Cond is used as a weight to trade off generality of a rule while P  Class  Cond  P  Class is the relative accuracy which tells us how statistically different a subgroup is from the original population. The example weights are used in the weighted relative accuracy search heuristic to provide us with the quality function to evaluate subgroups        10  where is the sum of weights of all examples  Cond s the sum of the weights of all covered examples and  Class Cond is the sum of the weights of all correctly covered examples The Apriori-SD [7 o r i t h m  pr o p o se d by  L a v r ac et al u s es  the same weighted relative accuracy search heuristic to judge the quality of subgroups al ong with a threshold value k This value determines the number of times an example is covered by rules before it is removed from the training set. The algorithm first of all generates classification rules using the Apriori-C algorithm. It then applies the quality function to find the best rule. It then modifies the weights of the covered examples removes the rule from the initial rule set and includes the rule in the result set. The same procedure is repeated until either the rule set becomes empty or training set becomes empty 157 


 Figure 3  Architecture of the Proposed Scheme V  P ROPOSED S CHEME  The scheme that we are proposing here is similar in structure to the Apriori-SD al gorithm. We propose using the same weighted relative accuracy heuristic as used in both CN2SD and Apriori-SD. Our scheme differs from these algorithms in the way that rules are generated as an additional advantage for understanding the subgroup relations. The overall architecture of the proposed sche me is presented in Figure 3 Our proposed scheme consists of three main steps. Step 1 the learning of the Bayesian Network using the K2 algorithm Step 2, the generation of rules from the Bayesian Network and lastly ordering the rules according to their quality. And step 3 ordering the rules Step 1. Generation of Bayesian Network A Bayesian Network is generated by using the K2 algorithm Step 2. Rule Set Generation Rules are generated from the Bayesian network that was constructed in Step 1. From the Bayesian network all connected pairs of nodes are picked up and each pair will be used to generate rules e.g. we get the following pair of nodes  Figure 4  Example pair of nodes from a hypothetical Bayesian network Furthermore we assume that the node \(attribute\ çTired can take on two values çYesé and çNoé and çWork Hoursé can also take on two values ç>5é and ç<5é. Since each node can take on 2 values, there are four possible rules that can be generated as the example shown below Rule 1 Work Hours < 5 then Tired = çYes Rule 2 Work Hours > 5 then Tired = çYes Rule 3 Work Hours < 5 then Tired = çNo Rule 4 Work Hours > 5 then Tired = çNo  In this way we will generate rules for all pairs of connected nodes. The list that we get will be called 1-List since it contains only one condition in the antecedent. Now we can use the 1List to merge rules which have the same consequent and nonconflicting antecedants. In this way we can acquire 2-List and so forth. At the end of this step we will obtain a list of rules representing subgroups of the population. Now we want to rank and sort these rules by their qualities Step 3. Ordering the Rules Once we have the rules list, the rules can then be ordered according to their qualities. The steps to order the rules are as follow: First apply the Weighted relative accuracy search function on all the rules. Secondly pick the rule with the highest va lue. Then remove the rule from the rule list and include it in th e result set. Lastly modify the weights of all the covered examples. Repeat this process until the whole rule list is traversed Alternatively if we want only the Top-K subgroups then we w ill repeat these steps K times At the end we will get an ordered list of rules in the result set VI  D EMONSTRATION BY EXPERIMENTAL DATASET  A  Generation of Bayesian Network A Bayesian Network was generated by using the experimenteré application in Weka \(Waikato Environment for Knowledge Analysis\ Ö a non-commercial Data Mining Software in Java, by The University of Waikato, New Zealand A small sample weather dataset that has 14 records, 4 attributes and 1 class is used in the experiment. The same dataset has been popularly used as illustrative examples in numerous data mining textbooks. The following steps are to generate the Bayesian Network Tired Work Hours 158 


    Figure 5  Bayesian Network derived from the Weather Dataset B  Generation of rules from the Bayesian Network For each pair of connected vertices, rules are generated From the above Bayesian Network the following rules were generated, as shown from Table 2 to Table 6 For simplicity we have omitted the rule merging step as that would make the rule list extremely large. The objective here is to validate our concept. So we have restricted the rule size. But the rule merging step can be inco rporated in the actual scheme TABLE II  R ULES FROM P LAY  O UTLOOK  Play = çYes Outlook = çSunny Play = çNo Outlook = çSunny Play = çYes Outlook = çOvercast Play = çNo Outlook = çOvercast Play = çYes Outlook = çRainy Play = çNo Outlook = çRainy TABLE III  R ULES FROM P LAY  T EMPERATURE  Play = çYes Temperature = çHot Play = çNo Temperature = çHot Play = çYes Temperature = çMild Play = çNo Temperature = çMild Play = çYes Temperature = çCool Play = çNo Temperature = çCool TABLE IV  R ULES FROM P LAY  W INDY  Play = çYes Windy = çTrue Play = çNo Windy = çTrue Play = çYes Windy = çFalse Play = çNo Windy = çFalse TABLE V  R ULES FROM P LAY  H UMIDITY  Play = çYes Humidity = çHigh Play = çNo Humidity = çHigh Play = çYes Humidity = çNormal Play = çNo Humidity = çNormal TABLE VI  R ULES FROM T EMPERATURE  H UMIDITY  Temperature = çHot Humidity = çHigh Temperature = çMild Humidity = çHigh Temperature = çCool Humidity = çHigh Temperature = çHot Humidity = çNormal Temperature = çMild Humidity = çNormal Temperature = çCool Humidity = çNormal  C  Calculation of Weighted Rela tive Accuracy fo r each rule The weighted relative accuracy of each rule is calculated using \(10\ given above. The additive weighting scheme proposed by the Lavrac [4  is use d   w  e j  i 1 i 1\ where i is the number of times a record of the dataset is covered. After each round of iteration, the weights of covered examples are adjusted by using this scheme. The weighted relative accuracies of the rules are listed below, from Table 7 to Table 11. The last rule in Table 10 has the highest weighted relative accuracy value and therefore this rule is removed from this list and added to the list of subgroups 1 Open the çExploreré application in Weka 2 Open the Dataset File 3 Select all the attributes 4 Go to the çClassifyé Tab 5 Under the çClassifieré heading click choose 6 In the window that opens choose Classifiers Bayes Bayesnet 7 Set the following options  initAsNaiveBayes: False  maxNrOfParents: 10000  markovBlanketClassifier: True  randomOrder: False  Leave all other options as they are 8 Click on start to generate network 9 Visualize the generated the graph 159 


TABLE VII  WRA CC OF R ULES FROM P LAY  O UTLOOK  Play Outlook WRAcc Play = çYes Outlook = çSunny 0.086734694 Play = çNo Outlook = çSunny 0.086734694 Play = çYes Outlook = çOvercast 0.102040816 Play = çNo Outlook = çOvercast 0.102040816 Play = çYes Outlook = çRainy 0.015306122 Play = çNo Outlook = çRainy 0.015306122 TABLE VIII  WRA CC OF R ULES FROM P LAY  T EMPERATURE  Play Temperature WRAcc Play = çYes Temperature = çHot 0.040816327 Play = çNo Temperature = çHot 0.040816327 Play = çYes Temperature = çMild 0.010204082 Play = çNo Temperature = çMild 0.010204082 Play = çYes Temperature = çCool 0.030612245 Play = çNo Temperature = çCool 0.030612245 TABLE IX  WRA CC OF R ULES FROM P LAY  W INDY  Play Windy WRAcc Play = çYes Windy = çTrue 0.06122449 Play = çNo Windy = çTrue 0.06122449 Play = çYes Windy = çFalse 0.06122449 Play = çNo Windy = çFalse 0.06122449 TABLE X  WRA CC OF R ULES FROM P LAY  H UMIDITY  Play Humidity WRAcc Play = çYes Humidity = çHigh 0.107142857 Play = çNo Humidity = çHigh 0.107142857 Play = çYes Humidity = çNormal 0.107142857 Play = çNo Humidity = çNormal 0.107142857 TABLE XI  R ULES FROM T EMPERATURE  H UMIDITY  Temperature Humidity WRAcc Temperature = çHot Humidity = çHigh 0.071428571 Temperature = çMild Humidity = çHigh 0.071428571 Temperature = çCool Humidity = çHigh 0.142857143 Temperature = çHot Humidity Normalé -0.071428571 Temperature = çMild Humidity Normalé -0.071428571 Temperature = çCool Humidity Normal 0.142857143   D  Weights Adjustment The weights of the covered examples are adjusted using the additive weighting scheme. Tables 12 and 13 show the initial weights and the weights after the first iteration respectively TABLE XII  I NITTIAL D ATASET W EIGHTS   Outlook Temp Humidity Windy Play Weight 1 sunny hot High FALSE No 1 2 sunny hot High TRUE No 1 3 overcast hot High FALSE Yes 1 4 rainy mild High FALSE Yes 1 5 rainy cool normal FALSE Yes 1 6 rainy cool normal TRUE No 1 7 overcast cool normal TRUE Yes 1 8 sunny mild High FALSE No 1 9 sunny cool normal FALSE Yes 1 10 rainy mild normal FALSE Yes 1 11 sunny mild normal TRUE Yes 1 12 overcast mild High TRUE Yes 1 13 overcast hot normal FALSE Yes 1 14 rainy mild High TRUE No 1 TABLE XIII  D ATASET W EIGHTS AFTER F IRST I TERATION   Outlook Temp Humidity Windy Play Weight 1 sunny Hot High FALSE No 1 2 sunny Hot High TRUE No 1 3 overcast Hot High FALSE Yes 1 4 rainy mild High FALSE Yes 1 5 rainy cool Normal FALSE Yes 0.5 6 rainy cool Normal TRUE No 0.5 7 overcast cool Normal TRUE Yes 0.5 8 sunny mild High FALSE No 1 9 sunny cool Normal FALSE Yes 0.5 10 rainy mild Normal FALSE Yes 1 11 sunny mild Normal TRUE Yes 1 12 overcast mild High TRUE Yes 1 13 overcast Hot Normal FALSE Yes 1 14 rainy mild High TRUE No 1  The shaded rows in Table 11 indicate the covered examples You can see that their weights ha ve been adjusted. This marks the end of the first iteration. We have identified out first subgroup: Temperature = çCool Humidity = çNormal The process repeats until the required number of subgroups is found 160 


VII  C ONCLUSION AND F UTURE W ORK  Subgroup discovery is referring to discovery of relations among attributes and predicted classes. This problem has been generally studied in the past with techniques enabled by statistics, datamining and human experts. It is considered as a hybrid between predictive modeling and descriptive analysis where subgroups of similar data are formed pertaining to predicting a particular target class. In this paper, we proposed a novel method for subgroup discovery by using Bayesian network. By this method, probabilities of likenesses for each relation can be explicitly calculated \(that has an advantage of white-box modeling\ and each subgroup can be represented by rules that are readily interpretable for modeling the relations We verified this method by using a small example and reasonable results are produced preliminarily. In the future, we would be working on constructi ng a software prototype that implements this new scheme. We will be putting it to work on actual datasets in large volume so that their results can be further evaluated and compared against other subgroup discovery algorithms for benchmarking. We are also working on evaluating the performance of various quality functions other than WRAcc\ for the purpose of subgroup discovery Considering the good results that Bayesian network has achieved in classification, it is believed that it can yield good results in subgroup discovery scheme as well  R EFERENCES   1  J. Han, M. Kamber, "Data Mining: Concepts and Techniques", Morgan Kaufmann, August 2000 2  N. Friedman, D. Geiger and M. Goldszmidt, "Bayesian Network Classifiers", Machine Learning, 29 \(2/3\, 1997, pp.131-163 3  Heckerman, D., "A tutorial on learning Bayesian networks", Technical Report MSR-TR-95-06, 1995, Microsoft Research 4  Lavrac, N., Kavsek, B., Flach, P., and Todorovski, L., "Subgroup discovery with CN2-SD", Journal of Machine Learning Research, 5 2004, pp.153Ö188 5  Gamberger, D., Lavrac, N., "Generating Actionable Knowledge by Expert-guided Subgroup Discovery", Principles of Data Mining and Knowledge Discovery, LNAI 2431 \(PKDD\ Springer, 2002, pp.163 174 6  Lavrac, N., Kavsek, B., Flach, P., and Todorovski, L., "Subgroup discovery with CN2-SD", Journal of Machine Learning Research, 5 2004, pp.153Ö188 7  Branko Kavsek, Nada Lavrac, and Viktor Jovanoski, "Apriori-sd Adapting association rule learning to subgroup discovery", In Proceedings of the Fifth International Symposium on Intelligent Data Analysis, 2003, Springer, pp.230Ö241 8  Willi Kl®osgen, "Explora: A multipattern and multistrategy discovery assistant", Advances in Knowledge Discovery and Data Mining, MIT Press, 1996, pp.249Ö271 9  Stefan Wrobel, "An algorithm for multi-relational discovery of subgroups", In Proceedings of the First European Conference on Principles of Data Mining and Knowledge Discovery, Springer, 1997 pp.78Ö87   Atzmueller, M. and Puppe, F., "SD-Map - A fast algorithm for exhaustive subgroup discovery", In Proceddings of the 10th European Conference on Principles and Practice of Knowledge Discovery in Databases \(PKDD 2006\, Berlin, Springer-Verlag, Lecture Notes in Computer Science, 4213, 2006, pp.6-17   Gregory F. Cooper and Edward Herskovits, "A Bayesian Method for the Induction of Probabilistic Networks from Data", Machine Learning 9 1992, pp.309-347   Atzmueller, M., Puppe, F. and Buscher, H. P., "Towards KnowledgeIntensive Subgroup Discovery", In Proceedings Lernen Wissensentdeckung und Adaptivit‰t Workshop \(LWA'04\, 2004, Berlin Germany, pp.117-123   Klˆsgen, W., "Subgroup Discovery", In Klˆsgen, W. & Zytkow, J.\(Eds Handbook of Data Mining and Knowledge Discovery, 2002, New York Oxford University Press, pp.354-364   Gamberger, D. and Lavrac, N., "Expert-guided subgroup discovery Methodology and application", Journal Of Artificial Intelligence Research, 17, 2002, pp.1-27  161 


B b \(6 Fig. 2. ARAM neural network If any of the inequalities of \(6 inhibited, if all nodes are inhibited, a new uncommitted node is added. The Match Tracking process is started if needed When each match criterion is satisfied in the respective module, resonance occurs and the learning process follows During learning the selected node K learns to encode the input and target vectors by adjusting its weight vectors W aK and W bK similarly to \(5 B. Multi-label Extensions It has been shown in [7] that standard algorithms do not perform well on the muti-label datasets due to the use of the WTA rule \(2 been proposed: A set of Nb best categories with the largest activation values is chosen according to the rule: a category k is included in the set, if the relative difference \(TK?Tk is below a predefined fraction t of the activation range r = TK ? Tmin, where Tmin is the minimum activation of committed neurons. Activations of the Nb categories are subsequently normalized, uk = TkPN b s=1 Ts The resulting distributed output pattern P is calculated as follows P Nb s=1 usps. \(7 where for FAM ps = W br with r such that W ab sr = 1 which means that between neurons s of ARTa and r of ARTb an association in the Map field exists, and ps = W bs for ARAM. Thus, P contains a score for each label that is proportional to the number of neurons among the Nb best categories predicting this label. Since the fast learning of ART networks leads to varying performance with the input presentation order, voting across several networks trained with different orderings of a training set improves classi 


fication performance. The sum over the output of Equation 7 pattern P , which is used to determine the predicted classes Finally, a postprocessing filter method [12] is applied: the signals P are sorted descendingly, then all corresponding output classes are included in the multi-label up to the point of maximum decrease in the signal size from one class to the next A small modification is made in the ARTb weights, which now count label occurrences during learning by increasing their values by 1 each time the corresponding multi-label is presented. This modification leads to changes in the ARTb activation calculation of ML-FAM which is Tk = |B?W bk Another difference between the multi-label and the standard algorithms is that the former ones do not use Match Tracking with raising vigilance: The winner is simply inhibited C. Comparison of Classifiers To compare the two ART-based networks with other MLclassifiers, we chosen ML-kNN described in [8] and BoosTexter [9] which is an implementation of Boosting for the field of text categorization, based on the well-known AdaBoost algorithm [15]. ML-kNN and BoosTexter were chosen since these popular MC algorithms are nearest-neighbor- and rulebased, respectively, and therefore allow a comparison of the results of ML-FAM and ML-ARAM with algorithms based on other approaches than neural networks IV. PROXIMITY MEASURES FOR HIERARCHIES Approaches for quantitative comparison of graphs and trees are either defined on an abstract level, taking into account only the pure graph structure, or make use of the field specific semantics encoded in the graph. From the former category, we utilized the Constrained Tree Edit Distance CTED  whereas Taxonomic Overlap \(TO  field of concept representation, which also deals with hierarchical structures encoded in graphs and trees. Additionally the Lowest Common Ancestor Path Distance \(LCAPD new tree distance measure, developed especially for the type of hierarchies common in HMC. A description of the mutual differences between these measures and the motivation for the development of a new metric are given at the end of this section 


A. Constrained Tree Edit Distance CTED [10] is based upon the idea of transforming one hierarchy into another via certain local editing operations The distance between two hierarchies is the minimum total number of operations needed for transforming the one into the other. Three modification operations are considered: A node i is deleted by transmitting its children to its parent and removing i from the hierarchy. Inserting is the complement of deleting: Inserting i as a child of j makes i the parent of some subset of the children of j. Changing a node means changing its label. In order to make computation in polynomial time possible, the constraint that disjoint subtrees have to be mapped to disjoint subtrees is included in the definition [10], [16 The original definition does not include any normalization For two hierarchies with q labels each, 2q is the highest possible CTED  corresponding to deleting all labels of the first hierarchy and inserting all labels of the second hierarchy We normalize the CTED by 12q which results in distances in 0, 1 B. Taxonomic Overlap TO [11] compares the nodes of two hierarchies according to how many ancestors and descendants they share. We describe a version adapted to our experiments. Define semantic cotopy as SC\(i,H i j Given two hierarchies H1 and H2, the corresponding overlap for i ? L is defined as O\(i,H1, H2 SC\(i,H1 i,H2 SC\(i,H1 i,H2 Note that this is a symmetric expression in H1 and H2 with values in [0, 1]. The TO of H1 and H2 is the average of all overlaps TO\(H1, H2 1 q  i?L O\(i,H1, H2 For two identical hierarchies, TO is 1, while it is 0 if H1 and H2 are totally unrelated. Since the two other hierarchy 


proximity measures used in the experiments are distances with smaller values indicating higher similarity TO? := 1? TO to simplify comparisons C. LCA-Path Tree Distance Since in a hierarchy a parent is a more general concept than any of its children, the locations of the same label i in two hierarchies H1 and H2 can be compared by how far one has to travel up the chain of ancestors in both hierarchies until a common ancestor is found. For a label i ? L the depth dH\(i 0 dH\(i pH\(i a1, . . . , av the ancestors of i in H1, such that a1 = pH1\(i a2 = pH1\(a1 i common ancestor of i in H1 and H2, lca\(i,H1, H2 first ancestor of i in H1 which is also an ancestor of i in H2 j? := min  j | j ? {1, . . . , v} such that aj ? AH2\(i  lca\(i,H1, H2 Since 0 is an ancestor of all labels in all hierarchies, the LCA always exists. Note that usually lca\(i,H1, H2 lca\(i,H2, H1 We use the LCA to measure how far apart the positions of a label in both hierarchies are: If a label i has the same parent in both hierarchies it is regarded as being in the same position, otherwise the distances of i to its LCA in both hierarchies are used to measure how far apart both locations are. The cost for i is defined as d\(i,H1, H2 2 k=1 dHk\(i lca\(i,H1, H2 D\(i,H1, H2  0, if pH1\(i i d\(i,H1, H2 8 This can be seen as the length of the path from i to lca\(i,H1, H2 i,H1, H2 As D is not symmetric, the complete LCA-path distance 


between H1 and H2 is the mean value D\(H1, H2 1 W  i?L 1 2  D\(i,H1, H2 i,H2, H1  0 1 2 3 a 0 2 1 3 b Fig. 3. Sample hierarchies where W is a normalization factor: The worst case for a misplaced label i is that lca\(i,H1, H2 8 i,H1, H2 i i holds accordingly for D\(i,H2, H1 i?L dH1 \(i i H1, H2  D. Comparison All three hierarchy proximity measures presented above reflect different concepts of tree similarity. It is thus not surprising that CTED and TO*, although they perform well in the domains they were designed for, may produce counterintuitive results when used in the field of HE. This is demonstrated by the hierarchies shown in Figure 3: Despite the fact that the relationships between the nodes in both hierarchies are completely different, their CTED and TO are 0.33 and 0.44, respectively. Their LCAPD, on the other hand, is 1.00. Thus only LCAPD marks both hierarchies with the highest possible distance Some hierarchies used in our experiments contain nodes with exactly one child \(single-child labels that TO* does not distinguish between such labels and their children, in the following sense: Given a hierarchy H and a single-child node i, we denote with H ? the hierarchy 


that is obtained from H by swapping i and its child. Then TO?\(H,H CTED or LCAPD V. EXPERIMENTS We tested the proposed data mining system with four multi-label classifiers: ML-FAM, ML-ARAM, ML-kNN and BoosTexter on three real-world datasets with increasing complexity from the text-mining field. In our experiments we compared extracted hierarchies to the original hierarchy by means of three hierarchy proximity measures: LCAPD CTED, and TO The experimental setup of ML-FAM and ML-ARAM had the following parameter values: choice parameter 0.0001; learning rates ?a,b = 1.0 for fast learning; vigilance parameters ?a = 0.9 and ?b = 1.0. The parameter t was chosen to be 0.05 for the 20 newsgroups dataset and 0.02 for the other datasets. The number of voters V was set to 9 Following [8], we used 10 nearest neighbors \(k = 10 Laplace smoothing \(s = 1 BoosTexter was trained using 500 boosting rounds as in 8] and the threshold for converting rankings into multi-labels was set to 0 [9 A. Multi-label Classification Performance Measures We used a large set of performance measures for evaluation of the MC experiments: First, two example-based measures for multi-label predictions: Accuracy \(A measure \(F  of the predicted labels are actually present while F-measure is the harmonic mean of precision and recall calculated on the per-instance basis. The larger the A and F values, the better the MC performance Then two label-based measures were calculated on the basis of binary counts for each label: the numbers of true positives, true negatives, false positives, and false negatives We used the micro-averaged version of F1 with the binary measures counted on the whole test set. The perfect performance corresponds to F1 = 1. Additionally, micro-averaged precision and recall were used for computing the Area Under a Precision-Recall Curve \(AUPRC  precision corresponds to the proportion of predicted labels in the test set that are correct and recall to the proportion of labels that are correctly predicted. AUPRC has been claimed 


to be a well-suited performance measure for MC tasks where the number of negative instances significantly exceeds the number of positive instances [6]. Another advantage of AUPRC is its global nature and independence of a certain threshold value. The closer the AUPRC value is to 1, the better the performance Since these measures are based on the comparison of multi-labels, they depend on a transformation from rankings to classes. As a contrast we also used four wellknown ranking-based performance measures: One-Error OE RL C cision \(AP  for all ranking-based performance measures except AP. OneError evaluates how many times the top-ranked label is not in the set of proper labels of the instance. Ranking Loss is defined as the average fraction of pairs of labels that are ordered incorrectly. Coverage evaluates how far we need, on average, to go down the list of labels in order to cover all the proper labels of the instance. Average Precision evaluates the average fraction of labels ranked above a particular label i ? mt which actually are in mt And finally, the special hierarchical loss function H-loss 2] were utilized. Following [3], normalized costs were calculated: ci := 1/|c\(p\(i i ? L i of all direct children of i. Hierarchical loss \(H-loss consider mistakes made in subtrees of incorrectly predicted labels and penalizes only the first mistake along the path from the root to a node. The smaller the H-loss value, the better the performance B. 20 Newsgroups Dataset We modified the popular single-label dataset 20 Newsgroups [18], [19] by considering eight additional labels corresponding to the intermediate levels of the hierarchy faith, recreation, recreation/sport, recreation/vehicles, politics, computer, computer/hardware, science. This dataset is a collection of almost 20,000 postings from 20 newsgroups sorted by date into training \(60 40 data were preprocessed by discarding all words appearing only in the test documents and all words found in the stop word list [20]. Afterwards, all but the 2%-most-frequent words were eliminated to reduce the dimensionality. Documents were represented using the well-known TF-IDF \(Term 


Frequency  Inverse Document Frequency scheme [19]. The TF-IDF weights were then normalized to the range of [0, 1]. Conversion to TF-IDF and normalization were performed separately for training and test data. This resulted in the 1,070-dimensional dataset with 11,256 training instances, 7,493 test ones and 28 labels To test the performance of two HE algorithms, we first extracted hierarchies from the True Test Multi-Labels \(TTML and calculated the corresponding proximity measures. Both algorithms successfully extracted the original hierarchy We studied the performance of the multi-label classifiers and their ability to infer the class hierarchies in the presence of only partly available hierarchical information. We performed a series of HE experiments with multi-labels having a decreasing number of inserted non-leaf labels describing the levels in the hierarchy. We randomly removed such labels from 20%, 30%, and 40% of the training instances leaving them single-labeled. The results for predicted test multilabels are shown in Table I where the bold face marks the best classifier, and the first column \(left result of HE by Voting and the second \(right Thresholding \(referred as GT Comparing classification performance, one can see that the ART-based networks are superior to both the other classifiers in terms of most performance measures and that ML-FAM slightly outperforms ML-ARAM. Taken together they win on at least 6 and at most 8 out of 9 evaluation measures. BoosTexter has the second best performance, but its predictive power degrades more quickly with the increase in the number of single-label instances. The poorest MC results were shown by ML-kNN, its performance decreased very fast with any reduction in the number of multi-labels For example, F1 decreased by 15% while removing 40% of labels instead of 30%. It is also interesting to note that when trained on the dataset with 40% removed labels, ML-FAM and ML-ARAM significantly outperformed ML-kNN trained on the original dataset with all labels The hierarchy proximity measures confirm the good quality of predictions produced by the ART-based networks: The hierarchies were correct extracted by both HE algorithms of Section II-B even with 40% removed labels. The predictions of ML-kNN were the worst: The Voting variant of the HE 


algorithm could not extract the correct hierarchy with 30 assigning five labels incorrectly to the root label. None of the HE algorithms could extract the correct hierarchy in the absence of 40% multi-labels. With 40% and Voting, the number of labels falsely assigned to the root was 13, while with GT it was only three. For BoosTexter, Voting assigned two labels wrongly to the root label in the experiment with TABLE I 20 NEWSGROUPS ALL, -20%, -30% AND -40% RESULTS Measure all 20% 30% 40%ARAM FAM kNN BoosT. ARAM FAM kNN BoosT. ARAM FAM kNN BoosT. ARAM FAM kNN BoosT A 0.635 0.638 0.429 0.549 0.613 0.633 0.383 0.456 0.596 0.619 0.322 0.412 0.563 0.591 0.255 0.387 F1 0.694 0.696 0.565 0.677 0.675 0.688 0.528 0.604 0.662 0.677 0.469 0.566 0.640 0.657 0.392 0.542 F 0.691 0.692 0.480 0.605 0.671 0.688 0.429 0.507 0.658 0.676 0.364 0.465 0.630 0.652 0.296 0.441 OE 0.221 0.220 0.336 0.222 0.259 0.236 0.387 0.275 0.273 0.259 0.415 0.301 0.301 0.291 0.434 0.316 RL 0.100 0.098 0.124 0.073 0.108 0.110 0.128 0.077 0.098 0.103 0.132 0.079 0.101 0.106 0.135 0.082 C 4.188 4.168 6.080 4.164 4.397 4.446 6.184 4.286 4.246 4.340 6.326 4.328 4.334 4.463 6.397 4.379 AP 0.789 0.790 0.677 0.778 0.774 0.782 0.657 0.758 0.769 0.774 0.645 0.747 0.759 0.764 0.638 0.740 AUPRC 0.775 0.772 0.618 0.749 0.743 0.727 0.581 0.691 0.733 0.722 0.555 0.671 0.715 0.708 0.535 0.660 H-loss 0.103 0.123 0.121 0.094 0.102 0.098 0.124 0.108 0.106 0.103 0.132 0.117 0.115 0.111 0.145 0.122 Wins 1 5 0 3 1 6 0 2 2 6 0 1 2 6 0 1 LCAPD 0 0 0 0 0 0 0 0 0 0 0.12 0 0.05 0 0 0 0.51 0.26 0.17 0 CTED 0 0 0 0 0 0 0 0 0 0 0.14 0 0.07 0 0 0 0.50 0.21 0.21 0 TO* 0 0 0 0 0 0 0 0 0 0 0.11 0 0.05 0 0 0 0.39 0.18 0.15 0 30% removed labels and and six labels in the experiment with 40% removed labels. GT resulted in zero distances in the both cases. Assigning more labels to the root creates more shallow and wider hierarchies \(trivial case as stated before The good hierarchy extraction with ART networks demonstrates the system robustness  even with strongly damaged data the system can rebuild the original hierarchy C. RCV1-v2 Dataset The next experiment was based on the tokenized version of 


the RCV1-v2 dataset introduced in [21]. Only the topics label set consisting of 103 labels arranged in a hierarchy of depth four is examined here. Documents of the original training set of 23,149 were converted to TF-IDF weights and normalized Afterwards the set was splitted in 15,000 randomly selected documents as training and the remaining as test samples In this case, the Voting variant of HE applied to the TTML resulted in the LCAPD, CTED and TO* values 0.12, 0.15 and 0.13, respectively. The corresponding values of the GT variant are 0.05, 0.07 and 0.05. The poor performance of the Voting method is due to the fact that for the TTML only very high threshold values succeed in removing enough noise The Voting results are thus dominated by bad hierarchies extracted for all but the highest thresholds The classification and HE results for this dataset are shown in Table II. ML-ARAM has better performance results on this data set in all points than ML-FAM except for RL being the best of all classifiers in terms of the multi-label performance measures. BoosTexter is the best in terms of all ranking measures For both HE algorithms the distances of BoosTexter are the best, those of ML-FAM second, followed ML-ARAM and ML-kNN. All three distance measures correlate. Interesting is also that for ML-kNN the distance values obtained by both HE methods are almost the same The hierarchy extracted by GT from the TTML has much lower distances values as compared with the hierarchies extracted by both methods from predicted multi-labels. This reflects a specific problem of HE, since only a small fraction of the incorrectly classified multi-labels can prevent building of a proper hierarchy. For example, 16.5% of misassigned labels in the extracted hierarchy are responsible for about 80% of LCAPD calculated from the predictions of MLARAM. This large part of the HE error is caused by only 4% of the test data. Under these circumstances the other distances behave analogically. Most labels were not assigned making them trivial edges, but six labels were assigned to a false branch. This can happen when labels have a strong correlation and in the step Hierarchy Construction of the basic algorithm the parent is not unique in the confidence matrix. BoosTexters results suffer less from this problem because it generally sets more labels for each test sample 


Both HE algorithms behaved similarly on the predictions of the ART networks. They constructed a deeper hierarchy than the original one and wrongly assigned the same 11 labels to the root node. The higher distances come from Voting assigning more labels to the wrong branch. For MLkNN both algorithms again create very similar hierarchy trees, both misassigned 28 labels to the root label. For BoosTexter it was seven with Voting and eight with GT Voting produced a deeper hierarchy here D. WIPO-alpha Dataset The WIPO-alpha dataset1 comprises patent documents collected by the World Intellectual Property Organization WIPO ments. Preprocessing was performed as follows: From each document, the title, abstract and claims texts were extracted stop words were removed using the list from [20] and words were stemmed using the Snowball stemmer [22]. All but the 1%-most-frequent stems were removed, the remaining stems were converted to TF-IDF weights and these were normalized to the range of [0, 1]. Again, TF-IDF conversion and normalization were done independently for the training and the test set. The original hierarchy consists, from top to bottom, of 8 sections, 120 classes, 630 subclasses and about 69,000 groups. In our experiment, only records from the sections A \(5802 training and 5169 test samples H \(5703 training and 5926 test samples 1http://www.wipo.int/classifications/ipc/en/ITsupport/Categorization dataset/wipo-alpha-readme.html August 2009 TABLE II RCV1-V2 RESULTS Measure ARAM FAM kNN BoosT A 0.748 0.731 0.651 0.695 F1 0.795 0.777 0.735 0.769 F 0.805 0.787 0.719 0.771 OE 0.077 0.089 0.104 0.063 RL 0.087 0.086 0.026 0.015 C 11.598 11.692 8.563 5.977 AP 0.868 0.860 0.839 0.873 AUPRC 0.830 0.794 0.807 0.838 H-loss 0.068 0.077 0.097 0.081 Wins 4 0 0 5 LCAPD 0.29 0.22 0.25 0.20 0.34 0.34 0.21 0.18 


CTED 0.32 0.23 0.28 0.22 0.38 0.37 0.24 0.20 TO* 0.27 0.18 0.22 0.17 0.31 0.30 0.21 0.17 document in the collection has one so-called main code and any number of secondary codes, where each code describes a group the document belongs to. Both main and secondary codes were used in the experiment, although codes pointing to groups outside of sections A and H were ignored. We also removed groups that did not contain at least 30 training and 30 test records \(and any documents that only belonged to such small groups 7,364 test records with 924 attributes each and a label set of size 131 In this case, the Voting variant of the HE algorithm applied to the TTML resulted in the LCAPD, CTED and TO* values of 0.13, 0.12 and 0, respectively. GT showed the same values. Remarkable are the TO* distances, which are equal to 0. This is due to the fact that the WIPO-alpha hierarchy contains 16 single-child labels that are not partitioned by the true multi-labels: whenever a single-child label j is contained in a multi-label, so is its child, and vice versa. It is therefore theoretically impossible to deduce from the multilabels which of them is the parent of the other. As a result the HE algorithms often choose the wrong parent, resulting in higher LCAPD and CTED values. TO*, as described above is invariant under such choices The results obtained on the WIPO-alpha dataset are shown in Table III. The classification performance of the ART-based networks on this dataset is slightly worse than that of BoosTexter. Mostly in the terms of OE, RL, C, AP, AUPRC, and H-loss measures BoosTexter is better because its rankings are better and it assigned more labels to each sample. But the ART networks have better HE results because their predicted labels are more consistent with the original hierarchy. MLkNN has the worst classification results and distance values again. The reason for the high relative difference between LCAPD as well as CTED and TO* obtained for the ART networks or BoosTexter as compared to the results of the other datasets is because most of the labels were assigned in the right branch but not exactly where they belong Both HE algorithms extracted the same hierarchy from the predictions of ML-ARAM and a very similar hierarchy for ML-FAM. About 5% labels were assigned wrongly to the 


root label in the hierarchies of the ART networks. For MLTABLE III WIPO-ALPHA\(AH Measure ARAM FAM kNN BoosT A 0.588 0.590 0.478 0.564 F1 0.694 0.691 0.614 0.693 F 0.682 0.682 0.593 0.679 OE 0.052 0.057 0.110 0.042 RL 0.135 0.136 0.056 0.025 C 25.135 25.269 22.380 11.742 AP 0.790 0.785 0.724 0.802 AUPRC 0.720 0.684 0.688 0.762 H-loss 0.090 0.093 0.149 0.079 Wins 1 2 0 6 LCAPD 0.16 0.16 0.17 0.17 0.32 0.38 0.21 0.21 CTED 0.18 0.18 0.19 0.19 0.38 0.53 0.27 0.27 TO* 0.05 0.05 0.07 0.07 0.24 0.32 0.08 0.08 kNN both HE methods wrongly assigned about the half of the labels and about 20% of total labels were assgined to the root label. Here, GT extracted a much worse hierarchy as shown by CTED being 0.15 higher for GT than for Voting For BoosTexter both HE methods built the same hierarchy and no label was wrongly assigned to the root. All extracted hierarchies were one level deeper than the original one Although Voting produced worse hierarchies than GT on two previous datasets, this time its distance values were comparable or even better. In comparison to Voting, GT has higher values for all distances on the multi-labels of MLkNN. Voting has the advantage of being a much simpler method and of being more dataset independent. Still the tree distances have the same ranking order for all classifiers for both HE methods VI. CONCLUSION In this paper we studied Hierarchical Multi-label Classification \(HMC tive was to derive hierarchical relationships between output classes from predicted multi-labels automatically. We have developed a data-mining-system based on two recently proposed multi-label extensions of the FAM and ARAM neural networks: ML-FAM and ML-ARAM as well as on a Hierarchy Extraction \(HE algorithm builds association rules from label co-occurrences 


and has two modifications. The presented approach is general enough to be used with any other multi-label classifier or HE algorithm. We have also developed a new tree distance measure for quantitative comparison of hierarchies In extensive experiments made on three text-mining realworld datasets, ML-FAM and ML-ARAM were compared against two state-of-the-art multi-label classifiers: ML-kNN and BoosTexter. The experimental results confirm that the proposed approach is suitable for extracting middle and large-scale class hierarchies from predicted multi-labels. In future work we intend to examine approaches for measuring the quality of hierarchical multi-label classifications REFERENCES 1] M. Ruiz and P. Srinivasan, Hierarchical text categorization using neural networks, Information Retrieval, vol. 5, no. 1, pp. 87118 2002 2] N. Cesa-Bianchi, C. Gentile, and L. Zaniboni, Incremental algorithms for hierarchical classification, The Journal of Machine Learning Research, vol. 7, pp. 3154, 2006 3] , Hierarchical classification: combining Bayes with SVM, in Proceedings of the 23rd international conference on Machine learning ACM New York, NY, USA, 2006, pp. 177184 4] F. Wu, J. Zhang, and V. Honavar, Learning classifiers using hierarchically structured class taxonomies, in Proceedings of the 6th International Symposium on Abstraction, Reformulation And Approximation Springer, 2005, p. 313 5] L. Cai and T. Hofmann, Hierarchical document categorization with support vector machines, in Proceedings of the thirteenth ACM international conference on Information and knowledge management ACM New York, NY, USA, 2004, pp. 7887 6] C. Vens, J. Struyf, L. Schietgat, S. Dz?eroski, and H. Blockeel Decision trees for hierarchical multi-label classification, Machine Learning, vol. 73, no. 2, pp. 185214, 2008 7] E. P. Sapozhnikova, Art-based neural networks for multi-label classification, in IDA, ser. Lecture Notes in Computer Science, N. M Adams, C. Robardet, A. Siebes, and J.-F. Boulicaut, Eds., vol. 5772 Springer, 2009, pp. 167177 8] M. Zhang and Z. Zhou, ML-kNN: A lazy learning approach to multilabel learning, Pattern Recognition, vol. 40, no. 7, pp. 20382048 2007 9] R. Schapire and Y. Singer, BoosTexter: A boosting-based system for text categorization, Machine learning, vol. 39, no. 2, pp. 135168 


2000 10] K. Zhang, A constrained edit distance between unordered labeled trees, Algorithmica, vol. 15, no. 3, pp. 205222, 1996 11] A. Maedche and S. Staab, Measuring similarity between ontologies Lecture notes in computer science, pp. 251263, 2002 12] G. Carpenter, S. Martens, and O. Ogas, Self-organizing information fusion and hierarchical knowledge discovery: a new framework using ARTMAP neural networks, Neural Networks, vol. 18, no. 3, pp. 287 295, 2005 13] A.-H. Tan and H. Pan, Predictive neural networks for gene expression data analysis, Neural Networks, vol. 18, pp. 297306, April 2005 14] G. Carpenter, S. Grossberg, N. Markuzon, J. Reynolds, and D. Rosen Fuzzy ARTMAP: A neural network architecture for incremental supervised learning of analog multidimensional maps, IEEE Transactions on Neural Networks, vol. 3, no. 5, pp. 698713, 1992 15] Y. Freund and R. Schapire, A decision-theoretic generalization of online learning and an application to boosting, Journal of computer and system sciences, vol. 55, no. 1, pp. 119139, 1997 16] K. Zhang and T. Jiang, Some MAX SNP-hard results concerning unordered labeled trees, Information Processing Letters, vol. 49 no. 5, pp. 249254, 1994 17] G. Tsoumakas and I. Vlahavas, Random k-labelsets: An ensemble method for multilabel classification, Lecture Notes in Computer Science, vol. 4701, p. 406, 2007 18] K. Punera, S. Rajan, and J. Ghosh, Automatic construction of nary tree based taxonomies, in Proceedings of IEEE International Conference on Data Mining-Workshops. IEEE Computer Society 2006, pp. 7579 19] T. Joachims, A probabilistic analysis of the Rocchio algorithm with TFIDF for text categorization, in Proceedings of the Fourteenth International Conference on Machine Learning. Morgan Kaufmann Publishers Inc. San Francisco, CA, USA, 1997, pp. 143151 20] A. McCallum, Bow: A toolkit for statistical language modeling, text retrieval, classification and clustering, 1996 http://www.cs.cmu.edu/ mccallum/bow 21] D. Lewis, Y. Yang, T. Rose, and F. Li, RCV1: A new benchmark collection for text categorization research, The Journal of Machine Learning Research, vol. 5, pp. 361397, 2004 22] M. Porter, Snowball: A language for stemming algorithms, 2001 http://snowball.tartarus.org/texts/introduction.html 


the US census data set. The size of pilot sample is 2000, and all 50 rules are derived from this pilot sample. In this experiment the ?xed value x for the sample size is set to be 300. The attribute income is considered as a differential attribute, and the difference of income of husband and wife is studied in this experiment. Figure 3 shows the performance of the 5 sampling 331 6DPSOLQJ9DULDQFH             9D UL DQ FH R I V WL PD WL RQ  9DU 9DU 9DU 5DQG a timation 6DPSOLQJ&RVW    


      6D PS OL QJ  RV W 9DU 9DU 9DU 5DQG b 6DPSOLQJ$FFXUDF          5  9DU 9DU 9DU 5DQG c Fig. 2. Evaluation of Sampling Methods for Association Rule Mining on the Yahoo! Dataset procedures on the problem of differential rule mining on the US census data set. The results are also similar to the experiment results for association rule mining: there is a consistent trade off between the estimation variance and sampling cost by setting their weights. Our proposed methods have better performance than simple random sampling method 


We also evaluated the performance of our methods on the Yahoo! dataset. The size of pilot sampling is 2000, and the xed value x for the sample size is 200. The attribute price is considered as the target attribute. Figure 4 shows the performance of the 5 sampling procedures on the problem of differential rule mining on the Yahoo! dataset. The results are very similar to those from the previous experiments VI. RELATED WORK We now compare our work with the existing work on sampling for association rule mining, sampling for database aggregation queries, and sampling for the deep web Sampling for Association Rule Mining: Sampling for frequent itemset mining and association rule mining has been studied by several researchers [23], [21], [11], [6]. Toivonen [23] proposed a random sampling method to identify the association rules which are then further veri?ed on the entire database. Progressive sampling [21], which is based on equivalence classes, involves determining the required sample size for association rule mining FAST [11], a two-phase sampling algorithm, has been proposed to select representative transactions, with the goal of reducing computation cost in association rule mining.A randomized counting algorithm [6] has been developed based on the Markov chain Monte Carlo method for counting the number of frequent itemsets Our work is different from these sampling methods, since we consider the problem of association rule mining on the deep web. Because the data records are hidden under limited query interfaces in these systems, sampling involves very distinct challenges Sampling for Aggregation Queries: Sampling algorithms have also been studied in the context of aggregation queries on large data bases [18], [1], [19], [25]. Approximate Pre-Aggregation APA  categorical data utilizing precomputed statistics about the dataset Wu et al. [25] proposed a Bayesian method for guessing the extreme values in a dataset based on the learned query shape pattern and characteristics from previous workloads More closely to our work, Afrati et al. [1] proposed an adaptive sampling algorithm for answering aggregation queries on hierarchical structures. They focused on adaptively adjusting the sample size assigned to each group based on the estimation error in each group. Joshi et al.[19] considered the problem of 


estimating the result of an aggregate query with a very low selectivity. A principled Bayesian framework was constructed to learn the information obtained from pilot sampling for allocating samples to strata Our methods are clearly distinct for these approaches. First strata are built dynamically in our algorithm and the relations between input and output attributes are learned for sampling on output attributes. Second, the estimation accuracy and sampling cost are optimized in our sample allocation method Hidden Web Sampling: There is recent research work [3 13], [15] on sampling from deep web, which is hidden under simple interfaces. Dasgupta et al.[13], [15] proposed HDSampler a random walk scheme over the query space provided by the interface, to select a simple random sample from hidden database Bar-Yossef et al.[3] proposed algorithms for sampling suggestions using the public suggestion interface. Our algorithm is different from their work, since our goal is sampling in the context of particular data mining tasks. We focus on achieving high accuracy with a low sampling cost for a speci?c task, instead of simple random sampling VII. CONCLUSIONS In this paper, we have proposed strati?cation based sampling methods for data mining on the deep web, particularly considering association rule mining and differential rule mining Components of our approach include: 1 the relation between input attributes and output attributes of the deep web data source, 2 maximally reduce an integrated cost metric that combines estimation variance and sampling cost, and 3 allocation method that takes into account both the estimation error and the sampling costs Our experiments show that compared with simple random sampling, our methods have higher sampling accuracy and lower sampling cost. Moreover, our approach allows user to reduce sampling costs by trading-off a fraction of estimation error 332 6DPSOLQJ9DULDQFH      


     V WL PD WL RQ R I 9D UL DQ FH  9DU 9DU 9DU 5DQG a timation 6DPSOLQJ&RVW          6D PS OL QJ  RV W 9DU 9DU 


9DU 5DQG b 6DPSOLQJ$FFXUDF          5  9DU 9DU 9DU 5DQG c Fig. 3. Evaluation of Sampling Methods for Differential Rule Mining on the US Census Dataset 6DPSOLQJ9DULDQFH             9D UL DQ FH R I V WL 


PD WL RQ  9DU 9DU 9DU 5DQG a timation 6DPSOLQJ&RVW          6D PS OL QJ  RV W  9DU 9DU 9DU 5DQG b 6DPSOLQJ$FFXUDF         


    5  9DU 9DU 9DU 5DQG c Fig. 4. Evaluation of Sampling Methods for Differential Rule Mining on the Yahoo! Dataset REFERENCES 1] Foto N. Afrati, Paraskevas V. Lekeas, and Chen Li. Adaptive-sampling algorithms for answering aggregation queries on web sites. Data Knowl Eng., 64\(2 2] Rakesh Agrawal and Ramakrishnan Srikant. Fast algorithms for mining association rules. In Proceedings of the 20th International Conference on Very Large Data Bases, pages 487499, 1994 3] Ziv Bar-Yossef and Maxim Gurevich. Mining search engine query logs via suggestion sampling. Proc. VLDB Endow., 1\(1 4] Stephen D. Bay and Michael J. Pazzani. Detecting group differences Mining contrast sets. Data Mining and Knowledge Discovery, 5\(3 246, 2001 5] M. K. Bergman. The Deep Web: Surfacing Hidden Value. Journal of Electronic Publishing, 7, 2001 6] Mario Boley and Henrik Grosskreutz. A randomized approach for approximating the number of frequent sets. In ICDM 08: Proceedings of the 2008 Eighth IEEE International Conference on Data Mining, pages 4352 Washington, DC, USA, 2008. IEEE Computer Society 7] D. Braga, S. Ceri, F. Daniel, and D. Martinenghi. Optimization of Multidomain Queries on the Web. VLDB Endowment, 1:562673, 2008 8] R. E. Ca?isch. Monte carlo and quasi-monte carlo methods. Acta Numerica 7:149, 1998 9] Andrea Cali and Davide Martinenghi. Querying Data under Access Limitations. In Proceedings of the 24th International Conference on Data Engineering, pages 5059, 2008 10] Bin Chen, Peter Haas, and Peter Scheuermann. A new two-phase sampling based algorithm for discovering association rules. In KDD 02: Proceedings of the eighth ACM SIGKDD international conference on Knowledge discovery and data mining, pages 462468, New York, NY, USA, 2002 ACM 


11] W. Cochran. Sampling Techniques. Wiley and Sons, 1977 12] Arjun Dasgupta, Gautam Das, and Heikki Mannila. A random walk approach to sampling hidden databases. In SIGMOD 07: Proceedings of the 2007 ACM SIGMOD international conference on Management of data pages 629640, New York, NY, USA, 2007. ACM 13] Arjun Dasgupta, Xin Jin, Bradley Jewell, Nan Zhang, and Gautam Das Unbiased estimation of size and other aggregates over hidden web databases In SIGMOD 10: Proceedings of the 2010 international conference on Management of data, pages 855866, New York, NY, USA, 2010. ACM 14] Arjun Dasgupta, Nan Zhang, and Gautam Das. Leveraging count information in sampling hidden databases. In ICDE 09: Proceedings of the 2009 IEEE International Conference on Data Engineering, pages 329340 Washington, DC, USA, 2009. IEEE Computer Society 15] Loekito Elsa and Bailey James. Mining in?uential attributes that capture class and group contrast behaviour. In CIKM 08: Proceeding of the 17th ACM conference on Information and knowledge management, pages 971 980, New York, NY, USA, 2008. ACM 16] E.K. Foreman. Survey sampling principles. Marcel Dekker publishers, 1991 17] Ruoming Jin, Leonid Glimcher, Chris Jermaine, and Gagan Agrawal. New sampling-based estimators for olap queries. In ICDE, page 18, 2006 18] Shantanu Joshi and Christopher M. Jermaine. Robust strati?ed sampling plans for low selectivity queries. In ICDE, pages 199208, 2008 19] Bing Liu. Web Data Mining: Exploring Hyperlinks, Contents, and Usage Data \(Data-Centric Systems and Applications Inc., Secaucus, NJ, USA, 2006 20] Srinivasan Parthasarathy. Ef?cient progressive sampling for association rules. In ICDM 02: Proceedings of the 2002 IEEE International Conference on Data Mining, page 354, Washington, DC, USA, 2002. IEEE Computer Society 21] William H. Press and Glennys R. Farrar. Recursive strati?ed sampling for multidimensional monte carlo integration. Comput. Phys., 4\(2 1990 22] Hannu Toivonen. Sampling large databases for association rules. In The VLDB Journal, pages 134145. Morgan Kaufmann, 1996 23] Fan Wang, Gagan Agrawal, Ruoming Jin, and Helen Piontkivska. Snpminer A domain-speci?c deep web mining tool. In Proceedings of the 7th IEEE International Conference on Bioinformatics and Bioengineering, pages 192 199, 2007 24] Mingxi Wu and Chris Jermaine. Guessing the extreme values in a data set a bayesian method and its applications. VLDB J., 18\(2 25] Mohammed J. Zaki. Scalable algorithms for association mining. IEEE Transactions on Knowledge and Data Engineering, 12:372390, 2000 


333 


