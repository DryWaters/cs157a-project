Rethinking Data Management for Big Data \nScientific Workflows \nKaran Vahi, Mats Rynge, Gideon Juve, Rajiv Mayani, Ewa Deelman \nInformation Sciences Institute - University of Southern California \nMarina Del Rey, USA n{vahi, rynge, gideon, mayani, deelman}@isi.edu \n \nAbstract—Scientific workflows consist of tasks that operate on \ninput data to generate new data products that are used by \nsubsequent tasks. Workflow management systems typically stage \ndata to computational sites before invoking the necessary \ncomputations. In some cases data may be accessed using remote \nI/O. There are limitations with these approaches, however. First, \nthe storage at a computational site may be limited and not able to \naccommodate the necessary input and intermediate data Second, \neven if there is enough storage, it is sometimes managed by a \nfilesystem with limited scalability In recent years, object stores \nhave been shown to provide a scalable way to store and access \nlarge datasets however, they provide a limited set of operations \n\(retrieve, store and delete nrequirements of the workflow tasks.  In this paper, we show how \nscientific workflows can take advantage of the capabilities of \nobject stores without requiring users to modify their workflow-\nbased applications or scientific codes. We present two general \napproaches, one that exclusively uses object stores to store all the nfiles accessed and generated by a workflow, while the other relies \non the shared filesystem for caching intermediate data sets. We \nhave implemented both of these approaches in the Pegasus \nWorkflow Management System and have used them to execute \nworkflows in variety of execution environments ranging from \ntraditional supercomputing environments that have a shared \nfilesystem to dynamic environments like Amazon AWS and the nOpen Science Grid that only offer remote object stores. As a \nresult, Pegasus users can easily migrate their applications from a \nshared filesystem deployment to one using object stores without \nchanging their application codes. \nIndex Terms— Pegasus, workflows, object stores, Pegasus \nLite, data staging site, data management, cloud \nI.  INTRODUCTION  \nFlexible and efficient data management is of critical \nimportance in scientific workflow management systems, \nespecially when they operate on large, distributed data sets nScientific workflows enable the formalization of a set of \ncomputational tasks with inter-dependencies. In the era of Big \nData, it is necessary to separate the definition of the workflow \nfrom the data location and computational sites. Therefore, the \nworkflow management system needs to take a high-level \ndescription of a workflow and handle low-level operations \nsuch as task execution and data management. \nIn our experience, many workflow applications require \nPOSIX file systems. That means that each task in the \nworkflow opens one or more input files, read or write a \nportion of it, and then close it. As a result, workflow \nmanagement systems need to provide a runtime environment \nwhere the tasks in the workflow have access to a POSIX file \nsystem for their data operations. Such an environment is \nreadily available on traditional supercomputers [1], [2 usually \nin the form of a shared parallel file system. Scientists today \nhave multiple alternative computational platforms available to \nthem, including commercial clouds such as Amazon AWS [3], \nacademic science clouds such as FutureGrid [4], [5] and \ndistributed environments such as Open Science Grid [6]. A ncommon feature in cloud and grid infrastructures is some kind \nof object storage close to the compute nodes These object \nstores provide an attractive storage infrastructure, both in \nterms of scalability to serve a large number of files, and in the \namount of storage provided. However, they only provide a \nlimited set of operations to store, retrieve and delete data \nobjects/files. In this paper we present and evaluate a solution nfor supporting Big Data workflows that rely on object stores \nfor availability and scalability on clouds or grid \ninfrastructures. We introduce the notion of data staging sites \nwhere data is placed for the applications to access. Decoupling \ndata storage from the execution site also enables the use of a \nlarge number of distributed computational resources, and the \nmigration of work from one execution site to another without \nthe need to move all the data along with it. Our solution also \nallows for the data staging site to be co-located with the \ncompute site, thereby leveraging the site’s shared POSIX file \nsystem. This approach works particularly well in traditional \nsupercomputing environments with fast parallel filesystems.  \nThe paper is organized as follows. In Sections 2 and 3, we \nprovide an overview of the different types of files that \nscientific workflows refer to, where they reside and how they \nare accessed and made available by workflow systems. \nSection 4 describes how these files can be made available \nthrough object stores for data intensive workflows. In Section \n5, we present a data management solution based on the \nexisting Pegasus Workflow Management System [7]. In \nSection 6 we discuss experiments that highlight the \nperformance penalty a workflow might experience by using \nobject stores exclusively. Finally in Sections 7 and 8 we refer \nto related work, conclude and explain future work. \nII. TYPES OF FILES \nIn scientific workflows dependencies between jobs usually \nindicate both control and data dependencies. An edge between \ntwo tasks \(T1?T2 that Task T1 generates an output \nfile that is required as an input file for task T2. Each task in \nthe workflow may read one or more input files, and write out \n2013 IEEE International Conference on Big 


Data\n27978-1-4799-1293-3/13/$31.00 ©2013  IEEE \none or more output files. At the workflow level, we can nclassify the various files that a workflow refers to into three \ntypes: input, intermediate and output files Each of these file \ntypes has a different lifecycle and storage binding. \n• Input Files are not generated by any task in the \nworkflow and usually reside on the user's own storage \nserver. They can be transferred to another storage server \nat runtime and retrieved from there, or retrieved directly \nfrom the storage server by the tasks. In Figure 1, F.input \nis an input file. \n• Intermediate Files are files that are generated by the nworkflow, but do not need to be saved after the \nworkflow completes. They can be deleted once all the \ntasks that use them have been executed. In Figure 1, \nF.b1, F.b2, F.c1 and F.c2 are the intermediate files. \n Output Files are files that are generated by the \nworkflow that are of interest to the user and need to be nsaved when the workflow completes. These files are \nusually transferred to a separate permanent storage nduring workflow execution. In Figure 1 F.output is an \noutput file for the workflow. It is important to note that \nthe output files don’t necessarily have to be the outputs \nof the leaf jobs. \nIII. EXECUTION MODEL FOR WORKFLOWS \nScientific workflows are submitted and managed by a \nworkflow management system. The host where the workflow \nmanagement system resides and coordinates the workflow \nexecution from is referred to as the submit host. The \nworkflow tasks execute on worker nodes, which can be inside \na physical cluster or a virtual machine. The tasks in the \nworkflow can be executed on one or more compute sites and \nrequire input data that can be present at one or more input \nsites. Intermediate files reside at a data staging site for the \nduration of the workflow. When the workflow has finished the \noutput files are staged to one or more output sites where they \nare catalogued and stored permanently. Depending on the \nworkflow management system and the target execution \nenvironment, one or more of these sites can be co-located. For \nexample, in the case where the input data already resides on \nthe compute site, the compute site and the input data site are \nthe same Figure 2 shows a simple two-task workflow and \nillustrates how the files required by the workflow are moved in nbetween the various sites, which are logically distinct from \neach other. \nIV. OBJECT STORAGE FOR SCIENTIFIC WORKFLOWS \nAn object store is a high-level storage service that provides \na limited set of operations to store, retrieve and delete data \nobjects, which are analogous to files in traditional file systems. \nSome object stores also support defining and querying \nmetadata for objects. Unlike POSIX file systems, however nobject stores do not provide efficient byte-level random access \nto objects. Unlike traditional files, it is not possible to open an \nobject stored in an object store, read or write a portion of it, \nand then close it Instead, a client needs to retrieve an object \nfrom an object store, update the data, and then store the data as \na new object in the object store. \nThe internals of the object store can be quite complex in \norder to provide a reliable, scalable service. For example, \nAmazon’s Simple Storage Service \(S3  nand delete operations via REST and SOAP APIs. It also \ndistributes multiple replicas of an object across a large set of \nstorage servers to provide redundancy in case of failures. \nMany grid storage services and protocols that are designed \nfor data-intensive applications can be thought of as object \nstores. Services such as GridFTP [9], SRM [10], and iRODS \n[11], [12] support store/retrieve operations, but do not support nrandom reads and writes. This generalization is important for \nthe purposes of laying out the data management models for \ndifferent execution environments against different data storage \nservers. \nThere are two options when relying on object stores for \nBig Data workflows: 1 when available, use a shared file system on the compute \nnode as a data staging site to store intermediate data products. \nA. Exclusive Use of Object Stores \nIn the case where all data is stored in an object store the \nworkflow management system needs to seamlessly \n \nFigure 1: Files in a Workflow. \n \nFigure 2: Workflow Execution Model. \n28\nstore/retrieve files from the object store, and make the files \navailable to the workflow tasks on a local disk on the worker \nnode. In such a setup, the workflow management system \nretrieves the inputs and intermediate files from the object \nstore. The workflow task can then do the required POSIX I/O nagainst the local file system, and when the task is complete, \nthe workflow management system can store the intermediate \nresults and outputs to the object store again. This enables the \napplication to do normal POSIX I/O even though the \nworkflow is being executed across distributed resources. \nThe additional steps the workflow management system has \nto take to interact with the object store can add some overhead \nto the workflow execution, but the overhead can be considered \na small drawback in comparison to the benefits of being able \nto use scalable stores and distributing the computations across \nresources. Since the object store is used to hold both input and \nintermediate files, the tasks can execute anywhere as long as \nthe workflow system can seamlessly retrieve/store data \nfrom/in the object store. In the example illustrated in Figure 3 na task T1 in a workflow can run on a campus compute cluster, \nand task T2 of the same workflow can run in a virtual machine \non Amazon EC2. Both tasks, T1 and T2, use Amazon S3 \nobject store as the data staging site 


for intermediate files. In \ngeneral, by separating the data storage from the execution \nenvironment, it is easy for the workflow to be run across \nmultiple execution environments. A common use case for this \nis to spill over” from local/campus resources to national \ncyberinfrastructure or cloud resources, when compute demand \nexceeds what the local/campus resources can provide. \nFigure 3 also illustrates the data flow for this workflow. In \nthis case, file F.in is transferred to local file system of the \nworker node in the cloud on the HPC cluster. Task T1 starts \non the node, reads in the input file F.in, and writes out an \nintermediate file F.int, to the local file system. F.int is then \ntransferred back to the object store that acts as the data staging \nsite. F.int is then retrieved from the object store to the local \nfile system of the EC2 node. Task T2 starts up and reads the \nF.int file \(created by T1 disk. The F.out file is then transferred to the object \nstore. All transfers to/from the object store are done by the \nworkflow management system. \nThe drawbacks of exclusively using object stores for \nscientific workflows include: duplicate transfers and latencies \nincurred in transfer of a large number of files Duplicate \ntransfers are obvious in the case where multiple tasks in the \nworkflow use the same files [13 14]. The object store will \nsee similar requests for the same object over and over again \nfor different tasks. Object stores usually scale well enough for \nthis to not affect the performance of the workflow Workflow \nsystems may choose to cache files locally on the node, or a \nshared file system on the cluster, to alleviate this problem. \nThis is possible as workflows are usually write once, read \nmany—i.e. a file is generated by a single task and is then \nimmutable during the course of the workflow run. A larger \nconcern for overall workflow performance is latency. The \ndesign of cloud object stores provides great bandwidth, but the nlatency for a single retrieve or store operation can be several \nseconds long. For data-intensive workflows with a large \nnumber of small files this latency can add significantly to the \noverall workflow execution time. Another issue for large \nworkflows can be the number of intermediate files that need to \nbe shipped to the object store and then retrieved later on by \nother descendant tasks in the workflow. The duplicate ntransfers can also have cost implications as commercial object \nstorage providers charge per GB of data transferred and stored, \nas well as the number of store and retrieve requests [15], [16]. \nB. Use of Shared File System as Data Staging Site \nOne of the ways to address the problem of latencies caused \nby duplicate transfers for input and intermediate files is for the \nworkflow management system to stage the input data on-\ndemand to a shared POSIX compliant file system that is \nshared across the compute nodes, and then run all the \ncomputations on that one resource. The shared file system acts \nas the data staging site for the workflow and stores all the files \nthat the workflow refers to, for the duration of the workflow \nrun. In this case only the input and output files are placed on \nthe object store. This also helps to lower the cost of executing \na workflow using a commercial object store, as the \nintermediate files are not transferred into or out of the object \nstore. Figure 4 illustrates the data flow for a simple two-task \nworkflow on a single HPC cluster with a shared file system. In \nthis case, file F.in is transferred by the workflow management \nsystem to the shared file system of the cluster. Task T1 starts \non node C1, reads the input file F.in from the shared file \nsystem, and writes the intermediate file F.int to the shared file \nsystem. Task T2 then starts up on node C2, reads F.in \(created \nby T1 the shared file system. F.out is then transferred to the \nobject store by the workflow management system. This napproach works particularly well in the traditional \nsupercomputing environment with fast parallel file systems. \nFor example, XSEDE [2] sites have been demonstrated to \nhave great scalability for many scientific workflows [14], [17], \n[18]. Note that this approach of placing the tasks where the \ndata exists results in a loss of the flexibility of where to place \nFigure 3: Exclusive Use of Object Stores for Application Data n29\nthe computation, for example spilling over the computation to \nanother site if the first one is busy nBoth of the above approaches have their own merits, and \nwhich method to use depends on the type of workflow and the \ntargeted workflow execution environment. The challenge for \nworkflow management systems is to develop a flexible data \nmanagement solution that allows the scientist to efficiently use \nthe infrastructure available to them. The solution should have \nfollowing features: \n1. Allow for late binding of tasks and data Tasks are \nmapped to compute resources at runtime based on \nresource availability. The task can discover input data at \nruntime, and possibly choose to stage the data from one of \nmany locations. \n2. Allow for static binding of tasks and data if the scientist \nhas only one compute resource selected. \n3. Support access to object stores using a variety of \nprotocols and security mechanisms. \nIn the following section, we describe how we implemented \nthese features in the Pegasus Workflow Management System. \nV. IMPLEMENTATION \nThe Pegasus Workflow Management System [7] is used by \nscientists to execute large-scale computational workflows on a nvariety of cyberinfrastructure, ranging from local desktops to \ncampus clusters, grids, and commercial and 


academic clouds. \nPegasus WMS enables scientists to compose abstract \nworkflows without worrying about the details of the \nunderlying execution environment or the particulars of the \nlow-level specifications required by the middleware \(Condor \n[19], Globus [20], or Amazon EC2 contain information about the data files and \ntransformations used by the workflow \(replica catalog and ntransformation catalog site catalog many cases \nthe data catalog is maintained by a collaboration, especially \nwhen data sets are large, as in the case of LIGO—a \ngravitational-wave physics project [21]. For large \ncyberinfrastructures, such as the OSG site catalogs are \nmaintained by the infrastructure. \nThen the scientist provides an abstract representation of \ntheir workflow as a directed acyclic graph \(DAG composed of tasks composed of jobs resources. The system has \nthree main components: \n• Mapper \(Pegasus Mapper nworkflow based on the abstract workflow provided by \nthe user or workflow composition system. It finds the nappropriate software, data, and computational resources \nrequired for workflow execution. The Mapper also nrestructures the workflow to optimize performance and \nadds transformations for data management and nprovenance information generation. \n• Execution Engine \(Condor DAGMan workflow in order of their \ndependencies. DAGMan [22] relies on the resources \n\(compute, storage and network defined in the \nexecutable workflow to perform the necessary actions. \n• Task Scheduler \(Condor Schedd DAGMan releases \nworkflow tasks to the task executor for submission to \nlocal and remote resources. \nAll the workflow management system components are \ndeployed on the submit host. The jobs are usually executed on nremote resources. During the mapping process, Pegasus \nfigures out where the jobs and data are placed. It queries a \nreplica catalog to discover the locations of the input files \nperforming replica selection in case of multiple file locations. \nIt then adds data stage-in and stage-out jobs to the executable \nworkflow, which are responsible for staging in the input data \nfor the workflow from the input storage site and staging out nthe output data to the output storage site. The advantage of \nadding separate data stage-in and stage-out jobs to the \nexecutable workflow is two fold:  \n1. The Mapper can perform optimizations at the workflow \nlevel to stage-in and stage-out data. For example for large \nworkflows, the mapper can choose to limit the number of nindependent stage-in jobs created, and thus control the \nnumber of connections the storage system sees. \n2 No pre-staging of input data required. The data stage-in \njobs ensure that data is available to compute jobs when \nthey start executing. \nThe Mapper can also add cleanup jobs [23], [24] to the \nworkflow that delete intermediate files when they are no longer \nrequired, and it can remove jobs from the workflow for which noutputs already exist \(data reuse workflow generated \nby the Mapper. The executable workflow has data management \njobs added that stage-in the input data and stage-out the output \ndata, and cleanup jobs that remove files after they are no longer nrequired. \nIn earlier versions of Pegasus, the stage-in jobs staged in \ninput data to a directory on the shared file system using the data \nservers on the head nodes of the compute site \(i.e. the data \nstaging site and the compute site were always co-located hard to \nsupport late binding of jobs, where the execution location is \nFigure 4: Use of Shared File System and Object Stores for Application Data.\n30\ndetermined at runtime according to the resource’s policy and nconfiguration. \nIn our new approach, we have opted for a hybrid model, \nwhere the mapper still adds data management jobs for the \nexecutable workflow but these jobs are not tied to an execution \nsite. Instead the data is transferred to a data staging site \nassociated with the compute site. The data staging site is ndefined as the intermediate data storage site used to manage \ndata for a workflow. It is used to store the input and all \nintermediate data generated during a workflow execution. The \ndata staging site may or may not be the same as the cluster \nwhere the jobs execute. This decoupling enables Pegasus to \nsupport the shared file system setup while maintaining enough \nflexibility to support the late binding of jobs and the use of nremote object stores. \nWe also introduce Pegasus Lite, a semi-autonomous \nlightweight execution engine for Pegasus tasks \(with or without \ndependencies in clouds VMs. Pegasus Lite receives from \nPegasus WMS a set of tasks to manage on the remote resource \nand is responsible for managing their execution and data needs.  \nA. Data Staging Site \nSeparating the data storage from the execution \nenvironment enables the late binding of tasks. In Pegasus, the \ndata staging site refers to the intermediate object storage to be \nused for the workflow. This intermediate object storage is used \nto store the input data staged in for the workflow from \nmultiple remote servers and the output data that needs to be \nstaged out to an output site. The data staging site also stores \nany intermediate data products that are generated by jobs as \npart of the workflow execution. \nThe data staging site is not required to have a job 


nsubmission interface. Instead the Pegasus Mapper schedules \nthe data stage-in and stage-out jobs to execute locally on the \nsubmit host. For consistency, the data staging site is described \nas any other site in the configuration, and selected at planning \ntime using the mapper’s --staging-site option. If not specified, \nthe mapper co-locates the data staging site with the compute \nsite. \nWhile users can choose to let their jobs transfer input data \ndirectly from input data servers, they may not find it feasible \nbecause of performance or policy reasons. Funneling the input \ndata through a data staging site enables Pegasus to control \naccess to external data infrastructure when accessing the data. \nFor example, a user’s input data may be hosted on their desktop \nor a low performance data server that does not support a lot of \nconcurrent connections. At the same time, the workflow that is \nexecuted against the input data set may have thousands of jobs \nthat can execute in parallel. Pegasus’ data management jobs, \nthe granularity of which can be controlled independent of the nworkflow size, allows for the transfer of input data from input \nservers to a high performance data staging server in a \ncontrolled fashion. The jobs can then retrieve input data from \nthis high performance server when they run on distributed \nresources like OSG. \nB. Pegasus Lite \nA critical component of this data management approach is the \nPegasus Lite workflow engine. The Pegasus Mapper does \nworkflow level reasoning and optimizations, but delegates a set \nof runtime decisions about a subset of the tasks in the workflow \nto Pegasus Lite. Pegasus Lite runs on the remote compute node \nto manage the execution of its tasks. The mapper provides \ninformation required for Pegasus Lite to transfer the required \ndata, such as the location of data on the data staging sites, and \ncredentials to access the data. The decision about where to \nexecute a Pegasus Lite job is done at runtime, based on \nresource availability. \nPegasus Lite uses local information to manage its set of \ntasks. It discovers the directory in which to execute the tasks, \npulls in data, runs the tasks and stages out data back to the \nstaging site. Pegasus Lite detects the environment and available \ntransfer tools on the system, executes the transfers efficiently \nwith error detection and retries. It can use a variety of data \ntransfer protocols including: S3, GridFTP, SRM, iRODS, \nHTTP, and SCP. After execution it provides provenance \ninformation to the workflow management system on the submit \nhost. \n Pegasus Lite performs the following actions: \n1. Discover the best working directory on the local disk. The \ndecision is based on space requirements and hints from \nthe environment, such as advertised tmp/scratch spaces. \n2 Prepare the node for executing the unit of work. This \ninvolves determining whether any supporting software nneeds to be fetched, such as the Pegasus WMS worker \npackage, which includes the pegasus-transfer tool that is \nused to get and put data from/to data staging site. \n3. Use pegasus-transfer to stage in the input data to the \nworking directory \(created in step 1 s pegasus-transfer to stage out the output data to the \ndata staging site. \n6. Send provenance information to Pegasus WMS. \n7. Remove the working directory created in Step 1. \n \nFigure 5: Workflows on OSG using SRM as the data staging site. \n31\nHaving a notion of a data staging site as intermediate storage \nfor the workflow that is decoupled from the execution site, and \nthe introduction of Pegasus Lite, gives Pegasus a lot of nflexibility in the computing configurations that can be used. \nWe now give a brief overview of the most common \nconfigurations supported. \n1 OSG  over \n100 universities and national labs, and consists of small and \nlarge campus clusters that provide software and services. On \nOSG it is common to use a provisioner, such as GlideinWMS \n[25], [26] to create compute resource overlays across many \nOSG sites, and use late binding for the jobs. The infrastructure nprovided by the Open Science Grid does not provide a shared \nfile system. Instead, OSG provides dedicated high \nperformance data-staging infrastructures, like SRM [10] \nbacked by GridFTP, for the jobs to utilize at runtime. These \ninfrastructures are not always directly co-located with the \ncomputational resources, but have high bandwidth and can be \nused to serve a large amount of files to the compute nodes. \nThe data flow for the workflows executing on OSG is \nillustrated in Figure 5. In this setup, the data stage-in jobs are \nadded by the Pegasus Mapper to the executable workflow, to \nretrieve the input data from multiple input storage sites and \nstore them on a SRM server. The SRM server serves as the \ndata staging site for the workflows. The compute jobs in the \nworkflow are dynamically matched with available worker \nnodes at runtime by the OSG provisioning tools [25], [26]. \nThe Pegasus Lite instances that start up on the worker nodes \nare responsible for retrieving input data from the SRM server, \nexecuting compute tasks and pushing the output files back to nthe SRM server. The stage-out jobs added by the Pegasus \nMapper transfer the output files for the workflow to the output \nobject store specified by the user. \n2 scalable and highly available \nobject stores such as S3[8] that provide a well-supported \nscalable storage infrastructure. However, this provides a data \nmapping challenge for the workflow management system. A \ncommon use case is to bring in data from the scientist’s home \ninstitution, and use the cloud object storage for 


storing all the \nworkflow datasets \(input, intermediate and output files deployment.   \nIn the cloud, users can choose to let Pegasus WMS stage-in \nthe input from different object stores \(can be present outside of \nthe cloud in the workflow. When Pegasus Lite starts the \njobs on the cloud node, the lightweight engine retrieves their ninput files from the object store in the cloud. The intermediate \nfiles are stored back in the cloud object store [8] by Pegasus \nLite. If desired, Pegasus can stage the output files to storage \noutside the cloud, or leave the data where it is. \n3 nsupercomputers, with a thin layer of grid services providing \naccess to job schedulers and storage systems Some XSEDE \nsystems such as TACC Ranger and NICS Kraken [27] do not \nprovide large amounts of local disk storage. Instead they \nprovide a Lustre parallel file system [1], [2] as shared scratch \nstorage for the whole cluster. On such systems a common use \ncase is to stage-in the input data to the shared file system and \nuse it to provide POSIX access for the scientific codes in the \nworkflow. Figure 7 illustrates such a deployment In this case, \nthe data staging site is co-located with the compute site and we \nrely on the grid storage interface XSEDE sites provide, such \nas GridFTP, to place and retrieve data from the shared file \nsystem. \nThe placement of the data on the shared file system is \nmanaged by the data stage-in jobs added by Pegasus to the nexecutable workflow. Alternatively, users can choose to pre-\nstage large datasets to the shared file system out of band and \nthe data stage-in jobs will create symbolic links in the \nworkflow’s working directory. \nVI EXPERIMENTS \nThe goal of this work has been to provide an easy to use \nsolution to run data intensive workflows in a variety of \nenvironments. The goal was not to improve workflow \nperformance but rather to enable the application to take \nadvantage of a number of different large-scale infrastructures \nfor their data and compute management needs. In fact the \nincreased flexibility on the placement of jobs by using a \nremote data staging site can be at the expense of the workflow \nruntimes, by increasing the amount of time the workflow \nspends doing data transfers. How much extra time will be \nrequired, and if it is even noticeable by the user, depends on \nthe structure of the workflow, the amount of data which needs \nto be staged, the data access pattern, and the performance of \nthe data staging site. \n \nFigure 7: XSEDE with shared file system as the data staging site  \n \nFigure 6. Workflows in EC2 with S3 as the data staging site. \n32\nTwo workflow experiments were performed to determine \nwhat impact, if any, using a data staging site has on workflow nruntimes. The two workflows were chosen to have different \ncharacteristics: one I/O-intensive workflow and one CPU-\nintensive workflow. The workflows were run on Amazon EC2 \n[28] using 10 instances. One m1.xlarge instance was used as a \ndedicated NFS server, one c1.xlarge instance was used as a \ndedicated submit node, and 8 c1.xlarge instances were used as \ncompute nodes to run jobs. All instances had software based \nRAID1 across 4 ephemeral disks in order to maximize local \ndisk I/O performance. On the NFS server, the RAID1 file \nsystem was exported as an NFS share, and on the rest of the \nmachines the RAID1 file system was used for job working ndirectories. \nThe workflows were first executed in a shared file system \nsetup, for which the workflows were configured to read/write \ndirectly from/to the NFS file system as described earlier in \nFigure 7. The workflows were then run on the same set of \ninstances, but with data staging configured to use S3 as shown \nin Figure 6. Each workflow was run 3 times for each \nconfiguration and the runtimes from the 3 runs were averaged ntogether. All input data was pre-staged to S3, and S3 was also \nindicated as the output site. While setting up the experiments, \nour predictions were that the I/O intensive workflow would \nrun less efficiently on S3 and that we would not see much of a \ndifference between NFS and S3 for the CPU intensive \nworkflow. \nThe I/O intensive workflow we used was Montage [13]; an \nastronomy image application for computing mosaics of images nfrom various sky survey instruments, such as the Spitzer \ntelescope. For this experiment, we choose to run an 8 square \ndegree patch of the 2MASS dataset, which is a fairly large \nMontage workflow consisting of 12,757 tasks and 7.8 GB of \ninput images. Most of the tasks in this workflow take one or \nmore input images, perform a operation to re-project or \ncombine images, and write an output image. This perpetual \nreading and writing of the images is what makes Montage I/O \nintensive. During the workflow execution using S3, we \nobserved a total of 66 GB written, and a total of 101 GB read \nfrom S3. The runtimes from our Montage experiment for can nbe found in Table 1. \nThe Wall time is the time the workflow took from start to \nfinish as seen from the user’s point of view. We can see that as \nexpected the S3/local disk executions was longer than the \nS3/NFS run \(129 min vs 70 mins  compute nodes. The kickstart \nrecord contains runtime provenance information about the task \nsuch as the duration on the remote node, exit code and other \nuseful debugging information. The Cumulative Kickstart \(CK ntime is the sum of all the task runtimes from the kickstart \nrecords. The Cumulative Kickstart time for the S3, 220 \nminutes, includes the computation and POSIX I/O time \nagainst a fast local filesystem, and can 


therefore be considered \nto be the optimal number for the computations. The relatively \nhigh CK time for the NFS case shows the poor performance of \nNFS for this application, which has an overhead of 701 \nminutes over the S3 case.  \nThe Cumulative job time is the sum of all the job runtimes \nas seen by HTCondor \(the workflow job scheduler jobs read in input data from the \nshared filesystem and write out to the shared filesystem. \nHowever, jobs are more complex in the S3 case. They are \nmade up of not only the Kickstart wrapped tasks, but also \nPegasus Lite steps such as data transfers to/from S3. The \nruntime of the job seen by HTCondor on the submit host is \nthus the sum of kickstart time and the time for Pegasus Lite \ndata transfers for the job. Therefore, the overhead of the S3 \ncase is the difference between the Cumulative job time and the \nCumulative Kickstart time, which is 976 minutes. Even though \nthese overheads only differ by 39%, the overall wall times, 70 \nand 129 minutes show an increase of 84%. The reason for this \ndifference is the structure and the distribution of the runtimes nof the Montage workflow. Data access patterns, and the effect \nof data staging, are different for the different transformations \nin the workflow. The second half of the workflow is where the \nre-projected background corrected, and scaled images are \nmosaicked together, and many of these jobs operate on a large nnumber of inputs. Any increase in data access times in this \npart of the workflow can significantly increase the overall \nworkflow wall time. For example, due to the large number of \ninputs, the mAdd job, which is on the critical path of the \nworkflow, took 3 times as long in the S3 case as in the NFS \ncase. \nFor the CPU-intensive workflow experiment we choose a \nRosetta [30] workflow. Rosetta is a macromolecular structure nmodeling code. Our experiments used a Rosetta workflow that \ncontains 200 protein-folding simulations. The tasks in this \nworkflow are CPU-intensive, have no data dependencies \nbetween tasks, and all require the same reference database \nmade up of 477 files. Because Rosetta is CPU intensive and \njust a small amount of I/O is taking place, we expected the \nruntimes to be about the same regardless of data staging \napproach. The run times for the Rosetta workflow can be \nfound in Table 2, which shows that the S3 wall times are \nsignificantly longer than the NFS times. The explanation for \nthe slowdown in the S3 case is the reference database and the n NFS -sharedfs \(minutes minutes nCumulative \nJob time 2936 4557 \nTable 2. Average run times for Rosetta workflow.  \n NFS – sharedfs \(minutes nS3 - nonsharedfs \n\(minutes 1196 \nTable 1. Average run times for the Montage workflow \n33\ndata access pattern. Size wise, the database is a relatively \nsmall 391 MB, but it is split into 477 separate files. If the \ndatabase were contained in one file, it could be quickly \ntransferred to/from S3. However, because it is split, the \nworkflow needs to issue a separate get operation to fetch each \npiece of the database from S3, which adds a significant \namount of overhead to the workflow \(both in the walltime and \nthe cumulative job time – which includes the S3 data transfers \nto the local filesystem workflow in the S3 case \nwithout task clustering when compared to NFS.  \nIn contrast to the Montage experiment, where the large \nfiles and continuous I/O strained the NFS server, the light data \naccess pattern of Rosetta, and the fact that the same files are \nread over and over again, which increases OS level file system \ncaching, makes the Rosetta workflow work very well with \nNFS as can be seen from the similar Cumulative Kickstart \ntimes for Rosetta. \nVII. RELATED WORK  \nThere are many approaches, some similar and some noutside the scope of this paper, for a workflow management \nsystem to handle data. Swift [31] is using a model similar to \nwhat is described above in using a shared or local file system \nat a site as cache, and with the submit host acting as the data \nstaging site. The system first selects a compute site to run a \njob, and then pushes the data from the submit host to a file \nsystem at the site. The job is run, and outputs are staged back \nthe submit host. Intermediate files can be left on the shared file \nsystem for subsequent jobs Our approach is more flexible as \nthe data sites \(input, output, and intermediate submit host, and use a variety of different protocols. \nOther workflow systems like Kepler [32], Triana [33 and \nTaverna [34] focus on streaming workflows or workflows that \nconsist of components that call out to other web services. They \nhave graphical user interfaces that allow users to compose \nworkflows composed of different components and are \nnormally not used to execute workflows that access large \ndatasets. However both rely on the user to specify data \nmanagement steps in the workflow, providing limited data \nmanagement automation. \nKepler [35] introduced a MapReduce actor that allows it to \nexecute composite workflows where some tasks use the Map \nReduce [36] paradigm. Hadoop [37] is often used for running \ndata intensive applications, and it does provides a somewhat \nPOSIX-like file system, allowing random reads, but only non-\nrandom writes. However, in this case the Hadoop \ninfrastructure is responsible for the partitioning and ndistributing the input data to the individual nodes. Our \napproach deals with workflows that need to run on a 


variety of \ndifferent execution environments, with codes that are not \nMapReduce. \n On XSEDE, distributed file system like GPFS-WAN [38] \nhas been available for the jobs to access data. Distributed file \nsystems do provide POSIX access to remote input and output \nfiles. However, our experience with large datasets on XSEDE nindicates that it is better to stage the large datasets to the local \nparallel file system of the XSEDE cluster and let the jobs \naccess the datasets from there. Chirp [39] is another global \ndistributed file system that has been proposed for grid \nenvironments. To access files a Chirp server needs to be \nlaunched on the input storage servers and the jobs then can \naccess the input data when launched via Parrot [40] that traps \nIO system calls and redirects to the Chirp Server.  A chirp \ndeployment can be incorporated in our model, where Pegasus \nLite can launch the job-using Parrot. \nThis paper has been mainly focused on flexibility of where \ndata is placed and computations are placed. Much research has \nbeen done in focused strategies and optimized data placement \nin specific environments. Raicu et al [41] have explored use of \na data diffusion approach where the data resides on a GPFS \npersistent storage. They employ various caching strategies at \nthe executor nodes provisioned by Falkon [42] to provide \nbetter performance than the shared file system approach based \non data locality of the workloads. Chervenak et al. [43] have \ninvestigated data placement for scientific workflows running \nunder Pegasus by measuring the influence of data pre-staging. \nAlspaugh [44 used an open source rule engine called Drools \nto integrate with GridFTP and Globus RLS [45] for processing ninput data for workflows.  \nVIII. CONCLUSIONS AND FUTURE WORK  \nIn this paper we have described how workflow nmanagement systems can use object stores to execute large, \ndata-intensive workflows used in Big Data problems. We have \ndescribed two general approaches: one that exclusively uses \nobject stores to store all the files accessed and generated \nduring a workflow, and another that relies on the shared file \nsystem for caching the intermediate data sets. The data \nmanagement challenge for the workflow system is to support \nboth of these configurations and provide scientists the \nflexibility of using either approach. We then described the \nimplementation of both approaches in the Pegasus Workflow \nManagement System. Our solution involves decoupling the \nintermediate data storage site \(the data staging site an autonomous component \ncalled Pegasus Lite that is able to retrieve datasets when a job \nstarts on a remote worker node. We have implemented this \nsolution in Pegasus version 4 and it is now used in production \nto execute workflows in a variety of execution environments, \nranging from traditional supercomputing environments with a \nshared file system to dynamic environments like the Open \nScience Grid that only offer remote object stores to store large \ndatasets. \nPegasus Lite currently retrieves the input data for the job nfrom a remote object store. However, the input data can be \nlocally available on the compute nodes. This scenario is \ncommon when workflows are executed on dedicated \napplication-specific compute infrastructure such as the LIGO \nData Grid [46], where the data is actively replicated out of \nband on the various grid sites. We plan to introduce pluggable \nlocal discovery capabilities to Pegasus Lite that will allow it to \ndiscover files locally on the node before retrieving them from \na remote object store. Having the flexibility of data and \n34\ncomputation placement opens up the ability to study a variety \nof workflow scheduling and data placement algorithms. We \nplan to conduct more research in that direction. \nIX. ACKNOWLEDGMENT \nThe National Science Foundation under the OCI SDCI \nprogram grant #0722019 and OCI SI2-SSI program grant \n#1148515 funds Pegasus WMS. We would like to thank \nGaurang Mehta, Weiwei Chen and Jens-S. Vöckler for \nproviding input and feedback during the implementation of the \napproach described in the paper. The use of Amazon EC2 \nresources was supported by an AWS in Education research \ngrant. \nX. REFERENCES \n[1] “XSEDE - Extreme Science and Engineering Environment,” 2012, \nAvailable: http://www.xsede.org. .  \n[2]  Catlett Charles, “TeraGrid Analysis of Organization, System \nArchitecture, and Middleware Enabling New Types of Applications.,” \nIOS Press, 2007.  \n[3] “Amazon Web Services,” Available: http://aws.amazon.com/. .  \n[4]  J. Diaz et al FutureGrid Image Repository: A Generic Catalog and \nStorage System for Heterogeneous Virtual Machine Images in Cloud \nComputing Technology and Science \(CloudCom 560 –564.  \n[5] “FutureGrid: a distributed testbed, exploring possibilities with Clouds, \nGrids and High Performance Computing,” 2012, Available: \nhttps://portal.futuregrid.org/. .  \n[6]  M. Altunay et al., “A Science Driven Production Cyberinfrastructure–\nthe Open Science Grid,” J. Grid Comput., vol. 9, no. 2, pp 201–218, \nJun. 2011.  \n[7]  E. Deelman et al., “Pegasus: A framework for mapping complex \nscientific workflows onto distributed systems,” Sci. Program., vol. 13, \nno. 3, pp. 219–237, Jul. 2005.  \n[8] “Amazon Simple Storage Service,” Available: \nhttp://aws.amazon.com/s3/. .  \n[9]  W. Allcock et al., “The Globus Striped GridFTP Framework and \nServer,” Washington, DC, USA, 2005, p. 54–.  \n[10]  Abadie Lana and Badin Paolo Storage Resource Manager version 2.2: \ndesign, implementation, and testing experience.,” Proceedings of nInternational Conference on Computing in High Energy and Nuclear \nPhysics \(CHEP 07  


and R. Müller-Pfefferkorn, “Managing large datasets with \niRODS - A performance analysis,” in Computer Science and \nInformation Technology \(IMCSIT 654.  \n[12]  A. Rajasekar et al., “iRODS Primer: Integrated Rule-Oriented Data \nSystem,” Synthesis Lectures on Information Concepts, Retrieval, and \nServices, vol. 2, no. 1, pp. 1–143, Jan. 2010.  \n[13]  J.C. Jacob et al., “Montage: a grid portal and software toolkit for \nscience-grade                astronomical image mosaicking,” CoRR, vol. \nabs/1005.4454, 2010.  \n[14]  R. Graves et al., “CyberShake: A Physics-Based Seismic Hazard Model \nfor Southern California,” Pure and Applied Geophysics, vol. 168, no. \n3, pp. 367–381, 2011 n[15]  G. Juve et al., “An Evaluation of the Cost and Performance of Scientific                \nWorkflows on Amazon EC2,” Journal of Grid Computing, vol. 10, no. \n1, pp. 5–21, 2012.  \n[16] “Amazon S3 Pricing Available: http://aws.amazon.com/s3/pricing/. .  \n[17]  E. Deelman et al., “Managing Large-Scale Workflow Execution from \nResource Provisioning                to Provenance Tracking: The \nCyberShake Example presented at the e-Science, 2006, p. 14.  \n[18]  S. Callaghan et al., “Metrics for heterogeneous scientific workflows: A \ncase study                of an earthquake science application,” IJHPCA, \nvol. 25, no. 3, pp 274–285, 2011.  \n[19]  D. Thain et al., “Distributed computing in practice: the Condor \nexperience Concurrency - Practice and Experience, vol. 17, no. 2–4, \npp. 323–356, 2005.  \n[20]  I.T. Foster et al., “The Anatomy of the Grid: Enabling Scalable Virtual \nOrganizations,” IJHPCA, vol. 15, no. 3, pp. 200–222, 2001 n[21]  A.L. Chervenak et al., “Wide area data replication for scientific \ncollaborations,” IJHPCN, vol. 5, no 3, pp. 124–134, 2008.  \n[22] “Condor DAGMan \(Directed Acyclic Graph Manager nhttp://research.cs.wisc.edu/condor/dagman/. .  \n[23]  G. Singh et al., “Optimizing workflow data footprint Scientific \nProgramming, vol. 15, no. 4, pp. 249–268, 2007.  \n[24]  A. Ramakrishnan et al., “Scheduling Data-IntensiveWorkflows onto \nStorage-Constrained                Distributed Resources,” presented at the nCCGRID, 2007, pp. 401–409.  \n[25]  G. Juve et al., “Experiences with resource provisioning for scientific nworkflows using Corral,” Sci. Program., vol. 18, no. 2, pp. 77–92, \nApr. 2010.  \n[26]  I. Sfiligoi glideinWMS—a generic pilot-based workload management \nsystem,” Journal of Physics: Conference Series, vol 119, no. 6, p. \n062044, Jul. 2008.  \n[27] “Kraken System Specifications,” Available nhttp://www.nics.tennessee.edu/computing-resources/kraken/. .  \n[28] “Amazon EC2 Instance Types,” Available nhttp://aws.amazon.com/ec2/instance-types/. .  \n[29]  J.S. Voeckler et al., “Kickstarting remote applications,” in 2nd \nInternational Workshop on Grid Computing Environments, 2006.  \n[30]  K. Kaufmann et al., “Practically Useful: What the Rosetta Protein \nModeling Suite Can Do for You,” Biochemistry, vol. 49, no 14, pp. \n2987–2998, Mar. 2010.  \n[31]  Y. Zhao et al., “Swift: Fast, Reliable, Loosely Coupled Parallel nComputation,” in Services, 2007 IEEE Congress on, 2007, pp. 199 –\n206.  \n[32]  I. Altintas et al., “Kepler an extensible system for design and execution \nof scientific workflows,” in Scientific and Statistical Database \nManagement, 2004. Proceedings. 16th International Conference on, \n2004, pp. 423 – 424.  \n[33]  A Harrison et al., “WS-RF Workflow in Triana,” Int. J. High Perform. \nComput. Appl., vol. 22, no. 3, pp 268–283, Aug. 2008.  \n[34]  P. Missier et al., “Taverna, Reloaded.,” in SSDBM, 2010, vol. 6187, pp. \n471–481 n[35]  J. Wang et al., “Kepler + Hadoop,” 2009, pp. 1–8.  \n[36]  J. Dean and S. Ghemawat, “MapReduce simplified data processing on \nlarge clusters,” Commun. ACM, vol. 51, no. 1, pp. 107–113, Jan. 2008.  \n[37 Apache Hadoop,” Available: http://hadoop.apache.org/. .  \n[38]  P. Andrews et al., “Massive High-Performance Global File Systems for \nGrid computing,” in Proceedings of the 2005 ACM/IEEE conference \non Supercomputing Washington, DC, USA, 2005, p. 53–.  \n[39]  D. Thain et al., “Chirp: A practical global file system for cluster and \ngrid computing,” Journal of Grid Computing.  \n[40]  D. Thain and M. Livny, “Parrot: An Application Environment for Data-\nIntensive Computing,” Journal of Parallel and Distributed Computing \nPractices, pp 9–18, 2005.  \n[41]  I. Raicu et al., “Accelerating large-scale data exploration through data \ndiffusion,” in Proceedings of the 2008 international workshop on \nData-aware distributed computing, New York, NY, USA, 2008 pp. \n9–18.  \n[42]  I. Raicu et al., “Falkon: a Fast and Light-weight tasK executiON \nframework,” in Proceedings of the 2007 ACM/IEEE conference on \nSupercomputing, New York, NY, USA, 2007, pp. 43:1–43:12 n[43]  A.L. Chervenak et al., “Data placement for scientific applications in \ndistributed environments,” in GRID2007, 2007, pp. 267–274.  \n[44]  Sara Alspaugh et al., “Policy-Driven Data Management for Distributed nScientific Collaborations Using a Rule Engine,” Austin, 2008.  \n[45]  A.L. Chervenak et al., “The Globus Replica Location Service: Design \nand Experience,” IEEE Trans. Parallel Distrib. Syst., vol. 20, no. 9, \npp 1260–1272, 2009.  \n[46]  E. Deelman et al., “GriPhyN and LIGO, Building a Virtual Data Grid \nfor Gravitational Wave Scientists,” presented at the HPDC, \n2002, p. 225–.  \n \n35\n 


by: ?f\(P,Q PAQ?B PAQ||2F ? 2Tr PAQBT PAQQTATPT PAQB\nT PAQ?B function, f P,Q PAQ?B derivatives, and\nthe invariant property of the trace under cyclic permutations\nTr \(PAQQTATP ATPTPAQQT  PAQ||2F ? 2TrPAQBT ATPTPAQQT PAQB\nT PAQ?B faug , is\n?\(1TP1 P its\nderivative and set it to 0:\ndfaug\nd?P\n=\nd\(Tr{P\(k+1 P\(k+1 k+1 P\n\(k+1 6 k+1 k k P\(k+1 P\(k+1 k+1 k k PAQB\nT Tr \(P\(k PAQ 7 7 6 search point of view. The computations\nare symmetric for ?Q, and, thus, omitted.\n398\n 


  11    Project Management 17.2 M Project Systems Engineering 16.9 M Mission Assurance 15.0 M Science $11.3 M Payload System 65.9 M Flight System 211.3 M Mission Operations Preparation 16.8 M Ground Data Systems 14.9 M ATLO $19.4 M Education and Public Outreach 1.2 M Mission and Navigation Design 10.0 M Development Reserves \(30 119.9 M Total 520.0 M  Table 6 Development Cost for Phases A-D  Payload Systems Cost  The cost of the payload system is primarily the instrumentation needed to ach ieve the science objectives and ends up being a relatively small fraction of the total cost, as presented in Table 7     High Resolution Multispectral Imager 20.4 M Thermal IR Spectrometer 12.0 M Dust Secondary Ion Mass Spectrometer 26.8 M UV Imaging Spectrograph 6.0 M Impactor capsules \(2 0.7 M Total 69.5 M  Table 7 Payload and Instrumentation Cost  Additional science instruments include Radio Science and Wide Angle Camera - not included in instrument cost calculation  Flight Systems Cost  The flight system, including th e entire spacecraft bus, is a significant fraction of our total budget as summarized in Table 8    Power $40.0 M C&DH $13.8 M Telecom $19.0 M Structures \(includes Mech. I&T 24.3 M Thermal $9.9 M Propulsion $20.1 M ACS $32.5 M Harness $2.1 M S/C Software 21.5 M Total 183.2 M  Table 8 Flight System Cost Summary  Operations Cost \(Phase E-F  Operation costs, including data analysis, is provided in Table 9       Project Management 9.1 M Project Systems Engineering 0.0 M Mission Assurance 0.5 M Science $19.8 M Mission Operations 51.1 M Ground Data Systems 7.6 M Education and Public Outreach 3.7 M Total \(15 91.8 M 


  12  Table 9 Operation Costs  7. Conclusions The SHOTPUT mission , its unique trajectory and potential encounter with six different small bodies will provide a novel view of the composition of the solar system. The science return from the mission will help answer questions on formation, composition and evolution of small bodies in our local neighborhood In addition, the team has proposed a mission that is within budget based on heritage instruments satisfying the decadal survey requirements. The opportunity for spectacular science return on this rare trajectory should not be missed The innovative SHOTPUT mission is truly one of a kind Acknowledgements The authors would like to thank Anita Sohus, Amber Norton and JPL Team X for their contributions to this work. Parts of this research were carried out at the Jet Propulsion Laboratory, California Institute of Technology, under a contract with the National Aeronautics and Space Administration References 1 o mmit t ee o n New Op po rtu n ities in  So lar System  Exploration: An Evaluation of the New Frontiers Announcement of Opportunity, \224 Opening New Frontiers in Space: Choices for the Next New Frontiers Announcement of Opportunity,\224 National Research Council, 2008   Exploration Survey, Space Studies Boa r d Division on Engineering and Physical Sciences, \223New Frontiers in the Solar System 224 National Research Council National Academies Press, 2003  3 A. M o rb id elli, H. F. Lev i so n, K. Tsiganis and R. Gomes 223Chaotic capture of Jupiter\222s Trojan asteroids in the early Solar System,\224 Nature vol 435, pp 462-465, 26 May 2005   C h e n g, \223Near Eart h As teroid Rendezvous: Mission Overview,\224 Space Sciences Revi ew, vol. 82, pp 3-29, 1997   M A Bar u cci, D P Cr uikshank S Mot t ola, M Lazzarin, \223Physical Properties of Trojan and Centaur Asteroids,\224 Asteroids III, pp 273-287, 2003  6  W.M. Grundy, J.A. Stansberry, K.S. Noll, D.C Stephens, D.E. Trilling, S.D Kern, J.R. Spencer,, D.P Cruikshanf, H.F. Levison  223The orbit, mass, size, albedo and density of \(65489\/Phorcys: A tidally-evolved binary Centaur,\224 Icaraus, vol. 191, pp 286-297, 2007    D.P C r ui ks han k et al  223C onst r ai nt s o n t h e C o m posi t i on of Trojan Asteroid 624 Hektor,\224 Icarus vol. 153, Oct. 2001 pp. 348-360   J H o rne r et al 223C onst r ai n t s fr om deut eri u m on t h e  formation of icy bodies in the Jovian system and beyond,\224 Planetary and Space Science vol. 56, Nov. 2008, pp. 15851595   M F  A\222 He arn M J S. Bel t on A  Delam e re, a n d W H Blume. Deep Impact: A Large-Scale Active Experiment on a Cometary Nucleus. Space Science Reviews, 117\(1 1\22621, 2005  10 Y.G. Fern\341n d e z, S.S. Sh eppard, and D.C. Jewitt.  The Albedo Distribution of Jovian Trojan Asteroids.  The Astronomical Journal, vol. 126, Sep. 2003, pp. 1563-1574  1 F. M a rza ri and H Sch o l l C a pt ure o f Tro j a n s by  a Growing Proto-Jupiter.  Icarus, vol. 131, Jan. 1998, pp. 4151  1 F. M a rc hi s et al S 20 06 6 24  1.  I A U C i rc., 8 7 3 2 1  2006  1 Ti scare n o M S an d R  M a l hot ra T h e Dy nam i cs o f  Known Centaurs.  The Astronomical Journal, vol. 126, Dec 2003, pp. 3122-3131   i A. et al. Sour ce regions and time scales for the delivery of water to Earth. Meteoritics & Planetary Science, vol. 35, Nov. 2000, pp. 1309-1320             


  13 B IOGRAPHY  JPL Planetary Science Summer Sc hool August 2008 class   Figure 9 SHOTPUT Mission Design Team   


  14  
 


Available Array Energy 60297 W-hr Battery Recharge Energy Losses 93 W-hr Shunt Energy Losses 20% Battery W-hr 187 W-hr Remaining Electrical Energy 60017 W-hr Power Conversion Losses 80% Efficiency 12003 W-hr Harness Losses \(4 Available Diurnal Load Energy \(CBE Average Load Energy Supported 67.9 W Array Area 0.20 m2 12 specifically the seismometer and magnetometer continuously while other instruments such as the heat flow probes may operate intermittently. The retroreflector does not require any thermal control resources. Telecom between the Earth and the hub or from the remote units to the hub would be during the lunar day only  Description of the Design  A thermal blanket \(MLI Silver-Teflon would be used to moderate the temperature variation of the surface. The MLI and the lunar material thermal conduction properties could be used to insulate the different ALGEP elements from the external environment  The Mars Exploration Rover thermal switch and a thermal radiator with thermal louvers would be used to reject the internally generated thermal energy. The MER Thermal Switch has the ability to transfer up to 11 W. For the hub three or four switches may be necessary, depending on the RF power output  Potentially a small electric heater/thermostat system may be needed \(on the order of 10% of the dissipated electrical energy example, the seismometer, which dissipates 1.5 W, may need a 0.15 W heater. A detailed thermal analysis would be necessary to further assess this need  The ALGEP hardware location would be dictated by the science requirements. Each ALGEP element could be either positioned on the surface or buried.  An example of a buried element would be the seismometer, while the hub could be surface mounted. In either case a surface blanket would be required. The surface blanket would minimize the lunar temperature variation, from a range of -173 to ~127  C to a range under the blanked between approximately -73 to 27  C. Initial calculations indicate that the blanket extending about 0.5 m beyond the edge of the instrument or hub would provide the temperature control of the lunar surface required to minimize the temperature variation. For the lunar night, a small electric heater may be needed to keep the ALGEP hardware within specified temperature limits  For polar region operation it is assumed that the ALGEP could operate at all times as the solar arrays would always have incident solar energy and could provide electrical power for operations.  Thus with electrical power for the instruments and hub, the thermal radiator and louvers could maintain the ALGEP hardware within specified temperature limits. Initial calculations indicate that the current conceptual thermal control design does not require electric heaters for this location  Design Rationale  The design uses MLI, thermal conduction control, electric heaters, thermal radiators thermal louvers, and a deployed surface blanket to provide thermal control to maintain the remote units and hub within specified temperature limits. The surface blanket would 


specified temperature limits. The surface blanket would minimize the temperature variation of the surface, and electric heaters would provide makeup thermal energy  Risk  The thermal subsystem design is a low to moderate risk element, as the hardware used has extensive flight experience. Although this system would be on the surface of the Moon, the environment would be space-like, with the  Figure 6  ALGEP avionics block diagram showing the power and command and data handing  interface. This is a low-power design to enable data collection during lunar night at the remote units. The hub  contains the same avionics package but does not interface with an instrument  13 exception of the infrared heating of the lunar surface therefore the space qualified thermal control hardware could provide thermal control for this mission  Command and Data Handling Subsystem Design Requirements  The ALGEP controller is designed to meet the six year mission lifetime requirement stemming from the science objectives flowing down to the mission requirements and has a technology cutoff of 2016 \(assumes a 2020 launch interface to the science instrument and the UHF radio.  The controller for the hub interfaces to the UHF and S-band radios. Each type of controller would be single string  Design Assumptions  All selected electronic parts for the controller have a path to flight hardware with a technology cutoff of 2016. There would be one ALGEP hub that has a bi-directional S-band link to Earth and a UHF receiver link to the remote instrument units. There would be four ALGEP remote units that have UHF transmitters to link to the ALGEP hub. The controllers would have an operating temperature range: -20  C to 35  C. The total ionizing dose of radiation would be 2 krads for the mission  Description of the Design  Both controller designs would incorporate low-powered Field Programmable Gate Arrays FPGAs devices and I/O drivers.  Portions of the existing MultiMission System Architecture Platform \(MSAP Engineering Unit \(REU IP provide the mission clock and alarm clock logic.  Both the hub and remote unit controllers would capture engineering data regarding temperatures, currents and voltages. Figure 6 provides an overview of the command and data handling and power subsystem architectures.  The remote units would be supplied with 2 Gb of memory and the hub would have 5 Gb of memory  Design Rationale  A low-powered avionics architecture would be achieved by developing a stand-alone controller capable of operating at various power levels. In the lowest power configuration only the mission clock and alarm clock logic would be active. Other logic, analog and I/O functions would be power strobed in the off mode during this very low-power mode. Science and engineering data would be stored in non-volatile memory elements that retain their data in the power-off mode  Risk  The controller requires engineering development to obtain the low-powered mode required for night operation However, it has been designed to incorporate components with flight heritage. A lower frequency oscillator would be used to reduce power  Telecom Subsystem 


Design Requirements  The telecom subsystem is designed to return 3.4 Gb of stored data every 16 days during lunar night in addition to 1.2 Gb of additional data collected each 24 hour period during daylight. This translates into a minimum direct-to-Earth return data rate of ~50 kbps for an 8 hour pass each Earth day for 16 days of sunlight. The subsystem must operate down to a temperature of -20  C and survive non-operational temperature of -50  C. The telecom subsystem would support two-way communications between the hub and the DSN network. It would also support two-way communications between the hub and each of the remote instrument packages on the surface. There would be a minimum 3 dB margin for the direct-to-Earth DTE  Design Assumptions  The telecom subsystem is assumed to be a single string design. The hub would have an S-band radio and antenna for two-way communications with a DSN 34 m ground station. The nominal downlink rate would be 120 kbps and the uplink rate would be 2 kbps. The surface links would be at UHF. The forward link data rate would be 8 kbps and the return rate would be 256 kbps. The maximum range for the surface links would be 100 m. All of the surface links would have line-of-sight between the units. It is assumed that the astronauts would point the Sband antenna towards Earth, within 5  of the center of Earth. This should be relatively easy to do as 5  is a very loose pointing requirement and the uplink/downlink would be marginally affected if the pointing is off by a little more than 5  A signal could be added which would use an uplink from the Earth to give a relative signal power to ensure the pointing requirement is met  Description of the Design  The telecom subsystem would use a commercial off-the-shelf S-band transponder \(L3 CXS-610 has a 5 W power amplifier and an S-band diplexer included This radio is used on GRAIL and a similar unit was used on Genesis. The diplexer would be connected to an S-band low gain antenna \(LGA be a 2-element S-band patch array with a boresight gain of 9 dB. It would be mounted on the end of one solar array on the hub and gimbaled to allow the astronaut to point it to the Earth  The hub communicates with each of the remote instrument units in UHF using a new UHF micro-transceiver. Each UHF microtransceiver would have a radio frequency output power of 50 mW. The UHF transceiver would use a halfduplex system meaning it would transmit and then listen However, it cannot do both at the same time. The UHF links would use a simple UHF monopole antenna, similar to the antennas flown on MER, and mounted on the top of the hub and remote units. The hub could only communicate with one remote unit at a time. Figure 7 shows the hub and remote unit telecom block diagrams  The S-Band telemetry link has a margin of 7.0 dB for a telemetry rate of 120 kbps into a 34 m beam waveguide ground station. The data rate could be increased to reduce 14 playback time. The surface link would have a margin exceeding 20 dB for a return data rate of 256 kbps. This includes a multipath loss allotment of 20 dB. The margin would be large because the range would be so small and all of the links would be line of sight  Design Rationale  Where available, the design of this subsystem uses heritage hardware. The UHF microtransceiver is a radio that is under development for the Mars program. It would be designed for low mass, low 


Mars program. It would be designed for low mass, lowpower and low temperature operation. The S-band antenna would be a smaller, simpler version of the antenna that flew on Deep Impact. Other antenna options would be available The UHF antennas have been flown on previous Mars lander/rover missions. There would be other alternatives for the S-band antenna and the UHF transceiver on the hub could use a larger power amplifier to talk to an orbiting asset as a backup to the S-band radio  Risk  The highest risk items for telecom would be the single string design for each element and six year design lifetime. However, the S-band radio has flight heritage. The UHF radios would be a new design but do not require new technology. They would be an engineering development 8. SYSTEM SUMMARY Mass Equipment List Table 5 shows a summary of the mass and power for each of the subsystems for the remote instrument units. The mass of one remote unit without the specified instrument is 26.6 kg with contingency specified at the subsystem level based on heritage. Table 6 shows a summary of mass and power by subsystem for the hub. The mass of the hub with contingency is 44.9 kg. Table 7 shows a mass summary for the entire package with appropriate contingencies added per the JPL  s Flight Project Practices and Design Principles Design Principles. The package totals 218.2 kg which includes four remote units, five instruments, one hub, and the carrier container\(s Table 5. Mass and power summary for remote units Remote Unit Mass CBE Contingency Total Power Power 14.3 kg 30% 18.5 kg 0.180 W 2 W Night /Day Thermal 2.0 kg 29% 2.5 kg 0 W Telecom UHF 0.2 24% 0.3 kg 2 W 40 W CDS 0.7 kg 30% 0.9 kg 1 W \(1/60th per hour 3 W Structure 3.4 kg 30% 4.4 kg 0 W Total x 1 unit 20.6 kg 29% 26.6 kg Diplexer S-Band Downconverter STDN command data to S/C CDS Pr oc es so r S-Band Exciter 9 dBi S-Band LGA UHF Downconverter Small UHF transceiver command data to S/C CDS 


to S/C CDS Pr oc es so r UHF PA UHF Monopole Command data to C&amp;DH Command dat  to C&amp;DH  Figure 7  Telecom block diagram for the S-band \(top bottom  units would be located on the hub while the remote units only contain a UHF system 15 9. OPERATIONAL SCENARIOS Daytime Operations During the day, the remote units and hub would be fully operational. The remote units would collect data from their instruments as specified by the science team and store it in the controller memory. Table 8 shows the data volume expected from each instrument. After 24 hours have passed the UHF telecom system on the hub is used to poll each of the remote units separately at the designated interval for the stored data. The hub then transmits the data direct-to-Earth using the S-band radio. This requires a maximum of eight hours at 50 kbps each day using the DSN 34 m antennas However, data rates as high as 120 kbps may be achieved reducing the downlink time. The hub has enough memory margin to accumulate data from all the instruments for three Earth days before it must downlink the data Nighttime Operations During nighttime operations, data collection at the remote units would be taking place. The magnetometer and seismometer collect data continuously. However, the seismometer operates at a reduced mode where the sampling rate is reduced to one-half of the daytime rate which has been deemed more than adequate by the science team. The remaining instruments collect data at various intervals that would be conducive to the science team  s current requirements. Telecom events would not be scheduled during the lunar night. The data accumulates in the controller memory over 16 Earth days \(~14 days at an equatorial location would be considered a worse case so two days have been added to be conservative data volume summary for each instrument during a 16 Earth day lunar night. When the sun comes up and the hub and remote units have sufficient power to run the telecom systems the hub polls each remote unit separately at a designated interval similar to operations during the day. The data would then be transmitted to Earth gradually over the next few days using the S-band radio Table 7. Mass summary for total package Unit Mass Contingency Mass + contingency 4 Remote Units 82.4 kg 29% 106.4 kg Hub 35.2 kg 27% 44.9 kg Instruments including cabling 17.3 kg 30% 22.5 kg Carrier Container\(s Total with heritage contingency 153.1 kg 29% 197.5 kg  System contingency  21.4 kg 14 Total Package  43% 218.9 kg Table 8. Instrument data volumes received at the hub over one Earth day in daylight operations Science Instrument Compressed Data Volume Received at Hub 


Volume Received at Hub Mb Seismometer 236 Magnetometer 58 Heat Flow Probe 2 Seismic Sounder 700 Instrument &amp; Hub Engineering Data 6 Total 1002 Hub Memory 5000 Margin 80  Table 6. Mass and power summary for hub Hub/Base Unit Mass CBE Contingency Total Power Power 14.3 kg 30% 18.5 kg 0.180 W 2 W Night /Day Thermal 13.4 kg 28% 17.2 kg 0 W Telecom UHF Telecom S-band 3.4 15% 3.9 kg 2 W 40 W CDS 0.7 kg 30% 0.9 kg 1 W \(1/60th per hour W \(day Structure 3.4 kg 30% 4.4 kg 0 W Total x 1 unit 35.2 kg 27% 44.9 kg 2.38 W avg at night  16 10. SUMMARY AND CONCLUSIONS The ALGEP modular design builds upon lessons learned from Apollo era ALSEP package and technology advances since that time. ALGEP meets the requirements of long lifetime survival while maintaining continuous operation of its instruments during the lunar night which can last up to 16 days at equatorial regions on the Moon. The package would be powered using solar arrays and batteries alone not requiring nuclear sources to supply power or maintain thermal control. This concept is feasible due to its lowpower operational mode at night The modular design and packaging scheme provides flexibility in deployment across all regions of the Moon including the farside pending the availability of an orbital communications asset. The relatively light ALGEP package could be accommodated on astronaut activity support vehicles, providing a method to distribute the packages across the Moon, ultimately gaining a Moon-wide understanding of lunar geophysical properties ACKNOWLEDGEMENTS This work was supported by the NASA Lunar Sortie Science Opportunities Program The work described in this publication was carried out at the Jet Propulsion Laboratory, California Institute of Technology under a contract with the National Aeronautics and Space Administration References herein to any specific commercial product process or service by trade name, trademark, manufacturer 


or otherwise does not constitute or imply its endorsement by the United States Government or the Jet Propulsion Laboratory, California Institute of Technology REFERENCES 1] NRC  Scientific Context for Exploration of the Moon   Washington D.C.: The Nat. Academies Press, 2007 2] Apollo 11 Prelim. Sci. Rept., NASA SP-214, 1969 3] Apollo 12 Prelim. Sci. Rept., NASA SP-235, 1970 4] Apollo 14 Prelim. Sci. Rept., NASA SP-272, 1971 5] Apollo 15 Prelim. Sci. Rept., NASA SP-289, 1972 6] Apollo 16 Prelim. Sci. Rept., NASA SP-315, 1972 7] Apollo 17 Prelim. Sci. Rept., NASA SP-330, 1973 8] ALSEP Termination Report, NASA RP-1036, 1979 9] NRC  New Frontiers in the Solar System: an Integrated Exploration Strategy  Decadal Survey D.C.: The Nat. Academies Press, 2003 10] International Lunar Network Science Definition Team Final Report, 2009 BIOGRAPHY Melissa Jones is a member of the technical staff in the Planetary and Lunar Mission Concepts Group at the Jet Propulsion Laboratory.  Current work includes development of small Lunar lander concepts and instrument packages to deploy on the Moon,  Report Manager for the Titan Saturn System Mission Outer Planets Flagship Mission study, and staffing various concept studies as a systems engineer on Team X, JPL  s mission design team.  Melissa graduated from Loras College with a B.S. in Chemistry and a Ph.D. in Space and Planetary Science from the University of Arkansas  Linda Herrell has a BA in math/computer science/languages \(University of Texas fluids and heat transfer \(City College of New York addition to analytical work in computer science and thermal and structural analysis, she has worked as both a payload \(instrument Earth orbiting \(Hubble Space Telescope, Earth Observing System \(EOS Cassini as Proposal Manager for several NASA science missions She currently serves as the Program Architect for NASA's New Millennium Program    Table 9. Instrument data volumes generated at the hub after 16 Earth day lunar night Science Instrument Compressed Data Volume Received at Hub Mb Seismometer 1980 Magnetometer 920 Heat Flow Probe 5 Seismic Sounder 0 Instrument &amp; Hub Engineering Data 72 Total 2977 Hub Memory 5000 Margin 40  17 Bruce Banerdt has been a research geophysicist at the California Institute of Technology's Jet Propulsion Laboratory since 1977, where he does research in planetary geophysics and instrument development for flight projects. He has been on science teams for numerous planetary missions 


on science teams for numerous planetary missions including Magellan, Mars Observer, Mars Global Surveyor and Rosetta. He was the US Project Scientist for the international Mars NetLander mission, for which he was also principal investigator of the Short-Period Seismometer experiment, and is currently the Project Scientist for the Mars Exploration Rovers. He led the Geophysics and Planetary Geology group at JPL from 1993-2005, and is the JPL Discipline Program Manager for Planetary Geosciences. He has held several visiting appointments at the Institut de Physique du Globe de Paris. He has a BS in physics and a PhD in geophysics from the University of Southern California  David Hansen is a member of the technical staff in the Communications Systems and Operations Group at the Jet Propulsion Laboratory. Current work includes the development of the telecom subsystem for the Juno project. David received a B.S. in Electrical Engineering from Cornell University and an M.S. in Electrical Engineering from Stanford University  Robert Miyake is a member of the technical staff in the Mission and Technology Development Group at the Jet Propulsion Laboratory. Current work includes the development of thermal control subsystems for interplanetary flagship missions to Jupiter and Saturn missions to Mars and the Earth Moon, and is the lead Thermal Chair for the Advanced Project Design Team Robert graduated with a B. S. from San Jose State University, with extensive graduate studies at UCLA University of Washington, and University of Santa Clara  Steve Kondos is a consultant to the Structures and Mechanisms group at the Jet Propulsion Laboratory. He currently is generating the mechanical concepts for small Lunar Landers and Lunar Science Instrument packages in support of various Lunar mission initiatives. He also provides conceptual design, mass and cost estimating support for various Team X studies as the lead for the Mechanical Subsystem Chair. Steve is also involved with various other studies and proposals and provides mentoring to several young mechanical and system engineers. He graduated with a B.S. in Mechanical Engineering from the University of California, Davis and has 28 years of experience in the aerospace field ranging from detail part design to system of systems architecture development. He has worked both in industry and in government in defense, intelligence commercial and civil activities that range from ocean and land based systems to airborne and space systems. Steve has received various NASA, Air Force, Department of Defense and other agency awards for his work on such projects as the NASA Solar Array Flight Experiment, Talon Gold, MILSTAR, Iridium, SBIRS, Mars Exploration Rovers ATFLIR, Glory Aerosol Polarimeter System and several Restricted Programs  Paul Timmerman is a senior member of technical staff in the Power Systems Group at the Jet Propulsion Laboratory Twenty-five years of experience in spacecraft design including 22 at JPL, over 250 studies in Team-X, and numerous proposals. Current assignments include a wide variety of planetary mission concepts, covering all targets within the solar system and all mission classes. Paul graduated from Loras College with a B.S. in Chemistry in 1983  Vincent Randolph is a senior engineer in the Advanced Computer Systems and 


the Advanced Computer Systems and Technologies Group at the Jet Propulsion Laboratory. Current work includes generating Command and Data Handling Subsystem conceptual designs for various proposals and Team X.  He also supports Articulation Control and Electronics design activities for the Advanced Mirror Development project. Vincent graduated from the University of California at Berkeley with a B.S. in Electrical Engineering 18  pre></body></html 


i models into time and covariate dependent dynamic counterparts  ii models and reliability analysis in a more realistic manner  iii level  whether or not functional components \(loyal generals diagnose correctly and take proper actions such as fault mask of failed components \(traitors asymmetric  iv survivability analysis. Evolutionary game modeling can derive sustainable or survivable strategies \(mapped from the ESS in EGT such as node failures such as security compromise level modeling in the so-called three-layer survivability analysis developed in Ma \(2008a this article  v offer an integrated architecture that unite reliability survivability, and fault tolerance, and the modeling approaches with survival analysis and evolutionary game theory implement this architecture. Finally, the dynamic hybrid fault models, when utilized to describe the survival of players in EGT, enhance the EGT's flexibility and power in modeling the survival and behaviors of the game players which should also be applicable to other problem domains where EGT is applicable  5. OPERATIONAL LEVEL MODELING AND DECISION-MAKING  5.1. Highlights of the Tactical and Strategic Levels  Let's first summarize what are obtainable at both tactical and strategic levels. The results at both tactical and strategic levels are precisely obtainable either via analytic or simulation optimization. With the term precisely, we mean that there is no need to assign subjective probabilities to UUUR events. This is possible because we try to assess the consequences of UUUR events \(tactical level ESS strategies \(strategic level time prediction of survivability. The following is a list of specific points. I use an assumed Wireless Sensor Network WSN  i of UUUR events: \(a actions which can be treated as censored events; \(b Cont' of Box 4.2 It can be shown that the replicator differential equations are equivalent to the classical population dynamics models such as Logistic differential equation and LotkaVolterra equation \(e.g., Kot 2001 Logistic equation, or the limited per capital growth rate is similar to the change rate of the fitness  xfxfi which can be represented with the hazard function or survivor functions introduced in the previous section on survival analysis.  This essentially connects the previous survival analysis modeling for lifetime and reliability with the EGT modeling. However, EGT provides additional modeling power beyond population dynamics or survival analysis approaches introduced in the previous section. The introduction of evolutionary theory makes the games played by a population evolvable. In other words, each player \(individual 


other words, each player \(individual agent and players interact with each other to evolve an optimized system Box 4.3. Additional Comments on DHF Models  The above introduced EGT models are very general given they are the system of ordinary differential equations. Furthermore, the choice of fitness function f\(x complexity to the differential equation system.  The system can easily be turned into system of nonlinear differential equations. The analytical solution to the models may be unobtainable when nonlinear differential equations are involved and simulation and/or numerical computation are often required  In the EGT modeling, Byzantine generals are the game players, and hybrid fault models are conveniently expressed as the strategies of players; the players may have different failure or communication behaviors Furthermore, players can be further divided into groups or subpopulations to formulate more complex network organizations. In the EGT modeling, reliability can be represented as the payoff \(fitness, the native term in EGT of the game. Because reliability function can be replaced by survivor function, survival analysis is seamlessly integrated into the EGT modeling. That is, let Byzantine generals play evolutionary games and their fitness reliability function  The evolutionary stable strategy \(ESS counterpart of Nash equilibrium in traditional games ESS corresponds to sustainable strategies, which are resistant to both internal mutations \(such as turning into treason generals or nodes such as security compromises represent survivable strategies and survivability in survivability analysis. Therefore, dynamic hybrid fault models, after the extension with EGT modeling, can be used to study both reliability and survivability 13 risks such as competing risks which can be described with CRA; \(c captured with the shard frailty.  We believe that these UUUR events are sufficiently general to capture the major factors/events in reliability, security and survivability whose occurrence probabilities are hard or impossible to obtain  Instead of trying to obtain the probabilities for these events which are infeasible in most occasions, we focus on analyzing the consequences of the events.  With survival analysis, it is possible to analyze the effects of these types of events on survivor functions. In addition, spatial frailty modeling can be utilized to capture the heterogeneity of risks in space, or the spatial distribution of risks \(Ma 2008a d UUUR events introduced previously. These approaches and models that deal with the effects of UUUR events form the core of tactical level modeling  To take advantage of the tactical level modeling approaches it is obviously necessary to stick to the survivor functions or hazard functions models. In other words, survival analysis can deal with UUUR events and offer every features reliability function provides, but reliability function cannot deal with UUUR events although survivor function and reliability function have the exactly same mathematical definition. This is the junction that survival analysis plays critical role in survivability analysis at tactical level. However, we 


recognize that it is infeasible to get a simple metric for survivability similar to reliability with tactical level modeling alone. Actually, up to this point, we are still vague for the measurement of survivability or a metric for survivability. We have not answered the question: what is our metric for survivability? We think that a precise or rigorous definition of survivability at tactical level is not feasible, due to the same reason we cited previously  the inability to determine the probabilities of UUUR events However, we consider it is very helpful to define a work definition for survivability at the tactical level  We therefore define the survivability at tactical level as a metric, Su\(t t function or reliability function with UUUR events considered. In the framework of three-layer survivability analysis, this metric is what we mean with the term survivability. The "metric" per se is not the focus of the three-layer survivability analysis. It is not very informative without the supports from the next two levels  strategic and operational models.  However, it is obvious that this metric sets a foundation to incorporate UUUR effects in the modeling at the next two levels  Due to the inadequacy of tactical level modeling, we proposed the next level approach  strategic level modeling for survivability. As expected, the tactical level is one foundation of strategic level modeling ii objectives: \(a affect survivability which survival analysis alone is not adequate to deal with; \(b survivability at tactical level is necessary but not sufficient for modeling survivability, we need to define what is meant with the term survivability at strategic level  With regard to \(a behaviors or modes which have very different consequences. These failure behaviors can be captured with hybrid fault models. However, the existing hybrid fault models in fault tolerance field are not adequate for applying to survivability analysis. There are two issues involved: one is the lack of real time notion in the constraints for hybrid fault models \(e.g., N&gt;3m+1 for Byzantine Generals problem synthesize the models after the real-time notions are introduced. The solution we proposed for the first issue is the dynamic hybrid fault models, which integrate survivor functions with traditional hybrid fault models. The solution we proposed for the second issue is the introduction of EGT modeling  With regard to \(b modeling our problem at strategic level, EGT modeling is essentially a powerful optimization algorithm.  One of the most important results from EGT modeling is the so-called evolutionary stable strategies \(ESS We map the ESS in EGT to survivable strategies in survivability analysis.   Therefore, at the strategic level, our work definition for survivability refers to the survivable strategies or sustainable strategies in the native term of EGT, which can be quantified with ESS  In addition to integrating dynamic hybrid fault models another advantage for introducing EGT modeling at strategic level is the flexibility for incorporating other node behaviors \(such as cooperative vs. non-cooperative those behaviors specified in standard hybrid fault models, as well as anthropocentric factors such as costs constraints  Without UUUR events, both tactical and strategic level 


Without UUUR events, both tactical and strategic level models default to regular reliability models. This implies that, in the absence of UUUR events, reliable strategies are sustainable or survivable.  This also implies that three-layer survivability analysis defaults to reliability analysis however, the three-layer approach does offer some significant advantages over traditional reliability analysis, as discussed in previous sections. Nevertheless, when UUUR events exist, reliable strategies and survivable strategies are different. This necessitates the next operational level modeling  5.2. Operational Level Modeling and Decision-Making  When UUUR events are involved, we cannot make real time predictions of survivability at tactical and strategic levels This implies that the implementations of survivable 14 strategies need additional measures that we develop in this section.  Box 5.1 explains the ideas involved with possibly the simplest example  Figure 4 is a diagram showing a simplified relationship between action threshold survivability \(TS survivability \(ES view since both TS and ES are multidimensional and dynamic in practice. Therefore, the sole purpose of the diagram is to illustrate the major concepts discussed above The blue curve is the survivability when survivable strategies specified by ESS are implemented at some point before time s.  The system is then guaranteed to hold survivability above ES. In contrary, if no ESS implemented before time s, then the system quickly falls below to the survivable level at around 40 time units  T i m e 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 1 0 0 Su rv iv ab ili ty M et ric S u t 0 . 0 0 . 1 0 . 2 0 . 3 0 . 4 0 . 5 0 . 6 0 . 7 0 . 8 0 . 9 1 . 0 E S S  i s  I m p lm e n t e d N o  E S S  is  I m p lm e n t e d ts E S T S  Figure 4. A Diagram Showing the Relationship Between TS and ES, as well as timing of s and t, with s &lt; t  6. SUMMARY  The previous sections discussed the major building blocks 


The previous sections discussed the major building blocks for the new life-system inspired PHM architecture. This section first identifies a few minor aspects that have not been discussed explicitly but are necessary for the implementation of the architecture, and then we summarize the major building blocks in a diagram  6.1. Missing Components and Links  Optimization Objectives  Lifetime, reliability, fault tolerance, and survivability, especially the latter two, are application dependent. Generally, the optimization of reliability and survivability are consistent; in that maximization of reliability also implies maximization of survivability. However, when application detail is considered, optimization of lifetime is not necessarily consistent with the optimization of reliability. Consider the case of the monitoring sensor network as an example. The network reliability is also dependent on connectivity coverage, etc, besides network lifetime. What may be further complicated is the time factor. All of the network metrics are time-dependent. A paradoxical situation between lifetime and reliability could be that nodes never 'sleep                                                   


          Box 5.1 Operational Level Modeling  Assuming that the ESS solution for a monitoring sensor network can be expressed with the following simple algebraic conditions: survivability metric at tactical level SU = 0.7, Router-Nodes in the WSN &gt; 10%, Selfish Nodes &lt; 40%. Even with this extremely simplified scenario, the ESS strategies cannot be implemented because we do not know when the actions should be taken to warrant a sustainable system.  These conditions lack a correlation with real time  The inability to implement ESS is rooted in our inability to assign definite probabilities to UUUR events, which implies that we cannot predict when something sufficiently bad will jeopardize the system survivability What we need at the operational level is a scheme to ensure ESS strategy is in place in advance  The fundamental idea we use to implement the ESS strategy is to hedge against the UUUR events. The similar idea has been used in financial engineering and also in integrated pest management in entomology. This can be implemented with the following scheme  Let us define a pair of survivability metrics: one is the expected survivability \(ES threshold survivability or simply threshold survivability \(TS ES is equivalent to the survivability metric at tactical level. ES corresponds to ESS at strategic level, but they are not equivalent since ESS is strategy and ES is survivability. TS is the survivability metric value \(at tactical level and TS can be obtained from strategic level models. For example, TS = SU\(s t condition for the implementation of ESS. In other words, the implementation of strategies that ensures TS at time s will guarantee the future ES level at time t.  To make the implementation more reliable and convenient multiple dynamic TSs can be computed at time s1, s2 sk, with si &lt; t for all i.  These TS at times s1, s2, ..., sk should be monitored by some evaluation systems  Unlike tactical and strategic levels, the operational level modeling is approximate. The term "approximate means that we cannot predict the real time survivability or we do not know the exact time an action should be taken. Instead, the action is triggered when the monitored survivability metric SU\(r survivability \(TS scheme of TS and ES, we ensure the ES by taking preventative actions \(prescribed by ESS and triggered by the TS consequences of UUUR events  Figure 4 is a diagram showing the above concepts and the decision-making process involved 15 This wakefulness \(never 'sleep short period but at the expense of network lifetime. Of course, when the network is running out of lifetime, network reliability ultimately crashes. This example reminds us that 


reliability ultimately crashes. This example reminds us that multi-objective optimization should be the norm rather than exception  Constraints and Extensions  Many application specific factors and constraints are ignored in this article. For example, we mentioned about spatial heterogeneity of environment, but never present a mathematical description The spatial heterogeneity can be modeled with the so-called spatial frailty in multivariate survival analysis \(Ma 2008a  Evolutionary Algorithm  Evolutionary game modeling when implemented in simulation, can be conveniently implemented with an algorithm similar to Genetic Algorithms \(GA ESS in the evolutionary game model with simulation is very similar to GA. Dynamic populations, in which population size varies from generation to generation \(Ma &amp; Krings 2008f of node failures. Another issue to be addressed is the synchronous vs. asynchronous updating when topology is considered in the simulation. This update scheme can have profound influences on the results of the simulation. Results from cellular automata computing should be very useful for getting insights on the update issue  6.2. Summary and Perspective  To recapture the major points of the article, let us revisit Figure 3, which summarizes the principal modules of the proposed life-system inspired PHM architecture. The main inspiration from life systems is the notion of individuals and their assemblage, the population. Population is an emergent entity at the next level and it has emergent properties which we are often more concerned with. Survival analysis, which has become a de facto standard in biomedicine, is particularly suitable for modeling population, although it is equally appropriate at individual level. Therefore, survival analysis \(including competing risks analysis and multivariate survival analysis comprehensively in the context of PHM in a series of four papers presented at IEEE AeroSpace 2008 \(Ma &amp; Krings 2008a, b, c, &amp; d proposed architecture. Survival analysis constitutes the major mathematical tools for analyzing lifetime and reliability, and also forms the tactical level of the three-layer survivability analysis  Besides lifetime and reliability, two other major modules in Figure 3 are fault tolerance and survivability. To integrate fault tolerance into the PHM system, Dynamic Hybrid Fault DHF 2008e, Ma 2008a make real-time prediction of reliability more realistic and make real-time prediction of fault tolerance level possible DHF models also unite lifetime, reliability and fault tolerance under a unified modeling framework that consists of survival analysis and evolutionary game theory modeling  DHG models also form the partial foundation, or strategic level, for the three-layer survivability analysis. At the strategic level, the Evolutionary Stable Strategies \(ESS which is mapped to survivable or sustainable strategies, can be obtained from the evolutionary game theory based DHF models. When there is not any UUUR event involved reliability and survivability are consistent, and reliable strategies are survivable. In this case, the strategic level modeling up to this point is sufficient for the whole PHM system modeling, and there is no need for the next level  operational level modeling  When there are UUUR events in a PHM system, the 


When there are UUUR events in a PHM system, the inability to determine the occurrence probabilities of UUUR events makes the operational level modeling necessary Then the principle of hedging must be utilized to deal with the "hanging" uncertainty from UUUR events. In this case reliability strategies are not necessarily survivable strategies At the operational level modeling, a duo of survivability metrics, expected survivability \(ES survivability \(TS the survivable strategies \(ESS level are promptly implemented based on the decisionmaking rules specified with the duo of survivability metrics then the PHM system should be able to endure the consequences of potentially catastrophic UUUR events. Of course, to endure such catastrophic events, the cost may be prohibitively high, but the PHM system will, at least, warn decision-makers for the potentially huge costs.  It might be cheap to just let it fail  Figure 3 also shows several other modules, such as security safety, application systems \(such as Automatic Logistics CBM+, RCM, Life cycle cost management, Real-time warning and alert systems architectures, but we do not discuss in this paper. Generally the new architecture should be fully compatible with existing ones in incorporating these additional modules. One point we stressed is that PHM system can be an ideal place to enforce security policies. Enforcing security policies can be mandatory for PHM systems that demand high security and safety such as weapon systems or nuclear plant facilities.  This is because maintenance, even without human-initiated security breaches, can break the security policies if the maintenance is not planned and performed properly  In perspective, although I did not discuss software issues in this paper, the introduced approaches and models should provide sufficient tools for modeling software reliability and survivability with some additional extension. Given the critical importance of software to modern PHM systems, we present the following discussion on the potential extension to software domain. Specifically, two points should be noted: \(1 architecture to software should be a metric which can 16 replace the time notion in software reliability; I suggest that the Kolmogorov complexity \(e.g., Li and Vitanyi 1997 be a promising candidate \(Ma 2008a change is because software does not wear and calendar time for software reliability usually does not make much sense 2 software reliability modeling.  Extending to general survivability analysis is not a problem either. In this article I implicitly assume that reliability and survivability are positively correlated, or reliability is the foundation of survivability. This positive correlation does not have to be the case. A simplified example that illustrates this point is the 'limit order' in online stock trading, in which limit order can be used in either direction: that stock price is rising or falling.  The solution to allow negative or uncorrelated relationships between reliability and survivability are very straightforward, and the solutions are already identified in previous discussions. Specifically, multiple G-functions and multi-stage G-functions by Vincent and Brown \(2005 very feasible solution, because lifetime, reliability and survivability may simply be represented with multiple Gfunctions. Another potential solution is the accommodation of the potential conflicts between reliability and survivability with multi-objective GA algorithms, which I previously suggested to be used as updating algorithms in the optimization of evolutionary games  


 The integration of dynamic hybrid fault models with evolutionary game modeling allows one to incorporate more realistic and detailed failure \(or survival individual players in an evolutionary game. This is because dynamic hybrid fault models are supported by survival analysis modeling, e.g., time and covariate dependent hazard or survivor functions for individual players. If necessary, more complex survival analysis modeling including competing risks analysis and multivariate survival analysis, can be introduced.  Therefore, any field to which evolutionary game theory is applicable may benefit from the increased flexibility in modeling individual players.  Two particularly interesting fields are system biology and ecological modeling.  In the former field, dynamic hybrid fault models may find important applications in the study of biological networks \(such as gene, molecular, and cell networks 2008g conjecture that explains the redundancy in the universal genetic code with Byzantine general algorithm. In addition they conducted a comparative analysis of bio-robustness with engineering fault tolerance, for example, the strong similarity between network survivability and ecological stability \(Ma &amp; Krings 2008g survivability analysis can be applied for the study of survivals or extinctions of biological species under global climate changes \(Ma 2008b  In this paper, I have to ignore much of the details related to the implementation issues to present the overall architecture and major approaches clearly and concisely. To deal with the potential devils in the implementation details, a well funded research and development team is necessary to take advantages of the ideas presented here. On the positive side I do see the great potential to build an enterprise PHM software product if there is sufficient resource to complete the implementation. Given the enormous complexity associated with the PHM practice in modern engineering fields, it is nearly impossible to realize or even demonstrate the benefits of the architecture without the software implementation. The critical importance of PHM to mission critical engineering fields such as aerospace engineering, in turn, dictates the great value of such kind software product  6.3. Beyond PHM  Finally, I would like to raise two questions that may be interested in by researchers and engineers beyond PHM community. The first question is: what can PHM offer to other engineering disciplines? The second question is: what kinds of engineering fields benefit most from PHM? Here, I use the term PHM with the definition proposed by IEEE which is quoted in the introduction section of the paper  As to the first question, I suggest software engineering and survivability analysis are two fields where PHM can play significant roles. With software engineering, I refer to applying PHM principles and approaches for dealing with software reliability, quality assurance, and even software process management, rather than building PHM software mentioned in the previous subsection. For survivability analysis, borrowing the procedures and practices of PHM should be particularly helpful for expanding its role beyond its originating domain \(network systems that control critical national infrastructures is a strong advocate for the expansion of survivability analysis to PHM. Therefore, the interaction between PHM and survivability analysis should be bidirectional. Indeed, I see the close relationships between PHM, software engineering, and survivability as well-justified because they all share some critical issues including reliability survivability, security, and dependability  


 The answer to the second question is much more elusive and I cannot present a full answer without comparative analysis of several engineering fields where PHM has been actively practiced. Of course, it is obvious that fields which demand mission critical reliability and dependability also demand better PHM solutions. One additional observation I would like to make is that PHM seems to play more crucial roles for engineering practices that depend on the systematic records of 'historical' data, such as reliability data in airplane engine manufacturing, rather than on the information from ad hoc events.  This may explain the critical importance of PHM in aerospace engineering particularly in commercial airplane design and manufacturing.  For example, comparing the tasks to design and build a space shuttle vs. to design and manufacture commercial jumbo jets, PHM should be more critical in the latter task  17    Figure 2. States of a monitoring sensor node and its failure modes \(after Ma &amp; Krings 2008e     Figure 3. Core Modules and their Relationships of the Life System Inspired PHM Architecture    REFERENCES  Adamides, E. D., Y. A. Stamboulis, A. G. Varelis. 2004 Model-Based Assessment of Military Aircraft Engine Maintenance Systems Model-Based Assessment of Military Aircraft Engine Maintenance Systems. Journal of the Operational Research Society, Vol. 55, No. 9:957-967  Anderson, R. 2001. Security Engineering. Wiley  Anderson, R. 2008. Security Engineering. 2nd ed. Wiley  Bird, J. W., Hess, A. 2007.   Propulsion System Prognostics R&amp;D Through the Technical Cooperation Program Aerospace Conference, 2007 IEEE, 3-10 March 2007, 8pp  Bock, J. R., Brotherton, T., W., Gass, D. 2005. Ontogenetic reasoning system for autonomic logistics. Aerospace Conference, 2005 IEEE 5-12 March 2005.Digital Object Identifier 10.1109/AERO.2005.1559677  Brotherton, T., P. Grabill, D. Wroblewski, R. Friend, B Sotomayer, and J. Berry. 2002. A Testbed for Data Fusion for Engine Diagnostics and Prognostics. Proceedings of the 2002 IEEE Aerospace Conference  Brotherton, T.; Grabill, P.; Friend, R.; Sotomayer, B.; Berry J. 2003. A testbed for data fusion for helicopter diagnostics and prognostics. Aerospace Conference, 2003. Proceedings 2003 IEEE  Brown, E. R., N. N. McCollom, E-E. Moore, A. Hess. 2007 Prognostics and Health Management A Data-Driven Approach to Supporting the F-35 Lightning II. 2007 IEEE AeroSpace Conference  Byington, C.S.; Watson, M.J.; Bharadwaj, S.P. 2008 Automated Health Management for Gas Turbine Engine Accessory System Components. Aerospace Conference 2008 IEEE, DOI:10.1109/AERO.2008.4526610 


2008 IEEE, DOI:10.1109/AERO.2008.4526610 Environment Covariates &amp; Spatial Frailty Applications: AL; Life Cycle Mgmt; Real-Time Alerts CBM+, RCM, TLCSM; Secret Sharing and Shared Control 18 Chen, Y. Q., S. Cheng. 2005. Semi-parametric regression analysis of mean residual life with censored survival data Biometrika \(2005  29  Commenges, D. 1999. Multi-state models in Epidemiology Lifetime Data Analysis. 5:315-327  Cook, J. 2004. Contrasting Approaches to the Validation of Helicopter HUMS  A Military User  s Perspective Aerospace Conference, 2004 IEEE  Cook, J. 2007. Reducing Military Helicopter Maintenance Through Prognostics. Aerospace Conference, 2007 IEEE Digital Object Identifier 10.1109/AERO.2007.352830  Cox, D. R. 1972. Regression models and life tables.  J. R Stat. Soc. Ser. B. 34:184-220  Crowder, M. J.  2001. Classical Competing Risks. Chapman amp; Hall. 200pp  David, H. A. &amp; M. L. Moeschberger. 1978. The theory of competing risks. Macmillan Publishing, 103pp  Ellison, E., L. Linger, and M. Longstaff. 1997.  Survivable Network Systems: An Emerging Discipline, Carnegie Mellon, SEI, Technical Report CMU/SEI-97-TR-013  Hanski, I. 1999. Metapopulation Ecology. Oxford University Press  Hallam, T. G. and S. A. Levin. 1986. Mathematical Ecology. Biomathematics. Volume 17. Springer. 457pp  Hess, A., Fila, L. 2002.  The Joint Strike Fighter \(JSF concept: Potential impact on aging aircraft problems Aerospace Conference Proceedings, 2002. IEEE. Digital Object Identifier: 10.1109/AERO.2002.1036144  Hess, A., Calvello, G., T. Dabney. 2004. PHM a Key Enabler for the JSF Autonomic Logistics Support Concept. Aerospace Conference Proceedings, 2004. IEEE  Hofbauer, J. and K. Sigmund. 1998. Evolutionary Games and Population Dynamics. Cambridge University Press 323pp  Hougaard, P. 2000. Analysis of Multivariate Survival Data Springer. 560pp  Huzurbazar, A. V. 2006. Flow-graph model for multi-state time-to-event data. Wiley InterScience  Ibrahim, J. G., M. H. Chen and D. Sinha. 2005. Bayesian Survival Analysis. Springer. 481pp  Kacprzynski, G. J., Roemer, M. J., Hess, A. J. 2002. Health management system design: Development, simulation and cost/benefit optimization. IEEE Aerospace Conference Proceedings, 2002. DOI:10.1109/AERO.2002.1036148  Kalbfleisch, J. D., and R. L. Prentice, 2002. The Statistical Analysis of Failure Time Data. Wiley-InterScience, 2nd ed  Kalgren, P. W., Byington, C. S.   Roemer, M. J.  2006 Defining PHM, A Lexical Evolution of Maintenance and Logistics. Systems Readiness Technology Conference 


Logistics. Systems Readiness Technology Conference IEEE. DOI: 10.1109/AUTEST.2006.283685  Keller, K.; Baldwin, A.; Ofsthun, S.; Swearingen, K.; Vian J.; Wilmering, T.; Williams, Z. 2007. Health Management Engineering Environment and Open Integration Platform Aerospace Conference, 2007 IEEE, Digital Object Identifier 10.1109/AERO.2007.352919  Keller, K.; Sheahan, J.; Roach, J.; Casey, L.; Davis, G Flynn, F.; Perkinson, J.; Prestero, M. 2008. Power Conversion Prognostic Controller Implementation for Aeronautical Motor Drives. Aerospace Conference, 2008 IEEE. DOI:10.1109/AERO.2008.4526630  Klein, J. P. and M. L. Moeschberger. 2003. Survival analysis techniques for censored and truncated data Springer  Kingsland, S. E. 1995. Modeling Nature: Episodes in the History of Population Ecology. 2nd ed., University of Chicago Press, 315pp  Kot, M. 2001. Elements of Mathematical Ecology Cambridge University Press. 453pp  Krings, A. W. and Z. S. Ma. 2006. Fault-Models in Wireless Communication: Towards Survivable Ad Hoc Networks Military Communications Conference, 23-25 October, 7 pages, 2006  Lamport, L., R. Shostak and M. Pease. 1982. The Byzantine Generals Problem. ACM Transactions on Programming Languages and Systems, 4\(3  Lawless, J. F. 2003. Statistical models and methods for lifetime data. John Wiley &amp; Sons. 2nd ed  Line, J. K., Iyer, A. 2007. Electronic Prognostics Through Advanced Modeling Techniques. Aerospace Conference 2007 IEEE. DOI:10.1109/AERO.2007.352906  Lisnianski, A., Levitin, G. 2003. Multi-State System Reliability: Assessment, Optimization and Applications World Scientific  Liu, Y., and K. S. Trivedi. 2006. Survivability Quantification: The Analytical Modeling Approach, Int. J of Performability Engineering, Vol. 2, No 1, pp. 29-44  19 Luchinsky, D.G.; Osipov, V.V.; Smelyanskiy, V.N Timucin, D.A.; Uckun, S. 2008. Model Based IVHM System for the Solid Rocket Booster. Aerospace Conference, 2008 IEEE.DOI:10.1109/AERO.2008.4526644  Lynch, N. 1997. Distributed Algorithms. Morgan Kaufmann Press  Ma, Z. S. 1997. Demography and survival analysis of Russian wheat aphid. Ph.D. dissertation, Univ. of Idaho 306pp  Ma, Z. S. 2008a. New Approaches to Reliability and Survivability with Survival Analysis, Dynamic Hybrid Fault Models, and Evolutionary  Game Theory. Ph.D. dissertation Univ. of Idaho. 177pp  Ma, Z. S. 2008b. Survivability Analysis of Biological Species under Global Climate Changes: A New Distributed and Agent-based Simulation Architecture with Survival Analysis and Evolutionary Game Theory. The Sixth 


International Conference on Ecological Informatics. Dec 25, 2008. Cancun, Mexico  Ma, Z. S. and E. J. Bechinski. 2008. A Survival-Analysis based  Simulation Model for Russian Wheat Aphid Population Dynamics. Ecological Modeling, 216\(2 332  Ma, Z. S. and A. W. Krings. 2008a.  Survival Analysis Approach to Reliability Analysis and Prognostics and Health Management \(PHM  AIAA AeroSpace Conference, March 1-8, 2008, Big Sky, MT, 20pp  Ma, Z. S. and A. W. Krings. 2008b. Competing Risks Analysis of Reliability, Survivability, and Prognostics and Health Management \(PHM  AIAA AeroSpace Conference, March 1-8, 2008.  Big Sky, MT. 20pp  Ma, Z. S. and A. W. Krings. 2008c. Multivariate Survival Analysis \(I Dependence Modeling", Proc. IEEE  AIAA AeroSpace Conference, March 1-8, 2008, Big Sky, MT. 21pp  Ma, Z. S. and A. W. Krings., R. E. Hiromoto. 2008d Multivariate Survival Analysis \(II State Models in Biomedicine and Engineering Reliability IEEE International Conference of Biomedical Engineering and Informatics, BMEI 2008.  6 Pages  Ma, Z. S. and A. W. Krings. 2008e. Dynamic Hybrid Fault Models and their Applications to Wireless Sensor Networks WSNs Modeling, Analysis and Simulation of Wireless and Mobile Systems. \(ACM MSWiM 2008 Vancouver, Canada  Ma, Z. S. &amp; A. W. Krings. 2008f. Dynamic Populations in Genetic Algorithms. SIGAPP, the 23rd Annual ACM Symposium on Applied Computing, Ceara, Brazil, March 16-20, 2008. 5 Pages  Ma, Z. S. &amp; A. W. Krings. 2008g. Bio-Robustness and Fault Tolerance: A New Perspective on Reliable, Survivable and Evolvable Network Systems, Proc. IEEE  AIAA AeroSpace Conference, March 1-8, Big Sky, MT, 2008. 20 Pages  Ma, Z. S.  and A. W. Krings. 2009. Insect Sensory Systems Inspired Computing and Communications.  Ad Hoc Networks 7\(4  MacConnell, J.H. 2008. Structural Health Management and Structural Design: An Unbridgeable Gap? 2008 IEEE Aerospace Conference, DOI:10.1109/AERO.2008.4526613  MacConnell, J.H. 2007. ISHM &amp; Design: A review of the benefits of the ideal ISHM system. Aerospace Conference 2007 IEEE. DOI:10.1109/AERO.2007.352834  Marshall A. W., I. Olkin. 1967. A Multivariate Exponential Distribution. Journal of the American Statistical Association, 62\(317 Mar., 1967  Martinussen, T. and T. H. Scheike. 2006. Dynamic Regression Models for Survival Data. Springer. 466pp  Mazzuchi, T. A., R. Soyer., and R. V. Spring. 1989. The proportional hazards model in reliability. IEEE Proceedings of Annual Reliability and Maintainability Symposium pp.252-256  Millar, R.C., Mazzuchi, T.A. &amp; Sarkani, S., 2007. A Survey of Advanced Methods for Analysis and Modeling of 


of Advanced Methods for Analysis and Modeling of Propulsion System", GT2007-27218, ASME Turbo Expo 2007, May 14-17, Montreal, Canada  Millar, Richard C., "Non-parametric Analysis of a Complex Propulsion System Data Base", Ph.D. Dissertation, George Washington University, June 2007  Millar, R. C. 2007. A Systems Engineering Approach to PHM for Military Aircraft Propulsion Systems. Aerospace Conference, 2007 IEEE. DOI:10.1109/AERO.2007.352840  Millar, R. C. 2008.  The Role of Reliability Data Bases in Deploying CBM+, RCM and PHM with TLCSM Aerospace Conference, 2008 IEEE, 1-8 March 2008. Digital Object Identifier: 10.1109/AERO.2008.4526633  Nowak, M. 2006. Evolutionary Dynamics: Exploring the Equations of Life. Harvard University Press. 363pp  Oakes, D. &amp; Dasu, T. 1990. A note on residual life Biometrika 77, 409  10  Pintilie, M. 2006. Competing Risks: A Practical Perspective.  Wiley. 224pp  20 Smith, M. J., C. S. Byington. 2006. Layered Classification for Improved Diagnostic Isolation in Drivetrain Components. 2006 IEEE AeroSpace Conference  Therneau, T. and P. Grambsch. 2000. Modeling Survival Data: Extending the Cox Model. Springer  Vincent, T. L. and J. L. Brown. 2005. Evolutionary Game Theory, Natural Selection and Darwinian Dynamics Cambridge University Press. 382pp  Wang. J., T. Yu, W. Wang. 2008. Research on Prognostic Health Management \(PHM on Flight Data. 2008 Int. Conf. on Condition Monitoring and Diagnosis, Beijing, China, April 21-24, 2008. 5pp  Zhang, S., R. Kang, X. He, and M. G. Pecht. 2008. China  s Efforts in Prognostics and Health Management. IEEE Trans. on Components and Packaging Technologies 31\(2             BIOGRAPHY  Zhanshan \(Sam scientist and earned the terminal degrees in both fields in 1997 and 2008, respectively. He has published more than 60 peer-refereed journal and conference papers, among which approximately 40 are journal papers and more than a third are in computer science.  Prior to his recent return to academia, he worked as senior network/software engineers in semiconductor and software industry. His current research interests include: reliability, dependability and fault tolerance of distributed and software systems behavioral and cognitive ecology inspired pervasive and 


behavioral and cognitive ecology inspired pervasive and resilient computing; evolutionary &amp; rendezvous search games; evolutionary computation &amp; machine learning bioinformatics &amp; ecoinformatics                 pre></body></html 


