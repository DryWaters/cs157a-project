Extension of Hierarchically Classifier System using Self GA Invocation Satoshi ENDOH Hiroshi KAWAKAMIj Azuma OHUCHIt t Depart ment of Information Engineering,Faculty of Engineering University of the Ryukyus Laboratory of Harmonious Systems Eng Research Group of Complex Systems Eng Division of Systems and Information Eng Faculty of Eng Hokkaido University 1 Introduction 
Classifier system is one of the powerful and ro bust learning system which is able to learn good rule set in the nonlinear environments Although classifier system shows great promise the sys tem has a number of serious difficulties about it\222s learning efficiency This difficulty is reflected by the problem of rule clustering and rule associa tion First problem the rule clustering problem is that whole classifiers in a population will 
become similar patterns but these patterns don\222t include whole sub-solutions Second problem is rule as sociation problem Traditional classifier systems do not have effective mechanisms for creating and maintaining default hierarchies or rule chains Then we propose the multiple leveled hierarchi cally structured classifier system called mHCS Although the mHCS system leaves many features of traditional CS one of the important difference is.that some classifiers are grouped together as a family 
in mHCS Then mIICS has n-population levels that are classifier level family level meta family level  and n-meta family level Mem bers of a family work to maximize their fam ily\222s strength and the each member\222s strength. In this system, matching operator is executed at the classifier level However the matched classifier\222s bid is calculated not only by the strength of clas sifier and its specificity but also the strength of 
the family that it\222s belongs to Most genetic op erations except to the mutation and some parts of crossovers are executed at the family level It means that the basic unit for the genetic opera tion is changed to the family from the classifier The main causes of the rule clustering prob lem are the competitions among good classifiers or their schemata and the disruption of useful patterns by genetic operations 
In traditional classifier system crossover between two classi fiers generate offsprings that are not compati ble with the solution set The mHCS solve this problem by imposing some relations over these classifiers These related classifiers may stay in the same family with high probability of generat ing incompatible offsprings And then classifiers in mHCS are grouped into families by selecting competent relations that could be default hierar chies or valid 
chains Most genetic operations are doing between families Therefore the probabil ity of breaking default hierarchies or classifiers\222 chains by genetic operations is reduced Another approach to get a good performance of CS is to control the timing of GA operator invocation Our system is able to control the timing of GA-invocation monitoring the satu ration of family\222s strength Some experiments are designed to investigate the 
performance of the mHCS The results of experiments represents that the inHCS shows good performance for the problems that have large search space 2 Classifier system The research field of Genetic Based Machine Learning\(GBML are divide broadly into two categories One is the Michigan approach orig inally proposed by Holland and the other is the 0-7803-3280-6/96/$5.00 O1996 IEEE  2534  


Pittsburgh approach by Smith CS-1 system de veloped by Holland is now called Classifier Sys tem, and this system is one of the most popular learning system A classifier system\(CS consists of the three subsystems as follows 1 Rule  Message System 2 Apportionment of Credit System 3 Genetic Algorithm RuleaMessage System lasslllers Apporllonmenl 01 Genelic Algorllhm Credll Syslem I Figure 1 Classifier system 3 Problems 3.1 Rule clustering First problem the rule clustering problem is those whole classifiers in a population may over concentrate to similar patterns but these pat terns don\222t include whole sub-solutions The main causes of this problem are the competitions among good classifiers or their schemata, and the disruption of useful patterns by genetic opera tors In traditional classifier systems crossover between two classifiers may generate offsprings that are not compatible with the solution set mHCS solve this problem by imposing some re lations over these classifiers These related classi fiers may stay in the same family with high prob ability If genetic operations are restricted in dif ferent families HCS can reduce the probability of generating incompatible offsprings Another reason for the clustering problem is premature convergence If a solution classifier is included in the initial population and more useful classifiers be generate much later the first clas sifier would have a much higher strength in the population Then the population may converge to this classifier prematurely In HCS the prob ability that at least a correct family is contained in an initial population is much smaller than at least one solution classifier is included in the ini tial population in a traditional classifier system Therefore the probability of converging to one family is smaller 3.2 Rule association Second problem is the rule association problem Traditional classifier systems do not have effec tive mechanisms for forming and maintaining de fault hierarchies or rule chains In mHCS classi fiers are grouped into families by selecting compe tent relations that could be default hierarchies or valid chains Most genetic operations are doing between families Therefore the probability of breaking default hierarchies or classifiers\222 chains by genetic operations is reduced 3.3 Rule set association mHCS is able to reduce the rule association prob lem moreover the system is able to solve the rule set association problem In mHCS the families at HCS are grouped into meta-families by some relations and the mHCS can form and main tain the classifier chain sets or default hierar chy sets Therefore the mHCS has more per formance of correspondence to large search and solution spaces than the ordinary CS 4 mHCS CS uses no hierarchy in the population to search solutions For large search and solution spaces problem the performance of CS with multiple level that is called mHCS is better than ordinary CS mHCS with two level hierarchy can reduce the rule association problem by joining some clas sifiers together as a family but cannot reduce the rule-set association problem With two popula tion levels mHCS can take care of default hierar chies and classifier chains but is not able to take care of default hierarchies sets or classifier chains sets mHCS with multi level hierarchy can reduce the rule-set association problem by joining some families together as a meta-family by joining some meta-families together as a meta-meta family With multiple population levels mHCS can take care of classifier chains sets  21535  


4.1 matching As in traditional classifier systems matching is done at the classifier level However the bid of a matched classifier is determined not only by the strength of the classifier and its specificity but also the sum of the strength of the family that it belongs to and strength of meta-families that the family belongs to The strength of a family is the sum of the strength of whole the classifiers that con tained in the family and the strength of a meta-family\(meta-meta-family is the sum of the strength of whole the families\(meta-families that contained in the meta-family\(meta-meta-family A matched classifier\222s bid is calculated by the following formula 1 AX S x f x CS x sp p-sp bid  where A is a constant s is the strength of the classifier sf is the strength of the family that containing the classifier s is the strength of the\221 meta-families that containing the family and sp is the specificity of the classifier 4.2 Crossover In mHCS, there are three kinds of crossover The crossover operations are usually done at the fam ily level The possibilities of crossing over at the classifier level and crossing over at the meta family levels are smaller than crossing over at the family level 4.2.1 crossover between classifiers The first one is general crossover that crossing over two classifiers selected from different fami lies L 1  1 Figure 2 crossover between classifiers 4.2.2 crossover between families The second one is crossing over two families se lected from different meta-families This kind of crossover has two situations situation 1 Swapping family members of the two selected families In Figure 3 family mem bers of the two selected families are swapped 1 J I Figure 3 crossover between families situation 2 Swapping part of each family member with that of the corresponding members in the other family Figure 4 crossover between families Figure 4 shows an example of the situation 2 Consider a family as a matrix of classifiers the above two situations\222 crossover can be think as swapping rows and swapping columns of the ma trices In mHCS classifiers are tied to a family and probability of crossing between families is higher than other kinds Therefore families are become the main part of genetic operations Classifiers that belong to a family are related to each other by some relations Then the competitions among these classifiers are restricted  2536  


4.2.3 The third one is crossing over two meta families\(or meta-meta-families Figure 5 shows swapping families\(meta-families of the two se lect ed met a families met a-met a families crossover b et ween met a families I I 1-1 1-1 I I 11/11 Figure 5 crossover between meta-families Crossing over between meta-families is swap ping families or meta-families In other words that is swapping default hierarchies set and clas sifier chains set Therefore by using this kind of crossover mHCS can reduce the rule-set as sociation problem The mechanism of crossing over between meta-families can form and main tain set of default hierarchies and set of classi fier chains With this mechanism mHCS is more useful than ordinary HCS in large solution and search spaces 4.3 mutation In mHCS mutation is done at the classifier level as in traditional classifier systems The operation changes one position on a classifier that selected randomly 4.4 Experiments 4.4.1 Implementation of mHCS mHCS is implemented as follows  B  ri where ei i  1,2  2\222 is the binary string representation of a number be tween 0 and 2\221  l 1 being the length of the strings An environment state 0 F  fi where fi i  1,2  m is a fam ily 0 MF  mifj where m;f i  1,2  n 222 j  1,2  m\222 is a meta-family m2fj means a meta-meta-family meta\(2 0 Category G  O,l A classifier contains two parts the condition part and the action part Both parts are formed from the alphabets 2210\222,\2211\222,\221#\222 The relation over the classifiers in a family\(over the families in a meta-family is not default hi erarchies\(set or valid chains\(set They are grouped by randomly The genetic operation used in this experi ment is crossover mutation is not used here A matched classifier\222s bid is calculated by equation A general apportionment of credit algo rithm\(the bucket brigade algorithm and the roulette wheel selection are used The selection was used to select candidates for crossing over Families  or classifiers in the case of crossing over at the classifier level or meta-families with higher strength get a greater chance to be se lected 1 4.4.2 Problems mHCS and CS were examined by learning Boolean functions Several Boolean functions were used in the experiments to contrast the per formance of mHCS and the performance of CS The details of two examples of Boolean functions are as follows f1\(20,21,22,23,24,25  20 and 21 and 22 23 and z4 and Z 21 and 22 and 24 20 and z3 and Z 20 and 22 and 24 10 and z1 and Z4 q and 22 and 23 22 and 24 and Z 22 and 53 and  z and 24 and 24 20 and 24 and O Z and 23 and  20 and 21 and 25 Figure 6 probreml Classifier is corded as follows  2537  


where The bit x6is output bit and is compared with the value of fl  00 f2 20,21 22,237247 z.5,26 7 20 and 51 and 2 23 and 24 and z5 21 and 22 and 4 20 and 53 and 25 20 and 22 and 24 20 and 21 and z4 E r zl and 52 and 23 22 and 24 and 25 oc 04 22 and 23 and z5 22 and 24 and 24 20 and 24 and  ZO and 23 and z4 20 and 21 and z5 Figure 7 probrem2 X is lox the value of address 27 Classifier is corded as follows If 26  1,x7  0 then X  22 x 10 2021222324252627  2829 The bits 28x9 are output bits and is compared f2 the value of f2 The performances of these systems are deter mine as follows  where C is the number of the correct answers at iteration t It is the number of the incorrect an swers at iteration t and T is the current iteration 4.4.3 Results and discussions The fig.8 shows performance curves for three HCS experiments and two CS experiments for probleml The differences of HCS-4 HCS-8 and HCS-14 are setting of the parameters about fam ily size and timing of GA invocation And the difference of CS-3 and CS-0 is that the system uses crowding method or not From the com parison of performance curves, mHCS shows the efficiency equal to or better than CS But, the HCS curves shows a conspicuous vibration com pared with CS curves This feature means that the mHCS system is more sensitive than CS to to propose new method to invocate genetic algo rithm on suitable timing the timing of GA invocation Therefore we have 5 Self GA invocation 5.1 Problems of the mHCS From the results of the above experiments the mHCS has following merits f I I I I cs-3  tiCS.4    IKS-8   1 kICS-14 cs-0  o'2 I 1 0 1 1 I I 1 0 2000 4000 6000 0000 10000 iterdion Figure 8 Performance curves 0 reducing the rule clustering problem 0 reducing the rule association problem The other side it becomes clear that the mHCS has a demerit of computational efficiency against the traditional CS In the mHCS we shifted the objects of genetic operations from classifiers to families For this extension  the system becomes more sensitive to execution of genetic operations before classifier evaluation value is not fixed In mHCS if the timing of genetic operation execu tion is overhastily there will be a strong proba bility that the system disrupts a lot of good clas sifiers However it's obvious that late execution of GA makes bad influences for computational efficiency Then we have to develop the system which is able to invocate GA on appropriate tim ing 5.2 Strategy of Self GA invocation In learning system like CS, genetic algorithms are used to discover new rules and genetic operations are applied to classifiers based on its evaluation value as a fitness value Then for GA works ef fectively as a rule discovering system the evalu ation values of each classifiers should be decided correctly However traditional CS adopts peri odical GA invocation strategy therefore useless crossover operator will be carried out so often So we propose new strategy about the timing of GA invocation In the classifier system if evaluation value of  2538 


lI I I I I 1 _____..-.-._..__-____ e   e     ___c___          si-1  SI-2    SI4   cs-3   each classifiers are decided by system the sys tem performance becomes saturation Using this property we propose a GA invocation rule as lows t--m t if P\(E Y P\(I fhen GAinuocotion Where P\(k  system performance on timing k t  current iteration number m  constant fol 3 This production rule shows that if there is no improvement about the system performance dur ing m-th iteration then the system invocates GA Using this strategy the timing of GA invoca tion is just after the decision of the evaluation values for each classifiers Accordingly it is ex pected that 1 reducing the invalid crossover operations 2 reducing the unnecessary evaluation of clas sifiers For this reasons it is possible to improve the effi ciency of mHCS Next section we show the effec tivity of this strategy through the computational experiments 5.3 Experiments We tested the effects of the self-GA invocation method using previous problems This figure shows three performance curves of self-GA invocation method and one performance curve of CS The difference of SI1 SI2 and SI3 is the frequency of GA invocation This result shows that the efficiency of self-GA invocation method equal to or better than normal CS From this results the system becomes more effective and robust about control of GA We are able to summarize the characteristics of mHCS with self GA invocation as follows 1 The system is able to control useless GA in cocation when the evaluation values of clas sifiers are not determined 2 The system is able to increase the number of invocation times when the evaluation values of populations are saturated In addition we are able to reduce the labor of determine the parameter about GA invocation 0.0 0.6 0.4 0.2 0 I 1 I I I 0 2000 4000 6000 8000 10000 iteralion Figure 9 Performance curves of self-GA invoca tion 6 Conclusion In classifier system techniques an effective mech anism for fording and maintaining rule-set asso ciation is proposed And the improvement of ef ficiency are discussed The experiments showed effectiveness of mHCS and self-GA invocation method References Kawakami 951 H,Kawakami Satoshi END0 and Azuma OHUCHI xtension of the HCS multiple HCS  Proc of Goldberg 891 Goldberg,D.E Genetic Algorithms in Search Optimization and Machine Learning  Addison Wesley 1 989 Lingyan Shu and Jonathan Schaef fer HCS Hierarchies to Classifier Systems Proc of the 4th interna tional conference on GA,i991 Lawrence Davice Handbook of Ge netic Algorithms Thomson Inter national Publishing,l990 SICE 95,p.p.f 61 5-1 61 8 1995 Lingyan 911 Lawrence 901  25.39  


 r 004 \005\\006 r\003\020 004\005\005\006 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 r#\002\016\004\r 005 b\033\004 004\032\r\r\022 002\006 005\003\021 032\002\003\033 005 002 020\(\003\b\022 004\033\003\002\033\r\013\020 005\003 r!'#\b\r\006\033 004\r\013\021\r\006\033\002\033\b\005\006\024 2\036\(\036 021\006 030\025\030\030$\006 f\031\n r\016\n\f\b\f\022\013\n\f\r\t\004 006\013$\f\t\007 033\f\n\021 n\021\006 k 2 r\017 025\005\033\r 033 \002\033 b\006 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033 \r\003\r b\004 006\005 006\r\r\022 033\005 005\021\032\016\033\r 002\006\020 subop  002\031\016\r\024 023 \b\004 b\004  033 \r\003\r b\004 006\005 k 2 002#\033\005\003 b\006 033 \r 005\021\032\031\r,\b\033\020 005 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021\024 D\016\033 b\006 033 \r 005\033 \r\003 033\\005 002\031\013\005\003\b\033 \021\004 r#\002\016\004\r 004\r\031\r#\033\b\005\006 005 004\r\013\021\r\006\033\004 b\004 002\004\r\022\r\006\033\b\003\r\031\020\005\006\033 \r subop  002\031\016\r\004 k 2 r#\005\021\r\004 002 022\005\021\b\t 006\002\006\033 002#\033\005\003 b\006 033 \r\b\003 005\021\032\031\r,\b\033\020\024 023\005 r\031\b\021\b\006\002\033\r 033 \r k 2 002#\033\005\003 005\006\r r\016\003\b\004\033\b b\004 033\005 006\022 002 005\006\004\033\002\006\033 006\016\021\(\r\003 005 b\033\r\021\004 b 002\003\r 005\006 033 \r 016\(\(\031\r=\024 023 \r\004\r 002\003\r 033 \r b\033\r\021\004 005\004\r 003\r"\016\r\006#\b\r\004 002\003\r\031\020 004\002\033\b\004!\020 002\006\022 002\003\r 033 \r 031\005\004\r\004\033 033\005 033 \r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\024 023 \r\006 b\006 033 \r subop  002\031#\016\031\002\033\b\005\006  003\r\004\033\003\b#\033 033 \r 004\016\021\021\002\033\b\005\006 b\006 r"\016\002\033\b\005\006 035.\037 005\006\031\020 005%\r\003 002\031\031 032\002\b\003\004 005 b\033\r\021\004 b\006 033 \r 016\(\(\031\r 031\b\004\033=\024 023 \b\004 b\004 003\r\002\004\005\006\002\(\031\r r#\002\016\004\r 033 \r 031\033\r\003\b\006\013 005!!\r\003\r\022 020 033 \r 036\n\n\030 b\004 r,\032\r#\033\r\022 033\005 r 033 \r 021\005\004\033 002\032\032\031\b#\002\(\031\r 033\005 033 \005\004\r b\033\r\021\004 005\004\r 003\r"\016\r\006#\b\r\004 002\003\r 031\005\004\r\004\033 033\005 033 \r 033 \003\r\004 \005\031\022\024 005\003 r,\002\021\t 032\031\r 033 \r\003\r 021\002\020 r k  1000 b\033\r\021\004 b\006 002\031\031 016\033 033 \r 016\(\(\031\r 031\b\004\033 021\002\020 005\006\033\002\b\006 005\006\031\020 w  100 b\033\r\021\004\024 8\006 033 \b\004 002\004\r 005\003 003\024\032\002 005\021\032\016\033\002\033\b\005\006 005 subop   033 \r 006\016\021\(\r\003 005 032\002\b\003\004 005\006\004\b\022\r\003\r\022 b\006 033 \r 004\016\021\021\002\033\b\005\006 003\r\022\016#\r\004 003\005\021  k 2   499 500 033\005  w 2 950 024 025\005\033\r 033 \002\033 033 \r 005\006\033\r\006\033 005 033 \r 016\(\(\031\r 031\b\004\033 022\r\032\r\006\022\004 005\006 002 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\024 023 \b\004 016\(\(\031\r 031\b\004\033 033 \r\006 033\016\003\006\004 033 \r 005#\016\004 005 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 004"\016\002\003\r\031\020 005\006 033 \r b\033\r\021\004 b\006 033 \r 031\b\004\033\024 D\016\033 b\033 b\004 b\021\032\005\003\033\002\006\033 033\005 003\r\021\r\021\(\r\003 033 \002\033  004\r\013\021\r\006\033\002\033\b\005\006 b\033 033 \r 016\(\(\031\r 031\b\004\033 003\r"\016\b\003\r\004 004\005\021\r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 033 \r 036\n\n\030 032\003\005\t 022\016#\r\022 002\006 r 016\004\r\022 005\003 024\005\013 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\024 8\006 033 \r 006\r,\033 004\r#\t 033\b\005\006   r%\002\031\016\002\033\r 033 \r r!!\r#\033\b%\r\006\r\004\004 005 002\006 036\n\n\030 033 \002\033 002\004 032\003\005\022\016#\r\022 b\033 002 016\(\(\031\r 031\b\004\033 002\004\r\022 005\006 005\006\r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 016\033 b\004 016\004\r\022 022\020\006\002\021\b#\002\031\031\020 033\005 002\006\022\031\r 022\b!!\r\003\r\006\033 004\016\032\032\005\003\033 033 \003\r\004 \t 005\031\022\004\024 2\036,\036 4\026\030\017\f\034 031\006\007\b\006\t\n\013\n\f\r\t 031\n\017\013\n\006\007\f\006\031\004 006\013$\f\t\007 033\f\n\021 n\021\006 p 2 r\017 b\033 033 \r 016\(\(\031\r 031\b\004\033 r\016\003\b\004\033\b 033 \r k 2 002#\033\005\003 022\b\004\002\032\032\r\002\003\004 003\005\021 033 \r 005\021\032\031\r,\b\033\020 005 033 \r 9\003\r\r\022\020 002\006\022 017\001 002\031\013\005\003\b\033 \021\004\024 002\033 002\(\005\016\033 033 \r p 2 002#\033\005\003G 004 002 r\016\003\b\004\033\b 033\005 005\032\r  004\b\033\016\002\033\b\005\006\004  p b\004 031\002\003\013\r  005!!\r\003 020\(\003\b\022 004\r\013\021\r\006\033\002\033\b\005\006 004\033\003\002\033\r\013\b\r\004\024 E,\002\021\032\031\r\004 b\006#\031\016\022\r 013\t\034\r\b!&\027 002\006\022 013\t\034\r\b 1\017\006\006\034\026 024 023 \002\033 b\004 005\003 002 031\002\003\013\r b\006\b\033\b\002\031 002\031\016\r p b\006\033 \r'\003\004\033 032 \002\004\r r 016\004\r 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033\005 021\r\003\013\r 033 \r p 032\002\013\r\004 033\005 p mid 004\r\013\021\r\006\033\004 035 p mid m user 037\024 023 \r\006 b\006 033 \r 006\002\031 032 \002\004\r 033 \r 017\001 005\003 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 033\005 021\r\003\013\r 033 \r p mid 004\r\013\021\r\006\033\004 b\006\033\005 033 \r m user 004\r\013\021\r\006\033\004\024 8\006 033 \r 006\r,\033 004\r#\033\b\005\006   r%\002\031\016\002\033\r  033 \r\004\r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 005\003\027 002\033 002\031\031\024 5\036 016\006\017\f\b\006\t\n\013 006 \013$\025\013\n\f\r\t 8\006 033 \b\004 004\r#\033\b\005\006 r 032\003\005%\b\022\r r,\033\r\006\004\b%\r r,\032\r\003\b\021\r\006\033\002\031 r%\002\031\016\t 002\033\b\005\006 005 002\031\031 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\006\022 r\016\003\b\004\033\b#\004 032\003\005\t 032\005\004\r\022 002\(\005%\r\024 n\032\r#\b'#\002\031\031\020 r 032\003\005%\b\022\r r\021\032\b\003\b#\002\031 r%\002\031\016\002\t 033\b\005\006 005\006 3\024 033 \r 004\032\r\r\022\016\032 002\006 036\n\n\030 032\003\005%\b\022\r\004 002\033 016\r\003\020 r,\r#\016\033\b\005\006 005\003 r,\032\031\005\003\002\033\b\005\006 033\b\021\rB 002\006\022 024 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 005 032\003\005\022\016#\b\006\013 033 \r 036\n\n\030 b\033 005\003 b\033 \005\016\033 033 \r 016\(\(\031\r 031\b\004\033 002\006\022 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004\024 r 005\006#\031\016\022\r 033 \b\004 004\r#\033\b\005\006 b\033 002 003\r#\005\021\021\r\006\022\r\022 003\r#\b\032\r 005\003 022\b!!\r\003\r\006\033 b\003#\016\021\004\033\002\006#\r\004\024 5\036\035\036 016\006\017\f\b\006\t\n\013 031\006\n\025\016 023 \r 004\r\013\021\r\006\033 021\b\006\b\021\b\034\002\033\b\005\006 002\006\022 033 \r 005\006\004\033\003\002\b\006\r\022 004\r\013\021\r\006\t 033\002\033\b\005\006 032\003\005\(\031\r\021\004 002\032\032\031\020 033\005 033 \r 021\002\006\020 002\031\013\005\003\b\033 \021\004 033 \002\033 005\006\t 022\016#\033 021\b\006\b\006\013 005 002\003\b\005\016\004 027\b\006\022\004 005 032\002\033\033\r\003\006\004 002\004\r\022 005\006 002\006\022\b\022\002\033\r 013\r\006\r\003\002\033\b\005\006 035\004\r\r n\r#\033\b\005\006 3\037\024 023 \r 003\r\004\016\031\033\004 003\r\032\005\003\033\r\022 r\003\r 002\003\r 002\004\r\022 005\006 002 004\032\r#\b b\006\004\033\002\006#\r 005 033 \r\004\r 002\031\013\005\003\b\033 \021\004 C 006\002\021\r\031\020 033 \r 031\002\004\004\b#\002\031 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 005\003 002\004\004\005#\b\002\033\b\005\006 003\016\031\r 021\b\006\b\006\013\024 025\005\006\r\033 \r\031\r\004\004 033 \r 032\003\r\004\r\006\033\r\022 b\022\r\002\004 002\006\022 002\031\013\005\003\b\033 \021\004 002\032\032\031\020 033\005 005\033 \r\003 b\006\004\033\002\006#\r\004 002\004  031\031 033 \r r,\032\r\003\b\021\r\006\033\004 r\003\r 032\r\003!\005\003\021\r\022 005\006 002 033\b\021\r\t\004 \002\003\b\006\013 r\006%\b\003\005\006\021\r\006\033 005\006 002 2 030\026\034 021\002# \b\006\r\024 031\031 033 \r 032\003\005\013\003\002\021\004 r b\033\033\r\006 b\006 001\024 023 \r\003\r 002\003\r 033\\005 027\b\006\022\004 005 r,\r#\016\033\b\005\006 033\b\021\r\024 023 \r 003\004\033 b\004 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r  b\006#\031\016\022\r\004 002\031\031 001?H 002\006\022 8;\036 005\004\033\004 b\006#\016\003\003\r\022 005\003 004\r\013\021\r\006\033\002\033\b\005\006\024 023 \r 004\r#\005\006\022 b\004 033 \r 003\016\006\033\b\021\r 005 032\003\b\005\003\b  005\003 016\033 033 \r 036\n\n\030 b b\006\t 031\016\022\r\004 002\031\031 001?H 002\006\022 8;\036 005\004\033\004 033\005 006\022 002\031\031 033 \r 003\r"\016\r\006\033 004\r\033\004\024 023 \r 003\r\032\005\003\033\r\022 013\016\003\r\004 002\003\r 002\004\r\022 005\006 033 \r 002%\r\003\002\013\r 005 021\016\031\033\b\032\031\r 033 \003\r\r\022\002\033\002\004\r\033\004\\r\016\004\r\022 3\024 6\r'\f\013\034\013\n\013\031\006\n  b b\004 002 003\r\002\031 022\002\033\002 004\r\033 003\005\021 025\005\027\b\002 005\006 002 004\r"\016\r\006#\r 031\r 005\006\033\002\b\006\b\006\013 002\(\005\016\033 7 033\003\002\006\004\002#\033\b\005\006\004 005 002\(\005\016\033  022\b\004\033\b\006#\033 033\020\032\r\004 005 033\r\031\r#\005\021\021\016\006\b#\002\033\b\005\006\004 006\r\033\\005\003\027 002\031\002\003\021\004\024 005\003 032\003\005\032\003\b\r\033\002\003\020 003\r\002\004\005\006\004 r 002\006\006\005\033 022\r\004#\003\b\(\r 033 \b\004 022\002\033\002 004\r\033 016\003\033 \r\003\024 024 020 034\013\n\013 031\006\n  b b\004 002 004\020\006\033 \r\033\b 022\002\033\002 004\r\033 013\r\006\r\003\002\033\r\022 016\004\b\006\013 033 \r 032\003\005\013\003\002\021 022\r%\r\031\005\032\r\022 002\033 8D\030 031\t 021\002\022\r\006 017\r\004\r\002\003# \001\r\006\033\r\003 0\024 023 \r r,\002#\033 006\016\021\(\r\003 005 033\003\002\006\004\t 002#\033\b\005\006\004 b\004 006\005\033 b\021\032\005\003\033\002\006\033 r#\002\016\004\r 033 \r 027\r\020 032\002\003\002\021\r\033\r\003 b\004 033 \r 006\016\021\(\r\003 005 032\002\013\r\004 p 024 8\006 005\016\003 r,\032\r\003\b\021\r\006\033\002\033\b\005\006 p 002\003\b\r\004 003\005\021  033\005 7  002\006\022 033 \r 006\016\021\(\r\003 005 b\033\r\021\004 b\004 k 1000 024 024 031'\006\033\006\034!\031\026\t\n\021\006\n\f\020 034\013\n\013 031\006\n  b b\004 002 004\020\006\033 \r\033\b 022\002\033\002 004\r\033 033 \002\033 002\004 004\027\r\\r\022 004\r\002\004\005\006\002\031 r \002%\b\005\003\024 n\032\r#\b'#\002\031\031\020 7@I 005 033 \r b\033\r\021\004 002%\r 002 b\013 \r\003 032\003\005\(\002\(\b\031\b\033\020 005 002\032\032\r\002\003\b\006\013 b\006 033 \r 003\004\033 002\031 005 033 \r 005\031\031\r#\033\b\005\006 005 033\003\002\006\004\002#\033\b\005\006\004 002\006\022 033 \r 005\033 \r\003 7@I 002%\r 002 b\013 \r\003 032\003\005\(\002\(\b\031\b\033\020 005 002\032\032\r\002\003\b\006\013 b\006 033 \r 004\r#\005\006\022 002\031!\024 023 \r 003\r\002\004\005\006 005\003 016\004\b\006\013 033 \b\004 022\002\033\002 004\r\033 b\004 033 \002\033 b\006 033 \r 003\r\002\031 005\003\031\022 033 \r\003\r 002\003\r 021\002\006\020 022\002\033\002\(\002\004\r\004 033 \002\033 022\005 006\005\033 005\031\031\005 002 003\r\013\016\031\002\003 005\003 016\006\b!\005\003\021 022\b\004\033\003\b\(\016\033\b\005\006 035\r\024\013\024 002 004\016\032\r\003\t 021\002\003\027\r\033 022\002\033\002\(\002\004\r 005\006\004\b\004\033\b\006\013 005 033\003\002\006\004\002#\033\b\005\006\004 005%\r\003 002 r 021\005\006\033 \004 003\005\021 004\016\021\021\r\003 033\005 b\006\033\r\003\037\024 5\036%\036 025\t\n\f\b\006 031\016\006\006\034\025\016 023 \r 003\004\033 004\r\033 005 r,\032\r\003\b\021\r\006\033\004 r%\002\031\016\002\033\r\004  033 \r 036\n\n\030 032\003\005%\b\022\r\004 004\b\013\006\b'#\002\006\033 004\032\r\r\022\016\032\024 023 \r 004\032\r\r\022\016\032 005\003 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021 X b\004 022\r'\006\r\022 033\005 r 033 \r 003\002\033\b\005 005 033 \r r,\r#\016\033\b\005\006 033\b\021\r 005 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 b\033 \005\016\033 033 \r 036\n\n\030 033\005 033 \002\033  033 \r 036\n\n\030 032\003\005\022\016#\r\022 020 002\031\013\005\003\b\033 \021 X 035 X b\004 033 \r 017\002\006\t 022\005\021 017\001 005\003 9\003\r\r\022\020 002\031\013\005\003\b\033 \021\037\024 023 \b\004 013\b%\r\004 033 \r 020\t\002,\b\004 005 033 \r 013\003\002\032 b\006 b\013\016\003\r 5\035\002\037\024 023 \r t\002,\b\004 004 \005\\004 033 \r 006\016\021\(\r\003 005 004\r\013\021\r\006\033\004 m user 002\031\031\005 b\006 033 \r 036\n\n\030\024 n\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\004\b\022\r 033 \r 003\004\033 005\(\004\r\003%\002\033\b\005\006 003\005\021 b\013\016\003\r 5\035\002\037 b\004 033 \002\033 033 \r 036\n\n\030 b\004 002 016\004\r!\016\031 004\033\003\016#\033\016\003\r\024 8\033 b\004 031\b\013 \033\t\ \033\024 005\003 m user  100 004\r\013\021\r\006\033\004 002\006\022 005\003 3 b\033\r\021\004 033 \r 036\n\n\030 005\006\004\016\021\r\004 005\006\031\020 002\(\005\016\033 024 r\013\002\(\020\033\r\004\024 D\016\033 b\033 002\006 003\b\006\013 002\(\005\016\033 002 004\032\r\r\022\016\032 003\005\021 002\003\005\016\006\022 2 033\b\021\r\004 033\005 002\(\005\016\033  033\b\021\r\004\024 006\022 005\003 m user J 37 004\r\013\021\r\006\033\004 035\033 \016\004 005\006\t 004\016\021\b\006\013 024 021\r\013\002\(\020\033\r\004\037 033 \r 004\032\r\r\022\016\032 002\006 r 002\(\005\016\033 7 033\b\021\r\004\024 023 \r 004\r#\005\006\022 005\(\004\r\003%\002\033\b\005\006 b\004 033 \002\033 002\004 r,\032\r#\033\r\022 033 \r 031\002\003\013\r\003 033 \r Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


  001 002\001 003\001 004\001 005\001 006\001 003\001 005\001 007\001 b\001 002\001\001 002\003\001 002\005\001 002\007\001 t\n\013\013\f\r\n\016\017\013\020\021\022\023\024\013\016\022\025\016\026\\n\017\023\025\017\023\016\027\023\022\030\025\r\022\016\022\030\013\016\\t\t\031 032\r\033\034\013\017\016\025\035\016\036\013\037\033\013 \022\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021 017\013\013\f     021 \f\025\033  021 013\020\021\022\023\024\013 036\n\013\013\f\r\n   001 001*\002 001*\003 001*\004 001*\005 001*\006 001*\007 001 003\001 005\001 007\001 b\001 002\001\001 002\003\001 002\005\001 002\007\001 032\r\033\034\013\017\016\025\035\016$\021 \f\023\f\021\022\013\016\003\,\023\022\013\033\036\013\022\036\016\017\013\020\021\022\023\024\013\016\\022\025\016\026\n\017\023\025\017\023\016\027\023\022\030\025\r\022\016\\022\030\013\016\t\t\031 032\r\033\034\013\017\016\025\035\016\036\013\037\033\013 \022\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021  021 \f\025\033     017\013\013\f 034 017\021$\022\023\025 025\035 021 \f\023\f\021\022\013 003,\023\022\013\033\036\013\022\036 025\022 n\017\r \013\f 001\002\003\004\005\006 036\b 037\017\017\006 \f\002!\006\013\006\016\016 r\017 f\020\006 016\006\003\021\006\013\f\022\f\002\r\013 022\025\003\r\005\002\f\020\021\016 002\031\016\r 005 m user  033 \r b\013 \r\003 b\004 033 \r 004\032\r\r\022\016\032\024 8\006\033\r\003\r\004\033\b\006\013\031\020 r%\r\006 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 002\006 005!!\r\003 002 004\032\r\r\022\016\032 033 \002\033 b\004 r\033\t 033\r\003 033 \002\006 002\006 005\003\022\r\003 005 021\002\013\006\b\033\016\022\r\024 8\006 033\r\003\021\004 005 033 \r 004\032\r\r\022\016\032 033 \r 003\002\006\027 b\006 022\r\004#\r\006\022\b\006\013 005\003\022\r\003 b\004 002\031\\002\020\004 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021 033 \r 017\001 002\031\013\005\003\b\033 \021 002\006\022 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021\024 023 \r 013\002\032\004 r\t 033 033 \r\021 005\032\r\006 016\032 013\003\002\022\016\002\031\031\020 002\004 m user r#\005\021\r\004 031\002\003\013\r\003\024 023 \r 004\032\r\r\022\016\032 002\006 r 022\b\003\r#\033\031\020 031\b\006\027\r\022 033\005 033 \r 006\016\021\(\r\003 005 002\006\t 022\b\022\002\033\r\004 033 \002\033 003\r"\016\b\003\r 003\r"\016\r\006#\020 005\016\006\033\b\006\013 b\024\r\024 002\006\022\b\022\002\033\r\004 033 \002\033 002\003\r 006\005\033 032\003\016\006\r\022 002\004\r\022 005\006 r"\016\002\033\b\005\006 0353\037\024 b\013\016\003\r 5\035\(\037 005\021\t 032\002\003\r\004 033 \r 006\016\021\(\r\003 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 r"\016\b\003\r\022 b\033 005\003 016\033 033 \r 036\n\n\030\024 013\002\b\006 033 \r 003\002\033\b\005 b\004 004 \005\\006 005\006 r 020\t 002,\b\004 033 \r 003\002\033\b\005 3 r\b\006\013 033 \r 002\004\r b\033 \005\016\033 033 \r 036\n\n\030\024 001\031\r\002\003\031\020 033 \r 036\n\n\030 032\003\005%\b\022\r\004 004\b\013\006\b'#\002\006\033 032\003\016\006\b\006\013\024 005\003 r,\002\021\032\031\r b\033 m user 150  002\006\022 033 \r 036\n\n\030 032\003\005\022\016#\r\022 020 033 \r 9\003\r\r\022\020 002\031\t 013\005\003\b\033 \021 005\006\031\020 002\(\005\016\033 I 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 r#\027\r\022 020 032\003\b\005\003\b 005\003\022\b\006\002\003\b\031\020 002\003\r 006\005\033 032\003\016\006\r\022 020 033 \r b\006!\005\003\021\002\033\b\005\006 027\r\032\033 b\006 033 \r 036\n\n\030\024 b\013\016\003\r 5\035\(\037 005\006\031\020 004 \005\\004 033 \r 003\r\022\016#\033\b\005\006 005\003 002\006\t 022\b\022\002\033\r t\b\033\r\021\004\r\033\004\024 023 \r 036\n\n\030 002\032\032\031\b\r\004 033\005 002\006\022\b\022\002\033\r 004\r\033\004 005 b\013 \r\003 002\003\022\b\006\002\031\b\033\b\r\004\024 9\b%\r\006 005\016\003 004\020\006\033 \r\033\b 022\002\033\002 004\r\033\004 033 \r 003\r\t 022\016#\033\b\005\006 005\003 b\013 \r\003 002\003\022\b\006\002\031\b\033\b\r\004 b\004 021\b\006\b\021\002\031\024 D\016\033 033 \b\004 b\004 006\005\033 002\004 006\r\013\002\033\b%\r 002\004 b\033 021\002\020 004\r\r\021 r#\002\016\004\r b\033 b\004  027\006\005 033 \002\033 033 \r 021\002\b\006 005\033\033\031\r\006\r#\027 005 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 b\004 005\006 b\033\004 032\003\005#\r\004\004\t b\006\013 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 370B 033 \b\004 b\004 032\003\r#\b\004\r\031\020 033 \r 002\003\r\002  036\n\n\030 r,#\r\031\004\024 023 \r 003\r\004\016\031\033\004 003\r\032\005\003\033\r\022 b\006 b\013\016\003\r 5 002\003\r 002\004\r\022 005\006 033 \r 003\r\013\016\031\002\003\t 004\020\006\033 \r\033\b 022\002\033\002 004\r\033 002\006\022 002 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 005 3I\024 8\006 002\022\022\b\t 033\b\005\006 r 002%\r r,\032\r\003\b\021\r\006\033\r\022 b\033 005\033 \r\003 022\002\033\002 004\r\033\004 021\r\006\033\b\005\006\r\022 016\003\r 004\033\003\002\033\r\013\020 n\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r n\032\r\r\022\016\032 017\002\006\022\005\021 0  02 006 0  00 004 2  6 006 0  1 017\001 2791 006 7 004 5  5 006 0  4 9\003\r\r\022\020 5439 006 6 004 5  9 006 0  3 021 r\017\013 036\022\017\021\022\013\037\023\013\036 027\023\022\030 p  006\001\001 026\020\(\003\b\022 004\033\003\002\033\r\013\020 n\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r n\032\r\r\022\016\032 017\002\006\022\005\021\t\017\001 521 006 2 004 4  3 006 0  0 017\002\006\022\005\021\t9\003\r\r\022\020 1051 006 1 004 5  2 006 0  1 034 0#\034\017\023\f 036\022\017\021\022\013\037\023\013\036 027\023\022\030 p  001 001\001\0011 p mid  003\001\001 001\002\003\004\005\006 b 006\003\021\006\013\f\022\f\002\r\013 r\016\f\016 004\005\006 022\013\032 020\023 024\005\002\032 016\f\005\022\f\006\003\002\006\016 002\f\020 m user 036 002\(\005%\r 002\006\022 002\003\b\005\016\004 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\004\024 031\r\002\004\r r!\r\003 033\005 005\016\003 033\r# \006\b#\002\031 003\r\032\005\003\033 3.0 005\003 021\005\003\r 022\r\033\002\b\031\004\024 5\036\(\036 002\006\007\b\006\t\n\013\n\f\r\t 020\r\031\n 8\006 031\b\013 \033 005 033 \r 004\b\013\006\b'#\002\006\033 004\032\r\r\022\016\032 005!!\r\003\r\022 020 002\006 036\n\n\030 033 \r 006\002\033\016\003\002\031 016\r\004\033\b\005\006 033\005 002\004\027 b\004  033 \b\004 004\032\r\r\022\016\032 b\004 002# \b\r%\r\022 020 002 b\013 005\021\032\b\031\r\t\033\b\021\r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033\024 023 \r 027\r\020 032\002\003\002\021\r\033\r\003\004 r\003\r 002\003\r p 002\006\022 m user 024 b\031\r r r,\032\r\003\b\t 021\r\006\033\r\022 b\033 \021\002\006\020 005\021\(\b\006\002\033\b\005\006\004 r 005\006\031\020 003\r\032\005\003\033 004\005\021\r 005 033 \r\021 r\031\005 022\016\r 033\005 002 031\002#\027 005 004\032\002#\r\024 005\003 r,\002\021\032\031\r b\013\016\003\r 7\035\002\037 003\r\032\005\003\033\004 033 \r 003\r\004\016\031\033\004 005\003 p 500 002\006\022 m user 40 024 00\006\020\n\f \006\t\006\031\031 r0 n\021\006 016\025\017\006 031\006\007\b\006\t\n\013\n\f\r\t 031\n\017\013\n\006\007\f\006\031\004 004 r,\t 032\r#\033\r\022 005\033 033 \r 017\001 002\006\022 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021\004 033\002\027\r 002 031\005\006\013 033\b\021\r 033\005 032\003\005\022\016#\r 033 \r 036\n\n\030\024 D\016\033 b\004 b\033 033\005\005 031\005\006\013G 8\004 033 \r 002\022\t 022\b\033\b\005\006\002\031 005\006\r\t\033\b\021\r 005\004\033 005 75/6 004\r#\005\006\022\004 005\003\033 \ \b\031\r 033\005 b\006\t 003\r\002\004\r 033 \r 004\032\r\r\022\016\032 003\005\021 0241 033\005 7\0246 005\003 003\024\032\002 021\b\006\b\006\013 016\r\003\020G 023 \r 002\006\004\\r\003 033\005 033 \b\004 016\r\004\033\b\005\006 b\004 004\016\(*\r#\033\b%\r 022\r\032\r\006\022\b\006\013 005\006 033 \r 003\r\031\002\033\b%\r b\021\032\005\003\033\002\006#\r 005 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 033\005 022\020\006\002\021\b 016\r\003\020 r,\r#\016\033\b\005\006 005\004\033 005\003 033 \r 004\032\r#\b 002\032\032\031\b#\002\033\b\005\006\024 8\033 002\031\004\005 022\r\032\r\006\022\004 005\006 033 \r 002\021\005\016\006\033 005 004\032\002#\r 033 \r 036\n\n\030 002\006 005##\016\032\020 b\024\r\024 033 \r 002\031\016\r 005 m user 024 8\006 013\016\003\r\004 r 022\r\031\b\(\r\003\002\033\r\031\020 033\002\027\r 002 004\021\002\031\031\r\003 002\031\016\r m user 40 033\005 002\031\031\005 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 032\003\005#\r\004\004 033\005 033\002\027\r 031\005\006\013\r\003\024 8 033 \r 002\032\032\031\b#\002\033\b\005\006 002\006 002!!\005\003\022 002 031\002\003\013\r\003 002\031\016\r 005 m user  033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 034\b\f.\t  033 \r 004\032\r\r\022\016\032 006\005\032\b\003\024\t\003\t 024 8\006 033 \b\004 002\004\r 033 \r 005\b#\r r#\005\021\r\004 021\005\003\r 005\(%\b\005\016\004 C 006\002\021\r\031\020 b\033 032\002\020\004 005 033\005 016\004\r 002 021\005\003\r r\031\002\(\005\003\002\033\r 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021 033\005 032\003\005\022\016#\r 002 b\013 \r\003\t"\016\002\031\b\033\020 036\n\n\030\024 00\006\020\n\f \006\t\006\031\031 r0 n\021\006 021\026\030\017\f\034 031\006\007\b\006\t\n\013\n\f\r\t 031\n\017\013\n\006\007\f\006\031\004 9\b%\r\006 033 \r 006\016\021\(\r\003\004 b\006 b\013\016\003\r 7\035\002\037 002 006\002\033\016\003\002\031 016\r\004\033\b\005\006 033\005 002\004\027 b\004 005  033 \r 021\005\003\r r\031\002\(\005\003\002\033\r 002\031\013\005\003\b\033 \021\004 004#\002\031\r 016\032 b\033 003\r\t 004\032\r#\033 033\005 p 024 8 b\033 033\002\027\r\004 75/6 004\r#\005\006\022\004 005\003 033 \r 9\003\r\r\022\020 002\031\013\005\t 003\b\033 \021 005\003 p  500 032\002\013\r\004 005 031\005\006\013 022\005\r\004 b\033 033\002\027\r 005\003 p  50 000 032\002\013\r\004G 035$\005\003 002 032\002\013\r 004\b\034\r 005 5 027\b\031\005\(\020\033\r\004 r\002# \032\002\013\r 002\006 005\006\033\002\b\006 003\005\016\013 \031\020 3 033\003\002\006\004\002#\033\b\005\006\004\024 023 \016\004 7  032\002\013\r\004 005\003\003\r\004\032\005\006\022 033\005 7 021\b\031\031\b\005\006 033\003\002\006\004\002#\033\b\005\006\004\024\037 023 \b\004 b\004 002\006 b\021\032\005\003\033\002\006\033 016\r\004\033\b\005\006 r#\002\016\004\r 022\002\033\002 021\b\006\b\006\013 002\032\032\031\b#\002\033\b\005\006\004 002\003\r 004\016\032\032\005\004\r\022 033\005 002%\r 002 016\013\r 006\016\021\(\r\003 005 033\003\002\006\004\002#\033\b\005\006\004 035\002\006\022 032\002\013\r\004\037\024 005\003\033\016\006\002\033\r\031\020 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 005\021\r\004 033\005 033 \r 003\r\004#\016\r\024 017\r#\002\031\031 003\005\021 b\013\016\003\r 7\035\002\037 033 \002\033 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033\002\027\r\004 002 006\r\013\031\b\013\b\(\031\r 002\021\005\016\006\033 005 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r 016\033 004\033\b\031\031 022\r\031\b%\r\003\004 003\r\002\004\005\006\002\(\031\r 004\032\r\r\022\016\032\024 023 \b\004 005\032\r\006\004 033 \r 032\005\004\004\b\(\b\031\b\033\020 005 020\(\003\b\022 004\r\013\021\r\006\033\002\033\b\005\006 004\033\003\002\033\r\013\b\r\004 005\003 031\002\003\013\r 002\031\016\r\004 005 p 024 b\013\016\003\r 7\035\(\037 004 \005\\004 033 \r 004\b\033\016\002\033\b\005\006 005\003 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 017\002\006\022\005\021\t\017\001 002\006\022 017\002\006\022\005\021\t9\003\r\r\022\020\024 030\005\003\r 004\032\r#\b'#\002\031\031\020 033 \r b\006\b\033\b\002\031 002\031\016\r 005 p b\004 7 024 023 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 033\005 016\b#\027\031\020 003\r\t 022\016#\r p 033\005 p mid 200 004\r\013\021\r\006\033\004\024 003\005\021 033 \002\033 032\005\b\006\033 005\006 r\b\033 \r\003 Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


  001*\002 002 002\001 002\001\001 002\001\001\001 001 002\001 003\001 004\001 005\001 006\001 007\001 t\013\037\033\013 \022\021\022\023\025 \016$\025\036\022\016\(\023 \016\\036\013$\025 \f\036 t\0232\013\016\025\035\016\034\r\034\034\020\013\016\020\023\036\022\016\\(\023 \016\n\013\017$\013 \022\021\037\013\016\025\035\016\f\025\033\021\\023 \016\023\022\013\033\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021  021 \f\025\033,&\017\013\013\f   021 \f\025\033  021 t\013\037\033\013 \022\021\022\023\025 022\023\033\013   004 004*\006 005 005*\006 006 001 002\001 003\001 004\001 005\001 006\001 007\001 t\n\013\013\f\r\n\016\017\013\020\021\022\023\024\013\016\022\025\016\026\\n\017\023\025\017\023\016\027\023\022\030\025\r\022\016\022\030\013\016\\t\t\031 t\0232\013\016\025\035\016\034\r\034\034\020\013\016\020\023\036\022\016\\(\023 \016\n\013\017$\013 \022\021\037\013\016\025\035\016\f\025\033\021\\023 \016\023\022\013\033\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021  021 \f\025\033,&\017\013\013\f   021 \f\025\033  034 t\n\013\013\f\r\n 001\002\003\004\005\006 b 037\017\017\006 \f\002!\006\013\006\016\016 r\017 f\020\006 024\004\024\024\025\006 025\002\016\f r f\002\021\002,\022\f\002\r\013 033 \r 017\001 005\003 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 033\005 004\r\031\r#\033 033 \r 006\002\031 m user 40 004\r\013\021\r\006\033\004\024 025\005\033\b#\r 033 \002\033 005\003 017\002\006\022\005\021\t\017\001 033 \r 033\005\033\002\031 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r 005\003 7  032\002\013\r\004 b\004 005\006\031\020 7.3 004\r#\005\006\022\004 002\004 004\016\032\032\005\004\r\022 033\005 263 004\r#\005\006\022\004 005\003 005\006\031\020 7 032\002\013\r\004 016\004\b\006\013 032\016\003\r\031\020 033 \r 017\001 002\031\t 013\005\003\b\033 \021\024 K\r\033 033 \r\003\r b\004 002 021\b\006\b\021\002\031 022\003\005\032 b\006 004\032\r\r\022\016\032\024 n\b\021\b\031\002\003 005\(\004\r\003%\002\033\b\005\006\004 002\006 r 005\(\033\002\b\006\r\022 005\003 017\002\006\022\005\021\t9\003\r\r\022\020\024 8\006 013\r\006\t r\003\002\031 013\b%\r\006 002 031\002\003\013\r b\006\b\033\b\002\031 p 002\031\016\r 002 013\005\005\022 004\033\003\002\033\r\013\020 b\004 033\005 016\004\r 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033\005 r\022\016#\r p 033\005 002 021\016# \004\021\002\031\031\r\003 p mid 002\031\016\r 035\r\024\013\024 r\033\\r\r\006 3 033\005 7 032\002\013\r\004\037 002\006\022 033 \r\006 033\005 016\004\r 002\006 r\031\002\(\005\003\002\033\r 002\031\013\005\003\b\033 \021 033\005 005\021\032\031\r\033\r 033 \r 004\r\013\021\r\006\033\002\033\b\005\006\024 00\006\020\n\f \006\t\006\031\031 r0 n\021\006 030\025\030\030$\006 f\031\n r\016\n\f\b\f\022\013\n\f\r\t\004 032\002\003\033 003\005\021 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 r 002\031\004\005 032\003\005\032\005\004\r 033 \r 016\(\(\031\r 031\b\004\033 r\016\003\b\004\t 033\b b\033 033 \r 005\(*\r#\033\b%\r 005 005#\016\004\b\006\013 033 \r 005\021\032\016\033\002\033\b\005\006 033\005 033 \r subop  002\031\016\r 005\006\031\020 033\005 033 \005\004\r b\033\r\021\004 033 \002\033 002\003\r 005\006 033 \r 016\(\(\031\r 031\b\004\033\024 b\013\016\003\r 1 004 \005\\004 033 \r 004\b\033\016\002\033\b\005\006 r\006 033 \r 016\(\(\031\r 031\b\004\033 002\004 005\003\021\r\022 002\004\r\022 005\006 033 \r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 024.7I 002\006\022 020\r\033 022\016\003\t b\006\013 016\r\003\020 r%\002\031\016\002\033\b\005\006 033 \r 002#\033\016\002\031 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 b\004 3I\024 023 \r t\002,\b\004 004 \005\\004 033 \r 002\003\020\b\006\013 004\b\034\r 005 033 \r 016\(\(\031\r 031\b\004\033 r,\t 032\003\r\004\004\r\022 002\004 033 \r 032\r\003#\r\006\033\002\013\r 005 k  033 \r 033\005\033\002\031 006\016\021\(\r\003 005 b\033\r\021\004 b\006 033 \r 022\005\021\002\b\006\024 023 \r 027\r\020 005\(\004\r\003%\002\033\b\005\006 b\004 033 \002\033 033 \r 004\r\013\021\r\006\033\002\t 033\b\005\006 005\004\033 b\004 022\003\002\004\033\b#\002\031\031\020 003\r\022\016#\r\022\024 005\003 r,\002\021\032\031\r 033 \r 017\002\006\022\005\021\t 9\003\r\r\022\020 020\(\003\b\022 004\033\003\002\033\r\013\020 b\033 033 \r 016\(\(\031\r 031\b\004\033 002\006 032\003\005\022\016#\r 002\006 036\n\n\030 b\006 002\(\005\016\033 3 004\r#\005\006\022\004 005 033\005\033\002\031 033\b\021\r 005\003 7 021\b\031\031\b\005\006 033\003\002\006\004\t 002#\033\b\005\006\004 035\b\024\r\024 7  032\002\013\r\004\037 002\004 005\032\032\005\004\r\022 033\005 3@73 004\r#\005\006\022\004 005\003 033 \002\033 b\033 \005\016\033 033 \r 016\(\(\031\r 031\b\004\033 035#!\024 b\013\016\003\r 7\035\(\037\037\024  004\b\021\b\031\002\003 003\r\022\016#\033\b\005\006 002\032\032\031\b\r\004 033\005 033 \r 017\002\006\022\005\021\t\017\001 020\(\003\b\022 004\033\003\002\033\r\013\020\024 023 \b\004 H H H H H H H b b b b b b b H H H H H H H b b b b b b b H H H H H H H b b b b b b b 013\t\034\r\b 013\t\034\r\b!&\027 013\t\034\r\b!1\017\006\006\034\026 1\017\006\006\034\026 031\002\003\013\r m user 002\006\022 004\027\r\\r\022 005\033 \r\003\\r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 002\006 b\004\004\016\r 005\033 \r\003\\r r\003\020 031\002\003\013\r p 005\033 \r\003\\r 001\002\003\004\005\006 b 034\006 \r\021\021\006\013\032\006\032 005\006 \002+\006 004 \005\\004 033 \002\033 033 \r 016\(\(\031\r 031\b\004\033 r\016\003\b\004\033\b b\004 r\003\020 r!!\r#\033\b%\r b\006 003\r\t 022\016#\b\006\013 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033\024 b\013\016\003\r 1\035\(\037 004 \005\\004 033 \002\033 r%\r\006 033 \005\016\013 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r b\004 004\b\013\006\b'#\002\006\033\031\020 003\r\022\016#\r\022 033 \r 016\002\031\b\033\020 005 033 \r 036\n\n\030 032\003\005\t 022\016#\r\022 020 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 b\004 006\005\033 005\021\032\003\005\021\b\004\r\022 004\b\013\006\b!\t b#\002\006\033\031\020\024 016\003\033 \r\003\021\005\003\r r%\r\006 033 \005\016\013 033 \r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 016\004\r\022 022\016\003\b\006\013 004\r\013\021\r\006\033\002\033\b\005\006 b\004 022\b!!\r\003\r\006\033 003\005\021 033 \r 005\006\r 016\004\r\022 002\033 016\r\003\020 r,\r#\016\033\b\005\006 033\b\021\r 033 \r 004\032\r\r\022\016\032 005!!\r\003\r\022 020 033 \r 036\n\n\030 b\004 004\033\b\031\031 004\b\013\006\b'#\002\006\033\024 004 r,\032\r#\033\r\022 033 \r 031\005\006\013\r\003 033 \r 016\(\(\031\r 031\b\004\033 033 \r b\013 \r\003 b\004 033 \r 016\002\031\b\033\020 005 033 \r 036\n\n\030 002\006\022 033 \016\004 033 \r 004\032\r\r\022\016\032\024 5\036,\036 002\025\b\b\013\017\026\004 005 017\006\020\r\b\b\006\t\034\006\034 017\006\020\f\016\006 8\006 004\016\021 r 002%\r 032\003\005%\b\022\r\022 r,\033\r\006\004\b%\r r,\032\r\003\b\021\r\006\033\002\031 003\r\004\016\031\033\004 r%\002\031\016\002\033\b\006\013 033 \r 002\003\b\005\016\004 032\003\005\032\005\004\r\022 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\006\022 r\016\003\b\004\033\b#\004\024 b\013\016\003\r 2 004 \005\\004 002 003\r#\b\032\r r 003\r#\005\021\021\r\006\022 005\003 022\r#\b\022\b\006\013 005\006 b 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021 033\005 016\004\r 005\003 002\003\b\005\016\004 027\b\006\022\004 005 002\032\032\031\b#\002\033\b\005\006\004\024 b\003\004\033 b 033 \r 002\032\032\031\b#\002\033\b\005\006 002\006 002!!\005\003\022 002 031\005\033 005 004\032\002#\r 005\003 033 \r 036\n\n\030 035\b\024\r\024 m user b\004 031\002\003\013\r\037 002\006\022 033 \r 022\002\033\002 b\004 004\027\r\\r\022 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 b b\004 033 \r 004\b\021\032\031\r\004\033 b\004 004\016!'#\b\r\006\033 005\003 004\r\013\021\r\006\033\002\033\b\005\006\024 036\033 \r\003 b 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 b\004 006\005\033 002\006 b\004\004\016\r 002\033 002\031\031 033 \r 9\003\r\r\022\020 002\031\t 013\005\003\b\033 \021 b\033 033 \r 016\(\(\031\r 031\b\004\033 b\004 033 \r 005\b#\r\024 026\005\\r%\r\003 b 033 \r 006\016\021\(\r\003 005 b\006\b\033\b\002\031 032\002\013\r\004 p b\004 031\002\003\013\r 033 \r\006  003\r#\005\021\021\r\006\022 r\b\033 \r\003 033 \r 017\002\006\022\005\021\t\017\001 005\003 033 \r 017\002\006\022\005\021\t9\003\r\r\022\020 002\031\013\005\003\b\033 \021 b\033 033 \r 016\(\(\031\r 031\b\004\033\024 7\036 f\031\020\025\031\031\f\r\t 8\006 032\003\r%\b\005\016\004 004\r#\033\b\005\006\004 r 002%\r 004 \005\\006 005 033 \r 036\n\n\030 r\031\032\004 033\005 b\021\032\003\005%\r 033 \r r!'#\b\r\006#\020 005 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 035\002\006 b\006\004\033\002\006#\r 005 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021\004\037\024 D\r\b\006\013 002 013\r\006\r\003\b 022\002\033\002 004\033\003\016#\033\016\003\r 033 \r 036\n\n\030 002\006 r r"\016\002\031\031\020 002\032\032\031\b#\002\(\031\r 033\005 033 \r 022\b\004#\005%\r\003\020 005 004\r"\016\r\006\033\b\002\031 032\002\033\033\r\003\006\004 r\032\b\004\005\022\r\004 005\006\004\033\003\002\b\006\r\022 003\r\t 016\r\006\033 004\r\033\004 r\033#\024 004 021\r\006\033\b\005\006\r\022 b\006 n\r#\033\b\005\006  033 \r 036\n\n\030 033\r# \t 006\b"\016\r b\004 003\002\033 \r\003 022\b!!\r\003\r\006\033 003\005\021 033 \r A\026 002\031\013\005\003\b\033 \021 370 002\006\022 033 \r 002\003\033\b\033\b\005\006 002\031\013\005\003\b\033 \021 320\024 D\016\033 002\006 005\(\004\r\003%\002\006\033 003\r\002\022\r\003 021\002\020 005\006\022\r\003 r\033 \r\003 033 \r 036\n\n\030 032\003\005%\b\022\r\004 r\033\033\r\003 032\003\016\006\b\006\013 033 \002\006 033 \r 033\\005 r,\b\004\033\b\006\013 002\031\013\005\003\b\033 \021\004\024 026\005\\r%\r\003 033 \b\004 b\004 033 \r 003\005\006\013 016\r\004\t 033\b\005\006 033\005 002\004\027 r#\002\016\004\r 033 \r 036\n\n\030 002\006 r 021\002\022\r 033\005 005\003\027 b\006 032\f\005 021\005\032\n\006\f\005  033 \r 033\\005 002\031\013\005\003\b\033 \021\004\024 017\r#\002\031\031 033 \002\033 033 \r A\026 002\031\013\005\003\b\033 \021 002\004 \r\004 002 k t\b\033\r\021\004\r\033 035\r\024\013\024 k 2 037 033\005 002 016#\027\r\033 b 021\002\020 r%\r\006\033\016\002\031\031\020 r 032\003\016\006\r\022 022\016\r 033\005 002\006 b\006\004\016!'#\b\r\006\033 006\016\021\(\r\003 005 b\033\r\021\004\r\033\004 r\b\006\013 002\004 \r\022 b\006\033\005 004\016 002 016#\027\r\033\024 026\005\\r%\r\003 b 002\006 036\n\n\030 b\004 016\004\r\022 004\b\021\016\031\033\002\006\r\005\016\004\031\020 033 \r\006 027\006\005\\006 b\006!\003\r"\016\r\006\033 k t\b\033\r\021\004\r\033\004 002\003\r 006\005\033 013\r\006\r\003\002\033\r\022 b\006 033 \r 003\004\033 032\031\002#\r\024 8\033\r\021\004\r\033\004 033 \002\033 032\002\004\004 033 \003\005\016\013 033 \r 032\003\016\006\b\006\013 020 033 \r 036\n\n\030 002\006 006\005 r 016\003\033 \r\003 032\003\016\006\r\022 020 033 \r A\026 002\031\013\005\003\b\033 \021\024  032\003\r\t 031\b\021\b\006\002\003\020 003\r\004\016\031\033 032\003\r\004\r\006\033\r\022 b\006 033 \r 005\031\031\005\\013 033\002\(\031\r 004 \005\\004 033 \r Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


002\022\022\b\033\b\005\006\002\031 r\006\r'\033 003\005\016\013 \033 020 002\006 036\n\n\030 035#\005\006\004\033\003\016#\033\r\022 016\004\b\006\013 033 \r 017\002\006\022\005\021\t\017\001 002\031\013\005\003\b\033 \021 b\033 m J 5 004\r\013\021\r\006\033\004\037 033\005 033 \r A\026 002\031\013\005\003\b\033 \021 b\033  214 016#\027\r\033\004\024 031\013\005\003\b\033 \021\004 017\016\006\033\b\021\r 025\005\024 005 C 2 A\026 b\033 \005\016\033 033 \r 036\n\n\030 4  01 006 0  13 004 6 A\026 b\033 \033 \r 036\n\n\030 1  96 006 0  01 004 35 026\r\003\r r\006 033 \r A\026 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 b\006 005\006*\016\006#\033\b\005\006 b\033 033 \r 036\n\n\030 033 \r 006\016\021\(\r\003 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 035 C 2 037 b\004 002\(\005\016\033 002\031 002\006\022 033 \r 004\032\r\r\022\016\032 b\004 002\(\005\016\033  033\b\021\r\004 035\ \r\006 005\021\032\002\003\r\022 033\005 033 \r A\026 002\031\013\005\003\b\033 \021 b\033 \005\016\033 033 \r 036\n\n\030\037\024 n\b\021\b\031\002\003\031\020 033 \r 036\n\n\030 002\006 003\b\006\013 002\022\022\b\033\b\005\006\002\031 r\006\r'\033\004 033\005 004\005\021\r 005\033 \r\003 002\031\013\005\003\b\033 \021\004\024 005\003 031\002#\027 005 004\032\002#\r  003\b\rL\020 022\b\004\t 016\004\004 r\031\005 005 033 \r 036\n\n\030 002\006 r 002\032\032\031\b#\002\(\031\r 033\005 033 \r 002\003\033\b\033\b\005\006 002\031\013\005\003\b\033 \021 320 002\006\022 033\005 033 \r A\r\032\033 ?\003\005*\r#\033 002\031\013\005\003\b\033 \021 30\024 005\003 033 \r 002\003\033\b\033\b\005\006 002\031\013\005\003\b\033 \021 b 002\006 036\n\n\030 b\004 016\b\031\033 005\003 r\002 032\002\003\033\b\033\b\005\006 033 \r r,\r#\016\033\b\005\006 033\b\021\r 005\003 r\002 032\002\003\033\b\033\b\005\006 b\031\031 r 004\b\013\t 006\b'#\002\006\033\031\020 003\r\022\016#\r\022 r#\002\016\004\r 027\006\005 031\005#\002\031 b\006!\003\r"\016\r\006\033 b\033\r\021\004\r\033\004 002\003\r 032\003\016\006\r\022 020 033 \r 036\n\n\030\024 023\005 b\021\032\003\005%\r 033 \r 032\r\003!\005\003\021\002\006#\r 016\003\t 033 \r\003 b 033 \r 036\n\n\030\004 005\003 002\031\031 033 \r 032\002\003\033\b\033\b\005\006\004 002\003\r 002%\002\b\031\002\(\031\r 033 \r\006 021\002\006\020 005 033 \r 013\031\005\(\002\031 002\006\022\b\022\002\033\r\004 035\b\024\r\024 b\033\r\021\004\r\033\004 033 \002\033 002\003\r 031\005#\002\031\031\020 003\r"\016\r\006\033 b\006 002 032\002\003\033\b\033\b\005\006\037 b 002\003\r 027\006\005 033\005 r 013\031\005\(\002\031\031\020 b\006\t 003\r"\016\r\006\033 b\033 \003\r\004\032\r#\033 033\005 033 \r 036\n\n\030\004 002\006 b\006 002#\033 r 032\003\016\006\r\022\024 017\r#\r\006\033\031\020 002 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021 002\031\031\r\022 A\r\032\033 \t 003\005*\r#\033 002\004 032\003\005\032\005\004\r\022 033\005 013\r\006\r\003\002\033\r 031\005\006\013 032\002\033\033\r\003\006\004 020 016\004\b\006\013 022\r\032\033 \t'\003\004\033 004\r\002\003 005\006 002 031\r,\b#\005\013\003\002\032 \b 033\003\r\r 005 b\033\r\021\004\r\033\004\024 030\005\003\r 032\003\r#\b\004\r\031\020 002\033 r\002 004\033\r\032 033 \r 002\031\013\005\003\b\033 \021 013\r\006\r\003\002\033\r\004 032\005\004\004\b\(\031\r 003\r\t 016\r\006\033 031\r,\b#\005\013\003\002\032 \b r,\033\r\006\004\b\005\006\004 035\b\024\r\024 002\006\022\b\022\002\033\r\004\037 005 002 033\003\r\r 006\005\022\r 002\006\022 033\r\004\033\004 005\003 003\r"\016\r\006#\020\024 8 002\006 036\n\n\030 b\004 016\004\r\022 004\b\021\016\031\t 033\002\006\r\005\016\004\031\020 033 \r\006 027\006\005\\006 b\006!\003\r"\016\r\006\033 002\006\022\b\022\002\033\r\004 002\006 r 032\003\016\006\r\022 r!\005\003\r 033 \r 003\r"\016\r\006#\020 005\016\006\033\b\006\013\024 8\036 027\r\t\020$\025\031\f\r\t\031 8\006 033 \b\004 032\002\032\r\003 r 032\003\005\032\005\004\r\022 002 031\b\013 \033\t\\r\b\013 \033 004\033\003\016#\033\016\003\r 002\031\031\r\022 005\032\033\b\021\b\034\r\022 004\r\013\021\r\006\033 004\016\032\032\005\003\033 021\002\032 035\036\n\n\030\037\024 8\006 002\022\022\b\033\b\005\006 033\005 b\021\t 032\003\005%\b\006\013 033 \r 032\003\016\006\b\006\013 b\006 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021\004 b\033 002\031\004\005 032\003\005%\b\022\r\004 022\b\003\r#\033 b\006!\005\003\021\002\033\b\005\006 002\(\005\016\033 033 \r 002\003\b\002\(\b\031\b\033\020 005 003\r"\016\r\006\t b\r\004 b\006 022\b!!\r\003\r\006\033 004\r\013\021\r\006\033\004 005 033 \r 033\003\002\006\004\002#\033\b\005\006\004\024 H\006\031\b\027\r 021\002\006\020 002\031\013\005\003\b\033 \021\004 b 002\006\006\005\033 002\006\022\031\r 004\027\r\\r\022 022\002\033\002 033 \r 004\033\003\r\006\013\033 005 033 \r 036\n\n\030 b\004 033\005 r,\032\031\005\b\033 033 \r 002\003\b\002\(\b\031\b\033\020\024 001\005\006#\r\003\006\b\006\013 033 \r 036\n\n\030 r 004\033\016\022\b\r\022 033\\005 021\002\b\006 032\003\005\(\031\r\021\004 035\b\037 033 \r 021\b\006\b\021\016\021 006\016\021\(\r\003 005 004\r\013\021\r\006\033\004 005\003 002\006 036\n\n\030 033\005 b\006#\016\003 006\005 031\005\004\004 b\006 002##\016\t 003\002#\020 035\033 \r 004\r\013\021\r\006\033 021\b\006\b\021\b\034\002\033\b\005\006 032\003\005\(\031\r\021\037 002\006\022 035\b\b\037 033 \r r\004\033 005\021\032\005\004\b\033\b\005\006 005 033 \r 004\r\013\021\r\006\033\004 013\b%\r\006 002 016\004\r\003\t\022\r\033\r\003\021\b\006\r\022 006\016\021\t r\003 005 004\r\013\021\r\006\033\004 035\033 \r 005\006\004\033\003\002\b\006\r\022 004\r\013\021\r\006\033\002\033\b\005\006 032\003\005\(\031\r\021\037\024 005\003 033 \r 003\004\033 032\003\005\(\031\r\021 r 032\003\005%\b\022\r\022 002 033 \005\003\005\016\013 002\006\002\031\020\004\b\004 002\006\022 002\003\022\006\r\004\004 003\r\004\016\031\033\004 004 \005\\b\006\013 033 \002\033 006\005 031\005\004\004 b\006 002##\016\003\002#\020 016\004\b\006\013 033 \r 036\n\n\030 003\r"\016\b\003\r\004 033\005\005 021\002\006\020 004\r\013\021\r\006\033\004 b\006 013\r\006\r\003\002\031\024 005\003 033 \r 004\r#\005\006\022 032\003\005\(\031\r\021 r 022\r%\r\031\005\032\r\022 033 \r r\016\003\b\004\033\b 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\031\031\r\022 033 \r 017\002\006\022\005\021 017\001 002\006\022 9\003\r\r\022\020 002\031\013\005\003\b\033 \021\004\024 023\005 016\003\033 \r\003 003\r\022\016#\r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 r 032\003\005\032\005\004\r\022 005\032\033\b\021\b\034\002\t 033\b\005\006\004 033 \002\033 016\004\r 002 016\(\(\031\r 031\b\004\033 002\006\022 003\016\006 033 \r 002\031\013\005\003\b\033 \021\004 b\006 002 020\(\003\b\022 002\004 \b\005\006\024 036\016\003 r,\032\r\003\b\021\r\006\033\002\031 003\r\004\016\031\033\004 002\003\r 004\033\003\005\006\013 b\006\022\b#\002\033\b\006\013 033 \002\033 005\003 002 004\021\002\031\031 036\n\n\030 035\r\024\013\024 024 021\r\013\002\(\020\033\r\004\037 033 \r 004\032\r\r\022\016\032 002\006 r r\003\020 004\b\013\006\b'#\002\006\033 035\r\024\013\024 7 033\b\021\r\004\037 020\r\033 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 b\004 004\021\002\031\031 035\r\024\013\024 3 004\r#\005\006\022\004 005\003 7 021\b\031\031\b\005\006 033\003\002\006\004\002#\033\b\005\006\004\037\024 r 005\006#\031\016\022\r\022 020 032\003\r\004\r\006\033\b\006\013 002 003\r#\005\021\021\r\006\022\r\022 003\r#\b\032\r 005\003 002\003\b\005\016\004 b\003#\016\021\004\033\002\006#\r\004\024 b\031\r 005\016\003 r,\032\r\003\b\021\r\006\033\004 r\003\r 002\004\r\022 005\006 006\022\t b\006\013 003\r"\016\r\006\033 004\r\033\004 016\004\b\006\013 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 b\033 b\004 b\021\032\005\003\t 033\002\006\033 033\005 003\r\021\r\021\(\r\003 033 \r 013\r\006\r\003\002\031\b\033\020 005 033 \r 036\n\n\030 8\033 b\004 002\032\032\031\b#\002\t 031\r 033\005 021\002\006\020 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021\004 035\021\002\006\020 005 b 002\003\r 031\b\004\033\r\022 b\006 033 \r b\006\033\003\005\022\016#\033\b\005\006\037\024 r r,\032\r#\033 033 \r 036\n\n\030 033\005 r r"\016\002\031\031\020 r!!\r#\033\b%\r 005\003 033 \005\004\r 002\031\013\005\003\b\033 \021\004\024 0060\006\017\006\t\020\006\031 30 017\024\001\024 013\002\003\\002\031 001\024\001\024 013\013\002\003\\002\031 002\006\022 M\024M\024M\024 003\002\004\002\022\024 A\r\032\033 '\003\004\033 013\r\006\t r\003\002\033\b\005\006 005 031\005\006\013 032\002\033\033\r\003\006\004\024 8\006 b\f\032  025  032 3@4N334\024 0 017\024 013\003\002\\002\031 023\024 8\021\b\r\031\b\006\004\027\b 002\006\022 024 n\\002\021\b\024 030\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004 r\033\\r\r\006 004\r\033\004 005 b\033\r\021\004 b\006 031\002\003\013\r 022\002\033\002\(\002\004\r\004\024 8\006 b\f\032 9 035>>\026  032\032 2N.31\024 0 017\024 013\003\002\\002\031 026\024 030\002\006\006\b\031\002 r\033 002\031\024 002\004\033 022\b\004#\005%\r\003\020 005 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024 034\007\024\005\032\003\t 006\005 005\f1\020\003\034!\003 006\t\032\f\007\003\b\013 024\005\034 024\n\024 030\006\005\006\005  032 2N/.4\024 8;\0308\023 003\r\004\004 3661\024 50 017\024 013\003\002\\002\031 002\006\022 017\024 n\003\b\027\002\006\033\024 030\b\006\b\006\013 004\r"\016\r\006\033\b\002\031 032\002\033\033\r\003\006\004\024 8\006 b\f\032  035>>A  032 N35\024 70 017\024O\024 D\002\020\002\003\022\005\024 E!'#\b\r\006\033\031\020 021\b\006\b\006\013 031\005\006\013 032\002\033\033\r\003\006\004 003\005\021 022\002\033\002\(\002\004\r\004\024 8\006 b\f\032 9 035>>B  032 47N6/\024 10 n\024 D\003\b\006 017\024 030\005\033\\002\006\b 002\006\022 001\024 n\b\031%\r\003\004\033\r\b\006\024 D\r\020\005\006\022 021\002\003\027\r\033 002\004\027\r\033 9\r\006\r\003\002\031\b\034\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004 033\005 005\003\003\r\031\002\033\b\005\006\004\024 8\006 b\f\032 9\6\030 035>>C  032 17N.21\024 20 9\024 9\003\002 \006\r f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 002\006\022 P\024 002\006\013\024 E!'#\b\r\006\033 021\b\006\b\006\013 005 005\006\004\033\003\002\b\006\r\022 005\003\003\r\031\002\033\r\022 004\r\033\004\024 8\006 b\f\032 017 025  032 73.N7.3\024 40 O\024 026\002\006 O\024 r\b 002\006\022 K\024 K\b\006\024 030\b\006\b\006\013 003\r"\016\r\006\033 032\002\033\033\r\003\006\004 b\033 \005\016\033 002\006\022\b\t 022\002\033\r 013\r\006\r\003\002\033\b\005\006\024 8\006 b\f\032 9 025  032 3N3.\024 60 001\024 026\b\022\(\r\003\024 036\006\031\b\006\r 002\004\004\005#\b\002\033\b\005\006 003\016\031\r 021\b\006\b\006\013\024 8\006 b\f\032 9 035  032\032 357N371\024 3@0 f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 001\024\007\024\t\n\024 f\r\016\006\013 002\006\022 017\024\023\024 025\013\024 023 \r 004\r\013\021\r\006\033 004\016\032\t 032\005\003\033 021\002\032 n#\002\031\002\(\031\r 021\b\006\b\006\013 005 003\r"\016\r\006\033 b\033\r\021\004\r\033\004\024 9 020\f b\024\n\006\f\005\t   035.\037 032\032 3N.2 A\r#\024 024 330 f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 017\024 025\013 r\033 002\031\024 036\032\033\b\021\b\034\002\033\b\005\006 005 005\006\004\033\003\002\b\006\r\022 003\r\t 016\r\006\033 004\r\033 016\r\003\b\r\004 002\003\b\002\(\031\r 005\006\004\033\003\002\b\006\033\004\024 8\006 b\f\032 9\6\030 035  032 372N314\024 3.0 001\024\007\024\t\n\024 f\r\016\006\013 017\024\023\024 025\013 002\006\022 026\024 030\002\006\006\b\031\002\024 023 \r 005\032\033\b\021\b\034\r\022 004\r\013\021\r\006\033 004\016\032\032\005\003\033 021\002\032 005\003 033 \r 021\b\006\b\006\013 005 003\r"\016\r\006\033 032\002\033\033\r\003\006\004\024 023\r# \006\b#\002\031 017\r\t 032\005\003\033 001\n 023\017\t.@@3\t34 023 \r H\006\b%\r\003\004\b\033\020 005 D\003\b\033\b\004 001\005\031\016\021\(\b\002 001\002\006\002\022\002 3\024 3/0 026\024 030\002\006\006\b\031\002 026\024 023\005\b%\005\006\r\006 002\006\022 0248\024 M\r\003\027\002\021\005\024 A\b\004#\005%\r\003\020 005 003\r"\016\r\006\033 r\032\b\004\005\022\r\004 b\006 r%\r\006\033 004\r"\016\r\006#\r\004\024 024\n\024 030\006\005\006\005 024\005\034 005\f1\020\003\034!\003 006\t\032\f\007 003\b\013  035 035/\037 032\032 76N.46 n\r\032\033\024 3662\024 350 017\024\023\024 025\013 f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 r\033 002\031\024 E,\032\031\005\003\002\033\005\003\020 021\b\006\b\006\013 002\006\022 032\003\016\006\b\006\013 005\032\033\b\021\b\034\002\033\b\005\006\004 005 005\006\004\033\003\002\b\006\r\022 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024 8\006 b\f\032 9\6\030 035>>B  032 3/N.5\024 370 O\024\n\024 002\003\027 030\024\t\n\024 001 \r\006 002\006\022 024\n\024 K\016\024 H\004\b\006\013 002 002\004 \t\(\002\004\r\022 021\r\033 \005\022  033\003\002\006\004\002#\033\b\005\006 033\003\b\021\021\b\006\013 005\003 021\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024  001  9 0357\037 032\032 43/N4.7 n\r\032\033\024;\036#\033\024 3662\024 310 025\024 002\004"\016\b\r\003 K\024 D\002\004\033\b\022\r r\033 002\031\024 A\b\004#\005%\r\003\b\006\013 003\r"\016\r\006\033 031\005\004\r\022 b\033\r\021\004\r\033\004 005\003 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024 8\006 b\f\032 017:\001 035  032 64N531\024 320 024 n\002%\002\004\r\003\r E\024 036\021\b\r#\b\006\004\027\b 002\006\022 n\024 025\002%\002\033 \r\024 006 r!'#\b\r\006\033 002\031\013\005\t 003\b\033 \021 005\003 021\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004 b\006 031\002\003\013\r 022\002\033\002\(\002\004\r\004\024 8\006 b\f\032 D:\016 035>>A  032 5/.N55/\024 340 001\024 n\b\031%\r\003\004\033\r\b\006 n\024 D\003\b\006 r\033 002\031\024 n#\002\031\002\(\031\r 033\r# \006\b"\016\r\004 005\003 021\b\006\b\006\013 002\016\004\002\031 004\033\003\016#\033\016\003\r\004\024 8\006 b\f\032 031D:\016 035>>B  032 765N1@7\024 360 017\024 n\003\b\027\002\006\033 Q\024 M\016 002\006\022 017\024 013\003\002\\002\031\024 030\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006\004 003\016\031\r\004 b\033 b\033\r\021 005\006\004\033\003\002\b\006\033\004\024 8\006 b\f\032  035>>C  032 12N2/\024 0 030\024O\024 R\002\027\b 002\006\022 007\024 9\005\016\022\002\024 002\004\033 r\003\033\b#\002\031 021\b\006\b\006\013 016\004\b\006\013 022\b!!\004\r\033\004\024 023\r# \t 006\b#\002\031 017\r\032\005\003\033 3\t3 017\r\006\004\004\r\031\002\r\003 005\031\020\033\r# \006\b 8\006\004\033\b\033\016\033\r H\n 3\024 30 030\024O\024 R\002\027\b 002\006\022 001\024\tO\024 026\004\b\002\005\024 001\026+\017\030 006 r!'#\b\r\006\033 002\031\013\005\003\b\033 \021 005\003 031\005\004\r\022 002\004\004\005#\b\002\033\b\005\006 003\016\031\r 021\b\006\b\006\013\024 023\r# \006\b#\002\031 017\r\032\005\003\033 66\t3 017\r\006\004\004\r\031\002\r\003 005\031\020\033\r# \006\b 8\006\004\033\b\033\016\033\r H\n 3666\024 Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


expect this optimization to be of greatest bene\336t when the transaction sizes are large r example if our transaction is T 000 f A\000 B 000 C\000 D\000 E g  k 000 3 fan-out 000 2 then all the 3-subsets of T are f ABC,ABD,ABE,ACD,ACE,ADE,BCD,BCE,BDE,CDE g  Figure 2 shows the candidate hash tree C 3  We ave to increment the support of every subset of T contained in C 3  We egin with the subset AB C  and hash to node 11 and process all the itemsets In this downward path from the root we mark nodes 1 4 and 11 as visited We then process subset AD B  and mark node 10 Now consider the subset CDE  We see in this case that node 1 has already been marked and we can preempt the processing at this very stage This approach can r consume a lot of memory r a n fan-out F  for iteration k  e need additional memory of size F k to store the 337ags In the parallel implementation we have to keep a VISITED 336eld for each processor bringing the memory requirement to P\000F k  This can still get very large especially with increasing number of processors In we sho w a mechanism by which further reduces the memory requirement to only k 000F  The approach in the parallel setting yields a total requirement of k 000F 000P  5 Experimental Evaluation Database T I D Total Size T5.I2.D100K 5 2 100,000 2.6MB T10.I4.D100K 10 4 100,000 4.3MB T15.I4.D100K 15 4 100,000 6.2MB T20.I6.D100K 20 6 100,000 7.9MB T10.I6.D400K 10 6 400,000 17.1MB T10.I6.D800K 10 6 800,000 34.6MB T10.I6.D1600K 10 6 1,600,000 69.8MB Table 2 Database properties 5.1 Experimental Setup All the experiments were performed on a 12-node SGI Power Challenge shared-memory multiprocessor Each node is a MIPS processor running at 100MHz There\325s a total of 256MB of main memory The primary cache size is 16 KB 64 bytes cache line size with different instruction and data caches while the secondary cache is 1 B 128 bytes cache line size The databases are stored on an attached 2GB disk All processors run IRIX 5.3 and data is obtained from the disk via an NFS 336le server We used different synthetic databases with size ranging form 3MB to 70MB 2  and are generated using the procedure described in These databases mimic the transactions in a retailing en vironment Each transaction has a unique ID followed by a list of items bought in that transaction The 2 While results in this section are only shown for memory resident databases the concepts and optimization are equally applicable for non memory resident databases In non memory resident programs I/O becomes an important problem Solutions to the I/O problem can be applied in combination with the schemes presented in this paper These solutions are part of future research 11 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


  0 500 1000 1500 2000 2500 0 2 4 6 8 10 12 Number of Large Itemsets Iterations Large Itemset at Support = 0.5 222T5.I2.D100K\222  222T10.I4.D100K\222   222T15.I4.D100K\222   222T20.I6.D100K\222   222T10.I6.D400K\222   222T10.I6.D800K\222   222T10.I6.D1600K\222  Figure 3 Large Itemsets per Iteration data-mining provides information about the set of items generally bought together Table 2 shows the databases used and their properties The number of transactions is denoted as jD j  average transaction size as j T j  and the average maximal potentially large itemset size as j I j  The number of maximal potentially large itemsets j L j 000 2000 and the number of items N 000 1000 We refer the reader to for more detail on the database generation All the e xperiments were performed with a minimum support value of 0.5 and a leaf threshold of 2 i.e max of 2 itemsets per leaf We note that the  improvements shown in all the experiments except where indicated do not take into account initial database reading time since we speci\336cally wanted to measure the effects of the optimizations on the computation Figure 3 shows the number of iterations and the number of large itemsets found for different databases In the following sections all the results are reported for the CCPD parallelization We do not present any results for the PCCD approach since it performs very poorly and results in a speed-down on more than one processor 3  5.2 Aggregate Parallel Performance Table 3 s actual running times for the unoptimized sequential and a naive parallelization of the base algorithm Apriori for 2,4 and 8 processors without any f the techniques descibed in sections 3 and 4 In this section all the graphs showing  improvements are with respect to the data for one processor in table 3 Figure 4 presents the speedups obtained on different databases and different processors for the CCPD parallelization The results presented on CCPD use all the optimization discussed 3 Recall that in the PCCD approach every processor has to read the entire database during each iteration The resulting I/O costs on our system were too prohibitive for this method to be  12 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


Database 1 proc 2 procs 4 procs 8 procs T5.I2.D100K 20 17 12 10 T10.I4.D100K 96 70 51 39 T15.I4.D100K 236 168 111 78 T20.I6.D100K 513 360 238 166 T10.I6.D400K 372 261 165 105 T10.I6.D800K 637 435 267 163 T10.I6.D1600K 1272 860 529 307 Table 3 Naive Parallelization of Apriori seconds   0 2 4 6 8 10 12 0 2 4 6 8 10 12 Speedup Number of Processors CCPD Ideal  T5.I2.D100K.t2   T10.I4.D100K.t2   T15.I4.D100K.t2   T20.I6.D100K.t2   T10.I6.D400K.t2   T10.I6.D800K.t2   T10.I6.D1600K.t2    0 2 4 6 8 10 12 0 2 4 6 8 10 12 Speedup Number of Processors CCPD : With Reading Time Ideal  T5.I2.D100K.t2   T10.I4.D100K.t2   T15.I4.D100K.t2   T20.I6.D100K.t2   T10.I6.D400K.t2   T10.I6.D800K.t2   T10.I6.D1600K.t2  Figure 4 CCPD Speed-up a without reading time b with reading time 13 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


Reading  f Total Time Database Time P 000 1 P 000 2 P 000 4 P 000 8 P 000 12 T5.I2.D100K 9.1s 39.9 43.8 52.6 56.8 59.0 T10.I4.D100K 13.7s 15.6 22.2 29.3 36.6 39.8 T15.I4.D100K 18.9s 8.9 14.0 21.6 29.2 32.8 T20.I6.D100K 24.1s 4.9 8.1 12.8 18.6 22.4 T10.I6.D400K 55.2s 16.8 24.7 36.4 48.0 53.8 T10.I6.D800K 109.0s 19.0 29.8 43.0 56.0 62.9 T10.I6.D1600K 222.0s 19.4 28.6 44.9 59.4 66.4 Table 4 Database Reading Time in section 4 320 computation balancing hash tree balancing and short-circuited subset checking The 336gure on the left presents the speed-up without taking the initial database reading time into account We observe that as the number of transactions increase we get increasing speed-up with a speed-up of more than 8 n 2 processors for the largest database T10.I6.D1600K with 1.6 million transactions r if we were to account for the database reading time then we get speed-up of only 4 n 2 processors The lack of linear speedup can be attributed to false and true sharing for the heap nodes when updating the subset counts and to some extent during the heap generation phase Furthermore since variable length transactions are allowed and the data is distributed along transaction boundaries the workload is not be uniformly balanced Other factors like s contention and i/o contention further reduce the speedup Table 4 shows the total time spent reading the database and the percentage of total time this constitutes on different number of processors The results indicate that on 12 processors up to 60 of the time can be spent just on I/O This suggest a great need for parallel I/O techniques for effective parallelization of data mining applications since by its very nature data mining algorithms must operate on large amounts of data 5.3 Computation and Hash Tree Balancing Figure 5 shows the improvement in the performance obtained by applying the computation balancing optimization discussed in section 3.1.2 and the hash tree balancing optimization described in section 4.1 The 336gure shows the  improvement r a run on the same number of processors without any optimizations see Table 3 Results are presented for different databases and on different number of processors We 336rst consider only the computation balancing optimization COMP using the multiple equivalence classes algorithm As expected this doesn\325t improve the execution time for the uni-processor case as there is nothing to balance r it is very effective on multiple processors We get an improvement of around 20 on 8 processors The second column for all processors shows the bene\336t of just balancing the hash tree TREE using our bitonic hashing the unoptimized version uses the simple mod d hash function Hash tree balancing by itself is an extremely effective optimization It s the performance by about 30 n n uni-processors On smaller databases and 8 processors r t s not as 14 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


