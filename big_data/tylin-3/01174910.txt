Information Flow Control among Objects: Taking Foreign Objects into Control  Shih-Chien Chou Department of Computer Science and Information Engineering National Dong Hwa University, Taiwan E-Mail: scchou@mail.ndhu.edu.tw   Abstract  This paper proposes a model to control information flows among objects. It improves flexibility of the control by independently assigning security levels to attributes, arguments, and return values. It uses associations and multiple labels to control information flows among objects that may be 
dynamically instantiated during program execution According to our survey, no model offers the control as precisely as our model does. In addition to controlling objects, the model also controls foreign objects, which are those dynamically retrieved for reuse during program execution. Rules are designed to prevent foreign objects from becoming Trojan horses Keywords Information flow, information flow control, security  1. Introduction  Quite a few models have been developed for information flow control [1-11, 14, 17, 19-23, 25 
28-32, 34 w h i c h prev e n t s i n f o r m at i o n l e a k ag e  within an application. Approaches to information flow control include discretionary access control DAC\mandatory access control \(MAC\9  and forms other than DAC and MAC [1-5  DAC fails to avoid Trojan horses [2-4 w h ic h  motivated the research of MAC. MAC is criticized as too restricted   T h is cau s es s o m e res earch es to  provide flexibility to MAC [10-11, 23, 28 d so m e  use a form other than MAC and DAC [1-5 Recently, many models control information flows in object-oriented or object-based systems [10-11, 19 
21-23, 28, 31i n ce ob j e ct s  m a y be d y n a m i cal l y  instantiated during program execution, controlling information flows among objects is difficult. That control, however, is necessary. For example, if a manager and a worker are friends, they can read each other\222s general information, such as address, age, and so on. On the other hand, if they are not friends, the manager can read the worker\222s general information but not vice versa. In this example, information flow control between a manager and his worker friend and 
that control between a manager and a worker who is not his friend are different. According to our survey no model can precisely control information flows in this example Another problem association with information flow control is controlling foreign objects. Here a foreign object is an object not implemented by programmers. For example, objects dynamically retrieved for reuse by a CORBA brok foreign objects. Although an information flow control model is difficult to apply to the pre-existing 
foreign objects, the objects should still be controlled Otherwise, they may become Trojan horses Currently, we cannot identify a model that controls foreign objects We designed a model that controls information flows among objects using associations and method limitations. It also controls foreign objects and offers important features such as declassification [1-4  purpose-oriented method invocation [21-22, 31  write access cont n d s o on T h is paper  describes the control of information flows among objects and foreign objects. Other features will be 
described elsewhere  2. Example  This section describes an example used throughout the paper. Suppose in a company, a worker may be assigned to one or more managers for monitoring purposes. When a manager monitors a worker assigned to him, the manager can read the worker\222s general information, hour pay, and work hours. If the manager browses the worker\222s information for non-monitoring purpose, the manager can only read 
Proceedings of t he 36th Ha waii International Conf erence on S y st e m Sciences \(HICSS\22203 0 76 95 18 745/0 3 1 7.00 251 20 02  I E EE 


the worker\222s general information. If a worker is not assigned to a manager, the manager can only read the worker\222s general information. If a worker and a manager are friends, they can read each other\222s general information. Periodically, foreign objects are invoked to compute the salaries and taxes of workers A worker\222s salary is computed using his work hours hour pay, and a private equation, whereas his tax is computed using his salary and a well-known equation. Here we suppose that a worker\222s salary and tax can only be accessed by himself  worker manager assigned not assigned Legend class relationship Figure 1. Class relationships for the example friend obtain tax foreign class 2 obtain salary foreign class 1  manager self_general_info worker_general_info worker_work_hour worker_hour_pay get_self_general_info get_others_general_info monitor browse worker self_general_info others_general_info hour_pay work_hour salary_equation salary tax get_info get_self_general_info get_others_general_info compute_salary compute_tax foreign class 2 worker_salary worker_tax compute_worker_tax foreign class 1 worker_hour_pay worker_work_hour worker_salary_eq worker_salary compute_worker_salary Figure 2. Class diagram for the example  We use Figure 1 to show the relationships among the classes worker, manager, and foreign classes. We also model the example in a class diagram shown in Figure 2, in which arrows are invocation relationships. Since the details of the foreign objects may be unknown, we only show the attributes and methods we need. To model this example, an information flow control model should control objects and foreign objects, as described below 1. Control objects As stated in the example, the information flows between a worker and a manager are different in the following cases: \(a\when the manager is monitoring the worker, \(b\when the manager is not monitoring the worker, and \(c\hen the worker and the manager are friends. Information flows between managers and workers should be precisely controlled to differentiate the above cases 2. Control foreign objects In the example, we use two foreign classes \(in fact, they may be the same class\ to compute worker salary and tax, respectively. Since the details of a foreign class are unknown, improper use of the classes\222 instances \(i.e., objects\ may cause them to become Trojan horses. For example after a worker invokes the instance \223fo1\224 of 223foreign class 1\224 to compute his salary, the worker\222s work hours, hour pay, and equation may be recorded in \223fo1\224. If \223fo1\224 is not controlled, it may leak the worker\222s private information  3. Association, method limitation, and foreign object control  Our model uses association [13, 18 d m e t h od  limitation to control information flows among objects and uses rules to control foreign objects  3.1 Association and method limitation  In an object-oriented system, relationships exist among classes \(see Figure 1 for an example\e call a relationship among classes an association When an object-oriented program is executed, classes can be instantiated to create objects and associations can be instantiated to link objects. For example \(see Figure 1\e can instantiate an object \223manager1\224 from the class \223manager\224, an object \223worker1\224 from the class 223worker\224, and an instance of the association 223assigned\224 to link \223manager1\224 and \223worker1\224 Objects linked by an association are regarded as coexisting in an association group \(AG\ according to the association For example, \223manager1\224 and 223worker1\224 just mentioned coexist in an AG according to the association \223assigned\224. Note that objects may coexist in more than one AG. For example, a manager and a worker may coexist in the AGs respectively according to \223assigned\224 and 223friend\224 \(i.e., the worker is assigned to the manager and they are friends After grouping objects into AGs, security policies can be defined. In our model, an AG according to an association obeys the policy required by the Proceedings of t he 36th Ha waii International Conf erence on S y st e m Sciences \(HICSS\22203 0 76 95 18 745/0 3 1 7.00 251 20 02  I E EE 


association. Nevertheless, using association is not enough. We use two cases below to explain this. In the first case, \223manager1\224 and \223worker2\224 coexist in an AG according to the association \223friend\224. This allows the worker to invoke the manager\222s method 223get_self_general_info\224 \(see Figure 2 manager\222s general information. In the second case 223manager1\224 and \223worker3\224 are not friends. This disallows the worker to read the manager\222s general information. To make sure that information flows in the above two cases are correctly controlled, method invocation should be limited. Only when a manager and a worker coexist in an AG according to the association \223friend\224, the worker can invoke the manager\222s method \223get_self_general_info\224. We thus attach a method limitation \(ML\ to each method. A ML is composed of associations. If \223association1\224 belongs to the ML of the method \223obj1.md1\224 223obj1.md1\224 can be invoked by the methods of the object \223obj2\224 if \223obj1\224 and \223obj2\224 coexist in an AG according to \223association1\224 With AGs and MLs, we use the following rules to justify whether the method \223obj2.md2\224 can invoke the method \223obj1.md1\224. Here we suppose that the ML of \223obj1.md1\224 is \223ML1\224 Rule 1: If \223obj1\224 and \223obj2\224 do not coexist in any AG the invocation is blocked. That is, information flows among objects without any relationship is prohibited Rule 2: If \223obj1\224 and \223obj2\224 coexists in an AG according to the association \223association1\224, then the invocation is allowed if \223association1\224 belongs to \223ML1\224 Rule 3: If \223obj1\224 and \223obj2\224 coexists in more than one AG, the invocation is allowed if one or more of the AGs fulfill the requirement of the previous rule  To make the third rule clear, we suppose that 223worker1\224 is assigned to \223manager1\224 and they are friends. Then, \223manager1\224 can invoke the methods of 223worker1\224 by playing either the role of a monitor or that of a friend. Note that the above rules merely say that \223obj2.md2\224 can invoke \223obj1.md1\224. Regarding the security of the invocation, it is determined by labels described in section 4  3.2 Foreign object control  Our model cannot change the pre-existing contents of foreign objects. We thus designed the following rules for foreign object control Rule 1: Suppress the information flow control mechanism originally designed for foreign objects This rule is obvious because the mechanism originally designed for foreign objects may be incompatible with our model. Suppressing the original mechanism allows us to control the objects using a mechanism that is compatible with our model. We call this rule the \223Suppression rule\224 Rule 2: Let the methods of a foreign object be accessible by every method This rule is obvious because we cannot change the contents of foreign objects to add MLs to their methods. We call this rule the \223No ML rule\224 Rule 3: Stick a foreign object to a method after the method invoked the foreign object\222s method This rule is designed to avoid Trojan horses. We call it the \223Stuck to\224 rule. We use the example described in section 2 to explain this. Suppose 223foreign class 1\224 in Figure 2 offers an additional method \223get_info\224 to read the class\222s attributes Then, after the method \223compute_salary\224 of the object \223worker1\224 invokes the method 223compute_worker_salary\224 of the foreign object 223fo1\224 \(which is an instance of the class \223foreign class 1\224\e attribute of \223fo1\224 will store the private information of \223worker1\224, including 223salary_equation\224, \223salary\224, and so on. If another method invokes the method \223get_info\224 of \223fo1\224 then the private information of \223worker1\224 is leaked To prevent the leakage, \223fo1\224 should be stuck to the method \223compute_salary\224 of the object 223worker1\224. After that, methods of \223fo1\224 can only be invoked by the method \223compute_salary\224 of the object \223worker1\224 Note that we let a foreign object to be stuck to a method instead of stuck to the object owing the method. This is to preventing information leakage within an object. We use an example to explain this Suppose the class \223worker\224 offers a method 223get_work_hour\224 to read his work hours. Also suppose that the method cannot access other information of the worker. In the example mentioned in the previous paragraph, if we let the foreign object \223fo1\224 to be stuck to the object 223worker1\224 instead of stuck to the method 223compute_salary\224 of the object \223worker1\224, then the method \223get_work_hour\224 can invoke the method \223get_info\224 of \223fo1\224 to obtain the private information of \223worker1\224. This again makes the foreign object a Trojan horse  4. Model  Our model associates variables with labels for information flow control. A variable may associate with multiple labels, in which each enforces the Proceedings of t he 36th Ha waii International Conf erence on S y st e m Sciences \(HICSS\22203 0 76 95 18 745/0 3 1 7.00 251 20 02  I E EE 


security policy of an association  4.1 Label  A label is composed of an ASSOCIATION and a RACL \(read access control list\he ASSOCIATION component indicates the association whose security policy is enforced by the label. The RACL records the methods that are allowed to read the variable  Definition 1 A label of a variable \223var1\224, namely 223lbl var1 224, is defined below lbl var1 ASSOCIATION var1 RACL var1 which ASSOCIATION var1 is the association whose security policy is enforced by the label \223lbl var1 224 RACL var1 md | \223md\224 is a method that is allowed to read \223var1\224  The following reserved words with special meanings can be used for a label 1. The word \223WORLD\224 represents a set containing everything such as every method, every AG and so on 2. The word \223NONE\224 represents an empty set 3. The word \223XCARE\224 means don\222t care  We use Example 1 to explain labels, which declares the classes \223worker\224 and \223manager\224 described in section 2. A label is quoted by a pair of braces, and components in a label are separated by semicolon The following attribute declaration shows label examples  String self_general_info {assigned; worker.get_info worker.get_self_general_info, manager.monitor manager.browse not_assigned; worker.get_self_general_info manager.browse friend; worker.get_self_general_info manager.get_others_general_info  The string-typed attribute \223self_general_info\224 is associated with three labels, which respectively enforce the policies of the associations \223assigned\224 223not_assigned\224, and \223friend\224. The label for the association \223assigned\224 states that the RACL is 223{worker.get_info, worker.get_self_general_info manager.monitor, manager.browse}\224, in which the notation \223worker.get_info\224 corresponds to the method \223get_info\224 of the worker class\222s instances  Example 1. The classes \223worker\224 and \223manager\224  class worker attributes String self_general_info {assigned; worker.get_info worker.get_self_general_info, manager.monitor manager.browse not_assigned; worker.get_self_general_info manager.browse friend; worker.get_self_general_info manager.get_others_general_info String others_general_info friend; worker.get_others_general_info     Float hour_pay {assigned; worker.get_info manager.monitor obtain_salary; worker.compute_salary STUB: stub1     Float work_hour {assigned; worker.get_info manager.monitor obtain_salary; worker.compute_salary STUB: stub1 String salary_equation {obtain_salary worker.compute_salary, STUB:stub1 Float salary {obtain_salary worker.compute_salary, STUB: stub1 obtain_tax; worker.compute_tax, STUB: stub2 Float tax {obtain_tax; worker.compute_tax STUB: stub2   end of attributes stubs stub1: {fo1, fmd1, qry1 stub2: {fo2, fmd2, qry2  methods get_info{assigned}\(String, g_info, Float w_hour Float h_pay       the ML of this method is {assigned g_info := self_general_info w_hour := work_hour h_pay := hour_pay  get_self_general_info{assigned, friend String g_info g_info := self_general_info  get_others_general_info{friend manager manager_a manager_a.get_self_info\(others_general_info  compute_salary {obtain_salary} \(foreign_object fo1   fo1.fmd1\(Float work_hour, Float hour_pay String salary_equation, Float salary  compute_tax {obtain_tax} \(foreign_object fo2   fo2.fmd2\(Float salary, Float tax    end of methods end of class \223worker\224 Proceedings of t he 36th Ha waii International Conf erence on S y st e m Sciences \(HICSS\22203 0 76 95 18 745/0 3 1 7.00 251 20 02  I E EE 


class manager attributes String self_general_info {friend worker.get_others_general_info manager.get_self_general_info String worker_general_info {assigned manager.monitor, manager.browse not_assigned; manager.browse friend; manager.get_others_general_info Float worker_work_hour {assigned manager.monitor Float worker_hour_pay {assigned manager.monitor  methods monitor {assigned} \(worker worker_a worker_a.get_info\(worker_general_info worker_work_hour, worker_hour_pay  browse {assigned, not_assigned worker worker_a worker_a.get_others_general_info\(worker_general_info  get_self_general_info{friend}\(String g_info g_info := self_general_info  get_others_general_info{friend}\(worker worker_a worker_a.get_self_info\(worker_general_info  end of methods end of class \223manager\224  As we have described, labels are attached to variable. In practice, literals should also be labeled Generally, a literal can be read by everyone and the association will not affect a literal\222s label. Therefore a literal is implicitly labeled \223{XCARE; WORLD}\224  4.2 Join  The join operator \223 002 RACL lbl2   Note that \223ASSOCIATION lbl 224 and 223ASSOCIATION lbl2 224 should be the same. Otherwise 223lbl1\224 and \223lbl2\224 are considered incomparable The join operation trusts less readers \(or at most the same set of readers\Therefore, it will not lower down security level. If a variable have multiple labels the join operation operated on the labels determined by AGs. For example, if \223worker1\224 is assigned to 223manager1\224, then labels with the association 223assigned\224 will be used to control the information flows between the worker and the manager  4.3 Foreign object control mechanism  Since foreign objects are reused dynamically, we cannot change the internal of the objects. What we can do is to prevent the objects from becoming Trojan horses. The control mechanism is based on the rules described in section 3.2, which dynamically monitor foreign objects during program execution. In a program that invokes methods of foreign objects stubs are used. The stubs then guide the control mechanism to control foreign objects. We use Example 1 to explain this In Example 1, two stubs are declared in the class 223worker\224, in which \223stub1\224 is for computing a worker\222s salary according to the worker\222s work hours hour pay, and salary equation, and \223stub2\224 for computing a worker\222s tax according to the worker\222s salary. Since we cannot expect what foreign object method will be retrieved, virtual foreign object identity and virtual method name are used in a stub For example, the stub \223stub1\224 is declared as \223{fo1 fmd1, qry1}\224, in which \223fo1\224 is the virtual identity of the foreign object, \223fmd1\224 is the virtual name of the method, and \223qry1\224 is a query to retrieve foreign object method. When using the stub, the virtual object identity and virtual method name are used. For example, the method \223compute_salary\224 of the class 223worker\224 invokes \223stub1\224 to compute a worker\222s salary using the following statement fo1.fmd1\(Float work_hour, Float hour_pay String salary_equation, Float salary After a foreign object method is retrieved according to \223qry1\224 of \223stub1\224, \223fo1\224 and \223fmd1\224 will be replaced by the reused foreign object and method Note that the format of a query and how the query is processed are out of the scope of this paper  4.4 Secure information flow  To ensure that the information flows related to foreign objects are secure, the objects should be dynamically monitored using the rules mentioned in Proceedings of t he 36th Ha waii International Conf erence on S y st e m Sciences \(HICSS\22203 0 76 95 18 745/0 3 1 7.00 251 20 02  I E EE 001 224 records the derivation history of a variable\222s data. Therefore, it prevents Trojan horses. If the value of \223var3\224 is derived from the variables \223var1\224 and \223var2\224, \223var3\224 should be attached with a label derived from joining the labels of \223var1\224 and \223var2\224  Definition 2 The join of the label \223lbl1\224 and \223lbl2\224 which are respectively \223{ASSOCIATION lbl1  RACL lbl1 224 and \223{ASSOCIATION lbl2 RACL lbl2 224 is defined below lbl1 001 lbl2 = {ASSOCIATION lbl1  RACL lbl1  


section 3.2. A runtime mechanism is used to enforce the rules. This section described secure information flows among non-foreign objects In an object-oriented system, information may flow within an object or among objects. Both kinds of flows should be secure. To ensure that information flows within an object is secure, information flow in the statement \223derived_var := expression_of\(var1 var2, . . ., varn\ considered secured if the following secure flow condition is true \(suppose the statement appears in the method \223mdx\224 and \223mdx\224 is invoked by \223mdy\224  Secure flow condition  RACL derived_var 003 RACL var1  004  RACL derived_var 003 RACL var2  004  004  RACL derived_var 003 RACL varn  004 mdx mdy 003 RACL var1  004 mdx, mdy 003 RACL var2  004  004 mdx, mdy 003 RACL varn   Here we suppose the original label of the variable 223derived_var\224 is \223{ASSOCIATION derived_var  RACL derived_var 224 and the label of the i th variable to derive \223derived_var\224 is \223{ASSOCIATION vari  RACL vari 224 The conditions \223RACL derived_var 003 RACL var1 224 223RACL derived_var 003 RACL var2 224 223RACL derived_var 003 RACL varn 224, and so on in the condition require that \223derived_var\224 must be more restricted then or the same restricted as \223var1\224 223var2\224, \223varn\224, and so on. The conditions \223{mdx mdy 003 RACL var1 224, \223{mdx, mdy 003 RACL var2 224 223{mdx, mdy 003 RACL varn 224, and so on are needed because the variables to derive \223derived_var\224 are directly read by \223mdx\224 and indirectly read by \223mdy\224 After the value of the variable \223derived_var\224 is derived, its label becomes \223lbl1 001 lbl2 001  001  lbln\224, in which \223lbl1\224, \223lbl2\224, and \223lbln\224 are the labels of \223var1\224, \223var2\224, and \223varn\224, respectively In addition to ensuring the security of information flows within an object, we should also ensure the security of information flows among objects. We use examples to explain this. Suppose the method \223md1\224 invokes the method \223md2\224 by passing the arguments 223arg1, arg2, . . ., argn\224, and \223md2\224 provides the parameters \223par1, par2, . . ., parn\224. Then, to ensure the invocation is secure, the following operations are taken in sequence. \(Note that we differentiate parameters defined in a method from arguments passed to the method. See [1 o f i n d def i ni t i ons of parameters and arguments 1. Label \223pari\224 as \223{ASSOCIATION argi RACL argi 224 in which \223argi\224 is the i th argument passed to \223md2\224 223pari\224 is the i th parameter of \223md2\224, and the label of \223argi\224 is \223{ASSOCIATION argi RACL argi 224. This operation copies labels of arguments to parameters This copying is safe because information flow security will be checked within the method invoked 2. Within the method, if \223pari\224 and other variables are used to derive the value of another variable labels with the association \223ASSOCIATION argi 224 should be used for label comparison. The derivation is considered secure only when the label comparison causes the secure flow condition true 3. If the invoked method uses a \223return\224 statement to return a value, the label of the variable being returned should be checked against the variable that receives the return value. Here the labels with the same association should be used, and the secure flow condition should be true  We use Example 1 to explain the above operations Suppose \223worker1\224 is assigned to \223manager1\224. When the manager\222s method \223browse\224 invokes the worker\222s method \223get_info\224 using the manager\222s attributes \223worker_general_info\224 223worker_work_hour\224, and \223worker_hour_pay\224 as arguments, the parameters \223g_info\224, \223w_hour\224, and 223h_pay\224 of the worker\222s method \223get_info\224 will respectively be labeled \223{assigned; manager.monitor manager.browse}\224, \223{assigned; manager.monitor}\224 and \223{assigned; manager.monitor}\224. Note that the labels with the association \223assigned\224 are used here because the worker is assigned to the manager. With the labels, the statements \223w_hour := work_hour;\224 and \223h_pay := hour_pay;\224 within the worker\222s method \223get_info\224 cannot be executed \(and hence the invocation is not secure\The rationale is that the labels of \223w_hour\224 and \223h_pay\224 fail to fulfill the secure flow condition \(i.e., \223manager.browse\224 is not in the RACL of the worker\222s attributes \223work_hour\224 and \223hour_pay\224  5. Security checker  To check whether the information flow in the statement \223des := computation_of\(var1, var2 varn\s secure, the following algorithm is used Here we suppose that the computation appears in the method \223md1\224 of the object \223obj1\224, and \223md1\224 is invoked by the method \223md2\224 of the object \223obj2\224 We also let the set \223src\224 represent the set \223{var1 var2, . . ., varn}\224  Algorithm 1 variables  AGS the set of AGs in which obj1 and obj2 coexist Proceedings of t he 36th Ha waii International Conf erence on S y st e m Sciences \(HICSS\22203 0 76 95 18 745/0 3 1 7.00 251 20 02  I E EE 


 ASSOAGS the set of association extracted from AGS   ML md1 the ML of md1   EFF_ASSO effective associations which are those allowed to invoke md1   EFF_VAR_ASSO common effective associations       of the variables in the computation  ASSO_SRCVAR i the set of associations extracted from the labels of the i th variable in src   ASSO_DES the set of associations extracted from the labels of des   asso an association  VARS a set of variable  LBLS a set of labels algorithm if AGS is empty then the information flow is not secure, exit algorithm end if  EFF_ASSO  ASSOAGS  002 i  ASSO_SRCVAR i  002  ASSO_DES  if EFF_VAR_ASSO is empty then no common association exists among variables in the computation the information flow is not secure, exit algorithm end if  VARS  des  005  src  for each association asso in EFF_VAR_ASSO do  LBLS  lbl  lbl is the label of an element in VARS whose association is asso  if applying LBLS to the computation causes the secure condition true then the information flow is secure, exit algorithm end if end for     the information flow in not secure, exit algorithm  The algorithm first checks whether \223obj1\224 and 223obj2\224 coexist in an AG. If the check fails, the statement cannot be executed. If they coexist in one or more AGs, the algorithm checks whether the method \223md1\224 can be invoked under the associations of the AGs the objects coexist \(by comparing the associations in the AGs with the ML of \223md1\224\ no association in the AGs is allowed to invoke the method, the statement cannot be executed. If one or more associations are allowed to invoke the method the algorithm identifies the common associations of the variables involved in the statement. If no common association is identified, labels of the statement are incomparable and the statement cannot be executed. If one or more common associations among the variables are identified, labels with any common association can be selected to check information flow security. If a common association causes the secure flow condition true, the information flow is considered secure. This consideration is reasonable. For example, if a worker is assigned to a manager and they are friends, the manager can play the role of either a manager or a friend to invoke the worker\222s methods  6. Case study  The example described in section 2 is revisited here We use the proposed model to label the application The labeling result is shown in Example 1. We simplify the example by hiding the possibly complicated structure of an attribute. For example the attributes \223general_info\224 of the object \223worker\224 may be as complicated as a C structure. Let\222s trace Example 1 to prove that the information flow control requirements described in section 2 are fulfilled Requirement 1 When a manager monitors a worker assigned to him, the manager can read the worker\222s general information, hour pay, and work hours This requirement is accomplished by the manager\222s method \223monitor\224 and the labels with the association \223assigned\224. To get the information of a worker, the manager\222s method \223monitor\224 invokes the worker\222s method \223get_info\224 using the manager\222s attributes \223worker_general_info\224 223worker_work_hour\224, and \223worker_hour_pay\224 as arguments. Comparing the label of 223worker_general_info\224 with that of the worker\222s attribute \223self_general_info\224, the secure flow condition mentioned in section 4.4 is true \(note that the labels with the association \223assigned\224 are used here\herefore, the statement \223g_info self_general_info;\224 within the worker\222s method 223get_info\224 can be executed. Moreover, the statements \223w_hour := work_hour;\224 and \223h_pay hour_pay;\224 within \223get_info\224 can be executed after a similar comparison Requirement 2 If a manager browses the information of a worker assigned to him, the manager can only read the worker\222s general information This requirement is accomplished by the method 223browse\224 of the object \223manager\224 and the labels with the association \223assigned\224. To get the general information of a worker assigned to a manage, the method \223browse\224 invokes the worker\222s method 223get_self_general_info\224 using the manager\222s attribute \223others_general_info\224 as an argument Proceedings of t he 36th Ha waii International Conf erence on S y st e m Sciences \(HICSS\22203 0 76 95 18 745/0 3 1 7.00 251 20 02  I E EE 002 ML md1  if EFF_ASSO is empty then md1 is not allowed to invoke under the associations the information flow is not secure, exit algorithm end if  EFF_VAR_ASSO  EFF_ASSO  002   


The statement \223g_info := self_general_info;\224 within the worker\222s method 223get_self_general_info\224 can be executed after comparing labels. Note that the manager\222s method 223browse\224 cannot read the worker\222s \223work_hour\224 and \223hour_pay\224. The rationale is described in the last paragraph of section 4.4 Requirement 3 If a worker is not assigned to a manager, the manager can only read the worker\222s general information This requirement is accomplished by the method 223browse\224 of the object \223manager\224 and the labels with the association \223not_assigned\224. To get the general information of a worker not assigned to a manager, the method \223browse\224 invokes the worker\222s method \223get_self_general_info\224 using the manager\222s attribute \223others_general_info\224 as an argument. The statement \223g_info self_general_info;\224 within the worker\222s method 223get_self_general_info\224 can be executed after comparing labels Requirement 4 If a worker and a manager are friends, they can read each other\222s general information This requirement is achieved by the labels with the association \223friend\224. For example, a worker can read his manager friend\222s general information through the worker\222s method 223get_others_general_info\224, which invokes the manager\222s \223get_self_general_info\224 using the worker\222s attribute \223others_general_info\224 as an argument. After comparing the label of the worker\222s attribute \223others_general_info\224 and the manager\222s attribute \223self_general_info\224, one can see that the secure flow condition is true. The statement \223g_info := self_general_info;\224 within the manager\222s method \223get_self_general_info;\224 can be executed Requirement 5 Periodically, the company invokes foreign objects to compute the salaries and taxes of workers This requirement is fulfilled by the stubs \223stub1\224 and stub2\224 in Example 1. Please refer to the description in section 4.3. Moreover, the three rules mentioned in section 3.2 prevent the foreign objects from becoming Trojan horses  7. Evaluation  We implemented a prototype system to evaluate the model. The system uses reusable software repository to simulate foreign object control. Moreover, it uses the language shown in Example 1 to write programs A program written in the language is first pre-processed to produce a program without labels and MLs. The program produced by the preprocessor is conceptually composed of two parts. One is the program before labeling and the other a security monitor The latter checks information flows of the former using Algorithm 1 during program execution Currently, the security monitor checks security dynamically, which contradicts the proposal of static checking [1, 12, 24  N e ve r t he l e ss d yna mi c c he c ki n g  cannot be totally avoided because objects and AGs may be dynamically instantiated or removed during program execution To evaluate the model, we used the example described in section 2 as an assignment to students of different grades and experiences. The students are required to develop a program, namely program a  without the proposed model embedded and another program, namely program b with the model embedded. We then collected and averaged the following metrics data: 1\ LOC \(lines of code\f programs a and b, 2\ecution time of programs a and b, and 3\numbers of non-secure statements found in program b. The collected data showed that the averaged LOC and execution time of program b are respectively 3.2 and 3.8 times those of program a Nevertheless, the data also showed that 2.3 non-secure information flows \(per 100 LOC\n average are identified from program b. Although the runtime overhead seems high, we still think that the model is valuable because of the ability to identify non-secure statements. Nevertheless, reducing the overhead should be an important future work  8. Related work  The simplest information flow control approach is DAC. Since DAC fails to avoid Trojan horses, the multilevel security approach was proposed [6-9  The approach is generally categorized as MAC MAC was criticized as too restricted [5 T o lo o s en  the restriction, quite a few approaches have been proposed. Below we survey some researches The model proposed in t rol s t h e  information flows in object-oriented systems. It uses ACL of objects to compute the ACL of executions. A message filter is used to filter out possibly non-secure information flows. Since the computation of an execution\222s ACL takes information propagation into consideration, no Trojan horses will result Moreover, interactions among executions are categorized into five modes including synchronized unrestricted, synchronous restricted, asynchronous deferred reply unrestricted, and deferred reply restricted. Different modes result in different ACLs Proceedings of t he 36th Ha waii International Conf erence on S y st e m Sciences \(HICSS\22203 0 76 95 18 745/0 3 1 7.00 251 20 02  I E EE 


which loosens the restriction of MAC. More flexibility is added to the model by allowing exceptions during or after method execution [10-11 The purpose-oriented model [21-22 pro pos es  that invoking a method may be allowed for some methods but disallowed for other methods, even when the invokers belong to the same object. This consideration is correct, because the security levels of methods in an object may be different Different methods can thus access information in different security levels The decentralized label approach [1-4 m a rk s t h e  security levels of variables using labels. A label is composed of one or more policies, which should be simultaneously obeyed. A policy in a label is composed of an owner and zero or more readers that are allowed to access the data. When computation are applied to data, join operation is used to compute the label of the result data. This avoids Trojan horses Another feature proposed by this approach is that declassification \(downgrading of security level provided. This allows non-sensitive data, which are in high security level, to be accessed by low security level processes. The model also takes write access control into consideration [4 rren t l y t h e m o d e l  has been used to develop a programming language Jflow [1 ad d itio n   th e m o d e l h a s b e e n  u s ed i n a  distributed system with untrusted hosts through secure program partitioning [30  Role-based access control models [19, 27, 33  define the roles a subject can play. A role is a collection of permissions \(i.e., access rights  When a subject plays a role, it possesses the rights belonging to the role. A subject can play multiple roles and even change role during a session Inheritance and other relationships can be established among roles [27 t o s t ru ct u re t h e m Moreov er  constraints, such as two specific roles should be mutually exclusive, can be attached to roles. The advantage of role-based access control is that subjects can change roles dynamically, which facilitates obeying the \223need-to-know\224 principle. It seems that the role-based models operate well in an application that protects not too many resources because roles should be defined before the application\222s execution. In case that many resources should be protected \(such as every variable in a program should be protected\ining roles becomes tedious and the access control may become imprecise From the survey, we identified many necessary features for controlling information flows in object-oriented systems such as Trojan horse prevention, declassification, purpose-oriented method invocation, and so on. In fact, our model offers those features, although we do not present them in this paper. What we present in this paper are the control of information flows among objects and foreign objects. According to our survey, no model offers the control well  9. Conclusions  This paper proposes a model to control information flows among objects. The model uses associations and method limitations \(ML\ to control information flows among objects. Information flows are controlled by attaching labels to variables. Trojan horses are avoided by join operations. Within an application, every variable and literal is associated with one or more labels. If a variable is associated with multiple labels, each label enforces the security policy of an association. To check the security of an information flow, labels are compared. An information flow is secure if the comparison causes the secure flow condition true In addition to controlling objects developed by programmers, the model also controls foreign objects which are pre-existing objects for reused. Since the details of a foreign object are unknown, our model only prevents foreign objects from becoming Trojan horses. We use the \223Suppression rule\224, \223No ML rule\224 and \223Stuck to rules\224 to control foreign objects We implemented a prototype system to evaluate the model. From the data collected, we found that the model does facilitate identifying non-secure information flows. We thus believe that the model is useful in spite of runtime overhead  Acknowledgement  This research is sponsored by the National Science Council in Taiwan under Grant NSC91-2213-E-259-006  References  1  A  C. My e r s 223 J Flow  P r a c tic a l Mostly S ta tic  Information Flow Control\224 Proc. 26\222th ACM Symp Principles of Programming Language pp. 228-241 1999  A  C M y ers an d B L i sko v  223A De cen t r al i zed M o d e l f o r Information Flow Control\224 Proc. 17\222th ACM Symp Operating Systems Principles pp. 129-142, 1997 3 A  My e r s a nd B  L i s k ov 223 C om ple t e  Sa f e I n f o r m a tion  Flow with Decentralized Labels\224 Proc. 14\222th IEEE Symp Security and Privacy pp. 186-197, 1998 4 A My e r s a nd B. L i sk ov 223 P rote c ting  P r iv a c y using the  Proceedings of t he 36th Ha waii International Conf erence on S y st e m Sciences \(HICSS\22203 0 76 95 18 745/0 3 1 7.00 251 20 02  I E EE 


Decentralized Label Model\224 ACM Trans. Software Eng Methodology vol. 9, no. 4, pp. 410-442, 2000  C J M c Co ll u m  J R M e ssin g  an d L  No tar g iaco m o   223Beyond the Pale of MAC and DAC - Defining New Forms of Access Control\224 Proc. 6\222th IEEE Symp Security and Privacy pp. 190-200, 1990  D E  Bel l a n d L  J L a P a d u l a 223S ecu re Co m p u t er  Systems: Unified Exposition and Multics Interpretation\224 technique report, Mitre Corp Mar. 1976 http://csrc.nist.gov/publications/history/bell76.pdf 7 D  E  D e nn ing  223 A L a ttic e Mode l of Se c u r e I n f o r m a tion Flow\224 Comm. ACM vol. 19, no. 5, pp. 236-243, 1976 8 D  E  D e n n ing a n d P  J  D e nning 223 C e r tif ic a tion of  Program for Secure Information Flow\224 Comm. ACM vol 20, no. 7, pp. 504-513, 1977  D  F  C  Brew er  an d M  J  Nash  223T h e Ch i n ese W a l l  Security Policy\224 Proc. 5\222th IEEE Symp. Security and Privacy pp. 206-214, 1989 10 E Ferrari P   Sam a r a ti, E. Bertin o  an d S. Jajo d i a  223Providing Flexibility in Information Control for Object-Oriented Systems\224 Proc. 13\222th IEEE Symp Security and Privacy pp. 130-140, 1997 11 E B e r tin o Sa br i n a  de C a pita ni di V i m e r c a ti, E  Ferrari, and P. Samarati, \223Exception-based Information Flow Control in Object-Oriented Systems\224 ACM Trans Information System Security vol. 1, no. 1, pp. 26-65 1998 1  F  B S chu ei d er  223E n f o r ceab l e S ecu ri t y P o l i cy 224  ACM Trans. Information System Security vol. 3, no. 1, pp 30-50, 2000 1 G  B o o c h  Object-Oriented Analysis and Design with Application second edition, The Benjamin/Cummings Publishing Company, 1994 1 G  S m i t h an d D  V o l p an o 223S ecu re In f o r m at i o n F l o w  in a Multi-Thread Imperative Language\224 Proc. 25th ACM Symp. on Principles of Programming Languages  pp. 355-364, 1998 15 H M De ite l a n d a n d P  J D e ite l C: How to Program  Prentice-Hall, 2001 16 O M G  223 T he C o m m on O bje c t R e que s t B r ok e r   Architecture and Specification\224 http://doc.ece.uci.edu/CORBA 17 J  A g a t 223 T r a nsf o r m ing out  T i m i ng Le ak s 224  Proc. 27th ACM Symp. on Principles of Programming Languages  pp. 40-53, 2000 1 J Ru m b au gh  M  Bl ah a  W  P r em erl a n i  F  E d d y  an d  W Lo r en s en   Object-Oriented Modeling and Design  Prentice-Hall, 1991 19 K  I z a k i, K  T a na k a a nd M  T a k i z a w a 223 I nf or m a tion Flow Control in Role-Based Model for Distributed Objects\224 Proc. 8\222th International Conf. Parallel and Distributed Systems pp. 363-370, 2001 20 M. D. Mc Ilr o y a nd J A  R e e d s, \223 M ultile v e l Se c u rity  in the UNIX Tradition\224 Software - Practice and Experience vol. 22, no. 8, pp. 673-694, 1992 2  M  Y asu d a T  T ach i k a w a an d M  T aki za w a  223Information Flow in a Purpose-Oriented Access Control Model\224 Proc. 1997 International Conf. Parallel and Distributed Systems pp. 244-249, 1997 22 M. Y a s uda   T   T a c h ik aw a, a nd M  T a k i z a w a  223A  Purpose-Oriented Access Control Model\224 Proc. 12\222th International Conf. Information Networking pp. 168-173 1998 23  P  Sa m a ra ti, E. Be rtino   A  Cia m pic h e tti, a n d S  Jajodia, \223Information Flow Control in Object-Oriented Systems\224 IEEE Trans. Knowledge Data Eng vol. 9, no 4, pp.524-538, Jul./Aug. 1997 24 R  F o c a r di a n d R  G o r r i e r i, \223 T he C o m pos itiona l  Security Checker: A Tool for the Verification of Information Flow Security Properties\224 IEEE Trans Software Eng vol. 23, no. 9, pp. 550-571, 1997 2 G r au b a rt  223On t h e Need f o r a T h i r d  F o rm o f A cce ss  Control\224 Proc. 12\222th Nat\222l Computer Security Conf pp 296-303, 1989 26 R  S  Sa nd hu 223 L a ttic e B a sed A c c e s s C ontr o l M ode ls 224   IEEE Computer vol. 26, no. 11, pp. 9-19, Nov. 1993 27 R  S  S a n d h u  E  J  C o y n e  H  L  F e i n s t e i n  a n d C  E   Youman, \223Role-Based Access Control Models\224 IEEE Computer vol. 29, no. 2, pp. 38-47, 1996 2  S  Jaj o d i a and B  Ko gan  223In t egrat i n g an  Object-Oriented Data Model with Multilevel Security\224 Proc. 6\222th IEEE Symp. Security and Privacy pp. 76-85 1990 29  S. N Fo ley  223A Mo d e l f o r S e cu re In f o rmatio n Fl o w 224  Proc. 5\222th IEEE Symp. Security and Privacy pp. 248-258 1989 30  S. Z d a n c e w ic L Zhe n g N N y s t ro m a nd A C. My e r s   223Untrusted Hosts and Confidentiality: Secure Program Partitioning\224 Proc. 18th ACM Symp. Operating Systems Principles 2001 3 T   T ach i k a w a M  Y asu d a an d M   T aki za w a  223 A  Purposed-Oriented Access Control Model in Object-Based Systems\224 Trans. Information Processing Society of Japan vol. 38, no. 11, pp. 2362-2369, 1997 32 V  V a ra d h a r a j a n a nd S Bla c k 223 A Multile v e l Se c u rity  Model for a Distributed Object-Oriented System\224 Proc 6\222th IEEE Symp. Security and Privacy pp. 68-78, 1990 3 Z   T a ri an d S  W  Ch an 223A Ro l e Bas ed Acces s  Control for Intranet Security\224 IEEE Internet Computing  vol. 1, no. 5, pp. 24-34, 1997 Proceedings of t he 36th Ha waii International Conf erence on S y st e m Sciences \(HICSS\22203 0 76 95 18 745/0 3 1 7.00 251 20 02  I E EE 


absolute values. The results can vary on other computers. But it can be guaranteed that performance ratio of the algorithms will remain the same After making the comparisons with sample data, we came to the conclusion that PD algorithm performs significantly better than the other two especially with larger datasets. PD outperforms DCP and PIP regarding running time. On the other hand, since PD reduces the dataset, mining time does not necessary increase as the number of transactions increases and experiments reveals that PD has better scalability than DCP and PIP. So, PD has the ability to handle the large data mine in practical field like market basket analysis and medical report documents mining 5. References 1] R. Agrawal and R. Srikant, "Fast algoritlnns for mining association rules", VLDB'94, pp. 487-499 2] R. J. Bayardo, "Efficiently mining long patterns from databases", SIGMOD'98, pp.85-93 3] J. Pei, J. Han, and R. Mao, "CLOSET: An Efficient Algorithm for Mining Frequent Closed Itemsets \(PDF Proc. 2000 ACM-SIGMOD International Workshop on Data Mining and Knowledge Discovery, Dallas, TX, May 2000 4] Qinghua Zou, Henry Chiu, Wesley Chu, David Johnson, "Using Pattern Decomposition\( PD Finding All Frequent Patterns in Large Datasets", Computer Science Department University of California - Los Angeles 5] J. Han, J. Pei, and Y. Yin, "Mining Frequent Patterns without Candidate Generation \(PDF  SIGMOD International Con! on Management of Data SIGMOD'OOj, Dallas, TX, May 2000 6] S. Orlando, P. Palmerini, and R. Perego, "The DCP algoritlnn for Frequent Set Counting", Technical Report CS2001-7, Dip. di Informatica, Universita di Venezia 2001.Available at http://www.dsi.unive.itl?orlando/TR017.pdf 7] MD. Mamun-Or-Rashid, MD.Rezaul Karim, "Predictive item pruning FP-tree algoritlnn", The Dhaka University  Journal of Science, VOL. 52, NO. 1, October,2003, pp. 3946 8] Park, J. S., Chen, M.-S., and Yu, P. S, "An Effective Hash Based Algoritlnn for Mining Association Rules", Proc ofthe 1995 ACM-SIGMOD Con! on Management of Data 175-186 9] Brin, S., Motwani, R., Ullman, J., and Tsur, S, "Dynamic Itemset Counting and Implication Rules for Market Basket Data", In Proc. of the 1997 ACM-SIGMOD Conf On Management of Data, 255-264 10] Zaki, M. J., Parthasarathy, S., Ogihara, M., and Li, W New Algoritlnns for Fast Discovery of Association Rules In Proc. of the Third Int'l Con! on Knowledge Discovery in Databases and Data Mining, 283-286 11] Lin, D.-I and Kedem, Z. M., "Pincer-Search: A New Algoritlnn for Discovering the Maximum Frequent Set", In Proc. of the Sixth European Conf on Extending DatabaseTechnology, 1998 12] R. Ramakrishnan, Database Management Systems University of Wisconsin, Madison, WI, USA; International Edition 1998 pre></body></html 


tors such as union, di?erence and intersection are de?ned for pairs of classes of the same pattern type Renaming. Similarly to the relational context, we consider a renaming operator ? that takes a class and a renaming function and changes the names of the pattern attributes according to the speci?ed function Projection. The projection operator allows one to reduce the structure and the measures of the input patterns by projecting out some components. The new expression is obtained by projecting the formula de?ning the expression over the remaining attributes [12 Note that no projection is de?ned over the data source since in this case the structure and the measures would have to be recomputed Let c be a class of pattern type pt. Let ls be a non empty list of attributes appearing in pt.Structure and lm a list of attributes appearing in pt.Measure. Then the projection operator is de?ned as follows ls,lm c id s m f p ? c, p = \(pid, s, d,m, f In the previous de?nition, id ing new pids for patterns, ?mlm\(m projection of the measure component and ?sls\(s ned as follows: \(i s usual relational projection; \(ii sls\(s and removing the rest from set elements. The last component ?ls?lm\(f computed in certain cases, when the theory over which the formula is constructed admits projection. This happens for example for the polynomial constraint theory 12 Selection. The selection operator allows one to select the patterns belonging to one class that satisfy a certain predicate, involving any possible pattern component, chosen among the ones presented in Section 5.1.1 Let c be a class of pattern type pt. Let pr be a predicate. Then, the selection operator is de?ned as follows pr\(c p Join. The join operation provides a way to combine patterns belonging to two di?erent classes according to a join predicate and a composition function speci?ed by the user Proceedings of the 16th International Conference on Scientific and Statistical Database  Management \(SSDBM  04 1099-3371/04 $ 20.00  2004 IEEE Let c1 and c2 be two classes over two pattern types pt1 and pt2. A join predicate F is any predicate de?ned over a component of patterns in c1 and a component of patterns in c2. A composition function c pattern types pt1 and pt2 is a 4-tuple of functions c cStructureSchema, cDataSchema, cMeasureSchema, cFormula one for each pattern component. For example, function cStructureSchema takes as input two structure values of the right type and returns a new structure value, for a possible new pattern type, generated by the join. Functions for the other pattern components are similarly de?ned. Given two patterns p1 = \(pid1, s1, d1,m1, f1 p2 = \(pid2, s2, d2,m2, f2 p1, p2 ned as the pattern p with the following components Structure : cStructureSchema\(s1, s2 Data : cDataSchema\(d1, d2 Measure : cMeasureSchema\(m1,m2 Formula : cformula\(f1, f2 The join of c1 and c2 with respect to the join predicate F and the composition function c, denoted by c 1   F  c  c 2   i s  n o w  d e  n e d  a s  f o l l o w s    F  c  c 2     c  p 1   p 2   p 1    c 1  p 2    c 2  F   p 1   p 2     t r u e   5.1.3. Cross-over database operators OCD Drill-Through. The drill-through operator allows one to 


Drill-Through. The drill-through operator allows one to navigate from the pattern layer to the raw data layer Thus it takes as input a pattern class and it returns a raw data set. More formally, let c be a class of pattern type pt and let d be an instance of the data schema ds of pt. Then, the drill-through operator is denoted by c c Data-covering. Given a pattern p and a dataset D sometimes it is important to determine whether the pattern represents it or not. In other words, we wish to determine the subset S of D represented by p \(p can also be selected by some query the formula as a query on the dataset. Let p be a pattern, possibly selected by using query language operators, and D a dataset with schema \(a1, ..., an ible with the source schema of p. The data-covering operator, denoted by ?d\(p,D responding to all tuples in D represented by p. More formally d\(p,D t.a1, ..., t.an In the previous expression, t.ai denotes a speci?c component of tuple t belonging to D and p.formula\(t.a1, ..., t.an instantiated by replacing each variable corresponding to a pattern data component with values of the considered tuple t Note that, since the drill-though operator uses the intermediate mapping and the data covering operator uses the formula, the covering ?\(p,D D = ?\(p not be equal to D. This is due to the approximating nature of the pattern formula 5.1.4. Cross-over pattern base operators OCP Pattern-covering. Sometimes it can be useful to have an operator that, given a class of patterns and a dataset, returns all patterns in the class representing that dataset \(a sort of inverse data-covering operation Let c be a pattern class and D a dataset with schema a1, ..., an pattern type. The pattern-covering operator, denoted as ?p\(c,D all patterns in c representing D. More formally p\(c,D t.a1, ..., t.an true Note that: ?p\(c,D p,D 6. Related Work Although signi?cant e?ort has been invested in extending database models to deal with patterns, no coherent approach has been proposed and convincingly implemented for a generic model There exist several standardization e?orts for modeling patterns, like the Predictive Model Markup Language \(PMML  eling approach, the ISO SQL/MM standard [2], which is SQL-based, and the Common Warehouse Model CWM  ing e?ort. Also, the Java Data Mining API \(JDMAPI 3] addresses the need for a language-based management of patterns. Although these approaches try to represent a wide range of data mining result, the theoretical background of these frameworks is not clear. Most importantly, though, they do not provide a generic model capable of handling arbitrary cases of pattern types; on the contrary only a given list of prede?ned pattern types is supported To our knowledge, research has not dealt with the issue of pattern management per se, but, at best, with peripheral proximate problems. For example, the paper by Ganti et. al. [9] deals with the measurement 


per by Ganti et. al. [9] deals with the measurement of similarity \(or deviation, in the authors  vocabulary between decision trees, frequent itemsets and clusters Although this is already a powerful approach, it is not generic enough for our purpose. The most relevant research e?ort in the literature, concerning pattern management is found in the ?eld of inductive databases Proceedings of the 16th International Conference on Scientific and Statistical Database  Management \(SSDBM  04 1099-3371/04 $ 20.00  2004 IEEE meant as databases that, in addition to data, also contain patterns [10], [7]. Our approach di?ers from the inductive database one mainly in two ways. Firstly, while only association rules and string patterns are usually considered there and no attempt is made towards a general pattern model, in our approach no prede?ned pattern types are considered and the main focus lies in devising a general and extensible model for patterns Secondly, di?erently from [10], we claim that the peculiarities of patterns in terms of structure and behavior together with the characteristic of the expected workload on them, call for a logical separation between the database and the pattern-base in order to ensure e?cient handling of both raw data and patterns through dedicated management systems Finally, we remark that even if some languages have been proposed for pattern generation and retrieval 14, 11], they mainly deal with speci?c types of patterns \(in general, association rules sider the more general problem of de?ning safe and su?ciently expressive language for querying heterogeneous patterns 7. Conclusions and Future Work In this paper we have dealt with the issue of modelling and managing patterns in a database-like setting Our approach is enabled through a Pattern-Base Management System, enabling the storage, querying and management of interesting abstractions of data which we call patterns. In this paper, we have \(a de?ned the logical foundations for the global setting of PBMS management through a model that covers data patterns and intermediate mappings and \(b language issues for PBMS management. To this end we presented a pattern speci?cation language for pattern management along with safety constraints for its usage and introduced queries and query operators and identi?ed interesting query classes Several research issues remain open. First, it is an interesting topic to incorporate the notion of type and class hierarchies in the model [15]. Second, we have intentionally avoided a deep discussion of statistical measures in this paper: it is more than a trivial task to de?ne a generic ontology of statistical measures for any kind of patterns out of the various methodologies that exist \(general probabilities Dempster-Schafer, Bayesian Networks, etc. [16 nally, pattern-base management is not a mature technology: as a recent survey shows [6], it is quite cumbersome to leverage their functionality through objectrelational technology and therefore, their design and engineering is an interesting topic of research References 1] Common Warehouse Metamodel \(CWM http://www.omg.org/cwm, 2001 2] ISO SQL/MM Part 6. http://www.sql99.org/SC32/WG4/Progression Documents/FCD/fcddatamining-2001-05.pdf, 2001 3] Java Data Mining API http://www.jcp.org/jsr/detail/73.prt, 2003 4] Predictive Model Markup Language \(PMML http://www.dmg.org 


http://www.dmg.org pmmlspecs v2/pmml v2 0.html, 2003 5] S. Abiteboul and C. Beeri. The power of languages for the manipulation of complex values. VLDB Journal 4\(4  794, 1995 6] B. Catania, A. Maddalena, E. Bertino, I. Duci, and Y.Theodoridis. Towards abenchmark for patternbases http://dke.cti.gr/panda/index.htm, 2003 7] L. De Raedt. A perspective on inductive databases SIGKDD Explorations, 4\(2  77, 2002 8] M. Escobar-Molano, R. Hull, and D. Jacobs. Safety and translation of calculus queries with scalar functions. In Proceedings of PODS, pages 253  264. ACMPress, 1993 9] V. Ganti, R. Ramakrishnan, J. Gehrke, andW.-Y. Loh A framework for measuring distances in data characteristics. PODS, 1999 10] T. Imielinski and H. Mannila. A database perspective on knowledge discovery. Communications of the ACM 39\(11  64, 1996 11] T. Imielinski and A. Virmani. MSQL: A Query Language for Database Mining. Data Mining and Knowledge Discovery, 2\(4  408, 1999 12] P. Kanellakis, G. Kuper, and P. Revesz. Constraint QueryLanguages. Journal of Computer and SystemSciences, 51\(1  52, 1995 13] P. Lyman and H. R. Varian. How much information http://www.sims.berkeley.edu/how-much-info, 2000 14] R.Meo, G. Psaila, and S. Ceri. An Extension to SQL for Mining Association Rules. Data Mining and Knowledge DiscoveryM, 2\(2  224, 1999 15] S. Rizzi, E. Bertino, B. Catania, M. Golfarelli M. Halkidi, M. Terrovitis, P. Vassiliadis, M. Vazirgiannis, and E. Vrachnos. Towards a logical model for patterns. In Proceedings of ER 2003, 2003 16] A. Siblerschatz and A. Tuzhillin. What makes patterns interesting in knowledge discovery systems. IEEE TKDE, 8\(6  974, 1996 17] D. Suciu. Domain-independent queries on databases with external functions. In Proceedings ICDT, volume 893, pages 177  190, 1995 18] M.Terrovitis, P.Vassiliadis, S. Skadopoulos, E. Bertino B. Catania, and A. Maddalena. Modeling and language support for the management of patternbases. Technical Report TR-2004-2, National Technical University of Athens, 2004. Available at http://www.dblab.ece.ntua.gr/pubs Proceedings of the 16th International Conference on Scientific and Statistical Database  Management \(SSDBM  04 1099-3371/04 $ 20.00  2004 IEEE pre></body></html 


The reason of the hiding failure of SWA is the same in Fig.8 Notice the result at x = 0.7646 in Fig.14, because the hiding failure is occurred at the seeds of the sensitive patterns, a high weakness is produced As shown in Fig.15 and Fig.16, the misses cost and dissimil arity of our work decreases as RL2 increases. This is because the larger RL2 is, the less effect on non-sensitive patterns. Also weakness and dissimilarity of SWA are independent of RL2 5. Conclusion In the paper, a novel method improving the balance between sensitive knowledge protecting and discovery on frequent patte rns has been proposed. By setting entries of a sanitization matrix to appropriate values and multiplying the original database by the matrix with some probability policies, a sanitized database is gotten. Moreover, it can avoid F-I Attack absolutely when the confidence level given by users approximates to 1. The experimental results revealed that although misses cost and dissimilarity between the original and sanitized database of our process are little more than SWA, ours provide more safely protection than SWA. Unlike SWA, our sanitization process could not suffer from F-I Attack and the probability policies in our approach also take the minimum support into account, the users only need to decide the confidence level which affects the degree of patterns hiding 6. Reference 1] M. Atallah, E. Bertino, A. Elmagarmid, M. Ibrahim and V. Verykios Disclosure Limitation of Sensitive Rules", Proc. of IEEE Knowledge and Data Engineering Exchange Workshop 1999 2] R. Agrawal and R. Srikant. Fast algorithms for mining association rules. VLDB, Santiago, Chile, 1994 3] R. Agrawal and R. Srikant. Privacy preserving data mining. In ACM SIGMOD, Dallas, Texas, May 2000 4] E. Dasseni, V. Verykios, A. Elmagarmid and E. Bertino, Hiding Association Rules by Using Confidence and Support", Proc. of 4th Intl Information Hiding Workshop \(IHW 5] A. Evfimievski, J. Gehrke, and R. Srikant. Limiting Privacy Breac hed in privacy preserving data mining. SIGMOD/PODS, 2003 6] A. Evfimievski, R. Srikant, R. Agrawal, and J. Gehrke. Privacy preserving mining of association rules. KDD 2002 7] M. Kantarcioglu and C. Clifton. Privacy-preserving distributed mining of association rules on horizontally partitioned data. In ACM SIGMOD Workshop on Research Issues on Data Mining and Knowledge Discovery, June 2002 8] Guanling Lee, Chien-Yu Chang and Arbee L.P Chen. Hiding sensitive patterns in association rules mining. The 28th Annual International Computer Software and Applications Conference 9] Y. Lindell and B. Pinkas. Privacy Preserving Data mining. In CRYPTO, pages 36-54, 2000 10] S. R. M. Oliveira and O. R. Za  ane. Privacy Preserving Frequent Itemset Mining. In Proc. of IEEE ICDM  02 Workshop on Privacy Security, and Data Mining 11] S. R. M. Oliveira and O. R. Za  ane. Algorithms for Balancing Priv acy and Knowledge Discovery in Association Rule Mining. IDEAS  03 12] S. R. M. Oliveira and O. R. Za  ane. Protecting Sensitive Knowledge By Data Sanitization, ICDM  03 13] S. R. M. Oliveira, O. R. Za  ane and Y  cel Saygin. Secure Association Rule Sharing, PAKDD-04 14] Benny Pinks. Cryptographic Techniques For Privacy-Preserving D ata Mining. ACM SIGKDD Explorations Newsletter Vol. 4, Is. 2, 2002 15] S. J. Rizvi and J. R. Haritsa. Maintaining data privacy in association rule mining. VLDB, 2002 16] J. Vaidya and C. W. Clifton. Privacy preserving association rule mining in vertically partitioned data. KDD2002 17] Verykios, V.S.; Elmagarmid, A.K.; Bertino, E.; Saygin, Y.; Dasseni E. Association rule hiding. IEEE Transactions On Knowledge And Data Engineering, Vol. 16, No. 4, April 2004 Proceedings of the 29th Annual International Computer Software and Applications Conference  COMPSAC  05 0730-3157/05 $20.00  2005 IEEE pre></body></html 


pre></body></html 


Batt Power Batt Type Stabilization Type Propulsion Mechanism  of Solar Panels  of Solar Cells Manufacturing Qty Satellites in Constellation On-Orbit Spares Channels Number of Bands Data Storage Processing Power Source type Block Name Thermal Control Material Type Level of Technology Known Inheritance Propulsion station keeping Number of Axes Ground Based Spares Pointing Accuracy APPENDIX C EXISTING MODELS Numerous models are today in use for estimating spacecraft cost Two of the most common are the NASA/Air Force Cost Model and the Aerospace Small Satellite Cost Model Here is a description of the NAFCOM model The NASA/Air Force Cost Model NAFCOM is a parametric estimating toolfor space hardware It is based on historical NASA and Air Force space projects and is primarily used in the very early phases of a development project NAFCOM can be used at the subsystem or component levels The database currently includes 122 missions including 76 unmanned earth orbiting 24 unmanned planetary 11 launch vehicles 8 manned 3 engines It uses parametric relationships to estimate subsystem or component level costs for any aerospace hardware including earth orbital spacecraft manned spacecraft launch vehicle upper stages liquid rocket engines scientific instruments or planetary spacecraft 7 And for the Aerospace Small Satellite Cost Model SSCM employs a parametric methodology for estimation of program cost and is best suited to the early conceptual development phase of a spacecraft program during which time the design is likely to be less mature and when cost and performance trades can be easily performed SSCM consists of a collection of cost-estimating relationships or CERs which estimate the costs of developing andproducing a spacecraft system with the following subsystems  Attitude Determination and Control Subsystem ADCS  Propulsion  Power  Telemetry Tracking  Command TT&C  Command  Data Handling C&DH  Structure  Thermal CERs were also developed for integration assembly and test IA&T program management PM and systems engineering SE and launch and orbital operations support LOOS Individual subsystem cost estimates are statistically rolled up to yield a cost-risk distribution which provides the estimator with a range of cost estimates andpercentiles 8 The SSCM was calibrated from over 100 post-1990 Earth-orbiting andplanetary missions REFERENCES 1 Lack of Disciplined Cost-Estimating Processes Hinders Effective Program Management GAO study 04-642 2 Jilla Cyrus D and Miller David W Satellite Design Past Present and Future International Journal of Small Satellite Engineering 12 February 1997 3 Bearden David A A Complexity Based Risk Assessment of Low-Cost Planetary Missions:When Is A Mission Too Fast and Too Cheap Fourth IAA International Conference On Low-Cost Planetary Missions JHU/APL MAY 2-5 2000 4 Kellogg Mahr and Lobbia An Analogy-based Method for Estimating the Costs of Spacecraft IEEEAC paper 1371 Version 4 5 Hoeting Jennifer A Methodology for Bayesian Model Averaging An Update f 6]btp/ewiieiao iiAaos 7 Keith Smith NASA/Air Force Cost Model Science Applications International Corporation 8 18 


BIOGRAPHIES Lee Fischman served as Principle Investigator for this project Lee is Senior Director of Development at Galorath Incorporated where he directs much of the new product development and research at the firm He developed SEER for Software  Hardware Integrations with Microsoft Project the Comparison Sizing tool COTS Software model in addition to various data mining information extraction and expert systems Previously he was a software designerlprogrammer in the New York financial industry Lee earned a BA from the University of Chicago and an MA from UCLA both in economics Mike Kimel carried out statistical work on the project Mike is an Economist for Galorath Inc in addition to maintaining his own quantitative consulting practice He has also taught Economics and Advanced Statistics at the Graziadio School of Business and Management at Pepperdine University run the Competitive Strategy group for a Fortune 500 Telecom Company and worked as a Consultant at PriceWaterhouse LLC now PriceWaterhouse-Coopers He earned a Ph.D in Economicsfrom UCLA Troy Masters programmed analytic methods and is integrating the Far Out model into its parent product SEER for Hardware previously SEER-H Troy is a Software Engineer with Galorath Incorporated where he has been the primary developer for a range ofproducts He earned a BS in computer science from UCLA David J Pine was our subject matter expert helping us assemble data and gain insight into technical trends Dave is retired after a 34-year career with the National Aeronautics and Space Administration NASA currently is a consultant to various government and industry entities While at NASA his organizations in the Office of the Chief Financial Officer and later at the IPAO at Langley Research Center were responsible for the conduct of major NASA program analyses and evaluations for the NASA Administrator and Deputy Administrator From early 1988 through the end of 1990 he was the Deputy Program Manager for the Hubble Space Telescope Program specifically responsible for the telescope operations and science support aspects of the program He earned a BS in Aerospace Engineering from the Polytechnic Institute of Brooklyn and a Masters of Engineering Administration from the George Washington University 19 


  20 Angeles, where he also received a B.S. in Applied Mathematics  Eric Fetzer is a Senior Member of the Technical Staff at the Jet Propulsion Laboratory, Pasadena, California specializing in satellite observations of the atmosphere.  His scientific interests include planetary boundary layer processes, tropical phenomena, upper tropospheric variability, and climatologies of temperature, water vapor and clouds.  His technical interests include analysis of large data sets, and of multi-sensor observations. He has over 20 peer-reviewed publications and given numerous scientific presentations, public lectures and media interviews about climate science. Eric received a B.A. in Physics from the University of California Berkeley, and a Ph.D. in Astrophysical, Planetary and Atmospheric Sciences from the University of Colorado, Boulder   Amy Braverman is a Senior Statistician at the Jet Propulsion Laboratory, California Institute of Technology She holds a B.A. in Economics from Swarthmore College an M.A. in Mathematics from UCLA, and a Ph.D. in Statistics also from UCLA. Prior to her current position in JPL's Science Data Understanding Group, she was a Caltech Post-doctoral Scholar at the Jet Propulsion Laboratory, and a Scientist in the Flight Sciences Experiments Section of the Science Division. Dr Braverman conducts research on information-theoretic methods for the analysis of massive data sets and streams statistical data fusion, high-dimensional data analysis, and statistical analysis for climate model evaluation and diagnosis. She has published in both the statistics and geoscience literature, and is active in both communities She is a member of the Multi-angle Imaging SpectroRadiometer Science Team, and serves as a member of the Atmospheric Infrared Sounder Science Integration Team. Her responsibilities on both missions include designing data reduction algorithms for massive, remote sensing data sets. Dr. Braverman also holds an appointment in the Department of Statistics at UCLA as Adjunct Associate Professor, and is active in UCLA\222s Center for Environmental Statistics. She is member of the Committee on Applied and Theoretical Statistics of the US National Academy of Science. She has refereed for the Journal of the American Statistical Association, the Journal of Computational and Gr aphical Statistics, IEEE Transactions on Geoscience and Remote Sensing, and the Journal of Applied Meteorology and Climatology Seungwon Lee is a senior member of the High Capability Computing and Modeling Group at Jet Propulsion Laboratory. She is conducti ng research on comet gas dynamics, nonlinear dynamics control, climate model parameterization, Earth science data analysis, parallel computing, and advanced numerical algorithms. She received her Ph.D in Physics fr om the Ohio State University and her M.S. and B.S. in Physics from the Seoul National University, Korea  Matthew Henderson is software engineer in the High Capability Computing and Mode ling group at JPL. His current work includes Web Services and Instrument Data Level 2 subsetting. He received a B.S. Computer Science from CSU Pomona, and is currently pursuing M.S Computer Science  Steven J. Lewis is a member of the Information System and Computer Science staff member at the Jet Propulsion Laboratory.  He received a BS in Mathematics from the University of California, Los Angeles in June 2001, and the MS and Ph.D. Degree from Claremont Graduate University in May 2004 and May 2007, respectively.  He worked as a post doctoral fellow at Keck Graduate Institute from June 2007 until he joined JPL in March of 2008.  During his graduate and post doctoral work, his studies focused on applications of Bayesian methods to hidden Markov models with particular interest and application to protein sequencing.  His work at JPL has focused on integrating web services into various programming platforms for the purposes of accessing NASA satellite data, as well as developing object tracking so ftware and contributing to image enhancement and restoration efforts Van Dang is a member of the Science Data Understanding Group at the Jet Propulsion Laboratory. She was responsible for the NEWS Level 2 processing that generated the formal merged Level 2 data from multiple A-Train instruments  Manuel de la Torre is a Physicist from the Universidad Complutense at Madrid \(Spain\. After finishing his Ph.D work at the University of Bayreuth \(Germany\ on pattern formation in turbulent flows and a 7 1/2 year stunt as Ass and Assoc. Prof. at the Escuela T\351cnica Superior de Ingenieros Aeron\341uticos in Madrid \(Spain\, he came to the Jet Propulsion Laboratory on a 1-year Sabatical leave in 1997 wanting to apply fundamental concepts of nonlinear systems and geophysical fluid dynamics to something that might be directly useful to soci ety. He discovered the JPL as a great place to achieve that goal and extende d his stay a bit longer, becoming Technical staff and working on different aspects of remote sensing, validation of satellite instruments, and data analysis of atmospheric processes and climate  


