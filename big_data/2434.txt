Abstract 
JACK Intelligent Agent-based and User Preference Mining for Collaborative Filtering Ke Jia 1,2 1. School of Business Administration, Jiangsu University 2. School of Computer Science and Communication Engineering, JiangSu University Zhenjiang, China greenttea2006@yahoo.com.cn Yongzhao Zhan, Xiaojun Chen School of Computer Science and Communication Engineering, JiangSu University Zhenjiang, China yzzhan@ujs.edu.cn, chenxj_long@yahoo.com.cn 
204With the rapid development of the Internet and the worldwide popularity of the Web is growing exponentially Automation collaborative filtering \(CF\ is becoming efficient tool to assist users with accurate information. We present multi-agent 
model based on collaborative filtering system to find similar users\220 interesting and choose JACK Intelligent Agents TM to design CF system. Meanwhile, a novel mining frequent pattern algorithm, which is used to find users\220 interesting items and deduce association rules, is presented. Compared with traditional CF system based on frequent pattern mining algorithm, the novel algorithm has higher recall and accuracy rate 
Keywords- collaborative filtering, Multi-agents system, JACK mining association rules, rating frequent pattern growth 
I I NTRODUCTION Since the web information overload, collaborative filtering \(CF\ is becoming the tool that assists users to find 
Amazon.com CDNow.com 
WiseWire.com 
information, which they are interested in. CF mechanism uses the known users\220 preferences to predict unknown preferences of a new user [1  S o m e o f th e b es t k n o w n  r ep r es en t a ti v es ar e 
  Intelligent agents can filter out accurate information after users entering search query efficiently. Manos proposed a novel prediction algorithm for recommendation agent, which combines user-based and item-base similarity measures [3   Michael presented a multi-agent system called Collaborative 
 
and 
The traditional CF system is not suited to interacting with the dynamic and distributed information environment. Information filtering agents are adopted by collaborative filtering system 
Each user has a rate vector 
 where 
Spider, to collaborative filter search sessions [4   ormula \(1 
users 
U={U 1 U 2 203,U m  
items The similarity of user 
is computed by the cosine-based similarity, which is present in 
m n R r k I k x y 
A Collaborative filtering model description 
There are two classes of CF: user-based CF or itembased CF [5   T h e r e is  a lis t o f  and a list of and user 
I={I 1 I 2 203,I n  
represents the user\220s rating for item 
 1 22  11     
1 The second step is to predict rating for the target item among a set of similar users\220 interesting items using 2 Where 
ormula 2 
        
  212\212  212\212 001  212\327 
n x xj yj y j nn x xj yj y jj rrrr Sxy rr rr i uavg u j u uU Pre u j r k r r S u u r x,j 
 represents the rating of user 
over all items he had rated on item 
u\220 B Software agent 
U i 
is the average rating of user 
for item 
x r 
  
k 
 
is a normalizing factor such as the absolute values of the weights sum to unity Software agents are autonomous, personalized continuously running, driven by beliefs, desires and intentions BDI A ge n t s c a n w o r k t o ge t h e r  t o a c h i e v e a go a l  b y  
is the set of users, who rated item 
x j x u j u j 
Pre \(u j 
User 
has the nearest neighbor user 
means the prediction rating of target user 
cooperating and interacting with each other, called multi-agent systems \(MAS\. Agent Oriented Software Pty Ltd \(AOS\ has built Jack Intelligent Agents TM a framework in Java for multiagent system development  A g i v e n  a ge n t c a n b e de f i ne d in terms of its goals, knowledge and social capability. Jack supplies a high performance to describe agent model by using the BDI architecture 
C Frequent pattern mining 
Association rule mining \(MAR\s searching for interesting relationships between items by finding frequent items. The proposed algorithms are Apriori and FP-growth algorithm [8  Th e l at t e r a c h i ev ed h i g h e r ef f i ci en c y  I t  a l s o  h a s  performance bottleneck, which creates conditional FP-tree 
separately and recursively during the mining process, updates of FP-tree requires two scans the data set, and the process constructing FP-tree only focus on the frequency of the item which is the key to information filtering is users\220 interesting With the number of users increasing, FP-growth algorithm would generate a huge number of frequent items, most of which may have nothing to do with users\220 interesting. The constructing process may take too much time and space In this paper, a novel algorithm for constructing FP-tree according to users\220 preference rating called rating frequent pattern tree, RFP-tree, is proposed 1 
978-1-4244-2108-4/08/$25.00  \251 2008 IEEE 


be a set of all items and label it as 215 via the be Table   iff X X p 978-1-4244-2108-4/08/$25.00  \251 2008 IEEE has a child  2 is do the following: Select the rating frequent items in is the remaining list. Call insert_tree be linked to the nodes with the same  If to on item is 37 Illustrated in the Figure 1 is the rating of So we calculate the items\220 is the rating of item I which is denoted itemset Let The rating support of the rating set rate 1 I 1 1, I 2 2 2 I 1 1, I 2 1, I 3 1, I 4 0 3 I 1 1, I 2 1, I 4 1 4 I 1 1, I 2 1 ,I 3 3, I 4 2, I 5 4, I 6 6, I 7 1 5 I 2 1, I 3 2, I 4 2, I 5 4, I 6 1, I 7 1 6 I 1 3, I 2 4, I 3 1, I 4 5, I 5 2, I 6 2, I 7 1 TID Items: ratings Rconfidence L 4453 0.18 37 6 X    Y Y Y I 2 Rsupport I 3 Rsupport I 4 Rsupport I 5 Rsupport I 6 Rsupport I 7 Rsupport Rsupport\(X j=1,2,\203,m 6123 0.12 37 6 is the rating association rule  iff be an itemset Scan and is the minimal rating support threshold A rating frequent item header table is associated with each RFP-tree; each entry in the header table contains the following fields descending order as where Sort The node N.item_rating N\220 N\220 N\220 N\220 I 6 is the first element and 2 1\111 4 6 0.22 37 6 1113 0.04 37 6 212     The Y root     TABLE I A TRANSACTION DATABASE R={r 1 r 2 203,r m  I 5  212   R itemcount In CF systems, the scope of users rated the items is from means he has interesting in means has no interesting, rate  001\001 Y 212   refers to the next node in the RFP-tree with the same in Let the sorted rating frequent item list in transaction be and to collect the set of rating frequent items and add into rating frequent items list   w h er e and of example database as Figure means very boring. The sum of rating on all items in Table Rating frequent pattern tree, RFP-tree, predicts nonrating items by rating items; it can be used when known preference is very small and strict time requirement. Let be an itemset designates the number of transactions sharing a prefix path up to the node 216, for each transaction in such that We can construct the designates the rating of the item, and the increment is the count and In RFP-tree, it means user might be more is defined as the rating set for itemset is the child of node  b\ Compute the value of Y     N 001  is nonempty then call Figure 1 RFP-tree of Example database  insert_tree A The construction of rating frequent pattern tree Rsupport Rminsupp Rminconf Rsupport Rsupport\(X Rminsupp item-name item-count item-name node-link item-name null Rminsupp item.Rsupport item.Rsupport Rminsupp Rsupport null N.item_name p.item_name node_link node_link Rminsupp 10 Rsupport B Ming rating frequent patterns from RFP-tree 10 5 5       rates P P P II P REDICTION BY RATING FREQUENT PATTERN TREE  Definition 2.2 Let    Function insert_tree    If  Example: Let the transaction database 0,1 is defined as  is rating frequent itemset iff is defined as 220s count by 1  increment 220s rating count by s count=1  s rating count s parent link is linked to points. If user nodelink r j I = {i 1 i 2 203, i m  I r j I, Y I X X jk jk iX iI r r support\(X X I i j X X X k X X X Rsupport D I R I D F F D L p p P p p N N N N N.item_rating p D 5 i 5 I 1 I 1 0 j k iI R 5 I 4 I 6 I 5    Definition 2.3 Let          Output: the rating frequent pattern tree Method a\ Initialize the head node list with items in  c\ Create the root of an RFP-tree  Else do create a new node     s           I 1 Rsupport    X 13\(2\14 0.05 37 6 012 255 0.23 37 6 11 1 13 5 0.11 37 6 denotes the represented item the set of all items Rminsupp item-rating item-rating item_name 002 002 004 006 002 003 005 005 RT RT RT RT RT RT Rconfidence\(X,Y 216 and links to a set of item prefix sub-trees as its children. The procedure for constructing the rating frequent pattern tree is presented as algorithm 1 Algorithm 1 \(The construction of RFP-tree Input: A transaction set which is user\220s preference for an item Definition 2.1 Let is labeled as \215 


RNodeSupport RNodeSupport 2,1 3,9 3,6 3,4 3,5 Rminsupp null RNodeSupport Rminsupp RNodeSupport in one path of RFP-tree I 5  I 2 Item Rating conditional pattern-base Rating conditional RFP-tree iff    The rating conditional pattern and the rating conditional RFP-trees generated are summarized in Table  If tree contains single path P then For each combination \(denoted as of node in rating denotes is\(1+9\/2=5, the rating of is \(2+0+6\/3=2.67 RFP-Growth algorithm is described below Algorithm 2 \(RFP-Growth: Mining entire rating frequent itemsets Input field added. We introduce the rating support b\b 001\001 FR FR b Interface Agent works interactive with users, builds users\220 model according to users\220 search query. It collects user information from user\220s login, search history; browse history and feedback information to user database. After user reading web page, it modifies user model and stores user\220s information, which is learned from other similar users using learn mechanism [10 s t o r es  in u s e r d a ta b a s e an d in t er e s t  database. User interesting rule is stored in acknowledge database, which is deduced by collaborative filtering Agent RFP Agents Collaborative filtering Agents are based on RFP-Growth RFP Agent\. Each one of them build a rating FP-tree represents users\220 interesting with similar preference Interesting items is used to build RFP-Tree by RFP cooperation plan set, which is based on RFP-Growth algorithm. RFP Agent stores association rules into rule database. Figure 3 is the structure of RFP Agent RFP Agent actually is multi-agents team, as RCF Agents manage to collaborative users\220 interesting items. First of all, it filters user\220s interesting items using plan of RFP-Tree Init Agent. Second, constructs RFP-Tree using plan of RFP-Tree Build Agent. Finally, finds users\220 interesting frequent pattern rule using plan of RFP-Growth Agent. Method of plans is included in respective even TABLE II P ATTERN BASES AND THE CONDITIONAL RFPTREE 978-1-4244-2108-4/08/$25.00  \251 2008 IEEE  3 I 6 I 4 5,10, I 2 5,6, I 5 3,4} {I 4 5,10, I 2 5,6, I 5 3,4}| I 6 I 5 I 4 5,10, I 2 5,6} {I 4 5,10, I 2 5,6}| I 5 I 2 I 4 5,10} {I 4 5,10}| I 2 I 4 empty empty 220 220 I 5 I 6 and the rating support of one node node node RNodeSupport rating count  i RNodeSupport s conditional RFP-tree RTree  in I 6 I 5 I 5 I 6 I 6 I 5 I C I F I F I 1 I 2 I 4 I 4 I 4 I 2 i D X Rsupport RNodeSupport C Search Agent 005\b with with Output: the set of frequent patterns Method: call RFP-Growth when he is interested in and designates the user\220s preference trend. Since The path included then call RFP-Growth \(RTree and the construction of each node that Search Agent manages search information according to the rules in the user model and similar user model after RFP interested in of the nodes in the path generate pattern and B Collaborative filtering Agents based on RFP-Growth RFP Agents t\n\013  denote rating support of one node; it is used to construct RFP-Growth conditional pattern base 220s rating denotes The rating of I C    Definition 2.4 Let node child         Else do For each item  CR 1,2 2,0 in the header of tree do generate pattern CR t\005\b 006 007 t t t t t t t t RT RT RT  I 2 I 5 I 6 is the child of node  In algorithm 1 and 2, the difference from the traditional FP-tree are the computing method of support of  node father  Definition 2.5 Let        Procedure RFP-Growth   construct  III C OLLABORATIVE F ILTERING S YSTEM M ODEL USING RFP-G ROWTH WITH JACK We used Sarwar\220s collaborative filtering system model to build the CF system with RFP-Growth \(RCFS\ [9  F i g u r e 2  is  the structure of RCFS. The Interface Agent is the central coordinator. When user enters his query, it will transmit the task to other agents. And the Search Agent obtains results; the Interface Agent would present them to users. The RCFS is designed by using Jack 5.2 version. After user read the recommending pages, he will rate the page; the rating point is feed back to the Interface Agent. RFP Agent manages to filter information using user\220s information and interesting information with RFP-Growth algorithm. Search Agent searches information and recommends to interface Agent Figure 2 the structure of the RCFS I 1 I 2 1,2\, \( I 4 2,1, I 2 2,0\ \( I 4 3,9 I 2 3,6, I 5 3,4, I 6 3,5 I 4 5,5; I 2 3,3;I 5 3,4;I 6 3,5}| I 1 item-rating I 6 s conditional pattern-base and the A Interface Agent i is ratio of sum of one node\220s rating in the prefix sub-path set and its count The rating frequent patterns are generated in order. For example, the rating frequent patterns of  If RTree 


Jiangsu 3,400,000 550 250 125 Rminsupp minimal support 20 30 40 60 Rminsupp 40 Agent work. It chooses Top N keywords to search information as the query keywords Figure 3 collaborative Filtering Agents in JACK Design Views IV E XPERIMENTAL R ESULTS We evaluate the performance based on the precision and recall And in Figure 4\(b\, the precision of RCFS is highest too     and Top a\    \(b Figure 4 the comparison of Recall and Precision between RCFS and FPCFS V C ONCLUSION In this paper, we present an effective method RFPGrowth, to find frequent patterns in CF system. CF system uses users\220 rating items to filter non-frequent items to alleviate the scalability and novel frequent pattern growth algorithm to alleviate the sparseness problems. And JACK Intelligent Agent TM is chosen to design the collaborative filtering systems. The experiment result shows that the novel algorithm is more effective than the traditional CF system R EFERENCES 1 G  L i nde n B   S m i t h  J  Y o r k  215 A m azon  c om r e comme nd at i ons   i t emt oItem collaborative filtering\216, IEEE Internet Computing, vol. s7, Issue 1 pp. 76\20580, Jan/Fre 2003 2 D o ngS oep L e e  G y eY o ung  K i m  H y ungI l C h oi  215 A  w e bb a s e d collaborative filtering system\216, Pattern Recognition, vol. 36, 2003, pp 519\205526 3 M a n o s  P a p a g e li s  D i m i tr i s P l e x o u s a k i s  215 Q u a lita ti v e a n a ly s i s  o f u s e based and item-based prediction algorithms for recommendation agent\216 Eigineering Application of Artificial Intelligence, vol.18,2005, pp.781\205 789 4 M i c h a e l C h au D a n i e l  Z e ng  H s i n c h u n C h en   M i ch ae l H u a n g D a v i d Hendriawan, \215Design and evalution of a multi-agent collaborative web mining system\216, Decision Support system , vol. 35, 2003, pp. 167\205183 5 B   S a r w ar  G   K a r y pi s  J  A   K o ns t a n J  T  R i ed l  215I t e mb a s e d collaborative filtering recommendation algorithm\216, 10th international World Wide Web Conference, ACM Press, 2001,pp. 285\205295 6 F   D i gn u m  D  M o r l ey  E   A  S o n e nbe r g  215T ow ar ds  s o c i al l y  sophisticated BDI agents\216, MultiAgent Systems, In Proceedings of the Fourth International Conference on Multi-Agent Systems, Boston, USA 2000 7 N i c k H o w d e n  R a lp h R o n n q u is t  A n d r e w H o d g s o n   A n d r e w L u c a s   215Jack Intelligent AgentTM-Summary of an Agent Infrastructure\216 http://www.agent-software.com 8 J i aw e i H a n J i an Pen  and Y i w e n Y i n 215 M i n i n g f r eq uen t p a t t e r ns  w i t h o u t  candidate generation\216, Proc. ACM-SIMOD international. 2000, pp. 53\205 87 9 B  M   S a r wa r  G   Ka r y p i s J  k o n st a n  a n d J  R i e d l  215 An a l y si s o f  recommender algorithms for e-commerce\216, In Proceedings of the 2nd ACM E-Commerce Conference, Oct 2000:158\205167 1 H a m i d R   B e r e n j i  D a vi d  V e ng e r ov  215L e a r n i n g C oope r a t i o n  and Coordination in Multi-Agent Systems\216, Intelligent Inference Systems Corp. Technical Report IIS-00-10, Oct 2000 As shown in Figure 4\(a\, the recall of RCFS is highest while 3 10 12 50 RA denotes the article set that user is interested in according to users\220 rating  4 University Digital Library capacity to nearly users is used to be the test data set. We compared RCFS with the traditional Collaborative Filtering Systems based FP-Growth \(FPCFS We perform the experiment with different Top N values as the number of keywords. We evaluate N values are corresponding to denotes the article set that the CF system predicted and recommends to the user. The recall is defined as the ratio of the number of articles correctly predicted over the total number of user\220s interested articles The precision is defined as the ratio of the number of articles set that users actually are interested in over the total of the number of articles set in FPCFS are S S 6 N 8  words of recommended to the user users is used as the training data set; the one-third of users with We analyze the recall and precision, when articles as a source of data for the prototype CF system to test. The two-third of the users\220 preference set with and 4 The goal of the experiment is to find out the user\220s preference among the similar users set by the novel FPGrowth algorithms, RFP-Growth. The experiment is using CF system based on RFP-Growth \(RCFS\, a prototype system for our research. We use  978-1-4244-2108-4/08/$25.00  \251 2008 IEEE 003  003  SRA Precision S SRA Recall RA in RCFS and  8   


 then it is considered that flying support belongs to ITVL x  w hereas if the weight of flying support is more towards ITVL y it will be considered as ITVL y support. However, if t he weight of flying support is equal between two ITVLs we will assume that flying support belongs to the ITVL from where the sequential pattern flying support has started   Fig. 3.  Standard and Flying Support  I 1\. Valid Interval Definition After discussing the flying support concept valid interval can be defined as: an interval \(ITVL\ is valid with reference to a given sequential pattern SP, if it satisfies the user defined parameters SD SW within the said ITVL and one of the following conditions is true  267  Standard Support is 001 min_supp 267  Standard Support + Flying Support 001 min_supp 267  Flying Support 001 min_supp  C. Longest Interval \(Problem Definition The problem to mine all the longest intervals can be defined as \223Suppose we have a database of events D and a sequential pattern SP  along with all its user defined parameters and also the user defined granularity The problem is to discover all the longest intervals satisfying the min_ilen parameter for each cycle D 1 D 2 D 3 205.D n 224  I Framework to Discover Longest Intervals Due to the temporal and inter-transactional characteristics of sequential patterns it is recognised that longest interval discovery will be quite an expensive process Consequently  it is important to devise different t echniques, which can help to scan the minimum amount of the database during the mining process Keeping in view the above consideration we decompose the problem of longest interval discovery into four sub-problems These sub problems are basically set of valid intervals with different length  267  Strictly Loose Seed Interval \(SLSI 267  Loose Seed Interval \(LSI 267  Seed Interval \(SI 267  Longest Interval \(LI                               Fig. 4.  Framework to Discover Longest Intervals  T wo main search techniques the Interval Validation Process IVP and the Process Switching Mechanism PSM are introduced here for the discovery of all the longest intervals in each cycle. The main objective of IVP is to confront the complexities which emerge due to the sequential/temporal nature of sequential patterns whereas PSM is devised to increase the efficiency of the mining process by only scanning relevant intervals from the database  I.1.\  IVP \(Interval Validation Process During different stages of the longest interval discovery process, PSM passes the C ITVL Current Interval\ to IVP to v erify if the C ITVL is valid or not \(Fig 4\. IVP first checks t he validity of C ITVL by counting standard support and then i f required it also counts the flying support to check C ITVL  v alidation.  IVP utilises DSCP \(Dynamic Support Counting Process during the standard support counting process for each data sequence DSCP scans only the minimum number of required data-sets from the database in order to find the support of a given sequential pattern\. This process continues until the counted support of the given SP is equal to min_supp parameter and IVP returns \223valid\224 to PSM or there is no data sequence left in C ITVL to check \(IVP returns 223 invalid\224 to PSM If after checking the standard support IVP retains \223invalid\224 against C ITVL then the flying support c oncept needs to be explored \(Fig 4  Algorithm IVP \(Interval Validation Process\ for standard ITVL stage=s_supp indicate different stages of IVP  i=1  counter to fetch next record CS=0  current support of given SP  CR  current record C_Supp  calculated Support RR   remaining records TR   total records if stage=s_supp then  IVP is in standard support stage  LR_ID LR C ITVL     Fetch the last record ID  Loop ITVL Y  Standard Support Flying Support ITVL X  Time Line 


  CR Fetch_Rec C ITVL i\  //to fetch data sequence   C_Supp DSCP CR, SP SD,SW    if  C_Supp<>0 then   CS=CS+C_Supp i=i+1 Add C Seq_Id Seq_List     else     i=i+1 end if if CS 001 min_supp*TR\ then return\(\223valid\224 else if \( \(min_supp * TR\-CS > RR\ or \(i > LR_ID  i=0 Store CS,Data_Struc   stage=\224f_f_supp\224 exit end if  end if if stage=\224complete\224 IVP on C ITVL is complete  exit end if  Fig. 5.  IVP Algorithm for standard support   I Flying Support Discovery Flying support can exist on both sides of C ITVL  T herefore first certain portions of C ITVL  and N ITVL  Next I nterval have to be scanned to find flying support of the given SP. We can call this ITVL as FF ITVL Forward Flying I nterval However after checking the FF ITVL  if C ITVL  is s till invalid then certain portions of C ITVL  and P ITVL   Previous Interval\ have to be scanned as well; we call such ITVL as BF ITVL Backward Flying Interval\ \(Fig 6                                Fig. 6.  Flying Intervals  O nce the FF ITVL is created, the next step is to find pattern s upport in it. Upon finding the flying support for C ITVL IVP a ggregates the support against C ITVL  in the data structure  Table 1 This aggregation depends on the weight of the discovered flying support For example if 70 of the weight is in C ITVL then current support is aggregated with 0 7. The process continues until the min_supp parameter is satisfied or the algorithm scans the last data sequence of FF ITVL   D ata Structure of IVP ITVL ID  ITVL STATUS  SUPPORT STATUS  CYCLE CAL SUPPORT  C ITVL  Valid I nvalid Standard Flying Both Cycle of the C ITVL  C alculated Support  After scanning the FF ITVL  if the min_supp parameter is n ot satisfied, then IVP will count flying support in BF ITVL  O nce the BF ITVL is created, the next step is to count pattern s upport in it Upon finding the flying support IVP aggregates the support against C ITVL  This process c ontinues until the min_supp parameter is satisfied or the algorithm scans the last data sequence of BF ITVL   I 2.\ PSM \(Process Switching Mechanism The main aim of implementing PSM is to scan only those intervals ITVLs which can be part of any longest interval This is done by switching the discovery process into different modes forward mode backward mode and jumping mode Switching of process modes depends on different scenarios during the discovery of SLSI LSI SI and LI  Let us first discuss the definitions of each subproblem  Strictly Loose Seed Interval \(SLSI An interval is a SLSI Strictly Loose Seed Interval with reference to a given  sequential pattern if and only if it is a valid interval and satisfies both the following conditions  267  SLSI is not surrounded by immediate valid intervals 267  SLSI is not a part of any LSI, SI or LI  Loose Seed Interval LSI  An interval is loose seed interval \(LSI\ with reference to a given sequential pattern if and only if, it satisfies all of the following conditions  267  At least first and last ITVLs of potential seed interval are valid 267  The distance between first and last valid interval of LSI is equal to min_ilen parameter 267  There is not a single invalid ITVL between first and last ITVLs of LSI  Seed Interval SI An interval is considered as seed interval \(SI\ with reference to a given sequential pattern if the length of consecutive valid interval is equal to min_ilen parameter  Longest Interval \(LI The longest interval definition was presented in section 4.2 In Fig 7 the longest interval is depicted as LI=\(ITVL 17 ITVL 18 ITVL 19 ITVL 20 ITVL 21   I 2.1\  PSM \(Process Switching Mechanism\ Algorithm The PSM algorithm starts in forward mode by undertaking the first problem, that is to find SLSI \(Strictly Loose Seed Interval\.  It scans the first ITVL to check if it is a valid interval  If IVP discovers that C ITVL  Current I nterval\ is invalid then the process simply moves to N ITVL   Next Interval and this process continues until PSM discovers SLSI or the process reaches the last ITVL of the said cycle \(Fig 8-a                                   Fig. 7.  Different stages of longest ITVL  However, if C ITVL is recognised as valid interval it means 


 that we have found the first SLSI. Upon finding the SLSI PSM undertakes the second sub-problem discovery of LSI According to the definition of LSI for any LSI at least first and last ITVL of potential loose SI have to be valid therefore PSM jumps to the last interval of the potential loose seed interval. The reason for this jump is in the following property of longest interval  267  The longest interval cannot be less than min_ilen and every ITVL within the longest interval has to be valid ITVL  Hence, if we found that ITVL 8 is invalid then there is no n eed to check the ITVLs between ITVL 4  to ITVL 7  since t hey cannot be part of any longest interval \(Fig 8-b  After jumping to the last ITVL of potential LSI PSM again passes the C ITVL to IVP to check if the ITVL is valid o r not. If it is recognised that C ITVL is invalid then it means c urrent SLSI cannot be a part of any longest interval Therefore PSM switches to forward mode by moving to the N ITVL  Next Interval and the process of searching the n ext Strictly Loose Seed Interval \(SLSI\ continues \(Fig 8c\.  However, if C ITVL is valid at this stage, that means we h ave found the first LSI Upon discovering the LSI PSM confronts the third sub-problem discovery of SI To discover SI, PSM has to scan the remaining ITVLs between first and last ITVL of the already discovered LSI Therefore PSM switches into backward mode and scans the ITVL, which is one ITVL previous than the C ITVL Fig 8 d  Validation of C ITVL is checked by IVP again. If C ITVL is i dentified as valid interval then the process of discovering the seed interval will continue  PSM will remain in backward mode and moves to the previous ITVLs one by one to check the validity of different ITVLs This process continues until PSM reaches the already discovered valid interval or it encounters an invalid interval \(Fig 8-e  During the process of discovering SI, if PSM encounters an invalid ITVL at any stage, then it does not have to check the rest of the ITVLs of LSI \(as this LSI cannot be part of any LI\. In this scenario, PSM assigns a new value to SLSI that is the last valid interval identified by PSM in \(see Fig 8-f new SLSI is assigned with ITVL 7 Now the process of d iscovering the next LSI proceeds again. According to the definition of LSI for any LSI at least the first and last ITVLs have to be valid therefore PSM jumps to the last interval of the potential loose seed interval. How long this jump will be depends on the min_ilen parameter If PSM continues in backward mode and reaches the already discovered ITVL then it means we have found a consecutive set of valid intervals whose length is equal to the min-ilen parameter which is the definition of SI In that scenario PSM jumps to the first ITVL after the last ITVL of current SI and the discovery process of LI proceeds \(Fig 8-g\.  In the Longest Interval \(LI\ discovery process PSM switches to forward mode to check the validity of the C ITVL However, if the C ITVL is identified as v alid interval then the seed interval is extended by this C ITVL  This process continues until PSM encounters an i nvalid ITVL or PSM reaches the last interval of the data set. Once PSM encounters an invalid ITVL the process of extending the seed interval terminates. The discovered LI is stored in the data structure and the PSM algorithm proceeds to the search of the next SLSI Fig 9 As we have to discover all the longest intervals for each cycle, the process given in Fig 4 is recursive and it will continue until all the longest intervals of each cycle are found D.  PIDeriver Algorithm for Periodic Interval Discovery Once all the longest intervals for each cycle are discovered with the above motioned approach we can straightforwardly implement the PIDeriver algorithm presented by Chen in 1  t o  d e r i v e  a l l  t h e  p e r i o d i c  t i m e  intervals for a given sequential pattern              Fig. 9.  Discovery process for LI V  INCREMENTAL  DATA  MINING M ining periodicity for sequential patterns is a time consuming process Maintaining the already discovered periodic patterns in the updated database is very important since new data may invalidate some of the discovered periodic patterns and new periodic patterns may emerge due to new data Assuming that the cyclicity granularity and sequential pattern of interest remain the same the approach presented in this paper to discover periodic time intervals for a specific SP can be used for incremental mining of periodic time intervals as well  The approach presented in this paper divides the main problem of finding the periodic time intervals into two sub-problems finding the longest interval for each cycle and discovery of periodic intervals by using already discovered longest intervals of each cycle  Since the second problem is purely based on mining results of first problem the discovered longest intervals in the previous data mining efforts can be used in an incremental data mining process. During the incremental data mining process the algorithm will only focus on finding the longest intervals from new data. However, due to the temporal nature of sequential patterns some portion of the old database will be used as well, the size of this is directly proportional to the user defined parameter of SD Sequence Duration Since finding the longest interval involves most of the processing and complexity during the process of periodic time interval discovery this approach will benefit the incremental data mining quite significantly VI.GENERALISED  MODEL  FOR  FRAMEWORK T he Generalised model GN shows the discovery process of all data filtration transformation discovery of 


 all longest intervals for each cycle and periodic time intervals Transition Z 1  represents the filtration process of t he time stamped database The process of data transformation is represented by transition Z 2  and the data s egmentation by transition Z 3 Transitions Z 4 and Z 5 show r espectively the Process Switching Mechanism \(PSM\ and Interval Validation Process IVP Transition Z 1  has the f ollowing form  Z 1 l 1 l 2 l 4 l 3 l 4 r 1    l 3  l 4  r 1  l 1  false True  l 2  false True  l 4  W 4_3  W 4_4  W 4_3 223The process of data filtration has finished\224 W 4_4 254 W 4_3  P lace l 1  corresponds to the entrance point for the s tamped database in the GN It is represented by one 002  token which enters the input place with initial characteristic 223a stamped database\224  In place l 2  enters 003  t oken with initial characteristic 223time period \(TP\\224   The 002  token simultaneously with the 003 1  token passes t hrough transition Z 1  and enter place l 4  This place c orresponds to the process of filtration The two tokens merge and form one new token with initial characteristic the result of the united characteristics of the tokens On each transition activation the new token passes through the transition and enters again place l 4  extending its c haracteristic with the current results of the filtration process. After the process finishes the final token moves to place l 3 obtaining as a characteristic 223 filtered database\224 Transition Z 2 has the following form  Z 2  l 3  l 5  l 7  l 6  l 7  r 2    l 6  l 7  r 2  l 3  f  alse True   l 5  f  alse  True  l 7  W 7_6  W 7_7  W 7_6 223The process of data transformation has finished\224 W 7_6 254 W 7_7   T he description of transition Z 2 functioning is similar to t he one of transition Z 1 As a joint place between transitions Z 1  and Z 2  place l 3  do not need any addition explanations T he tokens from place l 3  pass through the transition and e nter place l 7  which corresponds to the process of data t ransformation Place l 5  is an entrance point for the p arameter giving the sequential pattern SP which is represented by one 004  token 004  token enters the net with initial characteristic 223sequential pattern\224 The tokens from places l 3 and l 5 pass simultaneously to place l 7 merge and o btain join characteristic. This characteristic is extended on every transition activation by the current results of the transformation process. After the process finishes the final token moves to place l 6 obtaining as characteristic 223 sequence database\224 The process of data segmentation consists of three consecutive stages splitting into user defined cycles division into user interested granules and granulation according to user defined sequence duration parameter. The form of transition Z 3 is the following  Z 3 l 6 l 8 l 9 l 10 l 12 l 13 l 14 l 11 l 12 l 13 l 14 r 3    l 11  l 12  l 13  l 14   l 6  false true false false  l 8  false true false false r 3  l 9  false false true false  l 10  false false false true  l 12  false W 12_12  W 12_13  false  l 13  false false W 13_13  W 13_14   l 14  W 14_11  false false W 14_14  W12_12  223The process of database division into user defined cycles has not finished\224 W12_13  254 W12_12 W13_13  223The process of database granulation has not finished\224, W13_14 = \254 W13_13, W14_11 = \223The process of database segmentation has finished\224 W14_14  254 W14_11  In places l 8  l 9  and l 10  enter respectively one 005   006  and 007  token with initial characteristics 223cyclicity interval  \(CY\\224  223granularity interval GR\\224 and 223sequence duration SD\\224   At the first activation of the transition the two tokens from places l 6 and l 8 pass simultaneously through it, merge i nto one new token and enter place l 12 At the beginning the n ewly created token obtains composite characteristic It extends its characteristic on every pass through the transition and entering into place l 12  with the current state o f the process of database division into user defined cycles After this process finishes the resulting token simultaneously with the 006 token from place l 9 pass through t ransition Z 3 and enter into place l 13 In this process the two t okens merge into one token with initial characteristic the composition of the characteristics of the parent tokens. Like in the previous case the resulting token enters place l 13  e xtending its characteristic with the current state of the process until a granulated database is obtained. On the next step the obtained token enters place l 14 simultaneously with t he 007 token from place l 10 The two tokens unite each other m erging their characteristics The newly created token passes through transition Z 3 and enters place l 14 until a final g ranulated database is obtained On each entrance into place l 14 the token extends its characteristic with the current s tate of the process of database final granulation. At the end of this process the token moves to place l 11  with a c haracteristic 223segmented database\224 Transition Z 4 has the f ollowing form  Z 3 l 6 l 8 l 9 l 10 l 12 l 13 l 14 l 11 l 12 l 13 l 14 r 3    l 11  l 12  l 13  l 14   l 6  false true false false  l 8  false true false false r 3  l 9  false false true false  l 10  false false false true  l 12  false W 12_12  W 12_13  false  l 13  false false W 13_13  W 13_14   l 14  W 14_11  false false W 14_14  


 W 12_12   223The process of database division into user d efined cycles has not finished\224 W 12_13 254 W 12_12  W 13_13  223 The process of database granulation has not finished\224 W 13_14   254 W 13_13  W 14_11   223The process of database s egmentation has finished\224 W 14_14 254 W 14_11   I n places l 8  l 9  and l 10  enter respectively one 005   006  and 007  token with initial characteristics 223cyclicity interval  \(CY\\224  223granularity interval GR\\224 and 223sequence duration SD\\224   At the first activation of the transition the two tokens from places l 6 and l 8 pass simultaneously through it, merge i nto one new token and enter place l 12 At the beginning the n ewly created token obtains composite characteristic It extends its characteristic on every pass through the transition and entering into place l 12  with the current state o f the process of database division into user defined cycles After this process finishes the resulting token simultaneously with the 006 token from place l 9 pass through t ransition Z 3 and enter into place l 13 In this process the two t okens merge into one token with initial characteristic the composition of the characteristics of the parent tokens. Like in the previous case the resulting token enters place l 13  e xtending its characteristic with the current state of the process until a granulated database is obtained. On the next step the obtained token enters place l 14 simultaneously with t he 007 token from place l 10 The two tokens unite each other m erging their characteristics The newly created token passes through transition Z 3 and enters place l 14 until a final g ranulated database is obtained On each entrance into place l 14 the token extends its characteristic with the current s tate of the process of database final granulation. At the end of this process the token moves to place l 11  with a c haracteristic 223segmented database\224 Transition Z 4 has the f ollowing form  Z 4  l 11  l 17  l 18  l 19  l 15  l 16  l 17  l 18  r 4    l 15  l 16  l 17  l 18    l 11  t  rue false  False  false   r 4  l 17  f  alse  W 17_16  W 17_17  false    l 18  false false W 18_17  true   l 19  f  alse false  True  false   W 17_16   223The process of data segmentation has f inished\224 W 17_17   254 W 17_16  W 18_17   223The PSM has to j ump minimum length parameter steps\224  Initially in place l 18 enters one b  token with initial characteristic 223minimum interval length \(min_ilen\\224   The already segmented database from place l 11 pass i nterval ITVL by interval through transition Z 4  to place l 15 The token from place l 11 passes directly to place l 15 for v alidity check without obtaining any new characteristics The b token moves simultaneously with one of the tokens in place l 19  to place l 17  obtaining as characteristic t he current state of the process of the longest interval LI finding\224  At the end of this process the resulting tokens move to place l 16 and merge with the tokens from the same interval o btaining characteristic 223segments of the longest interval\224 The form of transition Z 5 is  Z 5  l 15  l 19  r 5    l 19   r 5  l 15  t  rue  VII  CONCLUSION  AND  FUTURE  WORK I n this paper the problem of finding the periodic time intervals for a given sequential pattern is addressed The approach presented in this paper divides the main problem into two sub-problems finding the longest intervals for each cycle and discovery of periodic time intervals by using the already discovered longest intervals of each cycle Almost all the data processing and complexity is covered during the process of finding the longest intervals Moreover the second problem is purely based on mining results from the first problem.  Therefore, in this paper we mainly focused on the problem to find all the longest intervals for each cycle To confront the above problem efficiently, we introduced two main search techniques IVP Interval Validation Process\ and PSM \(Process Switching Mechanism\.  In this paper we have presented an effective mining approach for finding all the periodic time intervals for a given sequential pattern. As a future work the process presented in this paper can be extended to find periodic time intervals for all the given sequential patterns in one database scan However to accomplish this task a more complex data-structure/memory management technique needs to be implemented REFERENCES 1  X  Chen and I. Petrounias, Mining Temporal Features in Association Rules, Proc. of PKDD\22299, Prague, Czech Republic, pp.295-300 2  Ozden B Ramaswamy S and Silberschatz A  Cyclic Association Rules in Proceedings of the 14 th   International C onference on Data Engineering 1998 Orlando Florida USA IEEE Computer Society 3  Han, J., Pei, J., and Yin, Y., Mining Segment-Wise Periodic Patterns in Time-Related Databases in Proceedings of the 4 th   International C onference on Knowledge Discovery and Data Mining, 1998: AAAI Press, Menlo Park 4  Yang J Wang W and Yu P.S Mining asynchronous periodic patterns in time series data in Proceedings of KDD 2000 p 275279 5  Huang K.-Y and Change C.-H Asynchronous periodic patterns mining in temporal databases in Proceedings of the International Conference on Databases and Applications DBA'04 2004 Innsbruck, Austria 6  Huang K.-Y and Change C.-H  Mining Periodic Patterns in Sequence Data In Proceedings of the 6th International Conference on Data Warehousing and Knowledge Discovery DaWaK 2004 Zaragoza, Spain: Springer 7  Yang J Wang W and Yu P.S Mining Surprising Periodic Patterns, in Data Mining and Knowledge Discovery, 2004 8 p. 253273 8  Lin W Orgun M.A and Williams G.J  An Overview of T emporal Data Mining in Proceedings of the 1st Australian Data Mining Workshop, 2002  9  C  hen X and Petrounias I  A Framework for Temporal Data Mining, in Proceedings of 9 th International Conference on Database a nd Expert Systems Applications DEXA'98 1998 Vienna Austria: Spring 


 Fig. 8. PSM \(Process Switching Mechanism Move to N ITVL Next Interval 1 2 3 4 5 Time Line Invalid ITVL   a\  SLSI discovery process \(forward mode continues  Jump to 8 th ITVL min_ilen=6 1 2 3 4 5 Time Line 6 7 8 b SLSI found \(process in jumping mode  M o v e  t o  N I T V L  t o  f i n d  n e x t S L S I  p ro c e s s  s w i t c h  t o f o r w a r d m o d e  1 2 3 4 5 T i m e  L i n e L a s t  S L S I f o u n d 6 7 8 9 I n v a l i d I T V L  c \  SLSI found but C ITVL is invalid   Backward Mode 1 2 3 4 5 Time Line LSI found 6 7 8 9 Valid ITVL d  LSI is found and process switches into backward mode   Backward Mode 1 2 3 4 5 Time Line LSI found 6 7 8 9   e\  LSI found- Seed Interval Discovery Process 1 2 3 4 5 Time Line 6 7 8 9 Invalid ITVL SLSI is assign new value of ITVL 7 and the p rocess of searching next LSI proceed again 12 11 10 13  f\  PSM encounters invalid ITVL during the search of SI  1 2 3 4 5 T ime L ine 6 7 8 9 SI Fo u n d D isco v ery p ro c ess o f L I p ro c eed s  g\  SI is found and PSM proceed for the discovery of LI   


