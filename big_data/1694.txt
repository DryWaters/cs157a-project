Proceedings of the First International Conference on Machine teaming and Cybernetics Beijing 4-5 November 2002 DISCOVERY OF EMERGING PATTERNS FROM NEAREST NEIGHBORS HIROYA INAKOSHI TAKAHISA ANDO AKIRA SATO SEISHl OKAMOTO FUJITSU LABORATORIES LTD 9-3 Nakase I-chome, Mihama-ku, Chiba City Chiba 261-8588 Japan E-MAIL inakoshi and, satoyan seishi J flab.fujitsu.co.jp Abstract In this paper we propose a scalable classifier that uses jumping emerging patterns JEPs which are combinations of values that occnr in one class The original classifier 
DeEF is an instance-bad classifier that operates on all instances in real-time It diswvers maximal patterns that occur thmughont the entire database and idenwies JEPs by wing these patterns The necessary wmpotational effort though is likely to increase when DeEPs is applied to a large database Our proposed classifier operates on the nearest neigbbon of a test instance This reduction of instances improves scalability as the database volume increases Moreover our classifier imposes a restriction regarding JEPs discovery so that it 
excludes patterns that cannot be identified as either correct JEPs or JEPs caused by the maximal patterns missing from nearest neighbors These probably incorrect JEPs are specialized with additional items and participate in class determination Our classifier performs significantly faster with these two enhancements while it remains as accurate as the origiaal classifier 1 Introduction Classification is a critical issue in machine leaning research In general, classification is aimed at classifying instances in a set of test data based on knowledge learned from a set of training data 
Through extensive research various classification methodologies have been developed 4s DeEPs  is a classifier that uses emerging patterns\(EPs to perform classification EPs are informally, combinations of values whose frequency of occurrence changes significantly between different classes While association rule mining I aims to discover patterns regarding any item that occurs dependently in a database DeEPs is intended for classification DeEPs mainly discovers patterns that occur only in a certain class without occumng in other classes and uses these patterns for classification These is a special type of EPs that are called jumping emerging patterns JEPs DeEPs 
is an instance-based algorithm I in that it discovers EPs only after a-test instance is supplied for classification Instance-based hyssifiers quire no pre learning which is advantageous when these classifiers are applied to a target whose learning concept changes frequently These classifiers though need to maintain many training instances in memory for use in its delayed IO 61 decision making which requires a long time since these classifiers have to operate on these instances in real-time In this paper we propose a classifier that is scalable with respect to database volume by employing the pattern discovery methods of DeEPs The proposed classifier operates only on nearest neighbors which is 
a group of instances within a certain distance from the current test instance Since our classifier reduces its target instances in its early stage it requires less processing time. DeEPs uses miml panerns in its discovery phase which patterns usually contain many items Since the nearest neighbors also have many items in common with the current test instance a large portion of these important patterns are likely to be available in the neighborhood of the current test instance However all maximal patterns are needed to obtain logically correct JEPs The correctness of JEPs means that a discovered JEP occurs only in its class When some maximal patterns are 
not among the nearest neighbors, we will fail to discover some correct JEPs and misidentify some patterns as JEPs These emrs may lower accuracy To overcome this problem we impose a restriction on which patterns will be discovered This restriction eliminates a pattern that cannot be determined whether it is a correct JEP or a JEP merely caused by the maximal pat tern missing from the nearest neighbors This elimination is enabled by constraining the possibly incorrect pattern with additional items that commonly occur in the nearest neighbors The remainder of this paper is organized as follows Section 2 describes DeEPs and introduces necessary concept of borders 
Section 3 describes the problem that arises from missing maximal patterns and proposes an algorithm to overcome this problem Section 4 reports the experimental results carried out to compare the performance of the proposed classifier and DeEPs. Section 5 concludes this paper 2 DeEPs Emerging patterns are informally defined as patterns whose frequency of occurrence changes significantly between classes In the remainder of this paper, we consider a special type of EPs called jumping emerging patterns JEPs JEPs are extreme type of EPs in that they occur in 0-7803-7508-4f02l$17.00 ZOO2 IEEE 1920 


Proceedings of the First International Conference on Machine Learning and Cybernetics Beijing 4-5 November 2002 just one class and never in the other classes Table 1 repre sents an example database database We say that a pattern is maximal if there is no pattern that is a superset of the pattern A pattern is minimal Since the JEPs in Table 2 occur only in a single class and 1 if there is no pattern that is a subset of the pattern Table 3 presents the maximal patterns of class P mRp and those of class N mRn never in any other they are the JEPs inhisdatabase Table 2 Example of Jumping Emerging Patterns 1 JEPs of class I sunny mild I JEPs of class sunny Sunny mild high 1 m sunny high 2.1 Classification Algorithm Before we describe the original classification algorithms we will explain the necessary terminology and definition A value that occurs in a database or in a test instance is called an item. Both patterns and instances are represented in the form of an item set which is a collection of items A collection of item sets is succinctly represented in the form of a border as defined below 15 Definition 1 An ordered pair LR is called a border L the left-hand bound of this border and R the right-hand bound if a each of L and R is an anti-chain  a collection of sets in which any two elements X and Y satisfy X g Y and Y g X  and b each element of L is a subset of some element in R and each element of R is a superset of some element in L A bonier represents a collection of item Sets containing any item set 2 satisfying X 0 Z 0 Y for any X E L and Y E R For example ll 2,311 1.2.31 2,3,411 represents a collection of item sets:\(\(l 1,2 1,31 1,2,31 12.31 2,3,411 DeEPs performs classification in three stages 2.1.1 Reduction Given a test instance, training instances are reduced by removing items irrelevant to the test instance In the example given in Table 1 given a test T sunny mild high true the removed items are represented in italic style. The result of this reduction is a sparse database Maximal patterns are then selected from the sparse Table 1 Weather Conditions Class P\(suitable for activity outlook temperature humidity windy overcast hor high false rain mild rain cool overcasf cool rain mild su~y mild overcast mild overcmr hat sunny cool false false me false false me me false Table 3 Example of Maximal Patterns I maxR I sunny mild I  I I sunny mild I high 1 Id high true I In some cases, there may be continuous attributes in a datahase Suppose that an attribute ai is a continuous valued attribute and its domain is 10 11 and that the current test instance is T whose value of ai is xi Given a training instance S the reduced version of S contains xi if ai value of S is in xi a  xi  a I The default value of a is 0.12 2.1.2 JEP discovery This stage effects JEP discovery by using the maximal patterns obtained in the previous stage An example of JEPs is already presented in Table 2 Formally JEPs are represented in the form of border epLp,epRp and epLn,epRn represents respectively all patterns occurring only in class P and class N 81 epLp,epRp   Q maxRp   Q mRn  epLn,epRn   Q    6 I,mRp DeEPs uses a collection of patterns SEP=epLp U epLn which is called necessq EPs I to determine what class to classify An example SEP is sunny mild true sunny high 1 This JEP discovery is achieved by using the two algorithms JEPPRODUCER and BORDERDIFF  I In brief they generate all patterns that occur in just one class by operating on the maximal patterns while a naive algorithm might enumerate all item sets and check them if they occur in a single class id Saturday Morning Activity Class N\(not suitable outlook temperature humidity windy SUMY hot high false SUMY hot high true rain cool normal true sunny mild high false rain mild high true 1921 


Proceedings of the First International Conference on Machine Learning and Cybernetics Beijing 45 November 2002 2.1.3 Score Evaluation In the third stage DeEPs determines to which class it classifies the current kst instance This decision is made through compact summations for each class compactScore\(C  countSc SEP  ISCl SC represents the records of class C and lSCl represents its size countSc\(SEP is thenumber of instances in SC that contain one or more necessary EPs in SEP The test instance is classified to the class with the highest compact score of all classes A majority rule is used to break ties For the example given in Table 1 the compact scores for classes P and N would be compactScore\(P  1B  0.1 1  compactScore\(N  3/5  0.6 DeEPs assigns the current test to class N consequently  2.2 Multiple Classes The problem that arises with two classes has been explained and here we briefly explain an example with three classes S1 S2 and S3 are respectively, the instance sets for classes 1 2 and 3 As in the problem with two classes DeEPs first applies the reduction phase and then discovers the EPs for each class with respect to S1 from S2 U S3 S2 from S3 U Sl and S3 from S1 U S2 3 Emerging Patterns from Nearest Neighbors Our classifier uses only nearest neighbors for JEP discovery We define nearest neighbors as the instances whose distance to the current test instance is within a certain threshold 91 Dennitinn 2 d-Nearest Neighbors d-NN 0 is a set of instances whose distances to a test instances T are less than or equal to a certainftied distance d D  XI IX-Zl 5 d We currently employ city-block distance in determining d NN  Given a test instance the reduction phase removes values irrelevant to the test instance The resulting sparse database is rkpsented with LP,Rp and Rn Rp and Rn represent respectively the maximal patterns of classes P and N in d-NN and Lp and Ln respectively the minimal7patterns of classes P and N Generally the population of d-NN is much smaller than that of all iiistances JEP discovery requires less processing time if it operates on a small number of maximal patterns On the other hand many maximal patterns are among d-NN because each of d-NN instance matches to the test instance with many items while maximal patterns likely to contain many items As a result d-NN should not considerably affect the accuracy with a moderate distance threshold However d-NN does not always contain all maximal patterns in the entire database The missing maximal patterns may affect the JEPs The following example describes this situation. Suppose the current test instance is T   1,2,3,41 The sparse database of all instances and d NN are respectively represented by I 4 marRp U I mRn and Lp,Rp U L.n,Rn  41 mRp I 4 I 11,2,31 12,41  41 maxRn  41 111,3,41 211 LP~P 1{1.21 12,411 1,2,31 12,41 Ln,Rn  1,4 1,3,4 In this example, the distance threshold is set to 2 The maximal pattern 21 is missing from Rn because its distance to 1 1,2,3,4 is 3 borderP and border'P represent respectively, collections of JEPs in all instances and d-NN borderP=<[4],marRp>-<\(4],mMRn  border'P 41 Rp 4],Rn 1,21 11,31 12,4I'l, {11,2,31 t2,411   1211 Ill 2.31 42,411 borderP is correct in thatit is the-set of JEPs that occur in a single class while hrder'P contains two kinds of errors caused by the missing Wimal pattern One is that there is a pattern that the correz JEPs include while JEPs in d-NN exclude; borderP includes  1,3],'while border'P does not 1,3 c never be discovered as long as we consider d-NN This is because,..the missing maximal pattern 121 is necegpy iscover 1,3 since this undiscovered EP is-fabtaii%ed by eliminating 2 from 1,2,3 which is a maximal pattern in class P The other is that there is a pattern at,the'correct JEPs exclude while JEPs in d-NN includ+border'P includes 2,3 while borderP does not Note that three 2-length patterns containing 2 are possible they are 1,2 1,3 and 2,3 also note that the first two are included in the corredt JEPs Therefore 2,3 is the pattern that is missed from correct JEPs It is certainly true that 12 is not in class N if we investigate d-NN since all instances of class N are in 1,4 1,3,4 as long as we consider d-NN However one cannot determine whether the missing pattern is truly out of class or is merely missing from d NN 3.1   Enhancement with the Left Bound The problem was caused by the fact that we determined a pattern as a discovered JEP although it might merely be missing from d-NN To eliminate this probably-incorrect pattern we impose a restriction on a discovered JEP that it 1922 


Proceedings of the First International Conference on Machine Learning and Cybernetics Beiing 65 November 2002 should be.a superset of a pattern that occur in both of the two classes In the example above the problem is that 12 is determined as a discovered JEP although it can not be determined whether it is correct or not Note that 1 and 4 occur in both class P and class N By constraining with these additional items 2 is specialized to 1,2 and 2,4 which are two of the three elements in the left bound of collect JEPs Therefore our algorithm would firstly separate the pattern space by using the set of pattems that commonly occur in both of the two classes Then it would merge these patterns discovered in each subspke The definition of the restricted JEPs in d-NN is givenbelow Definition 3 JEPs in d-NN are defined as a union of borders each of which represents a collection of JEPs discovered in each subspace that is separated by ci as a basis k border",=u\(<\(cj],R ci],R  I i=l R'p  XIX E Rp ci 0 X  R'n   YI Y E Rn ci 0 Y  Q by using the INTER SECOPERATION algorithm  We employ the set of ci as a basis for partitioning because of the two reasons; one is that all d-NN instances belong to at least one subspace when they are partiti.oued by using this basis This feature gives every d-NN instance a chance to satisfy a JEP. The other is that it is a necessary condition for a pattern to be a JEP that is a superset of ci This proposition is me because all patterns that are subsets of ci always occur both in class P and class N This feature is aimed to maximally eliminates the area any pattern from which cannot be determined whether it is correct or incorrect. ,The elements in both Rp and Rn are grouped into Rp and Rn by using ci Note that a maximal pattern may belong to more than two groups JEPs are discovered in each partition using the formula ci  ci This border representing JEPs is obtained by using JEPPRODUCER with a slight modificatiou the modified algorithm strips ci from all elements in R'p and R'n at the beginning its pkess and attaches ci to all elements of the resulting border at the end of its process Finally all JEPs from every group are merged 3.2 The Proposed Algorithm The outline of our classification algorithm is similar to DeEPs fmt reduction of the values second JEP discovery; third, score evaluation and class determination We call our classifier DeEPsLB LB indicates this classifier is enhanced using left bound of border representing d-NN In the reduction phase DeEPsLB similarly removes irrelevant values in a database with the exception that it takes care of the d-NN. DeEPsLB firstly obtains a set of k nearest neighbors k-NN which are the top k nearest instances by the city-block distance Then it determines,d to be the distance to the farthest one in the k-NNs The optimal k value is determined in the initialization .phase which is explained later The JEP discovery phase was specialized for d-NN in the previous sections DeEPsLB obtains the maximal Rp and Rn and minimal Lp and Ln patterns among d-NN. Then JEPPRODUCERLB performs discovery of the JEPs in d-NN The concrete procedure of JEPPRODUCERLB which is straightforwardly imple menting Eq 1 is presented below 1 JEPPRODUCERLB\(<Lp.Rp Dt,Rn 2 epLp  1 epRp   4 INTERSECOPERATION  Lp  6  5 for c in CL do 6 rp x-cl c Ox x E Rp 7 m y-,c I c.0 y y E Rn 8 el. er  9 10 eL=[xUcIxEel 11 eR=[y U clyE er 12 epLp epLp U eL 13 epRp= epLp U eR 14 remove all Y E epLp that are not minimal 15 return epLp epRp 3   1 cL  JEPPRODUCER  1 rp  Q 1 rn The score evaluation phase differs from the compact summation We employ a simple majority vote score\(0  counrSc\(SEP DeEPsLB assigns the current test to the class with the highest score. Tie breaking is identical to that for DeEPs a majority rule by populations Finally we explain the initialization phase which is processed only once during the classifier lifetime The optimal k which is a parameter necessary in addition to a  is determined in this stage A cross-validation like procedure determines the optimal k for each k value in the fixed values 5 10 15 201 DeEPsLB is supplied with 10 of training instances as a test set and classifies them with the remaining 90 of training instances The k value with the highest accuracy is the optimal value 4 Experimental Results We report the performance of our classifier \(DeEPsLB in comparison to the original classifier DeEPs We employ accuracy and processing time as measures to evaluate performance of these two classifiers We have carried out experimeuts by using several of the databases from the UCI repository of machine learning databases 13 1923 


Proceedings of the First International Conference on Machine Leaming and Cybernetics Beiiing 4-5 November 2002  5.00  9.51 Our experiments were carried out on a 2.0 GHz Pentium IV PC with 1 GB of RAM The program was implemented with JAVA language Accuracy and processing time are measured by a ten fold cross validation; supplied the 10 of instances as a test set classifiers execute classification using the remaining 90 as training instances Each of the exclusive tenrfold test set is randomly collected from the original database and the same split of the data were used for the two classification algorithms When there are continuous attributes in a database values of these attributes in training instances are normalized into 0 I using the formula x-midmax-min where x is a continuous value of an attribute and min,max is the domain of the attribute Tbh process is executed at a loading time in the initialization phase of classifiers The same scaling method is also applied to test.instances In the initialization phase DeEPs determines the optimal a value and DeEPsLB uses the same optimal a The optimal a value is determined among the fixed values of 0.02 0.05 0.08 0.10 0.15 0.20 by using the explained cross-validation lie method which is also employed in determining the optimal k value 4.1 Accuracy and Speed 5.89 100.00 93.62 27.09 98.12 99.06 Table 4 data 20.15 53.96 19.22 21.85 32.58 19.87 17.75 28.65 29.82 958.9.2 214.9.6 iris pima wine 178.13.3 CIX 690.15.2 92.64 94.42 67.76 94.00 69.01 70.09 94.38 85.07 85.65 We carried out experiments on 13 databases and Table 4 shows our experimental results Column 1 Name of database Column 2 Property of database They are the number of instances, attributes and classes Column 3 Averaged optimd a value Column 4 Averaged optimal k value Cnlumn 5 Size of d-NN on which DeEPsLB performs classification Column 6-7 Accuracy of DeEPsLB and DeEPs Column 8-9 Processing time of DeEPsLB and DeEPs Column 10 The rate of improvement in processing time DeEPsLB was superior for five databases and inferior for eight There were four databases soy-small glass pima vehicle\where the difference exceeded 3 which are described in bold face Among these four DeEPsLB was superior for three databases and inferior for one Regarding to the average values DeEPsLB was superior to DeEPs although the difference was small Note that we limited the target instances used for JEP discovery and the optimal a value is determined by DeEPs Processing times differed significantly between the two classifiers. F6r all databases our classifier was faster The processing time with DeEPs was at least 1.49 tic and up to 176.94 vehicle times of that needed with DeEPsLB With regard to the average DeEPsLB is 53.25 times faster than DeEPs 0.33 0.07 1.00 2.92 0.73 he accuracy and speed of DeEPsLB in cor P-etem I accuracy 1.64 5.01 0.27 4.10 2.70 2.69 516.21 176.52 13.10 17.94  0.121 0.031 0.054 0.051 0.061 0.059 0.070 0.089 8.47 10.49 8.95 10.50 12.51 13.99 11.01 12.99 13.51 94>7 1 95.71 59.81 94.61 7253 66.78 95.51 84.49 85.94 parison to DeEPs timelmsl I rate I I DeEPsL.6 DeEPs 93.94 140.91 y 1 3.07 I 2.23 I 1.68 I 19.31 I 11.47 1 1.86 21.51 11.58 I hunaarian 1294:13:2 I 0.093 I 11.51 I 25.54 I 82.31 I 82.99 I 0.75 I 2.35 I 3.12 1  ZW 1 101.16.7 1 0.105 1 6.24 1 10.44 1 94.06 1 93.07 0.40 1 3.96 10.00 average     86.73 I 86.07 I 1.05 I 56.02 53.25 5 Conclusions We have proposed a classifier that enhances DeEPs with respect to scalability as the database volume increases This classifier operates only on nearest neighbors to discover JEPs Since the number of nearest neighbors is much smaller than the number of all instances this reduction decreases the processing time JEP discovery can also be enhanced by imposing a restriction on its process We have proposed an algorithm that excludes patterns that cannot be identified as correct or incorrect JEPs. These patterns are specialized with additional items and they are used for classification The experiments was carried out and we found there was no significant difference in accuracy but our classifier was much faster References I R Agrawal and R Srikant Fast algorithms for of 20th mining association rules In Proceedings 1924 


Proceedings of the First International Conference on Machine Learning and Cybernetics Beijing 45 November 2002 International Conference on Very Large Databases Santiago Chilli September 1994 2 D W Aha D Kibler and M K Albert Instance based learning algorithms. Machine Learning 637 66 1991  3 C Blake and C Merz UCI repository of machine learning databases 1998 4 T M Cover and P E Hart Nearest neighbor pattern classification IEEE Transactions on Information Theory 13:21-27 1967 5 G Dong and J Li Efficient mining of emerging patterns Discovering trends and differences In Proceedings of 5th International Conference on Knowledge Discovery and Data Mining pages 43 52 1999 6 P Langley W Iba and K Thompson An analysis of bayesian classifier In Proceedings of the Tenth National Conference on Artificial Intelligence pages 223-228 AAA1 Press 1992 7 J Li G Dong K Ramamohanarao, and L Wong DeEPs A new instance-based discovery and classification system Technical report Dept of CSSE, University of Melbourne 2OOO 8 J Li and K Ramamohanarao. The space of jumping emerging patterns and its incremental maintenance algorithm In Proceedings of 17th International Conference on Machine Leaming, pages 551-558 Morgan Kaufmann 2000 9 S Okamoto and N Yugami Theoretical analysis of case retrieval method based on neighborhood of a new problem In Proceeding of Second International Conference on Case-Based Reasoning pages 349-358 Springer-Verlag, July 1997 IO J R Quinlan C4.5 Programs for Machine Learning Morgan Kaufmann Publishers Inc 1993 1925 


 r 004 \005\\006 r\003\020 004\005\005\006 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 r#\002\016\004\r 005 b\033\004 004\032\r\r\022 002\006 005\003\021 032\002\003\033 005 002 020\(\003\b\022 004\033\003\002\033\r\013\020 005\003 r!'#\b\r\006\033 004\r\013\021\r\006\033\002\033\b\005\006\024 2\036\(\036 021\006 030\025\030\030$\006 f\031\n r\016\n\f\b\f\022\013\n\f\r\t\004 006\013$\f\t\007 033\f\n\021 n\021\006 k 2 r\017 025\005\033\r 033 \002\033 b\006 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033 \r\003\r b\004 006\005 006\r\r\022 033\005 005\021\032\016\033\r 002\006\020 subop  002\031\016\r\024 023 \b\004 b\004  033 \r\003\r b\004 006\005 k 2 002#\033\005\003 b\006 033 \r 005\021\032\031\r,\b\033\020 005 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021\024 D\016\033 b\006 033 \r 005\033 \r\003 033\\005 002\031\013\005\003\b\033 \021\004 r#\002\016\004\r 004\r\031\r#\033\b\005\006 005 004\r\013\021\r\006\033\004 b\004 002\004\r\022\r\006\033\b\003\r\031\020\005\006\033 \r subop  002\031\016\r\004 k 2 r#\005\021\r\004 002 022\005\021\b\t 006\002\006\033 002#\033\005\003 b\006 033 \r\b\003 005\021\032\031\r,\b\033\020\024 023\005 r\031\b\021\b\006\002\033\r 033 \r k 2 002#\033\005\003 005\006\r r\016\003\b\004\033\b b\004 033\005 006\022 002 005\006\004\033\002\006\033 006\016\021\(\r\003 005 b\033\r\021\004 b 002\003\r 005\006 033 \r 016\(\(\031\r=\024 023 \r\004\r 002\003\r 033 \r b\033\r\021\004 005\004\r 003\r"\016\r\006#\b\r\004 002\003\r\031\020 004\002\033\b\004!\020 002\006\022 002\003\r 033 \r 031\005\004\r\004\033 033\005 033 \r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\024 023 \r\006 b\006 033 \r subop  002\031#\016\031\002\033\b\005\006  003\r\004\033\003\b#\033 033 \r 004\016\021\021\002\033\b\005\006 b\006 r"\016\002\033\b\005\006 035.\037 005\006\031\020 005%\r\003 002\031\031 032\002\b\003\004 005 b\033\r\021\004 b\006 033 \r 016\(\(\031\r 031\b\004\033=\024 023 \b\004 b\004 003\r\002\004\005\006\002\(\031\r r#\002\016\004\r 033 \r 031\033\r\003\b\006\013 005!!\r\003\r\022 020 033 \r 036\n\n\030 b\004 r,\032\r#\033\r\022 033\005 r 033 \r 021\005\004\033 002\032\032\031\b#\002\(\031\r 033\005 033 \005\004\r b\033\r\021\004 005\004\r 003\r"\016\r\006#\b\r\004 002\003\r 031\005\004\r\004\033 033\005 033 \r 033 \003\r\004 \005\031\022\024 005\003 r,\002\021\t 032\031\r 033 \r\003\r 021\002\020 r k  1000 b\033\r\021\004 b\006 002\031\031 016\033 033 \r 016\(\(\031\r 031\b\004\033 021\002\020 005\006\033\002\b\006 005\006\031\020 w  100 b\033\r\021\004\024 8\006 033 \b\004 002\004\r 005\003 003\024\032\002 005\021\032\016\033\002\033\b\005\006 005 subop   033 \r 006\016\021\(\r\003 005 032\002\b\003\004 005\006\004\b\022\r\003\r\022 b\006 033 \r 004\016\021\021\002\033\b\005\006 003\r\022\016#\r\004 003\005\021  k 2   499 500 033\005  w 2 950 024 025\005\033\r 033 \002\033 033 \r 005\006\033\r\006\033 005 033 \r 016\(\(\031\r 031\b\004\033 022\r\032\r\006\022\004 005\006 002 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\024 023 \b\004 016\(\(\031\r 031\b\004\033 033 \r\006 033\016\003\006\004 033 \r 005#\016\004 005 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 004"\016\002\003\r\031\020 005\006 033 \r b\033\r\021\004 b\006 033 \r 031\b\004\033\024 D\016\033 b\033 b\004 b\021\032\005\003\033\002\006\033 033\005 003\r\021\r\021\(\r\003 033 \002\033  004\r\013\021\r\006\033\002\033\b\005\006 b\033 033 \r 016\(\(\031\r 031\b\004\033 003\r"\016\b\003\r\004 004\005\021\r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 033 \r 036\n\n\030 032\003\005\t 022\016#\r\022 002\006 r 016\004\r\022 005\003 024\005\013 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\024 8\006 033 \r 006\r,\033 004\r#\t 033\b\005\006   r%\002\031\016\002\033\r 033 \r r!!\r#\033\b%\r\006\r\004\004 005 002\006 036\n\n\030 033 \002\033 002\004 032\003\005\022\016#\r\022 b\033 002 016\(\(\031\r 031\b\004\033 002\004\r\022 005\006 005\006\r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 016\033 b\004 016\004\r\022 022\020\006\002\021\b#\002\031\031\020 033\005 002\006\022\031\r 022\b!!\r\003\r\006\033 004\016\032\032\005\003\033 033 \003\r\004 \t 005\031\022\004\024 2\036,\036 4\026\030\017\f\034 031\006\007\b\006\t\n\013\n\f\r\t 031\n\017\013\n\006\007\f\006\031\004 006\013$\f\t\007 033\f\n\021 n\021\006 p 2 r\017 b\033 033 \r 016\(\(\031\r 031\b\004\033 r\016\003\b\004\033\b 033 \r k 2 002#\033\005\003 022\b\004\002\032\032\r\002\003\004 003\005\021 033 \r 005\021\032\031\r,\b\033\020 005 033 \r 9\003\r\r\022\020 002\006\022 017\001 002\031\013\005\003\b\033 \021\004\024 002\033 002\(\005\016\033 033 \r p 2 002#\033\005\003G 004 002 r\016\003\b\004\033\b 033\005 005\032\r  004\b\033\016\002\033\b\005\006\004  p b\004 031\002\003\013\r  005!!\r\003 020\(\003\b\022 004\r\013\021\r\006\033\002\033\b\005\006 004\033\003\002\033\r\013\b\r\004\024 E,\002\021\032\031\r\004 b\006#\031\016\022\r 013\t\034\r\b!&\027 002\006\022 013\t\034\r\b 1\017\006\006\034\026 024 023 \002\033 b\004 005\003 002 031\002\003\013\r b\006\b\033\b\002\031 002\031\016\r p b\006\033 \r'\003\004\033 032 \002\004\r r 016\004\r 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033\005 021\r\003\013\r 033 \r p 032\002\013\r\004 033\005 p mid 004\r\013\021\r\006\033\004 035 p mid m user 037\024 023 \r\006 b\006 033 \r 006\002\031 032 \002\004\r 033 \r 017\001 005\003 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 033\005 021\r\003\013\r 033 \r p mid 004\r\013\021\r\006\033\004 b\006\033\005 033 \r m user 004\r\013\021\r\006\033\004\024 8\006 033 \r 006\r,\033 004\r#\033\b\005\006   r%\002\031\016\002\033\r  033 \r\004\r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 005\003\027 002\033 002\031\031\024 5\036 016\006\017\f\b\006\t\n\013 006 \013$\025\013\n\f\r\t 8\006 033 \b\004 004\r#\033\b\005\006 r 032\003\005%\b\022\r r,\033\r\006\004\b%\r r,\032\r\003\b\021\r\006\033\002\031 r%\002\031\016\t 002\033\b\005\006 005 002\031\031 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\006\022 r\016\003\b\004\033\b#\004 032\003\005\t 032\005\004\r\022 002\(\005%\r\024 n\032\r#\b'#\002\031\031\020 r 032\003\005%\b\022\r r\021\032\b\003\b#\002\031 r%\002\031\016\002\t 033\b\005\006 005\006 3\024 033 \r 004\032\r\r\022\016\032 002\006 036\n\n\030 032\003\005%\b\022\r\004 002\033 016\r\003\020 r,\r#\016\033\b\005\006 005\003 r,\032\031\005\003\002\033\b\005\006 033\b\021\rB 002\006\022 024 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 005 032\003\005\022\016#\b\006\013 033 \r 036\n\n\030 b\033 005\003 b\033 \005\016\033 033 \r 016\(\(\031\r 031\b\004\033 002\006\022 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004\024 r 005\006#\031\016\022\r 033 \b\004 004\r#\033\b\005\006 b\033 002 003\r#\005\021\021\r\006\022\r\022 003\r#\b\032\r 005\003 022\b!!\r\003\r\006\033 b\003#\016\021\004\033\002\006#\r\004\024 5\036\035\036 016\006\017\f\b\006\t\n\013 031\006\n\025\016 023 \r 004\r\013\021\r\006\033 021\b\006\b\021\b\034\002\033\b\005\006 002\006\022 033 \r 005\006\004\033\003\002\b\006\r\022 004\r\013\021\r\006\t 033\002\033\b\005\006 032\003\005\(\031\r\021\004 002\032\032\031\020 033\005 033 \r 021\002\006\020 002\031\013\005\003\b\033 \021\004 033 \002\033 005\006\t 022\016#\033 021\b\006\b\006\013 005 002\003\b\005\016\004 027\b\006\022\004 005 032\002\033\033\r\003\006\004 002\004\r\022 005\006 002\006\022\b\022\002\033\r 013\r\006\r\003\002\033\b\005\006 035\004\r\r n\r#\033\b\005\006 3\037\024 023 \r 003\r\004\016\031\033\004 003\r\032\005\003\033\r\022 r\003\r 002\003\r 002\004\r\022 005\006 002 004\032\r#\b b\006\004\033\002\006#\r 005 033 \r\004\r 002\031\013\005\003\b\033 \021\004 C 006\002\021\r\031\020 033 \r 031\002\004\004\b#\002\031 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 005\003 002\004\004\005#\b\002\033\b\005\006 003\016\031\r 021\b\006\b\006\013\024 025\005\006\r\033 \r\031\r\004\004 033 \r 032\003\r\004\r\006\033\r\022 b\022\r\002\004 002\006\022 002\031\013\005\003\b\033 \021\004 002\032\032\031\020 033\005 005\033 \r\003 b\006\004\033\002\006#\r\004 002\004  031\031 033 \r r,\032\r\003\b\021\r\006\033\004 r\003\r 032\r\003!\005\003\021\r\022 005\006 002 033\b\021\r\t\004 \002\003\b\006\013 r\006%\b\003\005\006\021\r\006\033 005\006 002 2 030\026\034 021\002# \b\006\r\024 031\031 033 \r 032\003\005\013\003\002\021\004 r b\033\033\r\006 b\006 001\024 023 \r\003\r 002\003\r 033\\005 027\b\006\022\004 005 r,\r#\016\033\b\005\006 033\b\021\r\024 023 \r 003\004\033 b\004 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r  b\006#\031\016\022\r\004 002\031\031 001?H 002\006\022 8;\036 005\004\033\004 b\006#\016\003\003\r\022 005\003 004\r\013\021\r\006\033\002\033\b\005\006\024 023 \r 004\r#\005\006\022 b\004 033 \r 003\016\006\033\b\021\r 005 032\003\b\005\003\b  005\003 016\033 033 \r 036\n\n\030 b b\006\t 031\016\022\r\004 002\031\031 001?H 002\006\022 8;\036 005\004\033\004 033\005 006\022 002\031\031 033 \r 003\r"\016\r\006\033 004\r\033\004\024 023 \r 003\r\032\005\003\033\r\022 013\016\003\r\004 002\003\r 002\004\r\022 005\006 033 \r 002%\r\003\002\013\r 005 021\016\031\033\b\032\031\r 033 \003\r\r\022\002\033\002\004\r\033\004\\r\016\004\r\022 3\024 6\r'\f\013\034\013\n\013\031\006\n  b b\004 002 003\r\002\031 022\002\033\002 004\r\033 003\005\021 025\005\027\b\002 005\006 002 004\r"\016\r\006#\r 031\r 005\006\033\002\b\006\b\006\013 002\(\005\016\033 7 033\003\002\006\004\002#\033\b\005\006\004 005 002\(\005\016\033  022\b\004\033\b\006#\033 033\020\032\r\004 005 033\r\031\r#\005\021\021\016\006\b#\002\033\b\005\006\004 006\r\033\\005\003\027 002\031\002\003\021\004\024 005\003 032\003\005\032\003\b\r\033\002\003\020 003\r\002\004\005\006\004 r 002\006\006\005\033 022\r\004#\003\b\(\r 033 \b\004 022\002\033\002 004\r\033 016\003\033 \r\003\024 024 020 034\013\n\013 031\006\n  b b\004 002 004\020\006\033 \r\033\b 022\002\033\002 004\r\033 013\r\006\r\003\002\033\r\022 016\004\b\006\013 033 \r 032\003\005\013\003\002\021 022\r%\r\031\005\032\r\022 002\033 8D\030 031\t 021\002\022\r\006 017\r\004\r\002\003# \001\r\006\033\r\003 0\024 023 \r r,\002#\033 006\016\021\(\r\003 005 033\003\002\006\004\t 002#\033\b\005\006\004 b\004 006\005\033 b\021\032\005\003\033\002\006\033 r#\002\016\004\r 033 \r 027\r\020 032\002\003\002\021\r\033\r\003 b\004 033 \r 006\016\021\(\r\003 005 032\002\013\r\004 p 024 8\006 005\016\003 r,\032\r\003\b\021\r\006\033\002\033\b\005\006 p 002\003\b\r\004 003\005\021  033\005 7  002\006\022 033 \r 006\016\021\(\r\003 005 b\033\r\021\004 b\004 k 1000 024 024 031'\006\033\006\034!\031\026\t\n\021\006\n\f\020 034\013\n\013 031\006\n  b b\004 002 004\020\006\033 \r\033\b 022\002\033\002 004\r\033 033 \002\033 002\004 004\027\r\\r\022 004\r\002\004\005\006\002\031 r \002%\b\005\003\024 n\032\r#\b'#\002\031\031\020 7@I 005 033 \r b\033\r\021\004 002%\r 002 b\013 \r\003 032\003\005\(\002\(\b\031\b\033\020 005 002\032\032\r\002\003\b\006\013 b\006 033 \r 003\004\033 002\031 005 033 \r 005\031\031\r#\033\b\005\006 005 033\003\002\006\004\002#\033\b\005\006\004 002\006\022 033 \r 005\033 \r\003 7@I 002%\r 002 b\013 \r\003 032\003\005\(\002\(\b\031\b\033\020 005 002\032\032\r\002\003\b\006\013 b\006 033 \r 004\r#\005\006\022 002\031!\024 023 \r 003\r\002\004\005\006 005\003 016\004\b\006\013 033 \b\004 022\002\033\002 004\r\033 b\004 033 \002\033 b\006 033 \r 003\r\002\031 005\003\031\022 033 \r\003\r 002\003\r 021\002\006\020 022\002\033\002\(\002\004\r\004 033 \002\033 022\005 006\005\033 005\031\031\005 002 003\r\013\016\031\002\003 005\003 016\006\b!\005\003\021 022\b\004\033\003\b\(\016\033\b\005\006 035\r\024\013\024 002 004\016\032\r\003\t 021\002\003\027\r\033 022\002\033\002\(\002\004\r 005\006\004\b\004\033\b\006\013 005 033\003\002\006\004\002#\033\b\005\006\004 005%\r\003 002 r 021\005\006\033 \004 003\005\021 004\016\021\021\r\003 033\005 b\006\033\r\003\037\024 5\036%\036 025\t\n\f\b\006 031\016\006\006\034\025\016 023 \r 003\004\033 004\r\033 005 r,\032\r\003\b\021\r\006\033\004 r%\002\031\016\002\033\r\004  033 \r 036\n\n\030 032\003\005%\b\022\r\004 004\b\013\006\b'#\002\006\033 004\032\r\r\022\016\032\024 023 \r 004\032\r\r\022\016\032 005\003 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021 X b\004 022\r'\006\r\022 033\005 r 033 \r 003\002\033\b\005 005 033 \r r,\r#\016\033\b\005\006 033\b\021\r 005 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 b\033 \005\016\033 033 \r 036\n\n\030 033\005 033 \002\033  033 \r 036\n\n\030 032\003\005\022\016#\r\022 020 002\031\013\005\003\b\033 \021 X 035 X b\004 033 \r 017\002\006\t 022\005\021 017\001 005\003 9\003\r\r\022\020 002\031\013\005\003\b\033 \021\037\024 023 \b\004 013\b%\r\004 033 \r 020\t\002,\b\004 005 033 \r 013\003\002\032 b\006 b\013\016\003\r 5\035\002\037\024 023 \r t\002,\b\004 004 \005\\004 033 \r 006\016\021\(\r\003 005 004\r\013\021\r\006\033\004 m user 002\031\031\005 b\006 033 \r 036\n\n\030\024 n\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\004\b\022\r 033 \r 003\004\033 005\(\004\r\003%\002\033\b\005\006 003\005\021 b\013\016\003\r 5\035\002\037 b\004 033 \002\033 033 \r 036\n\n\030 b\004 002 016\004\r!\016\031 004\033\003\016#\033\016\003\r\024 8\033 b\004 031\b\013 \033\t\ \033\024 005\003 m user  100 004\r\013\021\r\006\033\004 002\006\022 005\003 3 b\033\r\021\004 033 \r 036\n\n\030 005\006\004\016\021\r\004 005\006\031\020 002\(\005\016\033 024 r\013\002\(\020\033\r\004\024 D\016\033 b\033 002\006 003\b\006\013 002\(\005\016\033 002 004\032\r\r\022\016\032 003\005\021 002\003\005\016\006\022 2 033\b\021\r\004 033\005 002\(\005\016\033  033\b\021\r\004\024 006\022 005\003 m user J 37 004\r\013\021\r\006\033\004 035\033 \016\004 005\006\t 004\016\021\b\006\013 024 021\r\013\002\(\020\033\r\004\037 033 \r 004\032\r\r\022\016\032 002\006 r 002\(\005\016\033 7 033\b\021\r\004\024 023 \r 004\r#\005\006\022 005\(\004\r\003%\002\033\b\005\006 b\004 033 \002\033 002\004 r,\032\r#\033\r\022 033 \r 031\002\003\013\r\003 033 \r Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


  001 002\001 003\001 004\001 005\001 006\001 003\001 005\001 007\001 b\001 002\001\001 002\003\001 002\005\001 002\007\001 t\n\013\013\f\r\n\016\017\013\020\021\022\023\024\013\016\022\025\016\026\\n\017\023\025\017\023\016\027\023\022\030\025\r\022\016\022\030\013\016\\t\t\031 032\r\033\034\013\017\016\025\035\016\036\013\037\033\013 \022\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021 017\013\013\f     021 \f\025\033  021 013\020\021\022\023\024\013 036\n\013\013\f\r\n   001 001*\002 001*\003 001*\004 001*\005 001*\006 001*\007 001 003\001 005\001 007\001 b\001 002\001\001 002\003\001 002\005\001 002\007\001 032\r\033\034\013\017\016\025\035\016$\021 \f\023\f\021\022\013\016\003\,\023\022\013\033\036\013\022\036\016\017\013\020\021\022\023\024\013\016\\022\025\016\026\n\017\023\025\017\023\016\027\023\022\030\025\r\022\016\\022\030\013\016\t\t\031 032\r\033\034\013\017\016\025\035\016\036\013\037\033\013 \022\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021  021 \f\025\033     017\013\013\f 034 017\021$\022\023\025 025\035 021 \f\023\f\021\022\013 003,\023\022\013\033\036\013\022\036 025\022 n\017\r \013\f 001\002\003\004\005\006 036\b 037\017\017\006 \f\002!\006\013\006\016\016 r\017 f\020\006 016\006\003\021\006\013\f\022\f\002\r\013 022\025\003\r\005\002\f\020\021\016 002\031\016\r 005 m user  033 \r b\013 \r\003 b\004 033 \r 004\032\r\r\022\016\032\024 8\006\033\r\003\r\004\033\b\006\013\031\020 r%\r\006 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 002\006 005!!\r\003 002 004\032\r\r\022\016\032 033 \002\033 b\004 r\033\t 033\r\003 033 \002\006 002\006 005\003\022\r\003 005 021\002\013\006\b\033\016\022\r\024 8\006 033\r\003\021\004 005 033 \r 004\032\r\r\022\016\032 033 \r 003\002\006\027 b\006 022\r\004#\r\006\022\b\006\013 005\003\022\r\003 b\004 002\031\\002\020\004 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021 033 \r 017\001 002\031\013\005\003\b\033 \021 002\006\022 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021\024 023 \r 013\002\032\004 r\t 033 033 \r\021 005\032\r\006 016\032 013\003\002\022\016\002\031\031\020 002\004 m user r#\005\021\r\004 031\002\003\013\r\003\024 023 \r 004\032\r\r\022\016\032 002\006 r 022\b\003\r#\033\031\020 031\b\006\027\r\022 033\005 033 \r 006\016\021\(\r\003 005 002\006\t 022\b\022\002\033\r\004 033 \002\033 003\r"\016\b\003\r 003\r"\016\r\006#\020 005\016\006\033\b\006\013 b\024\r\024 002\006\022\b\022\002\033\r\004 033 \002\033 002\003\r 006\005\033 032\003\016\006\r\022 002\004\r\022 005\006 r"\016\002\033\b\005\006 0353\037\024 b\013\016\003\r 5\035\(\037 005\021\t 032\002\003\r\004 033 \r 006\016\021\(\r\003 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 r"\016\b\003\r\022 b\033 005\003 016\033 033 \r 036\n\n\030\024 013\002\b\006 033 \r 003\002\033\b\005 b\004 004 \005\\006 005\006 r 020\t 002,\b\004 033 \r 003\002\033\b\005 3 r\b\006\013 033 \r 002\004\r b\033 \005\016\033 033 \r 036\n\n\030\024 001\031\r\002\003\031\020 033 \r 036\n\n\030 032\003\005%\b\022\r\004 004\b\013\006\b'#\002\006\033 032\003\016\006\b\006\013\024 005\003 r,\002\021\032\031\r b\033 m user 150  002\006\022 033 \r 036\n\n\030 032\003\005\022\016#\r\022 020 033 \r 9\003\r\r\022\020 002\031\t 013\005\003\b\033 \021 005\006\031\020 002\(\005\016\033 I 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 r#\027\r\022 020 032\003\b\005\003\b 005\003\022\b\006\002\003\b\031\020 002\003\r 006\005\033 032\003\016\006\r\022 020 033 \r b\006!\005\003\021\002\033\b\005\006 027\r\032\033 b\006 033 \r 036\n\n\030\024 b\013\016\003\r 5\035\(\037 005\006\031\020 004 \005\\004 033 \r 003\r\022\016#\033\b\005\006 005\003 002\006\t 022\b\022\002\033\r t\b\033\r\021\004\r\033\004\024 023 \r 036\n\n\030 002\032\032\031\b\r\004 033\005 002\006\022\b\022\002\033\r 004\r\033\004 005 b\013 \r\003 002\003\022\b\006\002\031\b\033\b\r\004\024 9\b%\r\006 005\016\003 004\020\006\033 \r\033\b 022\002\033\002 004\r\033\004 033 \r 003\r\t 022\016#\033\b\005\006 005\003 b\013 \r\003 002\003\022\b\006\002\031\b\033\b\r\004 b\004 021\b\006\b\021\002\031\024 D\016\033 033 \b\004 b\004 006\005\033 002\004 006\r\013\002\033\b%\r 002\004 b\033 021\002\020 004\r\r\021 r#\002\016\004\r b\033 b\004  027\006\005 033 \002\033 033 \r 021\002\b\006 005\033\033\031\r\006\r#\027 005 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 b\004 005\006 b\033\004 032\003\005#\r\004\004\t b\006\013 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 370B 033 \b\004 b\004 032\003\r#\b\004\r\031\020 033 \r 002\003\r\002  036\n\n\030 r,#\r\031\004\024 023 \r 003\r\004\016\031\033\004 003\r\032\005\003\033\r\022 b\006 b\013\016\003\r 5 002\003\r 002\004\r\022 005\006 033 \r 003\r\013\016\031\002\003\t 004\020\006\033 \r\033\b 022\002\033\002 004\r\033 002\006\022 002 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 005 3I\024 8\006 002\022\022\b\t 033\b\005\006 r 002%\r r,\032\r\003\b\021\r\006\033\r\022 b\033 005\033 \r\003 022\002\033\002 004\r\033\004 021\r\006\033\b\005\006\r\022 016\003\r 004\033\003\002\033\r\013\020 n\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r n\032\r\r\022\016\032 017\002\006\022\005\021 0  02 006 0  00 004 2  6 006 0  1 017\001 2791 006 7 004 5  5 006 0  4 9\003\r\r\022\020 5439 006 6 004 5  9 006 0  3 021 r\017\013 036\022\017\021\022\013\037\023\013\036 027\023\022\030 p  006\001\001 026\020\(\003\b\022 004\033\003\002\033\r\013\020 n\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r n\032\r\r\022\016\032 017\002\006\022\005\021\t\017\001 521 006 2 004 4  3 006 0  0 017\002\006\022\005\021\t9\003\r\r\022\020 1051 006 1 004 5  2 006 0  1 034 0#\034\017\023\f 036\022\017\021\022\013\037\023\013\036 027\023\022\030 p  001 001\001\0011 p mid  003\001\001 001\002\003\004\005\006 b 006\003\021\006\013\f\022\f\002\r\013 r\016\f\016 004\005\006 022\013\032 020\023 024\005\002\032 016\f\005\022\f\006\003\002\006\016 002\f\020 m user 036 002\(\005%\r 002\006\022 002\003\b\005\016\004 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\004\024 031\r\002\004\r r!\r\003 033\005 005\016\003 033\r# \006\b#\002\031 003\r\032\005\003\033 3.0 005\003 021\005\003\r 022\r\033\002\b\031\004\024 5\036\(\036 002\006\007\b\006\t\n\013\n\f\r\t 020\r\031\n 8\006 031\b\013 \033 005 033 \r 004\b\013\006\b'#\002\006\033 004\032\r\r\022\016\032 005!!\r\003\r\022 020 002\006 036\n\n\030 033 \r 006\002\033\016\003\002\031 016\r\004\033\b\005\006 033\005 002\004\027 b\004  033 \b\004 004\032\r\r\022\016\032 b\004 002# \b\r%\r\022 020 002 b\013 005\021\032\b\031\r\t\033\b\021\r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033\024 023 \r 027\r\020 032\002\003\002\021\r\033\r\003\004 r\003\r 002\003\r p 002\006\022 m user 024 b\031\r r r,\032\r\003\b\t 021\r\006\033\r\022 b\033 \021\002\006\020 005\021\(\b\006\002\033\b\005\006\004 r 005\006\031\020 003\r\032\005\003\033 004\005\021\r 005 033 \r\021 r\031\005 022\016\r 033\005 002 031\002#\027 005 004\032\002#\r\024 005\003 r,\002\021\032\031\r b\013\016\003\r 7\035\002\037 003\r\032\005\003\033\004 033 \r 003\r\004\016\031\033\004 005\003 p 500 002\006\022 m user 40 024 00\006\020\n\f \006\t\006\031\031 r0 n\021\006 016\025\017\006 031\006\007\b\006\t\n\013\n\f\r\t 031\n\017\013\n\006\007\f\006\031\004 004 r,\t 032\r#\033\r\022 005\033 033 \r 017\001 002\006\022 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021\004 033\002\027\r 002 031\005\006\013 033\b\021\r 033\005 032\003\005\022\016#\r 033 \r 036\n\n\030\024 D\016\033 b\004 b\033 033\005\005 031\005\006\013G 8\004 033 \r 002\022\t 022\b\033\b\005\006\002\031 005\006\r\t\033\b\021\r 005\004\033 005 75/6 004\r#\005\006\022\004 005\003\033 \ \b\031\r 033\005 b\006\t 003\r\002\004\r 033 \r 004\032\r\r\022\016\032 003\005\021 0241 033\005 7\0246 005\003 003\024\032\002 021\b\006\b\006\013 016\r\003\020G 023 \r 002\006\004\\r\003 033\005 033 \b\004 016\r\004\033\b\005\006 b\004 004\016\(*\r#\033\b%\r 022\r\032\r\006\022\b\006\013 005\006 033 \r 003\r\031\002\033\b%\r b\021\032\005\003\033\002\006#\r 005 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 033\005 022\020\006\002\021\b 016\r\003\020 r,\r#\016\033\b\005\006 005\004\033 005\003 033 \r 004\032\r#\b 002\032\032\031\b#\002\033\b\005\006\024 8\033 002\031\004\005 022\r\032\r\006\022\004 005\006 033 \r 002\021\005\016\006\033 005 004\032\002#\r 033 \r 036\n\n\030 002\006 005##\016\032\020 b\024\r\024 033 \r 002\031\016\r 005 m user 024 8\006 013\016\003\r\004 r 022\r\031\b\(\r\003\002\033\r\031\020 033\002\027\r 002 004\021\002\031\031\r\003 002\031\016\r m user 40 033\005 002\031\031\005 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 032\003\005#\r\004\004 033\005 033\002\027\r 031\005\006\013\r\003\024 8 033 \r 002\032\032\031\b#\002\033\b\005\006 002\006 002!!\005\003\022 002 031\002\003\013\r\003 002\031\016\r 005 m user  033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 034\b\f.\t  033 \r 004\032\r\r\022\016\032 006\005\032\b\003\024\t\003\t 024 8\006 033 \b\004 002\004\r 033 \r 005\b#\r r#\005\021\r\004 021\005\003\r 005\(%\b\005\016\004 C 006\002\021\r\031\020 b\033 032\002\020\004 005 033\005 016\004\r 002 021\005\003\r r\031\002\(\005\003\002\033\r 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021 033\005 032\003\005\022\016#\r 002 b\013 \r\003\t"\016\002\031\b\033\020 036\n\n\030\024 00\006\020\n\f \006\t\006\031\031 r0 n\021\006 021\026\030\017\f\034 031\006\007\b\006\t\n\013\n\f\r\t 031\n\017\013\n\006\007\f\006\031\004 9\b%\r\006 033 \r 006\016\021\(\r\003\004 b\006 b\013\016\003\r 7\035\002\037 002 006\002\033\016\003\002\031 016\r\004\033\b\005\006 033\005 002\004\027 b\004 005  033 \r 021\005\003\r r\031\002\(\005\003\002\033\r 002\031\013\005\003\b\033 \021\004 004#\002\031\r 016\032 b\033 003\r\t 004\032\r#\033 033\005 p 024 8 b\033 033\002\027\r\004 75/6 004\r#\005\006\022\004 005\003 033 \r 9\003\r\r\022\020 002\031\013\005\t 003\b\033 \021 005\003 p  500 032\002\013\r\004 005 031\005\006\013 022\005\r\004 b\033 033\002\027\r 005\003 p  50 000 032\002\013\r\004G 035$\005\003 002 032\002\013\r 004\b\034\r 005 5 027\b\031\005\(\020\033\r\004 r\002# \032\002\013\r 002\006 005\006\033\002\b\006 003\005\016\013 \031\020 3 033\003\002\006\004\002#\033\b\005\006\004\024 023 \016\004 7  032\002\013\r\004 005\003\003\r\004\032\005\006\022 033\005 7 021\b\031\031\b\005\006 033\003\002\006\004\002#\033\b\005\006\004\024\037 023 \b\004 b\004 002\006 b\021\032\005\003\033\002\006\033 016\r\004\033\b\005\006 r#\002\016\004\r 022\002\033\002 021\b\006\b\006\013 002\032\032\031\b#\002\033\b\005\006\004 002\003\r 004\016\032\032\005\004\r\022 033\005 002%\r 002 016\013\r 006\016\021\(\r\003 005 033\003\002\006\004\002#\033\b\005\006\004 035\002\006\022 032\002\013\r\004\037\024 005\003\033\016\006\002\033\r\031\020 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 005\021\r\004 033\005 033 \r 003\r\004#\016\r\024 017\r#\002\031\031 003\005\021 b\013\016\003\r 7\035\002\037 033 \002\033 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033\002\027\r\004 002 006\r\013\031\b\013\b\(\031\r 002\021\005\016\006\033 005 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r 016\033 004\033\b\031\031 022\r\031\b%\r\003\004 003\r\002\004\005\006\002\(\031\r 004\032\r\r\022\016\032\024 023 \b\004 005\032\r\006\004 033 \r 032\005\004\004\b\(\b\031\b\033\020 005 020\(\003\b\022 004\r\013\021\r\006\033\002\033\b\005\006 004\033\003\002\033\r\013\b\r\004 005\003 031\002\003\013\r 002\031\016\r\004 005 p 024 b\013\016\003\r 7\035\(\037 004 \005\\004 033 \r 004\b\033\016\002\033\b\005\006 005\003 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 017\002\006\022\005\021\t\017\001 002\006\022 017\002\006\022\005\021\t9\003\r\r\022\020\024 030\005\003\r 004\032\r#\b'#\002\031\031\020 033 \r b\006\b\033\b\002\031 002\031\016\r 005 p b\004 7 024 023 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 033\005 016\b#\027\031\020 003\r\t 022\016#\r p 033\005 p mid 200 004\r\013\021\r\006\033\004\024 003\005\021 033 \002\033 032\005\b\006\033 005\006 r\b\033 \r\003 Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


  001*\002 002 002\001 002\001\001 002\001\001\001 001 002\001 003\001 004\001 005\001 006\001 007\001 t\013\037\033\013 \022\021\022\023\025 \016$\025\036\022\016\(\023 \016\\036\013$\025 \f\036 t\0232\013\016\025\035\016\034\r\034\034\020\013\016\020\023\036\022\016\\(\023 \016\n\013\017$\013 \022\021\037\013\016\025\035\016\f\025\033\021\\023 \016\023\022\013\033\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021  021 \f\025\033,&\017\013\013\f   021 \f\025\033  021 t\013\037\033\013 \022\021\022\023\025 022\023\033\013   004 004*\006 005 005*\006 006 001 002\001 003\001 004\001 005\001 006\001 007\001 t\n\013\013\f\r\n\016\017\013\020\021\022\023\024\013\016\022\025\016\026\\n\017\023\025\017\023\016\027\023\022\030\025\r\022\016\022\030\013\016\\t\t\031 t\0232\013\016\025\035\016\034\r\034\034\020\013\016\020\023\036\022\016\\(\023 \016\n\013\017$\013 \022\021\037\013\016\025\035\016\f\025\033\021\\023 \016\023\022\013\033\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021  021 \f\025\033,&\017\013\013\f   021 \f\025\033  034 t\n\013\013\f\r\n 001\002\003\004\005\006 b 037\017\017\006 \f\002!\006\013\006\016\016 r\017 f\020\006 024\004\024\024\025\006 025\002\016\f r f\002\021\002,\022\f\002\r\013 033 \r 017\001 005\003 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 033\005 004\r\031\r#\033 033 \r 006\002\031 m user 40 004\r\013\021\r\006\033\004\024 025\005\033\b#\r 033 \002\033 005\003 017\002\006\022\005\021\t\017\001 033 \r 033\005\033\002\031 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r 005\003 7  032\002\013\r\004 b\004 005\006\031\020 7.3 004\r#\005\006\022\004 002\004 004\016\032\032\005\004\r\022 033\005 263 004\r#\005\006\022\004 005\003 005\006\031\020 7 032\002\013\r\004 016\004\b\006\013 032\016\003\r\031\020 033 \r 017\001 002\031\t 013\005\003\b\033 \021\024 K\r\033 033 \r\003\r b\004 002 021\b\006\b\021\002\031 022\003\005\032 b\006 004\032\r\r\022\016\032\024 n\b\021\b\031\002\003 005\(\004\r\003%\002\033\b\005\006\004 002\006 r 005\(\033\002\b\006\r\022 005\003 017\002\006\022\005\021\t9\003\r\r\022\020\024 8\006 013\r\006\t r\003\002\031 013\b%\r\006 002 031\002\003\013\r b\006\b\033\b\002\031 p 002\031\016\r 002 013\005\005\022 004\033\003\002\033\r\013\020 b\004 033\005 016\004\r 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033\005 r\022\016#\r p 033\005 002 021\016# \004\021\002\031\031\r\003 p mid 002\031\016\r 035\r\024\013\024 r\033\\r\r\006 3 033\005 7 032\002\013\r\004\037 002\006\022 033 \r\006 033\005 016\004\r 002\006 r\031\002\(\005\003\002\033\r 002\031\013\005\003\b\033 \021 033\005 005\021\032\031\r\033\r 033 \r 004\r\013\021\r\006\033\002\033\b\005\006\024 00\006\020\n\f \006\t\006\031\031 r0 n\021\006 030\025\030\030$\006 f\031\n r\016\n\f\b\f\022\013\n\f\r\t\004 032\002\003\033 003\005\021 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 r 002\031\004\005 032\003\005\032\005\004\r 033 \r 016\(\(\031\r 031\b\004\033 r\016\003\b\004\t 033\b b\033 033 \r 005\(*\r#\033\b%\r 005 005#\016\004\b\006\013 033 \r 005\021\032\016\033\002\033\b\005\006 033\005 033 \r subop  002\031\016\r 005\006\031\020 033\005 033 \005\004\r b\033\r\021\004 033 \002\033 002\003\r 005\006 033 \r 016\(\(\031\r 031\b\004\033\024 b\013\016\003\r 1 004 \005\\004 033 \r 004\b\033\016\002\033\b\005\006 r\006 033 \r 016\(\(\031\r 031\b\004\033 002\004 005\003\021\r\022 002\004\r\022 005\006 033 \r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 024.7I 002\006\022 020\r\033 022\016\003\t b\006\013 016\r\003\020 r%\002\031\016\002\033\b\005\006 033 \r 002#\033\016\002\031 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 b\004 3I\024 023 \r t\002,\b\004 004 \005\\004 033 \r 002\003\020\b\006\013 004\b\034\r 005 033 \r 016\(\(\031\r 031\b\004\033 r,\t 032\003\r\004\004\r\022 002\004 033 \r 032\r\003#\r\006\033\002\013\r 005 k  033 \r 033\005\033\002\031 006\016\021\(\r\003 005 b\033\r\021\004 b\006 033 \r 022\005\021\002\b\006\024 023 \r 027\r\020 005\(\004\r\003%\002\033\b\005\006 b\004 033 \002\033 033 \r 004\r\013\021\r\006\033\002\t 033\b\005\006 005\004\033 b\004 022\003\002\004\033\b#\002\031\031\020 003\r\022\016#\r\022\024 005\003 r,\002\021\032\031\r 033 \r 017\002\006\022\005\021\t 9\003\r\r\022\020 020\(\003\b\022 004\033\003\002\033\r\013\020 b\033 033 \r 016\(\(\031\r 031\b\004\033 002\006 032\003\005\022\016#\r 002\006 036\n\n\030 b\006 002\(\005\016\033 3 004\r#\005\006\022\004 005 033\005\033\002\031 033\b\021\r 005\003 7 021\b\031\031\b\005\006 033\003\002\006\004\t 002#\033\b\005\006\004 035\b\024\r\024 7  032\002\013\r\004\037 002\004 005\032\032\005\004\r\022 033\005 3@73 004\r#\005\006\022\004 005\003 033 \002\033 b\033 \005\016\033 033 \r 016\(\(\031\r 031\b\004\033 035#!\024 b\013\016\003\r 7\035\(\037\037\024  004\b\021\b\031\002\003 003\r\022\016#\033\b\005\006 002\032\032\031\b\r\004 033\005 033 \r 017\002\006\022\005\021\t\017\001 020\(\003\b\022 004\033\003\002\033\r\013\020\024 023 \b\004 H H H H H H H b b b b b b b H H H H H H H b b b b b b b H H H H H H H b b b b b b b 013\t\034\r\b 013\t\034\r\b!&\027 013\t\034\r\b!1\017\006\006\034\026 1\017\006\006\034\026 031\002\003\013\r m user 002\006\022 004\027\r\\r\022 005\033 \r\003\\r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 002\006 b\004\004\016\r 005\033 \r\003\\r r\003\020 031\002\003\013\r p 005\033 \r\003\\r 001\002\003\004\005\006 b 034\006 \r\021\021\006\013\032\006\032 005\006 \002+\006 004 \005\\004 033 \002\033 033 \r 016\(\(\031\r 031\b\004\033 r\016\003\b\004\033\b b\004 r\003\020 r!!\r#\033\b%\r b\006 003\r\t 022\016#\b\006\013 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033\024 b\013\016\003\r 1\035\(\037 004 \005\\004 033 \002\033 r%\r\006 033 \005\016\013 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r b\004 004\b\013\006\b'#\002\006\033\031\020 003\r\022\016#\r\022 033 \r 016\002\031\b\033\020 005 033 \r 036\n\n\030 032\003\005\t 022\016#\r\022 020 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 b\004 006\005\033 005\021\032\003\005\021\b\004\r\022 004\b\013\006\b!\t b#\002\006\033\031\020\024 016\003\033 \r\003\021\005\003\r r%\r\006 033 \005\016\013 033 \r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 016\004\r\022 022\016\003\b\006\013 004\r\013\021\r\006\033\002\033\b\005\006 b\004 022\b!!\r\003\r\006\033 003\005\021 033 \r 005\006\r 016\004\r\022 002\033 016\r\003\020 r,\r#\016\033\b\005\006 033\b\021\r 033 \r 004\032\r\r\022\016\032 005!!\r\003\r\022 020 033 \r 036\n\n\030 b\004 004\033\b\031\031 004\b\013\006\b'#\002\006\033\024 004 r,\032\r#\033\r\022 033 \r 031\005\006\013\r\003 033 \r 016\(\(\031\r 031\b\004\033 033 \r b\013 \r\003 b\004 033 \r 016\002\031\b\033\020 005 033 \r 036\n\n\030 002\006\022 033 \016\004 033 \r 004\032\r\r\022\016\032\024 5\036,\036 002\025\b\b\013\017\026\004 005 017\006\020\r\b\b\006\t\034\006\034 017\006\020\f\016\006 8\006 004\016\021 r 002%\r 032\003\005%\b\022\r\022 r,\033\r\006\004\b%\r r,\032\r\003\b\021\r\006\033\002\031 003\r\004\016\031\033\004 r%\002\031\016\002\033\b\006\013 033 \r 002\003\b\005\016\004 032\003\005\032\005\004\r\022 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\006\022 r\016\003\b\004\033\b#\004\024 b\013\016\003\r 2 004 \005\\004 002 003\r#\b\032\r r 003\r#\005\021\021\r\006\022 005\003 022\r#\b\022\b\006\013 005\006 b 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021 033\005 016\004\r 005\003 002\003\b\005\016\004 027\b\006\022\004 005 002\032\032\031\b#\002\033\b\005\006\004\024 b\003\004\033 b 033 \r 002\032\032\031\b#\002\033\b\005\006 002\006 002!!\005\003\022 002 031\005\033 005 004\032\002#\r 005\003 033 \r 036\n\n\030 035\b\024\r\024 m user b\004 031\002\003\013\r\037 002\006\022 033 \r 022\002\033\002 b\004 004\027\r\\r\022 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 b b\004 033 \r 004\b\021\032\031\r\004\033 b\004 004\016!'#\b\r\006\033 005\003 004\r\013\021\r\006\033\002\033\b\005\006\024 036\033 \r\003 b 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 b\004 006\005\033 002\006 b\004\004\016\r 002\033 002\031\031 033 \r 9\003\r\r\022\020 002\031\t 013\005\003\b\033 \021 b\033 033 \r 016\(\(\031\r 031\b\004\033 b\004 033 \r 005\b#\r\024 026\005\\r%\r\003 b 033 \r 006\016\021\(\r\003 005 b\006\b\033\b\002\031 032\002\013\r\004 p b\004 031\002\003\013\r 033 \r\006  003\r#\005\021\021\r\006\022 r\b\033 \r\003 033 \r 017\002\006\022\005\021\t\017\001 005\003 033 \r 017\002\006\022\005\021\t9\003\r\r\022\020 002\031\013\005\003\b\033 \021 b\033 033 \r 016\(\(\031\r 031\b\004\033\024 7\036 f\031\020\025\031\031\f\r\t 8\006 032\003\r%\b\005\016\004 004\r#\033\b\005\006\004 r 002%\r 004 \005\\006 005 033 \r 036\n\n\030 r\031\032\004 033\005 b\021\032\003\005%\r 033 \r r!'#\b\r\006#\020 005 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 035\002\006 b\006\004\033\002\006#\r 005 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021\004\037\024 D\r\b\006\013 002 013\r\006\r\003\b 022\002\033\002 004\033\003\016#\033\016\003\r 033 \r 036\n\n\030 002\006 r r"\016\002\031\031\020 002\032\032\031\b#\002\(\031\r 033\005 033 \r 022\b\004#\005%\r\003\020 005 004\r"\016\r\006\033\b\002\031 032\002\033\033\r\003\006\004 r\032\b\004\005\022\r\004 005\006\004\033\003\002\b\006\r\022 003\r\t 016\r\006\033 004\r\033\004 r\033#\024 004 021\r\006\033\b\005\006\r\022 b\006 n\r#\033\b\005\006  033 \r 036\n\n\030 033\r# \t 006\b"\016\r b\004 003\002\033 \r\003 022\b!!\r\003\r\006\033 003\005\021 033 \r A\026 002\031\013\005\003\b\033 \021 370 002\006\022 033 \r 002\003\033\b\033\b\005\006 002\031\013\005\003\b\033 \021 320\024 D\016\033 002\006 005\(\004\r\003%\002\006\033 003\r\002\022\r\003 021\002\020 005\006\022\r\003 r\033 \r\003 033 \r 036\n\n\030 032\003\005%\b\022\r\004 r\033\033\r\003 032\003\016\006\b\006\013 033 \002\006 033 \r 033\\005 r,\b\004\033\b\006\013 002\031\013\005\003\b\033 \021\004\024 026\005\\r%\r\003 033 \b\004 b\004 033 \r 003\005\006\013 016\r\004\t 033\b\005\006 033\005 002\004\027 r#\002\016\004\r 033 \r 036\n\n\030 002\006 r 021\002\022\r 033\005 005\003\027 b\006 032\f\005 021\005\032\n\006\f\005  033 \r 033\\005 002\031\013\005\003\b\033 \021\004\024 017\r#\002\031\031 033 \002\033 033 \r A\026 002\031\013\005\003\b\033 \021 002\004 \r\004 002 k t\b\033\r\021\004\r\033 035\r\024\013\024 k 2 037 033\005 002 016#\027\r\033 b 021\002\020 r%\r\006\033\016\002\031\031\020 r 032\003\016\006\r\022 022\016\r 033\005 002\006 b\006\004\016!'#\b\r\006\033 006\016\021\(\r\003 005 b\033\r\021\004\r\033\004 r\b\006\013 002\004 \r\022 b\006\033\005 004\016 002 016#\027\r\033\024 026\005\\r%\r\003 b 002\006 036\n\n\030 b\004 016\004\r\022 004\b\021\016\031\033\002\006\r\005\016\004\031\020 033 \r\006 027\006\005\\006 b\006!\003\r"\016\r\006\033 k t\b\033\r\021\004\r\033\004 002\003\r 006\005\033 013\r\006\r\003\002\033\r\022 b\006 033 \r 003\004\033 032\031\002#\r\024 8\033\r\021\004\r\033\004 033 \002\033 032\002\004\004 033 \003\005\016\013 033 \r 032\003\016\006\b\006\013 020 033 \r 036\n\n\030 002\006 006\005 r 016\003\033 \r\003 032\003\016\006\r\022 020 033 \r A\026 002\031\013\005\003\b\033 \021\024  032\003\r\t 031\b\021\b\006\002\003\020 003\r\004\016\031\033 032\003\r\004\r\006\033\r\022 b\006 033 \r 005\031\031\005\\013 033\002\(\031\r 004 \005\\004 033 \r Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


002\022\022\b\033\b\005\006\002\031 r\006\r'\033 003\005\016\013 \033 020 002\006 036\n\n\030 035#\005\006\004\033\003\016#\033\r\022 016\004\b\006\013 033 \r 017\002\006\022\005\021\t\017\001 002\031\013\005\003\b\033 \021 b\033 m J 5 004\r\013\021\r\006\033\004\037 033\005 033 \r A\026 002\031\013\005\003\b\033 \021 b\033  214 016#\027\r\033\004\024 031\013\005\003\b\033 \021\004 017\016\006\033\b\021\r 025\005\024 005 C 2 A\026 b\033 \005\016\033 033 \r 036\n\n\030 4  01 006 0  13 004 6 A\026 b\033 \033 \r 036\n\n\030 1  96 006 0  01 004 35 026\r\003\r r\006 033 \r A\026 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 b\006 005\006*\016\006#\033\b\005\006 b\033 033 \r 036\n\n\030 033 \r 006\016\021\(\r\003 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 035 C 2 037 b\004 002\(\005\016\033 002\031 002\006\022 033 \r 004\032\r\r\022\016\032 b\004 002\(\005\016\033  033\b\021\r\004 035\ \r\006 005\021\032\002\003\r\022 033\005 033 \r A\026 002\031\013\005\003\b\033 \021 b\033 \005\016\033 033 \r 036\n\n\030\037\024 n\b\021\b\031\002\003\031\020 033 \r 036\n\n\030 002\006 003\b\006\013 002\022\022\b\033\b\005\006\002\031 r\006\r'\033\004 033\005 004\005\021\r 005\033 \r\003 002\031\013\005\003\b\033 \021\004\024 005\003 031\002#\027 005 004\032\002#\r  003\b\rL\020 022\b\004\t 016\004\004 r\031\005 005 033 \r 036\n\n\030 002\006 r 002\032\032\031\b#\002\(\031\r 033\005 033 \r 002\003\033\b\033\b\005\006 002\031\013\005\003\b\033 \021 320 002\006\022 033\005 033 \r A\r\032\033 ?\003\005*\r#\033 002\031\013\005\003\b\033 \021 30\024 005\003 033 \r 002\003\033\b\033\b\005\006 002\031\013\005\003\b\033 \021 b 002\006 036\n\n\030 b\004 016\b\031\033 005\003 r\002 032\002\003\033\b\033\b\005\006 033 \r r,\r#\016\033\b\005\006 033\b\021\r 005\003 r\002 032\002\003\033\b\033\b\005\006 b\031\031 r 004\b\013\t 006\b'#\002\006\033\031\020 003\r\022\016#\r\022 r#\002\016\004\r 027\006\005 031\005#\002\031 b\006!\003\r"\016\r\006\033 b\033\r\021\004\r\033\004 002\003\r 032\003\016\006\r\022 020 033 \r 036\n\n\030\024 023\005 b\021\032\003\005%\r 033 \r 032\r\003!\005\003\021\002\006#\r 016\003\t 033 \r\003 b 033 \r 036\n\n\030\004 005\003 002\031\031 033 \r 032\002\003\033\b\033\b\005\006\004 002\003\r 002%\002\b\031\002\(\031\r 033 \r\006 021\002\006\020 005 033 \r 013\031\005\(\002\031 002\006\022\b\022\002\033\r\004 035\b\024\r\024 b\033\r\021\004\r\033\004 033 \002\033 002\003\r 031\005#\002\031\031\020 003\r"\016\r\006\033 b\006 002 032\002\003\033\b\033\b\005\006\037 b 002\003\r 027\006\005 033\005 r 013\031\005\(\002\031\031\020 b\006\t 003\r"\016\r\006\033 b\033 \003\r\004\032\r#\033 033\005 033 \r 036\n\n\030\004 002\006 b\006 002#\033 r 032\003\016\006\r\022\024 017\r#\r\006\033\031\020 002 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021 002\031\031\r\022 A\r\032\033 \t 003\005*\r#\033 002\004 032\003\005\032\005\004\r\022 033\005 013\r\006\r\003\002\033\r 031\005\006\013 032\002\033\033\r\003\006\004 020 016\004\b\006\013 022\r\032\033 \t'\003\004\033 004\r\002\003 005\006 002 031\r,\b#\005\013\003\002\032 \b 033\003\r\r 005 b\033\r\021\004\r\033\004\024 030\005\003\r 032\003\r#\b\004\r\031\020 002\033 r\002 004\033\r\032 033 \r 002\031\013\005\003\b\033 \021 013\r\006\r\003\002\033\r\004 032\005\004\004\b\(\031\r 003\r\t 016\r\006\033 031\r,\b#\005\013\003\002\032 \b r,\033\r\006\004\b\005\006\004 035\b\024\r\024 002\006\022\b\022\002\033\r\004\037 005 002 033\003\r\r 006\005\022\r 002\006\022 033\r\004\033\004 005\003 003\r"\016\r\006#\020\024 8 002\006 036\n\n\030 b\004 016\004\r\022 004\b\021\016\031\t 033\002\006\r\005\016\004\031\020 033 \r\006 027\006\005\\006 b\006!\003\r"\016\r\006\033 002\006\022\b\022\002\033\r\004 002\006 r 032\003\016\006\r\022 r!\005\003\r 033 \r 003\r"\016\r\006#\020 005\016\006\033\b\006\013\024 8\036 027\r\t\020$\025\031\f\r\t\031 8\006 033 \b\004 032\002\032\r\003 r 032\003\005\032\005\004\r\022 002 031\b\013 \033\t\\r\b\013 \033 004\033\003\016#\033\016\003\r 002\031\031\r\022 005\032\033\b\021\b\034\r\022 004\r\013\021\r\006\033 004\016\032\032\005\003\033 021\002\032 035\036\n\n\030\037\024 8\006 002\022\022\b\033\b\005\006 033\005 b\021\t 032\003\005%\b\006\013 033 \r 032\003\016\006\b\006\013 b\006 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021\004 b\033 002\031\004\005 032\003\005%\b\022\r\004 022\b\003\r#\033 b\006!\005\003\021\002\033\b\005\006 002\(\005\016\033 033 \r 002\003\b\002\(\b\031\b\033\020 005 003\r"\016\r\006\t b\r\004 b\006 022\b!!\r\003\r\006\033 004\r\013\021\r\006\033\004 005 033 \r 033\003\002\006\004\002#\033\b\005\006\004\024 H\006\031\b\027\r 021\002\006\020 002\031\013\005\003\b\033 \021\004 b 002\006\006\005\033 002\006\022\031\r 004\027\r\\r\022 022\002\033\002 033 \r 004\033\003\r\006\013\033 005 033 \r 036\n\n\030 b\004 033\005 r,\032\031\005\b\033 033 \r 002\003\b\002\(\b\031\b\033\020\024 001\005\006#\r\003\006\b\006\013 033 \r 036\n\n\030 r 004\033\016\022\b\r\022 033\\005 021\002\b\006 032\003\005\(\031\r\021\004 035\b\037 033 \r 021\b\006\b\021\016\021 006\016\021\(\r\003 005 004\r\013\021\r\006\033\004 005\003 002\006 036\n\n\030 033\005 b\006#\016\003 006\005 031\005\004\004 b\006 002##\016\t 003\002#\020 035\033 \r 004\r\013\021\r\006\033 021\b\006\b\021\b\034\002\033\b\005\006 032\003\005\(\031\r\021\037 002\006\022 035\b\b\037 033 \r r\004\033 005\021\032\005\004\b\033\b\005\006 005 033 \r 004\r\013\021\r\006\033\004 013\b%\r\006 002 016\004\r\003\t\022\r\033\r\003\021\b\006\r\022 006\016\021\t r\003 005 004\r\013\021\r\006\033\004 035\033 \r 005\006\004\033\003\002\b\006\r\022 004\r\013\021\r\006\033\002\033\b\005\006 032\003\005\(\031\r\021\037\024 005\003 033 \r 003\004\033 032\003\005\(\031\r\021 r 032\003\005%\b\022\r\022 002 033 \005\003\005\016\013 002\006\002\031\020\004\b\004 002\006\022 002\003\022\006\r\004\004 003\r\004\016\031\033\004 004 \005\\b\006\013 033 \002\033 006\005 031\005\004\004 b\006 002##\016\003\002#\020 016\004\b\006\013 033 \r 036\n\n\030 003\r"\016\b\003\r\004 033\005\005 021\002\006\020 004\r\013\021\r\006\033\004 b\006 013\r\006\r\003\002\031\024 005\003 033 \r 004\r#\005\006\022 032\003\005\(\031\r\021 r 022\r%\r\031\005\032\r\022 033 \r r\016\003\b\004\033\b 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\031\031\r\022 033 \r 017\002\006\022\005\021 017\001 002\006\022 9\003\r\r\022\020 002\031\013\005\003\b\033 \021\004\024 023\005 016\003\033 \r\003 003\r\022\016#\r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 r 032\003\005\032\005\004\r\022 005\032\033\b\021\b\034\002\t 033\b\005\006\004 033 \002\033 016\004\r 002 016\(\(\031\r 031\b\004\033 002\006\022 003\016\006 033 \r 002\031\013\005\003\b\033 \021\004 b\006 002 020\(\003\b\022 002\004 \b\005\006\024 036\016\003 r,\032\r\003\b\021\r\006\033\002\031 003\r\004\016\031\033\004 002\003\r 004\033\003\005\006\013 b\006\022\b#\002\033\b\006\013 033 \002\033 005\003 002 004\021\002\031\031 036\n\n\030 035\r\024\013\024 024 021\r\013\002\(\020\033\r\004\037 033 \r 004\032\r\r\022\016\032 002\006 r r\003\020 004\b\013\006\b'#\002\006\033 035\r\024\013\024 7 033\b\021\r\004\037 020\r\033 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 b\004 004\021\002\031\031 035\r\024\013\024 3 004\r#\005\006\022\004 005\003 7 021\b\031\031\b\005\006 033\003\002\006\004\002#\033\b\005\006\004\037\024 r 005\006#\031\016\022\r\022 020 032\003\r\004\r\006\033\b\006\013 002 003\r#\005\021\021\r\006\022\r\022 003\r#\b\032\r 005\003 002\003\b\005\016\004 b\003#\016\021\004\033\002\006#\r\004\024 b\031\r 005\016\003 r,\032\r\003\b\021\r\006\033\004 r\003\r 002\004\r\022 005\006 006\022\t b\006\013 003\r"\016\r\006\033 004\r\033\004 016\004\b\006\013 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 b\033 b\004 b\021\032\005\003\t 033\002\006\033 033\005 003\r\021\r\021\(\r\003 033 \r 013\r\006\r\003\002\031\b\033\020 005 033 \r 036\n\n\030 8\033 b\004 002\032\032\031\b#\002\t 031\r 033\005 021\002\006\020 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021\004 035\021\002\006\020 005 b 002\003\r 031\b\004\033\r\022 b\006 033 \r b\006\033\003\005\022\016#\033\b\005\006\037\024 r r,\032\r#\033 033 \r 036\n\n\030 033\005 r r"\016\002\031\031\020 r!!\r#\033\b%\r 005\003 033 \005\004\r 002\031\013\005\003\b\033 \021\004\024 0060\006\017\006\t\020\006\031 30 017\024\001\024 013\002\003\\002\031 001\024\001\024 013\013\002\003\\002\031 002\006\022 M\024M\024M\024 003\002\004\002\022\024 A\r\032\033 '\003\004\033 013\r\006\t r\003\002\033\b\005\006 005 031\005\006\013 032\002\033\033\r\003\006\004\024 8\006 b\f\032  025  032 3@4N334\024 0 017\024 013\003\002\\002\031 023\024 8\021\b\r\031\b\006\004\027\b 002\006\022 024 n\\002\021\b\024 030\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004 r\033\\r\r\006 004\r\033\004 005 b\033\r\021\004 b\006 031\002\003\013\r 022\002\033\002\(\002\004\r\004\024 8\006 b\f\032 9 035>>\026  032\032 2N.31\024 0 017\024 013\003\002\\002\031 026\024 030\002\006\006\b\031\002 r\033 002\031\024 002\004\033 022\b\004#\005%\r\003\020 005 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024 034\007\024\005\032\003\t 006\005 005\f1\020\003\034!\003 006\t\032\f\007\003\b\013 024\005\034 024\n\024 030\006\005\006\005  032 2N/.4\024 8;\0308\023 003\r\004\004 3661\024 50 017\024 013\003\002\\002\031 002\006\022 017\024 n\003\b\027\002\006\033\024 030\b\006\b\006\013 004\r"\016\r\006\033\b\002\031 032\002\033\033\r\003\006\004\024 8\006 b\f\032  035>>A  032 N35\024 70 017\024O\024 D\002\020\002\003\022\005\024 E!'#\b\r\006\033\031\020 021\b\006\b\006\013 031\005\006\013 032\002\033\033\r\003\006\004 003\005\021 022\002\033\002\(\002\004\r\004\024 8\006 b\f\032 9 035>>B  032 47N6/\024 10 n\024 D\003\b\006 017\024 030\005\033\\002\006\b 002\006\022 001\024 n\b\031%\r\003\004\033\r\b\006\024 D\r\020\005\006\022 021\002\003\027\r\033 002\004\027\r\033 9\r\006\r\003\002\031\b\034\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004 033\005 005\003\003\r\031\002\033\b\005\006\004\024 8\006 b\f\032 9\6\030 035>>C  032 17N.21\024 20 9\024 9\003\002 \006\r f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 002\006\022 P\024 002\006\013\024 E!'#\b\r\006\033 021\b\006\b\006\013 005 005\006\004\033\003\002\b\006\r\022 005\003\003\r\031\002\033\r\022 004\r\033\004\024 8\006 b\f\032 017 025  032 73.N7.3\024 40 O\024 026\002\006 O\024 r\b 002\006\022 K\024 K\b\006\024 030\b\006\b\006\013 003\r"\016\r\006\033 032\002\033\033\r\003\006\004 b\033 \005\016\033 002\006\022\b\t 022\002\033\r 013\r\006\r\003\002\033\b\005\006\024 8\006 b\f\032 9 025  032 3N3.\024 60 001\024 026\b\022\(\r\003\024 036\006\031\b\006\r 002\004\004\005#\b\002\033\b\005\006 003\016\031\r 021\b\006\b\006\013\024 8\006 b\f\032 9 035  032\032 357N371\024 3@0 f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 001\024\007\024\t\n\024 f\r\016\006\013 002\006\022 017\024\023\024 025\013\024 023 \r 004\r\013\021\r\006\033 004\016\032\t 032\005\003\033 021\002\032 n#\002\031\002\(\031\r 021\b\006\b\006\013 005 003\r"\016\r\006\033 b\033\r\021\004\r\033\004\024 9 020\f b\024\n\006\f\005\t   035.\037 032\032 3N.2 A\r#\024 024 330 f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 017\024 025\013 r\033 002\031\024 036\032\033\b\021\b\034\002\033\b\005\006 005 005\006\004\033\003\002\b\006\r\022 003\r\t 016\r\006\033 004\r\033 016\r\003\b\r\004 002\003\b\002\(\031\r 005\006\004\033\003\002\b\006\033\004\024 8\006 b\f\032 9\6\030 035  032 372N314\024 3.0 001\024\007\024\t\n\024 f\r\016\006\013 017\024\023\024 025\013 002\006\022 026\024 030\002\006\006\b\031\002\024 023 \r 005\032\033\b\021\b\034\r\022 004\r\013\021\r\006\033 004\016\032\032\005\003\033 021\002\032 005\003 033 \r 021\b\006\b\006\013 005 003\r"\016\r\006\033 032\002\033\033\r\003\006\004\024 023\r# \006\b#\002\031 017\r\t 032\005\003\033 001\n 023\017\t.@@3\t34 023 \r H\006\b%\r\003\004\b\033\020 005 D\003\b\033\b\004 001\005\031\016\021\(\b\002 001\002\006\002\022\002 3\024 3/0 026\024 030\002\006\006\b\031\002 026\024 023\005\b%\005\006\r\006 002\006\022 0248\024 M\r\003\027\002\021\005\024 A\b\004#\005%\r\003\020 005 003\r"\016\r\006\033 r\032\b\004\005\022\r\004 b\006 r%\r\006\033 004\r"\016\r\006#\r\004\024 024\n\024 030\006\005\006\005 024\005\034 005\f1\020\003\034!\003 006\t\032\f\007 003\b\013  035 035/\037 032\032 76N.46 n\r\032\033\024 3662\024 350 017\024\023\024 025\013 f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 r\033 002\031\024 E,\032\031\005\003\002\033\005\003\020 021\b\006\b\006\013 002\006\022 032\003\016\006\b\006\013 005\032\033\b\021\b\034\002\033\b\005\006\004 005 005\006\004\033\003\002\b\006\r\022 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024 8\006 b\f\032 9\6\030 035>>B  032 3/N.5\024 370 O\024\n\024 002\003\027 030\024\t\n\024 001 \r\006 002\006\022 024\n\024 K\016\024 H\004\b\006\013 002 002\004 \t\(\002\004\r\022 021\r\033 \005\022  033\003\002\006\004\002#\033\b\005\006 033\003\b\021\021\b\006\013 005\003 021\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024  001  9 0357\037 032\032 43/N4.7 n\r\032\033\024;\036#\033\024 3662\024 310 025\024 002\004"\016\b\r\003 K\024 D\002\004\033\b\022\r r\033 002\031\024 A\b\004#\005%\r\003\b\006\013 003\r"\016\r\006\033 031\005\004\r\022 b\033\r\021\004\r\033\004 005\003 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024 8\006 b\f\032 017:\001 035  032 64N531\024 320 024 n\002%\002\004\r\003\r E\024 036\021\b\r#\b\006\004\027\b 002\006\022 n\024 025\002%\002\033 \r\024 006 r!'#\b\r\006\033 002\031\013\005\t 003\b\033 \021 005\003 021\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004 b\006 031\002\003\013\r 022\002\033\002\(\002\004\r\004\024 8\006 b\f\032 D:\016 035>>A  032 5/.N55/\024 340 001\024 n\b\031%\r\003\004\033\r\b\006 n\024 D\003\b\006 r\033 002\031\024 n#\002\031\002\(\031\r 033\r# \006\b"\016\r\004 005\003 021\b\006\b\006\013 002\016\004\002\031 004\033\003\016#\033\016\003\r\004\024 8\006 b\f\032 031D:\016 035>>B  032 765N1@7\024 360 017\024 n\003\b\027\002\006\033 Q\024 M\016 002\006\022 017\024 013\003\002\\002\031\024 030\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006\004 003\016\031\r\004 b\033 b\033\r\021 005\006\004\033\003\002\b\006\033\004\024 8\006 b\f\032  035>>C  032 12N2/\024 0 030\024O\024 R\002\027\b 002\006\022 007\024 9\005\016\022\002\024 002\004\033 r\003\033\b#\002\031 021\b\006\b\006\013 016\004\b\006\013 022\b!!\004\r\033\004\024 023\r# \t 006\b#\002\031 017\r\032\005\003\033 3\t3 017\r\006\004\004\r\031\002\r\003 005\031\020\033\r# \006\b 8\006\004\033\b\033\016\033\r H\n 3\024 30 030\024O\024 R\002\027\b 002\006\022 001\024\tO\024 026\004\b\002\005\024 001\026+\017\030 006 r!'#\b\r\006\033 002\031\013\005\003\b\033 \021 005\003 031\005\004\r\022 002\004\004\005#\b\002\033\b\005\006 003\016\031\r 021\b\006\b\006\013\024 023\r# \006\b#\002\031 017\r\032\005\003\033 66\t3 017\r\006\004\004\r\031\002\r\003 005\031\020\033\r# \006\b 8\006\004\033\b\033\016\033\r H\n 3666\024 Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


expect this optimization to be of greatest bene\336t when the transaction sizes are large r example if our transaction is T 000 f A\000 B 000 C\000 D\000 E g  k 000 3 fan-out 000 2 then all the 3-subsets of T are f ABC,ABD,ABE,ACD,ACE,ADE,BCD,BCE,BDE,CDE g  Figure 2 shows the candidate hash tree C 3  We ave to increment the support of every subset of T contained in C 3  We egin with the subset AB C  and hash to node 11 and process all the itemsets In this downward path from the root we mark nodes 1 4 and 11 as visited We then process subset AD B  and mark node 10 Now consider the subset CDE  We see in this case that node 1 has already been marked and we can preempt the processing at this very stage This approach can r consume a lot of memory r a n fan-out F  for iteration k  e need additional memory of size F k to store the 337ags In the parallel implementation we have to keep a VISITED 336eld for each processor bringing the memory requirement to P\000F k  This can still get very large especially with increasing number of processors In we sho w a mechanism by which further reduces the memory requirement to only k 000F  The approach in the parallel setting yields a total requirement of k 000F 000P  5 Experimental Evaluation Database T I D Total Size T5.I2.D100K 5 2 100,000 2.6MB T10.I4.D100K 10 4 100,000 4.3MB T15.I4.D100K 15 4 100,000 6.2MB T20.I6.D100K 20 6 100,000 7.9MB T10.I6.D400K 10 6 400,000 17.1MB T10.I6.D800K 10 6 800,000 34.6MB T10.I6.D1600K 10 6 1,600,000 69.8MB Table 2 Database properties 5.1 Experimental Setup All the experiments were performed on a 12-node SGI Power Challenge shared-memory multiprocessor Each node is a MIPS processor running at 100MHz There\325s a total of 256MB of main memory The primary cache size is 16 KB 64 bytes cache line size with different instruction and data caches while the secondary cache is 1 B 128 bytes cache line size The databases are stored on an attached 2GB disk All processors run IRIX 5.3 and data is obtained from the disk via an NFS 336le server We used different synthetic databases with size ranging form 3MB to 70MB 2  and are generated using the procedure described in These databases mimic the transactions in a retailing en vironment Each transaction has a unique ID followed by a list of items bought in that transaction The 2 While results in this section are only shown for memory resident databases the concepts and optimization are equally applicable for non memory resident databases In non memory resident programs I/O becomes an important problem Solutions to the I/O problem can be applied in combination with the schemes presented in this paper These solutions are part of future research 11 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


  0 500 1000 1500 2000 2500 0 2 4 6 8 10 12 Number of Large Itemsets Iterations Large Itemset at Support = 0.5 222T5.I2.D100K\222  222T10.I4.D100K\222   222T15.I4.D100K\222   222T20.I6.D100K\222   222T10.I6.D400K\222   222T10.I6.D800K\222   222T10.I6.D1600K\222  Figure 3 Large Itemsets per Iteration data-mining provides information about the set of items generally bought together Table 2 shows the databases used and their properties The number of transactions is denoted as jD j  average transaction size as j T j  and the average maximal potentially large itemset size as j I j  The number of maximal potentially large itemsets j L j 000 2000 and the number of items N 000 1000 We refer the reader to for more detail on the database generation All the e xperiments were performed with a minimum support value of 0.5 and a leaf threshold of 2 i.e max of 2 itemsets per leaf We note that the  improvements shown in all the experiments except where indicated do not take into account initial database reading time since we speci\336cally wanted to measure the effects of the optimizations on the computation Figure 3 shows the number of iterations and the number of large itemsets found for different databases In the following sections all the results are reported for the CCPD parallelization We do not present any results for the PCCD approach since it performs very poorly and results in a speed-down on more than one processor 3  5.2 Aggregate Parallel Performance Table 3 s actual running times for the unoptimized sequential and a naive parallelization of the base algorithm Apriori for 2,4 and 8 processors without any f the techniques descibed in sections 3 and 4 In this section all the graphs showing  improvements are with respect to the data for one processor in table 3 Figure 4 presents the speedups obtained on different databases and different processors for the CCPD parallelization The results presented on CCPD use all the optimization discussed 3 Recall that in the PCCD approach every processor has to read the entire database during each iteration The resulting I/O costs on our system were too prohibitive for this method to be  12 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


Database 1 proc 2 procs 4 procs 8 procs T5.I2.D100K 20 17 12 10 T10.I4.D100K 96 70 51 39 T15.I4.D100K 236 168 111 78 T20.I6.D100K 513 360 238 166 T10.I6.D400K 372 261 165 105 T10.I6.D800K 637 435 267 163 T10.I6.D1600K 1272 860 529 307 Table 3 Naive Parallelization of Apriori seconds   0 2 4 6 8 10 12 0 2 4 6 8 10 12 Speedup Number of Processors CCPD Ideal  T5.I2.D100K.t2   T10.I4.D100K.t2   T15.I4.D100K.t2   T20.I6.D100K.t2   T10.I6.D400K.t2   T10.I6.D800K.t2   T10.I6.D1600K.t2    0 2 4 6 8 10 12 0 2 4 6 8 10 12 Speedup Number of Processors CCPD : With Reading Time Ideal  T5.I2.D100K.t2   T10.I4.D100K.t2   T15.I4.D100K.t2   T20.I6.D100K.t2   T10.I6.D400K.t2   T10.I6.D800K.t2   T10.I6.D1600K.t2  Figure 4 CCPD Speed-up a without reading time b with reading time 13 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


Reading  f Total Time Database Time P 000 1 P 000 2 P 000 4 P 000 8 P 000 12 T5.I2.D100K 9.1s 39.9 43.8 52.6 56.8 59.0 T10.I4.D100K 13.7s 15.6 22.2 29.3 36.6 39.8 T15.I4.D100K 18.9s 8.9 14.0 21.6 29.2 32.8 T20.I6.D100K 24.1s 4.9 8.1 12.8 18.6 22.4 T10.I6.D400K 55.2s 16.8 24.7 36.4 48.0 53.8 T10.I6.D800K 109.0s 19.0 29.8 43.0 56.0 62.9 T10.I6.D1600K 222.0s 19.4 28.6 44.9 59.4 66.4 Table 4 Database Reading Time in section 4 320 computation balancing hash tree balancing and short-circuited subset checking The 336gure on the left presents the speed-up without taking the initial database reading time into account We observe that as the number of transactions increase we get increasing speed-up with a speed-up of more than 8 n 2 processors for the largest database T10.I6.D1600K with 1.6 million transactions r if we were to account for the database reading time then we get speed-up of only 4 n 2 processors The lack of linear speedup can be attributed to false and true sharing for the heap nodes when updating the subset counts and to some extent during the heap generation phase Furthermore since variable length transactions are allowed and the data is distributed along transaction boundaries the workload is not be uniformly balanced Other factors like s contention and i/o contention further reduce the speedup Table 4 shows the total time spent reading the database and the percentage of total time this constitutes on different number of processors The results indicate that on 12 processors up to 60 of the time can be spent just on I/O This suggest a great need for parallel I/O techniques for effective parallelization of data mining applications since by its very nature data mining algorithms must operate on large amounts of data 5.3 Computation and Hash Tree Balancing Figure 5 shows the improvement in the performance obtained by applying the computation balancing optimization discussed in section 3.1.2 and the hash tree balancing optimization described in section 4.1 The 336gure shows the  improvement r a run on the same number of processors without any optimizations see Table 3 Results are presented for different databases and on different number of processors We 336rst consider only the computation balancing optimization COMP using the multiple equivalence classes algorithm As expected this doesn\325t improve the execution time for the uni-processor case as there is nothing to balance r it is very effective on multiple processors We get an improvement of around 20 on 8 processors The second column for all processors shows the bene\336t of just balancing the hash tree TREE using our bitonic hashing the unoptimized version uses the simple mod d hash function Hash tree balancing by itself is an extremely effective optimization It s the performance by about 30 n n uni-processors On smaller databases and 8 processors r t s not as 14 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


