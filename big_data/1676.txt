MiRABIT: A New Algorithm for Mining Association Rules Sandro da Silva Camargo Computer Science MSc at Universidade Federal do Rio Grande do Sul - Porto Alegre - RS - Brazil Lecturer at Universidade da Regi\343o da Campanha - Bag\351 - RS - Brazil e-mail: scamargo@urcamp.tche.br Paulo Martins Engel Dr. Ingenieur at Technical University of Munich - Munich - Germany Adjunct Professor at Universidade Federal do Rio Grande do Sul - Porto Alegre - RS - Brazil e-mail: engel@inf.ufrgs.br Abstract sive e me characteristics of 
the database are different.  The algorithms currently used for mining association rules optimize this task for supermarket characteristics.  The MiRABIT algorithm that is presented in this work clothing e efficiency of the proposed algorithm in relation to the a clothing store database Keywords association rules, data mining, clothing store 1 Introduction Nowadays, lots of organizations interact with their clients ractions are stored in a database.  A record in this database typically consists of the  transaction number, the transaction date and the set 
of items bought in that transaction [1  G i v e n  a s a le s transaction database, mining association rules is a way to find sets of items that tend to occur together in a transaction, i.e. the significative relationships, from the algorithm point of view, among items such as that the presence of some items in a transaction implies the presence of other items in the same transaction Association rules aim to understand the client behavior The statement in the form c of clients that purchase the item A also purchases the item B consists in a association rule 1.1 The theoretical problem The formal statement of the mining association rules 
d by [3  Let I  i 1  i 2  i 3  i m be a set of binary attributes called items.  Let D  T 1  T 2  T 3  T m be a set of transactions, where each transaction T is a set of items such that T  001  I Each transaction T is represented as a binary vector, with an element t  k  1 i f  
T e item i k and t  k   0  o t h e r w i s e T h er e i s ex a c t l y o n e t u p l e in the database to each transaction.  Considering X as a subset of I a transaction T contains X if, for all items i k in X  t  k   1  S imilar l y  b e in g  Y a subset of I a transaction T contains Y if for all items i k in Y  t  k  1 An association rule consists in an implication of the 
form X  Y where X  002  I  Y  002  I and X  003  Y  004 i.e X is a set of some items in I and Y is a set of some items in I that are not present in X The support s of an itemset X is the number of transactions in which the X itemset occurs le X  Y is given as s  X 005 Y  The rule X 
 Y is satisfied in the set of transactions T with confidence factor 0 006  c  006 1, if at least c of transactions in T that satisfy X also satisfy Y The notation X  Y  c  X  Y has confidence factor of c ly, the confidence factor is given as s  X 005 Y  s  X  Given the set of transactions T it is necessary to 
generate all rules that satisfy certain additional constraints of two different forms[2  007  Syntactic constraints: these constraints involve restrictions on the items that can appear in a rule 007  Support constraints: these constraints involve restrictions on the number of transactions in T that le These constraints are applied to optimize the time and Proceedings of the XXII International Conference of the Chilean Computer Science Society \(SCCC\22202 1522-4902/02 $17.00 \251 2002 IEEE 


the number of generated rules The problem of mining association rules can be decomposed in two steps 007  Find all large itemsets.  A large itemset is a set of items that has support a bove a certain threshold called minsup This step is computationally expensive and I/O intensive 007  Generate high confidence rules. In this step all rules that have a confidence factor above a certain threshold, called minconf are generated. This step is relatively straightforward If the itemset X is large then every subset of X will also be large. If the itemset X is not large then every set that contains X will also be not large. All rules derived from X satisfies the support constraints if X satisfies the support constraints 1.2 Related Works The Apriori algorithm presented by [3 is th e  mo s t  u s e d algorithm for mining association rules.   The Apriori algorithm makes several passes over the database and mset generation.  In this procedure the large itemsets in the previous pass are combined to generate the candidates itemsets for the actual pass.  After Apriori, several algorithms for mining association rules have been ques to solve this problem One technique used is minimize the I/O by decrease the passes number.  The Partition algorithm presented by 5 min imize s I  O b y s c an n i n g th e d a tab a s e o n ly tw ic e    I t partitions the database into small chunks which can be handled in memory. In the first pass it generates the set of all potentially large itemsets \(any itemset locally large in a partition\ and in the second pass their global support clat by c a n da t a b a s e  o n l y once, generating all large itemsets.  They make a clusterization process before the candidates itemsets generation and counting. Other way to minimize the I/O is using database sampling, in this case some transactions are selected by sampling to be analised 2 Influence of the database characteristics on the mining process It 264 s a fact that the characteristics of the analyzed activity nce on the process of mining association rules [8  In this work, there is a comparisson between a typical ainst a typical supermarket database, focusing the distribution of items per transacion  H\024\020 W\\SLFDO VXSHUPDUNHW GDWDEDVH In the considered supermarket database, in one red 2,449 transactions involving 34,375 items.  This results in an average of items per transaction est transaction contains 281 items Figure 1 presents the distribution of items per transaction of this supermarket database in one red 2,266 transactions involving 4,380 items This results in an average of items per transaction  of 1.93.  The largest transaction contains 19 items.  Figure 1 presents the distribution of items per transaction of this clothing store database  H\025\020 W\\SLFDO FORWKLQJ VWRUH GDWDEDVH These distinct databases characteristics should be considered  in the design of an appropriate algorithm for nces affect widely decisively the algorithm performance  Distribution of items p er transaction 0 500 1000 1500 1 3 5 7 9 11 13 15 17 19 Items in transaction amount Transactions amount Distribution of items p er transaction 0 100 200 300 400 1 30 59 88 117 146 175 204 233 262 Items in transaction amount Transactions amount Proceedings of the XXII International Conference of the Chilean Computer Science Society \(SCCC\22202 1522-4902/02 $17.00 \251 2002 IEEE 


These results show that a supermarket database has an average of items per transaction much larger than a clothing store database 3 Discovering large itemsets The first step for the solving of the problem of mining association rules, which consists in discovering large itemsets, it is the most complex and expensive step.  [6 explains that the task of discovering large itemsets is I/O intensive being a great concern in mining association rules process.  [7 sa y s t h a t g i v e n  m items, there are 2 m itemsets, however only a small fraction of the whole space consists of large itemsets.  In a cloting store database this fraction is much smaller than that in a e of items per transaction is smaller In the sequence, two algorithms to mining association rules will be analysed: Apriori, that is the most used in this task, and MiRABIT, that is introduced by this work In this analysis we are considering only the discovery of large itemsets, because the rules generation is done in the me manner in both algorithms 3.1 Apriori algorithm The Apriori algorithm was proposed by [2 an d is th e most used algorithm to discover association rules Apriori makes multiple passes over the sales transaction database.  In the first pass, the individual items support is counted.  The items that have support greater than or e items In the subsequent passes, given k as the number of the current pass,  the large itemsets in the previous pass k 1 is grouped in sets with k items; these sets are called candidates itemsets ates itemsets is counted, and, if the support is greater than or ered large.  This process continues until the large itemsets in the pass be an empty set Like a time optimization method, this algorithm supposes that if X  002 217 Y and X is not large, than Y is not large too.  Therefore in a new pass over the database, the algorithm don 264 t count all itemsets, but just the candidates itemsets selected in the previous pass.  This method results in a decrease of the algorithm execution time r the second pass, where k is greater than or equal to 2, the algorithm executes two steps: in the first step the large itemset L k-1 found in the k-1 pass is used to generate the candidates itemset C k using the Apriori Gen function; in the second step the database is scanned and the candidates itemsets C k support are counted Figure 3 presents the Apriori algorithm pseudocode H 026 020 SULRUL OJRULWKP SVHXGRFRGH 025 3.2 MiRABIT Algorithm The MiRABIT acronymous signifies Mi 347\343o de R s de A m B aixa M\351dia de I tens por T ransa\347\343o or mining association rules in databases with low average of itens per transaction.  The MiRABIT Algorithm is optimized to databases with low average of items in transaction [4  This algorithm makes multiple passes over the database In the first pass is counted the individual items support The items that have a support  greater than or equal to the minimum support are considered large items. In the second pass, at each transaction, its items are grouped in sets of two items.  At each set with two item, is verified if e; if not, this set support is not counted otherwise this set support is counted, and so on to next ts of candidates m e itemsets.  The process iterates until the large itemsets have just one element or be an t The candidates itemsets generation turns critical in a because the ratio large itemsets/candidates itemsets is smaller than this ratio in a supermarket database.  Because this, we observed that is more efficient to generate the candidates itemsets in each transaction than generate the candidates itemsets in the beginning of the each pass.  MiRABIT algorithm makes several I/O operations at each transaction, but this overhead is more efficient than creating a big set of msets like Apriori does. Figure 4 presents the MiRABIT algorithm pseudocode The MiRABIT algorithm generates the same large itemset as the Apriori algorithm does, however MiRABIT generates a smaller candidates itemsets than Apriori, as shown in table 1  L 1 large 1-itemsets for k=2; L k-1  b  004 k do begin C k riori_gen\(L k-1 New candidates  forall transactions t t  D  do begin C t subset\(C k t\;   //Candidates contained in t  forall candidates c t C t  do c.count  end  L k c t C k c.count n  minsup  end Proceedings of the XXII International Conference of the Chilean Computer Science Society \(SCCC\22202 1522-4902/02 $17.00 \251 2002 IEEE 


 027 020 0L5$%,7 OJRULWKP SVHXGRFRGH 4 Comparing the performance of MiRABIT and Apriori To analyse the relative performance of the MiRABIT and Apriori algorithms, we used a real clothing store database.   In this analysis a one-month sale cycle was considered.  In this cycle the database stored 2265 transactions and 4380 items Figure 5 demonstrates the relative performance of these algoritms.  Four experiments were carried out accomplished using the same database with different m support factors  030 003 5HODWLYH SHUIRUPDQFH nce between MiRABIT and Apriori is related to the generation of candidates itemsets. The set of large itemsets is the same in both algorithms.  If the ates e s too 7DEOH 024\035 7LPH FRPSDULVVRQ EHWZHHQ SULRUL DQG 0L5$%,7 DOJRULWKPV Time \(seconds Minimum support Apriori MiRABIT 2 130 50 34934 43024 52820 7DEOH 025\035 WHPVHWV FRPSDULVRQ EHWZHHQ SULRUL DQG 0L5$%,7 OJRULWKPV Candidates itemsets generated Minimum support Apriori MiRABIT Frequent itemsets 2 648707 2509 959 3 107594 1419 485 4 39344 830 285 5 17582 545 192 Table 1 and table 2 show the results obtained with MiRABIT and Apriori algorithms.  The table 1 rms of processing time. The table 2 demonstrates clearly that the number of candidates itemsets generated is the reason of rior efficiency 5 Conclusions siness branch of the company some characteristics of the r transaction is a very important database characteristic h should be considered in the choice of an appropriate algorithm for mining association rules The MiRABIT algorithm, which is presented here, is optimized to find association rules in databases with low average of items per transaction. It is demonstrated the experimental results that compares the MiRABIT algorithm and the Apriori algorithm in a clothing store database.  In these experiments the MiRABIT algorithm had a better performance than Apriori algorithm  F 1 large 1-itemsets for  k 2 F k-1  b 1\ or \(k 006 max_rule_length  k  do begin forall ctions t  t  D  do begin C t subset t,k Generates candidates on transaction t with k items  forall candidates c  t  C t  do c.count end L k  c  t  C k c.count n minsup end Answer 005 k L k  Relative performance 0 50 100 150 2345 Minimum support Time \(seconds MiRABIT Apriori Proceedings of the XXII International Conference of the Chilean Computer Science Society \(SCCC\22202 1522-4902/02 $17.00 \251 2002 IEEE 


References 1  BE RRY  M i c h a e l  J  A  L I NOF F  Go r d o n  Da t a M i n i n g Techniques. New York : John Wiley, 1997 2 G R A W A L  R a k e s h I M I E L I NS KI  T o ma s z  S W A M I  Arun. Mining Associations between Sets of Items in Massive Databases. In Proc. of the ACM-SIGMOD 1993 Int'l Conference on Management of Data, Washington D.C May, 1993 3 A G R A W A L  R a kes h  SR I K A N T  R a m a kr i s hnan   Fas t Algorithms for Mining Association Rules. In Proc. of the 20th Int'l Conference on Very Large Databases, Santiago ile, Sep, 1994 4 CA M A RGO S a n d r o S  ENGEL  P a u l o  M    M i RA BI T Minera 347\343 o de regras de associa 347\343 o em bancos de dados de com 351 rcio varejista de confec 347\343 o. Revista do CCEI. ISSN g 2001 5  S A VA RE S E   A  OM I E CI NS KI  E  NA VA UX S  A n efficient algorithm for mining association rules in large databases. In: Intl. Conference On Very Large Databases 21, 1994 6  Z A KI   M o h a mme d J  P A RT HA S A RA T HY S r i n i v a s a n L I  Wei.  New Algorithms for Fast Discovery of Association Rules. In 3 rd Intl. Conf. On Knowledge Discovery and Data g 1997 7  Z A KI   M o h a mme d J  OGI HA RA  M i t s u n o r i  T h e o r e t i c a l les. 3 rd SIGMOD'98 Workshop on Research Issues in Data Mining and Knowledge Discovery \(DMKD\,  Seattle, WA, Jun 1998 8 C A M A R G O  Sandr o S M i ner a 347\343 o de Regras de Associa 347\343 o no Problema da Cesta de Compras Aplicada ao Com 351 rcio Varejista de Confec 347\343 o. Disserta 347\343 o \(Mestrado em Ci 352 ncia da Computa 347\343 o 226 Instituto de Inform 341 tica Universidade Federal do Rio Grande do Sul, Porto Alegre Proceedings of the XXII International Conference of the Chilean Computer Science Society \(SCCC\22202 1522-4902/02 $17.00 \251 2002 IEEE 


clustering algorithm is also more tolerant to noise compared to traditional clustering algorithms such as k-means because it can explicitly remove the weakly related items 5 Experimental Evaluation r evaluation purposes we have performed our experiments on real data sets obtained from several application domains The characteristics of these data sets are summarized in Table 3 Table 3 Real Data set Characteristics Data set Item Record Avg Length Source Pumsb 2113 49046 74 IBM Almaden S&P 500 932 716 75 Stock Market Retail 14462 57671 8 Retail Store The pumsb data set corresponds to a binary version of a census data set Retail is a masked data set obtained from a large mail-order company In addition the stock market data set contains events representing the price movement of various stocks that belong to the S&P 500 index from January 1994 to October 1996 All experiments were performed on a Sun Ultra 10 workstation with a 440 MHz CPU and 128 Mbytes of memory running the SunOS 5.7 operating system Note that we have implemented hyperclique miner as an extension to the publicly available implementation of the Apriori algorithm by Borgelt http://fuzzy.cs.uni-magdeburg.de 000 borgelt As a result the performance of hyperclique miner is almost equivalent to Apriori when the h-con\223dence threshold is set to zero 5.1 The Pruning Effect of Hyperclique Miner The purpose of this experiment is to demonstrate the effectiveness of the h-con\223dence pruning on hyperclique pattern generation Recently the CHARM algorithm was proposed by Zaki et to ef 223ciently disco v e r frequent closed itemsets As shown in their paper for a dense data set with skewed support distribution such as 000\001\002\003\004  CHARM can achieve relatively better performance than other stateof-the-art pattern mining algorithms such as CLOSET and MAFIA when the support threshold is lo w  Hence we chose CHARM as the baseline to compare against the performance of hyperclique miner on dense data sets even though hyperclique miner and CHARM are actually targeted towards different kinds of patterns Figure 3 shows the number of patterns generated by hyperclique miner and CHARM on the pumsb data set As can be seen the number of patterns discovered by our algorithm is several orders of magnitude smaller than the number of patterns found by CHARM provided that the  100 1000 10000 100000 1e+06 1e+07 1e+08 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 Number of Hyperclique Patterns Minimum Support Thresholds Confidence-Pruning Effect min_conf = 95  min_conf = 90   min_conf = 85   CHARM  Figure 3 The effect of h-con\223dence pruning in terms of the number of patterns generated 10 100 1000 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 Execution Time \(sec Minimum Support Thresholds min_conf = 95  min_conf = 90   min_conf = 85   CHARM  Figure 4 The effect of h-con\223dence pruning in terms of execution time h-con\223dence threshold is suf\223ciently high In addition CHARM has dif\223culties in identifying patterns when the support threshold is less than or equals to 0.4 However our technique identi\223es many strong af\223nity patterns with very low support r instance we obtain a long pattern containing 9 items with the support 0.23 and h-con\223dence 94.2 Recall from Table 1 that nearly 96.6 of the items have support less than 0.4 With a support threshold greater than 0.4 CHARM can only identify associations among a very small fraction of the items Figure 4 shows the relatively performance of hyperclique miner and CHARM on pumsb data set With h-con\223dence pruning we can use hyperclique miner to identify hyperclique patterns even at support threshold equal to zero 5.2 Quality of Hyperclique Patterns Table 4 shows some of the interesting hyperclique patterns extracted from the retail data set r example we identi\223ed a hyperclique pattern involving closely related items such as Nokia battery Nokia adapter and Nokia cell phone We also discovered several interesting patterns containing very low support items such as 001 earrings gold ring bracelet 002  These items are expensive rarely bought by customers and belong to the same product category Proceedings of the Third IEEE Internati onal Conference on Data Mining \(ICDM\22203 0-7695-1978-4/03 $ 17.00 \251 2003 IEEE 


Table 4 Hyperclique Patterns from Retail Hyperclique patterns support h-conf 000 earrings gold ring bracelet 001 0.019 45.8 000 nokia battery nokia adapter nokia cell phone 001 0.049 52.8 000 coffee maker can opener toaster 001 0.014 61.5 000 baby bumper pad diaper stacker baby crib sheet 001 0.028 72.7 000 skirt tub 3pc bath set shower curtain 001 0.26 74.4  0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 20 40 60 80 100 Average Correlation Percentile  Non-hypercliques   Hypercliques  Figure 5 Average Correlation We also evaluated the af\223nity of hyperclique patterns by the correlation measure Speci\223cally for each hyperclique pattern 000 000 000 001 000 002\001 001 002 001\001\001 001 000 002  we calculate the correlation for each pair of items 001 001 001 002\001 002 002 within the pattern The overall correlation of a hyperclique pattern is then de\223ned as the average pair wise correlation Note that this experiment was conducted on Retail data set with the h-con\223dence threshold 0.8 and the support threshold 0.0005 Figure 5 compares the average correlation for hyperclique patterns versus non-hyperclique patterns We sorted the average correlation and displayed them in increasing order Notice that the hyperclique patterns have extremely high average pair wise correlation compared to the nonhyperclique patterns This result supports our previous assertion that hyperclique patterns can identify itemsets that contain only tightly-coupled items 5.3 Hyperclique-based Item Clustering In this section we illustrate the application of hyperclique patterns as an alternative to frequent patterns in hypergraph-based clustering approach W e use the S&P 500 index data set for our clustering experiments Table 5 shows the dramatic increase in the number of frequent patterns as the minimum support threshold is decreased As can be seen the number of frequent patterns increases up to 11,486,914 when we reduce the support threshold to 1 If all these frequent itemsets are used for hypergraph clustering this will create an extremely dense hypergraph and s the hypergraph-based clustering algorithm becomes computationally intractable In the authors have used a higher minimum support threshold i.e 3 for their experiments and obtained 19,602 frequent itemsets covering 440 items A hypergraph consisting of 440 vertices and 19,602 hyperedges was then constructed and 40 partitions were generated Out of 40 partitions 16 of them are clean clusters as they contain stocks primarily from the same or closely related industry groups Table 5 Number of frequent patterns Support No of frequent patterns items covered 3 19602 440 2 149215 734 1 11486914 915 With hyperclique patterns we can construct hypergraphs at any support threshold and thus covering more items r instance with a minimum h-con\223dence threshold 20 and a support threshold 0 we obtain 11,207 hyperclique patterns covering 861 items A hypergraph consisting of 861 vertices and 11,207 hyperedges is then constructed and partitioned into smaller clusters For comparison purposes we partitioned the hypergraph into 80 partitions to ensure that the average size of clusters is almost the same as the average size of the 40 clusters obtained using frequent patterns Note that for both approaches we only use patterns containing two or more items as hyperedges Our experimental results suggest that the hyperclique pattern approach can systematically produce better clustering results than the frequent pattern approach First many items with low levels of support are not included in the frequent pattern approach Speci\223cally there are 421 items covered by hyperclique pattern based clusters that are not covered by frequent pattern based clusters Second the hypergraph clustering algorithm can produce a larger fraction of clean clusters using hyperclique patterns than frequent patterns 204 1 out of 80 partitions versus 16 out of 40 partitions Third all the clean clusters identi\223ed by the frequent pattern approach were also present in the results by the hyperclique pattern approach Finally for the same clean cluster identi\223ed by both approaches there are more same category items included by the hyperclique based approach Table 6 shows some of the clean hyperclique pattern based clusters that appear at low levels of support around 1 support Such clusters could not be identi\223ed by the frequent pattern approach As the table shows our hyperclique pattern approach was able to discover retail chemical  health-product power and communication clusters A complete list of clusters is given n Technical Report We have also applied the graph-partitioning scheme in CLUTO 2  This algorithm takes the adjacency matrix of the similarity graph between the n objects to be clustered as input The experiment results indicate that this approach can produce much worse clustering results than the hypercliquebased approach r instance out of the 80 clusters derived 2 http://www.cs.umn.edu 000 karypis/cluto/index.html Proceedings of the Third IEEE Internati onal Conference on Data Mining \(ICDM\22203 0-7695-1978-4/03 $ 17.00 \251 2003 IEEE 


Table 6 Some clean clusters No Discovered Clusters Industry Group 1 Becton Dickinso 000  Emerson Electric 000 AmerHome Product 000  Johnson  Johnson 000  Merck 000  P\223zer 000  Schering-Plough 000  Warner-Lambert 000 health product 2 duPont EI deNemo 001  Goodrich B.F 001  Nalco Chemical 001  Rohm  Haas 001  Avon Products 001 chemical 3 Federated Dept 001 GapInc 001  Nordstrom Inc 001 PepBoysMan 001  Sears 001 TJX 001 Walmart 001 Retail 4 Bell Atlantic Co 001  BellSouth Corp 001 CPCIntl 001  GTE Corp 001  Ameritech Corp 001  NYNEX Corp 001  Paci\223c Telesis 001  SBC Communication 001 USWest Communication 001 Comm 5 Baltimore Gas 000  CINergy Corp 000  Amer Electric Power 000  Duke ower 000  Consolidated Edi 000  Entergy Corp 000 Genl Public Util 000  Houston Indus 000  PECO Energy 000 Texas Utilities 000 Power by CLUTO less than 30 of them are clean clusters This result is not surprising since the graph-partitioning scheme considers only information about pairs of items but not higher order interactions In addition we also applied the improved version of the k-means clustering algorithm in CLUTO When using cosine as the similarity measure we were able to identify 36 clean clusters out of 80 clusters which is worse than the hyperclique pattern approach Finally we observed the following effects of the hyperclique-based clustering approach If we set the minimum support threshold to 0 and h-con\223dence threshold to 20 the discovered hyperclique patterns cover 861 items Since there are 932 items in total the hyperclique pattern mining algorithm must have eliminated 71 items We amine the distribution of these 71 items in the CLUTO means clustering results We observe that 68 of the items are assigned to the wrong clusters by CLUTO As a result we believe that the items not covered by these hyperclique patterns are potentially noise items 6 Conclusions In this paper e formalized the problem of mining perclique patterns in data sets with skewed support distribution We also introduced the concept of cross-support property and showed how this property can be used to avoid generating spurious patterns involving items from different support levels Furthermore a ew algorithm called hyperclique miner was eveloped This algorithm utilizes crosssupport and anti-monotone properties of h-con\223dence for the ef\223cient discovery of hyperclique patterns Finally we demonstrated applications of hyperclique patterns for discovering strong af\223nity patterns among low-support items and for hyperclique-based item clustering For future work there is a potential for using the hyperclique concept in a variety of applications such as dimensionality reduction copy detection and collaborative 223ltering Also it is valuable to exploit the 000\001 002\003\003 003\004\005\005\002\001 006 property on some other interestingness measures Acknowledgments This work was partially supported by NASA grant  NCC 2 1231 NSF grant  ACI-9982274 DOE contract  DOE/LLNL W-7045-ENG-48 and by Army High Performance Computing Research Center contract number DAAD19-01-2-0014 Also we would like to thank Dr Mohammed J Zaki for providing us the CHARM code and Dr Johannes Gehrke for providing us the MAFIA code Finally we would like to thank Dr Shashi Shekhar Dr Ke Wang and Mr Michael Steinbach for valuable comments References  R Agra w a l T  Imielinski and A  S w a mi Mining association rules between sets of items in large databases In Proc of the M SIGMOD  pages 207\205216 May 1993  R Agra w a l and R Srikant F ast algorithms for mining association rules In Proc of the 20th VLDB  1994  R J Bayardo Ef 223ciently mining long patterns from databases In Proc of the M SIGMOD  1998  S Brin R Motw ani and C Silv erstein Be yond mark et baskets Generalizing assoc iation rules to correlations In Proc of the M SIGMOD  pages 265\205276 1997  D Burdick M Calimlim a nd J Gehrke Ma\223a A m aximal frequent itemset algorithm for transactional databases In Proc of the ICDE  2001  E Cohen M Datar  S  Fujiw ara A Gionis P  Indyk R Motwani J Ullman and C Yang Finding interesting associations without support pruning In ICDE  2000  E Han G Karypis and V  K umar  H yper graph based clustering in high-dimensional data sets A summary of results Bulletin of the chnical Committee on Data Engineering  21\(1 March 1998  T  Hastie R  T ibshirani a nd J Friedman The Elements of Statistical Learning Data Mining Inference and Prediction  Springer 2001  A Jain and R  Dubes Algorithms for Clustering Data Prentice Hall 1998  E Omiecinski A lternati v e i nterest measures for mining associations In IEEE TKDE  Jan/Feb 2003  J Pei J Han and R  M ao C loset An ef 223cient algorithm for mining frequent closed itemsets In DMKD  May 2000  C J V  Rijsber gen Information Retrieval 2nd Edition  Butterworths London 1979  P  T a n V  K u mar  and J Sri v asta v a  Selecting the right inter estingness measure for association patterns In Proc of the Eighth M SIGKDD  2002  K W a ng Y  He D Cheung and Y  Chin Mining con\223dent rules without support requirement In M CIKM  2001  H Xiong P  T a n and V  K umar  M ining h yperclique patterns with con\223dence pruning In chnical Report 03-006 Computer Science Univ f Minnesota  Jan 2003  M Zaki and C.-J Hsiao Charm An ef 223cient algorithm for closed itemset mining In Proc of the 2nd SDM  2002 Proceedings of the Third IEEE Internati onal Conference on Data Mining \(ICDM\22203 0-7695-1978-4/03 $ 17.00 \251 2003 IEEE 


of the query expression without ha ving the global view of the in ten tion There is a big c hance that the enco ded pro cedure ma y not b e the b est w a y to compute the rules dep ending on the database instance F urthermore as w e understand it their prop osals require p oten tially large n um ber of name generation for relations and attributes The names that are needed are usually database dep enden t and th us p ossibly cannot b e gathered at query time An additional pro cess needs to b e completed to gather those v ariables b efore actual computations can b egin 5  9 Optimization Issues While it w as in tellectually c hallenging to dev elop a declarativ e expression for asso ciation rule mining from deductiv e databases there are sev eral op en issues with great promises for resolution In the w orst case the least xp oin tneedsto generate n 2 tuples in the rst pass alone when the database size is n  Theoretically  this can happ en only when eac h transaction in the database pro duces an in tersection no de and when they are not related b y subset-sup erset relationship In the second pass w e need to do n 4 computations and so on The question no w is can w e a v oid generating and p erhaps scanning some of these com binations as they will not lead to useful in tersections F or example the no de b 0 3 in gure 11 is redundan t A signican t dierence with apriori lik e systems is that our system generates all the item sets top do wn in the lattice without taking their candidacy as a large item set in to consideration Apriori on the other hand do es not generate an y no de if their subsets are not large item sets themselv es and thereb y prunes a large set of no des Optimization tec hniques that exploit this so called an ti-monotonicit y prop ert y of item set lattices similar to apriori could mak e all the dierence in our setup The k ey issue w ould b e ho ww e push the selection threshold minim um supp ort inside the top do wn computation of the no des in the lattice in our metho d F or the momen t and for the sak e of this discussion let us consider a higher supp ort threshold of 60 for the database T of gure 9 No w the l-en v elop e will b e the one sho wn in ligh ter dashed lines in gure 11 and the no des under this line will b e the large item sets Notice that no ww eha v eto discard no des ad 2 0 and d 0 2 to o This raises the question is it p ossible to utilize the supp ort and condence thresholds pro vided in the query and prune candidates for in tersection an y further Ideas similar to magic sets transformation 3  24 ma y be b orro w ed to address this issue The only problem is that pruning of an y no de dep ends on its supp ort coun t whic h ma y come at a later stage By then all no des ma y already ha v e b een computed and th us pushing selection conditions inside aggregate op erator ma y b ecome non-trivial Sp ecial data structures and indexes ma y also aid in dev eloping faster metho ds to compute ecien t interse ction joins that w e ha v e utilized in this pap er W e lea v e these questions as op en issues that should be tak en up in the future F ortunately though there has been a v ast b o dy of researc h in optimizing Datalog programs including recursiv e programs suc h as the one w e ha v e used in this pap er and hence the new questions and researc h 5 Recall that their prop osal requires one to express the mining problem to the system using sev eral queries and up date statemen ts that utilizes information ab out the database con ten ts to ac hiev e its functionalit y  c hallenges that this prop osal raises for declarativ e mining ma y exploit some of these adv ances Needless to emphasize a declarativ e metho d preferably a formal one is desirable b ecause once w e understand the functioning of the system w e will then be able to select appropriate pro cedures dep ending on the instances to compute the seman tics of the program whic hw e kno wis in tended once w e establish the equiv alence of declarativ e and pro cedural seman tics of the system F ortunately  w e ha v e n umerous pro cedural metho ds for computing asso ciation rules whic h complemen t eac h other in terms of sp eed and database instances In fact that is what declarativ e systems or declarativit y buy us  a c hoice for the most ecien t and accurate pro cessing p ossible 10 Conclusion Our primary goal for this pap er has b een to demonstrate that mining asso ciation rules from an y rst-order kno wledge base is p ossible in a declarativ ew a y  without help from an y sp ecial to ols or mac hinery  and that w e can no wha v ea v ery in tuitiv e and simple program to do so W eha v esho wn that it is indeed p ossible to mine declarativ ekno wledge b y exploiting the existing mac hinery supp orted b ycon temp orary inference engines in programming languages e.g Prolog or kno wledge base systems e.g RelationLog XSB LD L  CORAL All w e require is that the engine b e able to supp ort set v alued terms grouping aggregate functions and set relational op erators for comparison functionalities whic hmostofthesesystemscurren tly supp ort W e ha v e also demonstrated that our formalism is grounded on a more mathematical foundation with formal prop erties on whic h the seman tics of the R ULES system rely  W e ha v e also raised sev eral op en issues related to eciency and query optimization whic h should b e our next order of business As future researc h w e plan to dev elop optimization tec hniques for mining queries that require non-trivial lo ok ahead and pruning tec hniques in aggregate functions The dev elopmen ts presen ted here also ha v e other signican t implications F or example it is no w p ossible to compute c hi square rules 4 using the building blo c ks pro vided b y our system Declarativ e computation of c hi square rules to our kno wledge has nev er b een attempted for the man y pro cedural concepts the computation of c hi square metho d relies on In a separate w ork 2 w e sho w that the coun ting metho d prop osed in this pap er can be eectiv ely utilized to generate the exp ectations needed in order to compute suc h rules rather easily  These are some of the issues w e plan to address in the near future The motiv ation imp ortance and the need for in tegrating data mining tec hnology with relational databases has b een addressed in sev eral articles suc h as 12  13 They con vincingly argue that without suc h in tegration data mining tec hnology ma y not nd itself in a viable p osition in the y ears to come T o b e a successful and feasible to ol for the analysis of business data in relational databases suc htec hnology m ust b e made a v ailable as part of database engines and as part of its declarativ e query language Our prop osal for declarativ e mining bears merit since it sheds ligh t on ho w rst order databases can be mined in a declarativ e and pro cedure indep enden t w a y so that the optimization issues can b e delegated to the underlying database engine Once suc h argumen ts are accepted sev eral systems 9 


related issues b ecome prime candidates for immediate atten tion F or example traditionally database systems supp orted declarativ e querying without the necessit y to care ab out the pro ceduralit y of the queries In this pap er w eha v e actually demonstrated that asso ciation rule mining can b e view ed as a Datalog query  It is immediate that a direct mapping from the Datalog expressions presen ted in this pap er to SQL can be dev elop ed with no problem at all W e can then rely on ecien t database pro cessing of the query in an optimized fashion Hence w ecomeclose to the essence of the visions expressed b y the leading database researc hers and practioners 12  References 1 Rak esh Agra w al and Ramakrishnan Srik an t F ast algorithms for mining asso ciation rules in large databases In VLDB  pages 487{499 1994 2 Anon ymous A declarativ e metho d for mining c hisquare rules from deductiv e databases T ec hnical rep ort Departmen t of Computer Science Anon ymous Univ ersit y USA F ebruary 2001 3 C Beeri and R Ramakrishnan On the po w er of magic In Pr o c e e dings of the 6th A CM Symp osium on Principles of Datab ase Systems  pages 269{283 1987 4 Sergey Brin Ra jeev Mot w ani and Craig Silv erstein Bey ond mark et bask ets Generalizing asso ciation rules to correlations In Pr o c A CM SIGMOD  pages 265 276 1997 5 D Chimen ti et al The LD L system protot yp e IEEE Journal on Data and Know le dge Engine ering  2\(1 90 1990 6 Jia w ei Han Jian P ei and Yiw en Yin Mining frequen t patterns without candidate generation In Pr o c A CM SIGMOD  pages 1{12 2000 7 Marcel Holsheimer Martin L Kersten Heikki Mannila and Hann uT oiv onen A p ersp ectiv e on databases and data mining In Pr o c of the sixth A CM SIGKDD Intl Conf  pages 150{155 Mon treal Queb ec 1995 8 Flip Korn Alexandros Labrinidis Y annis Kotidis and Christos F aloutsos Ratio rules A new paradigm for fast quan tiable data mining In Pr o c of 24th VLDB  pages 582{593 1998 9 Brian Len t Arun N Sw ami and Jennifer Widom Clustering asso ciation rules In Pr o c of the 3th ICDE  pages 220{231 1997 10 Mengc hi Liu Relationlog At yp ed extension to datalog with sets and tuples In John Llo yd editor Pr oc e e dings of the 12th International L o gic Pr o gr amming Symp osium  pages 83{97 P ortland Oregon Decem ber 1995 MIT Press 11 Rosa Meo Giusepp e Psaila and Stefano Ceri An extension to SQL for mining asso ciation rules Data Mining and Know le dge Disc overy  2\(2 1998 12 Amir Netz Sura jit Chaudh uri Je Bernhardt and Usama M F a yy ad In tegration of data mining with database tec hnology  In Pr o c e e dings of 26th VLDB  pages 719{722 2000 13 Amir Netz Sura jit Chaudh uri Usama M F a yy ad and Je Bernhardt In tegrating data mining with SQL databases In IEEE ICDE  2001 14 Ra ymond T Ng Laks V S Lakshmanan Jia w ei Han and Alex P ang Exploratory mining and pruning optimizations of constrained asso ciation rules In Pr o c A CM SIGMOD  pages 13{24 1998 15 Jong So o P ark Ming-Sy an Chen and Philip S Y u An eectiv e hash based algorithm for mining asso ciation rules In Pr o c A CM SIGMOD  pages 175{186 1995 16 Karthic k Ra jamani Alan Co x Bala Iy er and A tul Chadha Ecien t mining for asso ciation rules with relational database systems In Pr o c e e dings of the International Datab ase Engine ering and Applic ations Symp osium  pages 148{155 1999 17 R Ramakrishnan D Sriv asta v a and S Sudarshan CORAL  Con trol Relations and Logic In Pr o c of 18th VLDB Confer enc e  pages 238{250 1992 18 Konstan tinos F Sagonas T errance Swift and Da vid Scott W arren XSB as an ecien t deductiv e database engine In Pr o c of the A CM SIGMOD Intl Conf  pages 442{453 1994 19 Sunita Sara w agi Shib y Thomas and Rak esh Agra w al In tegrating mining with relational database systems Alternativ es and implications In Pr o c A CM SIGMOD  pages 343{354 1998 20 Ashok a Sa v asere Edw ard Omiecinski and Shamk an tB Nav athe An ecien t algorithm for mining asso ciation rules in large databases In Pr o c of 21th VLDB  pages 432{444 1995 21 Pradeep Sheno y  Ja y an t R Haritsa S Sudarshan Gaura v Bhalotia Ma y ank Ba w a and Dev a vrat Shah T urb o-c harging v ertical mining of large databases In A CM SIGMOD  pages 22{33 2000 22 Abraham Silb ersc hatz Henry F Korth and S Sudarshan Datab ase System Conc epts  McGra w-Hill third edition 1996 23 Shib y Thomas and Sunita Sara w agi Mining generalized asso ciation rules and sequen tial patterns using SQL queries In KDD  pages 344{348 1998 24 J D Ullman Principles of Datab ase and Know le dgeb ase Systems Part I II  Computer Science Press 1988 25 Mohammed J Zaki Generating non-redundan t association rules In Pr o c of the 6th A CM SIGKDD Intl Conf  Boston MA August 2000 1 0 


OM OM 006 OD8 01 012 014 016 018 02 022 False alarm demity Figure 9 Percentage of tracks lost within 200 seconds using three-scan assignment with PD  0.9 TI  O.ls Figure 11 T2  1.9s and T  Is ij  20 and 0  0.1 24 1 22  20  E fls 0  8l 16 0 n 14  12  0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 T1/12 PD Average track life of three-scan assignment with PD varying TI  0-ls T2  1.9s T  Is X  0.02 ij LO and   0.1 mareuvenng index Figure 12 Percentage of lost tracks of 4-D assipment in 200 seconds with maneuvering index varying X  0.01 Ti  0.1 T2  1.9s and T  IS PD  0.98 Figure 10 Percentage of lost tracks of 4-D assignment in 200 SeoDllCls with TI and T2 varying PD  0.98 X  0.02 q 20 and 0  0.1 4-1607 


Figure 13 Average gate size for Kalman filter Figure is relative as compared to nq and curves are parametrized by ij/r with unit-time between each pair of samples 1.2 Iy I 1.1 0.5 I A CRLB for he unifm samiina I  0.4 0.35 d 3 03 i7 3 0.25 0 0.M 0.04 0.06 008 0.1 0.12 0.14 0.16 0.18 0.2 False A!am DemW V I    Figure 14 CramerRao Lower Boundfor Mean Square Error of uniform and nonuniform sampling schemes with Ti  O.ls T2  1.9s T  IS PD  0.9 ij  5 and U  0.25 1 unifon sampling r-ls ked i non-uniform sampling loge inlewi I ti non-uniform sampling shod interva I 0.9 0.8 I Figure 15 MSE comparison of three-scan assignment with Ti and T2 varying I'D  1 X  0.01 ij  20 and U  0.1 4-1608 


Plenary Panel Session 30 XML Databases   Moderator: Michael Carey, IBM Almaden Research Center USA Panelists Adam Bosworth, Microsoft Corporation USA David De Witt University of Wisconsin-Madison, USA Alon Levy University of Washington USA Bruce Lindsay IBM Almaden Research Center USA Jennifer Widom Stanford University USA Demo Session 1 Web Query Optimizer  661 V Zadorozhny L Bright L Raschid T Urhan and M Vidal ReQueSS: Relational Querying of Semi-structured Data  664 R Sunderraman The IDEAL Approach to Internet-Based Negotiation for E-Business  666 J Hammer C Huang Y Huang C Pluempitiwiriyawej M Lee H Li L Wang Y Liu and S Su READY A High Performance Event Notification Service  668 R Gruber B Krishnamurthy, and E Panagos A Multimedia Information Server with Mixed Workload Scheduling  670 G Nerjes DISIMA An Object-Oriented Approach to Developing an Image Database System  672 V Oria T Ozsu P Iglinski B Xu and L Cheng Demo Session 2 The Collaboration Management Infrastructure  677 H Schuster D Baker A Cichocki D Georgakopoulos and M Rusinkiewicz Assisting the Integration of Taxonomic Data The LITCHI Toolkit  679 I Sutherland J Robinson S Brandt A Jones S Embury W Gray R White and F Bisby TheaterLoc: Using Information Integration Technology to Rapidly Build Virtual Applications  681 G. Barish Y.4 Chen D Dipasquo, C Knoblock S Minton I Muslea and C Shahabi Lineage Tracing in a Data Warehousing System  683 Y Cui and J Widom xiii 


The Mentor-Lite Prototype A Light-Weight Workflow Management System  685 J Weissenfels M Gillmann 0 Roth, G Shegalov and W Wonner Location Prediction and Queries for Tracking Moving Objects  687 0 Wolfson B Xu and S Chamberlain Semiorder Database for Complex Activity Recognition in Multi-Sensory Environments  689 S Bhonsle A Gupta S Santini and R Jain Tutorial 1 Web Information Retrieval  693 M Henzinger Tutorial 2 Mobile and Wireless Database Access for Pervasive Computing  694 P Chrysanthis and E Pitoura Tutorial 3 Data Mining with Decision Trees  696 J Gehrke Tutorial 4 Directories Managing Data for Networked Applications  697 D Srivastava Tutorial 5 Indexing High-Dimensional Spaces Database Support for Next Decade\222s Applications  698 S Berchtold and D Keim xiv 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


