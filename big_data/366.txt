A Tool for Extracting XML Association Rules Daniele Bragal Alessandro Campil Stefano Ceri1, Mika Klemettinen2 Pier Luca Lanzi 2Nokia Research Center Nokia Group P.O.Box 407 FIN-00045 Nokia Group Finland mika.klemettinen@nokia.corn 1 Dipartimento di E1ettronica e Informazione Po1itecnico di Milano P.zza Leonardo da Vinci 1-20133 Mi1ano Italy braga,campi,ceri,lanzi}@elet.polimi.it Abstract The recent success of XML as a standard to represent 
semi-structured data and the increasing amount of available XML data pose new challenges to the data mining community In this paper we present the X MINE operator a tool we developed to extract XML association rules for XML documents The operator that is based on XPath and inspired by the syntax ofXQuery allows us to express complex mining tasks compactly and intuitively X MINE can be used to specify indifferently and simultaneously mining tasks both on the content and on the structure of the data since the distinction in XML is slight 
changed among data mining tools e.g PMML but there are no significant extensions of data mining research taking full advantage of the intrinsic properties of XML However it is easy to foresee that the spreading of XML will cause an increasing interest on this subject going beyond a mere syntactic adaptation to XML of data mining artifacts and techniques In this paper we present the X MINE operator a tool that can be used to extract association rules from native XML documents shortly XML association rules which we first introduced in 6 The paper is organized as follows In 
Section 2 we overview association rules in the context of relational databases. In Section 3 we shortly discuss the notion of association rules for XML while we refer the readers to 6 for additional details about the their theoretical foundations In Section 4 we present the X MINE operator through a serie of intuitive examples In Section 5 we introduce some basic concepts needed to discuss implementation details In Section 6 we discuss how XML association rules are extracted from an XML document through XMINE by composing an execution environment for XPath expres 
sions and an algorithm for discovering frequent itemsets In Section 7 we give some implementation details discussing the current state of the prototype we developed and an outline of the planned future development We conclude the paper with a discussion of future research directions 1. Introduction Knowledge discovery in databases KDD deals with the process of extracting interesting knowledge from large amounts of data usually stored in large relational databases. Knowledge can be represented in many different ways clusters decision trees, decision rules etc Among 
the others association rules proved effective in discovering interesting relations in massive amounts of relational data The recent years have seen the dramatic development of the eXtensible Markup Language XML as a major standard for storing and exchanging information XML enables the self-description of hierarchies of semi-structured information by intermixing data content with semantic tags which describe such content At the moment the use of XML within the data mining community is still quite limited there are some proposals to exploit the XML syntax to express interfaces to knowledge representation artifacts 
including association rules so that they can be easily ex.Artificial Intelligence and Robotics Laboratory AirLab http://airlab.elet.polimi.it 2. Relational Association Rules Association rules are implications of the form X  y where the rule body X and the rule head y are subsets of the set 1 of items 1  1\, ...,In  within a set of transactions 1 The rule X  y states that the transactions T E 1 which contain the items in X X C T are likely to contain also the items in y y C T Association rules are charac 
terized by two measures the support which measures the 57 0-7695-1849-4/02 17.00 2002 IEEE Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence \(ICTAI\22202 1082-3409/02 $17.00 \251 2002 IEEE 


b Figure 1 An example of source data a and association rules generated from the data b percentage of transactions that contain both items X and Y the confidence which measures the percentage of transactions that contain the items y within the transactions that also contain the items in X More formally given the functionfreq\(X V denoting the percentage of transactions in V which contains X we define support\(X r  freq\(X u r V confidence\(X =} r  freq\(X u r V\/ freq\(X , V  DEPARTMENT PhDCourses Courseteacher='fpl title='Advanced  TimeTable>...</TimeTable Student ref='psl  Student ref='ps2  Course Course teacher='fp3 title='XML  TimeTable TimeTable Student ref='ps2  Student ref='ps3  Course PhDCourses People PhDStudent id='ps2 advisor-'fp3 PersonalInfo email='fp3@atlantis.edu Name Name IPersonallnfo Subscription year='200l  Publications Publications PhDStudent FullProfessor id='fp3 Personallnfo email='fp3@atlantis.edu Name Name IPersonalInfo Publications Article title='Golden Data Mines Author Author Conference name='VLDB year='200l  Article Article title='P=NP The Final Chapter Author Author Journal year='2000 month='4 volume2'4 namez'DMKD publisher='Kluwer I Article Book yearz'200l title='XML  Author Author Publisher Publisher Keyword>XML</Keyword Keyword>XQuery</Keyword Book Ipublications Award yearz'200l societyz'IEEE IAward IFullProfessor People IDEPARTMENT Suppose there is an association rule bread, butter  milk with confidence 0.9 and support 0.05 The rule states that customers who buy bread and butter also buy milk in 90 of the cases and that this rule holds in 5 of the transactions The problem of mining association rules consists of finding all the association rules from a set of transactions 1 that have support and confidence greater than the two defined thresholds the minimum support minsupp and the minimum confidence mincon.f Association rules assume a relational representation of data e.g in which the transactions T E 1 correspond to tuples while the items I E I correspond to binary attributes For instance a rather typical although simple example of source data is depicted in Figure l\(a The attributes A B C represent the set of items I the tuples represent the transactions in particular the first tuple 1,0,0 represents a transaction with only the item A the last tuple 0 1, 1 represents a transaction with both the items B and C Some association rules extracted from the data in Figure l\(a are shown in Figure l\(b For instance the first rule A  B states that in 25 of the tuples item A and item B appear together and that the 33 of tuples which contain A contain also B To support the specification of complex association rule mining tasks a number of query languages have been proposed In particular introduced the MINE RULE operator an extension of SQL specifically designed for modeling the problem of mining association rules from relational data Figure 2 A sample document containing variolJs information about the research activities of a university department http://www.atlantis.edu/research.xml 3 Association Rules for XML Documents In this section we overview the basic concepts of association rules for XML documents shortly XML association rules 6 we refer the interest reader to 6 for further details Let us consider the XML document depicted in Figure 2 where various information about a department are represented e.g the available Ph.D courses identified by the tag PhDCourse and the peopie in the department People These can be either students PhDStudent or professors FullProfessor  For each of them some personal information are stored Personallnfo  as well as the list of works published 58 Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence \(ICTAI\22202 1082-3409/02 $17.00 \251 2002 IEEE 


 DEPARTMENT  Publications  e.g books Book> \journal papers or conference papers Article  Consider the problem of mining frequent associations among people that appear as coauthors in the publications represented in the document research xml in Figure 2 In practice we are interested in finding associations of the form Wilson Holmes which states that in the department the papers which are authored by Wilson are also likely to have Holmes as author Since any part of an XML document is a tree usually called XMLfragment both 1 and I are collections of trees In particular the transactions T E 1 are the XML fragments that define the context in which the items I E I must be counted the items I E I are the fragments that must be counted If we consider the problem of mining association rules among authors appearing in the same papers we have that 1 are the set of trees i.e fragments of all the publications authored by people within the department The items I E I are lhe sel of fragments of all the authors who appear in the works published by people within the department This situation is depicted in Figure 3 where an example of the research xml document is represented The overall document is represented by the grey triangle The white triangles represent the fragments corresponding to the various publications authored by people of the department The black triangles represent the fragments corresponding to the authors who appear in various publications Note that the value of the Author tag is depicted at the bottom of the black triangle thus a black triangle labeled Wilson is equivalent to the XML fragment Author>Wilson</Author While the value of a white triangle corresponding to a <Book> lag or lo a <Article lags represents an entire XML fragment which corresponds to a book or to an article e.g ch-ic c vc c c   y c      AIt-I     k>k Hol~1 I  I   Stolzmann..A Wolson Figure 3 A graphical representation ot the XIML document described in Figure 2 appear together in two white triangles out of four i.e in 50 of the cases. Likewise,!req Wilson},'D is 0.75 since the fragment Author>Wilson</Author appears in three white triangles out of four i.e in 75 of the cases. Therefore we can now compute the confidence of the XML association rule Wilson Holmes as freq Wilson Holmes 1 freq\(wil-;:0~}:tjj which returns 0.66 i.e in 66 of papers published by Wilson appears also Holmes or in the XML context in 66 of the fragments in 1 in which appears the fragment Author>Wilson</Author appears also the fragment Author>Holmes</Author While the support of the association rule is computed as Article title="Classifier Fitness  Author>Wilson<IAuthor Journal year="1995 month="4 volume="4 name="Evolutionary Computation publisher="MIT Press 1 Article freq\({Wilson,Holmes},V In the example in Figure 3 1 contains the four white triangles and I contains the the three black triangles corresponding to the authors Holmes Stolzmann and Wilson While an itemset X C I is a set containing black triangles It is now possible to compute freq\(X 1 as the percentage of XML fragments in 1 which contains the fragments in X In particular freq\(X 1 is computed as the percentage of white triangles which contain all the black triangles in X Thus in the example depicted in Figure 3,freq\({Wilson,Holmes},1 is 0.5 since the fragments Author>Wilson</Author and Author>Holmes<Author which returns 0.5 since Author>Wilson</Author appears together with Author>Holmes</Author in two white triangles out of four i.e in 50 of the cases 4. The X MINE Operator We devised X MINE operator as a tool to specify complex association rule mining tasks in XML documents 59 7 rc ccclVc   c  C c cl c c c   c c c Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence \(ICTAI\22202 1082-3409/02 $17.00 \251 2002 IEEE 


clauses SUPPORT=O .1 and CONFIDENCE=O .2 The final RETURN specifies the structure of the association ru]es produced An association rule is defined by a RULE tag with two attributes support and confidence which specify the support and confidence values and two subelements BODY> and <HEAD>, which specify the items in the rule body and in the rule head Some of the rules produced by the above statement on the data depicted in Figure 2 are the following X MINE allows the specification of complex mining task compactly and intuitively and puts in evidence the most relevant semantic features of the problem XMINE is based on XPath inspired to the syntax of XQuery and to the work on MINE RULE in the context of relational databases Following the approach of we present X MINE through a set of examples additional examples as well as the X MINE formal syntax and the theoretical foundations ofXML association rules can be found in 6 Example I In this first example we consider the problem of mining frequent associations among people who appear as coauthors see Section 2 With X MINE we formulate this task with the following statement RULE support="O.25 confidence="O.33 BODY Item Author>Holmes<IAuthor lItem IBODY HE.W Item Author>Stolzmann<IAuthor lItem IHEAD IRULE XMINE RULE IN document nwww.atlantis.edu/research.xml FOR ROOT IN People/*/Publications LET BODY  ROOT/Author HEAD  ROOT/Author EXTRACTING RULES WITH SUPPORT  0.1 AND CONFIDENCE  0.2 RETURN RULE support SUPPORT 1 confidence CONFIDENCE 1 BODY  FOR item IN BODY RETURN Item  Item 1 Item 1 RULE support="0.2S confidence="O.SO BODY Item Author>Stolzmann<IAuthor lItem Item Author>Wilson<IAuthor lItem IBODY HEAD Item Author>Holmes<IAuthor lItem IHEAD IRULE BODY HEAD FOR item IN HEAD RETURN Item  Item Item  HEAD RULE The statement begins with the IN clause which specifies the data source i.e the document found at the URL http://www.atlantis.com/research.xml In the FOR section the special variable ROOT specifies the fragments which represent the transactions T E ID by means of one \(or more XPath expressions In the example in Figure 3 ROOT identifies the white triangles The next two special variables BODY and HEAD, identify the fragments in the source data which should appear respectively in the rule body and in the rule head i.e the set of items I E I Note that both BODY and HEAD are defined with respect to the context i.e to the ROOT variable since confidence and support values have meaning only with respect to the context defined by the ROOT \(i.e the set of transactions ID More specifical\\y BODY and HEAD are defined as Author elements appearing in some Publications Since the Author element appears both in articles and in books Author is specified as a subelement of Publications The EXTRACTING RULES WITH clause specifies constraints on the resulting rules In the above statements these constraints are very simple since they only specifies the minimum support and the minimum confidence values for the output association rules with the Where the latter RULE fragment represents the rule with Author>Stolzmann</Author and Author>Wilson</Author as body and Author>Holmes</Author as head the rule has support 0.25 and confidence 0.5 Note that in the remaining we will omit the RETURN clause from the examples since the one discussed above can be applied to all of them In addition X MINE assumes that whenever RETURN is missing the output association rules will be produced according to the PMML 2.0 specification  Example 2 In the second example we require that at least one of the authors in the body of the generated rules is a member of the department This means that an additional constraint must be added to the EXTRACTING RULES WITH clause used in the previous example In particular we add an XQuery predicate requiring that at least one of the authors names denoted by the a variable be contained in the Personal Info element denoting the members of the department In addition we add a filtering condition with an appropriate WHERE clause so to restrict the source data to the publications printed in 200 1. The resulting statement is the following XMINE RULE IN document\("www.atlantis.edu/research.xml FOR ROOT IN People/./Publications LET BODY  P,OOT/Author 60 Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence \(ICTAI\22202 1082-3409/02 $17.00 \251 2002 IEEE 


ROOT/Publications/Article/Journal/@publisher ROOT/Publications/Article/Conference/@name HEAD  ROOT/Award/@society EXTRACTING RULES WITH SUPPORT  0.1 AND CONFIDENCE  0.2 HEAD  ROOT/Author WHERE ROOT//@year  2001 EXTRACTING RULES WITH SUPPORT  0.1 AND CONFIDENCE  0.2 AND SOME a IN BODY SATISFIES not\(empty\(//People/*/PersonalInfo/Name[=$a Example 5 In XML there is a slight distinction between the document data and the document structure Accordingly with XMINE we can intermix data and structural information in the same mining task As an example consider the problem of discovering which kinds of awards may influence the career i.e best correlates with the specific position of the members of the department This mining task can be expressed through the following statement The WHERE clause has an obvious side effect on the generated rules since all the publications that do not satisfy the condition are pruned before rule generation Therefore the resulting context is a subset of the previous one and both support and confidence take different values Note that the WHERE clause is just a filtering condition not a constraints This means that the WHERE clause must be considered before the association rules are generated Example 3 So far we presented rules in which the head and body fragment sets are defined by the same path expressions and thus pertain to the same domain The next example shows instead rules mining collaborations extracting authors when they publish papers on the same topic This means that the rule HEAD will be extracted from the Author elements and the rule BODY from the Keyword elements A proper association between authors and keywords imposes that the ROOT be set as /People Publications all publications X MINE RULE IN document\(.www.atlantis.edu/research.xml FOR ROOT IN People LET BODY  ROOT/Award/@society HEAD  ROOT/name EXTRACTING RULES WITH SUPPORT  0.1 AND CONFIDENCE  0.2 Note that the the positions covered by the members are expressed as different tagnames that are related to the document structure and not as regular data In order to compactly denote all career of a Department's member the HEAD definition exploits the XPath name step that extract the tagname of the items to which it is applied This feature is particularly relevant when the mining activity is addressed arbitrary tags in arbitrary positions e.g when documents describe the same application domain with different Dills Additional Features There are other features of X MINE that are not discussed here Probably the most relevant is the GROUP BY clause that can be use to restructure the source data when these do not allow the specification of adequate rule context We refer the reader to 6 5 for further details X MINE RULE IN document\(nwww.atlantis.edu/research.xmln FOR ROOT IN People/*/Publications LET BODY  ROOT/Author HEAD  ROOT/Keyword EXTRACTING RULES WITH SUPPORT  0.1 AND CONFIDENCE  0.2 AND count BODY  2 5. Support and Confidence for XML Association Rules Since the intrinsic meaning of the task is to find collaborations an obvious restriction to the generated rules is that they should contain at least two authors in the body and this is expressed by the generic XQuery predicate count BODY\>=2, in addition to predicates defining the minimum support and confidence Example 4 The next example shows the use of several path expressions We want to discover the associations between publications and awards looking for which type of publication is mostly related to which kind of award Since the publishers are represented as attributes in Journal elements and as PCDATA content in Books while the conterence types are stored as name attributes the BODY fragment set is the set union of the nodes which three different path expressions evaluate to Before we can discuss how the first prototype of X MINE has been implemented we must define how the support and the confidence values of an XML association rule are computed Let XR be the set of XPath expressions specified in the ROOT section XB be the set of XPath expressions specified in the BODY section XH be the set of XPath expressions specified in the HEAD section XI be XB UXH In particular let us focus on the simple case in which the BODY and the HEAD sections have identical sets of XPath expressions XI  XB XH as in the initial examples in Section 4 Let value be a function that given an XPath expression p and an XML document d returns the set of XML fragments XMINE RULE IN document\("www.atlantis.edu/research.xml FOR ROOT IN People LET BODY  ROOT/Publications/Book/Publisher 61 Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence \(ICTAI\22202 1082-3409/02 $17.00 \251 2002 IEEE 


in d identified by p Let satisfy be a function that given an XML fragment f and an XQuery where clause w returns one if f satisfies w zero otherwise Let contains be a function that given an XML fragment x and an XML fragment y, returns one if x contains y, zero otherwise First we compute the set F'D as the collection of all the XML fragments defined by the XPath expressions in XR, more formally overall process is illustrated in Figure 4 In the initial preprocessing step illustrated in Figure 4 with arrows from 1 to 4 the X MINE statement is processed to generate a representation of the XML mining problem as a relational table R which can subsequently elaborated by a known association rule mining algorithm Then in the following mining step association rules are extracted from R; during this phase the constraints specified in the EXTRACTING RULES clause are exploited by the mining algorithm Figure 4 arrow labeled 5 In the final post processing step the association rules extracted from relation R are finally mapped into the XML representation Figure 4 arrow labeled 6  F'1 U value\(p,d pEXR Likewise we compute the set F I as the collection of XML fragments that are defined by the XPath expressions in XI Preprocessing First the sets Fq and F I see Section 5 are generated Figure 6 arrow from 1 to 3 These sets contain the XML fragments addressed by the XPath expressions specified in the clauses ROOT \(Fq HEAD, and BODY \(F I In general this step could be implemented by any of the available XPath interpreters in our case we use the Java implementation ofXalan Then the sets F and F containing the XML fragments in Fq\and FI which satisfy the WHERE clause are generated This step is implemented on the top of the Xalan interpreter of Xpath Note that since there is no XQuery interpreter currently available our initial implementation supports only basic WHERE conditions mainly based on XPath expressions such as ROOT//@year=2001 With the sets F and F the relational table R is generatt;d as follows F  U value\(p,d pEXl We now define F and F by filtering the sets Fv and F through the XQuery where clause w specified in the WHERE section F and F are defined as follows F  I I I E Fv I satis.fy\(I w  F  I I I E F 1\\.\\'atis.fy\(I w From the definitions of F and F it is now possible to compute thefrequency of an itemsetX X E F as follows ECEF~ n/EXcontains C , I freq\(X F  IFbl Given the function freq it is then possible to extract frequent XML itemsets from an XML document Therefore it is possible to extract the association rules as specified in the X MINE statement Note that all the three functions used to define the jreq are available or easy to implement In particular the function value can be directly implemented by any of the available XPath interpreter e.g Xalan The function satisfy can be implemented by an XPath interpreter if the conditions in the WHERE clause are simple enough by an XQuery interpreter when this will become available The function contains can be again easily implemented on top of an XPath interpreter see Section 6 R has as many attributes i.e columns as is the numberofXML fragments in F i.e R C 0 l}IFIi R has as many tuples i.e rows as the number of fragments in F i.e R  TI TIF~I for every XML fragment Ci E F and every XML fragmentfj E F a tuple Ti E R Ti Ti,I...ri,IFll is defined as Ti,j contains\(ci,fj From Section 5 we recall that the function contains\(ci,fj returns one if the fragment Ci contains f j Note that the current implementations of XPath do not provide any method to check whether a fragment appear in another fragment Accordingly in our prototype the function contains is implemented on the top of the XPath interpreter as follows Given two fragments Ci and fj their textual representation is generated exploiting the functionalities of the XPath interpreter Then it is checked whether the textual representation of fj actually appear in the textual representation of Ci; if it does, one is returned otherwise zero This solution is indeed computationally expensive but on the other hand the comparison ofXML fragments is one of the major open issues in the XML community Thus it might be possible in the future to reduce the complexity of this phase through some advanced technique introduced in the next versions of 6. The Architecture of X MINE X MINE has been devised as an extension of the XML Query language and therefore it could be easily implemented on the top of an. XQuery interpreter However because of the lack of a robust XQuery execution environment the current implementation is built on the coupling of the Xalan XPath interpreter and an algorithm to extract association rules from relational data The XMINE prototype has been implemented as a three-step process namely preprocessing mining and postprocessing The 62 Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence \(ICTAI\22202 1082-3409/02 $17.00 \251 2002 IEEE 


 SOIIrt\273XMl~nt u XJlINE RULE  I I INdoc-nt c U FOR ROOT IN  LET    3 Itereddoal..nt WRDE 2 D EXTRACTING RULES WITB SUPPORT AHD CONFIDENCE jJ I8IaticxIalllPl8lent8tion EJ 5 J 8IIodItiIIn8s EJ 8 jJ XMl asmaoon rulos D 1     Figure 4 The architecture of the X MINE prototype which have been memorized during the preprocessing such as the correspondence between the XML fragments in F and F and the attributes in R is exploited in order to print an XML version of the association rules generated through the Apriori algorithm XPath and XQuery Finally the constraints specified in the EXTRACTING clause are represented so to be exploited by the association rule mining algorithm in the next phase Figure 6, arrow from 4 Mining With the table R and the constraints extracted from the EXTRACTING RULE clause in the previous phase, association rules are extracted Figure 6 arrow from 5 In the initial implementation presented here this phase is based on the plain Apriori algorithm Note that among the many constraints which might be specified our implementation currently considers only constraints concerning the composition of the rules e.g., the number of items in the rule head or body the minimum support and tlle minimum confidence In fact some compJex constraints e.g those described in  are currently not possible with a tabular representationbut they would require mining the XML association rules directly from the DOM Document Object Model representation DOM offers a platfonn-and language-neutral API Application Programming Interface allowing programs to dynamically access and update the content structure and style of the documents Recently we decided to implement this mining step by using MINE RULE since it allows a better specification of complex constraints The new version of X MINE is still under implementation 7 Notes on the Implementation The X MINE prototype has been implemented in Java on the top of the Xalan XPath 1.0 interpreter and DOM the mining phase was initially implemented with the plain Java implementation available in Weka Efficiency has not been of our main concern in developing the initial implementation of X MINE However the first experiments of use are good thanks to the excellent performance of the Xalan XPath interpreter In addition our initial experiments suggests that the preprocessing and postprocessing steps are reasonably fast with respect to the central mining phase Our first experiments conducted on some simple bibliographic XML documents obtained by using BibTeXML showed that in general association rule mining is quite a complex task if compared to the simple preprocessing needed to produce the relational representation needed for mining More specifically in our initial experiments we noted that preprocessing and postprocessing together required less than the 20 of the overall computing time Note however that since the structure of source documents was quite simple with respect to that of most Postprocessing In the final step \(depicted in Figure 6 with arrow 6 association rules extracted from relational data are mapped into the XML representation Here the information 63 Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence \(ICTAI\22202 1082-3409/02 $17.00 \251 2002 IEEE 


XML documents these preliminary results surely lack of generality These considerations suggest that an efficient execution of X MINE statements is feasible with current technology as long as the statement includes only XPath expressions or basic XQuery WHERE conditions Our three-step process which exploits an intermediate relational representation allowed us to implement a basic prototype smoothly On the other hand the lack of a robust XQuery execution environment does not allow us to compute the complex predicates supported by the X MINE syntax on a native XML representation The implementation we presented here \(see also leaves many open issues which must be addressed to have a fully functional and efficient implementation of the X MINE operator We believe that the most important open issue regards the support evaluation which should be used to extract association rules from XML documents There are currently no XQuery interpreters to be used in filtering XML fragments and although XPath processors are quite advanced they do not yet provide all the required functionalities either Many of these functionalities should be included in the new XPath 2.0 version while some operations needed for advanced options are still not defined but are still requirements of the W3C consortium Therefore many required computation must be coded directly on the raw DOM representation of the documents e.g the filtering of WHERE clauses which causes some computational overhead Note that in our prototype we implemented some of these functionalities on the top of DOM and XPath 1.0 Xalan interpreter however we do not plan to implement all the functionalities needed by X MINE. In fact we expect reliable XPath 2.0 and XQuery execution environments to be available in the very near future Acknowledgments In this work the authors have been supported by the consortium on discovering knowledge with Inductive Queries clnQ of the EU-IST Programme Contract no IST2000-26469 The authors wish to thank Roberto Carnevale for his implementation of the first X MINE prototype References 8. CONCLUSIONS In this paper we overviewed the X MINE operator a tool we have devised to extract association rules trom native XML data Although this research provides a good starting point there are still many open issues for future researcheven within the work presented in this paper Additionally association rules from XML data could be extended to the case of episode rules A more general question is how to consider and connect all available metadata-not only the XML Dm or schema information but also RDF metadata and DAML+OIL format ontologies-for a specific mining task in a specific domain This additional metadata provides enhanced possibilities to constrain the mining queries both automatically and manually but it also increases the complexity and thus poses lots of new requirements for the data mining query language  consortium on discovering knowledge with Inductive Queries clnQ http://www.cinq-project.org  BibTeXML an XML representation of BibTeX http://www.bibtexml.org  WEKA www.cs.waikato.ac.nz/ml/weka  R Agrawal T Imielinski and A Swami Mining association rules between sets of items iri large databases In P Buneman and S Jajodia editors Proceedings of ACM SIGMOD Conference on Management of Data SIGMOD'9 pages 207 216 ACM May 1993  D Braga A Campi S Ceri M Klemettinen and P L Lanzi Discovering interesting information in xml data with association rules Technical Report 2002-15 Dipartimento di Elettronica e Informazione Politecnico di Milano 2002  D Braga A Campi M Klemettinen and P L Lanzi Mining association rules from xml data In Proceedings of the 41h International Conference on Data Warehousing and Knowledge Discovery DaWaK 2002 September 4-6 Aixen-Provence France 2002 accepted  R Camevale Algoritmi per stemming ed estrazione di regole di associazione su documenti xml Master's thesis Apr 2002 Master thesis supervised by Marco Colombetti and Pier Luca Lanzi available in Italian  D M Group PMML 2.0 Predictive Model Markup Language http://www.dmg.org,Aug.2001  H Mannila H Toivonen and A I Verkamo Discovering frequent episodes in sequences In U M Fayyad and R Uthurusamy editors Proceedings of the First Intemational Conference on Knowledge Discovery and Data Mining KDD'95 pages 210 215 AAAI Press 1995  R Meo G Psaila and S Ceri An extension to SQL for mining association rules Data Mining and Knowledge Discovery 2\(2 224 1998  The Apache Software Foundation The Apache XML Project http xml apache org/xalan-j   World Wide Web Consortium Extensible Markup Language XML Version 1.0 W3C Recommendation http://www.w3c.org/xml/,Feb.1998  World Wide Web Consortium XML Path Language XPath Version 1.0 W3C Recommendation http://www.w3c.org/tr/xpath/,Nov.1999  World Wide Web Consortium XQuery 1.0 An XML Query Language W3C Working Draft http://www.w3.org/TR/2001/WD-xquery-20011220 Dec.2001 64 Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence \(ICTAI\22202 1082-3409/02 $17.00 \251 2002 IEEE 


In Figures 10 and 11 we see MAFIA is approximately four to five times faster than Depthproject on both the Connect-4 and Mushroom datasets for all support levels tested down to 10 support in Connect-4 and 0.1 in Mushroom For Connect-4 the increased efficiency of itemset generation and support counting in MAFIA versus Depthproject explains the improvement Connect 4 contains an order of magnitude more transactions than the other two datasets 67,557 transactions amplifying the MAFIA advantage in generation and counting For Mushroom the improvement is best explained by how often parent-equivalence pruning PEP holds especially for the lowest supports tested The dramatic effect PEP has on reducing the number of itemsets generated and counted is shown in Table 1 The entries in the table are the reduction factors due to PEP in the presence of all other pruning methods for the first eight levels of the tree The reduction factor is defined as  itemsets counted at depth k without PEP   itemsets counted at depth k with PEP In the first four levels Mushroom has the greatest reduction in number of itemsets generated and counted This leads to a much greater reduction in the overall search space than for the other datasets since the reduction is so great at highest levels of the tree In Figure 12 we see that MAFIA is only a factor of two better than Depthproject on the dataset Chess The extremely low number of transactions in Chess 3196 transactions and the small number of frequent 1-items at low supports only 54 at lowest tested support muted the factors that MAFIA relies on to improve over Depthproject Table 1 shows the reduction in itemsets using PEP for Chess was about an order of magnitude lower compared to the other two data sets for all depths To test the counting conjecture we ran an experiment that vertically scaled the Chess dataset and fixed the support at 50 This keeps the search space constant while varying only the generation and counting efficiency differences between MAFIA and Depthproject The result is shown in Figure 13 We notice both algorithms scale linearly with the database size but MAFIA is about five times faster than Depthproject Similar results were found for the other datasets as well Thus we see MAFIA scales very well with the number of transactions 5.3 Effects Of Compression To isolate the effect of the compression schema on performance experiments with varying rebuilding threshold values we conducted The most interesting result is on a scaled version of Connect-4, displayed in Figure 14 The Connect-4 dataset was scaled vertically three times so the total number of transactions is approximately 200,000 Three different values for rebuilding-threshold were used 0 corresponding to no compression 1 compression immediately and all subsequent operations performed on compressed bitmaps\and an optimized value determined empirically We see for higher supports above 40 compression has a negligible effect but at the lowest supports compression can be quite beneficial e.g at 10 support compression yields an improvement factor of 3.6 However the small difference between compressing immediately and finding an optimal compression point is not so easily explained The greatest savings here is only 11 at the lowest support of Conenct-4 tested We performed another experiment where the support was fixed and the Connect-4 dataset was scaled vertically The results appear in Figure 15 The x-axis shows the scale up factor while the y-axis displays the running times We can see that the optimal compression scales the best For many transactions \(over IO6 the optimal re/-threshold outperforms compressing everywhere by approximately 35 In any case both forms of compression scale much better than no compression Compression on Scaled ConnectAdata Compression Scaleup Connectldata ALL COMP 0 5 10 15 20 25 30 100 90 80 70 60 50 40 30 20 10 0 Min Support  Scaleup Factor Figure 14 Figure 15 45 1 


6 Conclusions We presented MAFIA an algorithm for finding maximal frequent itemsets Our experimental results demonstrate that MAFIA consistently outperforms Depthproject by a factor of three to five on average The breakdown of the algorithmic components showed parent-equivalence pruning and dynamic reordering were quite beneficial in reducing the search space while relative compressiodprojection of the vertical bitmaps dramatically cuts the cost of counting supports of itemsets and increases the vertical scalability of MAFIA Acknowledgements We thank Ramesh Agarwal and Charu Aggarwal for discussing Depthproject and giving us advise on its implementation We also thank Jayant R Haritsa for his insightful comments on the MAFIA algorithm and Jiawei Han for providing us the executable of the FP-Tree algorithm This research was partly supported by an IBM Faculty Development Award and by a grant from Microsoft Research References I R Agarwal C Aggarwal and V V V Prasad A Tree Projection Algorithm for Generation of Frequent Itemsets Journal of Parallel and Distributed Computing special issue on high performance data mining to appear 2000 2 R Agrawal T Imielinski and R Srikant Mining association rules between sets of items in large databases SIGMOD May 1993  R Agrawal R Srikant Fast Algorithms for Mining Association Rules Proc of the 20th Int Conference on Very Large Databases Santiago Chile, Sept 1994  R Agrawal H Mannila R Srikant H Toivonen and A 1 Verkamo Fast Discovery of Association Rules Advances in Knowledge Discovery and Data Mining Chapter 12 AAAVMIT Press 1995 5 C C Aggarwal P S Yu Mining Large Itemsets for Association Rules Data Engineering Bulletin 21 1 23-31 1 998 6 C C Aggarwal P S Yu Online Generation of Association Rules. ICDE 1998: 402-41 1 7 R J Bayardo Efficiently mining long patterns from databases SICMOD 1998: 85-93 8 R J Bayardo and R Agrawal Mining the Most Interesting Rules SIGKDD 1999 145-154 9 S Brin R Motwani J D Ullman and S Tsur Dynamic itemset counting and implication rules for market basket data SIGMOD Record ACM Special Interest Group on Management of Data 26\(2\1997 IO B Dunkel and N Soparkar Data Organization and access for efficient data mining ICDE 1999 l 11 V Ganti J E Gehrke and R Ramakrishnan DEMON Mining and Monitoring Evolving Data. ICDE 2000: 439-448  121 D Gunopulos H Mannila and S Saluja Discovering All Most Specific Sentences by Randomized Algorithms ICDT 1997: 215-229 I31 J Han J Pei and Y Yin Mining Frequent Pattems without Candidate Generation SIGMOD Conference 2000 1  12 I41 M Holsheimer M L Kersten H Mannila and H.Toivonen A Perspective on Databases and Data Mining I51 W Lee and S J Stolfo Data mining approaches for intrusion detection Proceedings of the 7th USENIX Securiry Symposium 1998 I61 D I Lin and Z M Kedem Pincer search A new algorithm for discovering the maximum frequent sets Proc of the 6th Int Conference on Extending Database Technology EDBT Valencia Spain 1998 17 J.-L Lin M.H Dunham Mining Association Rules: Anti Skew Algorithms ICDE 1998 486-493 IS B Mobasher N Jain E H Han and J Srivastava Web mining Pattem discovery from world wide web transactions Technical Report TR-96050 Department of Computer Science University of Minnesota, Minneapolis, 1996 19 J S Park M.-S Chen P S Yu An Effective Hash Based Algorithm for Mining Association Rules SIGMOD Conference 20 N Pasquier Y Bastide R Taouil and L Lakhal Discovering frequent closed itemsets for association rules ICDT 99 398-416, Jerusalem Israel January 1999 21 J Pei J Han and R Mao CLOSET An efficient algorithm for mining frequent closed itemsets Proc of ACM SIGMOD DMKD Workshop Dallas TX May 2000 22 R Rastogi and K Shim Mining Optimized Association Rules with Categorical and Numeric Attributes ICDE 1998 Orlando, Florida, February 1998 23 L Rigoutsos and A Floratos Combinatorial pattem discovery in biological sequences The Teiresias algorithm Bioinfomatics 14 1 1998 55-67 24 R Rymon Search through Systematic Set Enumeration Proc Of Third Int'l Conf On Principles of Knowledge Representation and Reasoning 539 550 I992 25 A Savasere E Omiecinski and S Navathe An efficient algorithm for mining association rules in large databases 21st VLDB Conference 1995 26 P Shenoy J R Haritsa S Sudarshan G Bhalotia M Bawa and D Shah: Turbo-charging Vertical Mining of Large Databases SIGMOD Conference 2000: 22-33 27 R Srikant R Agrawal Mining Generalized Association Rules VLDB 1995 407-419 28 H Toivonen Sampling Large Databases for Association Rules VLDB 1996 134-145 29 K Wang Y He J Han Mining Frequent Itemsets Using Support Constraints VLDB 2000 43-52 30 G I Webb OPUS An efficient admissible algorithm for unordered search Journal of Artificial Intelligence Research 31 L Yip K K Loo B Kao D Cheung and C.K Cheng Lgen A Lattice-Based Candidate Set Generation Algorithm for I/O Efficient Association Rule Mining PAKDD 99 Beijing 1999 32 M J Zaki Scalable Algorithms for Association Mining IEEE Transactions on Knowledge and Data Engineering Vol 12 No 3 pp 372-390 May/June 2000 33 M. J. Zaki and C Hsiao CHARM An efficient algorithm for closed association rule mining RPI Technical Report 99-10 1999 KDD 1995: 150-155 1995 175-186 3~45-83 1996 452 


