Incremental Mining of Frequent Patterns Without Candidate Generation or Support Constraint William Cheung and Osmar R. ZaÔane University of Alberta, Edmonton, Canada wcheung, zaiane}@cs.ualberta.ca Abstract In this paper, we propose a novel data structure called CATS Tree. CATS Tree extends the idea of FPTree to improve storage compression and allow frequent pattern mining without generation of candidate itemsets The proposed algorithms enable frequent pattern mining with different supports without rebuilding the tree structure. Furthermore, the algorithms allow mining with a single pass over the database as well as efficient 
insertion or deletion of transactions at any time 1. Introduction One major function of association rules is to analyze large amounts of market basket transactions Association rules have been applied to many areas including outlier detection, classification, clustering etc  T h e m i n i n g proces s can be brok en dow n in to the mining of underlying frequent itemsets and  the generation of association rules. Association rule mining is an iterative process [10 th u s in p r actice, m u ltip le frequent pattern mining processes with different supports 
are often required to obtain satisfactory results This paper introduces C ompressed and A rranged T ransaction S equences Tree or CATS Tree and CATS Tree algorithms. Once CATS Tree is built, it can be used for multiple frequent pattern mining with different supports. Furthermore, CATS Tree and CATS Tree algorithms allow single pass frequent pattern mining and transaction stream mining. In addition, transactions can be 
added to or removed from the tree at any time  It is assumed that there is no limitation on the main memory. The assumption is realistic for a reasonably large database due to the following reasons: 1\ the current trend of modern computing moves towards computers with large amounts of main memory \(gigabytes sized\2 memory management techniques and data compression technique in the CATS Tree reduce memory footprint; 3 the same assumption has been used in other publications 
11,12,13,14,15 In addition, CATS Tree allows removal of transactions concurrently. Even a huge database can be processed by CATS Tree if out-of-date transactions are removed concurrently The remainder of the paper is organized as follows Section 2 surveys related work. Section 3 introduces the CATS Tree structure and the algorithm to build it. CATS Tree based frequent pattern mining algorithm is introduced in Section 4. Section 5 presents some experimental results. Conclusions are given in Section 6 
2. Previous Work 2.1. Apriori-based Algorithms The very first published and efficient frequent patterns mining algorithm is Apriori [2  A num b e r o f  Apriori-based algorithms a v e been  propos ed t o  improve the performance of Apriori by addressing issues related to the I/O cost 2.2 Pattern Growth Algorithms Han et al. propose a data structure, frequent pattern tree or FP-Tree, and an algorithm called FP-growth that allows mining of frequent itemsets without generating candidate itemsets h e con s tru ction of  FP T ree 
requires two data scans As pointed out by the designers of FP-Tree, no algorithm works in all situations. A new data structure called H-struct was introduced in [14 to d eal w ith sp arse data solely 3. CATS Tree In the present study, we have developed a novel data structure, CATS Tree, an extension of FP-T Researchers have proposed to use tree structure in data mining [3,16,17   H o w e ve r   t h e y a r e no t sui t a b l e fo r  interactive frequent pattern mining 
CATS Tree is a prefix tree and it contains all elements of FP-Tree including the header, the item links etc. Paths from the root to the leaves in CATS Tree represent sets of transactions We use the database in Table 1 to illustrate the construction of a CATS Tree Proceedings of the Seventh International Database Engineering and Applications Symposium \(IDEASê03 1098-8068/03 $17.00 © 2003 IEEE 


Initially, the CATS Tree is empty. Transaction 1 \(F, A,C D, G, I, M, P\ is added as it is. As shown in Figure 1 Transaction 2 \(A, B, C, F, L, M, O\ added, common items, F, A, C, are extracted from Transaction 2 and are merged with the existing tree. Although item D is not contained in Transaction 2, common items could be found underneath node D. Item M is found to be common. However, Transaction 2 cannot be merged directly at node M because it would violate the structure of CATS tree that the frequency of a parent node must be greater than the sum of its childrenês frequencies Node M of CATS Tree is swapped in front of node D as shown in Figure 1 and it is merged with the transaction After that, there is no more common item. The remaining portion of Transaction 2 is added to node M TID Original Transactions Projected transactions for FP-Tree 1 F, A, C, D, G, I, M, P F, C, A, M, P 2 A, B, C, F, L, M, O F, C, A, B, M 3 B, F, H, J, O F, B 4 B, C, K, S, P C, B, P 5 A, F, C, E, L, P, M, N F, C, A, M, P Table 1. Sample database In Figure 1, Transaction 3 \(B, F, H, J, O\ added Item F of Transaction 3 is merged. Since the frequency of node A is the same as that of node F the search for other possible merge nodes continues along the branch  It passes through node A, C, and M and finally, reaches node B. Even though Transaction 3 also contains an item B, but the frequency of node B is smaller than that of node M, the remaining of the transaction is inserted as a new branch at node F  P:1 I:1 F:1 A:1 C:1 M:1 D:1 G:1 Root A,C,F of Transaction 2 have been merged O:1 A:1 B:1 C:1 F:1 L:1 M:1 Transaction 1 Transaction 2 Transaction 3 B:1 F:1 H:1 J:1 O:1 P:1 I:1 F:2 A:2 C:2 M:2 D:1 G:1 Root O:1 B:1 L:1 Figure 1. Insertion of Transaction 1, 2 & 3 When Transaction 4 \(B, C, K, S, P\ is added, there is no common item. Transaction 4 is added as it is. In Figure 2 Transaction 5 \(A, F, C, E, L, P, M, N\ added F, A, C, and M are merged. The search for common items continues along the path. Item P is common in both the tree path and Transaction 5. This triggers swapping of node P to the front of node D. After item P is merged, there is no more common item. The remainders of Transaction 5 are inserted as a new branch at node P I:1 G:1 O:1 L:1 B:1 F:4 A:3 C:3 M:3 P:1 D:1 Root O:1 J:1 H:1 B:1 P:1 S:1 K:1 C:1 B:1 N:1 P:1 L:1 E:1 Figure 2. Insertion of Transaction 5 CATS Tree FP-Tree Contains all items in every transaction Contains only frequent items Sub-trees are locally optimized to improve compression Sub-trees are not locally optimized Ordering of items within paths from the root to leaves are ordered by local support Ordering of items within paths from the root to leaves are ordered by global support CATS nodes of the same parent are sorted in descending order according to local frequencies Children of a node are not sorted Table 2. CATS Tree versus FP-Tree All CATS Trees have the following properties 1\ The compactness of CATS Tree measures how many transactions are sharing a node. Compactness decreases as it is getting away from the root. This is the result of branches being arranged in descending order 2\ No item of the same kind could appear on the lower right hand side of another item. If there were items of the same kind on the right hand side, they should have been merged with the node on the left to increase compression. Any items on the lower right hand side can be switched to the same level as the item, split nodes as required if switching nodes violates the structure of CATS Tree. After that they can be merged with the item on the left. Because of the above properties, a vertical downward boundary is formed beside each node and a horizontal rightward boundary is formed at the top of each node. The vertical and horizontal boundaries combine to form a step-like individual boundary A s  shown in Figure 3, boundaries of multiple items can be Proceedings of the Seventh International Database Engineering and Applications Symposium \(IDEASê03 1098-8068/03 $17.00 © 2003 IEEE 


joined together to form a refined boundary for a particular item. Items of the same kind can only exist on the refined boundary. A few major differences between CATS Tree and FP-Tree are listed in Table 2  I:1 G:1 O:1 L:1 B:1 C:5 F:3 A:3 M:3 P:2 D:1 Root O:1 J:1 H:1 B:1 P:1 S:1 B:1 K:1 N:1 L:1 E:1 F:1 X:1 Y:1 Z:1     Refined Boundary for B Individual Boundary of B nodes Figure 3. Item boundary in CATS Tree 3.1 CATS Tree Builder CATS Tree contains all information of a dataset. Its construction requires only a single data scan. Thus, it is not optimal since there is no preliminary analysis before this single data scan. New transactions are added at the root level. At each level, items of the transaction are compared with those of children nodes. If the same items exist in both the new transaction and that of the children nodes, the transaction is merged with the node at the highest frequency. The frequency of the node is incremented. The remainder of the transaction is added to the merged nodes and the process is repeated recursively until all common items are found. Any remaining items of the transaction are added as a new branch to the last merged node. Furthermore, CATS Tree Builder has to consider not only the immediate items of that level, but also all possible descendants. The frequency of a descendant node can become larger than that of its ancestor, once the frequency of the new transaction is added. If the frequency becomes larger, the descendant has to swap in front of its previous ancestor to maintain the structural integrity of CATS Tree. The CATS Tree Builder algorithm cannot afford to search blindly to locate common item. There are few properties of CATS Tree that can be used to prune the search space 1\herited from FP-Tree, the sum of frequencies of all children nodes can only be smaller or equal to that of their parent. 2\hildren of a node are sorted. Based on these properties, if a node cannot have local frequency greater than that of its parent, none of its sibling after it or any of its children can. As soon as an invalid node is found, CATS Tree Builder can abort the search and pursue other paths or insert the new transaction as a new branch. Since the frequency of the new transaction is 1 this implies that the frequency of descendant node must be equal to that of its ancestor. There can only be one node if we need to search downward. If the ordering of sibling node becomes out of order after merging, the offending node is repositioned to maintain the structural integrity of the tree. The algorithm CATS Tree Builder is listed as the following Algorithm CATS Tree Builder Input set of transactions Output CATS Tree 1. PROCEDURE CATSTreeBuilder input_set S  2  for all transactions t  S 3   for all i  t 4 i frequency in  header 5 root add t  6. PROCEDURE add\(transaction t  7  if this children  t   8   child node.merge t  9  else if this descendant  t   10   swap descendant node and split child   node if necessary 11.    descendant.merge t  12 else 13  this children  t  14  Reposition the merged node if necessary 15 PROCEDURE merge\(transaction t  16 this frequency 17  remove this item from t 18  node.add t  Pseudo Code 1. CATS Tree Builder In general, it is impossible to build a CATS Tree with maximal compression and without prior knowledge of the data. Therefore the compression of a CATS Tree is sensitive to both ordering of transaction and items within the transactions. However based on experiments the size difference between maximal compressed CATS Tree and a CATS Tree produced by heuristic search is about 5 - 10%. A maximal compressed CATS Tree is an optimal tree where further loss-less compression is not possible. Different CATS Trees from the same database can be converted into a maximal compressed CATS Tree by recursively extracting the most compact item sequentially at each node. Thus, the ordering issues become irrelevant since the maximal compressed CATS Tree is insensitive to the order of input. CATS Tree based frequent patterns mining algorithm, FELINE produces an identical set of frequent patterns as long as the underlying database remains the same Proceedings of the Seventh International Database Engineering and Applications Symposium \(IDEASê03 1098-8068/03 $17.00 © 2003 IEEE 


4 FrEquent/Large patterns mINing with CATS trEe \(FELINE Unlike FP-tree, once the CATS Tree is built, it can be mined repeatedly for frequent patterns with different support thresholds without the need to rebuild the tree Like FP-growth E L INE em pl oy s di v i de an d conquer, fragment growth method to generate frequent patterns without generating candidate itemsets. FELINE partitions the dataset based on what patterns transactions have. For a pattern called p a p s conditional CATS Tree is a tree built from all transactions that contain pattern p  Transactions contained in a conditional CATS Tree can be easily gathered by traversing the item links of pattern p A conditional condensed CATS Tree is one in which all infrequent items are removed and it is different enough from a conditional FP-Tree that FP-growth cannot be applied. By traversing upward only like FPgrowth, the algorithm cannot guarantee that all frequent patterns in a conditional condensed CATS Tree are gathered. In order to ensure all frequent patterns are captured by FELINE, FELINE has to traverse both up and down to include all frequent items. However, this may cause duplications of frequent patterns in different conditional condensed CATS Trees because the same frequent pattern could appear in all trees of the frequent patternês constituents. While building conditional condensed CATS Tree, items are excluded if the items are infrequent or the items have been mined. A detailed example of FELINEês execution can be found in The pseudo code for FELINE is given as follows Algorithm FELINE Input a CATS Tree and required support Output a set of frequent pattern 1 PROCEDURE FELINE\(required support   2 sort\(header.frequent items   3  for each frequent item  4  build  Tree  s conditional condensed   CATS Tree 5   mineCATSTree  Tree  null 6. PROCEDURE mineCATSTree  Tree  stack ps  7 if  treeês support   8  ps  9  frequent pattern FP  ps  10  FP s support  treeês support 11   frequent itemsets  FP  12  processed set s  prevent duplication 13   if  tree.children   14    for all item i  tree  i  ps  i  s 15 s  i 16 build i Tree i s conditional condensed CATS Tree 17.      mineCATSTree i Tree   ps  18.      pop ps  keep only the path to root Pseudo Code 2. FELINE CATS trees can be used with incremental updates of the transactional database. Indeed transactions could be added or deleted on the fly while the mining is still possible without having to rebuild the whole structure Algorithms that add or remove a set of transactions from an already built CATS Tree, or merge trees can be found in 5 Experiments and Results The goal of the experiments is to find out the extent of different dataset properties that could affect the performance of CATS Tree algorithms and the relative performance compares with other algorithms. Datasets are generated with the data generator by IBM QUEST To avoid implementation bias, external Apriori implementation, by Christian Borgelt [19 is u s ed  FP growth is provided by the original authors. To allow a fair comparison of algorithms, Apriori is also run in cached mode where all transactions are loaded into the main memory. Experiments are performed on a Pentium 4 1.6GHz PC with 512Mb RAM r unning on Window 2000 server. All programs are complied with the same compiler. They all yield the same patterns with the same dataset and the same parameters. All data files are generated with default parameters: 1 million transactions average pattern length is 4; average transaction length is 10; number of unique items is 23,890 and the minimum support is 0.15%, unless stated otherwise Most of the previous published literature deals with database sized around 100k In  ou r experiments, our database size is over a million transactions, which is a reasonable size for a respectable department store-like transactional database 5.1. Scalability The first experiment measures scalability of CATS Tree algorithms with respect to the number of transactions As shown in Figure 4, both CATS Tree Builder and FELINE scale linearly to the number of transactions FELINE is very efficient while building the CATS Tree may seem expensive. However, the cost of building the CATS tree is quickly amortized in an ad-hoc interactive association rule mining context, since the tree needs only be built once. This matches the design goal: building once and mining multiple times with low overhead Proceedings of the Seventh International Database Engineering and Applications Symposium \(IDEASê03 1098-8068/03 $17.00 © 2003 IEEE 


 0 10 20 30 40 50 60 70 80 90 0k 250k 500k 750k 1000k 1250k 1500k 1750k Number of Transactions Time\(s CATS Tree Builder FELINE Total CATS Tree Apriori Cached Apriori FP-growth Figure 4. Scalability of CATS Tree with respect to number of Transactions with single run The goal of the second experiment is to examine the effect of support on CATS Tree algorithms. In addition the unique characteristic of CATS Tree, that çbuild once mine manyé, is put to the test. A single CATS Tree is built from the data file. Frequent pattern mining iterations with different supports are performed on the same CATS Tree. In Figure 5, for comparison purposes time required to build CATS Tree is added to the time for Total CATS Tree. In Figure 6, cumulated time from the adding of the first transaction until completion of frequent pattern mining at each data point is calculated In other words, seven experiments with different supports were done on the same dataset 0 50 100 150 200 0.00 0.10 0.20 0.30 0.40 0.50 Support Time \(s CATS Tree Builder FELINE Total CATS Tree Cached A p riori FPg rowth Figure 5. Scalability of CATS Tree with respect to support with single run Time required by all algorithms increases as the support decreases. However, the rate of increase in Apriori is much faster than that of FELINE. Eventually CATS Tree algorithms become faster than cached Apriori because FELINE does not generate candidate itemsets. Other than performance, the memory requirement for CATS Tree is smaller than other algorithms when support is low. Apriori and FP-tree runs out of memory at when the support is 0.02% and 0.15 respectively Unlike other frequent pattern mining algorithms CATS Tree algorithms do not require to be started from scratch when the minimum support is decreased. The same CATS Tree can be used to mine frequent patterns with different supports; only FELINE needs to be rerun As shown in Figure 6, the benefits of CATS Tree algorithms increase as the number of frequent pattern mining increases 0.15 0.25 0.30 0.40 0.50 0.20 0.18 0 20 40 60 80 100 120 140 13 57 The number of Fre q uent Pattern Minin g Time \(s Cumulated CATS Tree Cumulated Cached A p riori Cumulated FPg rowth 5 Figure 6. Build once, mine many with CATS Tree scalability with multiple runs 5.2. Memory Usage In this experiment, the memory usages of different algorithms are compared. The amounts of memory usage are the peak memory usage reported by the process monitor. In FP-Tree, the theoretical number of nodes is used because the source code of FP growth is not available. Only the executable code was provided to us 0 250 500 750 1000 1250 0.00 0.05 0.10 0.15 0.20 0.25 0.30 Support Memory Usage \(MB 0 1 2 3 4 5 6 7 8 9 10 Number of Nodes\(000,000 Me mor y CA TS Tr ee Me mor y FP Tr ee Memory:Cache Apriori Nodes CA TS Tree Nodes:FP-Tree Nodes:Database Figure 7. Memory Comparison As shown in Figure 7, the memory usage of CATS Tree is relatively insensitive to the support while both FP-Tree and Cached Apriori are very sensitive to the support. As the support decreases, the memory consumption of FP-Tree increases exponentially and over takes that of CATS Tree at around 0.16% support From the theoretical aspect, CATS Tree is smaller than FP-Tree when the support is low. Because of the local memory management technique, CATS Tree will always consume less memory than a FP-Tree with 0 support. Furthermore, the structure of FP-Tree is based Proceedings of the Seventh International Database Engineering and Applications Symposium \(IDEASê03 1098-8068/03 $17.00 © 2003 IEEE 


on the frequency list of the items. As soon as a transaction is added, the frequency list could be changed and the FP-Tree may require a significant rearrangement of nodes to maintain the structure 6. Conclusion We propose a novel data structure, CATS Tree and an algorithm to build it. The algorithm FELINE is also proposed to mine frequent patterns from CATS Trees There are many advantages of CATS Tree algorithms over the existing algorithms. 1\ce a CATS Tree is built, frequent pattern mining with different supports can be performed without rebuilding the tree The benefit of çbuild once, mine manyé increases with the number of frequent patterns mining performed, i.e interactive mining with different supports; the cost of CATS Tree construction is amortized over multiple frequent patterns mining. 2\ CATS Tree allows single pass frequent pattern mining. 3\ CATS Tree algorithms allow addition and deletion of transactions in the finest granularity, i.e., a single transaction f o r m o re details. Currently, there is no known and published algorithm that can provide the same functionalities efficiently. This makes CATS Tree algorithm suitable for real time transactional frequent pattern mining where modifications and frequent patterns mining are common Moreover, with the addition and deletion capability CATS trees algorithms are appropriate to mine transaction streams since one single scan of the data suffices [18   We have implemented CATS Tree algorithms and compared our approach with other algorithms. CATS Tree algorithms are shown to be efficient and scalable to large amount of transactions and outperform other algorithms in interactive setting 7. Acknowledgement We would like to thank Dr. Jian Pei for providing us with the executable code of the FP-growth program that was used in our experiments for comparison purposes This work was partially supported by the National Science and Engineering Research Council of Canada 8. References 1  Sa v a s e re A O m ie c i ns k i E., a nd N a v a the S. A n Ef f i c i e n t Algorithm for Mining Association Rules in Large Databases. Proceedings of the VLDB C onference 1995 2  A g ra w a l, R. a nd Srik a n t, R. Fa st a l g o rithm s f o r m i ning  association rules. VLDB, 487-499. 1994 3  H a n, J P e i, J a nd Y i n, Y  Mining Fre que nt P a tte rns  without Candidate Generation. SIGMOD, 1-12. 2000 4  Brin, S., Motw a n i, R., U llm a n J e f f r e y D a nd T s ur Shalom. Dynamic itemset counting and implication rules for market basket data. SIGMOD. 1997 5  Brin, S., Motw a n i, R., a nd Silv e r s t e i n, C. Be y o nd m a rk e t  baskets: Generalizing association rules to correlations SIGMOD 26 265276. 1997 6  A n tonie M.-L a nd Za a ne O  R., T e x t D o c u m e nt Categorization by Term Association , IEEE ICDM'2002 pp 19-26, Maebashi City, Japan, December 9 - 12, 2002 7  Han J., P e i, J., Mo rtazavi-A sl, B., Ch en Q., Day al, U., an d  Hsu, M.-C. FreeSpan: Frequent pattern-projected sequential pattern mining. ACM SIGKDD 2000 8  Be il, F., Es te r, M., X u X Fre que nt T e rm Ba s e d T e x t  Clustering, ACM SIGKDD, 2002 9  O r la ndo, S., P a lm e r ini, P a nd P e re g o R. Enha nc ing the  Apriori Algorithm for Frequent Set Counting. Proceedings of 3rd International Conference on Data Warehousing and Knowledge Discovery. 2001   P i a t e t s k y Sha piro, G Fa y y a d, U a nd Sm ith, P  F rom  Data Mining to Knowledge Discovery: An Overview," in Fayyad, U., Piatetsky-Shapiro, G., Smith, P., and Uthurusamy, R. \(eds Advances in Knowledge Discovery and Data Mining AAAI/MIT Press 1996, pp. 1-35   H u a n g  H W u X a nd Re lue R. A s s o c i a tion A n a l y s is  with One Scan of Databases. Proceedings of the 2002 IEEE International Conference on Data Mining. 2002   W a ng K T a ng L H a n, J a nd L i u, J  T op dow n FP Growth for Association Rule Mining. Proc.Pacific-Asia Conference, PAKDD 2002, 334-340. 2002   Za k i M. J  a nd H s ia o, C.-J CH A R M: A n Ef f i c i e n t Algorithm for Closed Itemset Mining. SIAM International Conference on Data Mining. 2002   P e i, J H a n, J N i s h io, S., T a ng S., a nd Y a ng D  H-Mine  Hyper-Structure Mining of Frequent Patterns in Large Databases. Proc.2001 Int.Conf.on Data Mining. 2001   P e i, J H a n, J a nd Ma o, R. CL O S ET A n e f f i c i e n t algorithm for mining frequent closed itemsets. SIGMOD 2000   A g ra w a l, R., A g g a rw a l C. C., a nd P r a s a d V  V  V  A T r e e  Projection Algorithm For Generation of Frequent Itemsets Journal on Parallel and Distributed Computing[\(Special Issue on High Performance Data mining 2001   G oulbourne G Coe n e n F., a nd L e ng P  H  Com puting  association rule using partial totals. In Proceedings of the 5th European Conference on Principles and Practice of Knowledge Discovery in Databases, 54-66. 2001   Che ung W  Fre que nt P a tte rn Mining w ithout Ca ndida te  generation or Support Constraint." Master's Thesis University of Alberta, 2002   Borg e lt, C. A p riori 2 11 2001   L i n, J  L  a nd D unha m  M. H  Mining a s s o c i a tion rule s   Anti-skew algorithms. The 1998 14th International Conference on Data Engineering, 486-493. 1998   Za k i M. J P a rths a r a t hy S., O g iha ra M., a nd L i W  N e w  Algorithms for Fast Discovery of Association Rules. KDD 283-286. 1997 Proceedings of the Seventh International Database Engineering and Applications Symposium \(IDEASê03 1098-8068/03 $17.00 © 2003 IEEE 


1 2 3 4 5 6 7 8 9 10 References P. Cabena P Hadjinian R Stadler J Verhees and A Zanasi Discovering Data Mining: From Concept to Implementation Prentice Hall 07458,1997 pp 12 30 N Lavac E Keraunou and B Zupan 223Intelligent Data Analysis in Medicine and Pharmacology.\224 IDAM4P-97 Nagoya Japonska Kluwer Acedemic Publishers 1997 pp 61-67 W Horn 223Artificial Intelligence in Medicine on its Way from Data-Intensive to Knowledge-Intensive\224 Austrian Research Institute for Artificial Intelligence Technical Report TU-2001-01 Vienna Austria Val 23 NO 1,2001 pp 5-12 N Lavrac 223Data Mining in Medicine Selected Techniques and Applications\224 In Proc of the Second Intemational Conference on ne Practical Applications of Knowledge Discovery and Data Mining pp 11-31 S Startchik Geometric and Illumination Invariant Object Representation Application to Content-based Image Retrieval Ph.D Dissertation No 3009 University of Geneva, Switzerland, July 1998 T Zrimaec 223A Medical Image Information System\224 VISIM Workshop Utrecht Netherlands Oct 2001 Paper 2 G.D Magoulas and A Prentza, \223Machine learning in Medical Applications\224 Workshop on Machine Leaming in Medical Applications ACAI-99 1999 pp.53-58 P A Devijer and J Kitter Pattem Recognition A Statistical Approach Prentice-Hall 1982 K Woods Automated Image Analysis Techniques in Digital Mammography Ph.D Thesis, Department of Computer Science and Engineering University of South Florida, December 1994 W Chu I Leong R Taira C Breant 223A Temporal Evolutionary Object Oriented Data Model and its Query Language for Medical Image Management\224 Proceedings of the Id KLDB conference Vancouver Canada 1992 pp.53-64 11 V Megalooikonomou J For L Shen F Makedon Data Mining in Brain Imaging Statistical Methods in Medical Research 2000 pp 359-394 12 0 R Zaiane Resource and Knowledge Discovery fiom the Internet and Multimedia Repositories PhD Thesis School of Computing Science Simon Fraser IJniversity, March 1999 13 M Antonie 0 Zaiane A Coman 223Application of Data Mining Techniques for Medical Image Classification\224 In Proceedings of the Second i\221nternational Workshop on Multimedia Data Mining with ACM SIGKDD Coi?ference \(MDM/KDD\2222001 San Francisco USA Aupst 26,2001 14 J Hipp V Guntzer and G Nakhaeizadeh 223Algorithms for Association Rule Mining. A General Survey and Comparison.\224 ACM SIGKDD Volume 2 Issue 1 July 2000 pp 58 64 15 R Aggrawal and R Srikant 223Fast Algorithms for Mining Association Rules\224 In Proceeding of the 20th International Conference of Very Large Data Eases VLDB Chile 1994 pp 487 499 16 Ginneken B Romeny Statistical Local Texture Analysis Applied to Computer- Aided Diagnosis in Chest Radiography Statistics of Shapes and Textures Copenhagen summer school in computer vision September 4-8 2000 17 B Ginnekan Computer Aided Diagnosis in Chest Radiography PhD thesis, Utrecht University March 2001 pp 14-17 18 C Ordonez C Santana and L Brad 223Discovering Interesting Association Rules in MedicaI Data\224 ACM SIGMOD Workshop on Research Issues in Data Mining and Knowledge Discovery 2000 pp 78-85 19 C Aggrawal and P Yu 223Mining Large Itemsets for Association Rules\224 In Bulletin of the IEEE Computer Society Technical Committee on Data Engineering V01.2 N0.1~1998 Pg 23-31 20 C Ordonez and E Omiecinski 223Discovering Association rules Based on Image Content\224 In Proceedings of the IEEE Advances in Digital libraries Conference ADL 222993 Pg 38 49 21 K Lee 221\221Intelligent Shape based Image Analysis\224 Department of Computer Science, University of Iowa 55:247 Project 2001 2:2 J.Han J Pei and Y Yin 223Mining Frequent Patterns without Candidate Generation\224 In Proceedings of SIGMOD-2000 Dallas, May 2000,pp 1  12  1187  


3 3.5 fixed-style adap-style Er 4 S1 White burst the transient signal s1 is white and Gaus40 02~45\260\260 10 rn 0 sian with zero mean S2 Single exponentially-decaying sinusoid 30 60 20 X 4050 f S2\(i Ce f cos\(27f i/foq5 33 20  0   260 30   for i I l  M with the phase  randomly chosen from   20   0 2 7 and the frequency f randomly generated in the range 10   10       1 Js 4 1\260 10 1 0 0 0 0.75 0.7~~~~~~~~~~~~~~~~~~~~~~0 0.9 0.85 00 0 0 0 000 ogpq 0 0 0 1 02 1 03 legt le 1 1h02 1033 3 Exponentially-enveloped white burst transient length transient length Figure 9 Exponential case The right plot gives compariS3 i efS si i 34 son of the bias and thresholds used in the new adaptive Page procedure to those of the fixed-style Page scheme tailored to for i 1   M each specific transient length In all cases T 10l6 The agS4 Narrowband burst S4 iS created by passing white gregate SNR SL corresponding to the bias used in the fixed Gaussian noise through a narrowband filter whose bandwidth Page schme is pltted in he left igure.1S 0.3wr and whose center frequency iS chosen randomly 8 10\26065 _F 0~~~~~~~~~~~~~~~~~~~0 bL where bL denotes the bias for the fixed-style comparison only Page designed for length L 4 SIMULATION STUDY Again considering the fixed-style Page scheme first based The purpose of this section is to study the performance of the on the thresholds h's calculated by the FFT approach we above designed adaptive Page test regardless of the transient find from figure 8 that the behavior of the Page test designed signal's form strength and location The signal model is for particular transient lengths L does not provide constant detectability and thus modification according to our adaptive Ho x  w 31 Page procedure is desirable Therefore b and h\(L are ob tained according to 23 and 21 The corresponding fixed H1 x\(n  s\(n n men  n  n  nd bias b and variable threshold h\(L are plotted and compared s\(n  w\(m nS  n  mS  Td to those used in the fixed-style Page tests in figure 9 The 32 performance of the adaptive Page procedure is given in figure 10 and a gratifying detection improvement is observed in which x denotes the observation vector w is white Gausespecially for shorter transient lengths sian noise with zero mean and unit variance the vector s is the transient signal of interest The transients are of short du-1 ration M compared with the observation length N In our 60r 7 r 1.5 simulations we always use N  128 M  30 fs  16  2  and A  0.5 unless stated otherwise The transients are as 2.5 50   2.5  follows 50 10\260 1021o2 100 t analysis fixed-style envelope sient lengh0 0 simulation fixed-styld te envelope betwen7flse0larm0is  l6 Te udatetake theform Pagetestoptiize  anansiena adap style simulation adap style Page 0.4 designed for L200 loo 101 0 2 10 oo 101102103 transient length transient length Figure 8 Detect"ab"ility of exponential transients using fixedFigure 10 Performance of the adaptive Page scheme in style Page procedures designed for various but specific tranExponential transient problem The Pd envelope from the sient length L In all cases Pd 0.8 and the average time normal fixed-style Page procedure and the performance of the between false alarms is T 106  The update takes the form Page test optimized for transient length L=200 are shown for g\(x x 


2 35 04 T 2 0.4 0.2 0.2 provides the best performance over a wide range of transients 10 15 20 25 10 15 20 Unlike the Page detector the transient duration M is required here and Tmax does indeed show some sensitivity as regards c d this parameter as illustrated in figure 11 for transient signal 7  sl Similar relationship between Tmax and M is observed for 0.8 0.8 other types of transients 0.2 0.75 0 Cl 10 15 20 25 10 15 20 0.7  a aggregate Certainly this is not an exhaustive menu of transients but a for v is 2.5 when information about M is completely unavailwide range is covered able In fact several new power-law detectors were developed in 19 for instance we have We apply the adaptive Page detector designed in section 3 the Gaussian shift-in-variance case to the above transient's T a _da Page 0.6 Tma 0.6 Mf-1+i 0.6 l0.6 0.8 0.4 0.4 0.2 X X XN 37 detection The b and h\(L derived according to 21 is 12\(N Z\(Xi  X+\261 3 used in this adaptive detector where Pd  8 T  106 and t N  128 The assumptions on which the adaptive Page proSimilarly by combining 3 contiguous FFT bins we can write cedure is built are those of Si the detector is weakly suited Tf 3 It was found that for most practical transient signals Tf 2 to S3 and would seem to bear little affection for either S2 or and Tf 3 were preferable to Tpl S4 a b To illustrate the performance of our adaptive Page detector we compare it to other detectors In 18 it was found that 0.8  0.8 Nuttall's maximum detector 14 SNR dB aggregate SNR dB 0.65  Figure 12 Detection performances of the adaptive Page scheme The transient duration is M  30 samples different oT 0.6  panels refer to different transient signals with a transient signal sl b transient signal 82 c transient signal 83 and 0.55  d signal 84 0.5  We plot Pd versus the aggregate SNR in figure 12 in which Pf a  10-4 It is noted that the adaptive Page procedure 0.45 provides very close performance to that of the maximum detector in all four situations which is best in all cases as 0.4 0 20 40 60 M 80 100 120 in 18 This is exciting as we recall that M is tuned in the maximum detector and that our adaptive Page test reFigure 11 Detection performances of Tmax vs Al for quires no such prior information It is additionally noted that transient signal sl The true transient duration is M  30 qursnschpirnfmao.Itsadtoalyoedht transient  sina  Th tretasetduaini.l 3 the adaptive Page procedure provides performance superior samples and the aggregate SNR is 18dB The dash-dotted line indicates the best performance of Tmax when true M to even the improved power-law detector Tf12 in most cases is chosen The dotted line indicates the performance of the with the exception of S2 in which the transient is highly naradaptive Page scheme rowband Nuttall's Tmax looks for an increase in empirical variance as 5 SUMMARY does our Page processor In  1 8 it was found that another detector due to Nuttall works particularly well for narrowband The standard Page test is designed to detect a change in distritransient signals this based on the power-law statistic 15 bution amongst a conditionally independent observation pool defined as but works nicely at detecting even transient changes provided N they are of known character The standard Page update has Tp1 N 5 i 36 implicit a fixed negative bias and a detection is recorded i upon passage by this update of a fixed threshold these the In 36 v is an adjustable exponent and the Xi  are bias and threshold are determined by the ambient and tranmagnitude-squared FFT bins corresponding to the observasient distributional models fO and fil Specifically when fO tions x It has been found that the best compromise value and fi are close the bias is light and threshold high and 9 1 0 T with v=2.5 0.4 Tmax max S 


when fo and fi are distinct the Page test uses heavy bias and quence of Random Variables Biometrika Vol 57 No low threshold 1 pp 1-17 1970 6 B Broder and S Schwartz Quickest Detection ProceNotionally a transient signal that is long-and-quiet and one dures and Transient Signal Detection ONR Technical that is short-and-loud ought to have approximately the same Res and Transier 1990 detectability However these two engender very different Report 2 November 1990 Page tests and unfortunately the test designed for one can 7 D Casasent J-S Smokelin A Ye Wavelet and Gabor work quite poorly for the other Consequently in this paper Transforms for Detection Optical Engineering Vol an adaptive Page processor has been developed it uses a con31 No 9 pp 1893-1898 September 1992 stant bias but has a threshold that adaptively changes with the 8 S Del Marco and J Weiss M-band Wavepacket-Based number of samples since the most recent reset Transient Signal Detector Using a Translation-Invariant Wavelet Transform Optical Engineering Vol 33 No The new detector has been studied extensively in the Gaus7 pp 2175-2182 July 1994 sian shift-in-mean and shift-in-variance and also in the expo[9 T Dyson Topics in Nonlinear Filtering and Detecnential shift-in-scale cases It works very well and essentially tion PhD Thesis Princeton University Princeton NJ traces the envelope of performance achievable with the best 1986 Page processor tuned to each transient length the proposal is reasonable but ad-hoc but apparently we hardly could do 10 B Friedlander B Porat Performance Analysis of better Transient Detectors Based on a Class of Linear Data Transforms IEEE Transactions on Information TheTransient detection is interesting because one does not know ory Vol 38 No 2 pp 665-673 March 1992 in advance the sort of transient signal one has to look for it 11 C Han P Willett and D Abraham Some Methods could be narrowband or not it could have a sharp attack or it to Evaluate the Performance of Page's Test as used to could increase slowly and disappear abruptly Many transient Detect Transient Signals IEEE Transactions on Signal detectors are tuned to one type of transient and comparatively Processing pp 2112-2127 August 1999 blind to others What tends to unite transient signals of prac[12 G Lorden Procedures for Reacting to a Change in Distical interest however is that they are an organized agglomtribution Annals o Mathematical Statistics vol 42 eration of energy into contiguous or nearby time samples 1897-1908 1971 Now assuming a unit-normal ambient a transient detector pp 1 that assumes nothing but this local scale-change and one that 13 G Moustakides Optimal Stopping Times for Detectis reasonably insensitive to other characteristics such as specing Changes in Distributions Annals of Statistics vol trum is that based on the Page structure for Gaussian shift14 pp 1379-87 1986 in-variance The adaptive Page test developed here is also 14 A Nuttall Detection Capability of linear-And-Power insensitive to transient length it has here been tested for a Processor for Random Burst Signals of Unknown Locavariety of transient signals for which it is not on the surface tion NUWC-NPT Tech Rep 10,822 August 1997 well-suited and its performance has been found remarkably N o-Law Progood 15 A Nuttall Detection Performance of Power-LwPo good.a cessors for Random Signals of Unknown Location REFERENCES Structure Extent and Strength NUWC-NPT Technical Report 10,751 September 1994 1 D Abraham Asymptotically Optimal Bias for a Gen[16 E Page Continuous Inspection Schemes Biometrika eral Nonlinearity in Page's Test IEEE Transactions vol 41 pp 100115 1954 on Aerospace and Electronic Systems pp 1-8 January 17 B Porat and B Friedlander Performance Analysis of 1996 a Class of Transient Detection Algorithms-A Unified 2 M Basseville and I Nikiforov Detection of Abrupt Framework IEEE Transactions on Signal Processing Changes Theory and Application Englewood Cliffs Vol 40 No 10 pp 2536-2546 October 1992 NJ Prentice Hall 1993 18 Z Wang and P Willett A Performance Study of Some 3 A Shiryaev On Optimum Methods in Quickest DetecTransient Detectors IEEE Transactions on Signal Protion Problems Theory Prob Appl Vol 8 No 1 pp cessing Vol 48-9 pp 2682-2686 September 2000 22-46 1963 19 Z Wang and P Willett All-Purpose and Plug-In 4 M Basseville Edge Detection Using Sequential MethPower-Law Detectors for Transient Signals IEEE ods for Change in Level-Part  Sequential Detection Transactions on Signal Processing November 2001 Of Change in Mean IEEE Transactions on Acoustic 20 P Willett and B Chen A New Sequential Detector Speech and Signal Processing Vol ASSP-29 No 1 for Short Duration Signals Proceedings of ICASSPFeb 1981 98 Seattle WA May 1998 5 D Hinkley Inference About the Change-Point in a Se[21 P Willett and Y Bar-Shalom Track Testing for Single 10 


Targets in Clutter Proceedings of the SPIE Aerosense Now using the above procedure we can calculate hL for tranConference on Signal Processing for Small Targets sient duration L L  1  N given T and thus the timeApril 2000 varying threshold h\(L via 21 and also the performance in terms of Pd of the Page and our adaptive Page tests APPENDIX 2 EVALUATE PERFORMANCE OF ADAPTIVE 1 THE FFT APPROACH TO EVALUATE PAGE TEST PERFORMANCE OF FIXED-STYLE PAGE TEST For the transient change problem modeled as in 10 the runlength metrics 5 and 1 are of less interest than they would be for the permanent change problem Further and perhaps more important given their context in this paper these approximations do not apply at all in the case of a time-varying Uration A Page update Thus given the update rule and the average time-between-false alarms T we employ the FFT approach introduced in 11 to obtain the requisite threshold h that satisfies it and then to get the detection performance Pd Interested readers please refer to 11 for detail since here only a j l brief description is given AYvvfj Consider Page's test as an iterated sequential test ST with 7 n sample ihdex n    sbti-Sb lower and upper thresholds 0 and h Each individual ST is defined as an update rule Figure 13 Illustration of a Page implementation 20 with Z Z.i  g\(x non-zero initial point The change starts at point nm indicated by the dotted line and a decision rule as in 20 The procedure to calculate the probability of detection for the Thus the pdf of Zn is adaptive Page scheme is complicated by the fact that the Page bn Z  fn\(Z  fg Z 38 statistic be non-zero at the start point of a change Figure 13 shows such an example where the transient change begins at where fg is the pdf of the update g\(xn fn-i denotes the point nm and the threshold index i  5 at the start point nm pdf of Zn given that the test has continued to time n and due to the non-zero initialization Since the threshold index  denotes convolution the convolution can be made both i plays an important role in the adaptive scheme a non-zero accurate and quick via a fast Fourier transform FFT Then initialization could result in a different detection decision It we compute is thus necessary to calculate detection probabilities for difOn Z ferent threshold index i corresponding to the start point nm fn\(z f h n  0  z  h 39 Overall under the H1 hypothesis we have JO fn z dz 00 as a direct normalization In a straightforward manner under Pd\(nd S p\(i nd i 42 the Ho hypothesis one can express T as i=l F Eo  F1 N 40 where nd is the transient length and i is the threshold index T n=Z P1\(n corresponding to the start point nd According to the definiwhere Ei N is the expected number of samples to a decision tion the pmf p\(i is decided by the characteristics of the test for hypothesis Hi and pi n Pr\(ST ends at n and decides Hl Ho Under the H hypothesis assuming the standard situation we p\(i Pon i 1 Ho 43 have E 0 Pon nm Ho ndl1 Pd nd 5 Pr detect k resets 41 where Pon n l Ho Pr ST will continue to time-step n I I Ho k=o Under the Ho hypothesis assuming fo z  d\(z with the where nd is the transient length6 update g  we can calculate the pdf fr,\(z H0 according to 39 and thus calculate Pon nm Ho0 correspondingly 61n 11 it was noted that the probability of detection is increased both by latent detections caused by diffusive threshold-crossings after a transient's For each index i to calculate the corresponding Pd md i in end and also by a non-zero CUSUM value at the inception of a transient  Both of these can be accounted for via the direct FFT approach and for 42 we need to study stopping probabilities both for the case details we invite the reader to examine 11 fo Z f&i-1\(Z Ho and for fo z 5\(z  For the case that 11 


fo z fi 1 z Ho we consider a decision rule Z Jane Wang Z Jane Wang received the BSc degree from Tsinghua Univer[h\(n+i-1 stopanddecideH sity China in 1996 and the MS and ZC  h[\(n  i1 c ntine dtest 44 PhD degrees from the University of Con 0 h\(m  i 1 continue test necticut in 2000 and 2002 respectively oc 0 stop and decide Ho all in electrical engineering She spent two years as Research Associate of ElecAd b d ts d rtrical and Computer Engineering DeAnd based on this decision rule 44 we compute the imporpartment and Institute for Systems Research at the Univertant quantities sity of Maryland She is now an Assistant Professor in the Department of Electrical and Computer Engineering at the pO\(m  Pr\(ST ends at n and decides Ho University of British Columbia Her present research interests are in the broad areas of statistical signal processing p n  Pr ST ends at n and decides Hi r4 in Pr\(ST ends at in and decides H1 information security and wireless communications Respectively for the case that fo z  d\(z we consider a decision rule Peter Willett Peter Willett is a Profesh c s and decide H sor of Electrical and Computer EngiZne 0,h cstop 1 neering at the University of ConnectiZn E 1 0,h\(n continue test 45 _ cut Previously he was at the University oo 0 stop and decide Ho of Toronto from which he received his BASc in 1982 and at Princeton University from which he received his PhD in and compute the corresponding quantities p\260\(n and po n 1 H h w e mrt Now using p n and p n and pog\(n and po n we can  E 18.Hha rte,mogterop Now,'using a a  ics about the processing of signals from volumetric arrays calculate Pd nd i as in 41 and finally calculate the overall decentralized detection information theory CDMA learPd nd in 42 It is worth to mention that for theoretical d  ing from data target tracking and transient detection He analysis we use the infinite as the upper bound of i in 42 is a Fellow of the IEEE and is a member of the IEEE Sighowever we use a finite reasonable upper bound in practical nal Processing Society's SAM technical committee He is an calculation For instance in the Gaussian shift-in-mean appliassociate editor both for IEEE Transactions on Aerospace cations we plot p\(i vs i in figure 14 From this figure it is and Electronic Systems and for IEEE Transactions on Sysclear that p\(i decays quickly with the increase of i therefore tems Man and Cyberetics He is a track organizer for it is reasonable to consider the truncated pmf Similar obserRemote Sensing at the IEEE Aerospace Conference 2001vations could be found for the Gaussian shift-in-variance and 2003 and was co-chair of the Diagnostics Prognosis and the Exponential cases System Health Management SPIE Conference in Orlando He also served as Program Co-Chairfor the 2003 IEEE Systems 02 Man  Cybernetics Conference in Washington DC 0.18 0.16  0.14 0.12 a 0.1 0.08 0.06 0.04 0.02 100 101 102 103 Figure 14 The pmf p\(i in the Gaussian shift-in-mean case 12 


Database 1 proc 2 procs 4 procs 8 procs T5.I2.D100K 20 17 12 10 T10.I4.D100K 96 70 51 39 T15.I4.D100K 236 168 111 78 T20.I6.D100K 513 360 238 166 T10.I6.D400K 372 261 165 105 T10.I6.D800K 637 435 267 163 T10.I6.D1600K 1272 860 529 307 Table 3 Naive Parallelization of Apriori seconds   0 2 4 6 8 10 12 0 2 4 6 8 10 12 Speedup Number of Processors CCPD Ideal  T5.I2.D100K.t2   T10.I4.D100K.t2   T15.I4.D100K.t2   T20.I6.D100K.t2   T10.I6.D400K.t2   T10.I6.D800K.t2   T10.I6.D1600K.t2    0 2 4 6 8 10 12 0 2 4 6 8 10 12 Speedup Number of Processors CCPD : With Reading Time Ideal  T5.I2.D100K.t2   T10.I4.D100K.t2   T15.I4.D100K.t2   T20.I6.D100K.t2   T10.I6.D400K.t2   T10.I6.D800K.t2   T10.I6.D1600K.t2  Figure 4 CCPD Speed-up a without reading time b with reading time 13 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


Reading  f Total Time Database Time P 000 1 P 000 2 P 000 4 P 000 8 P 000 12 T5.I2.D100K 9.1s 39.9 43.8 52.6 56.8 59.0 T10.I4.D100K 13.7s 15.6 22.2 29.3 36.6 39.8 T15.I4.D100K 18.9s 8.9 14.0 21.6 29.2 32.8 T20.I6.D100K 24.1s 4.9 8.1 12.8 18.6 22.4 T10.I6.D400K 55.2s 16.8 24.7 36.4 48.0 53.8 T10.I6.D800K 109.0s 19.0 29.8 43.0 56.0 62.9 T10.I6.D1600K 222.0s 19.4 28.6 44.9 59.4 66.4 Table 4 Database Reading Time in section 4 320 computation balancing hash tree balancing and short-circuited subset checking The 336gure on the left presents the speed-up without taking the initial database reading time into account We observe that as the number of transactions increase we get increasing speed-up with a speed-up of more than 8 n 2 processors for the largest database T10.I6.D1600K with 1.6 million transactions r if we were to account for the database reading time then we get speed-up of only 4 n 2 processors The lack of linear speedup can be attributed to false and true sharing for the heap nodes when updating the subset counts and to some extent during the heap generation phase Furthermore since variable length transactions are allowed and the data is distributed along transaction boundaries the workload is not be uniformly balanced Other factors like s contention and i/o contention further reduce the speedup Table 4 shows the total time spent reading the database and the percentage of total time this constitutes on different number of processors The results indicate that on 12 processors up to 60 of the time can be spent just on I/O This suggest a great need for parallel I/O techniques for effective parallelization of data mining applications since by its very nature data mining algorithms must operate on large amounts of data 5.3 Computation and Hash Tree Balancing Figure 5 shows the improvement in the performance obtained by applying the computation balancing optimization discussed in section 3.1.2 and the hash tree balancing optimization described in section 4.1 The 336gure shows the  improvement r a run on the same number of processors without any optimizations see Table 3 Results are presented for different databases and on different number of processors We 336rst consider only the computation balancing optimization COMP using the multiple equivalence classes algorithm As expected this doesn\325t improve the execution time for the uni-processor case as there is nothing to balance r it is very effective on multiple processors We get an improvement of around 20 on 8 processors The second column for all processors shows the bene\336t of just balancing the hash tree TREE using our bitonic hashing the unoptimized version uses the simple mod d hash function Hash tree balancing by itself is an extremely effective optimization It s the performance by about 30 n n uni-processors On smaller databases and 8 processors r t s not as 14 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


