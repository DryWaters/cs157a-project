Maintaining High Utility Pattern Trees in Dynamic Databases   Chu nWei Lin Department of Computer Science and Information Engineering National Cheng Kung University Tainan, Taiwan, R.O.C p7895122@mail.ncku.edu.tw Tzung-Pei Hong Department of Computer Science and Information Engineering National University of Kaohsiung Kaohsiung, Taiwan, R.O.C Department of Computer Science and Engineering National Sun Yat-sen University Kaohsiung, Taiwan, R.O.C tphong@nuk.edu.tw Wen-Hsiang Lu Department of Computer Science and Information Engineering National Cheng Kung University Tainan, Taiwan, R.O.C whlu@mail.ncku.edu.tw   Abstract We have previously proposed the high utility pattern HUP\r utility mining. In this paper, we further handle the problem of maintaining the HUP tree in dynamic databases A HUP maintenance algorithm has thus been proposed for efficiently handling new transactions. The proposed algorithm can reduce the cost of re-constructing the HUP tree when new transactions are inserted. Experimental results also show that it indeed executes faster than the batch maintenance algorithm and generates nearly the same tree structure as the batch one The proposed maintenance algorithm can thus achieve a good trade-off between execution time and tree complexity Keywords: utility mining; maintenance; HUP tree; high utility pattern I   I NTRODUCTION  Mining frequent itemsets from a transaction database is a fundamental task for knowledge discovery. In the past numerous methods were proposed to discover frequent itemsets [1    4   T h e appr oa c h e s co ul d be  d i vi d e d i n t o  two categories: level-wise approaches and pattern-growth approaches. The Aprori algorithm w a s f i rs t p r op os ed t o  mine association rules based on a level-wise processing way The FP-growth algorithm was then proposed to construct a compressed tree structure and to mine rules based on it [9   In the above approaches, it treats all the items in a database as binary variables. In this case, frequent itemsets just reveal the occurrence importance of the itemsets in the transactions, but do not reflect any other implicit factors such as prices or profits Utility mining [12  1 3  w a s th u s p r o p o se d  t o  p a rti a lly  solve the above problem. It may be thought of as an extension of frequent-itemset mining with sold quantities and item profits considered. Liu et al presented the two-phase algorithm for fast discovering all high utility itemsets [10  based on the downward-closure property. Lin et al proposed an HUP-tree structure to construct a tight tree structure and keep related mining information, such that the database scan time can be greatly reduced. The HUP tree is a little like the FP-tree structure except that each node has been attached an array quan_Ary to keep the quantities of its prefix items in the path for later mining process. The HUP-growth mining algorithm was proposed to derive high utility itemsets from the HUP-tree structure In the HUP-tree approach, all transactions are processed in a batch way. The previously constructed HUP-tree structure may not be valid when the new transactions are inserted into the database incrementally. In this paper, an incrementally updated HUP \(abbreviated as iHUP maintenance algorithm is thus proposed. It modifies the batch procedure of constructing the HUP-tree structure for incrementally mining, which makes the tree update easier Experimental results also show that the proposed iHUP maintenance algorithm has a better performance than the batch HUP algorithm II  R ELATED W ORKS  In this section, some related researches are briefly reviewed. They are the FUP \(fast updated\orithm and the HUP-tree \(high utility pattern tree\orithm A  The FUP algorithm One common type of data mining is to derive association rules from transaction data, such that the presence of certain items in a transaction will imply the presence of some other items   real-w o r ld applications, transaction databases usually grow over time and the association rules mined from them must be re-evaluated. Considering an original database and some new inserted transactions, the following four cases illustrated in Figure 1 may aris    Original database New transactions Large Itemsets Small Itemsets Large Itemsets Small Itemsets Case 1 Case 2 Case 3 Case 4  Figure 1  Four cases when new transactions are inserted into an existing database 
2010 Second International Conference on Computer Engineering and Applications 978-0-7695-3982-9/10 $26.00 © 2010 IEEE DOI 10.1109/ICCEA.2010.67 304 


Since itemsets in Case 1 are frequent \(large\in both the original database and the new transactions, they will still be frequent \(large\fter the weighted average of the counts Similarly, itemsets in Case 4 will still be non-frequent small\fter the new transactions are inserted. Thus Cases 1 and 4 will not affect the final frequent \(large\msets. Case 2 may remove existing frequent \(large\ itemsets, and Case 3 may add new frequent \(large\msets. Based on the FUP approach, the cases 1, 2 and 4 are more efficiently handled than conventional batch mining algorithms B  The HUP-tree algorithm In association-rule mining, only binary itemsets are considered in a database. In real-world applications, however frequent itemsets just reveal the occurrence of itemsets in transactions, but do not reflect any other important factors such as prices or profits. High profitable products but with low frequencies may thus not be found in traditional association-rule mining. Yao et al proposed the utility model by considering both quantities and profits of items [12  1 3    Chan et al proposed the topic of utility mining to discover high utility itemsets [5  L i u  et al then presented a two-phase algorithm for fast discovering high utility itemsets by adopting the downward-closure property [10 a n d na m e d hi s  approach as the transaction-weighted-utilization \(TWU model. Lin et al proposed a high utility pattern tree \(HUPtree\gorithm w h i c h e x t e nded fro m t h e F P gro w t h approach, to mine the high utility itemsets from a tight tree structure. It integrated the two-phase approach n d t h e  FP-tree concept t o e ffi ci ent l y a n d e ffe c t i v e l y fi nd hi gh utility patterns. As an example, the quantitative database in Table 1 is used to show how to construct the HUP tree. It consists of 10 transactions and 6 items, denoted A to F  TABLE I  T HE Q UANTITATIVE D ATABASE  TID A B C D E F 1 3 2 0 3 0 0 2 2 0 0 4 2 0 3 3 0 5 0 0 3 4 1 0 3 0 1 2 5 1 0 0 3 2 0 6 1 2 0 4 0 0 7 2 3 2 0 1 1 8 0 0 0 0 0 2 9 0 0 3 3 0 0 10 3 0 0 4 0 0  Assume the minimum high utility threshold is set at 35 Also assume that the predefined profit values for the items are defined in a utility table shown in Table 2 In the HUP mining algorithm, it first calculates the transaction utility of each transaction to find the high transaction-weighted 1-itemsets. The algorithm then keeps only the high transaction-weighted 1-itemsets in the transactions and sorts them according to their transaction frequencies. The updated transactions are then used to build the HUP tree tuple by tuple. For the above example, the high transaction-weighted 1-itemsets with their value are found as  A 2725 B 1540 D 2080 E 1483}, each of which has its transaction-weighted utilization larger than or equal to the minimum high utility value 1022.35. Each transaction in the quantitative database is then updated to remove the items which are not the high transaction-weighted 1-itemsets. After that, the updated transactions are used to construct the high utility pattern tree \(HUP tree\ tuple by tuple. The final results of the above example are then shown in Figure 2 TABLE II  T HE U TILITY T ABLE  Item Profit A 3 B 150 C 1 D 50 E 100 F 20    root  A:2728 D:1930 A B:962 Header_Table Item twu A 2728 D 2083 E 1483 B 1540 A D A 4 D 7 B 4 E:759 A 3 D 7 E 4 E:724 A 3 E 2 B:578 A 2 E 1 B 3 D:153 D 16 10 18 3  Figure 2  The final constructed HUP tree In the HUP tree, each node has to store the transactionweighted-utilization of the item as well as the quantities of its preceding items \(including itself\ in the path. An array called quan_Ary is then attached to a node to keep those values. After the final HUP-tree is constructed, the HUPgrowth mining approach is then executed to derive the high utility itemsets from the tree [11   III  T HE P ROPOSED I NCREMENTAL U PDATED HUP  M AINTENANCE A LGORITHM  To process the incrementally updated HUP \(abbreviated as iHUP\ maintenance algorithm, an HUP tree must be built in advance from the original quantitative database before new transactions come. When new transactions are inserted the proposed maintenance algorithm will then process them to maintain the HUP tree. The proposed approach first partitions the items into four parts according to whether they are high transaction-weighted \(indicated as large\ 1-itemsets or non-high transaction-weighted \(indicated as small\ 1itemsets in the original database and in the new transactions Each part is then processed by its own procedure. The Header_Table and the HUP tree are correspondingly updated whenever necessary. The details of the proposed iHUP maintenance algorithm are described below  
305 


The incrementally updated HUP maintenance algorithm   INPUT An old database D an already built HUP tree with its corresponding Header_Table, a minimum high utility threshold  an already calculated total transaction utility in the original database, and a set of d new transactions OUTPUT A new HUP tree for the updated database STEP 1 Calculate the utility value u jk of each item i j in each new transaction t k as u jk  q jk  p j where q jk is the quantity of i j in t k and p j is the profit of i j  Accumulate the utility values of all the items in each transaction t k as the transaction utility tu k for t k That is  1   m j jk k u tu  where m is the number of items STEP 2 While executing the above step, also find the occurrence frequency f  i j item i j in the new transactions STEP 3 Calculate the transaction-weighted utilization abbreviated as S d  i j each item i j as the summation of the utilities of the new transactions which include i j That is      k j t i k j d tu i S  STEP 4 Check whether the value of S d  i j er than or equal to the minimum high utility value  d t k k tu   in the new transaction database STEP 5 For each item i j which is large both in the new transactions and in the original database appearing in the Header_Table\e following substeps Case 1  Substep 5-1 Set the  updated  transactionweighted utilization S U  i j f item i j  in the entire updated database as S U  i j  S D  i j  S d  i j  where S D  i j e transaction-weighted utilization of item i j in the Header_Table \(appearing in the original database\d S d  i j is the transaction weighted utilization of item i j in the new transactions Substep 5-2 Update the value of i j in the Header_Table as S U  i j  Substep 5-3 Put i j in the set of Insert_Items  which will be further processed in STEP 10 STEP 6 For each item i j which is small in the new transactions but large in the original database appearing in the Header_Table\e following substeps Case 2  Substep 6-1 Set the  updated  transactionweighted utilization S U  i j f item i j in the entire updated database as S U  i j  S D  i j  S d  i j  Substep 6-2 Check whether the value S U  i j  item i j  satisfies the following condition      d t k D T k j U k k tu tu i S        where T k and t k mean the k th transaction in the original database and in the new transactions respectively. If item i j satisfies the above condition, it will still be large after the database is updated; then update the value of i j in the Header_Table as S U  i j d add i j to the set of Insert_Items  Otherwise, item i j will become small after the database is updated; remove i j from the Header_Table and from the HUP tree, connect each parent node of i j  directly to the corresponding child node of i j and update its corresponding child node of i j in the path to remove i j of its attached array quan_Ary  STEP 7 For each item i j  which is large in the new transactions but small in the original database \(not appearing in the Header_Table\ the following substeps Case 3  Substep 7-1 Rescan the original database to find out each transaction utility of item i j in the original database, calculate the transactionweighted-utilization of item i j and set it as S D  i j  Substep 7-2 Set the updated transactionweighted utilization S U  i j f item i j in the entire updated database as S U  i j  S D  i j  S d  i j  Substep 7-3 Check whether the value S U  i j  item i j  satisfies the following condition     d t k D T k j U k k tu tu i S        where T k and t k mean the k th transaction in the original database and in the new transactions respectively. If item i j satisfies the above condition, it will be large after the database is updated; add item i j both in the set of Insert_Items  and in the set of Rescan_Items  STEP 8 Sort the items in the Rescan_Items in the descending order of their transaction frequencies f  i j and sequentially insert them with their S U  i j  values to the end of the Header_Table STEP 9 For each original transaction with an item i j  existing in the Rescan_Items do the following substeps Substep 9-1 If an item i j in the currently processed k th transaction has appeared at the 
306 


corresponding path of the HUP tree, add the transaction utility tu k calculated in Substep 7-1 to the node i j as its accumulated value. Besides add the quantities of the prefix items of i j to the corresponding elements of the quan_Ary array in the node, which stores the accumulated quantities of the prefix items of i j  Substep 9-2 Otherwise, add a node with i j to the end of the corresponding path and set the utility value tu k in the k th transaction as its value in the node. Besides, set the quantities of the prefix items of i j in the transaction to the corresponding elements of the array quan_Ary the node. At last, insert a link from the node of i j in the last branch to the current node. If there is no such branch, insert a link from the entry of i j in the Header_Table to the current node STEP 10 For each new transaction with an item i j existing in the Insert_Items do the following substeps Substep 10-1 If an item i j in the currently processed k th transaction has appeared at the corresponding path of the HUP tree, add the transaction utility tu k to the node with i j in the path as its accumulated value. Besides, add the quantities of the prefix items of i j to the corresponding elements of the quan_Ary array in the node, which stores the accumulated quantities of the prefix items of i j  Substep 10-2 Otherwise, add a node with i j to the end of the corresponding path and set the utility value tu k in the k th transaction as its value in the node. Besides, set the quantities of the prefix items of i j in the transaction to the corresponding elements of the array quan_Ary the node. At last, insert a link from the node of i j  in the last branch to the current node. If there is no such branch, insert a link from the entry of i j in the Header_Table to the current node  After STEP 10, the final updated HUP tree is then constructed. Note in STEP 9, a corresponding path means a path in the tree which corresponds to the items to be processed in a transaction according to the order of items appearing in the Header_Table. Besides, STEPs 9 and 10 can be simultaneously done in a database scan. Below, an example is given to illustrate the proposed iHUP maintenance algorithm when new transactions are inserted IV  A N E XAMPLE  In this session, an example is given to illustrate the proposed incrementally updated HUP \(iHUP\aintenance algorithm when new transactions are inserted. The original database and its already constructed HUP tree are shown in Table 1 and Figure 2, respectively. Table 3 shows the new transactions to be inserted to the original database in Table 1 There are 5 new transactions. The items are the same as those in Table 1 TABLE III  F IVE N EW I NSERTED TRANSACTIONS  TID A B C D E F 11 3 0 4 8 0 0 12 3 0 3 7 0 0 13 3 0 2 6 0 0 14 1 0 0 0 1 1 15 4 3 0 0 0 0  Assume the minimum high utility threshold is also set at 35%. The minimum high utility value was calculated as 1022.35\. The utility value of each item occurring in each new transaction in Table 3 is calculated The transaction-weighted util izations of each item in the transactions are summed together. After that, all the items are then divided into four cases and are then processed in their individual ways. The final updated HUP tree is thus shown in Figure 3   root  A:4399 D:3016 A B:962 Header_Table Item twu A4399 D3169 B2002 C2037 A D A 4 D 7 B 4 B:1040 A 6 B 6 D:153 D 30 19 39 3 C:220 C:578 C:153 A 2 C 2 B 3 A 4 C 8 D 3 C 3 C:1086 A 9 D C 9 21  Figure 3  The final updated iHUP tree V  E XPERIMENTAL R ESULTS  A real dataset called chess was used in the experiments 8 T h e v a lu es o f q u an tit y a n d u tilit y  w e re ass i g n ed to each  purchased item in the database. The range was set at from 1 to 20 for quantity, and from 1 to 200 for utility, respectively in uniform distribution. Experiments were then made to show the execution time of the batch HUP algorithm and the proposed iHUP maintenance algorithm, which included the tree-construction phase and the mining phase. The first 3,000 transactions were extracted from the chess database to construct an initial HUP-tree structure. The value of the minimum support thresholds were set at 70% to 90% for the two algorithms, with 5% increment each time. The next 1 of the first transactions, which was 30, was then used in incremental mining. The results for the execution time of the two algorithms are shown in Figure 4 From Figure 4, it is obvious to see that the proposed iHUP maintenance algorithm has a better performance than the batch HUP mining algorithm in five different minimum utility thresholds. Besides, the number of tree nodes for the HUP-tree and iHUP-tree is also compared. The results are shown in Figure 5 From Figure 5, it can be seen that the two algorithms generated nearly the same size of trees. The effectiveness of the iHUP maintenance algorithm is thus acceptable  
307 


 Figure 4  The comparsion of execution time   Figure 5  The comparsion of node numbers VI  C ONCLUSION  In this paper, an incrementally updated HUP maintenance algorithm is proposed to efficiently and effectively handle incremental mining. When new transactions are added, the proposed iHUP maintenance algorithm processes them to maintain the HUP tree Experimental results show that the proposed algorithm executes faster than the batch HUP mining algorithm Besides, the number of tree nodes is also evaluated to show that the proposed algorithm generates nearly the same tree structure as the HUP tree. The proposed approach can thus achieve a good trade-off between execution time and tree complexity R EFERENCES  1  R. Agrawal, T. Imielinski, and A. Swami, Mining association rules between sets of items in large database, The ACM SIGMOD International Conference on Management of Data, pp. 207-216, 1993 2  R. Agrawal, T. Imielinski, and A. Swami, Database mining: a performance perspective, IEEE Transactions on Knowledge and Data Engineering, Vol. 5, No. 6, pp. 914-925, 1993 3  R. Agrawal and R. Srikant, Fast algorithm for mining association rules, The International Conference on Very Large Data Bases, pp 487-499, 1994 4  M. S. Chen, J. Han, and P. S. Yu, Data mining: an overview from a database perspective, IEEE Transactions on Knowledge and Data Engineering, Vol. 8, No. 6, pp. 866-883, 1996 5  R. Chan, Q. Yang, and Y. D. Shen, Mining high utility itemsets The Third IEEE International Conference on Data Mining, pp. 19-26 2003 6  D. W. Cheung, J. Han, V. T. Ng, and C. Y. Wong, Maintenance of discovered association rules in large databases: an incremental updating approach, The Twelfth IEEE International Conference on Data Engineering, pp. 106-114, 1996 7  D. W. Cheung, S. D. Lee, and B. Kao, A general incremental technique for maintaining discovered association rules, International Conference on Database Systems for Advanced Applications, pp 185-194, 1997 8  Frequent itemset mining dataset repository http://fimi.cs.helsinki.fi/data 9  J. Han, J. Pei, and Y. Yin, Mining frequent patterns without candidate generation, The ACM SIGMOD International Conference on Management of Data, pp. 1-12, 2000   Y. Liu, W. K. Liao, and A. Choudhary, A fast high utility itemsets mining algorithm, The First International Workshop on UtilityBased Data Mining, pp. 90-99, 2005   C. W. Lin, T. P. Hong, and W. H. Lu, High utility pattern trees, The 20th Workshop on Object-Oriented Technology and Applications 2009   H. Yao and H. J. Hamilton, Mining itemset utilities from transaction databases, Data and Knowledge Engineering, Vol. 59, Issue 3, pp 603-626, 2006   H. Yao, H. J. Hamilton, and C. J. Butz, A foundational approach to mining itemset utilities from databases, The Fourth SIAM International Conference on Data Mining, pp. 482-486, 2004  
308 


1516   Fig.8 Results in weka  References   on-Mu Liu. T i m e series analysis and Second Edition. U.S.A.:Scientific Computing Associates Corp, 2006:1-565 2 ictor Lav r en ko Matt Sch m i ll, Dawn  Lawrie, Pau l  Ogilvie, David Jensen, James Allan. Mining of concurrent text and time series[C I n p r oce e d i n gs o f t h e 6 th ACM SIGKDD Int'l Conference on Knowledge Discovery and Data Mining Workshop on Text Mining 2000:37-44  T ek bas O H.. M odel i ng of c h a o t i c t i m e seri es usi ng a  valuable length windowing approa ao s Solutions & Fractals, 2006, 29\(2\:277-281  W an g Xi t ao. S t u d y on t h e a ppl i cat i o n of  AR IM A  model in time-bargain fo recast ommerce and Logistics, 2006, 22\(15\:139-140  C he n A. S  Leu n g  M  T  Da ou k H A ppl i cat i o n o f Neural Networks to an emerging financial market Forecasting and trading the taiwan Computers & Operations Research, 2003, 30\(6\:901-923  esh Selvaratnam  Michael Kirley Predicting stock market time series using evolutionary Artificial Neural Networks with hurst exponent input windows AI2006:Advances in Artificial Intelligence, 2006 617-626  L e ndas s e, A  de B o dt E., W e rt z, V  V e rl ey sen M  Non-linear financial time se ries forecasting-application to the bel 20 sock market index E u r o pe an Jo u r nal  of Economic and Social Systems, 2000, 14\(1\81-91  W en Xie L ean Y u  Sha n ying Xu Shouy a ng W a ng. A  new method for crude oil price forecasting based on Support Vector Machin  The 6 th International Conference on Computational Science, 2006:444-451  ng, W  Na kam o ri, Y W a ng S.Y   Forecasting stock market movement direction with support vector  C o m puters & Op erations Researh, 2005 32\(10\:2513-2522 10 Mu ller  K R., Sm o l a, J A Scho lkop f, B. Pred ictio n  time series with support vector machin In Proceedings of Internati onal Conference on Artificial Neural Networks, Lausanne, 1997:999-1004  11 W e imin T o ng  Y ijun Li W a v e let m e th o d co m b in in g  BP networks and time series ARMA modeling for data mining forecasting NC: In tern atio nal Co n f eren ce on Advances in Natural Computation, 2005:123-134 12 Mo nah a n  Jo hn F   Fully Bayesian an alysis of ARIMA time series models[J Jo ur nal  o f E c on om et ri cs 1983, 21\(3\:307-331  n Ki m   Chulhyun Kim. Forecasting time series with genetic fuzzy predictior ensemb Transactions on Fuzzy Systems, 1997, 5\(4\:523-535 1 R. A g ra w a l, R. Sri k ant Fast algo rith m s for m i ning  association rules in large databases Proceedi n gs of the 20th Int\222l Confer ence of Very Large Databases\(VLDB\22294\, 1994: 478-499 1 R  J. B a y a rd o, R   A g ra wal  M i ni ng t h e m o st interesting rul t h ACM SIGKDD Int\222l Conf 


1517  On Knowledge Discovery And Data Mining 1999:145-154  a. Carlo, Com b i. Riccardo Bellazzi. Data Mining with temporal abstractions:learning rules fr om time se  Mining and Knowledge Discovery, 2007, 15\(2\217-247 1 M i ng j un S o n g San g u t h e v ar R a jase kara n M e m b er  IEEE. A transaction mapping algorithm for frequent item sets mining[C IEE E T r ansa ct i ons on K n o w l e d g e a n d  Data Engineering, 2006, 18\(4\:472-481 18 Y  Bastid e, R. T a ou il, N. Pasqu i er  G   S t u mme, L Lakhal. Mining frequent patterns with counting inference I n SIG K DD E xpl orat i o ns 2 0 0 0  2 2 6 6 75    Bashir  S  S huai b  M  S u ltan Y    Baig A  R  Improving frequent itemset mining algorithms performance using efficient implementation techniques A benchmark solution[C   In Proc. 2006 2nd Int. Conf on Emerging Technologies \(IEEE-ICET'06\, Peshawar Pakistan, 2006:257-262 2 W a ssim A Y AD I K h e d ija AR OUR  A  binary  decisio n  diagram to discover low threshold support frequent items 8 th In tern atio n a l W o rkshop on Datab a se and Expert Systems Applications, 2007:509-513 21 C. B o r g elt. Ef ficien t im p l e m en tatio n  o f apriori and eclat[C]. In FIM I\22203: Proceedings of the IEEE ICDM Workshop on Frequent Item Set Mining Implementations Meldourne, USA, 2003, 80:1-9 22 Ch ed y Raissi, Pascal Po n celet, Maguelonne Teisseire SPEED: Mining maximal sequential patterns over data stream 3rd I n ternati onal IEEE Conference on Intelligent Systems, 2006:546-552 23 J. Pei, J Han W   W a n g Min i ng sequen tial p attern s with constraints in large data bases In Proceedi n gs of the 10th International Conference on Information and Knowledge Management\(CIKM02\, MCLean, USA 2002:18-25 24 M. Klemettin en H.Man n ila P   R o n k ai n en, H Toivonen, A. I. Verkamo. Finding interesting rules from large sets of discovered asso ciation ru  3 r d  In t\222l Conference on Information and Knowledge Management 1994:401-407 2 M o h a m m e d J Za ki  Scal abl e al go ri t h m s fo r  association mining EEE T r an sacti o n s  on K now ledg e and Data Mining, 2000, 12\(3\:372-390 26 R. Sri k an t, R. Agrawal. Min i n g sequ ential p attern s  Generalizations and performance improvements[C In  Proceedings of the 5th In ternational Conference on Extending Database Technology \(EDBT96\, Avignon France, 1996:3-17 2 D o u g B u r d i c k, M a nuel  C a l i m l im Johanne s Ge hr ke  MAFIA: A maximal frequent itemset algorithm for transactional databases[C]. In Proceedings of the 17th International Conference on Data Egineering, Heidelberg Germany, 2001:443-452  2 J. F. Boulicaut, A. Bykows ki, C. Rigotti. Free-sets A condensed representation of boolean data for the approximation of frequency queri  Dat a M i ni n g a n d  Knowledge Discovery, 2003,7\(1\:5-23  


 J  urgen Bohn Felix G  artner and Harald Vogt Dependability Issues of Pervasive Computing in a Healthcare Environment in Security in Pervasive Computing  Springer Berlin  Heidelberg 2004  K V enkatasubramanian and S K Gupta In Security in Distributed Grid Mobile and Pervasive Computing  Auerbach Publications CRC Press 2007 ch Security Solutions for Pervasive Healthcare pp 443464  D E Denning Intrusion-Detection Model  IEEE Trans Software Eng  vol 13 no 2 pp 222232 1987  F  Stajano Security for Ubiquitous Computing  i n ICISC  ser Lecture Notes in Computer Science C Park and S Chee Eds vol 3506 Springer 2004 p 2  A Abimbola Q Shi and M Merabti NetHost-Sensor A Novel Concept in Intrusion Detection Systems in ISCC 03  Washington DC USA IEEE Computer Society 2003 p 232  D E Denning An Intrusion-Detection Model  IEEE Trans Softw Eng  vol 13 no 2 pp 222232 1987  M Roesch Snort Lightweight Intrusion Detection for Networks in LISA  Berkeley CA USA USENIX Association 1999 pp 229238  G V igna F  V aleur  and R A K emmerer  Designing and Implementing a Family of Intrusion Detection Systems in ESEC/FSE-11  New York NY USA ACM 2003 pp 88 97  J E Bardram  Applications of Conte xt-A w are Computing in Hospital Work Examples and Design Principles in Proceedings of the 2004 ACM Symposium on Applied Computing  ACM Press 2004 pp 15741579  M Baldauf S Dustdar  and F  Rosenber g A Surv e y on Context-Aaware Systems Int J Ad Hoc Ubiquitous Comput  vol 2 no 4 pp 263277 2007  V  Stanford Using Perv asi v e Computing to Deli v e r Elder Care IEEE Pervasive Computing  vol 1 no 1 pp 1013 2002  J H Jahnk e T o w ards Conte xt-A w are Computing in Clinical Care OOPSLA Workshop on Building Software for Pervasive Computing  2005  U V arshne y  Perv asi v e Healthcare  IEEE Computer  vol 36 no 12 pp 138140 2003  R K emmerer and G V igna Intrusion detection A Brief History and Overview IEEE Security and Privacy Magazine  2002  K e W ang and Salv atore J Stolfo  Anomalous payload-based network intrusion detection in RIAD  ser Lecture Notes in Computer Science Springer 2004 pp 203222  Salv atore J Stolfo and Frank Apap and Eleazar Eskin and Katherine Heller and Shlomo Hershkop and Andrew Honig and Krysta Marie Svore A comparative evaluation of two algorithms for Windows Registry Anomaly Detection Journal of Computer Security  vol 13 no 4 pp 659693 2005  U Lindqvist and P  A Porras Detecting Computer and Network Misuse Through the Production-Based Expert System Toolset P-BEST in S&P  IEEE Computer Society 1999  W ojciech T ylman Misuse-Based Intrusion Detection Using Bayesian Networks International Conference on Dependability of Computer Systems  pp 203210 2008  G V igna and C Krue gel Handbook of Information Security  Wiley 2005 ch Host-based Intrusion Detection Systems  A A M Mehdi S Zair and M Bensebti  A bayesian networks in intrusion detection systems Journal of Computer Science  vol 3 no 5 2007  W S Y ang  and S.-Y  H w ang A process-mining Framework for the Detection of Healthcare Fraud and Abuse Expert Systems with Applications  vol 31 pp 5668 2006  Bezerra F  abio and Wainer Jacques Anomaly detection algorithms in logs of process aware systems in SAC 08 Proceedings of the 2008 ACM symposium on Applied computing  ACM 2008 pp 951952  G A R Pedro A Orte ga Cristian J Figueroa A Medical Claim Fraud/Abuse Detection System based on Data Mining:A Case Study in Chile in DMIN06  The 2006 World Congress in Computer Science Computer Engineering and Applied Computing 2006 pp 224231  Hipp Jochen and G  untzer Ulrich and Nakhaeizadeh Gholamreza Algorithms for association rule minin g  a general survey and comparison SIGKDD Explor News  vol 2 no 1 pp 5864 2000  P  L Frans Coenen and S Ahmed Data Structure for Association Rule Mining T-Trees and P-Trees IEEE Transactions on Knowledge and Data Engineering  vol 16 no 6 2004  K S Mafruz Zaman Ashra Da vid T aniar  Odam An optimized distributed association rule mining algorithm IEEE Distributed Systems Online  vol 5 no 3 March 2004  W  Lee and S J Stolfo  A frame w o rk for constructing features and models for intrusion detection systems ACM Trans Inf Syst Secur  vol 3 no 4 pp 227261 2000  R Agra w al T  Imieli  nski and A Swami Mining association rules between sets of items in large databases in SIGMOD 93 Proceedings of the 1993 ACM SIGMOD international conference on Management of data  New York NY USA ACM 1993 pp 207216  K Hu Y  Lu L Zhou and C Shi Inte grating classication and association rule mining A concept lattice framework in RSFDGrC99  London UK Springer-Verlag 1999 pp 443447  S F orrest S A Hofme yr  A  Somayaji and T  A Longstaf f A Sense of Self for Unix Processes in SP 96  Washington DC USA IEEE Computer Society 1996 p 120  B D Caulkins J Lee and M W ang A Dynamic Data Mining Technique for Intrusion Detection Systems in ACMSE 43  New York NY USA ACM 2005 pp 148153 


Application of Chaotic Particle Swarm Optimization Algorithm in Chinese Documents Classification 763 Dekun Tan Qualitative Simulation Based on Ranked Hyperreals 767 Shusaku Tsumoto Association Action Rules and Action Paths Triggered by Meta-actions 772 Angelina A. Tzacheva and Zbigniew W. Ras Research and Prediction on Nonlinear Network Flow of Mobile Short Message Based on Neural Network 777 Nianhong Wan, Jiyi Wang, and Xuerong Wang Pattern Matching with Flexible Wildcards and Recurring Characters 782 Haiping Wang, Fei Xie, Xuegang Hu, Peipei Li, and Xindong Wu Supplier Selection Based on Rough Sets and Analytic Hierarchy Process 787 Lei Wang, Jun Ye, and Tianrui Li The Covering Upper Approximation by Subcovering 791 Shiping Wang, William Zhu, and Peiyong Zhu Stochastic Synchronization of Non-identical Genetic Networks with Time Delay 794 Zhengxia Wang and Guodong Liu An Extensible Workflow Modeling Model Based on Ontology 798 Zhenwu Wang Interval Type-2 Fuzzy PI Controllers: Why They are More Robust 802 Dongrui Wu and Woei Wan Tan Improved K-Modes Clustering Method Based on Chi-square Statistics 808 Runxiu Wu Decision Rule Acquisition Algorithm Based on Association-Characteristic Information Granular Computing 812 JianFeng Xu, Lan Liu, GuangZuo Zheng, and Yao Zhang Constructing a Fast Algorithm for Multi-label Classification with Support Vector Data Description 817 Jianhua Xu Knowledge Operations in Neighborhood System 822 Xibei Yang and Tsau Young Lin An Evaluation Method Based on Combinatorial Judgement Matrix 826 Jun Ye and Lei Wang Generating Algorithm of Approximate Decision Rules and its Applications 830 Wang Yun and Wu-Zhi Qiang Parameter Selection of Support Vector Regression Based on Particle Swarm Optimization 834 Hu Zhang, Min Wang, and Xin-han Huang T-type Pseudo-BCI Algebras and T-type Pseudo-BCI Filters 839 Xiaohong Zhang, Yinfeng Lu, and Xiaoyan Mao A Vehicle License Plate Recognition Method Based on Neural Network 845 Xing-Wang Zhang, Xian-gui Liu, and Jia Zhao Author Index 849 
xiii 


   C4.2 Open GL has excellent documentation that could help the developer learn the platform with ease C4.3 Developer has very little ex perience in working with Open GL platform  For our case study, alternative B i.e. Adobe Director was the most favorable alternative amongst all the three. It catered to the reusability criteria quite well and aimed at meeting most of the desired operational requirements for the system   6. CONCLUSION & FUTURE WORK  The main contribution of this paper is to develop an approach for evaluating performance scores in MultiCriteria decision making using an intelligent computational argumentation network. The evaluation process requires us to identify performance scores in multi criteria decision making which are not obtained objectively and quantify the same by providing a strong rationale. In this way, deeper analysis can be achieved in reducing the uncertainty problem involved in Multi Criteria decision paradigm. As a part of our future work we plan on conducting a large scale empirical analysis of the argumentation system to validate its effectiveness   REFERENCES  1  L  P Am g o u d  U sin g  A r g u men ts f o r mak i n g an d  ex p lain in g  decisions Artificial Intelligence 173 413-436, \(2009 2 A  Boch m a n   C ollectiv e A r g u men tatio n    Proceedings of the Workshop on Non-Monotonic Reasoning 2002 3 G  R Bu y u k o zk an  Ev alu a tio n o f sof tware d e v e lo p m en t  projects using a fuzzy multi-criteria decision approach Mathematics and Computers in Simualtion 77 464-475, \(2008 4 M T  Chen   F u zzy MCD M A p p r o ach t o Selec t Serv ice  Provider The IEEE International Conference on Fuzzy 2003 5 J. Con k li n  an d  M. Beg e m a n   gIBIS: A Hypertext Tool for Exploratory Policy Discussion Transactions on Office Information Systems 6\(4\: 303  331, \(1988 6 B P  Duarte D e v elo p in g a p r o jec ts ev alu a tio n sy ste m based on multiple attribute value theroy Computer Operations Research 33 1488-1504, \(2006 7 E G  Fo rm an  T h e  A n a l y t ic Hier a rch y P r o cess A n  Exposition OR CHRONICLE 1999 8 M. L ease  an d J L  L i v e l y  Using an Issue Based Hypertext System to Capture Software LifeCycle Process Hypermedia  2\(1\, pp. 34  45, \(1990 9  P e id e L i u   E valu a tio n Mo d e l o f Custo m e r Satis f a c tio n o f  B2CE Commerce Based on Combin ation of Linguistic Variables and Fuzzy Triangular Numbers Eight ACIS International Conference on Software Engin eering, Artificial Intelligence Networking and Parallel Distributed Computing, \(pp 450-454 2007  10  X  F L i u   M an ag e m en t o f an In tellig e n t A r g u m e n tatio n  Network for a Web-Based Collaborative Engineering Design Environment Proceedings of the 2007 IEEE International Symposium on Collaborative Technologies and Systems,\(CTS 2007\, Orlando, Florida May 21-25, 2007 11 X. F L i u   A n In ternet Ba se d In tellig e n t A r g u m e n tatio n  System for Collaborative Engineering Design Proceedings of the 2006 IEEE International Symposium on Collaborative Technologies and Systems pp. 318-325\. Las Vegas, Nevada 2006 12 T  M A sub jec tiv e assess m e n t o f altern ativ e m ission  architectures for the human exploration of Mars at NASA using multicriteria decision making Computer and Operations Research 1147-1164, \(June 2004 13 A  N Mo n ireh  F u zzy De cisio n Ma k i n g b a se d o n  Relationship Analysis between Criteria Annual Meeting of the North American Fuzzy Information Processing Society 2005 14 N  P a p a d ias HERMES Su p p o rti n g A r g u m e n tative  Discourse in Multi Agent Decision Making Proceedings of the 15th National Conference on Artifical Intelligence \(AAAI-98  pp. 827-832\dison, WI: AAAI/MIT Press,  \(1998a 15  E. B T riantaph y llo u   T h e Im p act o f  Ag g r e g atin g Ben e f i t  and Cost Criteria in Four MCDA Methods IEEE Transactions on Engineering Management, Vol 52, No 2 May 2005 16 S  H T s a u r T h e Ev alu a tio n o f airlin e se rv ice q u a lity b y  fuzzy MCDM Tourism Management 107-115, \(2002 1 T  D W a n g  Develo p in g a f u zz y  T O P S IS app r o ach  b a sed  on subjective weights and objective weights Expert Systems with Applications 8980-8985, \(2009 18 L  A  Zadeh  F u z z y Sets   Information and Control 8  338-353, \(1965  152 


                        





