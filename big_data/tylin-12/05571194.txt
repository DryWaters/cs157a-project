An Improved Method of Outlier Detection based on Frequent Pattern Weiwei Zhang Department of Computer Science Zhuhai College, Jinan University Zhuhai 519070, P.R.China E-mail: zww16@yahoo.com.cn Jianhua Wu Department of Computer Science Zhuhai College, Jinan University Zhuhai 519070, P.R.China E-mail: tjhwu@jnu.edu.cn Jie Yu Department of Computer Science Zhuhai College, Jinan University Zhuhai 519070, P.R.China E-mail: jifish@foxmail.com  Abstract Outlier detection is an interesting data mining task which detects rare events. This paper focuses on the method of outlier detection based on frequent pattern \(FP method for short\ First we analyze the drawback of this method, and then 
an improved method \(LFP method for short\s been presented. Finally, we evaluate the two methods by using several datasets and the experiment results show that LFP method outperforms FP method Keywords- data mining; association rules; frequent pattern outlier detection I   I NTRODUCTION  Data mining is the process of extracting interesting patterns from large amounts of data [1 O u t l i e r  de t e c t i o n a nd analysis is an interesting data mining task, which detects rare events, deviant objects, and exceptions. It has been widely used in many practices, such as fraud detection, marketing analysis, medical analysis and network intrusion. In the field of data mining, there are many useful methods of outlier detection [3-6  T h ey  are u s ef u l  tech n i qu es on ou tli e r  
detection available for numerical data. However, they perform not well in discrete data or transaction data. This paper proposes a method especially for dicovering outliers in discrete datasets, which performs well in transaction datasets and is efficent and easy to implement In this paper, we focus on the method of outlier detection based on frequent patterns \(FP method for short\. First we describe the core algorithm and analyze the drawback of this method, and then we propose an improved method \(LFP method for short\ and also present its algorithm. Finally, we evaluate the two methods by using several datasets and the experiment results show that the LFP method outperforms the FP method This paper mainly makes the following contributions 
a  Summarize the FPOF measure and the FP algorithm for outlier detection Zengyou He et al. propose this outlier detection method based on frequent patterns in  e  n a m e it FP  m e th od f o r con v e nien ce  b  Analyze the drawback of FP method FP method has duplicate computing problem so that it couldnot detect outliers precisely c  Propose an improving method, LFP method In this method we define a new outlier measure LFPOF, and we offer a new algorithm to detect outliers d  The proposed LFP algorithm is easy to implement and efficent in time complexity e  Experimental evaluation We evaluate the two 
methods by using several datasets which are real world dataset and the experiment results show that LFP method outperforms FP method 000\003 II  F REQUENT P ATTERN B ASED O UTLIER D ETECTION  A  Frequent Pattern based Outlier Detection Zengyou He et al. proposed a frequent pattern based outlier detection met   T h i s m e t hod re gar d s  a s  o u t l i e rs those data points which contain infrequent patterns. In other words, if a data object contains more frequent patterns, it means that this data object is unlikely to be an outlier 1  FPOF Measure for Outliers FP method defines a measure called 
FPOF that reflects the normal degree of a transaction. Let F be a complete set of frequent itemsets mined from input data with a given threshold min_sup and let sup\(X be a support value of an frequent itemset X and X 002 F The normal degree FPOF\(t of a transactions t is derived as  sup  FPOF\(t  XtXF X F 003\004 002 000 1 The numerator of this formula \(1\ represents the sum of support degree of all frequent patterns contained in 
transaction X The denominator defines the number of frequent patterns that F contains. Therefore, a transaction that contains more frequent patterns is more normal, while one that contains less frequent patterns is more abnormal and more possible to be an outlier 2  FP Algorithm This FP algorithm is listed in Table 004 First the algorithm generates the frequent pattern set F from the dataset with a given minisupport. Then, for each transaction t  in the dataset T traverse every frequent pattern X in F if 
t 005 X then FPOF\(t  FPOF\(t  support\(X When the traversing is finished, the sum of support degrees of all satisfied frequent patterns is clear, and the final value of t s FPOF is computed. After all transacion in T is computed Order all the transactions by their FPOF value in ascend Finally, the topk FP-outliers are output TABLE I  FP  A LGORITHM D ESCRIPTION  
2010 WASE International Conference on Information Engineering 978-0-7695-4080-1/10 $26.00 © 2010 IEEE DOI 10.1109/ICIE.2010.97 3 


Input transaction dataset T  user defined threshold minimal support min_sup  user defined threshold value for top k fp-outlier Output top k outliers corresponded with the k lowest FPOF values 1  Mining the set of frequent patterns F on database T using minisupport min_sup  2  for each transaction t 002 T  3   FPOF\(t 0 4   for each frequent pattern X 002 F  5   if  t 005 X  6   FPOF\(t  FPOF\(t  support\(X  7   end if  8   end for  9   FPOF\(t  FPOF\(t  F.size  10  end for  11  Order the transactions in the ascending by their FPOF values 12  Output the top k transactions as outliers B  Drawback of FP Method Let t be a transaction in transaction dataset T  t 002 T let X   I1, I2, I5  Ii 002 I  I is the itemset of T We suppose X is a frequent pattern of frequent pattern set F  X 002 F All the nonempty subsets of X are derived as I1, I2  I1, I5  I2 I5  I1  I2  I5 Let t contains X so that t 005 X and t also contains all the subsets of X Because X is a frequent pattern the subsets of X must be frequent patterns too. Therefore when FP algorithm is used to compute t s FPOF value, the support degrees of X and X s subsets are duplicate added This duplicate computing will enlarge the differentials of normal degrees among transactions. In such a case, the outlier measure FPOF cannot reflect the normal degree of transactions accurately Targeting at the above drawback of FP method, we propose an improved method, named LFP method. LFP method redefines the outlier measure and has solved duplicate added problem well, so this method could detect outliers more precisely and increase the rate of accuracy III  A N I MPROVED M ETHOD  A  LFPOF Measure for Outliers We assume that here exist frequent pattern fp1  I1, I3 I5, I6  002 fp2  I3, I5  002 fp3  I5, I6 and fp1 005 fp2 002 fp1 005 fp3  then frequent pattern fp1 is defined as a superset frequent pattern of fp2 and fp3 frequent pattern fp2 and fp3 are defined as subsets frequent pattern of fp1  Importantly in the frequent pattern mining process, a superset frequent pattern that contains more items \(has long length\s combined by subset frequent pattens that contains less items \(has short length\. So the longer a superset frequent pattern is, the more its subset frequent patterns are Then we could conclude that a transaction that contains longer superset frequent patterns is more likely to be a normal transaction because it has more subset frequent patterns than other transactions. In contrast, a transaction that contains short frequent patterns is more likely to be an outlier According to the above idea, we define a new measure called LFPOF that reflects the normal degree of a transaction. Let t be a transaction in T let F be a complete set of frequent itemsets F\(t is a frequent pattern set which composes of  frequent patterns contained in t  F\(t is derived as F\(t  X  X 002 F 004  t 005 X  Let X max be the longest frequent pattern in F\(t  X max  represents the length of X max  t represents the length of transaction t then we have   max    X LFPOF t t  2 The numerator shows that a transaction contains longer frequent pattern is more normal B  LFP Algorithm This LFP algorithm is shown in Table 004 The process of LFP algorithm is as follows. First the algorithm using FPgrowth algorithm to generate the frequent pattern set F  Then, for each transaction t in the dataset T get t s frequent pattern set F\(t Find the longest frequent pattern X max in F\(t  After that, we could compute t s normal degree LFPOF\(t  When the traversing is over, the value of every t s LFPOF is computed. Then order all the transactions by their LFPOF  value in ascend. At the end, the topk FP-outliers are output TABLE II  LFP  A LGORITHM D ESCRIPTION  Input transaction dataset T  user defined threshold minimal support min_sup  user defined threshold value for top k lfp-outlier Output top k outliers corresponded with the k lowest LFPOF values 1  Using FP-growth algorithm to mine the frequent pattern set F on database T using minisupport min_sup  2  for each transaction t 002 T  3   LFPOF\(t 0 4   for each frequent pattern X 002 F  5   if  t 005 X  6   F\(t\.add\(X add frequent pattern X to F\(t 7    end if  8   end for  9  Find the longest frequent pattern X max in F\(t  10   LFPOF\(t  X max  t  11  end for  12  Order the transactions in the ascending by their LFPOF value 13  Output the top k transactions as outliers C  LFP Algorithm Performance Analysis The computational cost of LFP algorithm is mainly composed of two parts: fisrt, the cost of generating frequent pattern set using FP-growth algorithm [9  s e co n d t h e co st of double circulation in line 2–9. The time complexity of generating frequent pattern set using FP-growth algorithm increases fast as the scale of the transaction dataset gets larger. When the scale of dataset is extremely large, the algorithm’s computational time will get quite long. Anyway FP-growth algorithm is much more efficent than Apriori algorithm. The double circulation has O\(|T|×|F time complexity. When T and F are getting larger, the running time of algorithm is getting longer, however, this O\(|T|×| F  time complexity is acceptable as long as T and F are limited in certain scale 
4 


IV  E XPERIMENTAL R ESULTS  In this section, we make experiments to compare FP method and LFP method on the detecting accuracy. We run the two algorithms on 3 real world datasets all obtained from the UCI Machine Learning Repository [10   A  Experimental Environment The experimental environments: Windows XP 002 Intel\(R 2.66GHz CPU 002 1G main memory and JDK 1.6.0 B  Data Sets These 3 datasets are: Intrusion dataset, breast-cancerwinsconsin dataset, lymphography dataset Intrusion dataset is a network connection records dataset that includes a variety of intrusions from U.S. military Attributes include length of the connection, the type of protocol, network service on the destination and so on, each record is classified into the normal class or one of the intrusion classes such as guess password, warezmaster and so on. Most attributes take continuous values, we discretize them into 5 levels using AlphaMiner [11 s o f t w a re  T h e  treated experimental dataset is combined of the guess password class as the true outlier records and the normal records. It contains 97% normal records and 3% outlier records, in total 1000 records. We converted this record data to transaction data in which each item corresponds to a pair of an attribute and its value. The final experimental dataset is shown in Table 004  TABLE III  C LASS D ISTRIBUTION OF I NTRUSION DATASET  Class Number Percentage Total number Normals 970 97 1000 Outliers 30 3 The second dataset used is breast-cancer-winsconsin dataset, which contains 699 records with 9 attributes. All attributes are considered as categorical. Each record was labeled as benign or malignant. In our experiment, We pick up 14 records \(3%\ of the malignant records and 443 records 97%\f the benign records. The 14 malignant records are treated as outliers and others are normal records. The final transaction form dataset is listed in Table 004  TABLE IV  C LASS D ISTRIBUTION OF BREAST CANCER WINSCONSIN DATASET  Class Number Percentage Total number Normals 443 97 457 Outliers 14 3 The third dataset is the Lymphography data set, which contains 148 records with 18 attributes. All records in the dataset are categorized into 4 classes. Classes 2 and 3 have the largest number of records. The remained classes were regarded as outlier class labels. The corresponding class distribution is illustrated in Table 004  TABLE V  C LASS D ISTRIBUTION OF LYMPHOGRAPHY DATASET  Class Number Percentage Total number Normals 142 96 148 Outliers 6 4 C  Accuracy Comparisons In order to evaluate LFP method proposed by this paper we adopt Kazuyo Narita’s experiment method t o  compare FP method and LFP method. We take two accuracy measures, the detection rate \(D_rate\ and detection precision D_prec\ defined by the following formulas number of detected true outliers D_rate  number of all true outliers  number of detected true outliers D_prec  number of detected transactions as outliers  For fair evaluation, we provide fixed parameters for each method, and regard transactions which have the top-k lowest normal degree as outliers. Changing the k value, we draw a comparison chart. Fig. 1 shows the change in D_prec as D_rate increases of two methods, and the horizontal axis of this figure represents detection rate, the vertical axis represents detection precision. The parameter min_sup is set 50%, which is most proper for the two methods. We could find that LFP method’s D_prec keeps maintaining higher values than FP method as the D_rate increases \(or k value increases\, especially under the circumstance that D_rate is quite low. Through this phenomenon we can deduce that the top outliers detected by FP method contain much normal records so that its detection precision gets low. In contrast when D_rate is quite low, LFP’s D_prec is quite high because the top outliers detected by LFP method are almost correct. Therefore, we can see that LFP method gets a higher accuracy than FP method 000$\000F\000F\000X\000U\000D\000F\000\\\000\003\000&\000R\000P\000S\000D\000U\000L\000V\000R\000Q\000\003\000R\000I\000\003\000/\000\\000$\000O\000J\000R\000U\000L\000W\000K\000P\000\003\000D\000Q\000G\000\003\000\\000J\000R\000U\000L\000W\000K\000P\000\003\000\013\000,\000Q\000W\000U\000X\000V\000L\000R 000Q\000\014 000\023 000\024\000\023 000\025\000\023 000\026\000\023 000\027\000\023 000\030\000\023 000\031\000\023 000\032\000\023 000\033\000\023 000\034\000\023 000\024\000\023\000\023 000\030 000\024\000\023\000\024\000\030\000\025\000\023\000\025\000\030\000\026\000\023\000\026\000\030\000\027\000\023\000\027\000\030\000\030\000\023\000\030\000\030\000\031\000\023\000\031\000\030\000\032\000\023\000\032\000\030\000\033\000\023\000\033\000\030\000\034\000\023\000\034\000\030\000\024\000\023\000\023 000'\000H\000W\000H\000F\000W\000L\000R\000Q\000\003\0005\000D\000W\000H\000\013\000\010\000\014 000'\000H\000W\000H\000F\000W\000L\000R\000Q\000\003\0003\000U\000H\000F\000L\000V\000L\000R\000Q\000\013\000\010\000\014 000/\000\\0003\000\013\000P\000L\000Q\000B\000V\000X\000S\000 \000\030\000\023\000\010\000\014 000\\000\013\000P\000L\000Q\000B\000V\000X\000S\000 \000\030\000\023\000\010\000\014  Figure 1  Accuracy Comparison between LFP Algorithm and FP Algorithm \(Intrusion In the second experiment, we use breast-cancerwinsconsin dataset and the result is shown in Fig. 2 000$\000F\000F\000X\000U\000D\000F\000\\\000\003\000&\000R\000P\000S\000D\000U\000L\000V\000R\000Q\000\003\000E\000H\000W\000Z\000H\000H\000Q\000\003\000/\000\\000J\000R\000U\000L\000W\000K\000P\000\003\000D\000Q\000G\000\003\000\\000\003\000$\000O\000J\000R\000U\000L\000W\000K\000P\000\003\000\013\000E\000U\000H 000D\000V\000W\000\020 000F\000D\000Q\000F\000H\000U\000\020\000Z\000L\000Q\000V\000F\000R\000Q\000V\000L\000Q\000\014 000\023 000\024\000\023 000\025\000\023 000\026\000\023 000\027\000\023 000\030\000\023 000\031\000\023 000\032\000\023 000\033\000\023 000\034\000\023 000\024\000\023\000\023 000\030 000\024\000\023\000\024\000\030\000\025\000\023\000\025\000\030\000\026\000\023\000\026\000\030\000\027\000\023\000\027\000\030\000\030\000\023\000\030\000\030\000\031\000\023\000\031\000\030\000\032\000\023\000\032\000\030\000\033\000\023\000\033\000\030\000\034\000\023\000\034\000\030\000\024\000\023\000\023 000'\000H\000W\000H\000F\000W\000L\000R\000Q\000\003\0005\000D\000W\000H\000\013\000\010\000\014 000'\000H\000W\000H\000F\000W\000L\000R\000Q\000\003\0003\000U\000H\000F\000L\000V\000L\000R\000Q\000\013\000\010\000\014 000/\000\\0003\000\013\000P\000L\000Q\000B\000V\000X\000S\000 \000\025\000\030\000\010\000\014 000\\000\013\000P\000L\000Q\000B\000V\000X\000S\000 \000\025\000\030\000\010\000\014  
5 


Figure 2  Accuracy Comparison between LFP Algorithm and FP Algorithm \(breast-cancer-winsconsin It is clear that the detection precisions of LFP method and FP method are both high when D_rate is low, however as D_rate increases, the curves of two methods split apart gradually and LFP method’s D_prec is higher than FP method’s In the third experiment, we use lymphography dataset and the result is shown in Fig. 3 Accuracy Comparison between LFP Algorithm and FP Algorithm \(lymphograhyigure 3  Accuracy Comparison between LFP Algorithm and FP Algorithm \(lymphography We can see that the detection precisions of LFP method and FP method are both quite high when D_rate is low. But when D_rate is more than 75%, LFP method’s detection precision gets higher than FP method’s a little bit D  Parameter Sensitivities The detection result of LFP method depends on the user threshold min_sup, so it is necessary to provide an analysis with regard to parameter sensitivities. Fig. 4 shows that LFP method may detect a different set of transactions, when different minimal supports, 12.5 002 25 002 50 002 75%, are provided. From this analysis, although the proposed method has excellent performance on outlier detection, it is sensitive to the parameter given by the user. The problem of how to select the proper parameters for input data is important LFP Algorithm Accuracy Comparison under Different Min_sups \(breast-cancerwinsconsinigure 4  LFP Algorithm Accuracy Comparison under Different Min_sups \(breast-cancer-winsconsin V  C ONCLUSIONS  In this paper, we focus on the method of outlier detection based on frequent patterns proposed by Zengyou He et al, we name it FP method. First we describe the core algorithm summarize the FPOF measure and the FP algorithm for outlier detection, and then we analyze the drawbacks of FP method. We find that FP method has duplicate computing problem so that it couldnot detect outliers precisely Targeting at this drawback, we propose an improved method LFP method\nd also present its algorithm. LFP method solves the problem above well and it is easy to implement and efficent in time complexity. Finally, we evaluate the two methods by using several datasets and the experiment results show that the LFP method outperforms the FP method. A future work is to solve the parameter sensitivity problem of LFP method, figure out how to fix the most proper min_sup for LFP method A CKNOWLEDGMENT  This work is funded by the Youth Foundation of the Jina n University under Grant No.51208030 R EFERENCES  1  Jiawei Han, and Micheline Kamber, “Date mining: concepts and techniques,” 2001, pp. 3-5 2  D. Hawkins, “Identification of Outliers,” London: Chapman and Hall 1980, pp. 1-3 3  Barnett V, and Lewis T, “Outliers in Statistical Data,” New York John Wiley& Sons, 1994 4  Knorr. E. M, and NgR. T. A, “Unified Notion of outliers: ProPerties and ComPutation,” In proc. of KDD 97, 1997, pp. 219-222 5  M. M. Breunig, H. P. Kriegel, R. Ng, and J. Sander, “LOF Identifying Density-Based Local Outliers,” In ACM SIGMOD Conference Proceedings, 2000, pp. 150-165 6  Kazuyo Narita, and Hiroyuki Kitagawa, “Outlier Detection for Transaction Databases using Association Rules,” Lecture Notes in Computer Science, 2008, pp. 1-7 7  R. Agrawal, and R. Srikant, “Fast algorithms for mining association rules in large databases,” In VLDB, 1994, pp. 487–499 8  Zengyou He, and Xiaofei Xu, “FP-Outlier: Frequent Pattern Based Outlier Detection,” Computer Science and Information Systems, 2005 pp. 1-6 9  Jiawei Han, Jian Pei, and Yiwen Yin, “Mining Frequent Patterns without Candidate Generation,” Data Mining and Knowledge Discovery, 2004, pp. 1-8   Uci machine learning repository http://www.ics.uci.edu/˜mlearn/MLRepository.html   AlphaMiner.http://bi.hitsz.edu.cn/alphaminer/index.htm 
6 


 7 Filename and File Size This experiment only records the filename and its size listed on the projects' site on the first page \(http://sourceforge.net/project/project_name\.  This filename is not neccessarily the only available filename, and there is also no guarantee that the filename is always the source code of the project.  The filename is then classified based on its extension as shown in Table 13 T ABLE 13  S TATISTICS OF F ILENAME E XTENSION  Filename Extension Population Percentage zip 33,352 47.27 tar.gz 20,970 29.72 jar 5234 7.42 tar.bz2 4108 5.82 tgz 3540 5.02 rar 1734 2.46 other format 1612 2.28 The size of the downloadable files was also recorded and then categorized based on its order of magnitude \(BYTES KB, MB, or GB\. Table 14 shows the magnitude of the downloadable file size T ABLE 14  S TATISTICS OF F ILE S IZE M AGNITUDE  File Size Magnitude Population Percentage BYTES 181 0.26 KB 50,723 71.90 MB 19,605 27.79 GB 41 0.06 8 License There are 131,777 OSS Projects \(97.94%\f the recorded projects that list the applicable license for the project.  There are 75 distinct values for the licence for the recorded OSS projects, and they were classified as shown in table 15 T ABLE 15  C LASSIFICATION OF P ROJECT  S L ICENSE  License Class Population Percentage GPL 87,641 61.57 LGPL 15,139 10.64 BSD License 9607 6.75 Apache License 5376 3.78 Public License 4835 3.40 MIT License 3726 2.62 AFL 2231 1.57 Mozilla License 1995 1.40 Other 11785 8.28 The classification of the count of applicable licenses in each of the OSS project is shown in Table 16  T ABLE 16  C LASSIFICATION OF L ICENSE C OUNT  License Count Class  Population Percentage one 123,813 93.96 two 6393 4.85 three or more 1571 1.19 9 Operating System There are 111,760 OSS Projects 83.06%\ of the recorded projects that list the applicable Operating System.  There are 85 distinct Operating System for the OSS projects which are then classified as Linux-like Windows, Cross-Platform, or Other.  Table 17 shows the classification of Operating System for the OSS Projects T ABLE 17 CLASSIFICATION OF O PERATING S YSTEM  Operating System Class Population Percentage Linux-like 69,607 35.63 Windows 66,905 34.25 Cross-Platform 45,306 23.19 Other 13,532 6.93 Where  Linux-like: All POSIX \(Linux/BSD/UNIX-like Oses Linux, All BSD Platforms \(Free BSD, NetBSD, etc  Windows: all OS using Windows i.e. Win98, Windows XP, Windows Server etc  Cross-platform: OS Portable \(Source code to work with many OS platform\, OS Independent \(Written in an interpreted language\ etc  Other : other OSes The classification of the count of Operating System in each OSS projects is shown in table 18 T ABLE 18  C LASSIFICATION OF O PERATING S YSTEM C OUNT  Operating System Count Class Population Percentage one 71,322 63.82 two 20,276 18.14 three 9026 8.08 four 5266 4.71 five 3006 2.69 six or more 2864 2.56 10 Programming Language There are 127,247 OSS Projects \(94.57%\ of the recorded projects that list the applicable programming language.  There are 97 distinct programming languages for the OSS projects which are then classified into Java, C++, Other OOP, C, PHP, Other Scriptbased, or Other as shown in Table 19 T ABLE 19  C LASSIFICATION OF P ROGRAMMING L ANGUAGE  Programming Language Class Population Percentage Java 33,277 20.10 


 Programming Language Class Population Percentage C++ 26,940 16.27 Other OOP 12,341 7.45 C 24,681 14.91 PHP 21,755 13.14 Other Script-based 30,751 18.57 Other 15,820 9.56 Where  Other Script-based: Python, Unix Shell, Perl JavaScript, VBScript, etc  Other OOP : C#, Object Pascal, Objective , etc  Other: Other programming language  The classification of the count of Programming Language in each OSS Project is shown in table 20 T ABLE 20  C LASSIFICATION OF P ROGRAMMING L ANGUAGE C OUNT  Programming Language Count Class Population Percentage one 99,217 77.91 two 20,708 16.27 three or more 7322 5.75 11 Review There are only 8663 OSS Projects \(6.44%\f the recorded project that being reviewed or commented by other users.  Table 21 shows the classification of reviews for each of the project T ABLE 21  C LASSIFICATION OF R EVIEW C OUNT  Review Count Class Population Percentage one 4713 54.40 two 2495 28.80 three or more 1455 16.80 12 Thumb \(Up and Down There are only 16,829 OSS Projects \(12.50%\ of the recorded projects that being thumbreviewed \(users give either thumb up or thumb down\.  The classification of thumb shown in Table 22 consisting the sum of thumb up and thumb down T ABLE 22 CLASSIFICATION OF T OTAL T HUMB  Thumb \(Up + Down\ Class Population Percentage single 8176 48.58 two to three 4097 24.34 four to ten 2669 15.86 eleven or more 1887 11.21 The total thumb was choosen as the basis for classification since it was difficult to find better judgement for classification based on only thumb up or only thumb down 13 Topic There are 440 distinct topics for the OSS Projects which are then classified into 6 categories as shown in Table 23 T ABLE 23 CLASSIFICATION OF OSS  P ROJECT  S T OPIC  Topic Class Population Percentage  Software Development 44,112 19.97 Internet/Networking 38,467 17.41 Data Management 38,359 17.37 Games/Entertainment 32,002 14.49 Scientific/Engineering 25,725 11.65 Other topic 42,185 19.10 Where  Software Development: Build Tools, Code Generators Compilers, Debuggers, Software Development, etc  Internet/Networking: File Sharing, File Transfer Protocol FTP\, WWW/HTTP, etc  Data Management: Conversion, Interpreters, Dynamic Content, etc  Games/Entertainment: Video Capture, CD Ripping Sound/Audio, etc  Scientific/Engineering: Cryptography, Security, Codec Astronomy, Simulation, etc  Other topic: Desktop Environment, Office Suites Printing, Emulators, etc The classification of the count of Topic for each OSS Project is shown in table 24 T ABLE 24  C LASSIFICATION OF T OPIC C OUNT  Topic Count Class Population Percentage one 81,294 60.42 two 30,717 22.83 three 15,986 11.88 four or more 6552 4.87 14 Translation There are 77,269 OSS Projects \(57.43%\f the recorded projects that list the available language translation.  There are 67 distinct values for available language translation that is then classified into three classes which are English, European, and Other as shown in Table 25 T ABLE 25  T RANSLATION CLASSIFICATION FOR OSS  P ROJECT  Translation Class Population Percentage English 65,020 59.18 European 37,190 33.85 Other 7667 6.98 Where  European: German, Spannish, Finnish, etc  Other: Afrikaans, Chinese \(Simplified\, etc The classification of the translation count in each of OSS Project is shown in Table 26 


 T ABLE 26  C LASSIFICATION  OF T RANSLATION C OUNT  Translation  Count Class Population Percentage one 58,990 76.34 two 14,581 18.87 three or more 3698 4.79 15\  User Interface There are 97,302 OSS Projects \(72.32 of the recorded projects that list the available user interface for the project.  There are 60 distinct values which is then classified into 4 classes as shown in Table 26  T ABLE 26  U SER I NTERFACE CLASSIFICATION FOR OSS  P ROJECT  User Interface Class Population Percentage  Desktop-based 58,136 46.91 Web-based 31,679 25.57 Text-based 21,228 17.13 Other 12,872 10.39 Where  Desktop-based: Win32 \(MS Windows\, X Window System \(X11\, Gnome, GTK+, etc  Text-based: Non-interactive \(Daemon Console/Terminal, etc The classification of the count of User Interface in each OSS Project is shown in Table 27 T ABLE 27  C LASSIFICATION OF U SER I NTERFACE C OUNT  User Interface Count Class Population Percentage one 77,983 80.15 two 14,132 14.52 three or more 5187 5.33 V  R ESULT AND D ISCUSSION  The process of Datamining 2-Itemset Association Rule is using Weka Datamining tool.  The class parameters were the combination of two parameters with the Consequent was always set to parameter Download There are 24 possible combinations of other parameters as the Antecedent and Download as the Consequent The result that have Download Thousands or more as Consequent with Confident  50 and Support  10% are interesting values Table 28 shows all the result of Datamining 2-Itemset Association Rule the has Consequent  Download - Thousands of more  T ABLE 28  R ESULT WITH D OWNLOAD  T HOUSANDS OF MORE AS C ONSEQUENT  Antecedent Analysis Parameter Class Pop. Sup. Conf Audience Common Users 123909 14.91% 51.76  Development Status 5-Production Stable 83422 17.54% 60.12  Antecedent Analysis Parameter Class Pop. Sup. Conf Operating System  Linux-like 129912 19.88% 52.34  Operating System  Windows 129912 18.51% 55.19  Review Count three or more 7822 28.97% 94.10  Review Count two 7822 14.02% 81.32  Review Count one 7822 36.93% 71.07  Size MB 70343 15.46% 55.71  Total Thumb eleven or more 15117 12.17% 98.87  Total Thumb two to three 15117 18.83 75.26  Total Thumb single 15117 29.34% 64.03  Total Thumb four to ten 15117 15.28 90.73  Translation English 73412 30.92% 51.62  Translation European 73412 21.54% 63.97  Note: Pop. - Population, Sup. - Support, Conf. - Confidence Table 28 shows that the success factors of OSS Project with the goal to get the number of download in thousands or more are 1  Project should target for common users as audience 2  Project source code should already in 5 – Production Stable development status 3  Project should work on either Linux-like or Windows operating system 4  Project should be reviewed and thumb-reviewed by at least one users 5  Project has filename in zip format with size in MB in magnitude 6  Project should have either English or European language translation Most of the above results are reasonable except for the file size.  Stating Common users as audience will reach wider segment of users.  Users are also more interested in projects that are in reasonable level of maturity so they will select OSS Project which is already in 5 – Production / Stable development status.  The selected Operating System in Windows or Linux-like are also reasonable since both are the most popular desktop-based Operating System.  The need for reviews and thumbs by other users seems to have good influence for another users to download and try the OSS The file size in MB magnitude appears with possible explanation that users are more interested in larger scale OSS Project than medium or small one.  Lastly, the English or European language translation is important since many of OSS Projects are originated from this region \(Englishspeaking countries or other European language-speaking countries\. It is also interesting to note that some freedom is still available for project initiator to decide i.e. topic programming language and description of his/her project without affecting the number of download Some caution should be considered relating to these rules The subject being researched is small to medium OSS Projects 


 from sourceforge.net that may not reflect the whole population of OSS Projects that are small, medium and large scale.  These result should also verified using OSS Project data from other portal i.e. launchpad.net, google code, etc. to verify their validity VI  C ONCLUSION  We present the Datamining 2-Itemset Association Rule of 134,549 OSS Projects crawled from sourceforge.net portal This covers about 84% of the total of 160,141 OSS Projects registered at the portal in the month of January 2010.  There are more than 27 parameter being recorded into MySQL database i.e. audience, audience count, database environment database environment count, developer count, development status, development status count, number of download filename and file size, license, license count, operating system, operating system count, programming language programming language count, review count, topic, topic count, translation, translation count, user interface, and user interface count The result of this datamining process are 6 success factors that may be applied by project initiators and developers in order to increase the probability of success of their projects The details of the guidelines is shown in Section V. Future work of this research include expanding the experiment to cover other portal i.e. launchpad.net, google code and freshmeat.net ACKNOWLEDGMENT  The authors would like to thank Maranatha Christian University \(http://www.maranatha.edu\ that provides the funding for this research and Department of Computer Science and Electronics at Gadjah Mada University http://mkom.ugm.ac.id\ which provides guideline and technical assistance for the research R EFERENCES  1  R. Agrawal., R. Srikant, “Fast Algorithm for Mining Association Rule Proceeding of 20th International Conference Very Large Database 1994, pp 1 - 32 2  A. Capiluppi, J.F. Ramil, “Studying the Evolution of Open Source Systems at Different Levels of Granularity: Two Case Studies Proceeding of the 7th International Workshop of Principles of Software Evolution, 2004, 113 - 118 3  S. Christley, G. Madey, “Analysis of Activity in the Open Source Software Development Community”, Proceeding of the 40th IEEE Annual Hawaii International Conference on System Sciences, 2007 166b 4  T.T. Dinh-Trong, J.M. Bieman, “The FreeBSD Project: A Replication Case Study of Open Source Development”, IEEE Transaction on Software Engineering Vol. 31 No. 6,  June 2005, 481 – 494 5  V.K. Gurbani, A. Garvert, J.D. Herbsleb, “A Case Study of Open Source Tools and Practices in Commercial Setting”, Proceeding of the fifth Workshop on Open Source Software Engineering, 2006, 1 - 6 6  J.E. Istiyanto, A.W.R. Emanuel, “Success Factors of Open Source Software Projects using Datamining Technique”, Proceeding of Information Technology and Communication International Seminar ITIS\, June 2009 7  P.L. Li, J. Herbsleb, M. Shaw, “ Finding Predictors of Field Defects for Open Source Software Systems in Commonly Available Data Sources a Case Study of OpenBSD”, Proceeding of 11th IEEE International Software Metrics Symposium, 2005,  32 8  G. von Krogh, S. Spaeth, S. Haefliger, “Knowledge Reuse in Open Source Software: An Exploratory Study of 15 Open Source Projects Proceeding of 38th Hawaii International Conference on System Sciences, 2005, 198b 9  A. Mockus, R.T. Fielding, J. Herbsleb, “Two Case Studies of Open Source Software Development: Apache and Mozilla”, ACM Transaction on Software Engineering and Methodology Vol. II No. 3 Juli 2002, 309 – 346 10   A. Mockus, R.T. Fielding, J. Herbsleb, “A Case Study of Open Source Software Development: The Apache Server”,  ACM ICSE, 2000, 263 272 11   E.S. Raymond, “The Cathedral and the Bazaar”, version 3, Thyrsus Enterprises \(http://www.tuxedo.org/~esr/\, 2000 12   Sourceforge.net web portal at http://www.sourceforge.net 13   S. Spaeth, M. Stuermer, “Sampling in Open Source Development: The Case for Using the Debian GNU/Linux Distribution”, Proceedings of the 40th IEEE Hawaii International Conference on System Sciences 2007, 166a 14   Weka website at  http://www.cs.waikato.ac.nz/ml/weka 


Application of Chaotic Particle Swarm Optimization Algorithm in Chinese Documents Classification 763 Dekun Tan Qualitative Simulation Based on Ranked Hyperreals 767 Shusaku Tsumoto Association Action Rules and Action Paths Triggered by Meta-actions 772 Angelina A. Tzacheva and Zbigniew W. Ras Research and Prediction on Nonlinear Network Flow of Mobile Short Message Based on Neural Network 777 Nianhong Wan, Jiyi Wang, and Xuerong Wang Pattern Matching with Flexible Wildcards and Recurring Characters 782 Haiping Wang, Fei Xie, Xuegang Hu, Peipei Li, and Xindong Wu Supplier Selection Based on Rough Sets and Analytic Hierarchy Process 787 Lei Wang, Jun Ye, and Tianrui Li The Covering Upper Approximation by Subcovering 791 Shiping Wang, William Zhu, and Peiyong Zhu Stochastic Synchronization of Non-identical Genetic Networks with Time Delay 794 Zhengxia Wang and Guodong Liu An Extensible Workflow Modeling Model Based on Ontology 798 Zhenwu Wang Interval Type-2 Fuzzy PI Controllers: Why They are More Robust 802 Dongrui Wu and Woei Wan Tan Improved K-Modes Clustering Method Based on Chi-square Statistics 808 Runxiu Wu Decision Rule Acquisition Algorithm Based on Association-Characteristic Information Granular Computing 812 JianFeng Xu, Lan Liu, GuangZuo Zheng, and Yao Zhang Constructing a Fast Algorithm for Multi-label Classification with Support Vector Data Description 817 Jianhua Xu Knowledge Operations in Neighborhood System 822 Xibei Yang and Tsau Young Lin An Evaluation Method Based on Combinatorial Judgement Matrix 826 Jun Ye and Lei Wang Generating Algorithm of Approximate Decision Rules and its Applications 830 Wang Yun and Wu-Zhi Qiang Parameter Selection of Support Vector Regression Based on Particle Swarm Optimization 834 Hu Zhang, Min Wang, and Xin-han Huang T-type Pseudo-BCI Algebras and T-type Pseudo-BCI Filters 839 Xiaohong Zhang, Yinfeng Lu, and Xiaoyan Mao A Vehicle License Plate Recognition Method Based on Neural Network 845 Xing-Wang Zhang, Xian-gui Liu, and Jia Zhao Author Index 849 
xiii 


   C4.2 Open GL has excellent documentation that could help the developer learn the platform with ease C4.3 Developer has very little ex perience in working with Open GL platform  For our case study, alternative B i.e. Adobe Director was the most favorable alternative amongst all the three. It catered to the reusability criteria quite well and aimed at meeting most of the desired operational requirements for the system   6. CONCLUSION & FUTURE WORK  The main contribution of this paper is to develop an approach for evaluating performance scores in MultiCriteria decision making using an intelligent computational argumentation network. The evaluation process requires us to identify performance scores in multi criteria decision making which are not obtained objectively and quantify the same by providing a strong rationale. In this way, deeper analysis can be achieved in reducing the uncertainty problem involved in Multi Criteria decision paradigm. As a part of our future work we plan on conducting a large scale empirical analysis of the argumentation system to validate its effectiveness   REFERENCES  1  L  P Am g o u d  U sin g  A r g u men ts f o r mak i n g an d  ex p lain in g  decisions Artificial Intelligence 173 413-436, \(2009 2 A  Boch m a n   C ollectiv e A r g u men tatio n    Proceedings of the Workshop on Non-Monotonic Reasoning 2002 3 G  R Bu y u k o zk an  Ev alu a tio n o f sof tware d e v e lo p m en t  projects using a fuzzy multi-criteria decision approach Mathematics and Computers in Simualtion 77 464-475, \(2008 4 M T  Chen   F u zzy MCD M A p p r o ach t o Selec t Serv ice  Provider The IEEE International Conference on Fuzzy 2003 5 J. Con k li n  an d  M. Beg e m a n   gIBIS: A Hypertext Tool for Exploratory Policy Discussion Transactions on Office Information Systems 6\(4\: 303  331, \(1988 6 B P  Duarte D e v elo p in g a p r o jec ts ev alu a tio n sy ste m based on multiple attribute value theroy Computer Operations Research 33 1488-1504, \(2006 7 E G  Fo rm an  T h e  A n a l y t ic Hier a rch y P r o cess A n  Exposition OR CHRONICLE 1999 8 M. L ease  an d J L  L i v e l y  Using an Issue Based Hypertext System to Capture Software LifeCycle Process Hypermedia  2\(1\, pp. 34  45, \(1990 9  P e id e L i u   E valu a tio n Mo d e l o f Custo m e r Satis f a c tio n o f  B2CE Commerce Based on Combin ation of Linguistic Variables and Fuzzy Triangular Numbers Eight ACIS International Conference on Software Engin eering, Artificial Intelligence Networking and Parallel Distributed Computing, \(pp 450-454 2007  10  X  F L i u   M an ag e m en t o f an In tellig e n t A r g u m e n tatio n  Network for a Web-Based Collaborative Engineering Design Environment Proceedings of the 2007 IEEE International Symposium on Collaborative Technologies and Systems,\(CTS 2007\, Orlando, Florida May 21-25, 2007 11 X. F L i u   A n In ternet Ba se d In tellig e n t A r g u m e n tatio n  System for Collaborative Engineering Design Proceedings of the 2006 IEEE International Symposium on Collaborative Technologies and Systems pp. 318-325\. Las Vegas, Nevada 2006 12 T  M A sub jec tiv e assess m e n t o f altern ativ e m ission  architectures for the human exploration of Mars at NASA using multicriteria decision making Computer and Operations Research 1147-1164, \(June 2004 13 A  N Mo n ireh  F u zzy De cisio n Ma k i n g b a se d o n  Relationship Analysis between Criteria Annual Meeting of the North American Fuzzy Information Processing Society 2005 14 N  P a p a d ias HERMES Su p p o rti n g A r g u m e n tative  Discourse in Multi Agent Decision Making Proceedings of the 15th National Conference on Artifical Intelligence \(AAAI-98  pp. 827-832\dison, WI: AAAI/MIT Press,  \(1998a 15  E. B T riantaph y llo u   T h e Im p act o f  Ag g r e g atin g Ben e f i t  and Cost Criteria in Four MCDA Methods IEEE Transactions on Engineering Management, Vol 52, No 2 May 2005 16 S  H T s a u r T h e Ev alu a tio n o f airlin e se rv ice q u a lity b y  fuzzy MCDM Tourism Management 107-115, \(2002 1 T  D W a n g  Develo p in g a f u zz y  T O P S IS app r o ach  b a sed  on subjective weights and objective weights Expert Systems with Applications 8980-8985, \(2009 18 L  A  Zadeh  F u z z y Sets   Information and Control 8  338-353, \(1965  152 


                        





