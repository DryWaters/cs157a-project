A Unified Intelligent Model for Software Project Risk Analysis and Planning  Yong Hu, Xiangzhou Zhang, Xin Sun, Jing Zhang, Jianfeng Du, Junkai Zhao Business Intelligence and Knowledge Discovery, School of Business Guangdong University of Foreign Studies, Sun Yat-sen University Guangzhou, China e-mail: zhxzhou86@foxmail.com   Abstract Software project development still faces high failure rate. Nowadays, researches on software project risk majorly remain in risk theoretical model, risk identification and risk analysis, lacking empirical mode ls which unify risk analysis 
and risk planning procedures. This research firstly collected real data from mainland China, and used Classification Association Rules \(CARs\ to provide a highly operational and planning-oriented software project risk management \(SPRM framework. Then we code programing problem, i.e. risk planning, into Constraint Satisfaction Problem \(CSP establish a Unified Intelligent Model for Risk Analysis and Planning \(UIM-SPRAP\. Thus we provide a new solution to establish a framework unifying risk analysis and planning UIM-SPRAP is the earliest model of this field; can be used to provide intelligent decision support to SPRM 
Keywords-Software Project Development; Unified Intelligent Risk Analysis and Planning Model; Classification Association Rules; Constraint Satisfaction Problem I  I NTRODUCTION  So far, software development has been of high risk Standish Group surveyed on more than one hundred thousand software projects, which demonstrated that from 1994 to 2009, success rate had climbed up, but still below 1/3 \(16% and 32% respectively\ [1   Risk management is one of the most important management works of software development. Charatte regarded that management of large software project is risk 
management [2 I E E E  res e a r ch  rev e al ed th at in s o f t w a re  system, 50%-70% of risks could be detected, 90% could be avoided, and risk management had a leverage effect with ROI about 700%-2000% [3 Boehm thought that software project risk management SPRM\ was trying to use feasible principles or practices to regularly control the risk which could affect project success its goal is to identify, depict and eliminate risk factors, lest threatening successful operation of software [4 Our research aim and contribution are as follows National and international SPRM researches mostly remain on risk theoretical model, risk identification and risk 
analysis. No SPRM frameworks provide unified intelligent decision support form risk analysis to risk planning, so it’s hard to manage software project risk effectively. In terms of our collected papers, unified risk analysis and planning exploratory models based on data mining methods are still in the initial stage. Our research is the first to build up a unified risk analysis and planning exploratory model based on Classification Association Rules \(CARs\. We used real software development data collected in mainland China, so the proposed UIM-SPRAP trained by these data will be more 
pertinent in mainland China SPRM theoretical research and practice II  M ETHODOLOGY  In this section, we introduce our proposed framework, in which only the risk mitigation strategies and risk planning parts contain detailed description, because we follow common ways of risk identification and analysis A  Planning-oriented SPRM framework Our proposed planning-oriented SPRM framework has three main phases, as shown in Fig. 1. Risk identification lies in infrastructure; based on the identification result, risk analysis is executed; if the result of risk analysis predicts that 
the project will fail, risk planning is conducted. Risk planning is the key to risk mitigation, which is the ultimate goal of SPRM Risk database is used to document and provide software project risk information, including risk factor database, risk factor states database, risk mitigation strategies database successful project database, failed project database, etc Mature software organization do very focus on risk information collection, analysis and process, which are the foundation and basis of risk management. So far, in many software process improvement models, process database including risk database\s one of the important marks of 
evaluating organization process improvement ability B  Risk Identification Risk identification is to identify and record the sources of negative project effect \(i.e. risk factors\, and transfer the uncertainties and potential problems in identification project into tangible risk factors that could be described and measured. Our research adopts the six dimension theoretical model of Wallace and Keil [5 t o  b e th e in f r a st ru ctu r e o f r i sk  identification  
2010 3rd International Conference on Information Management, Innovation Management and Industrial Engineering 978-0-7695-4279-9/10 $26.00 © 2010 IEEE DOI 10.1109/ICIII.2010.504 110 
2010 3rd International Conference on Information Management, Innovation Management and Industrial Engineering 978-0-7695-4279-9/10 $26.00 © 2010 IEEE DOI 10.1109/ICIII.2010.504 110 


   Figure 1  Planning-Oriented SPRM Framework C  Risk Analysis Risk analysis is the process of converting risk data into risk mitigation information, and assessing project risk level Project assessment usually adopts classification method to classify projects into successful projects \(low risk\or failed projects \(high risk\. Common techniques include Decision Tree, Bayesian Network, Neural Network, CARs K-Nearest Neighbors method, etc. Our research applies CARs, which is also called Predictive Association Rules which directs at association rule used to distinguish or predict instance class labels [6  CA Rs d i s c o v ery u s u a lly  includes two steps: \(1\istinguish association rules which have right hand side class labels, as factor 1  state 1  factor n  state n  000  project succeed/fail 2\rom the already discovered rules, choose the prior rules to cover the training sets according to evaluation standards such as confidence  support and rule length Megiddo et al. used statistical significance test to investigate the result of association rules mining and found that less than 0.1% were fake discovery” [7 CA Rs t e c hnol o g y i s w i d e l y use d i n  SPRM field now [8 We modified the typical Apriori algorithm to construct risk analysis model, which only generates generic project success/failure rules, that is to say any subset of antecedent of success/failure rule is not success/failure rule, in order to reduce rule amounts, as shown in Fig. 2 D  Risk Mitigation Strategy Our research collects and induces a set of risk mitigation strategies through paper reviews and experts interviews 4 9  1 0  1 1] [12  13  14   a nd t h e y c o ul d be classified into five dimensions, as shown in Table I Each risk mitigation strategy could control several risk factors and have different cost, and different cost could reduce risk to different levels, thus we should considerate more on the constraints when making a specific risk planning E  Risk Planning Risk planning is, based on the risk analysis result, to apply various auxiliary decision technologies to achieve risk contingency plan, risk avoidance methods, risk mitigation strategies and action plan, etc Due to the strong coupling of risk analysis and risk planning, consistent representation \(data structure\ is more convenient, thus the CARs pattern we adopted is well suitable Risk planning is such a procedure   Input risk mitigation strategy database \(including strategy name, strategy cost, and changes of risk factors states\nd risk factors database \(including risk factor names and states   Output a set of proposed risk mitigation strategies \(a subset of risk mitigation strategy database   Constraint satisfy the risk planning goals defined in SEI CRM model [15  1  Avoids factor states leading to project failure 2  Reaches factor states leading to project success 3  Satisfies the above conditions and minimize total strategies cost The task of risk planning can be regarded as such a simple process: find out a set of risk mitigation strategies, through which we can change project risk factors states and then convert a “fail” project, i.e factor 1  state 1  factor n  state n  000  project fail into a “success” project, i.e  factor 1  state 1  factor n  state n  000  project succeed  In this research, the solution of risk mitigation strategies set is an integer programming problem; it can be resolved by using common integer programming tools, but the result is hard to interpret, obstructing software project manager to accurately understand the risk planning. One of the common technologies of programming problem is coding it as a Constraint Satisfaction Problem \(CSP\. CSP includes Integer programing problem, but it’s more interpretable and effective 16  Fu rth e rm o r e  CS P is  o f ten c o d e d as S a tisf i a b i lity  Problem \(SAT So we code the task of risk planning as SAT with linear optimization objective and invoked a Pseudo-Boolean SAT Solver \(PB-Solver minisat to make a solution. The coding task is to define constraint and objective function, which are as follows 1  Possible initial states of each risk factor 2  Mutual exclusivity within each risk factor’s different initial states 
111 
111 


3  Possible final states of each risk factor 4  Mutual exclusivity within each risk factor’s different final states 5  Risk factor final state is of lower risk than its initial state 6  Mutual exclusivity within each risk mitigation strategy’s different costs 7  Effect of each risk mitigation strategy on various risk factors’ states 8  Initial state of each risk factor of the test sample 9  Final states of the test sample meet at least one success rule 10  Final states of the test sample meet no fail rule 11  Linear optimization objective is searching for risk mitigation strategies set with minimized total cost III  E XPERIMENT AND R ESULT  A sound risk theoretical model is the key to precisely predict risk outcomes. Carr’s model [17  dev e l o pe d  by  CMU/SEI, is very complex, which consists of 194 risk factors and many detailed information, so that it needs lots of project data to reach high statistical validity, which is especially hard to apply to middle and small sized project in China. Our research adopts Wallace and Keil’s model that has 27 risk factors to form our investigation questionnaire \(each factor has 5 possible states/risk level, i.e low  a bit low  moderate  a bit high  high  500 questionnaires were delivered and 302 returned were valid, among them 226 were about failed projects, 76 about successful projects. The successful rate is about 25 002 76/302 002 which is in line with the reality of China software project development. The respondents mostly have enriched software project development experience, 83% of which have more than 3 year experience and 46% have taken up management position in the projects, mainly department manager, project manager or project technological guidance And more than half of the projects were finished within the latest 3 years; hence the collected sample can well reflect recent domestic SPRM reality We set support to be 3 and the confidence to be 95%, we totally find 10 success rules and 3130 fail rules, Table II only presents the success rules In one of surveys, we suppose a risk mitigation strategy database which contains 530 cases of different cost and utilities. The survey initially meets no success rule and 715 fail rules. We then used minisat to get a resolution which contains 9 feasible strategies \(worth RMB 75,000\ to make the project meets 7 success rules and 0 fail rules. Partial strategies are as follows: launch RMB 9,000 to better internal training, in order to lower “Inadequately trained development team member” risk from high to low launch RMB 15,000 to hire experts or consultancies to lower “Inexperienced project manager” risk from moderate to low to lower “Project involved the use of new technology” risk from high to a bit high launch RMB 7,000 to make the requirement analysis process more normalized lower “Unclear system requirements” risk from moderate to low etc TABLE I  C OMMON SPRM  R ISK M ITIGATION S TRATEGIES  Team management Time management Third party support 000  Build elite team 000  Employ experienced experts 000  Institutionalized communication 000  Internal training  000  Formulate more detailed quality standard 000  Set up clear milestone 000  Rewrite partial project planning/ further planning  000  Hire experts consultants or consultancies 000  External training 000  Outsourcing 000  Hire external staffs  User management Project management 000  Obtain mor user involvement/ user support 000  Strengthen communication with user to improve user understanding 000  Compose detailed user manual  000  Employ effective requirement management method 000  Normalize and streamline requirement analysis process 000  Rank requirement according to importance 000  Use rapid prototyping/ incremental development/ evolution development modular design   TABLE II  D ISCOVERED S UCCESS RULES  ID Risk factors states 1 Org2 low P&C4 low P&C5 low  2 Org2 low P&C5 low P&C6 low  3 Org2 low P&C5 low Team3 low  4 User1 low Req3 low Team1 a bit low  5 User2 low P&C3 low Team1 a bit low  6 User5 low P&C1 low P&C5 low  7 User5 low P&C5 low Team3 low  8 Req3 low P&C5 low Team1 a bit low  9 P&C5 low P&C6 low Team2 a bit low  10 Org2 low User1 low User2 low User4 low  User1: Users resistant to change User2: Con  ict between users User4: Users not committed to the project User5: Lack of cooperation from users Team1: Inadequately trained development team members Team2: Inexperienced team members Team3: Team members lack specialized skills required by the project Org2: Corporate politics with negative effect on project Req3: Unclear system requirements P&C1: Lack of an effective project management methodology P&C3: Inadequate estimation of required resources P&C4:  Poor project planning P&C5: Project milestones not clearly defined P&C6: Inexperienced project manager  
112 
112 


 Figure 2  Modified Apriori algorithm for rules mining IV  C ONCLUSION  Our research proposed a highly operational and planningoriented SPRM framework based on CARs. Besides we code the risk planning into CSP, and finally into SAT, which can be solved by using minisat Our methodology presents new resolution guidance to the research of unified model of software project risk analysis and planning. And our UIMSPRAP is the first unified software project risk analysis and planning model. We use real software development project data of China to test UIM-SPRAP, and provide intelligent decision support to the SPRM from risk analysis to planning A CKNOWLEDGMENT  This research was partly supported by National Natural Science Foundation of China \(NSFC, Project No 70801020\, Science and Technology Planning Project of Guangdong Province \(Project No.: 2010B010600034\ key program of National Social Science Foundation of China NSSFC, Project No.: 08AJY038\, and the third-stage key subjects construction project of 211 Project of Sun Yat-sen University and 211 Project of Guangdong University of Foreign Studies R EFERENCES  1  The Standish Group. 2009 Standish Chaos Report. The Standish Group International, Inc., 2009 2  R.N. Charette, “Large-scale project management is risk management”, IEEE Software, vol. 13, Jul. 1996, pp. 110-117, doi 10.1109/52.526838 3  T. Lister, “Interview with Tim Lister”, IEEE Software, vol. 14, 1997 pp. 18-19 4  B.W. Boehm, “Software risk management: principles and practices IEEE Software, vol. 8, Jan/Feb. 1991, pp. 32-41, doi 10.1109/52.62930 5  L. Wallace, M. Keil, and A. Rai, “Understanding software project risk: a cluster analysis”, Information and Management, vol. 42, Dec 2004, pp. 115-125, doi: 10.1016/j.im.2003.12.007 6  B. Liu, W. Hsu, and Y. Ma, “Integrating classification and association rule mining”, Proc. Knowledge Discovery and Data Mining \(KDD 98\, New York, Aug. 1998, pp. 80-86, doi: 10.1.1.48.8380 7  N. Megiddo, and R. Srikant, “Discovering predictive association rules”, Proc. Knowledge Discovery and Data Mining \(KDD 98\, New York, Aug. 1998, pp. 274-278, doi:10.1.1.42.5517 8  M.N.M. Garcia, I.R. Román, F.J.G. Peñalvo, and M.T. Bonilla, “An association rule mining method for estimating the impact of project management policies on software quality, development time and effort”, Expert Systems with Applications, vol. 34, Jan. 2008, pp 522-529, doi:10.1016/j.eswa.2006.09.022 9  H.J. Leavitt. “Applied organization change in industry structural technical and human approaches”, New Perspectives in Organizational Research, New York, John Wiley, 1964, pp. 55–70   M. Keil, P.E. Cule, K. Lyytinen and R.C. Schmidt, “A framework for identifying software project risks”, Communications of the ACM, vol 41, Nov. 1998, pp. 76-83, doi:10.1145/287831.287843   M. Benaroch, Y. Lichtenstein, and K. Robinson, “Real options in it risk management: an empirical validation of risk-option relationships”, MIS Quarterly, vol. 30, Feb. 2006, pp. 827-864 doi:10.1.1.85.7139   C.G. Pan, and Y.W. Chen, “An optimization model of CMMI-based software project risk response planning”, International Journal of Applied Mathematics and Computer Science, vol. 1, Jan. 2005, pp 79-82   A. Hakim, and H. Hakim. “A practical model on controlling the ERP implementation risks”, Information Systems, vol. 35, Apr. 2010, pp 204-214, doi:10.1016/j.is.2009.06.002   J.Y.Li, O. P. N. Slyngstad, M. Morisio, “A State-of-the-Practice Survey of Risk Management in Development with Off-the-Shelf Software Components”, Software Engineering, IEEE Transactions on Software Engineering, vol. 34, Mar. 2008, pp. 271-286, doi 10.1109/TSE.2008.14   C. Chittister, R. Kirkpatrick and R.L. Van Scoy, “Risk management in practice”, Technical Review SEI-93-TechReview-004, 1993   H. Kautz, D. McAllester, and B. Selman, “Encoding plans in prepositional logic”, Proc. International Conference on Principles of Knowledge Representation and Reasoning \(KR 96\, Nov. 1996, pp 374-384, doi:10.1.1.30.9946   M.J. Carr, S.L. Konda, I. Monarch, F.C. Ulrich, and C.F. Walker Taxonomy-based risk identification”, Technical Report CMU/SEI93-TR-006  
113 
113 


35.36%,36.02%\, Developer \(92.72%,93.42%\ and ProjectManager & Developer \(30.46%,30.35%\ The reason may be that in these projects the number of total participants is no more than 4. And so it can be concluded that in this kind of projects the labor division is not clearly most kinds of development are undertook by few developers or project managers 3  Except G1 and the case with only 1 role, the number of frequent pattern s in rank extent [1,3000 is  obvious greater than in the extent [7000,100  T h e  p h e n o m e n o n s h o w s  that the projects with higher rank usually own more kinds of roles, and it may be judged that these projects generally were well organized. Such as in G2, the support of frequent patterns with TranslatorI18NL10N, DocWriter, Tester WebDesigner in rank extent [1 i s  hi g h e r t h a n  t h e  extent [7000,10000  T h e r e  i s s i m i l a r Except G1, it can be believed that the frequent patterns in rank extent [1,30 c oul d r e fl e c t t h e  m o s t  r e a s o n a b l e  r o l e  configuration in OSS projects phenomenon in other groups TABLE V  F REQUENT PATTERNS OF G5 IN TOP 5 6   C ONCLUSION AND F UTURE W ORK  Some information related to participators and role structure of projects can reflect some properties of OSS projects and be obtained from software repository automatically, so they could be taken as a kind of evidence in software trustworthy assessment. Through a large number of OSS projects in SourcForge, some interesting frequent patterns of roles are discovered by association rules. Based on the work in this paper, it can be believed that the data about roles and participators from software repository can be used to improve or even replace some metrics in the existing evaluation models and will help evaluate OSS projects efficiently and automatically. This work is part of the research on evaluation of OSS projects by using the roles, tasks and contributions of projects participators, and can be regarded as a further step of previous work A CKNOWLEDGEMENT  This work was partially funded by National High-Tech Research and Development Plan of China under Grant 2007AA010301\ National Natural Science Foundation of China under Grant \(No.60903043\, and the Core electronic devices, high-end general chip and fundamental software  Major Project\(2009ZX01043-001-04 R EFERENCES  1  Lin Yuan, Huaimin Wang, Gang Yin, et al. Trustworthy Evaluation Technology of Software Based on Roles. Journal of Beijing University of Technology, Vol.36, No.5, 611--615\(2010 2  Lin Yuan, Huaimin Wang, Gang Yin, et al. Mining Roles of Open Source Software. In 2nd International Conference on Software Engineering and Data Mining, IEEE Press Chengdu\(2010 3  LIU Ke, SHAN Zhi-guang, WANG Ji, et al. Basic research of trustworthy software” survey of the grand research plan. China Science Fund, 2008\(3\: 145-151 4  TRUSTIE-STC, Software Trustworthiness Evidence Framework Specification \(V2.0\, http://www.trustie.net/download/ STEFS-2.0.pdf 5  Golden's OSMM, http://www.navicasoft.com/pages 6  CapGemini's OSMM. http://www.seriouslyopen.org/nuke/html 7  OpenBrr. Business Readiness Rating for Open Source. \(2005-110\[2009-10-20 h t t p    www o p e n b rr o r g  BRR 2005.pdf 8  Atos Origin. Method for Qualification and Selection of Open Source software \(V1.6\. http://www.qsos.org/ download/qsos-1.6-en.pdf 9  R. Agrawal, C. Faloutsos, and A. Swami. Efficient similarity search in sequence databases. In Proc. of the Fourth International Conference on Foundations of Data Organization and Algorithms, Chicago, October 1993   Agrawal, R. and Srikant, R. 1994. Fast algorithms for mining association rules. In Proc. of the 20th VLDB Conference, pp.487-499 N  N u  u m b e r  o  o f  r o l e s    F  F r  r e q u e n t  p a t t e r n s  o f  r o l e  c  c o n f i g u r a t i o n    S  S u  u p p o r t    2 ProjectManager & Developer 70.085 Tester & Developer 41.026 Tester & ProjectManager 35.043 DocWriter & Developer 33.333 AllHandsPerson & Developer 31.624 3 Tester & ProjectManager & Developer 35.043 DocWriter & ProjectManager Developer 27.350 AllHandsPerson & ProjectManager Developer 24.786 Nospecificrole & ProjectManager Developer 23.932 TranslatorITLT & ProjectManager Developer 23.077 4 Nospecificrole & Tester ProjectManager & Developer 15.385 AllHandsPerson & Tester ProjectManager & Developer 15.385 DocWriter & Tester & ProjectManager Developer 15.385 Nospecificrole & DocWriter ProjectManager &Developer 13.675 WebDesigner & Tester & ProjectManager Developer 12.821 5 Nospecificrole & AllHandsPerson Tester & ProjectManager & Developer 8.547 Nospecificrole & DocWriter & Tester ProjectManager & Developer 8.547 PorterCrossPlatformDevel WebDesigner & Nospecificrole ProjectManager & Developer 6.838 PorterCrossPlatformDevel WebDesigner & DocWriter ProjectManager & Developer 6.838 448 


002p 002p     1         1     v<h p 006 212 006 006 212 212 212 006 006 212 212 006 It forms projected DBs for valid items i.e v<h c a   b c in the UF-tree For instance if R R R R  R R R R R R R R 006 R      p 005 005 005 2  3     4  1  1 1 also satisfy 125 min 1    max 005 005 5 batches and each batch to contain 1M transactions In addition to this dataset we also conducted the following experiments using some other datasets including UCI real-life datasets as well as FIMI datasets The observations or trends were consistent 002 p X X X X  are guaranteed to be invalid due to projected DB where where  Note that instead of checking all as in UF-streaming  CUF-streaming only needs to check O  Again CUF-streaming only needs to check O  However 322frequent\323 itemsets found in these projected DBs need to be checked against if  the algorithm only needs to check sum sum sum sum for for for for  items are arranged in non-ascending order j j j j j 2 2 e d c b a e d n n  r j is of the form  the algorithm only needs to form projected DBs for itemsets satis\336es such that valid items come before/below invalid items in the UF-tree For instance if is of the form is of the form value items are arranged in non-descending order is of the form is of the form  items are arranged in non-descending order until it 336nds the 336rst invalid item  All remaining items domain items and ii  items where  CUF-streaming also stores only valid itemsets in the UF-stream structure Unlike UF-streaming  until it 336nds the 336rst valid item 1.5 1.6 1.8 as well as their 322extensions\323 No more constraint checking is needed as any 322frequent\323 itemsets found in the projected DBs of valid items and their 322extensions\323 are guaranteed to be valid due to anti-monotonicity of in the UF-stream structure Same approach is then applied to the second batch and results in the same UF-stream structure as shown in Fig 2\(a Afterwards CUF-streaming applies the same approach to the third batch this results in the same UF-stream structure as shown in Fig 2\(b  From the 322frequent\323 itemsets against are guaranteed to be valid further constraint checking is needed for 322extensions\323 of the  from leaves to the root The algorithm then checks  322Frequent\323 itemsets found in these projected DBs are guaranteed to be valid due to the anti-monotonicity of  322Frequent\323 itemsets found in these projected DBs are guaranteed to be valid due to the monotonicity of  Unlike the procedures for other three types of constraints the algorithm forms projected DBs for 322extensions\323 of of Type III or IV having selectivity   the algorithm forms projected DBs for itemsets  are guaranteed to be invalid due to  then all supersets of values from leaves to the root if as not all of them are valid By exploring the convertible anti-monotonicity of  domain items are arranged in non-ascending order values from leaves to the root if is an itemset with non-positive is an itemset with non-negative is a Type I constraint So when the 336rst batch of transactions from uncertain data stream 337ows in our proposed CUF-streaming algorithm arranges domain items in ascending order of also violate  domain items where of of the form of  domain items are arranged in non-descending order of  domain items against of or of values By doing so the algorithm checks violates  then all 322extensions\323 of also violate of of values By doing so the algorithm checks each domain item against  All 322extensions\323 of a valid of WBC counts i.e items due to convertible monotonicity of re guaranteed to be invalid due to gainst    invalid e.g e.g e.g gainst items because some of these 322extensions\323 may be valid With i i.e if as all remaining items and UF-streaming 006  T YPE II M ONOTONE C ONSTRAINT  CUF-streaming arranges domain items in a monotonic decreasing or increasing order  T YPE III C ONVERTIBLE A NTI MONOTONE C ON STRAINT  Like Type II CUF-streaming arranges domain items in  The mined 322frequent\323 itemsets that satisfy one of the above four types of constraints are then stored in the UF-stream structure Afterwards CUF-streaming handles subsequent batches of streaming transactions of uncertain data in a similar fashion Like UF-streaming  006    1.35 CUF-streaming then stores all four constrained 322frequent\323 itemsets 006 005 006 005 attr attr attr attr  0,1 CUF s t re a m i n g c he c k s O    k v v i m h h v v i v v h h v h h m items as well as avg avg a c a c 1  n n  j j j 005 006 006 VI E XPERIMENTAL R ESULTS We used different datasets for experimental evaluation For space limitation we reported here the experimental results on a dataset generated by the program developed at IBM Almaden Research Center T hi s da t a s e t c ont a i ns 10M re c ords w i t h an average transaction length of 10 items and a domain of 1,000 items We assigned an existential probability from the range 0,1 t o each i t em i n each t r an s act i o n  W e s et t h e window size to be  005 013 013 013  For each values such that values from leaves to the root if against each domain item until it 336nds the 336rst invalid one  For each against each domain item until it 336nds the 336rst invalid one  Again projected DBs are formed only for the valid items against each item in the projected DB until it 336nds the 336rst invalid one T YPE IV C ONVERTIBLE M ONOTONE C ONSTRAINT  Again CUF-streaming arranges domain items in such that valid items come before/below invalid items in the UF-tree For instance if against each domain item in the UF-tree i.e attr X.attr const attr X.attr const attr X.attr const const attr attr X.attr const const attr attr const attr const attr because all remaining items values By doing so the algorithm checks value domain items are arranged in non-ascending order 1 r x C x x Y x C O C m m C C C C C x x x x Y x C x C x C m C C C X C X C x x x C C X C X C C C C C C x x C X m C 002 m C C C c c b a C w f  f  i v 005     CUF-streaming mines constrained 322frequent\323 itemsets more effectively as it pushes the constraint inside the mining process and explores properties of the constraint Revisit the uncertain data stream in Example 1 r i>v items While further constraint checking is unnecessary for 322extensions\323 of the Example 3 valid items come before/below invalid items valid valid invalid Y Y 


preMinsup Fig 3 Experimental results runtimes All experiments were run in a time-sharing environment in an 800 MHz machine The reported 336gures are based on the average of multiple runs Runtime includes CPU and I/Os it includes the time for both tree construction and frequent itemset mining steps We evaluated different aspects of the proposed algorithms which were implemented in C First we compared the performance of the three proposed algorithms using four different constraints one from each type of the above constraints Experimental results showed that the runtimes for both UF-streaming 100   150   200   250   10   20   30   40   50   60   70   80   90  Selectivity \(i.e., percentage of items selected CUF-streaming \(w=5 batches, each with 1M transactions Type IV constraint C4  Type II constraint C2                      Type III constraint C3                      Type I constraint C1                                 100   150   200   250   300   350   400   450   10   20   30   40   50   60   70   80   90  Selectivity \(i.e., percentage of items selected CUF-streaming \(w=50 batches, each with 1M transactions Type IV constraint C4  Type II constraint C2                      Type III constraint C3                      Type I constraint C1                                 50   55   60   65   70   75   80   85   90   0.002   0.003   0.004   0.005  preMinsup \(in percentage Runtime vs. existential probability & preMinsup Items take on an average number of existential probability values                      005 005    t t 327 327 005 items All 322extensions\323 of valid items were valid Due to the item ordering the algorithm stopped checking constraints whenever it detected the 336rst invalid items However for on the mining results For example using 0.8 C C C C C C C C C C w w C C w 0.9 preMinsup  90 of the mined constrained 322frequent\323 itemsets were truly frequent When and UF-streaming Asitexplored properties of these four constraints and pushed the constraints inside the mining process CUF-streaming required shorter runtimes than the other two algorithms As shown in Fig 3\(a the runtimes for handling all four types of constraints increased when the selectivity increased Among them a Runtime vs selectivity  a Type I constraint incurred the lowest runtime among the four types of constraints because CUF-streaming formed fewer 322extensions\323 as they consisted of only valid items Again due to the item ordering the algorithm stopped checking constraints whenever it detected the 336rst valid items Next we repeated the above experiment with a different the window size was low say 10 only a few small UF-trees were constructed and mined as the algorithm only 322extended\323 valid items and a shorter runtime 50 c Runtime vs  and the convertible monotonicity of  the monotonicity of  the convertible anti-monotonicity of 110 sec cf 160 sec in Fig 3\(a was required As another example for 5 batches when  the algorithm applied constraint checking on projected DBs for valid items as well as their 322extensions\323 because not all 322extensions\323 of valid items were valid  the algorithm 322extended\323  many bigger UF-trees were constructed and mined as the algorithm formed projected DBs for both valid as well as invalid domain items which took or having more batches in the sliding window had the bene\336ts of increasing the chance of not pruning relevant expected support information for truly frequent itemsets Moreover as shown in Fig 3\(c when increased fewer itemsets had expected support performed constraint checking as an intermediate step prior to storing the 322frequent\323 itemsets into the UF-stream structure In contrast CUF-streaming was more interesting as it runtimes depended on the type of constraints as well as the constraint selectivity Speci\336cally the algorithm explored the anti-monotonicity of a Type II constraint and a Type III constraint incurred the next two highest runtimes For  and thus shorter runtimes were required The 336gure also showed the effect of the distribution of item existential probability When items took on a few unique existential probability values the UF-tree b ecame smaller Thus times for both UF-tree construction and mining became shorter In addition we also measured the number of nodes in each UF-tree The experimental results showed that the total number of nodes in a UF-tree was no more than the total number of items with their existential probability in all transactions in the current batch of uncertain data stream Furthermore we measured the number of nodes in the UF-stream structure as well As UF-streaming   126 400 sec cf 230 sec in Fig 3\(a As all three algorithms are approximate algorithms we evaluated the effect of  95 of the mined constrained 322frequent\323 itemsets were truly frequent However lowering 5 b Runtime vs selectivity  were constant regardless of the constraint selectivity because these two algorithms did not explore property nor did they push the constraints inside the mining process Speci\336cally UF-streaming only valid preMinsup minsup preMinsup minsup preMinsup preMinsup preMinsup performed constraint checking as a postprocessing step whereas UF-streaming a Type IV constraint incurred the highest runtime because CUF-streaming 322extended\323 i.e formed projected DBs for both valid and invalid items performed constraint checking at a post-processing step the size of UF-stream was observed to be independent of the constraint selectivity In contrast as Items take on many different existential probability values  50 336xed-sized batches with each batch containing 0.1M transactions instead of using 5 336xed-sized batches with each batch containing 1M transactions With this setting each batch was smaller 0.1M vs 1M transactions Thus each batch required lower runtime e.g for constructing and mining UF-trees However the number of batches was higher 50 vs 5 batches than the previous setting This explains why the runtimes see Fig 3\(b took on a broader range than the previous experimental results For example when the selectivity of 1 2 3 4 4 2 3 2 3 1 2 4 w w 0   Runtime \(in seconds 0   Runtime \(in seconds 0   Runtime \(in seconds Items take on a few unique existential probability values                     50   50   0.001   


 ch 6 AAAI/MIT Press 2004  G  G r ahne L  V  S  L aks h m a nan and X  W ang 322E f 336 ci ent m i n i n g o f constrained correlated sets,\323 in ACM TKDD  Proc KDD 2009 Proc VLDB 1994 Proc KDD 2009 Proc IEEE ICDE 2008 Proc PAKDD 2007 Proc VLDB 2008 Proc IEEE ICDE 2000 Proc VLDB 2008 Proc IEEE ICDE 2009 Proc IEEE ICDM 2006 Proc IEEE ICDE 2002 Proc IEEE ICDE 2001 Proc IEEE ICDE 2008 preMinsup minsup Proc U  09 Proc PAKDD 2008 Proc ACM SIGMOD 2008 Data Mining and Knowledge Discovery Proc ACM SIGMOD 1993 Proc SSTD 2005 Proc ACM SIGMOD 2000 Proc ACM SIGMOD 2009 Proc ACM SIGMOD 1998 Proc ACM SIGMOD 2008 2 pp 18\32026 June 2005 12 C G ia n n e lla e t a l 322 M in in g f r e q u e n t p a tte r n s in d a ta s tr e a m s a t m u ltip le time granularities,\323 in 4 pp 337\320389 Dec 2003  C  K  S  L eung 322F r e quent i t e m s et m i ni ng w i t h cons t r ai nt s  323 i n 127 1 batch containing the entire dataset Then we compared our algorithms with UF-growth 22 b y as s i g n i n g t o each i t em i n e v er y t r an s act i o n in a dataset an existential probability of 1 i.e all items are de\336nitely present in the dataset and 005 005 Encyclopedia of Database Systems queries on uncertain streams,\323 in 34 28 34  pp 29\32037 2 R  A gr aw al et al   322M i n i n g a s s o ci at i o n r ul es bet w een s e t s of i t e ms i n large databases,\323 in  pp 207\320216 3 R  A gr aw al and R  S r i kant  322 F a s t al gor i t h ms f o r m i n i n g a s s o ci at i o n rules,\323 in  pp 487\320499 4 R  J  B ayar do J r   R  A g r a w a l  and D  G unopul os  322 C ons t r ai nt b as ed rule mining in large dense databases,\323 2\3203 pp 217\320240 July 2000 5 T  B e r n e c k e r e t a l 322 P r o b a b ilis tic f r e q u e n t ite m s e t m in in g in u n c e r ta in databases,\323 in  pp 119\320127 6 R  C h e n g e t a l 322 P r o b a b ilis tic v e r i\336 e r s  e v a lu a tin g c o n s tr a in e d n e a r e s tneighbor queries over uncertain data,\323 in  pp 47\32058 8 G  C or m ode and M  H adj i e l e f t her i ou 322F i ndi ng f r e quent i t e m s i n dat a streams,\323 in  pp 1530\3201541 9 G  C o r m o d e e t a l 322 F in d in g h ie r a r c h ic a l h e a v y h itte r s in s tr e a m in g d a ta  323  pp 400\320417  M M G a ber  A  B  Z a s l a v s k y  and S  K r i s hnas w am y  322Mi n i n g d at a streams a review,\323  pp 512\320521  J  H a n J  P e i  and Y  Y i n  322 Mi ni ng f r e quent pat t e r n s w i t hout candi dat e generation,\323 in  pp 1\32012 15 J  H u a n g e t a l 322 M a y B M S  a p r o b a b ilis tic d a ta b a s e m a n a g e m e n t s y s tem,\323 in  pp 1071\3201074  C  J i n e t a l   322 S l i di ngw i ndo w t op pp 301\320312  L  V  S  L a ks hm anan C  K  S  L e ung and R  T  N g 322E f 336 ci ent dynam i c mining of constrained frequent sets,\323  pp 9\320 18  C  K  S  L eung and B  H ao 322 Mi ni ng of f r e quent i t e m s et s f r o m s t r eam s of uncertain data,\323 in  pp 1663\3201670  C  K  S  L eung and Q  I  K han 322D S T r ee a t r e e s t r uct u r e f o r t he m i ni ng of frequent sets from data streams,\323 in  pp 928\320 933  C  K  S  L eung M A  F  Mat e o and D  A  B r a j czuk 322 A t r eebas e d approach for frequent pattern mining from uncertain data,\323 in  pp 13\320 24  J  P e i  J  H a n and L  V  S  L aks h m a nan 322Mi n i n g f r e quent i t e m s et s w i t h convertible constraints,\323 in  pp 433\320442  C  R 253 e et al 322Event queries on correlated probabilistic streams,\323 in  pp 715\320728 27 A  D  S a r m a  M  Th e o b a ld  a n d J  W id o m  322 Ex p lo itin g lin e a g e f o r con\336dence computation in uncertain and probabilistic databases,\323 in  pp 1023\3201032  K  Y i et al   322S m a l l s ynops es f o r g r oupby quer y ver i 336 cat i o n o n outsourced data streams,\323  pp 819\320832 322frequent\323 itemsets from uncertain data streams In terms of ef\336ciency the experimental results showed that UF-streaming was slightly faster because it did not perform any constraint checking whereas our three proposed algorithms performed the extra constraint checking step Among them CUF-streaming only performed constraint checking on some 322frequent\323 itemsets and the other two performed constraint checking on all 322frequent\323 itemsets However in terms of the mining results we observed that all four algorithms returned the same collection of 322frequent\323 itemsets This illustrated that our proposed algorithms could be used for mining unconstrained frequent itemsets from uncertain data streams Moreover it is important to note that while the UF-streaming is con\336ned to 336nding 322frequent\323 itemsets satisfying constraints with 100 selectivity our algorithms are capable of 336nding 322frequent\323 itemsets that satisfy constraints having lower selectivity Along this direction we set and CUF-streaming both pushed the constraint early the corresponding size of UF-stream was proportional to the selectivity of constraints Finally we evaluated the functionality and applicability of our proposed algorithms We again used four different constraints and we also set the constraint selectivity be 100 i.e all items are selected Then we compared our three proposed algorithms with UF-streaming  w hi c h w a s designed to mine 1 UF-streaming 4 article 2 Jan 2008 10 X  D a i e t a l 322 P r o b a b ilis tic s p a tia l q u e r ie s o n e x is te n tia lly u n c e r ta in data,\323 in 3 article 15 Aug 2009 29 Q  Zh a n g  F  Li a n d K  Y i 322 F in d in g f r e q u e n t ite m s in p r o b a b ilis tic data,\323 in  pp 1179\3201183 Springer 2009  C  K  S  L eung and D  A  B r a j czuk 322E f 336 ci ent a l gor i t h m s f o r m i n i n g constrained frequent patterns from uncertain data,\323 in Data Mining Next Generation Challenges and Future Directions w  UF-streaming unconstrained and CUF-streaming\321 which integrate i mining of uncertain data ii constrained mining and iii mining of data streams These algorithms effectively mine constrained frequent itemsets from uncertain data streams A CKNOWLEDGMENT This project is partially sponsored by Natural Sciences and Engineering Research Council of Canada NSERC and the University of Manitoba in the form of research grants R EFERENCES 1 C  C  A ggar w al et al   322F r e quent pat t e r n m i ni ng w i t h uncer t a i n dat a  323 i n  pp 653\320661  C  K  S  L eung R  T  N g  a nd H  Manni l a  322 O S S M  a s e gm ent a t i o n approach to optimize frequency counting,\323 in SIGMOD Record ACM TODS ACM TODS k 4   Again we observed that all four algorithms returned the same collection of frequent itemsets This illustrated that our proposed algorithms could also be used for mining unconstrained frequent itemsets from static uncertain datasets VII C ONCLUSIONS Frequent itemsets generally serve as building blocks for various patterns in many real-life applications Most of the existing algorithms 336nd unconstrained frequent itemsets from traditional static transaction databases consisting of precise data However there are situations in which ones are uncertain about the contents of transactions There are also situations in which users are only interested in some subsets of all the mined frequent itemsets Furthermore a 337ood of data can be easily produced in many situations To deal with all these situations we proposed three tree-based algorithms\321 namely UF-streaming   pp 973\320982 7 C  K  C hui  B  K ao a nd E  H ung 322Mi n i n g f r e quent i t e m s et s f r o m uncertain data,\323 in     pp 583\320592  R  T  N g et al   322E xpl or at or y m i n i n g a nd pr uni ng opt i m i zat i ons of constrained associations rules,\323 in  


              


   


                        





