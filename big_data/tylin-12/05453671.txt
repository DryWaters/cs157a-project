Associating IDS Alerts by an Improved Apriori Algorithm  Wang Taihua School of Computer and Information Engineering  Jiangxi Normal University Nanchang Jiangxi 330022, China E-mail: nuciewth@Yahoo.cn Guo Fan School of Computer and Information Engineering  Jiangxi Normal University Nanchang Jiangxi 330022, China   Abstract  Among a large number of association rule mining algorithms, Apriori algorithm is the most classic one, but the 
Apriori algorithm has three deficiencies, namely: the need for scanning databases many times, generating a large number of Candidate Anthology, as well as frequent itemsets iteratively The paper presents a method that solves the maximal frequent itemsets through one intersection operation. The degree of support is obtained through the times of intersection without having to scan the transaction database, by numbering some of the properties to reduce memory space and search the candidate set list easily, thereby enhancing the efficiency of the 
algorithm. Finally, it can generate association rules for Intrusion Detection System. Experimental results show that the optimized algorithm can effectively improve the efficiency of mining association rules Keywords-data mining 002 association rules 002 Apriori algorithm 002 itemsets I  I NTRODUCTION  Data mining [1  i s t h e m o st  dyna m i c e m e r gi ng r e s e ar c h  in today's database technology and artificial intelligence 
research; the main goal is to dig out valuable models from a large database for users. In the transaction database, mining association rule is a very important research topic in data mining field. Intrusion Detection System \(IDS\ is the core of security technology. It can effectively cooperate with the other network security products and provide proactive and real-time protection for the network. Data mining technology may be used to discover the knowledge and establish attack behavior model from original IDS alerts 
Firstly, some basic concepts and issues of association rules are presented in the following  Association rules discovery is an aspect of data mining An association rule is a rule that describes relationship between the data items in the database. Mining objects are generally transactional database  The following is the formal description of association rule mining problems: Set I = \(i 1 i 2 i m  j is an item. Set D as a transaction database, T 000\000 
I, T has an identity TID Association rule is the form like "X 000 Y", if X 000\000 I, Y 000\000  I, X 001 Y 001. Conditions that association rule X 000 Y is set up 0017 with support for S. Namely, in the transaction database D, there are at least S% of the transaction that contains X 001 Y, itemset \(X 001 Y\ is called the support 
rate for the support rate of association rules. Denoted by: S X 000 Y\ = S \(X 001 Y 0018 with a confidence level C Namely, in the transaction database D contains X's affairs at least C% of the transaction and contains Y. Association rule X 000 Y level of confidence recorded as: C \(X 000 Y\ = s \(x 001 y\ / s \(x\ * 100%; if S \(X 000 Y 000 
min_sup \(minimal support\ and C \( X 000 Y 000 min_conf \(minimal confidence level\, claimed that stronger rules of association rules otherwise known as the weak rule Maximal frequent itemsets [2  all o f its d i r ect su p e rse t s  are not frequent itemsets Closed itemsets [3 If al l t h e di r ect s u pe rs e t s  of an  itemset do not have the same degree of support with it Frequent closed itemsets [3 a cl os e d it em s et is f r e q u en t   
Third International Symposium on Intelligent Information Technology and Security Informatics 978-0-7695-4020-7/10 $26.00 © 2010 IEEE DOI 10.1109/IITSI.2010.47 478 


Association rule mining problem is to find out all the strong association rules with a given degree of support and confidence in the D. Therefore, the mining association rules can be divided into two sub-issues According to the minimum support rate to find out all the frequent itemsets in the database D, if S \(X 000 min_sup claims X as a frequent itemset Generate association rules. For each frequent itemset X Y, if X 000\000 Y, X 000  0013 S \(X\ \(Y 000 min_conf, the association rule is Y 000 Y-X As the second step is relatively easy, the current research focuses on the first step, that is, to find frequent itemsets. As the number of different itemsets can be up to 2m and the scale of database is large, it is almost impossible calculating the support of all items II  R ELATED WORK  A  Apriori Algorithm Apriori algorithm is proposed by R. Agrawal and R Srikant in 1994. To be used in IDS, the algorithm may be improved from the following aspects If some candidate itemsets are considered as non-frequent ones, they should not be generated There are many duplicated comparing operations on the same items in the connection operation Each time after the candidate itemsets are generated, it scans the database again to determine whether these candidates are frequent ones. The procedure includes many duplicated and unnecessary scanning operation To be used in IDS process, it only considers the association rules between the maximal frequent itemsets and all the other ones can be ignored B  Improved Apriori algorithm  Many researchers have focused on improving the Apriori algorithm, and they have put forward a number of ideas. All the previous research may fall in the following categories partition-based technology, matrix compression, the weighted attributes [4 et c Val d es   5  im pr ov e d th e  algorithm by cutting the candidates of non-frequent sequences in the L1 sequence, and identifying sequential models from the remaining candidates. In order to reduce the number of scanning and quickly discover user behavior models, Yan used  t h e  ra t i o  o f suppor t  t o e x p e c t ed support to denote the conditional probability from item X to item Y. Treinen [7 pr o p o s e d an  i m pr ov e d on e by  ap pl y i n g  priority attributes to items with length l \(l 0011 k\ to determine the candidate k-th itemsets so that the scanning times is reduced III  I MPROVEMENT ON NON ITERATIVE A PRIORI ALGORITHM  Traditional Apriori algorithms solve candidate itemsets by iteration. They are improved by decreasing candidate itemsets and reducing scanning times. But in essential, the bad performance of the algorithm mainly results from the iteration of self-join operations. The paper proposes a non-iterative improved Apriori algorithm which is mainly used in IDS A   The algorithm basis  The characters and lemma of association rules include 1\ Subsets of any frequent itemset are also frequent itemsets. 2\The super sets of any non-frequent itemset are non-frequent.  3\he subsets of any maximum frequent itemset must be frequent, and super sets of it are non-frequent.4\ The super sets of any closed itemsets a 000U e non-frequent.Lemma 1: Any maximum frequent itemset can be obtained by the intersection operation. Lemma 2 Intersection operation can get all the frequent itemsets Lemma 3: The value of support degree relates to the number of intersection operations The following is the demonstration procedures of the lemmas \(min_sup value with 1 is not considered 1 002 003 004 005 sup min_     X s I X X   sup min_       004 006 005 Y s I Y Y X Y  s\(X 0031 min_sup 0031 2     j i X j i T T j i  007 010 010 000\037    Conclusion: Any maximum frequent itemset must be supported by at least two items 2 sup min_     003 004 005 X s I X X   011  004 006 010  sup min_      Y s I Y Y X Y   sup min_       004 006 010 Y s I Y Y X Y  
479 


    j i T T j i X j i 000\037 004 007 010 010  Conclusion: Any frequent itemset is a maximal frequent itemset, or a subset of a maximum frequent itemset   3\ Define a function count\(x\ which denotes the times of the intersection to get itemset x. Let x is supported by n items, if there is an intersection between any two items, the total number of intersections is count\(x\The relationship between s\(x\ and count\(x\s that count\(x S\(X 2 Conclusion: the support degree of an itemset is determined by count\(x\ithout scanning the transaction database D During IDS alert mining procedure, only the maximum frequent itemsets are considered, since association rules with low-dimension have no practical effects. Since most candidate itemsets with high degree of support are obtained by intersection operation, and they are probably the maximal frequent ones, the paper proposes a method that replaces iteration with intersection operation, discarding useless sub-frequent itemsets. Intersection operations can select the candidate itemsets whose support degree are not less than two and be sure to get all the maximum frequent itemsets The support degree of the candidate itemsets is obtained by counting the number of intersection operations, not by re-scanning transaction database. In order to simplify the intersection operations, in the pre-processing stage, some of the attributes are indexed separately B   The algorithm procedure The algorithm procedure is depicted in the following Step 1: The conversion phase makes indexes for alert attributes such as protocol type, alert type, and attack category so as to simplify intersection operation Step 2: Doing intersection between transactions to get the maximal itemsets. If the results are found in the list of the candidate itemsets, the counter is added by 2, otherwise the result is inserted into the list and the counter is reset as 2 The counter denotes the support degree for the transaction Step 3: Obtaining all frequent itemsets. The counters in the list are converted into the value of the support degree. A candidate itemset is a frequent one if its support degree is not less than predefined min_sup Step 4: Generating Association rules. In our experiments an association rule only involves attack type, and the algorithm only generates the association rule like X 000 Y where Y is the attack behavior. If the confidence of an association rule is greater than or equal to min_conf, it is a strong one The formal description of Algorithm is described as below Input: transaction database D = \(TID1, TID2 ... TIDn the minimal transaction support threshold min_sup  Output: maximal frequent itemsets L Pre-processing  for \(each i,j i<n&&j<m if \(item j 012 TID i  convert\(itemj\; // the last three properties  will be encoded  Core Algorithm count= 0   the number of itemsets elements for each TID i 012 D 001 TID j 012 D 002 i 007 j 002  temp = TID i 000\037 TID j    Seek common ground if\(temp 013  Search for candidate itemset list Index = Serchitem\(temp If it already exists, then the automatic counting, otherwise, this candidate set to join the candidate list if\(index== -1\ash[index  else  itemsets.add\(temp hash[Coun   For each itemsets.get\(k\ \(k 0010 Count if\(hash[k 003 min_sup-1 Add itemsets.get\(k\ to L  the candidate set K is a frequent candidate set  generating association rules For each L i 012 L  Y = Attacks 002 X = Li Y If\(conf\(X 000 Y 0011 min_conf  it is a strong //association rules 
480 


 Associate\(X 000 Y\     // Generating a new rule  C  An example Table I shows the original database D from AllElectronics  w h i c h i n c l ude s ni ne i t e m s a nd fi ve attributes. The minimum support degree is 2 TABLE I  T HE T RANSACTIONAL D ATABASE O F A  B RANCH O F A LLELECTRONICS  id items T 1 I 1 I 2 I 5  T 2 I 2 I 4  T 3 I 2 I 3  T 4 I 1 I 2 I 4  T 5 I 1 I 3  T 6 I 2 I 3  T 7 I 1 I 3  T 8 I1,I 2 I 3 I 5  T 9 I 1 I 2 I 3  The Apriori algorithm works in the following procedure Error! Reference source not found Scanning database 5 times to get five 1-frequent itemsets {I 1 6, I 2 7, I 3 6, I 4 2 I 5 2 Error! Reference source not found 10 times intersection operation for the candidate itemsets, and 10 times scanning operation to get six 2-frequent itemsets I 1 I 2 4, I 1 I 3 4, I 1 I 5 2, I 2 I 3 4, I 2 I 4 2, I 2 I 5 2 Error! Reference source not found 30 times intersection operation and 6 times scanning operation to get two 3-frequent itemsets I 1 I 2 I 3 2, I 1 I 2 I 5 2 Error! Reference source not found One intersection operation and one scanning operation to get nothing Apriori needs 41 times intersection operation and scanning database 22 times to get frequent itemsets {{I 1 I 2  I 3 I 4 I 5 I 1 I 2 I 1 I 3 I 1 I 5 I 2 I 3 I 2 I 4 I 2 I 5 I 1 I 2 I 3 I1I2I5  The improved works like the following Since the transaction database has only one attribute, the pre-processing stage is unnecessary. In this case, after the intersection operation repeats C 9 2 times and scanning candidate itemset list 9 times to count the values of support degree, the result list of the frequent itemsets is like {{I 1 I 2 I 3  I 1 I 2 I 1 I 3 I 2 I 3 I 2 I 4 I 1 I 2 I 3 I 1 I 2 I 5 It is obvious that itemsets I 2 I 4 001 I 1 I 2 I 3 001 I 1 I 2 I 5 are maximum frequent itemsets and others are their subsets  If either intersection operation or the comparison operation is a basic unit operation, Apriori algorithm needs 41+22 000h 9=239 units, but the improved algorithm needs only C92+9=81 units. The non-iterative algorithm is obviously more efficient than Apriori D  Experimental Analysis MIT Lincoln Laboratory DARPA99 and DARPA2000 9  dat a s e ts a r e  ch os en t o ev a l u a t e  th e ef f ect  of  th e  algorithm. Inside-network alerts of the third week are used off-line with Snort 2.4.2 running as NIDS mode under Red hat Linux 9.1, opening all the detection capabilities, using the default full alert mode  Table II shows the original DARPA99 and DARPA2000 data. The first and second column denotes the week day on which the alerts were generated. The third column means the total number of the captured packets and the forth column points out the number of the types of the alerts. For example on Wednesday, there are 39 kinds of alerts and the total number of alert is 3465  TABLE II  DARPA  O RIGINAL D ATA S HEET  data source alert number alert type 2000year inside 1883 21 DMZ 486 19 99Mon inside 3407 40 99Tue inside 3887 43 99Wen inside 3465 39 99Thu inside 3840 36 99Fri inside 4151 44 TABLE III  A LERT CORRELATION RESULTS  data source association number attack type 2000 inside 18 4 DMZ 46 4 99Mon inside 9 3 99Tue inside 10 3 
481 


99Wen inside 11 3 99Thu inside 10 4 99Fri inside 6 3 Firstly a format conversion module converts the original alerts to the normalized ones, which take source IP, source port, destination IP, destination port, protocol type, alert classification, and attack type as mining attributes. We use the normalized alerts as the input. The implementation is based on the java platform. Threshold values are configured as min_sup = 0.01 and min_conf =0.1 Table III shows the mining association results. The algorithm generates some useful association rules. The first two column are as same as table 1.The third column points out the number of the strong association rules of the alerts and the forth column denotes the number of the attack type of the alerts. For example, on Wednesday, there are 3 kinds of attack types and the total number of strong association rules is 11  Experimental results denote the analysis of data sets in the third week. Only 0.4% alerts are mined as strong association rules, which include "CHAT IRC message Potential Corporate Privacy Violation" originated by attacking the port 6667 of address 192.168.1.20 frequently The rule "INFO TELNET access also shows that telnet service on IP address 172.16.112.50 is frequently accessed  There is an important rule named "SNMP public access udp" which denotes 635 duplicated alerts on Thursday, since IP 192.168.1.30 sends data packets to port 161 on IP 172.16.112.100 through port 32775 every 1 ~ 2 minutes Obviously, the algorithm is useful to reduce the duplicated alerts and help the administrator improving the efficiency The inside network dataset of Darpa2000 is also used. In the dataset, there is an attack chain composed of five stages Four of the five stages are denoted correspondingly by the alerts "RPC portmap sadmind request UDP", "Decode of an RPC Query", "RPC sadmind query with root credentials attempt UDP", "RPC port map Solaris sadmin port query udp portmapper sadmin port query attempt". The algorithm successfully mined all the four rules, which show the full intension of the attacker. The attacker starts from 202.77.162.213 attempting to find the host with "RPC sadmind" vulnerability. Then, he sends a decoding of RPC requests. After that, he launches an exploit to obtain administrator privileges. Finally, he calls rsh to get a remote Shell. This result demonstrates that the algorithm may help the administrator finding out the intension of the attacker IV   C ONCLUSION  The iterative self-join operations used in traditional algorithms include many duplicated and unnecessary scans which result in the low performance. The paper proposes an improved way which removes the iteration procedure and uses one intersection operation to generate maximal frequent itemsets. Experiments demonstrate that the improved one can quickly generate some strong association rules. These rules may denote the targets of the attacks and the intention of the attackers so that they may help the administrator to find out valuable information By now, the improved algorithm mines association rules with IDS alerts not with alert attributes, so it may not be extended to broad excavation. The time attribute of the alerts are not considered yet. In future work, alert attributes are to be involved in the association rules which help constructing the attack scenarios in the form of IDMEF [10   R EFERENCE  1 H u K a n X i a S h ao 2w e i D a ta m i n i ng  bas e d o n l a r g e da ta w a r e 2ho us e   survey [J  J o ur nal o f S o f t w a r e 19 98  9 1   5 3 2 6 2   2 Ba y a rd o E f fic i ent l y M i ni n g L o n g Pat t e rn s from Da ta ba s e s  I n Proc  Of 1998 ACM-SIGMOD Intl.conf.on Management of Data, pages 85-93,Seattle,WA,June 1998 3 J  Z a k i  an d M Orih a r a  T h eoret i c a l foun da ti on s of a s s o c i a t i on ru les   In Proc. Of the 1998 ACM SIGMOD Workshop on Research Issues in Data Mining and Knowledge Discovery, seattle, WA , June1998 4 G  D  Ra nk um ar S  Ra n k a a n d S  T s ur W e i g h te d A s s o ciat io n Rul e s   Model and Algorithm. http://www.cs.ucla.edu/~czdemo/tsur/,1997 5 A V a l d e s  K S k i n n e r  P r o b a b i l i s t i c Al e r t C o r r e l a t i o n   C     4 t h  International Workshop on the Recent Advances in Intrusion Detection RAID2001\, Davis , USA ,2001 6 X Y a n J  W  Ha n R  A f s h a r   CloSp a n  M i ni n g C l os ed Seq u e nt ia l Patterns in Large Databases. In SDM'03, San Francisco, CA, May 2003 7 J  J  T r e i ne n R.T h ur im e l l a A F r am e w o r k F o r T h e  A ppl ica tio n O f  Association Rule Mining In Large Intrusion Detection Infrastructures Recent Advance In Intrusion Detection 2006, LNCS 4219, Berlin: Springer Verlag 2006:1-18 8 Ji a w ei H a n a nd Mi ch eli n e K a m b er  D a t a  M i n i n g  C o n c ept s an d Techniques [M   2n d e d it io n  Mo r g an K a uf m a n n  2 0 0 6  P a g e 1 5 1    9 MI T  L i nco l n L a bs 1 9 99 D A RP A intr us io n de te ctio n e v al uat i o n  E B  OL  200 7 - 03  15    ht tp  www  ll m i t  ed u I S T  i d e va l in 2d ex ht m l    P O P P I S  S n ort  I D M E F p l u g i n   E B  O L    2 005  11  1 5    h t t p  sourceforge.net/projects/ snort2idmef 
482 


 IEEE/SEMI International vol., no pp.85-89, 21-23 May 1990 V R EFERENCES   1  T. Hastie,  R Tibshirani, and J. Friedman The Elements of Statistical Learning New York:  Springer-Verlag, 2001 2  St. Pierre, E.R.; Tuv, E.; Borisov, A., "Spatial Patterns in Sort Wafer Maps and Identifying Fab Tool Commonalities Advanced Semiconductor Manufacturing Conference, 2008. ASMC 2008 IEEE/SEMI vol., no., pp.268-272, 5-7 May 2008 3  Kong, G., "Tool commonality analysis for yield enhancement Advanced Semiconductor Manufacturing 2002 IEEE/SEMI Conference and Workshop vol., no., pp. 202-205, 2002 4  Garling, L.K.; Woods, G.P., "Determining equipment performance using analysis of variance Semiconductor Manufacturing Science Symposium, 1990. ISMSS 1990 327 ASMC 2010 


   for overlooking the overall software development process and playing a crucial role in making important decisions  5.1.3. The Criterion Set As stated earlier, criterion is the attribute for which favorability of an alternativ e is calculated. The criterion set defined for this case study comprises of Reusability  Meeting Operational Requirements and Meeting Project Deadline By reusability, we mean, the amount of reuse of different functionalities that ca n be achieved from the previously developed system on Mine detection training tool. Meeting operational requirements implies how effectively a desired operational capability can be satisfied by an alternative. For example, some alternative might lack a certain operational capability like database support whereas another may support it with enhanced features. Meeting project deadline stresses on the fact whether the project requirements can be satisfactorily achieved within the stipulated deadline which in our case was around one year  5.1.4. The Alternatives To resolve the concerned issu e, the stakeholders decided to choose one software platfor m for developing the mine detection training tool among the three stated alternatives Adobe Director  Adobe Flash  Open GL were chosen as the three possible alternatives along with some justifications. Adobe Flash was chosen as one of the alternatives because; the stakeholders already had a previous developed system for mine detection developed using Adobe Flash    Figure 6. Mine Detection System Along With Three Alternatives One of the considerations involved here was to enhance this system rather than develop a new system from scratch. Same reason applied to choosing Adobe Director as one of the other alternatives. Open GL was picked up as one of the three alternatives in the case when a new development had to be started Open GL is an advanced software development platform and it could have served as a good platform for the mine detection training system  Figure 6 summarizes the pro ject and its three alternatives positions available  5.2. Prioritizing The Criteria  For an effective decision making, we had to weigh the criteria according to their im portance in the decision making process. For this, we choose Analytic Hierarchy process because of its effectiveness in performing pair wise comparison of elements .Table 2 shows the ranking table used for comparing the two criteria  Table 2. Criteria Comp arison Table For AHP  Value a ij  Comparison Description 1 Criteria i and j are of equal importance 3 Criteria i is weakly more important than j 5 Criteria i is strongly more important than j 7 Criteria i is very strongly more important than j 9 Criteria i is absolutely more important than j   Table 3. Comparison Values For Prioritizing Different Criteria   Reusability Meeting Operational Requirements Meeting project Deadline Reusability 1 1/5 3 Meeting Operational Requirements 5  1  7 Meeting Project Deadline  1/3 1/7  1   149 


   Table 4. Normalized Criteria Comparison Table In AHP   Reusability Meeting Operational Requirements Meeting project Deadline Reusability 0.157 0.148 0.272 Meeting Operational Requirements 0.789 0.744 0.636 Meeting Project Deadline 0.052 0.106 0.090  Table 3 and Table 4 show the weight values of the three criterions as compared to each other using the AHP process. These weights have been decided by the stakeholders after discussions among themselves Average weights can be derived from Table 4 as follows Reusability- 0.193 Meeting Operational Requirements- 0.724 Meeting Project Deadline- 0.083 These weights represent the priority of each criterion on a scale of 0 to 1  5.3. Argumentation Tree  We develop argumentation tree for each and every alternative separately. The ar guments are stated by stake holders and assembled under the alternative but they target a specific cr iterion. These arguments can either be supporting or attacking each other or their respective alternative nodes. We present three figures, where each figure represents the argumentation hierarchy for one alternative. Rectangular boxes represent the alternatives with the name of the alternative under it. Ovals represent the criteria with their descr iption. The arguments are specified by labels A, B, C for alternative Adobe flash, Adobe Director and Open GL respectively Along with the labels, the arguments also have indexes associated with them. Beneath the labels are two boxes The box on left shows the weight of the argument whereas the box on right shows the priority of the stakeholder who specifies the argument  Once the argument has been sp ecified, the user enters its weight. We first reassess the weights of the arguments using priority reassessment discussed in h e n us ing the techniques specified in [11 w e red u ce t h e arg u m e n t s  to a single level. Finally, the weighted summation of the arguments with the criteria weights helps us evaluate the final weights for the decision matrix. It is important to note here that, the aggregation method used for calculating the favorability is a weighted summation  The three argumentation hierarchies for the three alternatives are presented in the Figures 7, 8, and 9. The diagrams contain arguments, their weights and the stakeholders priorities     Figure 7. Argumentation Tree For Adobe Flash   Figure 8. Argumentation Tree For Adobe Director 150 


     Figure 9. Argumentation Tree For Open GL  A1 The current system in flash does not have the functionality of dynamic allocation of particles like mine or clutter. It places them randomly  A1.1 That is not of much importance because it still gives a new position to mine and clutter particles A2 Current system in flash has faster response time as compared to system in Adobe Director A3 The current system doesnt satisfy many of the features required for the new system like database A4 Adobe Flash cannot communicate with database A4.1 Flash doesnt support database but database support is very important and critical A4.1.1 The system should be able to generate evaluation reports for trainee based on pr evious records stored in the database A5 Flash doesnt create sound clips  A5.1 We dont need sound creating features as the sys tem has to generate sound. We can play externally recorded sound files using Adobe Flash A6 Flash can provide good visual effects as compared to Adobe Director A7 The developer has good knowledge in development using Flash so the system can be developed quickly B1 We could reuse the system already developed for sound generation, as it is developed using Adobe Audition for analysis which is somehow related to Adobe Director B1.1 The current system is better synthesized in terms of sound production and the sound produced is also instantaneous rather than discrete B1.2 That current system has certain performance issues like slow response time B1.3 The current system in Adobe Director has the feature of producing dynamic coloring scheme on approaching a mine. This kind of scheme is highly preferable and is not present in Adobe Flash system B2 Adobe Director can provide more functionality as compared to the current flash system. E.g. Multiple sounds while detecting mines   B2.1 Adobe Director can provide better visual effects as compared to flash e.g. in case of GUIs   B2.2 A modified version of the current system in flash can also provide the same functionality B2.2.1 We cannot integrate code developed in other platforms with Flash, but Flash can be integrated in Adobe Director B3 The interface provided by flash is not professional enough. It is too simple and straight forward for doing more things in future   B4 Easily available plug-ins can help integrate the tracking system developed in C# with Adobe Director  B4.1 Code developed in Open GL/AL can also be integrated using Adobe Director using suitable stubs   B5 A new sound recognition algorithm is being developed in Adobe Audition which can be integrated with Adobe Director but not with Open GL or Flash Evidence supported B6 If the current system is reused; the project deadline can be met easily B7 The developer has very little experience in development using Adobe Director   B7.1 The developer can take help from the already developed system in Adobe Director C1 The tracking software already developed is coded in C#/NX5. We could reuse that and develop our system in Open GL/AL C1.1 Open GL has C# libraries which can be used to develop the system C2 Because the platform used is for high end application development, it can provide good GUI and database support C2.1 Open GL/AL can help us generate dynamic surfaces for mine detection and training which the original system in flash does not have C4 Open GL does not support connectivity with Adobe Audition. Adobe Audition is required for creating sound recognition algorithm C3 Open GL does not support connectivity with Adobe Audition. Adobe Audition is required for creating sound recognition algorithm C4 The time taken for developing the project using open GL will be comparatively more as the whole system would have to be developed from scratch C4.1 If Open GL has support for C# libraries, and then the system could be develope d faster as developer is quite familiar with programming languages like C 151 


   C4.2 Open GL has excellent documentation that could help the developer learn the platform with ease C4.3 Developer has very little ex perience in working with Open GL platform  For our case study, alternative B i.e. Adobe Director was the most favorable alternative amongst all the three. It catered to the reusability criteria quite well and aimed at meeting most of the desired operational requirements for the system   6. CONCLUSION & FUTURE WORK  The main contribution of this paper is to develop an approach for evaluating performance scores in MultiCriteria decision making using an intelligent computational argumentation network. The evaluation process requires us to identify performance scores in multi criteria decision making which are not obtained objectively and quantify the same by providing a strong rationale. In this way, deeper analysis can be achieved in reducing the uncertainty problem involved in Multi Criteria decision paradigm. As a part of our future work we plan on conducting a large scale empirical analysis of the argumentation system to validate its effectiveness   REFERENCES  1  L  P Am g o u d  U sin g  A r g u men ts f o r mak i n g an d  ex p lain in g  decisions Artificial Intelligence 173 413-436, \(2009 2 A  Boch m a n   C ollectiv e A r g u men tatio n    Proceedings of the Workshop on Non-Monotonic Reasoning 2002 3 G  R Bu y u k o zk an  Ev alu a tio n o f sof tware d e v e lo p m en t  projects using a fuzzy multi-criteria decision approach Mathematics and Computers in Simualtion 77 464-475, \(2008 4 M T  Chen   F u zzy MCD M A p p r o ach t o Selec t Serv ice  Provider The IEEE International Conference on Fuzzy 2003 5 J. Con k li n  an d  M. Beg e m a n   gIBIS: A Hypertext Tool for Exploratory Policy Discussion Transactions on Office Information Systems 6\(4\: 303  331, \(1988 6 B P  Duarte D e v elo p in g a p r o jec ts ev alu a tio n sy ste m based on multiple attribute value theroy Computer Operations Research 33 1488-1504, \(2006 7 E G  Fo rm an  T h e  A n a l y t ic Hier a rch y P r o cess A n  Exposition OR CHRONICLE 1999 8 M. L ease  an d J L  L i v e l y  Using an Issue Based Hypertext System to Capture Software LifeCycle Process Hypermedia  2\(1\, pp. 34  45, \(1990 9  P e id e L i u   E valu a tio n Mo d e l o f Custo m e r Satis f a c tio n o f  B2CE Commerce Based on Combin ation of Linguistic Variables and Fuzzy Triangular Numbers Eight ACIS International Conference on Software Engin eering, Artificial Intelligence Networking and Parallel Distributed Computing, \(pp 450-454 2007  10  X  F L i u   M an ag e m en t o f an In tellig e n t A r g u m e n tatio n  Network for a Web-Based Collaborative Engineering Design Environment Proceedings of the 2007 IEEE International Symposium on Collaborative Technologies and Systems,\(CTS 2007\, Orlando, Florida May 21-25, 2007 11 X. F L i u   A n In ternet Ba se d In tellig e n t A r g u m e n tatio n  System for Collaborative Engineering Design Proceedings of the 2006 IEEE International Symposium on Collaborative Technologies and Systems pp. 318-325\. Las Vegas, Nevada 2006 12 T  M A sub jec tiv e assess m e n t o f altern ativ e m ission  architectures for the human exploration of Mars at NASA using multicriteria decision making Computer and Operations Research 1147-1164, \(June 2004 13 A  N Mo n ireh  F u zzy De cisio n Ma k i n g b a se d o n  Relationship Analysis between Criteria Annual Meeting of the North American Fuzzy Information Processing Society 2005 14 N  P a p a d ias HERMES Su p p o rti n g A r g u m e n tative  Discourse in Multi Agent Decision Making Proceedings of the 15th National Conference on Artifical Intelligence \(AAAI-98  pp. 827-832\dison, WI: AAAI/MIT Press,  \(1998a 15  E. B T riantaph y llo u   T h e Im p act o f  Ag g r e g atin g Ben e f i t  and Cost Criteria in Four MCDA Methods IEEE Transactions on Engineering Management, Vol 52, No 2 May 2005 16 S  H T s a u r T h e Ev alu a tio n o f airlin e se rv ice q u a lity b y  fuzzy MCDM Tourism Management 107-115, \(2002 1 T  D W a n g  Develo p in g a f u zz y  T O P S IS app r o ach  b a sed  on subjective weights and objective weights Expert Systems with Applications 8980-8985, \(2009 18 L  A  Zadeh  F u z z y Sets   Information and Control 8  338-353, \(1965  152 


                        





