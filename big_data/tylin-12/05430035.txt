Mining Several Kinds of Temporal Association Rules Enhanced by Tree Structures Tim Schl 250 uter and Stefan Conrad Institute of Computer Science Heinrich Heine University D 250 usseldorf 050Germany\051 f schlueter,conrad g cs.uni-duesseldorf.de Abstract 227Market basket analysis is one important application of knowledge discovery in databases Real life market basket databases usually contain temporal coherences which cannot be captured by means of standard association rule mining Thus there is a need for developing algorithms that reveal such temporal coherences within this data This paper gathers several notions of temporal association rules and presents an approach for mining most of these kinds 050cyclic lifespanand calendar-based\051 in a market basket database enhanced by two novel tree structures We called these two tree structures EPand ET-Tree which are derived from existing approaches improving standard association rule mining They are used as representation of the database and thus make the discovery of temporal association rules very ef\002cient Keywords Knowledge Discovery in Databases Market Basket Analysis Temporal Association Rule Mining I I NTRODUCTION Organizations of many different areas are collecting several kinds of data Since this resulting bulk of data might contain usual information and since it is far too big for manual analysis algorithms for automatically discovering potential useful information are developed One of the major tasks in this area of data mining is association rule mining 050ARM\051 An association rule 050AR\051 is an implication of the form X 051 Y  where X and Y are two itemsets A typical application of ARM is market basket analysis for instance in a mall where customer transactions are recorded in the cash register for later analysis An itemset in this example could be f beer  potato crisps g  which means that a customer bought together the two items beer and potato crisps If more transactions support this itemset an AR f beer g 051 f potato crisps g could be generated from the itemset which expresses that customers who buy beer also likely buy potato crisps Two measures for the interestingness of such an AR are support which states how often a rule is applicable to a given database and con\002dence which is stated in our case by the ratio of transactions that contain potato crisps in the transaction that contain beer Time for the example of market basket analysis stated by the timestamp of a customer's transaction does not play a major role in general data mining The time component is processed like any other component of the given data But as real life shows in many cases time needs particular attention Imagine for instance the itemset of the example above Regarding the whole day beer and potato crisps are bought together probably relatively seldom which will be expressed by a low support value for this itemset But regarding only the evening and all transactions that occurred in this time for example from 7-9PM the amount of transactions that support f beer g 051 f potato crisps g in this segment of the database will probably be much higher Depending on the minimum value for support that is needed to discover an AR like that standard ARM might overlook this rule whereas a temporal approach would 002nd it due to its temporal nature The contribution of this paper is an approach for mining several kinds of temporal association rules 050TARs\051 which makes use of two novel tree structures Most of the existing approaches are limited to the discovery of one speci\002c kind of TARs whereas our approach considers several kinds namely cyclic lifespanand calendar-based ARs The two novel tree structures that are used are the EPand the ETTree which represent a given database and allow to mine TARs very ef\002ciently As a 002rst step in constructing the ETTree the database is reorganized in one single pass The EP-Tree is an extended version of the P-Tree which is used to speed up standard ARM extended with additional temporal information Due to its special structure the EPTree can be used to calculate the support of itemsets and to collect important temporal information with only little additional effort These pieces of information namely the itemsets their standard support and lists of their timestamps are stored in the ET-Tree which provides the basis of our approach to ef\002ciently discover several kinds of TARs Besides our tree-based approach for TARM we present an overview of several kinds of TARs discuss some related work and demonstrate the superiority of our approach in a short evaluation The rest of the paper is organized as follows Section II provides the basic knowledge about ARM in general whereas Section III provides the special knowledge about TARM and some approaches that are of interest for this paper After introducing these foundations we brie\003y discuss some further related work in Section IV The EPTree the ET-Tree and related tree structures are presented in Section V which also integrates them in the TARM process Details about the implementation of our tree-based approach for TARM are given in Section VI and an evaluation is contained in Section VII Finally we present our conclusion and identify directions for future work in Section VIII 
2010 Second International Conference on Information, Process, and Knowledge Management 978-0-7695-3956-0/10 $26.00 © 2010 IEEE DOI 10.1109/eKNOW.2010.16 94 
2010 Second International Conference on Information, Process, and Knowledge Management 978-0-7695-3956-0/10 $26.00 © 2010 IEEE DOI 10.1109/eKNOW.2010.16 86 


II A SSOCIATION R ULE M INING This section presents the fundamental terms of association rule mining 050ARM\051 It deals with ARM in general i.e ordinary ARM without regard to temporal coherences Temporal association rule mining is presented in the next section The following de\002nitions are taken from Let I  f i 1  i 2   i d g be the set of all items in a market basket database and T  f t 1  t 2   t N g the set of all transactions Every transaction t i consists of a subset of items X i 022 I  called itemset  Items in an itemset are supposed to be ordered according to the lexicographic order An itemset with exactly k elements is called k itemset  A measure for the interestingness of an itemset X is its support count  The support count is the number of transactions in T  which contain the itemset X  Formally it can be stated as 033 050 X 051  jf t i j X 022 t i  t i 2 T gj  An association rule is an implication expression of the form X 051 Y  where X and Y are two disjoint itemsets The interestingness of an AR can be measured in several terms two terms that are important for this paper are support and con\002dence 050cf for more terms and details\051 Support determines how often a rule is applicable to a given database and con\002dence determines how frequently items in Y appear in transactions that contain X  They are de\002ned as support 050 X 051 Y 051  033 050 X  Y 051  N and con\002dence 050 X 051 Y 051  033 050 X  Y 051  033 050 X 051  An AR with a very low support can simply occur coincidentally and can thus be uninteresting for the outcome of the market basket analysis To avoid this a threshold minsup for the minimal support of a rule is given by the user Itemsets that have a support higher than minsup are called frequent or large itemsets  A maximal large itemset is a frequent k itemset for which applies that there is no frequent l itemset in I  with l  k  The con\002dence is a measure for the reliability of an AR and thus again a threshold is de\002ned minconf for the minimal con\002dence a rule must have in order to be discovered The task of association rule mining in a given market basket database is the discovery of every AR whose support is larger than minsup and whose con\002dence is larger than minconf  It can be decomposed in the two subtasks of 0501\051 002nding all frequent itemsets and 0502\051 generating rules from frequent itemsets Much interesting work has been done and many algorithms have been developed for ARM Subtask 2 is a task rather easy to solve Given frequent itemset Z  generate every two possible disjoint subsets X and Y of Z  with X  Y  Z  and check whether con\002dence 050 X 051 Y 051 025 minconf  For this reason we sometimes switch between the terms itemset and AR in this paper For more information about the generation of rules confer The remaining subtask 1 is the crux of the discovery of ARs thus we will focus on the generator of frequent itemsets in this paper The probably best-known algorithm for solving it is the Apriori Algorithm which mak es use of the following monotonicity property an itemset X can only be frequent if every subset of X is frequent too Thus the Apriori algorithm for 002nding frequent itemsets starts by creating a candidate set of 2 itemsets by means of composing all frequent 1 itemsets which are easy to 002nd by simply counting in the database This candidate set is pruned by checking the minsup constraint and afterwards all frequent 2 itemsets are found In the next step the candidate set of all possible 3 itemsets is composed from the frequent 2 itemsets it is pruned by checking the minsup constraint and so all frequent 3 itemsets are found This step is repeated until no more frequent k itemsets come up For more details about the Apriori principle see for o v ervie ws of other ARM approaches confer and 6 III T EMPORAL A SSOCIATION R ULE M INING In this section we present the basic idea of temporal association rule mining 050TARM\051 and some interesting approaches Formally the only difference in the database for TARM is the fact that every transaction has a timestamp In the example of market basket analysis in a supermarket these timestamps denote the time when a customer purchases his products So most of the de\002nitions of Section II can be used in temporal data mining as well except for the de\002nition of support which has to be modi\002ed There are many different kinds of temporal association rules 050TARs\051 one could think of e.g from events that happen sequentially  c yclically 8 periodically 9 or in special times which can be described by calendar-based patterns thus there are many different kinds of support de\002nitions A Lifespan-Based Temporal Support One straightforward approach is which re g ards the lifespan of an itemset Intuitively the lifespan of an itemset X is the span of time in which X occurs in the transactional database T  and the temporal support of X is de\002ned as the number of occurrences of X in T divided by the number of transactions which happen in the lifespan of X  This approach makes sense because in large databases one could 002nd information related to products that do not necessarily exist throughout the whole time when a database was gathered With the standard de\002nition of support products or itemsets could be found which already have been discontinued at the time the mining process was performed and new products that were introduced at the end of the time in the database might not be found due to support restrictions This problem is solved by an alternative de\002nition of the temporal support which is stated formally as follows We assume that every transaction t i 2 T is associated with a timestamp denoted by t 050 t i 051  which stands for the time when the transaction occurred Naturally a total order  t is de\002ned where t 050 t 1 051  t t 050 t 2 051 denotes that transaction 
95 
87 


t 1 happens before t 2  Let X 022 I be an itemset The lifespan of the itemset is de\002ned as the interval I X   t 050 t i 051  t 050 t j   where t i is the 002rst transaction which contains X  and t j the last transaction in T  with t 050 t i 051  t t 050 t j 051  Let T  I X  denote the segment of the database T  which contains all transactions that happen in the lifespan I X of X  Then the temporal support of X is de\002ned by tempsup 050 X 051  j 033 050 X 051 j  j T  I X  j  B Cyclic Association Rules Another interesting approach is which introduces the notion of cyclic ARs An AR is called cyclic if it represents regular cyclic variations over time An example for this kind of ARs is the rule f beer g 051 f potato crisps g  which we already introduced in the abstract and Section I It is an example of a rule which support will be probably relatively low during the whole day but in certain regular time intervals e.g every day from 7-9PM 050and in the corresponding database segment respectively\051 it will have probably a much higher support To state this approach formally some de\002nitions and another perspective of time are needed which will be explained in the following We assume that time is given in a 002xed unit 034  and that the i th time interval i 025 0  is denoted by 034 i  which corresponds to the time interval  i 001 034 050 i  1\051 001 034   Let T  i  denote the set of transactions that were executed in 034 i  We refer to T  i  as time segment i  The cyclic support of an AR X 051 Y in the time segment i is the fraction of transactions in T  i  that contain the itemset 050 X  Y 051  The con\002dence measure for T  i  is de\002ned analogously A cycle c is a tuple 050 l o 051  which consists of a length l and an offset o  0 024 o 024 l  both given in time units An AR is said to have a cycle c  050 l o 051  if it holds in every l th time unit starting with time unit 034 o  An AR that has a cycle is called cyclic  The beer and potato crisps rule for instance would have the two cycles c 1  05024  19\051 and c 1  05024  20\051  that denote 223every 24 hours in the 19th hour\224 and 223every 24 hours in the 20th hour\224 which is is exactly every day's time from 7 till 9PM C Calendar-Based Association Rules An approach that scales even more which tries to discover TARs that hold in certain time intervals that are speci\002ed by a former de\002ned calendar schemata An example for such a calendar schema could be 050year month day\051 and in this schema for instance every year's Christmas Eve could be represented by the tuple 050 003  12  24\051  where 003 denotes every arbitrary integer in the domain of the accordant attribute in this case year As well as in both foregoing approaches the support measure is calculated relatively to the number of the transactions that occur at the speci\002ed time intervals Thus we omit the formal de\002nitions of calendar-based support refer to and gi v e one more example for clari\002cation instead In the calendar-based schema 050month day hour\051 our beer and potato crisps rule would hold in the time represented by 050 003  003  19\051  050 003  003  20\051  because this denotes the 19th and 20th hour of every day in every month what refers to the time from 7 to 9PM Obviously calendar-based ARs can express many cyclic ARs depending on the calendar schema use In addition to that the calendar-based framework can be extended to ARM with respect to fuzzy match by means of a threshold m 050 0 024 m 024 100 051 which expresses in how many cases a certain rule has to hold D Other Approaches Two other TARM approaches are and 12 The 002rst one deals with sequential patterns i.e with patterns that can express ARs like the following one People who rent the DVD 223The Fellowship of the Ring\224 and then 223The Two Towers\224 will most likely rent the DVD with the third part of the 223Lord of the Rings\224 trilogy namely 223The Return of the King\224 thereafter too Sequential patterns in this case just state that if someone rents the 002rst and then the second movie he will most likely rent the third movie afterwards some day but they do not state when this happens Such kinds of ARs can be captured with the second approach mentioned above A rule X 051 t Y expresses that if X occurs Y will occur within the time span t  IV F URTHER R ELATED W ORK After Section II and Section III introduced the general foundations of ARM and TARM as well as some approaches for TARM 050cyclic AR lifespan[11 and calendar based AR that are of special interest for our treebased approach this section presents some further related approaches An approach directly connecting two of the above mentioned approaches is It is a rather straightforw ard extension of and 10 which results in a system for mining two kinds of TARs 050lifespanand calendar-based\051 by means of only a small alteration of the primary algorithms Another straightforward approach is which combines the approach for calendar-based ARM with tree structures These tree structures for standard ARM are the Pand the T-Tree on whose base we also de v eloped our EPand ET-Tree for improving TARM In standard ARM one Pand one T-Tree is created for the whole database which yields a good speed-up The temporal version from creates one Pand one T-Tree for every possible calendarschema and thus yields a speed-up too but on cost of a huge overhead 050In contrast our approach for TARM needs only one EPand one ET-Tree for representing the whole database cf Section V.\051 So far all these works had their focus on events existing at one or certain points in time An interesting approach that focuses on temporal intervals is ARMADA which generates 223richer\224 interval-based TARs what corresponds approximately in merging 223smaller\224 TARs 
96 
88 


Further information about TARM can be found in the two overview papers and 18 and in 19 which pro vides a large bibliography of temporal data mining research V EP-T REE AND ET-T REE This section presents the idea of the EPand the ETTree which are the basis of our tree-based approach for TARM In addition to that it presents three further tree structures namely the SEthe Pand the T T ree 1 The SE-Tree is a simple tree structure that contains all itemsets enumerated from the items the node from all other mentioned tree structures are arranged in this manner The P-and the T-Tree can be used for speeding up standard ARM and this section shows how to transfer this quality to TARM The ET-Tree is a data structure that stores itemsets together with their 050standard\051 support and temporal information about their occurrences With this information it is easy to calculate the temporal support of an itemset and to analyze it for further temporal coherences The ET-Tree is built level-by-level up to a certain size on base of the EPTree which itself is inferred from the P-Tree The EPTree e xtends the P Tree with temporal information Both make use of the set enumeration framework developed in  through which structure the process of calculating support and gathering temporal information about itemsets is simpli\002ed The creation algorithms of the EP-Tree scans the database and reorganizes it in only one pass in form of the EP-Tree from which the ET-Tree is built in one pass For more clearness about the basic idea how the EP-Tree is created and works we 002rst regard algorithm 1 which is a very simple algorithm that scans the transactional database T in one pass in order to calculate the support of every itemset X and collect the timestamps of every transaction in which X is contained The number of database accesses is minimal N in a database containing N transaction but the number of computational steps and the space required is exponential to the number of different items Thus this algorithm is infeasible for databases that contain many items e.g 1,000 or more which is usual in market basket analysis   for i  1   N do forall subset s 022 X i do begin supportCount 050 s 051  timestampListOf 050 s 051  add 050 t 050 t i 051\051  end end end   Algorithm 1  A simple brute force algorithm for calculating support and gathering temporal information of every subset s 022 I  The itemset contained in transaction t i 2 T is denoted by X i  the timestamp of t i by t 050 t i 051  Let us assume that during the pass over the database in algorithm 1 a transaction is read that contains an itemset f A B D g  This single itemset would cause the incrementation of the support counts for f A B D g  f A B g  f A D g  f B D g  f A g  f B g and f D g  and it would add a timestamp to every timestamp list of theses 7 sets This is much effort for one single set and actually not necessary because the changes could be inferred subsequently from the information stored for f A B D g  We formalize this interference by de\002ning the expressions partial support and total support  From this point on we omit the treatment of the temporal information for a while because it would make both the understanding and the explanation of the approach unnecessarily more complicated The temporal information can be handled analogously to the support what we will point out in detail later on The partial support P X of an itemset X is de\002ned as the number of transactions whose itemsets are exactly equal to X  The total support T X of an itemset X can then be calculated by evaluating T X  P 8 Y  Y 023 X P Y  Obviously the support values calculated by algorithm 1 are total support values Algorithm 2 makes use of the principle of calculating total from partial support and is thus more ef\002cient than algorithm 1 Under the plausible assumption that databases with realistic data contain a high degree of duplication this algorithm again will be signi\002cantly faster   for i  1   N do begin P X i  P.add 050 X i 051  end end forall X 2 P do forall Y 2 T  Y 022 X do T Y  T Y  P X  end end   Algorithm 2  A ef\002cient algorithm for calculating the support of every itemset of the database T  The set P contains all occurring itemsets T the total support values of every itemset in P  both initially set to zero To renew the example with itemset f A B D g that is contained in a transaction t i 2 T  we now regard the set of all subsets of I  f A B C D g presented as tree and arranged according to the s et e numeration framework mentioned at the beginning of this section 050The arrangement of the nodes is exactly the same as in Figure 1.\051 The arrangement of the subsets is done according to the lexicographic order where every node represents a certain subset It is easy to see that this tree-based representation can aid in the support calculation and the gathering of temporal information While walking through the tree to a certain node or a certain set respectively starting at the root node several other nodes are traversed which all represent subsets 
97 
89 


of the certain set of the destination node This can be used to accumulate an interim support count in the nodes traversed which eases the calculation of the total support later on Algorithm 3 describes this procedure of inscribing a single itemset of the database in the tree structure The length of the way from root node to a certain node is at most N  The tree 002lled like this without temporal information is exactly the P-Tree 050 P artial Support Tree\051 which was introduced in  and as already mentioned it can easily be e xtended with temporal information to the EP-Tree what we will explain after the rest of the basic idea is presented   forall nodes X do P 050 X 051  0  Q 050 X 051  0  end for i  1   N do   for every database entry do   X  root node  while node X 6  NULL do  if X i 023 X then   if itemset X i 023 X    Q 050 X 051     if X i  X then   if itemset X i  X    P 050 X 051    exit while loop else  if X i 023 X then   if itemset X i 023 X    X  eldestChildOf 050 X 051  else  X  youngerSiblingOf 050 X 051     end   Algorithm 3  Accumulating partial and interim support counts during one pass over the database In this algorithm X denotes both an itemset and the node in the tree that contains the itemset After algorithm 3 is executed for every database entry the P-Tree is 002lled and completed and its nodes contain itemsets partial support counts and interim support counts The value of the interim support count Q 050 X 051 in the node that contains itemset X is Q 050 X 051  P 8 Y 050 Y 023 X X l Y 051 P 050 Y 051  where  l denotes the lexicographic order With this it is possible to calculate the 050total\051 support of an itemset X by evaluating the following expression T 050 X 051  Q 050 X 051  X 8 Y 050 Y 033 X Y  l X 051 P 050 Y 051 0501\051 By now the basic idea is obvious the itemsets of the database are inscribed itemset-by-itemset in the P-Tree using algorithm 3 After that the total support of every itemset can Figure 1 An example of an EP-Tree for P 050 f A B C D g 051  containing some interim support counts and lists of timestamps 050indicated by    051 be determined by adding the value of the interim support count from the according node in the P-Tree and some partial support values given by equation 1 which makes the process very ef\002cient As already mentioned the EP-Tree has the same structure as the P-Tree but additionally it has two lists that contain timestamps in every node a partial and an interim list Every time the interim support count of a node Y is increased on the way to a node that contains an itemset X  the timestamp of the current transaction that is being inscribed is added to the interim list of node Y  and every time the partial support count of X is increased the according timestamp is added to the partial list Thus the complete list of timestamps for an itemset X can be determined in the same manner the total support of itemset X is calculated namely by accumulating the timestamps of the partial list stored in the node that contains X and the timestamps of some partial lists directed by equation 1 The complete timestamp list contains every timestamp that belongs to a transaction where itemset X was part of or in other words this list contains all points in time when a itemset has occurred This list is a formidable basis for mining several kinds of TARs and our prototype system described in Section VI makes use of this An example of an EP-Tree is given in Figure 1 It is important to state that we used a static tree with nodes for every element of P 050 I 051 only to illustrate the procedure The Pand the EP-Tree both must be built in a dynamic manner which is explained in detail in in order to be feasible By doing so the trees consist of considerably less nodes while the basic arrangement and thus the desired functionality are still given In another tree structure is introduced which is intended to 002nd frequent itemsets the T-Tree for representing the t arget set of items for which the total support is to be computed on base of the P-Tree The nodes of this tree again represent the itemsets and are designed to contain their total supports Its structure is the dual structure of the P-Tree i.e that every subtree includes only supersets of its root node which contain an attribute that precedes all those of the root node 050see Figure 2\051 In order to prevent an exponential size in the number of items it is built up level-by-level starting 
98 
90 


Figure 2 The T-Tree for P 050 f A B C D g 051  with all 1 itemsets for which the total support is calculated by means of the P-Tree According to the Apriori principle the support of the supersets of a certain itemset X can only exceed the threshold minsup  if the support of X is greater than minsup  Thus if the T-Tree is used to 002nd frequent itemsets only those nodes of the second level have to be created for which the support of the parent node is adequate The following informal algorithm 050algorithm 4\051 displays this process which ensures that the size of the tree is only linear in the size of the number of frequent itemsets   set k  1  1 build level k in the T-Tree according to its 2 structure  calculate the support of every node in level k by 3 means of the P-Tree  remove any node in level k which support is lower 4 than minsup  increase k by 1  5 build level k in the T-Tree according to its structure 6 050just nodes that have a parent\051  repeat line 3 7 until no new nodes are adequately 7 supported    Algorithm 4  Informal T-Tree creation algorithm The ET-Tree is the extended version of the T-Tree The main difference is the fact that all nodes contain a complete list of timestamps of the accordant itemset It is built in almost the same manner but without pruning of itemsets 050line 4\051 because otherwise it would not be possible to 002nd TARs whose standard support is too small for being discovered Thus there are three possibilities for discovering different kinds of TARs as introduced in Section III i\051 Decrease minsup to a smaller value in order to 002nd a larger set of frequent itemsets which can be analyzed for temporal coherence 050with the original larger value of minsup for an itemset to be large\051 ii\051 Decrease minsup to a minimum value 050an itemset has to occur at least once in the database\051 and abort the algorithm at a certain level k-max in the tree The resulting set of frequent itemsets can be analyzed for temporal coherence 050with the original larger value of minsup for an itemset to be large\051 iii\051 Leave everything as it is and discover only TARs whose support is high enough in the standard sense Obviously the adjustment of the parameters minsup and k-max directly effects the size of the ET-Tree and the number and kinds of TARs that can be discovered VI I MPLEMENTATION In this section we present some details about the implementation of our approach as a prototype system which allows the mining of different kinds of TARs by using the tree structures mentioned in Section V and we explicate some further interesting points Our whole prototype system is implemented in Java Following the idea of Section V straightforward it consists of the following three major components 017 A tree maintenance component to read the database construct the EP-Tree and provide the possibility to construct the ET-Tree with several options among others the adjustment of minsup and k-max as discussed at the end of the preceding section 017 A temporal analysis component that handles inputs in the form of a T-Tree or simple in form of an itemset with a complete list of all its timestamps gained by the means presented in Section V This component is capable of discovering TARs as presented in Section III-A to Section III-C 050lifespan-based cyclic and calendarbased ARs\051 and of course of discovering standard ARs 017 A main component that manages the other two component which is capable of processing optional 223hints\224 given by the user and also offers several heuristics for the combination of parameters The tree maintenance component is based on an implementation of the Apriori-TFP algorithm 15 for standard ARM extended by the treatment of temporal information as described in Section III and Section V Simply spoken the input of the temporal analysis component is an itemset together with its complete list of timestamps On this base the calculation of the temporal support as described in Section III-A is straightforward The support notions for the discovery of cyclic and calendar-based TARs are implemented by making use of sliding window techniques with several different parameters like window size step size number of windows that are regarded in one step and the form of the sliding window The main component manages the two other components and provides them with their parameters The parameters can be adjusted straight by the user or by use of several heuristics to combine the mining of the three different kinds of TARs and the user can also optionally enter some 223hints\224 about the range of the parameters The parameters play an important role what kinds of ARs can be discovered and how many space and time is required for building and processing the trees The most important parameters in this relation are minsup and k-max  as already noted at the end of Section III and thus the main component tries to 002nd a balance between effort and 002nding every possible TAR 
99 
91 


Finding every possible TAR exceeding a given support is possible in a small database but if the dataset grows bigger this task should be constrained to certain kinds of rules or granularities because otherwise the run-time will be rather long and the needed space rather large 050cf Section VII\051 VII E VALUATION This section describes the evaluation of our tree-based approach for TARM We brie\003y present the generator that we used to create test datasets that contain temporal coherences and present our results in comparison to several other approaches of TARM The datasets we used for testing purposes were created by a synthetic dataset generator F or this e v aluation we decided not to work with real life datasets because unfortunately up to today there are only very few real life market basket datasets that contain timestamps 050which is a natural precondition for TARM\051 available to the public We conducted some experiment with a small set of real life market basket data from a supermarket which yielded results quite comparable to synthetic dataset but which were less meaningful due to the small size In addition to that real life datasets might contain interferences e.g through seasons or mode and thus do not provide a totally controllable testing ground whereas the use of a dataset generator enables us to remain in total control of every phenomenon that could occur in the generated data The dataset generator we used bases on the basic idea of IBM's Almaden Research Center Data Generator for modeling general customer beha vior and the idea of for modeling c yclic temporal coherences and is augmented with mechanisms to create calendar-based and lifespan-based temporal coherence In addition to that it models customer group behavior Timestamps are created adapted to the mechanism of which considers se v eral user behavior studies in order to generate data with a distribution of timestamps that is very similar to real life All in all the generator produces timestamped market basket datasets that are very close to real life The datasets contain temporal coherences so that algorithms for temporal data mining can 002nd three different kinds of TARs in the data depending on the adjustment of the appropriate parameters These three different kinds are cyclic calendar-based and lifespan-based ARs and thus the created datasets are an onein-all solution for the evaluation of our tree-based TARM approach We set up several series of experiments All experiments were conducted on an Intel Core 2 Duo 3.0 GHz desktop PC running Windows Vista with 3 GB of main memory The 002rst three series of experiments follow the tree possibilities at the end of Section V in series 1 we set minsup to a smaller value than normal in order to 002nd a larger set of frequent itemsets which are analyzed for temporal coherence with the original larger value of minsup  In series 2 we set minsup to the minimum value 050an itemset has to occur at least once in the database\051 and we pruned the T-Tree at a certain level k-max 050where again the original larger value of minsup is used as constraint for an itemset to be large\051 and in series 3 we used a 223normal\224 value for minsup  i.e a value for standard ARM As expected every standard AR was found in all three series and in series 3 only TARs were found that were already found by standard non-temporal ARM algorithms Series 1 also made clear that with decreasing minsup more TARs are found but only in series 2 all contained TARs have been found depending on the size of the underlying frequent k-max itemsets and of course with a larger run-time Another series of experiments 050series 4\051 with the use of the heuristics mentioned in Section VI decreased the runtime in a massive way but some TARs were missed To compare the results of our approach we implemented the algorithms proposed in 11 8 10 for mining standard lifespan-based cyclic and calendar-based ARs respectively in Java as well and run them on the same datasets For discovering all three kinds of TARs we had to run each of the corresponding algorithms one after the other to what we will refer simply as sequential algorithm Table I shows the results of our evaluation for one large conventional dataset in terms of run-time and number of discovered TARs for series 1-4 of our prototype system and for the sequential algorithm From table I it is easy to see that our approach clearly outperforms the other approaches VIII C ONCLUSION AND F UTURE W ORK In this paper we presented a tree-based approach for mining several kinds of TARs 050cyclic lifespanand calendarbased\051 which makes use of two new tree structures namely the EPand the ET-Tree These trees provide the basis for the ef\002cient discovery of several kinds of different TARs that were also presented We have shortly described our implementation of a prototype system and presented an evaluation of our approach on synthetic datasets which proves that our approach works very well There are some issues left that have to be examined more in depth in order to enhance the basic idea and the prototype system First of all at the moment our approach allows to detect three different kinds of TARs namely cyclic temporal support based and calendar-based In Section III-D we have presented two more kinds of interesting TARs 050sequential patterns and ARs of the from X 051 t Y 051 whose integration in our approach would be an enrichment In addition to that pruning techniques especially regarding the construction of the T-Tree could make our approach more ef\002cient Another direction for future research is the adaption of other tree structures for our approach The FP-Tree for e xample is used to speed up standard ARM as well as the Pand the T-Tree and thus an adapted version is possibly an alternative to our tree structures The dataset generator we used for 
100 
92 


  experiment  accordant parameters  run-time 050in seconds\051  number of discovered TARs     series 1  minsup  0  01  32.241  4,313   series 2  minsup  1  10  000  k-max  4  42.189  7,281   series 2  minsup  1  10  000  k-max  6  49.189  9,956   series 3  minsup  0  05  19.500  1,949   series 4  minsup  0  05  35.231  9,157   sequential algorithm  minsup  0  05  122.400  9,956   Table I E VALUATION RESULTS FOR A CONVENTIONAL DATASET 050 CONTAINING 10,000 TRANSACTIONS  1,000 ITEMS  AVERAGE SIZE OF LARGE ITEMSETS IS 4\051 E XPERIMENTS WITH THIS DATASET SHOWED THAT A REASONABLE M I N S U P VALUE FOR STANDARD ARM IS 0  05  evaluation purposes generates three kinds of temporal coherences but of course tests with other datasets which possibly contain more than these kinds of coherences or interfering coherences like large real life datasets would be desirable in order to evaluate our approach in an environment that is not totally controlled too R EFERENCES  G Goulbourne F  Coenen and P  H Leng 223 Algorithms for computing association rules using a partial-support tree,\224 Knowledge Based Systems  vol 13 no 2-3 pp 141\226149 2000  P N T an M Steinbach and V  K umar  Introduction to Data Mining  1st ed Addison Wesley May 2005  J Han Data Mining Concepts and Techniques  San Francisco CA USA Morgan Kaufmann Publishers Inc 2005  R Agra w al and R Srikant 223F ast algorithms for mining association rules,\224 in Proc 20th Int Conf Very Large Data Bases  Morgan Kaufmann 12\22615 1994 pp 487\226499  R Agra w al T  Imielinski and A N Sw ami 223Mining association rules between sets of items in large databases,\224 in Proc ACM SIGMOD Int Conf Management of Data  Washington D.C 1993 pp 207\226216  S K otsiantis and D Kanellopoulos 223 Associ ation rules mining A recent overview,\224 in Proc GESTS Int Transactions on Computer Science and Engineering  vol 32\0501\051 2006 pp 71\22682  R Agra w al and R Srikant 223Mining sequential patterns 224 in 11th Int Conf on Data Engineering  IEEE Computer Society Press 1995 pp 3\22614  B Ozden S  Ramasw amy  and A Silberschatz 223Cyclic association rules,\224 in ICDE  1998 pp 412\226421  J Han G Dong and Y  Y in 223Ef 002cient mining of partial periodic patterns in time series database,\224 in Proc Int Conf on Data Engineering  1999 pp 106\226115  Y  Li P  Ning X S W ang and S Jajodia 223Disco v ering calendar-based temporal association rules,\224 in TIME  2001 pp 111\226118  J M Ale and G H Rossi 223 An approach to disco v ering temporal association rules,\224 in SAC 00 Proc of the ACM symposium on Applied computing  2000 pp 294\226300  G Das K Lin H Mannila G Reng anathan and P  Smyth 223Rule discovery from time series,\224 in Knowledge Discovery and Data Mining  1998 pp 16\22622  G Zimbrao J M D Souza V  T  D Almeida and W  A D Silva 223An algorithm to discover calendar-based temporal association rules with item's lifespan restriction,\224 2002  K V erma O P  Vyas and R Vyas 223T emporal approach to association rule mining using t-tree and p-tree,\224 in MLDM  ser LNCS vol 3587 Springer 2005 pp 651\226659  F  Coenen G Goulbourne and P  Leng 223T ree structures for mining association rules,\224 Data Min Knowl Discov  vol 8 pp 25\22651 2004  E W inark o and J F  Roddick 223 Armada an algorithm for discovering richer relative temporal association rules from interval-based data,\224 Data Knowl Eng  vol 63 no 1 pp 76\22690 2007  C M Antunes and A L Oli v eira 223T emporal data mining An overview,\224 KDD Workshop on Temporal Data Mining  August 2001  S Laxman and P  S Sastry  223 A surv e y of temporal data mining,\224 Sadhana  vol 31 no 2 pp 173\226198 April 2006  J F  Roddick K Hornsby  and M Spiliopoulou 223Y abtsstdmr yet another bibliography of temporal spatial and spatiotemporal data mining research,\224 in SIGKDD Temporal Data Mining Workshop  San Francisco CA ACM 2001 pp 167\226 175  R Rymon 223Search through systematic set enumeration 224 Department of Computer and Information Science University of Pennsylvania Tech Rep 1992  P  Joeres 223T ree-based Database Reor g anization for Increasing the Ef\002ciency of Association Rule Mining,\224 Heinrich-HeineUniversity Duesseldorf Germany 2008 Bachelor Thesis  T  Schl 250 uter and S Conrad 223TARGEN A Market Basket Dataset Generator for Temporal Association Rule Mining,\224 in IADIS European Conf on Data Mining  2009  A Omari R Langer  and S Conrad 223 Adv anced data mining and applications,\224 in Proc 4th Int Conf ADMA  SpringerVerlag Lecture Notes in Arti\002cial Intelligence Vol 5139 October 2008 pp 400\226410  J Han J Pei and Y  Y in 223 Mining frequent patterns without candidate generation,\224 in SIGMOD 00 Proc of the ACM SIGMOD Int Conf on Management of data  New York NY USA ACM 2000 pp 1\22612 
101 
93 


Application of Chaotic Particle Swarm Optimization Algorithm in Chinese Documents Classification 763 Dekun Tan Qualitative Simulation Based on Ranked Hyperreals 767 Shusaku Tsumoto Association Action Rules and Action Paths Triggered by Meta-actions 772 Angelina A. Tzacheva and Zbigniew W. Ras Research and Prediction on Nonlinear Network Flow of Mobile Short Message Based on Neural Network 777 Nianhong Wan, Jiyi Wang, and Xuerong Wang Pattern Matching with Flexible Wildcards and Recurring Characters 782 Haiping Wang, Fei Xie, Xuegang Hu, Peipei Li, and Xindong Wu Supplier Selection Based on Rough Sets and Analytic Hierarchy Process 787 Lei Wang, Jun Ye, and Tianrui Li The Covering Upper Approximation by Subcovering 791 Shiping Wang, William Zhu, and Peiyong Zhu Stochastic Synchronization of Non-identical Genetic Networks with Time Delay 794 Zhengxia Wang and Guodong Liu An Extensible Workflow Modeling Model Based on Ontology 798 Zhenwu Wang Interval Type-2 Fuzzy PI Controllers: Why They are More Robust 802 Dongrui Wu and Woei Wan Tan Improved K-Modes Clustering Method Based on Chi-square Statistics 808 Runxiu Wu Decision Rule Acquisition Algorithm Based on Association-Characteristic Information Granular Computing 812 JianFeng Xu, Lan Liu, GuangZuo Zheng, and Yao Zhang Constructing a Fast Algorithm for Multi-label Classification with Support Vector Data Description 817 Jianhua Xu Knowledge Operations in Neighborhood System 822 Xibei Yang and Tsau Young Lin An Evaluation Method Based on Combinatorial Judgement Matrix 826 Jun Ye and Lei Wang Generating Algorithm of Approximate Decision Rules and its Applications 830 Wang Yun and Wu-Zhi Qiang Parameter Selection of Support Vector Regression Based on Particle Swarm Optimization 834 Hu Zhang, Min Wang, and Xin-han Huang T-type Pseudo-BCI Algebras and T-type Pseudo-BCI Filters 839 Xiaohong Zhang, Yinfeng Lu, and Xiaoyan Mao A Vehicle License Plate Recognition Method Based on Neural Network 845 Xing-Wang Zhang, Xian-gui Liu, and Jia Zhao Author Index 849 
xiii 


   C4.2 Open GL has excellent documentation that could help the developer learn the platform with ease C4.3 Developer has very little ex perience in working with Open GL platform  For our case study, alternative B i.e. Adobe Director was the most favorable alternative amongst all the three. It catered to the reusability criteria quite well and aimed at meeting most of the desired operational requirements for the system   6. CONCLUSION & FUTURE WORK  The main contribution of this paper is to develop an approach for evaluating performance scores in MultiCriteria decision making using an intelligent computational argumentation network. The evaluation process requires us to identify performance scores in multi criteria decision making which are not obtained objectively and quantify the same by providing a strong rationale. In this way, deeper analysis can be achieved in reducing the uncertainty problem involved in Multi Criteria decision paradigm. As a part of our future work we plan on conducting a large scale empirical analysis of the argumentation system to validate its effectiveness   REFERENCES  1  L  P Am g o u d  U sin g  A r g u men ts f o r mak i n g an d  ex p lain in g  decisions Artificial Intelligence 173 413-436, \(2009 2 A  Boch m a n   C ollectiv e A r g u men tatio n    Proceedings of the Workshop on Non-Monotonic Reasoning 2002 3 G  R Bu y u k o zk an  Ev alu a tio n o f sof tware d e v e lo p m en t  projects using a fuzzy multi-criteria decision approach Mathematics and Computers in Simualtion 77 464-475, \(2008 4 M T  Chen   F u zzy MCD M A p p r o ach t o Selec t Serv ice  Provider The IEEE International Conference on Fuzzy 2003 5 J. Con k li n  an d  M. Beg e m a n   gIBIS: A Hypertext Tool for Exploratory Policy Discussion Transactions on Office Information Systems 6\(4\: 303  331, \(1988 6 B P  Duarte D e v elo p in g a p r o jec ts ev alu a tio n sy ste m based on multiple attribute value theroy Computer Operations Research 33 1488-1504, \(2006 7 E G  Fo rm an  T h e  A n a l y t ic Hier a rch y P r o cess A n  Exposition OR CHRONICLE 1999 8 M. L ease  an d J L  L i v e l y  Using an Issue Based Hypertext System to Capture Software LifeCycle Process Hypermedia  2\(1\, pp. 34  45, \(1990 9  P e id e L i u   E valu a tio n Mo d e l o f Custo m e r Satis f a c tio n o f  B2CE Commerce Based on Combin ation of Linguistic Variables and Fuzzy Triangular Numbers Eight ACIS International Conference on Software Engin eering, Artificial Intelligence Networking and Parallel Distributed Computing, \(pp 450-454 2007  10  X  F L i u   M an ag e m en t o f an In tellig e n t A r g u m e n tatio n  Network for a Web-Based Collaborative Engineering Design Environment Proceedings of the 2007 IEEE International Symposium on Collaborative Technologies and Systems,\(CTS 2007\, Orlando, Florida May 21-25, 2007 11 X. F L i u   A n In ternet Ba se d In tellig e n t A r g u m e n tatio n  System for Collaborative Engineering Design Proceedings of the 2006 IEEE International Symposium on Collaborative Technologies and Systems pp. 318-325\. Las Vegas, Nevada 2006 12 T  M A sub jec tiv e assess m e n t o f altern ativ e m ission  architectures for the human exploration of Mars at NASA using multicriteria decision making Computer and Operations Research 1147-1164, \(June 2004 13 A  N Mo n ireh  F u zzy De cisio n Ma k i n g b a se d o n  Relationship Analysis between Criteria Annual Meeting of the North American Fuzzy Information Processing Society 2005 14 N  P a p a d ias HERMES Su p p o rti n g A r g u m e n tative  Discourse in Multi Agent Decision Making Proceedings of the 15th National Conference on Artifical Intelligence \(AAAI-98  pp. 827-832\dison, WI: AAAI/MIT Press,  \(1998a 15  E. B T riantaph y llo u   T h e Im p act o f  Ag g r e g atin g Ben e f i t  and Cost Criteria in Four MCDA Methods IEEE Transactions on Engineering Management, Vol 52, No 2 May 2005 16 S  H T s a u r T h e Ev alu a tio n o f airlin e se rv ice q u a lity b y  fuzzy MCDM Tourism Management 107-115, \(2002 1 T  D W a n g  Develo p in g a f u zz y  T O P S IS app r o ach  b a sed  on subjective weights and objective weights Expert Systems with Applications 8980-8985, \(2009 18 L  A  Zadeh  F u z z y Sets   Information and Control 8  338-353, \(1965  152 


                        





