A New Fast Algorithms for Mining Association Rutes in Large Databases Cheng-Fa Tsoi EChau Lin and Chi-Pin Chen Depmtment of Manogemenf Infannotian sfems National Pingnrng Universiry of Science and Technolow Pingtung 91201 Toiwan E-mail: &ai@mail.nmrrt.edu.hu Telephone 886-8-7703202 ext 6139 Fa 886-8-7740306 Abstract 7tispaperpmposes o novel ond eflcienf olgorifhm for mining nrSOCi4fiOn ruler in l5e dofabases We infroduce the problem of mining o large collection of baskef o tvpe bansodions for assmiofion rules befween sen of item wifh some minimum specijid confidence and plesenlr M 
ciem algorithm for this purpose The conhibution of this pmjeu is thre~$alk I eflcienf gener4tim fw lmge ifemseb by hprh method 2 effeuive reducfian on itemets scan required by the Division appmch and 3 fhe option of reducing the number of database scans required Our pmposed hash and division-based technquer HD olgorithm is very eflcienf fw the generation of condidne lmge ifemsea where the number of condidate large ifemsets generafed by HD is smaller fh chm by many mefhodr such as the Apriori algarifhm 
DHP algorithm and DIC algorifhm According to ow simulation rerulrs fhe prwosed approach ir cienl thon mry misting algorifhms Keywords data mining association nlw large daiabeua 1 Introduction Raeotly mining of databass has amacted a growing amount of attention in database wmunities due to its wide applicability in d industry to improving marketing swtegy I 131 12 Association rule mining finds interesting association or wrrelation relationship among a large set of data items with massive amounts of dam wntinuously king wllected and stod many industries 
an becoming inter&tcd in mining association rub from their databases The discovny of infnating association relationships among huge amounts of business hansBetiDn records can help in selective marketing business management and many business decision making processes such as cmss-marketing catalog dsigh and loss-leader analysis A typical example of association rule mining is market b&et analysis his process analyzes customer-buying habits by finding sssociations khvccn the diffmt items that customers place in their 223shopping baskets\224 Since its inception association rule mining has 
become one of the wre data mining tasks and haF amacfed Iremendous interest among practitioners and researchers Association rule mining is undirected or unsupervised dam mining OVR variable-length data and it produces clear understandable results Many algorithms havc bem proposed to discover the large itcmsets 2 SI SI 191 Generally speaking these approaches iirsl wnsbuct a candidate set of large itcmwts based on various heuristics and then diswver the subset that indeed wntains large item 222his process can k done iteratively in the sase that 
the large itemsets discovered in one iteration will be utilized as the basis to generate the candidare set for the next itnation For instanax in SI at the M iteration all large ifcmsets wnlaining k itrms referred to as large k-itemscU arc generated In the next iteration to wnshuct a candidate set of large k+l a heuristic is utilized to expand some large titemsets into a k+l if certain wnsnaints an satisfied The Apriori algorithm by Agmwal ha merged 
as one of the best association rule mining ARM algorithms Z 5 Apriori utilizes a wmplele botbm-up scareh with a horimnal layout and enumerates all fkquent itemsets The DHP algorithm proposed by Park extends the Apriori method by utilizing a hash table to precompute approximate support of I-itnosets during the fm iterations SI The second itaation need wunt only those candidafes falling in hasb cells with minimum support This kh-table technique can succssfully nmovc many candidate pairs that would eventually have become 
infrequent Ihc DIC algorithm proposed by Brin is a generalization of Apriori The datlbase is divided into p qual-sized panitions so that each partition fits in memory In this paper we develop a new algorithm HD standing for hashing and division for e5cimt large itnnset generation According to MII simulation mults our proposed algorithm W is usually 15-38 percent better than DHP In addition HD performs anywi~ae much bener than Apriori and DIC Q 2002 IEEE SMC WPUZ 


2 Novel Aspect of Work In essence algorithm HD depicted in Fig 1 utilizes the technique of hashing to filter out unnecessary itnnsN for next candidate items generation In addition, the meaning of various parameters is illustrated in Table 1 Hi Function HI-supporyCd Forall~EC~dobegin For i=1 ism i Read d block c,collM if ccovnf ex the support threshold then stop calculating next block iRc.count2 mh-sUp  Harh table containing vd buckets for CC break  end-of-Hl-supp0i-t Function apriori-sup\(CJ fonll tmnsacb ons IED do Lqin fonl candidates cs C do C  subset f fCOuW ad-of-apriori-sup Fig 2 Subproccdures for algorithm HD The algorithm has four main steps Stcpl  SU minimum support and divide databasc into m Sfcp2  Find 41 crate Hi end gennafs C read the fm block block of database and styt discovering all C if calculating next block c,execed the pport threshold then stop Step3  Find Ll Step4  Repeat Step2 until it unable to generate Lbl CCI Set of candidate k-i unfiltered out by  C Set of candidate k-itemxll tilted ouf by hash hash table I I IAvcrage size ofthe maximal potentially lac I I L lNuber of potentially e itemsets I I N lNumbcrofitems I 3 Erpcrimcnbl Rmnlta Our experiments utilized a P4 I.7GHz PC with 512 main memory We utilized different synuldc databases that have been utilized as benchmark databases for many association rules algorithms 121 141 161 7l 1101 Ill Let D presenu the number of bdnrsctons Tthe avemge uamaction Size I the size of a maximal potentially tiquent itemset L the number of maximal potmtially tiquent itemsets and N the number of items The data is generated utilizing the following pmcedure We 6rst generate L maximal itemms of average size I by chwsing 


from the N items We next generate D transactions of average size T by choosing from the L maximal itemsets We refer the reader w IS for more defail on the database generation In ow experiments we sct N  1,000 and L  2,000 Experiments are conducted on databaKs with di5eermt values of D T and I The database parameters are presented in Table 2 In Table 3 through Table 7 wc compare OUT novel approach against Apriori DHP and DIC for di5erent values of minimum support on Le di5erent databass As the support des the size and number of frequent itemsets increases Apriori thw has to makc multiple passes over the database and performs poorly Fig 3 and 4 depict the comparison of the database size VS execution time for HD DHP Apriori and DIC algorithms with different values of minimum support and average sirc of the wnsactions Fig 5 6 and 7 show the comparison of the average sue of the hawactions w execution time for 200ID DHP Apriori and DIC algorithms with different values of minimum support on the di5mt databases Accurding to our simulation T=I rnin-sud.Z mults OUT propxed algorithm HD is usually 15-38 percent bater than DHP In addition HD performs anywhere much better than Apriori and DIC EIO min-sup=O.5 D10 DSO DlOO DIH I--X DIC I Database sue DIO DSO DIOO DISO I+DIC 1 Database sue I D10 DH DIM DIM I-X-DIC I Database size I I I c min-sup-0.75 Fig 3 Comparison of the database size vs execution time for HD DHP Apriori and DIC algorithms F10 and minimum support s  0.25X 0.5./4 and 0.75 respectively 


Table 4 Execution times in saonds for HD DHP ApriorL and DIC PIS minimum support s 0.5 and 0.75 D10 Ixo DIM DIM l---*DIC I ntabasc si2e b min_sup=O.5 I T=l mir-d.75 I D10 Ixo Dlm Dl50 I I htabav size c min-sup=o.75 Fig 4 Comparison ofhe database riu vs execution time for HD DHP Apriori and DIC algorithms PIS and minimum support I  0.25 0.5 and 0.75Y6 spccfively Table 5 Execution tims in seconds for HD DHP Apriori and DIC DIOOK minimum support s 0.5 and  Apriai 1 2671 I 208 1201 1 3156 I 26591 589 1128755 I 17169 1 3949 1564119~116477 23789 DIC I 1954 I I85 I 173 I 21517 I 2109 I 487 I 93851 I 13517 I 3398 111345191 94856 I 19374 


I I  APnQn T6 TI0 TI5 Ro 3 a min su@.25 b rnin-sup==O.S DdWK mAl_W.75 c min_su@.75 Fig 5 Comparison of the average size of the uunJacfiom VS execution time for HD DHP Apriori and DIC algorithms I OOK minimum support  0.75 Table 6 Execution times in scconds for HD DW Apriori and DIC B150K minimum support s 0.5 and The avcnoe size of rmnsactiDlU c min-sufl.75 Fig 6 Comparison of the avenge si of the uunsactions vs execution time for HD DHP Apriori and DIC algorithm DISOK minimum support  0.75 


Table 7 Execution times in seconds for HD DHP Apriori, and DIC D=2M minimum support sF0.25K 0.5 and Fig 7 Comparison of the average size of the uansactions vs execution time for ED DHP Apriori and DIC algorithms D=200K minimum support  0.25 4 Concluaioa In this paper we presmt a novel algorithm for efficient enumeration of frequent itemsets HD algorithm uses hash method to reduce the number of candid items moreover a division-based approach is uxd to reduce the number of database sem required ExIemivc simulation study has ban wnductcd to evaluate performance of the proposed algorithm According to our simulation resulu our proped algorithm HD is usually 15-38 pBMt better than DHP In additiow HD performs anywhere much better than Apriori and DIC 5 Rcfcrrncw IIPieter Adriaans Dolf Zantinge Data Mining Addison Wesley Longman 1996 2 R Agrawal T hielinski and A Swami Mining Association Rules between sets of Items in Large Database Fwc of the ACM SIGMOD CO M Managemem of Dafa Washington D.C pp 207-216 May 1993 3]Iiawei Han Michelinc Kamber Data Mining Concepts and Techniques, Morgan KaufmaM Publishem 2001 4]M Houtoma A Swami Set-oriented mining for association NI IBM Research Report RJ 9567, IBM AlmadenRcwsrchcCntn,SanIose,~OEtober1993 SIR Agrawd and R Srikant Fan Algorithms for Mining Association RUIW in Large atabaseg n Proc 2o"L Im4 Con Vby lmge Dam Barer pp 478-499 Sept 1994 q A Savasm E Omiecinski and S Navathe An eilicient algorithm for mining association rules in large ddq In Pmc 2I'VLDB pp 432444 Sept 1995 VH Toivonm Sampling large databases for asmiation rules In Pme 2p VLDB Confrence Mumbi Bombay Scpr 19 8 J.S Park M.S Chen and P.S Yu Using a Hash-Bared Method with Transaction Trimming for Mining Association Rules IEEE Dam On Knowledge ond Dah Eng vol 9 no 5 pp 813-825 SeptJOct 1997 9 S Brin R Mohwni I.D Ullman and S Tsur Dynamic Itemset Counting and Implication Rules for Market Basket Data Pmc ACM SIGMOD Con on Monagement of Dolo ACM Press New York pp 255-264 1997 IO]RobcRo I Bayardo Ir Efficiently Mining Long Patterns from Databases plot of the ACM SIGMOD IN CO On Management of Dam pp 85-93 Seattle Washiigton June 1998 IIIJ Him 1 Pei and Y Yin Mining frquent patterns without candid genemion Pmc of lhe ACM SIGMOD Int Con On Managemem of Data May 2000 12]Mohammed 1 ZaLi Pdlcl and Distributed Association Mining A Survey EEE Connmency vol 7 no.4.p 14-25,OcL-Dec 1999 


NPA  1 EO 1 number of nodes Figure 7 The execution time and the commu nication time on the SR2201 On the other hand, the communication time for Shift algorithms is shorter on the WS cluster than that on the SR2201 6 Discussions 6.1 Execution on a workstation cluster The execution times for NP.4 and CC algorithms increase rapidly with a decrease in the minimum sup port This is because the number of candidate itemsets increases when the minimum support decreases and these algorithms scan the all candidate itemsets in the transaction database at each node But because the Shift algorithm partitions the candidate itemsets into each node the execution time of scanning is shorter than that for the other algorithms and does not in crease as rapidly when the minimum support decreases The execution times for all algorithms increase with an increase in the number of transactions and the ra tio of the execution time of each parallel algorithm to the execution time of the corresponding sequential al gorithm decreases with an increase in the number of transactions This ratio for the Shift algorithm reaches a minimum value when the number of transactions is 4000 and the algorithm converges more rapidly than the other algorithms The execution times for all algorithms decreases with an increase in the number of nodes The re duction of the communication time in Shift operations seems to be due to the scanning processing and com munication processing being executed asynchronously Because data are searched in parallel and all amounts of searched data are almost the same for all these al gorithms CPU processing time which is the difference of the communication time from the execution time is almost the same for all algorithms Our cost analysis showed that the amount of com munication was smallest for the CC algorithms but the execution times for NPA and CC algorithms were almost the same in our experiments This seems to be because that the size of data used in our experiment is not so large 6.2 Execution on the parallel computer The execution times for all algorithms were much longer on the parallel computer than that were in the WS cluster environment We think this is because amount of CPU memory available on the parallel com puter was insufficient On the other hand the com munication time was more stable on the parallel com puter and the time for communication between nodes is shorter on the parallel computer In other words the ratio of the communication time to the execution time is large in a WS cluster environment and the commu nication time has a great influence on the execution time In the WS cluster environment the communication time for the Shift algorithm which uses shift opera tions is less than that for the CC algorithm which uses broadcast operations On the other hand, the commu nication time for the Shift algorithm on the parallel computer is lager than that for the CC algorithm The Shift algorithm is therefore effective in a LVS cluster environment that can execute shift operations rapidly 7 Conclusion The distributed algorithms proposed in this pa per are effective when parallel processing distributed throughout clustered computers is used to mine databases for association rules When we implemented these algorithms on a SVS cluster and on a parallel com puter so that we could evaluate their performance we found that the Shift algorithm was the most effective when there was a large number of candidate itemsets and processor nodes in the WS cluster environment This is because the ratio of communication time to ex ecution time is large in a WS cluster environment and the communication time therefore has a great influence on the execution time We intend to perform more analysis about the com munication cost between nodes We also intend to per form further experiments with large size data which are used at companies and institutes We also intend to develop a new algorithm to share the loads among nodes because real data are often distributed unevenly 367 


References 141 111 121 31 R Agrawd and R Srikant 223Fast Algorithms for Mining Association Rules,\224 Proc of Int\222l Conf on Very Large Data Bases pp.487-499 1994 R Srikant and R Agrawal 223hslining Generalized Asso ciation Rules,\224 Proc of Int\222l Conf on Very Large Data Bases pp.407-419 1995 N Megiddo and R Srikant 223Discovering Predictive As sociation Rules,\224 Proc ofthe 4th Int\222l Conf on Knowl edge Discovery an Databeses and Data Mining 1998 I51 161 E.H Han G Karypis and V Kuniar 223Scalable par allel data mining for association rules;\224 Proc of ACM SIGMOD Int\222l Conf pp.277-288 1997 T Shintani and M Kitsuregawa 223Iniplenientation of Parallel Mining Association Rules and their Evalua tion,\224 JSPP\22296 pp.97-104 June 1996 L Harada N Akaboshi K Ogihara and R Take 223Par allel Algorithm with Load Balancing for Mining Associ ation Rules,\224 IEZCE Trans on Info and Syst V-ol.J82 D-1 No.1 pp.70-81 January 1999 368 


In Figures 10 and 11 we see MAFIA is approximately four to five times faster than Depthproject on both the Connect-4 and Mushroom datasets for all support levels tested down to 10 support in Connect-4 and 0.1 in Mushroom For Connect-4 the increased efficiency of itemset generation and support counting in MAFIA versus Depthproject explains the improvement Connect 4 contains an order of magnitude more transactions than the other two datasets 67,557 transactions amplifying the MAFIA advantage in generation and counting For Mushroom the improvement is best explained by how often parent-equivalence pruning PEP holds especially for the lowest supports tested The dramatic effect PEP has on reducing the number of itemsets generated and counted is shown in Table 1 The entries in the table are the reduction factors due to PEP in the presence of all other pruning methods for the first eight levels of the tree The reduction factor is defined as  itemsets counted at depth k without PEP   itemsets counted at depth k with PEP In the first four levels Mushroom has the greatest reduction in number of itemsets generated and counted This leads to a much greater reduction in the overall search space than for the other datasets since the reduction is so great at highest levels of the tree In Figure 12 we see that MAFIA is only a factor of two better than Depthproject on the dataset Chess The extremely low number of transactions in Chess 3196 transactions and the small number of frequent 1-items at low supports only 54 at lowest tested support muted the factors that MAFIA relies on to improve over Depthproject Table 1 shows the reduction in itemsets using PEP for Chess was about an order of magnitude lower compared to the other two data sets for all depths To test the counting conjecture we ran an experiment that vertically scaled the Chess dataset and fixed the support at 50 This keeps the search space constant while varying only the generation and counting efficiency differences between MAFIA and Depthproject The result is shown in Figure 13 We notice both algorithms scale linearly with the database size but MAFIA is about five times faster than Depthproject Similar results were found for the other datasets as well Thus we see MAFIA scales very well with the number of transactions 5.3 Effects Of Compression To isolate the effect of the compression schema on performance experiments with varying rebuilding threshold values we conducted The most interesting result is on a scaled version of Connect-4, displayed in Figure 14 The Connect-4 dataset was scaled vertically three times so the total number of transactions is approximately 200,000 Three different values for rebuilding-threshold were used 0 corresponding to no compression 1 compression immediately and all subsequent operations performed on compressed bitmaps\and an optimized value determined empirically We see for higher supports above 40 compression has a negligible effect but at the lowest supports compression can be quite beneficial e.g at 10 support compression yields an improvement factor of 3.6 However the small difference between compressing immediately and finding an optimal compression point is not so easily explained The greatest savings here is only 11 at the lowest support of Conenct-4 tested We performed another experiment where the support was fixed and the Connect-4 dataset was scaled vertically The results appear in Figure 15 The x-axis shows the scale up factor while the y-axis displays the running times We can see that the optimal compression scales the best For many transactions \(over IO6 the optimal re/-threshold outperforms compressing everywhere by approximately 35 In any case both forms of compression scale much better than no compression Compression on Scaled ConnectAdata Compression Scaleup Connectldata ALL COMP 0 5 10 15 20 25 30 100 90 80 70 60 50 40 30 20 10 0 Min Support  Scaleup Factor Figure 14 Figure 15 45 1 


6 Conclusions We presented MAFIA an algorithm for finding maximal frequent itemsets Our experimental results demonstrate that MAFIA consistently outperforms Depthproject by a factor of three to five on average The breakdown of the algorithmic components showed parent-equivalence pruning and dynamic reordering were quite beneficial in reducing the search space while relative compressiodprojection of the vertical bitmaps dramatically cuts the cost of counting supports of itemsets and increases the vertical scalability of MAFIA Acknowledgements We thank Ramesh Agarwal and Charu Aggarwal for discussing Depthproject and giving us advise on its implementation We also thank Jayant R Haritsa for his insightful comments on the MAFIA algorithm and Jiawei Han for providing us the executable of the FP-Tree algorithm This research was partly supported by an IBM Faculty Development Award and by a grant from Microsoft Research References I R Agarwal C Aggarwal and V V V Prasad A Tree Projection Algorithm for Generation of Frequent Itemsets Journal of Parallel and Distributed Computing special issue on high performance data mining to appear 2000 2 R Agrawal T Imielinski and R Srikant Mining association rules between sets of items in large databases SIGMOD May 1993  R Agrawal R Srikant Fast Algorithms for Mining Association Rules Proc of the 20th Int Conference on Very Large Databases Santiago Chile, Sept 1994  R Agrawal H Mannila R Srikant H Toivonen and A 1 Verkamo Fast Discovery of Association Rules Advances in Knowledge Discovery and Data Mining Chapter 12 AAAVMIT Press 1995 5 C C Aggarwal P S Yu Mining Large Itemsets for Association Rules Data Engineering Bulletin 21 1 23-31 1 998 6 C C Aggarwal P S Yu Online Generation of Association Rules. ICDE 1998: 402-41 1 7 R J Bayardo Efficiently mining long patterns from databases SICMOD 1998: 85-93 8 R J Bayardo and R Agrawal Mining the Most Interesting Rules SIGKDD 1999 145-154 9 S Brin R Motwani J D Ullman and S Tsur Dynamic itemset counting and implication rules for market basket data SIGMOD Record ACM Special Interest Group on Management of Data 26\(2\1997 IO B Dunkel and N Soparkar Data Organization and access for efficient data mining ICDE 1999 l 11 V Ganti J E Gehrke and R Ramakrishnan DEMON Mining and Monitoring Evolving Data. ICDE 2000: 439-448  121 D Gunopulos H Mannila and S Saluja Discovering All Most Specific Sentences by Randomized Algorithms ICDT 1997: 215-229 I31 J Han J Pei and Y Yin Mining Frequent Pattems without Candidate Generation SIGMOD Conference 2000 1  12 I41 M Holsheimer M L Kersten H Mannila and H.Toivonen A Perspective on Databases and Data Mining I51 W Lee and S J Stolfo Data mining approaches for intrusion detection Proceedings of the 7th USENIX Securiry Symposium 1998 I61 D I Lin and Z M Kedem Pincer search A new algorithm for discovering the maximum frequent sets Proc of the 6th Int Conference on Extending Database Technology EDBT Valencia Spain 1998 17 J.-L Lin M.H Dunham Mining Association Rules: Anti Skew Algorithms ICDE 1998 486-493 IS B Mobasher N Jain E H Han and J Srivastava Web mining Pattem discovery from world wide web transactions Technical Report TR-96050 Department of Computer Science University of Minnesota, Minneapolis, 1996 19 J S Park M.-S Chen P S Yu An Effective Hash Based Algorithm for Mining Association Rules SIGMOD Conference 20 N Pasquier Y Bastide R Taouil and L Lakhal Discovering frequent closed itemsets for association rules ICDT 99 398-416, Jerusalem Israel January 1999 21 J Pei J Han and R Mao CLOSET An efficient algorithm for mining frequent closed itemsets Proc of ACM SIGMOD DMKD Workshop Dallas TX May 2000 22 R Rastogi and K Shim Mining Optimized Association Rules with Categorical and Numeric Attributes ICDE 1998 Orlando, Florida, February 1998 23 L Rigoutsos and A Floratos Combinatorial pattem discovery in biological sequences The Teiresias algorithm Bioinfomatics 14 1 1998 55-67 24 R Rymon Search through Systematic Set Enumeration Proc Of Third Int'l Conf On Principles of Knowledge Representation and Reasoning 539 550 I992 25 A Savasere E Omiecinski and S Navathe An efficient algorithm for mining association rules in large databases 21st VLDB Conference 1995 26 P Shenoy J R Haritsa S Sudarshan G Bhalotia M Bawa and D Shah: Turbo-charging Vertical Mining of Large Databases SIGMOD Conference 2000: 22-33 27 R Srikant R Agrawal Mining Generalized Association Rules VLDB 1995 407-419 28 H Toivonen Sampling Large Databases for Association Rules VLDB 1996 134-145 29 K Wang Y He J Han Mining Frequent Itemsets Using Support Constraints VLDB 2000 43-52 30 G I Webb OPUS An efficient admissible algorithm for unordered search Journal of Artificial Intelligence Research 31 L Yip K K Loo B Kao D Cheung and C.K Cheng Lgen A Lattice-Based Candidate Set Generation Algorithm for I/O Efficient Association Rule Mining PAKDD 99 Beijing 1999 32 M J Zaki Scalable Algorithms for Association Mining IEEE Transactions on Knowledge and Data Engineering Vol 12 No 3 pp 372-390 May/June 2000 33 M. J. Zaki and C Hsiao CHARM An efficient algorithm for closed association rule mining RPI Technical Report 99-10 1999 KDD 1995: 150-155 1995 175-186 3~45-83 1996 452 


