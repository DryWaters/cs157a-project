Association Rule based Context Mo deling for Web Service Discovery  Wenge Rong, Kecheng Liu and Lin Liang Informatics Research Centre University of Reading United Kingdom, RG6 6BX w.rong, k.liu, lin.liang}@reading.ac.uk    Abstract  Web service is essential in achieving dynamic business process. With the dramatically increased number of web services advertised in UDDI, Web Portal or Internet, how to locate the best web service according to a user’s requirement is becoming more and more important, which calls for efficient and effective web service discovery mechanism. Considerable efforts have been attained in solving this problem among them semantic based approaches show encouraging result. However, when several semantically equivalent web service candidates are returned by matchmaking process, how to discern which one is the most suitable one is a real challenge. This paper presents a framework by which provider’s context and user’s context has been explored to help understand the real need of a user. This framework uses association rule for context modeling of provider and user from web service composition perspective. After modeling context, a ranking service is invoked to compare web service candidates with user’s requirement and then the best suitable potential web service will be selected  1. Introduction  Currently, web services are advertised in Universal Description, Discovery, and Integration registry \(UDDI  port a l s s u c h as  X M e t h ods 2] an d In t e r n et bei ng retrieved by Search Engines W ith s u c h dram a ticall y  increased and heterogeneously available web services how to find a suitable one with respect to user’s requirements is becoming an essential task in web service based applications, which is called web service discovery A lot of efforts have been attained in solving web service discovery problem, e.g. interface matchmaking  and structure matchmaking T h es e approach es  m a inl y  study the syntactic structure of the WSDL iles a n d find possibly matched web services. However, as indicated by Sivashanmugam et al 7  l a c k o f s e m a n t i c i n formation is the other important inhibitor because similar structure does not guarantee similar function or behavior and also the other way around. Several approaches have been proposed to add semantic information into web service discovery process, e.g. DAML-S S DLS 9  WSML W L S 11  Th oug h addi ng s e m a n t i c i n formation into web service discovery process can alleviate semantic heterogeneities, there also exist pragmatic heterogeneities [12 w h ic h  o ccu r w h e n cu sto m er s an d  providers have different way to implement domain specific process even they have similar terminology Considering the following scenario, there are two web services and both of them provide vehicle rent service The first web service W 1 provides mainly sedans rental several SUVs rental and few minivans rental services The second web service W 2  provides few sedans rental service and mainly bus rental service. Obviously these two different web services have different target customers but their WSDL file will be probably similar from semantic perspective. Customers will be happy if more information beneath semantics can be provided in WSDL file to help them select most suitable web services. Unfortunately it is not easy. We believe that the reasons are because of 1\ limit information contained in WSDL file. According to Li et al  erag e s i ze of n earl y 74% W S D L  file are less than 10K and 67% WSDL files have less than 50 description words. 2\ariety of web service customers and providers background. There are no standards to state such domain or process information in WSDL file, different web service providers may not know exactly how to advertise their services precisely From the above scenario we can find an important question arising here, indicated also by  Among a set of semantically equivalent web service candidates, which one is best suitable as to the customer’s needs, or how to achieve personalized web service discovery? To solve this problem, it is necessarily noted that the web service discovery process needs to understand more information such as users preference, domain information and etc besides semantic interoperability. Among lots of possible approaches, context awareness is one of the candidates for personalized web service discovery. By using context information to assist describing provider and customer web service discovery process can be more user-centered However, context is too complicated to be modeled properly since it could include everything around the applications. Traditionally the context has been defined as location, speed, time and similar physical attributes. In this paper, the context of a web service has been defined from different viewpoint as the dependency between the web service and other web services in the repository 1530-1354/08 $25.00 © 2008 IEEE DOI 10.1109/CEC/EEE.2008.58 299 10th IEEE Conference on E-Commerce Technology and the Fifth IEEE Conference on Enterprise Computing, E-Commerce and E-Services 1530-1354/08 $25.00 © 2008 IEEE DOI 10.1109/CEC/EEE.2008.58 299 10th IEEE Conference on E-Commerce Technology and the Fifth IEEE Conference on Enterprise Computing, E-Commerce and E-Services 1530-1354/08 $25.00 © 2008 IEEE DOI 10.1109/CEC/EEE.2008.58 299 


This paper is organized as follows. Section 2 will introduce background information about context and context aware web service applications. Section 3 and 4 will discuss the possibility of building context for intention capture. In section 5, the proposed context model for web service discovery and the mechanism to build providers and customers’ context information will be depicted. Section 6 will give the proposed context matchmaking mechanism and the re-ranking method for implementing context awareness and section 6 will gives conclusion and discuss future work   2. Background  2.1. What is Context  Context awareness is becoming more and more important in SOA and web service based systems for adaptability and personalization. However, context is not easily to be defined and modeled since context is a very broad and diverse concept. Different researchers have introduced different definitions of context   t r y t o def i n e con t e x t b y enum erat i n g  v a l i d  attributes in the context such as location, noise, identity time, date and other related information. Different from enumeration of attributes of context, Anind K. Dey formally gives following definition of context Context is any information that can be used to characterize the situation of an entity. An entity is a person, place, or object that is considered relevant to the interaction between a user and an application, including the user and applications themselves   He further points out that one of the important features of context awareness is the ability to predict and capture user’s intention, which is the main research issue in this paper  2.2. Context aware web service  A context modeling method by using enumerating attributes is proposed in w h ere cont ex t i n f o r m a t i on is defined as different attributes and a tool is implemented to construct attribute based context information    propose a multi-level context approach for personalized web service discovery. They define context from user web service and resource perspective and define corresponding U/W/R context, respectively Medjahed and Atif adopt a broad definition of context and further categorize context into either client-related or provider-related group  A con t e x t s e n s it iv e f r a m e work to facilitate web service discovery process in in which context is defined as user profile, such as place temperature, age, and then achieve personalized web service provision. In t ex t h a s been  m e ntion e d as  current time and user’s current location for web service composition. Along with user’s preference, they present encouraging adaptive provision of web services ovide an enhanced UDDI registry with context information to facilitate the match and retrieval process. In their approach, they use ontology to model user’s context proposes a context framework to integrate context information and provide personalized web service. In their approach, context is defined by different types and can be transmitted as a SOAP header block between client and provider  w o rk ou t a contex t prof ile to acco m m odate  context arguments about service execution status. They also define a context function to indicate the sensitiveness of a certain service to certain context. By using context profile and calculating context function in runtime, the proposed system can sort return services and select the best service in current context The above context definitions and related application are mainly concern about environment of web service and users. These approaches also define context by enumerating some attributes. Apart from environment context, to achieve personalized and adaptive web service application there is other important context that is used to capture user’s intention [17  As indicated by  the first step in web service discovery is to study user’s intentional goal. However, the typical method for a user to retrieve web service is to use several keywords to represent the user’s requirement With such limit information, it is difficult to understand user’s real intention and provider’s to some extent. Furthermore, from web service provider’s perspective, currently the size of a WSDL files is normally limited. That means registered web services do not contain more information than basic function interface as well Therefore, we believe to achieve personalized web service discovery, we need to understand more beneath the keywords from user and WSDL file from provider However, as indicated by ere is al w a y s a lot of information that users cannot explicitly express. Thus how to collect implicit information beneath user and environment is becoming important. Actually, to understand user’s intention beneath is one of the most important research issues, not only in web service application domain  prop os es a dom ai n s p eci fi c w e b s e r v i ce di s c ov er y method, which use web service class to specify a set of web services sharing similar domain interest. With this method, user can find more suitable web service and get better matchmaking throughout. However, domain information is not easy to categorize in advan r op os e a system to satisfy user’s need by using other users’ similar decisions from past experience. The proposed framework keeps history of user-system interaction and use these log information to recommend decision. Though the authors do not mention context concept, we think the implicit information beneath users’ explicit requirements they try to capture does reflect essentials of user context  3. Context from intention perspective 
300 
300 
300 


 Context defined in this paper can be interpreted by figure 1. Normally Input I 1 I 2 I 3 I m will be abstracted formally to output O 1 O 2 O 3 O n During the process, some useful information will be lost either explicitly or implicitly. This is because user may not the expert in dealing with information abstraction. Furthermore, the real word cannot always be formally modeled and abstracted Therefore, if context informat ion is available when dealing with output, it will be helpful to recover the real meaning that input represents In web service discovery process, this kind of context is useful to capture the intention of web service users and providers. From users persp ective, users will normally submit several keywords for web service discovery. The context will be then useful to understand the real intention beneath these keywords. On point of view of providers the WSDL file though includes more information than just keywords, it is still necessary to understand provider’s context to capture provider’s suitability  4. Association rule based context modeling  It is learned that context for intention capture is not easily defined and modeled due to the large number of explicit or implicit factors af fecting information abstraction. In this paper, we will try to define context from web service composition perspective As we know, integrating web services into a business process has difficulties in terms of reliability, availability and performance. Particularly, in real applications it is quite common when a business calls for a certain service but no single web service can fulfill the requirement which leads to the need of services composition Typically, web service composition can be seen as a process to find a new service S, which consists of a set of component web services {S 1 S 2 S 3 S n Each component web service is mapped to a set of real web services S i1 S i2 S i3 S im Figure 2 is an example of web service composition process, where S 1 S 2 S 7 are component web services and S 21 S 22 are real web services that can be invoked at run-time Since most retrieved web service will join some composition process, we can consider that the web service discovery is served for web service composition. However, if we look the process conversely, we can also argue the web service composition process may provide some useful information for web service discovery In defining context from composition perspective, we need to define context for provider and user individually 1\From web service provider’s perspective, we can define context as a collection of web services to which the web service is related. 2\rom user’s perspective, we can define context as a collection of web services with which the retrieved web service will join together Our approach is based on the finding that there always exists some dependency among web services in the registry to some extent. Some works have reported and elaborated usage of dependency in web service discovery and composition applications. For example, [31 arg u e s th ere  are service pattern in web service application and propose a mechanism to capture the patterns opos e a t ool  to discovery web service dependency In this paper, we will employ association rule to get the dependency among web services and then define such dependency as context for web service selection intention Association rules are statements of the form A->B where A 002 I 002 B 002 I, and A 000\037 B 002 003  I = \(I 1 I 2 I n  item set in the data collection It means that if we find all of items of item set A, then we have a good chance of finding the items of B. Given any association rule, its support and confidence should be above certain thresholds The support of association rule A->B means the frequency of the rule and is defined as follows n B A B A P B support\(A    000 000    1 where   B A 000 represents the number of transactions containing not only items in A but also items in B 002 n is the number of all transactions in the data collection The confidence describes the probability of finding B on the condition of A. It reflects the association degree between A and B and defined as        A B A A B P B Aconfidence 000    2 Association rule describes the probability of the associations among different objects. In the task of web service discovery, it is considered that different web services are not independent to each other. The implicit associations always happen among different web services and reflect certain composition of different web services Processor I 1 I 2 I 3 I m O 1 O 2 O 3 O n  Context Figure 1. Context for information processing S 1 S 2 S 3 S 21 S 22 S 4  S 5  S 6  S 7 Figure 2. Web services composition 
301 
301 
301 


Inspired by the idea above, association rule technique is applied for mining web service dependency, or context The main idea is to utilize the association rules among different web services to identify the dependence between the given web service and other web services. Formally given the web service S i select the web service set S S 1 S 2 S t that satisfying: confidence\(S i S  This paper adopts the most classic Apriori algorithm 33 to id en tify all u s e f u l as s o ciatio n ru les. T h e p r o cess can be divided into the following three steps 1. Constitute frequent web service composition transaction datasets D, which consists of a certain number of composition transactions implemented with web services in the repository. D is defined as D = {T 1 T 2 T 3 T m  Each T i contains a set of web services invoked in that transaction and T i S 1 S 2 S 3 S k where S i is a web service invoked in that composition transaction. Therefore we can get a web service set S including all web services invoked in all composition transactions 2. Apply Apriori algorithm to find all the association rules from the frequent web service composition sets that satisfy the minimum confidence threshold 3. Select all the association rules and the left part of each is the singleton  5. Context aware discovery framework  As indicated in figure 3, the implementation of proposed context aware web service discovery framework consists of three fundamental components, from user provider and re-ranking perspective, respectively. The whole discovery process is depicted as following 1. To submit web service query. The user submits the query through this step 2. To build user’s context. This step will deal with user’s web service query and find the related web services with which the required web service will join to achieve a composition process 3. Semantic matchmaking. This step will employ semantic matchmaking approach to find a set of semantically equivalent web service candidates. In this paper, we select OWL-S based approach 4. Mining web service dependency. Association rule will be employed to find the web service dependency in the repository, as depicted in previous section. This process will be executed off-line and updated regularly 4. To build web service candidate context. Each retrieved web service candidate will be studied to find its context by studying the web services dependent on it After this step, each web service candidate will get a vector containing a set of heavily dependent web services 5. Context matchmaking. This step will study the user’s context and each web service candidate’s context and compare with each other based on context matchmaking methods, which will be described in next section 6. Web service candidate re-ranking. Each retrieved web service candidate will be compared with web service query and its context by combining semantic similarity and context In previous section, we have discussed the possibility of building context for user and provider. Now the most important problem to be solved is how to use the context information to facilitate context awareness in web service discovery process. In the next section, we will describe is proposed context matchmaking mechanism and reranking method  6. Ranking Mechanism  Similar with the ranking idea adopted in information retrieval, web services here that match the submitted query most is discovered through the similarity ranking The main idea is to rank we b services according to their relevance to query. Here, it is realized through two-phrase ranking In the first phrase, the traditional semantic equivalence based discovery approach is adopted to filter non-relevant web service. Web services are therefore ranked according  Semantic Equivalence  Context Equivalence   Web service Candidate Context   Web Service Query Web service repository  Query Context Figure 3. Context aware discovery framework Web services in the composition  Semantic web service discovery Semantically equivalent web se r vices Association rule based mining Web service dependency Offline  Semantic based Ranking  Context based Ran k in g  Context matching Web Service Ranking 
302 
302 
302 


to their semantic relevance. In fact, the purpose of the first phrase ranking is to find semantically equivalent web service candidates. Based on the ranking obtained in the first phrase, the second phrase that mainly considers context equivalence is implemented. In this phrase, service context is referenced and then realize the relevance reranking Let S = {S 1 S 2 S n be a web service collection and Q = {T 1 T 2 T m consisting of several keywords be the submitted query. By implementing OWL-S based approach, web services in S can be semantically ranked and the ranking result is formed as Ranking Semantic S i  S j S k  To further evaluate web service relevance, context equivalence of the top m web services in the ranking list achieved above is further evaluated. Assuming QC QC 1 QC 2 QC s contains the related web services with which the required web service join together, SC i  SC i 1 SC i t includes the web services heavily dependent with web service candidate S i in Ranking Semantic where each SC i j SC i j,1  SC i j,v  satisfies confidence\(S i  SC i j   the context equivalence of S i is then evaluated as     SC              SC         SC    Ranking t i  2 i  1 i  Context 2 1 QC QC CF QC QC CF QC QC CF S t i i i i i i SC S SC S SC S i         3 Synthetically considering the semantic equivalence and context equivalence of web service S i the relevance of S i to query Q is finally defined as   Ranking  1       Ranking    S  Q Relevance Context Semantic i i i S S        4 where represents the weights of the relevance factors namely semantic equivalence and context equivalence can be valued by empirical approach  7. Conclusions  Web service discovery is one of the fundamental problems in web service based applications. A lot of efforts have been attained in this problem among them semantic based web service discovery methods has shown encouraging performance. However, after retrieving a set of semantically equivalent web service candidates, which one is the best suitable with respect to user’s requirements is a potential challenge. In this paper, we studied the possibility of employing context awareness into web service discovery process and proposed a framework to build context for users and providers to capture user’s real need and capture the provider’s real intention to some extent. The context in this paper is built by using association rule to mining the frequent pattern from web service composition history. After that, a re-ranking mechanism is proposed for ranking the semantically equivalent web service candidates. It is anticipated that the proposed framework will help to alleviate the confusion for users in selecting the right web service during the web service discovery  8. References  1  UDDI, ‘‘The UDDI Technical White Paper http://www.uddi.org/pubs/Ir u_UDDI_Technical_White_Paper.p df  2  Xmethods, http://www.xmethods.net  3  H. Song, D. Cheng, A. Messer, and S. Kalasapur, ‘‘Web Service Discovery Using General Purpose Search Engines’’, In Proceedings of ICOS’2007 conference USA, 2007, pp. 265-271  4  G. Tretola, and E. Zimeo, ‘‘Structure Matching for Enhancing UDDI Queries Results’’, In Proceedings of SOCA’2007 conference Newport Beach, California, USA, 2007, pp. 21-28  5  E. Stroulia, and Y. Wang, ‘‘Flexible Interface Matching for Web-Service Discovery’’, In Proceedings of 4 th WISE conference Rome, Italy, 2003, pp  147-156  6  E. Christensen, F. Curbera, G. Meredith, and S. Weerawarana, ‘‘Web Services Description Language \(WSDL\ 1.1’’, W3C Note, 2001  7  K. Sivashanmugam, K. Verma, A. Sheth, and J. Miller Adding Semantics to Web Services Standards’’, In Proceedings of ICOS’2003 conference USA, 2003, pp. 395-401  8  A. Ankolekar, M. Burstein, J. Hobbs, O. Lassila, D. Martin D. McDermott, S. McIlraith, S. Narayanan, M. Paolucci, T Payne, and K. Sycara, ‘‘DAML-S: Web Service Description for the Semantic Web’’, In Proceedings of 1 st ISWC conference  Sardinia, Italy, 2002, pp. 348-363  9  W3C, ‘‘Web Services Semantics -- WSDL-S http://www.w3.org/Submission/WSDL-S    J. de Bruijn, Holger Lausen, A. Polleres, and D. Fensel The Web Service Modeling Language WSML: An Overview In Proceedings of 3 rd ESWC confenrence Budva, Montenegro 2006, pp  590-604    D. Martin, M. Paolucci, S. McIlraith, M. Burstein, D McDermott, D. McGuinness, B. Parsia, T. Payne, M. Sabou, M Solanki, N. Srinivasan, and K. Sycara, ‘‘Bringing Semantics to Web Services: The OWL-S Approach’’, In Proceedings of 1 st  International Workshop on Semantic Web Services and Web Process Composition San Diego, California, USA, 2004, pp 26-42  
303 
303 
303 


  S. Overhage, ‘‘On Specifying Web Services Using UDDI Improvements’’, In Proceedings of 2002 Net.Objectdays Workshops Germany 2002, pp. 535-550    Y. Li, Y. Liu, L. Zhang, G. Li, B. Xie, and J. Sun, ‘‘An Exploratory Study of Web Services on the Internet’’, In Proceedings of ICOS’2007 conference USA, 2007, pp. 380-387    E. Tamani, and P. Evripidou, ‘‘A Pragmatic Methodology to Web Service Discovery’’, In Proceedings of ICOS’2007 conference USA, 2007, pp. 1168-1171   15  B Schilit N. Adams, and R. Want, “Context-Aware Computing Applications”, In Proceedings of 1 st IEEE Workshop on Mobile Computing Systems and Applications 1994. pp. 85-90  16  P. Brown, J. Bovey, and X. Chen, “Context-aware applications: from the laboratory to the marketplace IEEE Personal Communications Vol. 4, No. 5, 1997, pp. 58-64  17  A Dey Understanding and Using Context Personal and Ubiquitous Computing Vol. 5. No. 1, 2001, pp. 4-7    C. Lee, and A. Helal, ‘‘Context Attributes: An Approach to Enable Context-awareness for Service Discovery’’, In Proceedings of 2003 Symposium on Applications and the Internet Orlando, Florida, USA, 2003, pp. 22-30    Z. Maamar, S. Mostéfaoui, and Q. Mahmoud, ‘‘Context for Personalized Web Services’’, In Proceedings of the 38th Annual Hawaii International Conference on System Sciences Hawaii USA, 2005    Z. Maamar, G. AlKhatib, S. Mostéfaoui, M. Lahkim, and W. Mansoor, ‘‘Context-based Personalization of Web Services Composition and Provisioning’’, In Proceedings of 30 th EUROMICRO Conference Rennes, France, 2004, pp. 396-403  21  B Medjahed and Y. Atif, “Context-based matching for Web service composition Distributed and Parallel Databases  Vol. 21, No. 1, Springer, 2007, pp. 5-37  22  J. Kuck, and M. Gnasa, “Context-Sensitive Service Discovery meets Information Retrieval”, In Proceedings of 5 th IEEE International Conference on Pervasive Computing and Communications Workshops White Plains, New York, USA, 2007, pp 601-605  23  Q Sheng B. Benatallah, Z. Maamar, M. Dumas, and A Ngu, “Enabling Personalized Composition and Adaptive Provisioning of Web Services”, In Proceedings of 16 th CaiSE conference Riga, Latvia, 2004, pp. 322-337  24  S Pokraev J. Koolwaaij and M. Wibbels, “Extending UDDI with context-aware features based on semantic service descriptions”, In Proceedings of 2003 International Conference on Web Services Las Vegas, Nevada, USA, 2003, pp. 184-190  25  M. Keidl, and A. Kemper, “Towards Context-Aware Adaptable Web Services”, In Proceedings of the 13 th International Conference on World Wide Web - Alternate Track Papers Posters New York, USA, 2004, pp. 55-65  26  N. Luo, J. Yan, M. Liu, and S. Yang, “Towards ContextAware Composition of Web Services”, In Proceedings of 5 th  GCC conference Changsha, Hunan, China, 2006, pp. 494-499  27  W. Balke, and M. Wagner, “Towards Personalized Selection of Web Services”, In Proceedings of the 12 th International Conference on World Wide Web - Alternate Paper Tracks Budapest, Hungary, 2003  28  A. Dey, and G. Abowd, “Towards a Better Understanding of Context and Context-awareness”, In Proceedings of 2000 Conference on Human Factors in Computing Systems Workshop on The What, Who, Where, When, and How of ContextAwareness Hague, Netherlands, 2000  29  D. Rocco, J. Caverlee, L. Liu, and T. Critchlow, “Domainspecific Web Service Discovery with Service Class Descriptions”, In Proceedings of ICOS’2005 USA, 2005, pp. 481-488  30  N. Kokash, A. Birukou, and V. D'Andrea, “Web Service Discovery Based on Past User Experience”, In Proceedings of 10 th BIS conference Poznan, Poland, 2007, pp. 95-107  31  Q. Liang, J. Chung, S. Miller, and Y. Ouyang, “Service Pattern Discovery of Web Service Mining in Web Service Registry-Repository”, In Proceedings of ICEBE'2006 Shanghai China, 2006, pp. 286-293  32  S. Basu, F. Casati, and F. Daniel, “Web Service Dependency Discovery Tool for SOA Management”, In Proceedings of SCC’2007 conference USA, 2007, pp. 684-685  33  R. Agrawal, and R. Srikant, “Fast algorithms for mining association rules”, In Proceedings of the 20 th VLDB Conference  1994, pp. 487-499  34  J. Hipp, U. Guntzer, and G. Nakhaeizadeh, “Algorithms for association rule mining: a general survey and comparison SIGKDD Explorations Vol. 2, No. 1, 2000, pp. 58-64  35  C. Zhang, and S. Zhang, S, “Association Rule Mining Models and Algorithms”, Springer-Verlag, Berlin Heidelberg 2002 
304 
304 
304 


 Kluwer Academic Publishers Springer, New York 1st edition, 2001 14  S c h e f f e r   T   F i n d i n g  A s s o c i a t i o n  Ru l e s  t h a t  T r a de Support Optimally Against Confidence th The Elements of Statistical Learning self_care_guide/Urogenital/Postate%20Cancer.pdf  Accessed, 25 August, 2008 11  A g r a w a l   R  T   I m i e l i n s k i     A   S w a m i   M i n i n g  association rules between sets of items in large databases, In Proceedings of the 1993 ACM SIGMOD international conference on Management of data  The Netherlands 42 2001 61-95  Ordonez C Association rule discovery with the train and test approach for heart disease predictio n 207\226 216 12 001 13  H a s t i e   T    R  T i b s h i r a n i     J  H   F r i e d m a n   Proceedings of the 5th European Conference on Principles and Practice of Knowlege Discovery in Databases\(PKDD'01 IEEE Transactions on Information Technology in Biomedicine, 10\(2\, 2006. 334 \226 343 001 Freiburg, Germany : SpringerVerlag, 2001. 424-435 15  F l a c h   P  A     L a c h i c h e   N   Co n f i r m a t i o n g u i d e d  discovery of first-order rules with Tertius 10  P h a r m a c y   h t t p    w w w  p h a r m a c y  g o v  m y    


 7. Conclusions  In this paper we have proposed an intelligent and efficient technique to reassess the distances between dynamic XML documents when one or all of the initially clustered documents have changed. After the changes, the initial clustering solution might become obsolete - the distances between clustered XML documents might have changed more or less depending on the degree of modifications \(insert update, delete\hich have been applied. Re-running full pair-wise comparisons on the entire set of modified documents is not a viable option, because of the large number of redundant operations involved Our proposed technique allows the user to reassess the pair-wise XML document distances, not by fully comparing each new pair of versions in the clustering solution, but by determining the effect of the temporal changes on the previously known distances between them. This approach is both time and I/O effective, as the number of operations involved in distance reassessing is greatly reduced  References  1  Beringer, J. and H\374llermeier, E., Online clustering of parallel data streams Data and Knowledge Engineering 58\(2\,  2006, 180-204 2  Catania, B. and Maddalena A., A Clustering Approach for XML Linked Documents, Proceedings of the 13th International Workshop on Database and Expert Systems Applications \(DEXA\22202\, IEEE 2002 3  Chen, M.S., Han, J. and Yu, P., Data Mining: An Overview from Database Perspective, IEEE Transactions on Knowledge and Data Engineering vol. 8, 1996, 866-883 4  Cormen, T., Leiserson, C. and Rivest, R Introduction to algorithms, MIT Press, 1990 5  Costa, G., Manco, G., Ortale, R. and Tagarelli, A., A tree-based Approach to Clustering XML documents by Structure, PAKDD 2004, LNAI 3202, 137-148 Springer 2004 6  Dalamagas, T., Cheng, T., Winkel, K.J. and Sellis, T 2004, Clustering XML documents by Structure SETN 2004, LNAI 3025, 112-121, Springer 2004 7  Ester, M., Kriegel, H.P., Sander, J., Wimmer,M. and Xu, X., Incremental Clustering for Mining in a Data Warehousing Environment, Proc.of the 24 th VLDB Conference, New York, USA, 1998 8  Garofalakis, M., Rastogi, R., Seshadri, S. And Shim K., Data Mining and the Web: Past, Present and Future Proceedings of WIDM 99 Kansas, US, ACM 1999 9  Mignet, L., Barbosa, D. and Veltri, P., The XML web : a first study, In Proceedings of the 12 th  International Conference on WWW, 500-510 2003   Nayak, R., Xu, S., XCLS: A Fast and Effective Clustering Algorithm for Heterogeneous XML Documents, In Proceedings of the 10 th Pacific-Asia Conference on Advances in Knowledge Discovery and Data Mining, Singapore, LNCS 3918, 2006   Rusu, L.I., Rahayu, W. and Taniar, D., A methodology for Building XML Data Warehouses International Journal of Data warehousing Mining, 1\(2 67-92, 2005   Rusu, L.I., Rahayu, W. and Taniar D.,  Maintaining Versions of Dynamic XML Documents, In Proceedings of the 6th International Conference on Web Information Systems Engineering, New York NY, USA, November 20-22, 2005, LNCS 3806   Rusu, L.I., Rahayu, W. and Taniar, D., Warehousing Dynamic XML Documents, In Proceedings of the 8 th  International Conference on Data Warehousing and Knowledge Discovery \(DaWaK 2006 LNCS 4081 Springer, 175-184, 2006   Shen, Y. and Wang, B., Clustering Schemaless XML documents, CoopIS / DOA/ODBASE 2003, LNCS 2888, 767-784, Springer 2003   Yoon, J. P., Raghavan, V., Chakilam, V., and Kerschberg, L., BitCube: A Three-Dimensional Bitmap Indexing for XML Documents J. Intel. Inf Syst 17, 2-3 \(Dec. 2001\, 241-254   XML data repository, online at http www.cs.washington.edu / research / projects / xmltk xmldata  
456 
456 


5 Related Work There exists extensive previous work on both the mining of software repositories and on the use of clustering algorithms in software engineering This discussion focuses on the most similar and recent work in the area of software evolution Mining Software Repositories Our technique was partially inspired by the work of Zimmermann et al and Y ing et al 17 on the mining of association rules in change history As described in Section 1 we sought to expand the technique to be able to recommend larger but less precise clusters of elements to guide program navigation Bouktif et al also investigated how to recommend cochanges in software development As opposed to the work cited above Bouktif et al used change patterns instead of association rules Also their approach does not attempt to reconstruct transactions and can consider associated 002les that were changed in different transactions ChangeDistiller is a tool to classify changes in a transaction into 002ne-grained operations e.g addition of a method declaration and determines how strongly the change impacts other source code entities Our approach uses similar repository analysis techniques but is focused on providing task-related information as opposed to an overall assessment of a system's evolution Finally repository mining can also be used to detect aspects in the code In this conte xt aspects are recurring sets of changed elements that exhibit a regular structure Aspects differ from the clusters we detect in the regular structure they exhibit which may not necessarily align with the code that is investigated as part of change tasks Clustering Analysis The classical application of clustering for reverse engineering involves grouping software entities based on an analysis of various relations between pairs of entities of a given version of the system Despite its long and rich history  e xperimentation with this approach continues to this day For example Andreopoulos et al combined static and dynamic information K uhn et al used a te xtual similarity measure as the clustering relation and Christl et al used clustering to assist iterative semi-automated reverse engineering The main dif ferences b e tween most clusteringbased reverse engineering techniques and the subject of our investigation is that the entities we cluster are transactions rather than software entities in a single version of a system For this reason our analysis is based strictly on the evolving parts of the system Both Kothari et al and V an ya et al 15 recently reported on their use of clustering to study the evolution of software systems The idea of using change clusters is the same in both works and ours but the purpose of the work is different Kothari et al use change clusters to uncover the types of changes that happened e.g feature addition maintenance etc during the history of a software system Vanya et al use change clusters which they call evolutionary clusters to guide the partitioning of a system that would increase the likelihood that the parts of the system would evolve independently In contrast we cluster transactions based on overlapping elements not 002les to recommend clusters to support program navigation as opposed to architectural-level assessment of the system Finally Hassan and Holt evaluated on 002ve open source systems the performance of several methods to indicate elements that should be modi\002ed together This study found that using historical co-change information as opposed to using simple static analysis or code layout offered the best results in terms of recall and precision The authors then tried to improve the results using 002ltering heuristics and found that keeping only the most frequently cochanged entities yielded the best results As opposed to our approach the evaluated 002ltering heuristics were only applied on entities recovered using association rules and not using clustering techniques The focus of their study was also more speci\002c as they recommend program elements that were strictly changed  as opposed to recommending elements that might be inspected by developers 6 Conclusion Developers often need to discover code that has been navigated in the past We investigated to what extent we can bene\002t from change clusters to guide program navigation We de\002ned change clusters as groups of elements that were part of transactions or change sets that had elements in common Our analysis of close to 12 years of software change data for a total of seven different open-source systems revealed that less than 12 of the changes we studied could have bene\002ted from change clusters We conclude that further efforts should thus focus on maximizing the quality of the match between the current task and past transactions rather than 002nding many potential matches Our study has already helped us in this goal by providing reliable evidence of the effectiveness of some 002ltering heuristics and useful insights for the development of additional heuristics Acknowledgments The authors thank Emily Hill and Jos  e Correa for their advice on the statistical tests and the anonymous reviewers for their helpful suggestions This work was supported by NSERC 
25 
25 
25 
25 
25 


References  B Andreopoulos A An V  Tzerpos and X W ang Multiple layer clustering of large software systems In Proc 12th Working Conf on Reverse Engineering  pages 79–88 2005  S Bouktif Y G Gu  eh  eneuc and G Antoniol Extracting change-patterns from cvs repositories In Proc 13th Working Conf on Reverse Engineering  pages 221–230 2006  S Breu and T  Zimmermann Mining aspects from v ersion history In Proc 21st IEEE/ACM Int'l Conf on Automated Software Engineering  pages 221–230 2006  A Christl R K oschk e and M.-A Store y  Equipping the re\003exion method with automated clustering In Proc 12th Working Conf on Reverse Engineering  pages 89–98 2005  D 020 Cubrani  c G C Murphy J Singer and K S Booth Hipikat A project memory for software development IEEE Transactions on Software Engineering  31\(6 465 2005  B Fluri and H C Gall Classifyi ng change types for qualifying change couplings In Proc 14th IEEE Int'l Conf on Program Comprehension  pages 35–45 2006  A E Hassan and R C Holt Replaying de v elopment history to assess the effectiveness of change propagation tools Empirical Software Engineering  11\(3 2006  D H Hutchens and V  R Basili System s tructure analysis Clustering with data bindings IEEE Transactions on Software Engineering  11\(8 1985  D Janzen and K De V older Na vig ating and querying code without getting lost In Proc 2nd Int'l Conf on AspectOriented Software Development  pages 178–187 2003  J K ot hari T  Denton A Shok ouf andeh S Mancoridis and A E Hassan Studying the evolution of software systems using change clusters In Proc 14th IEEE Int'l Conf on Program Comprehension  pages 46–55 2006  A K uhn S Ducasse and T  G  021rba Enriching reverse engineering with semantic clustering In Proc 12th Working Conf on Reverse Engineering  pages 133–142 2005  M P  Robillard T opology analysis of softw are dependencies ACM Transactions on Software Engineering and Methodology  2008 To appear  M P  Robillard and P  Mangg ala Reusing program in v estigation knowledge for code understanding In Proc 16th IEEE Int'l Conf on Program Comprehension  pages 202 211 2008  J Sillito G Murph y  and K De V older Questions programmers ask during software evolution tasks In Proc 14th ACM SIGSOFT Int'l Symposium on the Foundations of Software Engineering  pages 23–34 2006  A V an ya L Ho\003and S Klusener  P  v an de Laar and H van Vliet Assessing software archives with evolutionary clusters In Proc 16th IEEE Int'l Conf on Program Comprehension  pages 192–201 2008  N W ilde and M C Scully  Softw are reconnaissance Mapping program features to code Software Maintenance Research and Practice  7:49–62 1995  A T  Y ing G C Murph y  R Ng and M C Chu-Carroll Predicting source code changes by mining change history IEEE Transactions on Software Engineering  30\(9 586 2004  A Zeller  The future of programming en vironments Integration synergy and assistance In Proceedings of the 29th International Conference on Software Engineering The Future of Software Engineering  pages 316–325 2007  T  Zimmermann and P  W eißgerber  Preprocessing C VS data for 002ne-grained analysis In Proc 1st Int'l Workshop on Mining Software Repositories  pages 2–6 May 2004  T  Zimmermann P  W eißgerber  S Diehl and A Zeller  Mining version histories to guide software changes In Proc 26th ACM/IEEE Int'l Conf on Software Engineering  pages 563–572 2004 A Clustering Algorithm This algorithm is not sensitive to whether a given program element exists or not in a given version of a program For example if method m exists in one version it is considered a valid program element even if it is removed in a later version In the rest of this section we use the term program element to refer to the uniquely identifying representation of the element e.g a Java fully-quali\002ed name Let T be a transaction modeled as a set of program elements changed together during the history of a software system Let T be a sequence of transactions In this algorithm a cluster is also modeled as a set of elements 1 Input  T  A sequence of transactions 2 Parameter  M IN O VERLAP  A positive non-zero value indicating the minimum overlap between two transactions in a cluster 3 Var  C  A set of clusters initially empty 4 for all T i 2 T do 5 MaxOverlap  0 6 MaxIndex  000 1 7 for all C j 2 C do 8 if j C j  T i j  MaxOverlap then 9 MaxOverlap  j C j  T i j 10 MaxIndex  j 11 end if 12 end for 13 if MaxIndex   0  MaxOverlap 025 M IN O VERLAP  then 14 C MaxIndex   C MaxIndex  T i  15 else 16 NewCluster  T i 17 C  C  f NewCluster g 18 end if 19 end for 20 return C B Systems Analyzed System home pages last veri\002ed 7 May 2008 Ant ant.apache.org Azureus azureus.sourceforge.net Hibernate www.hibernate.org JDT-Core www.eclipse.org/jdt/core JDT-UI www.eclipse.org/jdt/ui Spring springframework.org Xerces xerces.apache.org 
26 
26 
26 
26 
26 


