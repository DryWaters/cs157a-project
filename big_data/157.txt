Summary Structures for F requency Queries on Large T ransaction Sets 003 Do w-Y ung Y ang Aksha y Johar Anan th Grama and W o jciec h Szpank o wski Computer Science Departmen t Purdue Univ ersit y  W est Lafa y ette IN 47907 f yangdy johar 
ayg spa g cs.purdue.edu Phone 765 497 7985 Abstract As large-scale databases b ecome commonplace there has b een signi\014can t in terest in mining them for commercial purp oses One of the basic tasks that underlies man y of these mining op erations is querying of transaction sets 
for frequencies of sp eci\014ed attribute v alues The size of these databases mak es it imp ortan t to dev elop summary structures capable of high compression ratios as w ell as supp orting fast frequency queries The nature of the problem and its di\013erences with resp ect to traditional 
text compression allo ws v ery high compression ratios In this pap er w e prop ose a binary trie-based summary structure for represen ting transaction sets W e demonstrate that this trie structure when augmen ted with an appropriate set of horizon tal p oin ters can supp ort frequency queries sev eral 
orders of magnitude faster than ra w transaction data W e impro v e the memory c haracteristics of our sc heme b y compressing the trie in to a P atricia trie and demonstrate that this do es not ha v e a signi\014can t adv erse e\013ect on frequency query 
time W e further reduce the size of this trie b y selectiv ely pruning branc hes to compute a dominan t trie that is capable of appro ximate frequency querying The complemen t trie called the devian t trie is also useful in man y data mining applications Recompressing the dominan 
t trie in toaP atricia trie results in further compression of the trie Finally  w e demonstrate that our binary compressed trie structure has b etter memory compression c haracteristics compared to related sc hemes W e supp ort our claims with exp erimen tal results on datasets from the IBM syn thetic asso ciation data generator 
003 This w ork is supp orted in part b y the National Science F oundation gran ts EIA-9806741 A CI9875899 and A CI-9872101 Computing equipmen t used for this w ork w as supp orted b y National Science F oundation MRI gran t EIA-9871053 and b y the In tel Corp 1 


1 In tro duction and Motiv ation With the a v ailabilit y of large online databases there has b een signi\014can t in terest in mining this data for underlying patterns of in terest 6 4 Despite the strong information theoretic underpinings of suc h tasks relativ ely little w ork has b een done on adapting information theoretic results and tec hniques to data mining and analysis with some noted exceptions In this pap er w e address the problem of summarizing transactions with a view to supp orting fast queries o v er these transactions Before w e describ e the target problems in greater detail some terminology and de\014nitions need to b e formalized De\014nitions and T erminology The giv en database D  also kno wn as a transaction-set consists of v ariable length transactions t j for j  1   n  Eac h transaction in the database consists of a set of items Eac h item is dra wn from a univ erse of items represen ted b y the set I  f i 1 i 2   i s g  A set of items is referred to as an itemset An itemset with k items in it is called a k itemset The length of an itemset is the n um ber of items in the itemset It is easy to see that transactions can also b e view ed as 014xed-length binary attribute v ectors Eac h attribute corresp onds to an item and the absence or presence of the item is signi\014ed b y a 0 and 1 resp ectiv ely  The frequency of an itemset S  032 I  is the n um b er of transactions in whic h the itemset app ears An itemset is said to ha v e a supp ort s if it app ears in more than a fraction s of the transactions F or a giv en v alue of s  itemsets satisfying the supp ort criteria are sometimes also called frequen t itemsets One of the common data mining tasks is the deriv ation of Asso ciation rules An asso ciation rule is a rule of the form S 1  S 2 where S 1 S 2 032 I and S 1  S 2    The generalized asso ciation framew ork allo ws exclusions of items in addition to inclusion That is if I 0 w ere the set of complemen ts absence of items then S 1 S 2 032 I  I 0  An asso ciation rule has asso ciated with it a notion of strength or con\014dence The con\014dence of a rule of the form S 1  S 2 is giv en b y the ratio of supp ort of S 1  S 2 to the supp ort of S 1  The con v en tional asso ciation rule framew ork 2 sp eci\014es v alues minsup and minconf  for minim um supp ort and con\014dence resp ectiv ely  The ob jectiv e is to 014nd from a giv en transaction-set D  all asso ciation rules of the form S 1  S 2 suc h that the supp ort of S 1  S 2 is greater than minsup and the con\014dence of the rule S 1  S 2 is greater than minconf Problems of this nature arise in div erse application domains ranging from do cumen t retriev al to p ortfolio analysis and mark et-bask et analysis In all of these examples the ob jectiv e is to 014nd frequen tly co-o ccurring itemsets and to use their frequencies to compute conditional probabilities T raditional form ulations of this problem use the do wn w ard closure prop ert y of frequen t sets namely  subsets of frequen t sets m ust also be frequen t F ast algorithms for computing frequen t sets start b y computing 1-frequen t sets Candidate 2-frequen t sets are computed b y com bining 1-frequen t sets This candidate set is pruned to true 2-frequen t sets b y coun ting This pro cess con tin ues un til all frequen t sets ha v e b een computed The ma jor cost of this op eration is the I/O cost asso ciated with rep eated passes o v er data Algorithms ha v e 2 


b een dev elop ed that reduce the n um ber of passes in this computation to t w o The con v en tional framew ork has sev eral dra wbac ks Often it is necessary to rep eatedly run the asso ciation algorithm with di\013eren tv alues of minsup and minconf to arriv e at a desirable set of asso ciation rules Although frequen t set computation with a single sp eci\014ed supp ort v alue only mak es t w o passes o v er the data this ma y ha v e to be done sev eral times o v er In man y cases w e ma y need to compute asso ciations on exclusions as w ell for example rules of the form MSFT  not\(RHAT in p ortfolio analysis This is not supp orted b y the con v en tional framew ork Finally  it is useful to detect strong asso ciations rules with high con\014dence irresp ectiv e of their supp ort F or example sto c ks COBT and AKAM ma y only app ear in a small n um b er of sto c k p ortfolios but their presence implies a strong c haracteristic namely  an aggressiv e IPO seeking in v estor With a view to alleviating these dra wbac ks w e prop ose a framew ork for summarizing transaction sets in to a binary trie W e demonstrate that this trie structure when augmen ted with an appropriate set of horizon tal p oin ters can supp ort frequency queries sev eral orders of magnitude faster than ra w transaction data W e impro v e the memory c haracteristics of our sc heme b y compressing the trie in to a P atricia trie 7 and demonstrate that this do es not ha v e a signi\014can t adv erse e\013ect on frequency query time W e further reduce the size of this trie b y selectiv ely pruning branc hes to compute a dominan t trie that is capable of appro ximate frequency querying Recompressing the dominan t trie in to a P atricia trie results in further compression of the trie W e supp ort our claims with exp erimen tal results on datasets from the IBM syn thetic asso ciation data generator 1 The rest of the pap er is organized as follo ws Section 2 summarizes related results in literature Section 3 outlines the family of sc hemes prop osed in this pap er Section 4 presen ts exp erimen tal results in supp ort of our claims and Section 5 dra ws conclusions and outlines curren t researc h directions 2 Related Researc h An imp ortan t di\013erence bet w een compression of transactions as opp osed to con v entional text is the fact that the order of items in the itemset is not imp ortan t Rather the absence or presence of an item is what needs to be represen ted F urthermore it is not necessary to reconstruct the database Satisfying frequency queries is the target of the summary structure There ha v e b een some e\013orts at dev eloping suc h summary structures for transaction sets Of these the results of Amir et al 3 and Han et al are most closely related Amir et al use a trie for enco ding the database with a view to computing frequen t sets Eac h transaction in the database is sorted on a prede\014ned order of items and inserted in to the trie No des of the trie are used to store the coun t of n um ber of instances of the pre\014x leading up to the no de F or example if the database has the transactions ff 1 2 g  f 1 3 4 5 g  f 2 3 4 g  f 2 3 4 5 g  f 2 3 4 gg  the corresp onding trie structure is illustrated in Figure 1 In its simple form it is easy to see that the memory requiremen ts of suc h a trie structure can b e o v erwhelming exp onen tial in the depth Ho w ev er under the assumption of b ounded length frequen t sets the depth of this trie can b e b ounded Consequen tly  for man y realistic problems it is p ossible 3 


to generate suc h trie structures and compute frequen t sets The approac h has sev eral adv an tages once a trie structure with maxim um depth has b een computed frequen t sets with v arying supp ort can be easily determined pro vided their length do es not exceed the depth of the tree The framew ork can also b e used to compute frequency of negations F or example the frequency of of itemset f i 1 i 2 i 0 3 g can b e computed as the di\013erence of frequencies of f i 1 i 2 g and f i 1 i 2 i 3 g  While the sc heme is elegan t and useful its one ma jor dra wbac k is the memory requiremen t Since the memory requiremen t is exp onen tial in depth with a large branc hing constan t this metho d is applicable only to shallo w trees In this pap er w e presen t a sc heme using binary tries that can handle extremely large transactions and transaction sets  2 22 1,2 1,3 1,4 1,5 2,5 3,5 4,5 3,4 2,4 2,3 2444 11113314 1 1,3,4 5 1311 2 1 1 3,4,5 1,3,4,5 2,3,4,5 1,3,5 1,4,5 2,3,4 2,4,5 2,3,5 1 1 2 3 4 Figure 1 Using a trie for computing frequen t sets Han et al 5  reduce the memory requiremen t of the ab o v e sc heme b y mo difying the trie structure of Amir et al In the sc heme of Amir et al a transaction of the form f 1 3 4 5 g m ust be inserted in to all paths corresp onding to subsets of the transaction f 1 3 4 5 g  f 3 4 5 g  f 4 5 g  and f 5 g  This m ultiplicit y is eliminated in the trie structure of Han et al Giv en the same set of transactions ff 1 2 g  f 1 3 4 5 g  f 2 3 4 g  f 2 3 4 5 g  f 2 3 4 gg  Han et al 014rst construct a frequency sorted ordering of the items i.e 2 3 4 1 5 In the second pass the trie structure illustrated in Figure 2 is constructed This structure is augmen ted with optimizations suc h as horizon tal p oin ters for coun ting and restricting the tree to only those items that are frequen t While this trie alleviates the memory related dra wbac k of the approac h of Amir et al it also loses some of the desirable features F requen t set computation is more complex since they are not explicitly a v ailable in the tree It is also more di\016cult to estimate frequency of exclusions absence of items in this framew ork If the n um ber of frequen t 1-items is large the memory requiremen t of this alternate trie structure itself ma y b e large In this pap er w e prop ose the use of a binary trie with optimizations to reduce the memory requiremen ts drastically using trie compression By selectiv ely truncating branc hes of the trie w e sho w that the size of the trie can be further reduced at the cost of limited loss in accuracy  Finally  w e sho w that in addition to frequen t 4 


     2 3 4 1 5                 2 2,3 3 2,3,4,5 3,4,1,5 3,4,1 3,4 2,3,4 2 2,1 1 1 1 1 1 1 1 5 3 3 3 Figure 2 Alternate trie structure for computing frequen t sets set computations our framew ork can be used for general frequency computations Exp erimen tal results are presen ted using the IBM syn thetic asso ciation data generator to supp ort all these claims 3 Summary Structures for Represen ting T ransaction Sets The basis of our sc hemes is a binary trie represen tation of the transactions Eac h transaction is view ed as an n length string of 0s and 1s Note that n is the total n um ber of items in the set I  T ransactions are then inserted in to a binary trie Consider once again the example of the transaction set ff 1 2 g  f 1 3 4 5 g  f 2 3 4 g  f 2 3 4 5 g  f 2 3 4 gg  Assuming the univ erse of items to be set of items from 1 to 5 these transactions can b e con v erted in to the follo wing binary attributed strings 11000 10111 01110 and 01111 These are inserted in to a trie as illustrated in Figure 3\(a Eac h in ternal no de in the trie main tains a coun t of the n um ber of transactions that share the pre\014x leading to the no de in the trie In addition it main tains a p oin ter to a string corresp onding to some leaf no de reac hable from curren t no de and the coun t of the pre\014x size terminating at curren t no de Note that this is an implicit represen tation of the pre\014x of the no de in the trie Coun ting in the Augmen ted T rie Structure Once suc h a binary trie structure has b een constructed the task of computing frequencies of a giv en subset corresp onds to tra v ersals in the trie Consider the simple case in whic h the frequency of itemset f 1,2 g is queried The searc h tra v erses top-do wn to the 014rst item in this case 1 The searc h prunes all non-one branc hes for the item and p erforms a sum op eration on set f 2 g for all subtrees ro oted at no des corresp onding to existence of item 1 In this case the searc h terminates quic kly returning the 5 


b  a 0,1,1,1 01 1 1,1,0,0,0 1,0,0,0 0,1,1,1 0,1,1,1,1 1 1,0,1,1,1 1                     2 2 1 1     4     0,1,1,1,0 I1=0 I1=1 I2=0 I2=1 I3=0 I3=1 I4=0 I4=1 I5=0 I5=1 0,1,1,1 0,1,1,1,1 1 0,1 0,1,1 0 1,0 1,0,1 1,0,1,1 1,0,1,1,1 1,1 1,1,0 1,1,0,0 1,1,0,0,0 4 2 11 11 1 2 2 2 1 1 1 2 1 1 01 01 1 1 1 01 10 10 10 0,1,1,1,0   Figure 3 Binary trie structure for storing inclusions and exclusions represen ted in transactions along with its compressed P atricia trie coun terpart n um ber 1 In general ho w ev er there ma y b e a large n um b er of recursiv e calls to sum Sp ecifically  the n um b er of recursiv e calls to sum for a query on set f i j  i r g whic h has b een ordered according to the trie construction order gro ws exp onen tially in r 000 j  This is not desirable T o alleviate this w e augmen t the trie structure with a set of horizon tal p oin ters that directly index in to no des sp ecifying the absence or presence of itemsets Using this set of horizon tal p oin ters the frequency query can be reduced to simple template matc hing o v er a list of trie no des F or example if the coun t of items 1 and 5 are desired the horizon tal p oin ters corresp onding to item 5 are tra v ersed Since an implicit pre\014x is a v ailable at eac h no de a template corresp onding to presence of items 1 and 5 is applied Wherev er this template returns true the no de coun t is included in the frequency  An imp ortan t and desirable feature of this framew ork is the fact that frequencies can be computed for exclusion of items as w ell If w e w an ted to compute the coun t of all transactions that had item 1 but not 5 the corresp onding p oin ter c hain can b e tra v ersed applying the required template and main taining coun t 6 


Compressing T rie for Impro v ed P erformance One of the undesirable features of the ab o v e framew ork is the fact that there ma ybe signi\014can t n um b ers of single c hild no des in the trie This is a direct consequence of the fact that transactions are t ypically sparse in nature i.e a transaction is exp ected to con tain only a v ery small fraction of the total n um ber of items in the univ erse I  This implies that the storage and computation c haracteristics of the ab o v e structure can be signi\014can tly impro v ed b y compressing the trie In Figure 3\(b w e illustrate the compression of the binary trie structure in to a P atricia trie Eac h no de in the trie with degree one is merged with its c hild This pro cess is rep eated un til all no des in the trie are of degree t w o The simple illustration in Figure 3\(b sho ws the p o w er of this simple compression in the con text of compressing sparse transaction sets In general w e notice compression ratios of up to t w o orders of magnitude using this compression step Ho w ev er compression in this manner complicates the simple horizon tal p oin ter structure w e used for frequency queries As no des in the trie are collapsed during compression eac h horizon tal p oin ter is c hanged to p oin t to the top no de in the set of no des that are collapsed As b efore eac hnodeintheP atricia trie main tains an implicit represen tation of the pre\014x leading to the no de Coun ts can be obtained as b efore b y applying the desired template to eac h link in the set of horizon tal p oin ters W eha v e omited the horizon tal p oin ters in Figure 3\(b for sak e of clarit y  Compressing P atricia T ries for Appro ximate F requencies In man y applications of frequency querying it is enough to compute an appro ximate frequency of sp eci\014ed itemset This is built in to our P articia tree framew ork b y a pro cess of pruning insigni\014can t branc hes in the tree Since a no de in the trie represen ts a coun t sum of all its descendan ts w e can prune no des with lo w relativ e w eigh t Sp eci\014cally  if the w eigh ts of a no de and its t w o c hildren w ere represen ted b y w i w j  and w k resp ectiv ely  then the ratio w k w i is the fraction of the no des headed along the sp eci\014ed c hild If this ratio is less than some presp eci\014ed constan t 017  then the branc h is pruned o\013 W e call the tree resulting from suc h pruning as the dominan t trie The complemen t of the dominan t tree is also called a devian t trie and can be useful in man y data mining applications as w ell The dominan t trie th us computed is recompressed in to an up dated P atricia trie W e observ e that dep ending on the strength of patterns in data and the degree of tolerated error this can lead to signi\014can t compression of the trie structure 4 Exp erimen tal Results In this section w e rep ort on the implemen tation of our binary trie framew ork Sp ecifically w e aim to demonstrate the follo wing k ey features of our framew ork 017 The prop osed augmen ted trie structure is capable of extremely fast frequency queries 7 


017 T rie compression in toaP articia trie results in signi\014can t compression with little o v erhead in terms of time Sp eci\014cally  this compression negates the o v erhead of explicitly storing item exclusions 017 Pruning and recompression of tries results in further compression while resulting in v ery small o v erall errors 017 The prepro cessing time to construct these trie structures is not signi\014can t compared to the n um ber of frequency queries it gets amortized o v er T o demonstrate these results w e use the IBM syn thetic asso ciation data generator W e generate a range of test cases with v arying n um b er of transactions items pattern lengths and pattern strengths The n um ber of transactions is v aried from 100K to 10M and the n um ber of items is v aried from 100 to 1000 Query Time for F requencies W e compute the query time for the augmen ted trie truncated trie and P atricia trie These times are then compared to querying the ra w data 014le Since query p erformance is a function of the itemset the time rep orted here is an a v erage of 10 queries of randomly selected itemsets These query times are rep orted in Figure 4 Sev eral observ ations can be made from this 014gure The query time on our trie structures is sev eral orders of magnitude faster than querying ra w 014les Figure 4 is dra wn on a log scale F urther reduction in time can be ac hiev ed b y truncating the trie With query times in milliseconds ev en on large datasets it is p ossible to compute asso ciations extremely quic kly in our framew ork T ransactions Query time\(ms 1 5 25 122 605 3000     100K 200K 400K 800K 1M 2M  Original T rie Lev el-T runcated T rie ra w 014le Figure 4 Query time for ra w 014le and augmen ted binary trie structure Note that the time axis is logarithmic Prepro cessing Time An imp ortan t asp ect of constructing summary structures is their space and time requiremen t The trie structure of Amir et al has excellen t time c haracteristics for querying but its applicabilit y is limited b y the memory requiremen t 8 


of the sc heme The time tak en to compute our augmen ted trie structure is sho wn in T able 1 This time is relativ ely small and is generally amortized o v er a large n um ber of frequency queries If the binary trie is restricted to only those items that are frequen t lev el truncated trie this time can b e further reduced Size of T rie Lev el-truncated T ransaction Set T rie 100K 1.54 002 10 1 6.90 002 10 000 1 200K 2.94 002 10 1 1.30 002 10 0 400K 5.64 002 10 1 2.34 002 10 0 800K 1.09 002 10 2 4.41 002 10 0 1000K 1.36 002 10 2 5.93 002 10 0 2000K 2.63 002 10 2 1.17 002 10 1 T able 1 CPU time for building the trie and the lev el-truncated trie of transaction sets Compression Ratios from P atricia T ries In T able 2 w e presen t the e\013ect of compressing tries in to P atricia tries and its e\013ect on query time As exp ected compression of tries leads to v ery signi\014can t reduction in the o v erall space requiremen t of tries W e observ e compression ratios in the range of 30 35 This is b ecause of the sparse nature of the transactions i.e eac h transaction con tains only a fraction of the total univ erse of items In addition w e notice that the corresp onding frequency computation time also go es do wn This is a result of the reduction in n um ber of no des in the trie and consequen tly in the n um ber of tra v ersals No T rans Num ber of Nodes Query Time Original T rie Compressed T rie Original T rie Compressed T rie 196733 6286290 172295 1.626015e-03 9.241104e-04 393424 10774497 303951 1.809001e-03 1.099944e-03 786872 18337195 532295 1.860023e-03 1.129985e-03 983555 21729339 636397 1.955032e-03 1.152039e-03 T able 2 Result of trie compression on the n um ber of no des and the frequency computation time Size Comparison of Binary P atricia T rie to k-T rie In T able 3 w e presen t a comparison of sizes of our binary trie with resp ect to the k-ary trie generated b y inserting sorted strings of items Figure 2 as opp osed to binary v ectors With v arious compressions applied w e can see that our binary trie is up to a factor of t w o smaller than the k-trie When higher error tolerances are allo w ed for frequency coun ts this ratio can b e impro v ed further F urthermore since exclusions are explicitly 9 


represen ted the binary trie structure can be used to quic kly compute frequencies of inclusion as w ell as exclusions of items No T rans Binary T rie Compressed T rie k-T rie 98430 3635911 96607 184827 196733 6286290 168787 314803 393424 10774497 303867 532762 786872 18337195 532079 888604 983555 21729339 636129 1048994 T able 3 Comparison of sizes of compressed binary trie with resp ect to a k-trie 5 Concluding Remarks In this pap er w eha v e presen ted a summary structure for transaction sets that can b e used for fast frequency queries W eha v e sho wn that this structure is capable of significan t impro v emen t in p erformance o v er ra w data in terms of time and storage This w ork alleviates man y of the dra wbac ks of existing w ork in literature namely  queries on exclusions and scalabilit y to large itemsets As a part of our ongoing researc h w e are building a complete asso ciation framew ork on top of our query mec hanism W e are also in v estigating the use of algebraic transformations to detect co-o ccurrences for further reducing the trie size References 1 R Agra w al A Arning T Bollinger M Meh ta J Shafer and R Srik an t The quest data mining system In Pr o c e e dings of the Se c ond International Confer enc e on Know le dge Disc overy in Datab ases and Data Mining P ortland Oregon August 1996 2 Rak esh Agra w al and R Srik an t F ast algorithms for mining asso ciation rules in large databases In 20th International Confer enc e on V ery L ar ge Data Bases VLDB  San tiago Chile June 1994 3 Amiho o d Amir Ronen F eldman and Reuv en Kashi A new and v ersatile metho d for asso ciation generation Information Systems  22\(6/7 1999 4 U.M F a yy ad et al A dvanc es in Know le dge Disc overy and Data Mining  AAAI/MIT Press Menlo P ark CA 1996 5 J Han J P ei and Y Yin Mining frequen t patterns without candidate generation T ec hnical Rep ort TR-99-12 Computing Science T ec hnical Rep ort Simon F raser Univ ersit y  Octob er 1999 6 Naren Ramakrishnan and Anan th Grama Data mining F rom serendipit y to science IEEE Computer Sp e cial Issue on Data Mining  August 1999 7 W Szpank o wski P atricia tries again revisited Journal of the A CM  37:691{711 1990 8 W Szpank o wski A generalized su\016x tree and its un ected asymptotic b eha viors SIAM J Computing  22:1176{1198 1993 10 


CMP A Fast Decision Tree Classifier Using Multivariate Predictions  449 H Wang and C Zaniolo Mining Recurrent Items in Multimedia with Progressive Resolution Refinement  461 0 Zai'ane J Hun and H Zhu Panel Session 22 Is E-Commerce a New Wave for Database Research Moderator Anant Jhingran IBM T.J Watson Research Center USA Panelists Sesh Murthy IBM T.J Watson Research Center USA Sham Navathe, Georgia Institute of Technology USA Hamid Pirahesh IBM Almaden Research Center USA Krithi Ramamrithan University of Massachusetts-Amherst USA Industrial Session 23 Java and Databases Pure Java Databases for Deployed Applications  477 N Wyatt Database Technology for Internet Applications  700 A Nori Session 24 Association Rules and Correlations Finding Interesting Associations without Support Pruning  489 E Cohen M Datar S Fujiwara A Gionis P Indyk R Motwani J Ullman and C. Yang Dynamic Miss-Counting Algorithms Finding Implication and Similarity Rules with Confidence Pruning  501 S Fujiwara J Ullman and R Motwani Efficient Mining of Constrained Correlated Sets  512 G Grahne L Lakshmanan and X Wang Session 25 Spatial and Temporal Data Analyzing Range Queries on Spatial Data  525 J Jin N An and A Sivasubramaniam Data Redundancy and Duplicate Detection in Spatial Join Processing  535 J.-P Dittrich and B Seeger Query Plans for Conventional and Temporal Queries Involving Duplicates and Ordering  547 G Slivinskas C Jensen, and R Snodgrass xi 


Industrial Session 26 XML and Databases Oracle  The XML Enabled Data Management System  561 S Banerjee V Krishnamurthy M Krishnaprasad, and R Murthy XML and DB2  569 J Cheng and J Xu Session 27 High-Dimensional Data Independent Quantization An Index Compression Technique for High-Dimensional Data Spaces  577 S Berchtold, C Bohm H Jagadish H.-P. Kriegel and J Sander Deflating the Dimensionality Curse Using Multiple Fractal Dimensions  589 B.-U Pagel F Korn and C. Faloutsos Similarity Search for Multidimensional Data Sequences  599 S.-L Lee S.-J Chun D.-H Kim, J.-H Lee and C.-W Chung Session 28 Web-Based Systems WRAP An XML-Enabled Wrapper Construction System for Web Information Sources  611 L Liu C Pu and W. Hun Self-Adaptive User Profiles for Large-scale Data Delivery  622 U Cetintemel M Franklin and C. Giles Industrial Session 29 Main Memory and Small Footprint Databases In-Memory Data Management in the Application Tier  637 The TimesTen Team SQLServer for Windows CE -A Database Engine for Mobile and Embedded Platforms  642 P Seshadri and P. Garrett Join Enumeration in a Memory-Constrained Environment  645 I Bowman and G Paulley xii 


Plenary Panel Session 30 XML Databases   Moderator: Michael Carey, IBM Almaden Research Center USA Panelists Adam Bosworth, Microsoft Corporation USA David De Witt University of Wisconsin-Madison, USA Alon Levy University of Washington USA Bruce Lindsay IBM Almaden Research Center USA Jennifer Widom Stanford University USA Demo Session 1 Web Query Optimizer  661 V Zadorozhny L Bright L Raschid T Urhan and M Vidal ReQueSS: Relational Querying of Semi-structured Data  664 R Sunderraman The IDEAL Approach to Internet-Based Negotiation for E-Business  666 J Hammer C Huang Y Huang C Pluempitiwiriyawej M Lee H Li L Wang Y Liu and S Su READY A High Performance Event Notification Service  668 R Gruber B Krishnamurthy, and E Panagos A Multimedia Information Server with Mixed Workload Scheduling  670 G Nerjes DISIMA An Object-Oriented Approach to Developing an Image Database System  672 V Oria T Ozsu P Iglinski B Xu and L Cheng Demo Session 2 The Collaboration Management Infrastructure  677 H Schuster D Baker A Cichocki D Georgakopoulos and M Rusinkiewicz Assisting the Integration of Taxonomic Data The LITCHI Toolkit  679 I Sutherland J Robinson S Brandt A Jones S Embury W Gray R White and F Bisby TheaterLoc: Using Information Integration Technology to Rapidly Build Virtual Applications  681 G. Barish Y.4 Chen D Dipasquo, C Knoblock S Minton I Muslea and C Shahabi Lineage Tracing in a Data Warehousing System  683 Y Cui and J Widom xiii 


The Mentor-Lite Prototype A Light-Weight Workflow Management System  685 J Weissenfels M Gillmann 0 Roth, G Shegalov and W Wonner Location Prediction and Queries for Tracking Moving Objects  687 0 Wolfson B Xu and S Chamberlain Semiorder Database for Complex Activity Recognition in Multi-Sensory Environments  689 S Bhonsle A Gupta S Santini and R Jain Tutorial 1 Web Information Retrieval  693 M Henzinger Tutorial 2 Mobile and Wireless Database Access for Pervasive Computing  694 P Chrysanthis and E Pitoura Tutorial 3 Data Mining with Decision Trees  696 J Gehrke Tutorial 4 Directories Managing Data for Networked Applications  697 D Srivastava Tutorial 5 Indexing High-Dimensional Spaces Database Support for Next Decade\222s Applications  698 S Berchtold and D Keim xiv 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


