Masato Terada 
Masayuki Ohrui Hiroaki Kikuchi 
King Mongkut\222s Institute of Technology Ladkraban 
Apriori\226Pre\036xSpan 
Hybrid Approach for Automated Detection of Botnet Coordinated Attacks 
Nur Rohman Rosyid 
yama@cs.dm.u-tokai.ac.jp kikn@cs.dm.u-tokai.ac.jp masato.terada.rd@hitachi.com 
Hitachi Incident Response Team HIRT Hitachi Ltd 890 Kashimada Kawasaki Kanagawa 212-8567 Japan 
Department of Information Science and Engineering Graduate School of Engineering Tokai University 4-1-1 Kitakaname Hiratsuka Kanagawa 259-1292 Japan 
Chalongkrung Road Ladkrabang Bangkok 10520 Thailand 
nrohmanr@ugm.ac.id 
227This paper aims to detect features of coordinated attacks by applying data mining techniques Apriori and Pre\036xSpan to the CCC DATAset 2008-2010 which consists of the captured packets data and the downloading logs Data mining algorithms allow us to automate detecting characteristics from large amount of data which the conventional heuristics could not apply Apriori achives high recall but with false positive while Pre\036xSpan has high precision but low recall Hence we propose hybriding these algorithms Our analysis shows the change in behavior of malware over the past 3 years 
Abstract 
I I NTRODUCTION Malware has been improved in recent years For example many variants of malware are used for infection using multiple download servers controlled by some This avoids researchers from tracing the source of malware developers In particular an advanced technique refereed as 
with multiple servers makes detection of malwares to be extremely dif\336cult Moreover in recent years 322Gumblar\323 and other Webbased malware newly introduced an attack called 
the botnet coordinated attacks 
driveby-download 
 and can be used to detect the association rule of the malware for coordinated attacks It w as designed to detect signi\336cant correlations 
which involved many web servers to make victim hosts downloading malware resulting increase of the damage It is almost impossible to manually trace the path of downloads because of the quantities and kinds of packets used to the drive-by-download attack Instead we need to use an algorithm of data mining for analysis There are two major data mining technique for extracting a valuable features of the malware from downloading logs 321 
 The 
Apriori 
Apriori 
Pre\036xSpan 
and 
in 
deals with 
of set of items for extracting rules of items with high support a fraction of the subset of items The support is useful feature for detecting all possible coordinated behaviors among servers However since is equivalent to one of  The detected coordinated 
and then 
002 003 003 002 
Apriori Apriori 
without considering the order of events it has high false positive ratio For instance a sequence of events 
subset of downloading events 
contain some false coordinations that two independent servers happened to work at almost same time by chance Hence its con\336dence is not so high While considers the that was ignored in  Hence it is expected to have higher accuracy than  we can improve accuracy of the association rules considering time series of downloading 
patterns in 
 However 
does not evaluate the support of rule Therefore using sequential patterns mining in 
Apriori Apriori Apriori 
Pre\036xSpan Pre\036xSpan Pre\036xSpan 
sequence of downloading events 
and and 
Pre\036xSpan 
 based on the dataset of actual downloading events referred as CCC DATAset 2008-2010  W e focus our analysis on the change of beha vior of malware over the past 3 years Our experimental analysis shows the investigated feature and changes in coordinated attacks Interestingly the number of malware infections has been decreasing for these 3 years This suggests us that the 
events that was the drawback of 
 In this paper we examine two data mining techniques 
 T able I sho ws summary of comparison between 
Apriori Apriori Apriori 
Pre\036xSpan 
main stream of botnet attack has been shifted from a single server to the coordinated servers with web-based drive-bydownloading malware II B UILDING B LOCKS 
Apriori is a well-known algorithm for association rule discovery due to Agrawal et al It allo ws to ef 336ciently discover useful association rules by excluding the rules 
A Apriori Algorithm 
2011 International Conference on Network-Based Information Systems 978-0-7695-4458-8/11 $26.00 © 2011 IEEE DOI 10.1109/NBiS.2011.23 92 


033\021 026 
003 003 002 002 002 002 002 005 006 007 005 005 005 006 005 006 005 006 006 007 005 006 005 006 
003 003 002 002 002 002 t 002 002 
003 003 
003 003 
007 
n n 
Pre\036xSpan 
030 
026 
for 
004 004 004 004 
n 
021\003 021\027 021\030 021\002 
023 
Post\036x 
031\030 
id 
030 032 
002 
Conf 
t\t\002\003 
005 
b\013\005\f\007\r\016\007\005\006 025\025\025\002 025\025\025\003 021 025\025\025\021 030 031 025\025\025 031 030 021 025\025\025\021 002 025\025\025\002 025\025\025\003 021 025\025\025\021 032 
002\005\006\007\b\007\t\007\005\006 032\034\005 
f\034\t f\016\035\035\013\036\006 f\016\035\035\013\036\006 
f\034\t\021 f f\034\t\021 f f\034\t\021 f 
f\016\035 
006\n 
002\002\003\b 002\002\003\b 002\002\003\004 
subsequence sequence sequence 
sequence database frequent sequential pattern Projection projection Step 1 Find 1-pattern sequence 
length 
Supp 
f 
006\003\005 
c 
004\005 
002 002 003 002 003 003 003 002 002 002 
f 
min 
034 
is of the form 
005 
004 
con\036dence Conf Pre\036xSpan Pre\036xSpan 
Association rules support 
B Pre\036xSpan Algorithm 
004\t 
003 003 004 005 004 004 004 004 005 
006 006 b 006 006 
of 
002 003 002 003 002 002 002 002 002 
Supp 
013\003 
Pre\336xSpan Agrawal et Pei et Extraction Support Con\336dence A set of items unordered B C D E 1 1 1 1 2 1 1 1 3 1 1 1 1 4 1 1 Sequence 
002 
b 
sup sup sup 
A 
002 
 
026\021 027\021  026\021  
003\004 003\004 
003\004\005 003\004\005 
004 017 n 004 024 025 024 025 020 022 002 026 026 027 026 027 026 002 033 f 026 033 026 026 033 037 037 026 027 026 027 027  027 026 027  026 027 033 033 033 
006\004\007 005\004\t 
017 004 002 003 
002 002 
004 
 In term of 
Table I T HE DIFFERENCE BETWEEN A PRIORI AND P REFIX S PAN Table II E XAMPLE OF T RANSACTION 
 The support of a sequence  2  Example 1 Given a sequence database 
002 
020\021 022 020\021 022 020\021 022 020\021 022 020\021 022 
002\002\003\b\t\t\002\003 
t\b\t\002\003 
and 
A 
is post\336x in 
and appear and  Then  such that and  The number of item in a sequence is called the and and  sequence  Sequence of 
those support and con\336dence smaller than giving minimum support and con\336dence With the minimum support we can squeeze many useless rules to be examined  to be shown out of all transactions Thus the rule of appears with probability of 100 when Sequence id is greater than or equal to the minimum support Sequential pattern mining method called such that is a set of tuples is the number of tuples in the database containing if the sequence is contained by at least  respectively 1 is pre\336x of is pre\336x of and sequence after pre\336x is post\336x if and only if 1 is pre\336x of such that  sequential patterns in 
is support 50 and con\336dence 100 In other word this rule shows with probability of 50 and be sequences of item  denoted by as a support threshold a sequence of the sequence so sequential pattern with length be sequences  For example be sequences such that can be mined by Scan database 
Proponent Association rule A B Sequencial pattern A B  C Precision Con\336dence Feature from a given set A  which is de\336ned as is a probability of the rule is satis\336ed namely a chance of is true The de\336nition is given by For instance the association rule Sequential pattern mining is a method to discover subsequence patterns in database of sequences where each sequence consists of a list of elements and each element consists of a set of items Given a user-speci\336ed minimum support threshold as a condition sequential pattern mining is to 336nd all of the frequent subsequences i.e the subsequences whose occurrence frequency in the set of sequences Table III AS EQUENCE D ATABASE 100 200 300 400 500 i.e Pre\336xprojected Sequential pattern mining was 336rstly proposed by Jien Pei Let be items  where in a database is called a in database tuples in the database i.e is called algorithm Let if and only if  and 2 there exists no longer subsequence of is its pre\336x For example projection of method in the following steps once to discover all frequent items 
003\t\005 
004 004 004 004 004 021 002 003 026 026 002 003 
003 
003 
if and only if there exist integers 
in Table II has support and con\336dence as 
C 
is is a is a is is 
TID 
is true if  i.e in Table III and user speci\336ed 
t\b\t\002\003 
n n 023 023 023 023 
n 
pattern 
002\002\003 005 
Givena positive integer 
004 004 
003 
003\004 
027 
002 
Pre\036x 
b 
003 003 003 
005 
min min 
002 
PE WO TR PE TR WO BK PE TR TS WO TS PE PE TR WO BK PE WO TR WO 
Apriori Sequence in order A is a probability of set of an association rule  
Let 
007 
93 


projected databases recall 
A De\036nition the botnets coordinated attacks B Experimental Data A Comparison between Apriori and Pre\036xSpan B Accuracy in Detection precision C Hybrid Approach of Apriori and Pre\036xSpan 
PE WO TR BK TS pattern TS PE_VIRUT.AV TROJ_BUZUS.AGB WORM_SWTYMLAI.CD TSPY_KOLABC.CH WORM_SWTYMLAI.CD BKDR_POEBOT.GN 
PE 
b\013\016\005\006 
   de\336ned as a fraction of correctly detected slots patterns in all detected slots and 
002\013\f\r\f\r\f\t\005\003 004 013 
is a pair of the pattern and support count 
In order to verify ef\336ciency of our proposed method we apply Apriori and Pre\336xSpan algorithm to the experimental data CCC DATAset 2008\3202010 The 94 independent honeypots have observed malware traf\336c at the Japanese tier-1 backbone under coordination of the CCC CCC DATAset consists of the access log of attack for 3 years during November 1 2007 until April 30 2010 The honeypots are periodically rebooted every 20 minutes We call the time interval From our observation we come up with idea of hybriding Apriori and Pre\336xSpan Firstly we apply Appriori to detect potential time slots with coordinated attacks since we have no Apriori knowledge that which malware are likely to be 
Non-Coordination Sum 315 149 464 Non-Extracted 149 464 Non-Coordination Sum 482 93 
 de\336ned as a fraction of correctly detected slots patterns in all slots with attacks in Table VIII Apriori archives high recall but with false positive Pre\336xSpan can be tuned with appropriate minimum support bound to 336lter out useless patterns 
005 006 005 006 005 006 005 006 005 006 005 006 005 006 005 006 r 
   Coordination 0 Sum Coordination 0 Sum 
time slot 
005\n 
Table VII A CCURACY IN P REFIX S PAN 
and and 
Step 2 Distribute search space Step 3 Find subsets of sequential patterns 
2 and The projected database can be distributed into the following 336ve subsets according to the 336ve pre\336xes which resulted from step 1 1 the ones having pre\336x  and 5 the ones having pre\336x These can be mined by constructing corresponding throughout this paper Observation in a day gives 72 time slots A transaction consists of malware names that are downloaded in a time slot Similarly malware downloading logs is divided in terms of time slots In out experiment we use vulnerable Windows XP as honeypot IV H YBRID A PPROACH OF A PRIORI AND P REFIX S PAN N/A N/A N/A the accuracy of Pre\336xSpan is de\336ned as fraction of detected coordinated attack patterns out of true patterns labeled as 322Ptns\323 in the table For example Apriori surely extracts all four coordinated attacks in 3rd February The Pre\336x spans detects three correct patterns missing 6 patterns out of 9 in the same day In 28th February Apriori has false detections for 7 slots The reason of false positive is that Apriori considers all possible combinations of malware without seeing the order of detection On the other hand Pre\336xSpan has relatively low false positive than Apriori though it implies high false negative For instance in 4th February it has 
The botnet has a feature that coordinated attacks of multiple servers making a victim infected by a set of malwares F or e xample T able I V s ho ws sequential infections observed the Cyber Clean Center CCC DATAset 2009 the captured packets data by 94 honeypots  in which a host is infected by three malwares as scheduled in the same way Although the these servers are assigned different IP addresses it turns out to be a correlation in the malware infections In this paper we call the multiple infections made by several servers that was reported by the Trend Micro The accurac y of Apriori is gi v en as a frequenc y of detected time slots indicated in columns labeled as 322Slots\323 out of true time slots de\336ned by manual investigation while Table VI A CCURACY IN A PRIORI 
in sequences These are 5 5 5 2 where and delved each recursively III T HE BOTNET COORDINATED ATTACKS We evaluate two automated algorithms Apriori and Pre\336xSpan in terms of accuracy in detecting malware coordinated attacks Table V shows a part of experimental result in few day early 2009 Our target coordinated attack to be detected in these algorithms is of sequence of malware Extracted N/A 315 Extracted 482 Non-Extracted 93 575 575 missing patterns with too low frequency Consequently Apriori is good at detecting possible time slot when coordinated attacks may have while Pre\336xSpan is useful for detecting exact coordinated patterns of malware We can combine these two automated approach for accurate detection of attacks Our comprehensive investigation of CCC DATAset is summarized in Table VI and VII accuracy of Apriori and Pre\336xSpan respectively Note that Apriori aims to detect coordinated time slots and Pre\336xSpan detects sequence patterns of malware Table shows that Apriori has 149 false positive slots out of 464 and no false negative and Pre\336xSpan has no false positive patterns but fails to detect 93 patterns out of 575 In summary we show two criteria 
94 


A Change in Malwares 
WORM BKDR TSPY TSPY WORM TKDR BKDR TSPY WORM TSPY BKDR WORM TSPY WORM BKDR WORM BKDR TSPY WORM TSPY BKDR BKDR TSPY WORM TSPY WORM BKDR BKDR WORM TSPY WORM TSPY BKDR 
Time True Ptns 
TCP TCP TCP TCP TCP TCP TCP TCP TCP 
is a high-ranked malware for 3 years and the 
MW 
Dst Port Rule True Table VIII R ECALL AND P RECISION 
PE_VIRUT.AV 
PE 
B Change in Coordinated Attacks 
002 002 003 002 003 002 
is the malware that begins of the coordinated attacks Also 
PE_VIRUT.AV 
124.86.***.111 47556 67.215.*.206 80 72.10.***.195 80 124.86.**.109 33258 72.10.***.195 80 67.215.*.206 80 124.86.**.109 33258 67.215.*.206 80 72.10.***.195 80 Pre\336xSpan Rule 4 9 14 Sum 315 482 575 Pre\336xSpan 
002\003\004 002\003\004 005 003 004\t\004 005 n 007\002\007 002\003\004 006\013\006 005 n 013\t\007 006\007\b 005 003 
is the most common malware family name though the number of infections is decreasing Next we focused on the IRC servers and the DNS servers used for the coordinated attacks shown in Table X and Table XI respectively Table shows unique IP addresses of servers for each slot The most common IRC server for 3 years is hub.*****.com The IRC domain was used when coordinated attacks begin with 
PE_VIRUT.AV TROJ_BUZUS.AGB WORM_SWTYMLAI.CD PE_VIRUT.AV WORM_SWTYMLAI.CD TROJ_BUZUS.AGB PE_VIRUT.AV TROJ_BUZUS.AGB WORM_SWTYMLAI.CD 
Table IV S AMPLE OF C OORDINATED A TTACKS OF M ALWARE Table V C OMPARISON BETWEEN A PRIORI AND P REFIX S PAN 
TSPY WORM BKDR 
PE UNKNOWN 
003 003 003 003 003 003 003 003 003 003 003 003 003 003 003 003 003 003 
006\007\b 006\007\b 
Source IP address Protocol Apriori Slots Ptns 4 3 3 7 4    7 5 7 3 Apriori Precision correlated to others After Apriori 336ltered out possible slots we apply Pre\336xSpan algorithms to improve accuracy For example in February 4th each of Apriori and Pre\336xSpan detects 9 patterns and 32 patterns respectively However after Apriori detects three major malwre   Similarly some DNS domains have been used for 3 years indicated as bold in Table XI Therefore we conclude that the coordinated attacks has been attempted for 3 years long 
 and 
Date 323 The extracted rule is composed of more than three kinds of malware events From Figure 1 we observe that the number of coordinated attacks is decreasing similarly as the number of malwares decreases too Our analysis of the captured packets data reveals the decrease of diversity of attacks For example The coordinated attacks were made in three different patterns in 2009  but a single pattern is attempted in 2010 Secondly we investigate how many kinds of the malware is used to perform coordinated attacks For this purpose we 
 the second 336lter of Pre\336xSpan reduces the number of false alerts from 32 to 4 patterns listed in Table V labeled as 322Pre\336xSpan\323 The results suggests that fourth patterns are the most likely sequences of malware used in a botnet In simplicity we concentrate three interested malware in this example In practical we should deal with many unrelated malware observed in the same period of time V E XPERIMENTAL R ESULT 
0:02:11 0:03:48 0:03:48 0:36:46 0:36:52 0:36:52 0:46:56 0:48:52 0:48:52 2009/02/03 2009/02/04 14 29 12 2009/02/28 14 14 464 Recall We investigated the downloading logs for 3 years in terms of change of malware Table IX shows the common malware being detected for 3 years We note that Firstly Figure 1 shows observed numbers of coordinated attacks for 2 years We use Apriori for computing the monthly average frequencies of association rules in all honeypots of 730 days For reason of reliable analysis we exclude the fault of identi\336cation of malware labeled as 322 
95 


ss.nadnad***.info ss.MEMEH***.INFO 
PE_BOBAX.AK PE_VIRUT.AV WORM_ALLAPLE.IK PE_VIRUT.XV PE_VIRUT.XZ PE_VIRUT.PAU BKDR_VANBOT.HG 
Table IX C OMMON M ALWARE N AMES O BSERVED IN 2008-2010 Table X S ERVERS O BSERVED IN 3Y EARS Table XI D OMAINS U SED FOR A TTACKS 
PE_VIRUT.AV 
b\n\n\007 b\n\n\007 b\n\n\007 
MW 
videogale***.com 
ss.ka***.com 
32 8018 45033 12 30319 19 12564 26518 28 16625 31 8424 14315 51 8885 33 7181 10749 47 9347 21 11815 6050 43 11206 24 10404 81 hub.14***.com 35 pwned30.i***.net 31 2 i 30 3 36 23 4 31 20 5 14 6 13 7 s*.com 8 8 F3B4433F 1 irc.fo***.fo 1 Num 133 proxim.ntkrn***.info 60 52 35 32 31 31 81 90 12 13 26 xx.nadna***.info 
C Consideration 
The reason why number of coordinated attacks is decreasing is that the number of downloads is decreasing as shown in Figure 4 We claim that it is an evidence that major attack method is replaced by web-based one in 3 years 
Rank Rank Rank 8 3 9 2 1 Rank IRC Domain IRC Domain 1 3 2 2 1 5 9 Rank 1 2 3 4 5 6 7 8 9 1 10 5 11 blah.swapixtr***.com 2 
b\n\n\f b\n\003\n b\n\n\f b\n\003\n b\n\n\f 
IRC Doamin FE7B03EC 
Num Num Num aaa.59***.com DNS Domain www.getm***.org applied Pre\336xSpan algorithm because it can distinguish the patterns with different infection order hopefully extract the coordinated infection patterns of all honeypots Figure 2 shows the change in the average number of kinds of malware used to attack The number of kinds of malware increases contrary to the decrease in the overall attacks in total We stress that this shows the coordinated attacks are getting more complex and advanced than before As a result the malware downloaded with HTTP GET which was used by two malware in 2008 and 2009 but was observed 336ve times in malware in 2010 Thus we conclude that the coordinated attacks is obviously complicated Finally we investigate the lifecycle of the coordinated attacks Figure 3 shows the distribution of active durations of coordinated attacks non-duplicate with three malwares In general the lifecycle of coordinated attacks is very short for 1 month from 2 weeks For example the malware that cooperates with is changing every year 
Uniq Uniq Uniq 47654 94324 46741 222207 194557 10 20 46 63 93 hub.40***.com 38 pwned28.i***.net hub.56***.com hub.63***.com hub.44***.com hub.48***.com hub.27***.com irc.foo***.com no***.org bl*.com ja**.org botz.noreta***.com 62 checkip.dyn***.org www.whatism***.org tx.mostafaaljaaf***.net tx.nadersam***.org www.whatsmyipaddr***.com 28 19 16 15 12 10 
96 


KOLABC.CH Technical Details\323 http://about-threats.trendmicro.com ArchiveGrayware.aspx?language=en KOLABC.CH 
Figure 4 Number of Downloads 2007-2010 A CKNOWLEDGEMENT We thank Mr Masashi Fujiwara at Hitachi Ltd for their useful suggestions R EFERENCES  R Agra w al T  Imielinski and A Sw ami 322Mining Association Rules between Sets of Items in Large Databases\323 Proc of ACM SIGMOD-93 pp 207-216 1993  J  Pei J  Han MA B ehzad and H Pinto 322Pre\336xSpan Mining Sequential Patterns Ef\336ciently by Pre\336x-Projected Pattern Growth\323 Proc of the 17th Int\325l Conf on Data Engineering pp 215-224 2001  M Ohrui H Kikuchiand M T erada 322Mining Association Rules Consisting of Download Servers from Distributed Honeypot Observation\323 The 13th Int\325l Conf on Network-Based Information Systems NBiS 2010 pp 541-545 2010  N R  R osyid M Ohrui H Kikuchi and P  Sooraksa M T er ada 322A Discovery of Sequential Attack Patterns of Malware in Botnets\323 The 2010 IEEE Int\325l Conf on Systems Man and Cybernetics SMC 2010 pp 2564-2570 2010  M Hatada Y  Nakatsuru M T erada and Y  Shinoda 322Dataset for Anti-Malware Research and Research Achievements Shared at the Workshop\323 IPSJ Malware Workshop 2009 MWS 2009 pp 1-8 2009 in Japanese  M Hatada Y  Nakatsuru M T erada and Y  Shinoda 322Datasets for Anti-Malware Research MWS 2010 Datasets\323 IPSJ Malware Workshop 2010 MWS 2010 pp 1-5 2010 in Japanese  K K uw abara H Kikuchi M T erada and M Fujiw ara 322Heuristics for Detecting Botnet Coordinated Attacks\323 The 4th Int\325l Workshop on Advances in Information Security WAIS 2010 pp 603-607 2010  T rend Micro Threat Enc yclopedia 323TSPY 
004 
name=TSPY 
10000 May-08 10 20000 Oct-08 
Figure 1 Number of Coordinated Attacks 2009-2010 Figure 2 Average Langth of Coordinations VI C ONCLUSIONS We have reported the characteristics and evolution of the coordinated attacks using the CCC DATAset for the past 3 years While the number of coordinated attacks decreased the number of distinct malware that used for the coordinated attacks has been increased Figure 3 Duration of Coordinated Attacks 
May-08 3 0 Jan-09 P3.7  Oct-07 Jul-08 Number of Downloads [DL/Week Date [3 years 
0 20000 30000 40000 50000 60000 Jul-08 Sep-08 Nov-08 Jan-09 Mar-09 May-08 Jul-09 Sep-09 Nov-09 jan-10 Mar-10 May-10 3.2 3.4 3.6 3.8 4 4.2 Jul-08 Sep-08 Nov-08 Jan-09 Mar-09 May-09 Jul-09 Sep-09 Nov-09 Jan-10 Mar-10 May-10 2 4 6 8 12 14 Feb-09 Mar-09 Apr-09 P3.10     P3.37    0 40000 60000 80000 100000 120000 140000 160000 Jan-08 Apr-08 Jan-09 Apr-09 Jul-09 Oct-09 Jan-10 Apr-10 
Number of Rules [Rules/Month Date [2 years  Number of Patterns [Patterns/Day Date [2 years  Frequency [Slots/Day Date [Day 
97 


are in DMCC In fact in the Bugzilla of ArgoUML the bug ID 1957 7 relates the two 036les Each label text is a few pixels too high for its component They should be positioned such that the label text is vertically aligned with the text in the labeled component In FreeBSD  We 036nd that ah-core.c and hpfs-alsubr.c are in approximate DMCC In the mailing list of FreeBSD the Message-ID 200906011106.n51B62Da020139@freefall.freebsd.org states that the two 036les are related in a lengthy the message from bugmaster  FreeBSD.org on June 1 2009 about Current problem reports In SIP  We 036nd that MuteDataSource.java and CallPeerActionMenuBar.java were changed systemically with one shift change period in 036ve years In fact These two 036les implement the same feature 8  Audio-Calls In XalanC  We 036nd that Cloneable.cpp and XLocator.cpp are in approximate DMCC In the XSLT syntax and semantic speci\036cation 9  these 036les are related A single template  can pull s tring values out of arbitrary locations in the source tree it can generate structures that are repeated according to the occurrence of elements In the following scenarios we summarise the usefulness of DMCCs reported by Macocha 1 Management of Development Teams If two classes are in approximate dephase macro co-change they should ideally be maintained by the same team of developers to minimise the risks of introducing bugs in the future The team of developers most likely possesses a wealth of unwritten knowledge about the design and implementation choices that they made for these classes which would help them to prevent introducing bugs 19  Consequently a team leader should rede\036ne the organisation of the maintenance team according to the DMCCs links among 036les so that her team does not introduce bugs because of the absence of info rmation or lack of communication among developers For example in ArgoUML when we analysed changes made in three 10 11 12 dephase macro co-changing 036les that have generated bugs we found that these changes have been made with one shift in time in their periods of change and by different developers  Thus such co-changes can not be detected by previous work Thanks to DMCCs a team leader should ensure that team who will maintain these 036les in each change period have the necessary knowledge to maintain the dependency among these 036les 2 Bug and Change Propagation Knowing that two 036les are in DMCCs implies the existence of hidden dependencies between these two 036les If these dependencies 7 http://argouml.tigris.org/issues/show bug.cgi?id=1957 8 http://www.jitsi.org/index.php/Main/Features 9 http://www.w3.org/TR/xslt 10 http://argouml.tigris.org/issues/show bug.cgi?id=1957 11 http://argouml.tigris.org/issues/show bug.cgi?id=2926 12 http://argouml.tigris.org/issues/show bug.cgi?id=4604 are not properly maintained they can introduce bugs in a program With our approach for each program studied we detected 036les in dephase macro co-changes By using external information we con\036rmed our observation and that these 036les indeed participate to bugs For example in SIP we detected seven bugs in relation with dephase macro cochanging 036les By applying the association rule approach described in 3  w e c annot 036 n d t hat t hes e 036 l es are c ochanging Thus by knowing 036les that are in DMMCs we could explain and possibly prevent bugs we plan to study in future work the bug prediction using approximate dephase macro co-changes 3 Traceability Analysis The change history represents one of sources of information available for recovering traceability links that are manually created and maintained by developers The version history may reveal hidden links that relate 036les and would be suf\036cient to attract the developers attention For example in SIP we detect traceability links between four approximate dephase macro co-changing 036les By applying the association rule approach described in we cannot 036nd that these 036les are co-changing Due to the distributed collaborative nature of open-source development version-control systems are the primary location of 036les and the primary means of coordination and archival The requirements of open-source programs are typically implied by communication among project participants and through test cases However such traces of requirements are lost in time Thus by knowing classes there are in approximate dephase macro co-change we could detect potentially traceability links between them which we plan to concretely study in future work V D ISCUSSIONS With our approach we detect 036les in MCCs or in DMCCs in four different programs belonging to different domains and with different sizes histories and programming languages However we do not detect MCCs and DMCCs with the same proportion in each program We observe that the numbers of MCCs and DMCCs found in the programs developed in Java ArgoUML and SIP are greater than the number of MCCs and DMCCs found in program developed in C or C see Table II We explain this 036nding by the fact that on the one hand the majority of FreeBSD 036les are idle and that on the other hand XalanC is the smallest program analysed Thus we also apply our approach to detect dephase macro co-changes on fewer C and C  036les than Java 036les less than 529 036les thus explaining the lower numbers of MCCs and DMCCs In future work we will conduct studies on other programs in these languages to con\036rm this observation and to assess the numbers of MCCs and DMCCs according to the programming languages A Threats to the Study Validity Some threats limit the validity of our empirical study 
331 


Construct Validity  Construct validity threats concern the relation between theory and obs ervations In this study they could be due to implementation errors They could also be due to a mistaken relation between changes in 036les We believe that this threat is mitigated by the facts that many authors discussed this relation that this relation seems rational and that the results of our analysis shows that indeed MCCs and DMCCs exist and are corroborated by external sources of information bug reports and others Actually we apply static analysis to detect MCCs and DMCCs because co-change analysis is known to be more useful when combined with static analysis 23  As previous work detected co-changes committed by the same author in a short time window relaxing these constraints may also lead to false positives The results of our empirical study show that Macocha improves precision and recall with respect to the state of the art in four different programs However we cannot claim that our approach will give similar results for any program Internal Validity  Internal validity is the validity of causal inferences in studies based on experiments The internal validity of our study is not threatened because we have not manipulate a variable the independent variable to see its effect on a second variable the dependent variable Reliability Validity  Reliability validity threats concern the possibility of replicating this study We attempted to provide all the necessary details to re-implement our approach and replicate our empirical study The change logs and the changed 036les of the four programs analysed with their pro\036les to obtain our observations are on-line at http://www.ptidej.net/downloads/experiments/wcre11b External Validity  We performed our study on four different real programs belonging to different domains and with different sizes histories programming languages Yet we cannot assert that our results and observations are generalisable to any other pr ograms and the fact that all the analysed programs are open source may reduce this generability future work includes replicating our study in other contexts and with other programs VI R ELATED W ORK The concepts of MCCs and DMCCs relate our work to that on 036le stability co-change and change propagation A File Stability Many approaches exist to group 036les based on their relative stability th roughout the software development life cycle For example Kpodjedo et al 20 propos ed t o i d ent i f y all 036les that do not change in the history of a program using an Error Tolerant Graph Matching algorithm They studied the evolution of the Mozilla class diagram by collecting 144 Mozilla snapshots over six years reverse-engineering their class diagrams and recovering traceability links between subsequent class diagrams Their approach identi\036ed evolving classes that maintain a stable structure of relations association inheritance and aggregation and thus that likely constitute the stable backbone of Mozilla As other example UMLDiff 11 compares and d etects the differences between the contents of two object-oriented program versions A fact extractor parses each version to extract models of their design Next a heuristic-differencing algorithm UMLDiff extracts the history of the program evolution in terms of the additions removals moves renamings and signature-changes of design entities such as packages classes interfaces and their 036elds and methods UMLDiff then assigns a stability to each class short-lived classes that exist only in a few versions of the program and then disappear idle classes that rarely undergo changes after their introduction in the program and active classes that keep being modi\036ed over their whole lifespan The Error Tolerant Graph Matching algorithm and UMLDiff take few hours to analyse 036le stability for the four programs analysed in this paper because they require parsing and comparing AST-like representations of the programs before performing their analyses Macocha computes stability in few minutes using the change periods of a program which depend on how the developers of the program organise their work and group changes through the life cycle of the program B Co-changing Files Ying et al 2 a nd Zi mmermann et al 3 a p p lied a sso ciation rules to identify co-changing 036les Their hypothesis is that past co-changed 036les can be used to recommend source code 036les potentially relevant to a change request An association-rule algorithm extracts frequently co-changing 036les of a transaction into sets that are regarded as change patterns to guide future changes Such algorithm uses co-change history in CVS and avoids the source code dependency parsing process However it only computes the frequency of co-changed 036les in the past and omits many other cases e.g  036les that co-change with always the same period of time between changes In Section IV we showed that approaches based on association rules cannot detect all occurrences of MCCs and any occurrences of DMCCs because by their very de\036nition they do not integrate the analysis of 036les that are maintained by different developers andor with some shift in time which could lead to missed co-changing 036les German 7 u sed t h e in f o r m atio n i n t h e CVS t o v isu a lize what 036les are changed at the same time and who are the people who tend to modify certain 036les He presented SoftChange a tool that uses a heuristic based on a sliding window algorithm to rebuild the Modi\036cation Record MRs based on 036le revisions In Softchange a 036le revision is included in a given MR if all the 036le revisions in the MR and the candidate 036le revision were created by the same author and have the same log Thus Softchange can not detect co-changed 036le maintained in the same time by 
332 


different developers Ceccarelli et al 21 and C anfora et al 10 propos ed t h e u s e of a v ect or aut o re gres s i on model  a generalisation of univariate auto-regression models to capture the evolution and the inter-dependencies between multiple time series representing changes to 036les They used the bivariate Granger causality test to identify if the changes to some 036les are useful to forecasting the changes to other 036les They concluded that the Granger test is a viable approach to change impact anal ysis and that it complements existing approaches like association rules to capture cochanges If the authors integrate the analysis of 036les that are maintained by different developers in periods of time of more than few minutes their approach could then detect typical examples of MCCs and DMCCs Antoniol et al 8 p res e nt ed an approach t o det ect s i mi larities in evolutions of 036les starting from past maintenance notwithstanding their temporal distortions They applied the LPC/Cepstrum technique which models a time evolving signal as an ordered set of coef\036cients representing the signal spectral envelope to identify in version-control systems the 036les that evolved in the same or similar ways Their approach can 036nd 036les having very similar maintenance evolution history but they did not present a tool to detect MCCs and DMCCs It used cepstral distance to assess series similarity if two cepstra series are clos e the original signals have a similar evolution in time with which we can not distinguish between the occurrences of MCCs and DMCCs C Change Propagation The development and maintenance of a program involves handling a large number of 036les These 036les are logically related to each other and a change to one 036le may imply a large number of changes to various other 036les Change propagation analyses how changes made to one 036le propagate to others Law and Rothermel 22 presented an approach for change propagation analysis based on whole-path pro\036ling Path pro\036ling is a technique to capture and represent a program dynamic control 037ow Unlike other path-pro\036ling techniques which record intraprocedural or acyclic paths whole-path pro\036ling produces a single compact description of a program control 037ow including loops iteration and inter-procedural paths Law et al s approach builds a representation of a program behavior and estimates change propagation using three dependencybased change-propagation ana lysis techniques call graphbased analysis static program slicing and dynamic program slicing Hassan and Holt 23 in v e stig ated se v e r a l h eu r i stics to predict change propagation among source code 036les They de\036ned change propagation as the changes that a 036le must undergo to ensure the consistency of the program when another 036le changed They proposed a model of change propagation and several heuristics to generate the set of 036les that must change in response to a changed 036le Zhou et al 24 pres ent e d a change propagat i o n a nal y s i s b as ed on Bayesian networks that incorporates static source code dependencies as well as different features extracted from the history of a program such as change comments and author information They used the Evolizer system that retrieves all modi\036cation reports from a CVS and uses a sliding window algorithm to group them Canfora and Cerulo 25 proposed an approach to derive the set of 036les impacted by a proposed change request A user submits a new change request to a Bugzilla database The new change request is then assigned to a developer for resolution who must understand the request and determine the 036les of the source code that will be impacted by the requested change Their approach exploits information retrieval algorithms to link the change request descriptions and the set of historical source 036le revisions impacted by similar past change requests Theses approaches detect change propagation among 036les Their change-propagation model can be used to predict future change couplings and may involve several 036les that are in MCCs or in DMCCs but they do not allow to differentiate between these two concepts All these approaches grouped change couplings created by the same author and have the same log message thus they can not detect approximate MCCs andor DMCCs Ambros et al 18 pres ented t he Ev olution R adar  a n approach to integrate and visualise module-level and 036lelevel logical couplings which is useful to answer questions about the evolution of a program the impact of changes at different levels of abstraction and the need for restructuring Beyer and Hassan 26 i nt roduced t h e e v o l u t i o n s t o ryboard a new concept for animated visualisations of historical information about the program structure and the storyboard panel which highlights structural differences between two versions of a program They also formulated guidelines for the usage of their visualisation by non-experts and to make their evaluations repeatable on other programs However Xing and Stroulia 27  r eport e d t hat t hes e visualisations are limited in their applicability because they assume a substantial interpretation effort of their users and they do not scale well they become unreadable for large systems with numerous components VII C ONCLUSION AND F UTURE W ORK We introduced the novel concepts of macro co-changes and dephase macro co-changes to describe that two 036les were changed by developers within same change periods with possible shifts in time We describe Macocha an approach to detect dephase macro co-changes using 036le pro\036les and their stability in time Macocha relates to 036le stability and co-changes We therefore performed two types of empirical studies Quantitatively we compared Macocha with UMLDiff 11 a nd an as sociation rules approach 3 b y a ppl yi ng and c ompari ng t h e results of the three approaches on four different programs 
333 


ArgoUML FreeBSD SIP and XalanC and showed that Macocha can identify the same idle/changed 036les as UMLDiff and that Macocha has a better precision and recall than the approach based on association rules Qualitatively we used external information provided by bugs reports mailing lists and requirement descriptions to show that detected MCCs and DMCCs explain real important evolution phenomena We also showed that dephase macro co-changes do exist and can help in explaining bugs managing development teams and traceability analysis We are currently 1 replicating our studies with other programs 2 performing a comprehensive study of the number of MCCs and DMCCs with varying values of t and s especially dependent on the analysed programs 3 identifying other scenarios in which dephase macro cochanges help and 4 relating MCCs and DMCCs with static analysis and external software characteristics such as change proneness Future work also includes a comparative study of the different sets computed by Macocha and associations rules with different value of con\036dence and support other than the values reported in 3  A CKNOWLEDGMENT This work has been partly funded by a FQRNT team grant the Canada Research Ch air in Software Patterns and Patterns of Software and the Tunisian Ministry of Higher Education and Scienti\036c Research We gratefully thank Massimiliano Di Penta and Daniel M German for their generous comments R EFERENCES  M  M  L ehm a n a nd L  Belady  E ds   Program evolution processes of software change  Academic Press Professional Inc 1985  A  T  T  Y ing G C Murphy  R  N g and M  C  C hu-Carroll Predicting source code changes by mining change history Transactions on Software Engineering  IEEE Computer Society Press 2004 vol 30 no 9 pp 574586 3 T  Z im m e r m ann P  W e is ger b er  S  D iehl a nd A  Z e ller  M ining version histories to guide software changes in Proceedings of the 26th International Conference on Software Engineering  IEEE Computer Society 2004 pp 563572  H  G all K  H a jek and M  J azayer i Detection of logical coupling based on product release history in Proceedings of the International Conference on Software Maintenance  IEEE Computer Society 1998 pp 190  A  M ockus  R  T  F ielding and J  D  H erbs leb T w o cas e s tudies of open source software development Apache and mozilla ACM Trans Softw Eng Methodol ACM July 2002 vol 11 pp 309 346  M  F is cher  M  P inzger  a nd H Gall Populating a releas e h is tory database from version control and bug tracking systems in Proceedings of the International Conference on Software Maintenance  IEEE Computer Society 2003 pp 23  D  M  G erm a n  A n e m p irical s t udy of 036ne-grained s oftw are m odi\036cations Empirical Softw Engg Kluwer Academic Publishers September 2006 vol 11  G  A ntoniol V  F  R ollo a nd G V e nturi L inear predicti v e coding and cepstrum coef\036cients for mining time variant information from software repositories in Proceedings of the International Workshop on Mining software repositories  ACM Press 2005 pp 15  S  B oukt i f  Y  G Gu  eh eneuc and G Antoniol Extracting changepatterns from cvs repositories in Proceedings of the 13th Working Conference on Reverse Engineering  IEEE Computer Society 2006 pp 221230  G  Canf or a M  Ceccar elli L  Cer u lo a nd M  D i P e nta U s i ng multivariate time series and association rules to detect logical change coupling An empirical study in Proceedings of the 2010 IEEE International Conference on Software Maintenance  IEEE Computer Society Press pp 110 1 Z  X i ng and E  S tr oulia  A n alyz ing the evolutionary history of the logical design of object-oriented software Transactions on Software Engineering  IEEE Computer Society Press 2005 vol 31 pp 850 868 1 L  H a tton H o w accur a tely do engineer s p r e dict s o f t w a r e m a intenance tasks Computer  IEEE Computer Society Press 2007 vol 40  V  R Bas ili and D  M  W eis s   A m ethodology for c ollecting v alid software engineering data Software  IEEE Computer Society Press 1984 vol 10 no 6 pp 728738  T  Z i m m e rm ann S Breu C  L indi g and B Livshits Mining additions of method calls in argouml in Proceedings of the International Workshop on Mining Software Repositories  ACM Press 2006  Z  X i ng and E  S tr oulia  U m ldif f  an algor ithm f or objecto r i ented design differencing in Proceedings of the 20th International Conference on Automated Software Engineering  ACM Press 2005 1 R A g r a w a l a nd R S r ikant F as t a lgor ithm s f o r m ining a s s ociation rules in large databases in Proceedings of the 20th International Conference on Very Large Data Bases  Morgan Kaufmann Publishers Inc 1994 1 A  V a n y a S  K l us ener  N  v an Rooijen and H  v an V liet Char acterizing evolutionary clusters in Proceedings of the 16th Working Conference on Reverse Engineering  IEEE Computer Society 2009  M DAm bros  M  L anza and M  L ungu V is ualizing c o-change information with the evolution radar Transactions on Software Engineering  IEEE Computer Society Press 2009 vol 35 no 5 pp 720735 1 B W  Rebecca W i r f s B r o ck and L  W iener  E d s   Designing ObjectOriented Software  Prentice Hall 1990  S  K podjedo F  Ricca P  G a linier  and G Antoniol Recovering the evolution stable part using an ecgm algorithm Is there a tunnel in mozilla in CSMR  2009 pp 179188 2 M  Ceccar elli L  Cer u lo G  C anf o r a  a nd M  D i P e nta  A n eclectic approach for change impact analysis in Proceedings of the 32nd International Conference on Software Engineering ACMPress 2010 pp 163166  J  L a w a nd G Rotherm e l W hole p rogram path-bas ed dynam i c impact analysis in Proceedings of the 25th International Conference on Software Engineering  IEEE Computer Society 2003 pp 308 318  A E  Ha ssa n a nd R  C  Hol t   P re dicting change propagation in software systems in Proceedings of the 20th IEEE International Conference on Software Maintenance  IEEE Computer Society 2004 pp 284293  Y  Z h ou M  W  ursch E Giger H C Gall and J L  u A bayesian network based approach for change coupling prediction in Proceedings of the 15th Working Conference on Reverse Engineering  IEEE Computer Society 2008 pp 2736  G Canfora a nd L  Cerulo  Im pact analys is by m i ning s o ftw a re and change request repositories in Proceedings of the 11th IEEE International Software Metrics Symposium  IEEE Computer Society Press 2005 p 29  D  Be yer a nd A  E  H a s s an  A n im ated vis u alization o f s of tw ar e history using evolution storyboards in Proceedings of the 13 th Working Conference on Reverse Engineering  IEEE Computer Society Press 2006  Z  Xing and E  S troulia  Bottom up des i gn e v olution c oncern discovery and analysis Tech Rep 2007 
334 


relate approximately the 34% of the events, which enables the forecast of new events that are the same type as those contained in the rules. In a similar way to the presented case we analyzed 62 different measurement points with a total of 6300 events occurred in the distribution network over 2 years TABLE VI ASSOCIATION RULES AND THEIR CONFIDENCE rule conf  1]? [1? 5] 0.750 9]? [9? 9] 0.5294 139 Fig. 2. Complete sequence and their frequent serial episodes TABLE VII COMMON RULES FOUND IN DIFFERENT MEASUREMENT POINTS rule number of measurement points 1] ? [1? 1] 16 1] ? [1? 5] 10 6] ? [6? 9] 8 9] ? [9? 9] 5 14] ? [14? 15] 11 15] ? [15? 15] 19 1? 1] ? [1? 1? 1] 18 The rules commonly found in most of the measurement points are shown in Table VII. The parameters used to extract the association rules are win = 5, min fr = 0.15 and min conf = 0.5. The summary showed in Table VII indicates that the ranges of occurrence of events in each measurement point presents different behaviours and, therefore, it is necessary to examine separately the sequences of each measurement point for a successful development of a valid prediction. The results show that it is possible to build rules to relate time spans between successive events which give an estimate of time lag for the appearance of a new event. Although it is not possible to relate all the events of the sequence, the knowledge of network behavior is improved, and takes advantage of power system information available in databases. Finally, different values of win min fr and min conf were tested to find frequent episodes 


and association rules. The result show that increasing win larger episodes can be found, while increasing min fr and min conf the amount of frequent episodes and rules will be minor, since the requirement for selection increases Similarly, it was found that using WINEPI methodology, the frequency of an episode is proportional to the width of the window. The appropriate values of min conf and min fr are defined taking into account criteria such as sequence length, type events frequency and the confidence threshold that the user wishes to assume. It is advisable to test different values of min conf and min fr V. CONCLUSIONS AND FUTURE WORKS The proposed methodology suggests a new approach for failure analysis in power distribution system. The aim of the solution is the forecast of faults, which is analyzed in the domain of temporal data mining and, in particular, the discovery of patterns starting from the registers of events The proposed solution is able to extract useful information about the behaviour and evolution of the faults in the electrical system, as a first step in the exploitation of event sequences recorded in power distribution systems, for the prediction of future failures Future work should continue with the search of episodes in sequences of events to discovery patterns related with failures in components and to exploit other information contained in the events recorded besides the elapse times between events e.g., the depth of voltage sags during the fault, etc. Next use this information from a predicting point of view, to anticipate future failures VI. ACKNOWLEDGMENTS This research has been developed within the eXiT, Control Engineering and Intelligent Systems, research group of the Institute of Informatics and Applications \(University of Girona Decision Support Systems \(AEDS with a consolidated distinction \(2009 SGR 523 2012 period in the Consolidated Research Group \(SGR project of the Generalitat de Catalunya The work has been supported by the research project Moniorizacion Inteligente de la Calidad de la Energ?a Electrica DPI2009-07891 vacion \(Spain 


scholarship \(2009FI-A00452 per a Universitats i Recerca del Departament dInnovacio Universitats i Empresa of the Generalitat de Catalunya and also the European Social Fund REFERENCES 1] Math H.J Bollen. Understanding power quality problems, voltage sags and interruptions. IEEE press series on power engineering, 1999 2] Carl L. Benner and B. Don Russell. Distribution incipient faults and abnormal events: Case studies from recorded field data. In 57th Annual Conference for Protective Relay Engineers, 2004 3] K. C. P Wong, H. M. Ryan, and J. Tindle. Power system fault prediction using artificial neural networks. In International Conference on Neural Information Processing, 1996 4] Bach Quoc Khanh, Dong-Jun Won, and Seung-Il Moon. Fault distribution modeling using stochastic bivariate models for prediction of voltage sag in distribution systems. IEEE Transactions on Power Delivery, 23:347354, 2008 5] J. A. Martinez-Velasco and J. Martin-Arnedo. Stochastic prediction of voltage dips using an electromagnetic transient program. In 14th PSCC, Sevilla, Spain, 2002 6] Heikki Mannila, Hannu Toitoven, and A. Inkeri Verkamo. Discovery of frequent episodes in event sequences. Data Mining and Knowledge Discovery, 1:259289, 1997 7] Rakesh Agrawal and Ramakrishnan Srikant. Fast algorithms for mining association rules. In Int. Conf. Very Large Data Bases VLDB94 8] Charles J. Kim, Lee Seung-Jae, and Kang Sang-Hee. Evaluation of feeder monitoring parameters for incipient fault detection using laplace trend statistic. IEEE Transactions on Industry Applications, 40:1718 1724, 2004 9] Z.W. Liao, G. Wang, Q.H. Ye, and Y.M. Sun. A novel fault diagnosis system for transmission line system based on sequence of events. In 6th International Conference on Advances in Power System Control Operation and Management APSCOM 2003, pages 440445, 2003 140 10] Srivatsan Laxman and P. Shanti Sastry. A survey of temporal data mining. SADHANA Academy Proceedings in Engineering Sciences 31:173198, 2006 11] Rakesh Agrawal and Ramakrishnan Srikant. Mining sequential patterns. In Int. Conf. Data Engineering \(ICDE95 12] Srivatsan Laxman, P. Shanti Sastry, and K. P. Unnikrishnan. Fast algorithms for frequent episode discovery in event sequences. Technical 


report, CL-2004-04/MSR, GM R&D Center, Warren, 2004 13] K. P. Unnikrishnan, Debprakash Patnaik, and P.S. Sastry. Discovering patterns in multi-neuronal spike trains using the frequent episode method. Technical report, General Motors R&D Center, Warren, 2007 14] Kuo-Yu Huang and Chia-Hui Chang. Efficient mining of frequent episodes from complex sequences. Information Systems, 33:96114 2008 15] Gregory Piatetsky-Shapiro and William Frawley. Knowledge Discovery in Databases. AAAI/MIT Press, 1991 141 


