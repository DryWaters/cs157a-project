Application Research on Positive and Negative Association Rules Oriented Software Defects  Yanguang Shen School of Information & Electronic Engineering Hebei University of Engineering Handan, China shenyanguang@yahoo.com Jie Liu School of Information & Electronic Engineering Hebei University of Engineering Handan, China jie5123261@sohu.com Fangping Li Department of Computer Science Handan Polytechnic College Handan, China liujie0905@139.com   Abstract 227Software defects are the key factors to evaluate the 
dependable software. This paper analyzes the attributes of software defects, and applies positive and negative association rules method to the research of software defects. This method can not only overcome the weak point of the traditional association rules method that can only mine the explicit rules but also output some more meaningful rules of relationship of attributes. We extract the exterior relationship among the attributes of software defects, and fully mine the rules of interattributes. Through the application of the "Design and Implementation of Mining Linkage Management System of Coal Mine", the experimental results demonstrate that our mined rules have the advantages of less quantity, higher 
quality, fewer errors and conflicts Keywords-software defects; data mining; association rules positive and negative association rules; correlation I   I NTRODUCTION  In the process of software development, the accumulation of software defects is the main reason of dependable software target. At present, the analysis of defects data is relatively weak in general, it generally provides some simple statistical function of the defect attributes, and users have to use some other analytical methods to analyze the defect data These methods mainly include regression analysis, Bayesian network, and neural network etc. However, these methods 
can n o t f u lly m i n e th e  d e f e cts d a ta  th at c o n t ain v a lu a b l e  information, and can even induce misleading analysis results What's more, as a result of analytical methods, management technique and application fi elds are different; defects quantity and the relationship among attributes are different Therefore, choosing different methods maybe lead very different analysis results In view of the above issues, the paper studies thoroughly the analytical method and technology of software defects\222 attributes based on the positive and negative association rules. This method can make up deficiencies in the study of the relation of defects\222 attributes. Positive and negative 
association rules could mine a lot of associated realizations and derivative realizations of data item sets. It could find the relationship of the defects\222 attribute though association rules method [1 H o w e v e r, th e i n cre a sin g in th e n u m b e r o f  defects will certainly result in a sharp rise of the search space of data mining algorithm and the possibility of blind discoveries. So we must attempt to use domain knowledge to mine relationship and rules of non-frequent defects\222 attribute sets, design the more efficient mining method in order to improve the efficiency of mining rules. Therefore, the study of positive and negative association rules method is very significant II  
P OSITIVE AND NEGATIVE ASSOCIATION RULES  A  Algorithm of Positive and Negative Association Rules Traditional association rule algorithm is only used to discover positive association rules, that is, it only can discover the explicit model with high frequency and strong correlation, such as A B. In fact in the database, there are still a lot of implicit model which can not be found by current mining techniques, such as A 254 B 254 A B 254 A 254 B[4  th es e im p o rt an t im p l i c it m o d e ls a r e n e g a t i v e  
association rules which having the properties of low frequency and strong correlation. These implicit rules tell us data items which rarely occur together, but they have very strong correlation, including valuable information Compared to positive association rules, negative association rules can expand the state of the affair item sets; they can not only mine the relationship between explicit attributes, but also be able to mine the relationship between explicit and implicit attributes B  The Calculation of Correlation of Positive and Negative Association Rules Negative association rules can find the problems which the positive association rules can't, but the contradictory 
association rules might be induced in the process of mining The reason is the existence of the negative correlation contained between the item sets [2 th e o t h e r p o ssi b i lity i s  independent between item sets, but the application of statistical correlation can effectively solve this problem. The positive and negative association rules is defined in the literature [3  in w h ich th e c o rr ela t i o n  o f item sets A an d  B was expressed as follows: corrA,B=s\(A B\/s\(A\\(B Three possible measurements of corrA,B are as the follows If corrA,B>1, Then A and B are positive correlation 978-1-4244-4507-3/09/$25.00 \2512009 IEEE 


If corrA,B=1, Then A and B are independent of each other If corrA,B<1, Then A and B are negative correlation It is easy to show that the correlation of the four association rules between A and B have such relationship as follows: If corrA,B>1, then corrA  B<1, corr  A,B<1,corr  A   B>1, the reverse is also true. Therefore, when mining the positive and negative association rules, the appearance of contradiction rules will be avoided as long as the correlation of item sets is judged. That is, When corrA,B>1,it is  just need to mine the rules of A B and  A  B; when corrA,B<1, it is  just need mine the rules of  A B and A  B; when corrA,B=1, no rules need to mine After judging the correlation of item sets, all kinds of rules between item sets will be mined according to the formula of the support and confidence of positive and negative association rules C  The Calculation of Support and Confidence of Positive and Negative Association Rule Support and confidence are two important measurable indicators in the positive and negative association rules. The definition is as follows Let I 12  m ii i be a set of items, let D be a transaction data set, where each transaction T is a set of items with T I, A transaction T is said to contain A, a set of items in I, if A T. An association rule is an implication of the form "A B" where A I, B I and A B=F. The rule A B has a support supp in the transaction set D if s% of the transactions in D contains A B.  The support of the rule is the probability that A and B hold together among all the possible presented cases. It shows that supp\(A B\=s.count\(A B\/|D|=|{T|A B T,T D}|/|D That s.count \(A B\ntains the number of A B, |D| the panel said that the number of  D It is said that the rule A B holds in the transaction set D with confidence c if c% of transactions in D that contain A also contain B. The confidence of the rule is the conditional probability that the consequent B is true under the condition of the antecedent A conf\(A B\=supp\(A B\/supp\(A\=s.count\(A B\/s.count\(A\ | {T|A B T, T D} |/| {T|A T, T D Given D, The concourse of item sets satisfy minsupport which are given by users is frequent item sets. The problems of association rules are finding the association rules which satisfy the minconf that are given by users form frequent item sets Negative association rules contains item sets does not exist \(non-existing-items, for example  A  B\, Calculating their support and confidence directly is more difficult Theorem 1: if A, B I, A B=F, then   supp\(A\=1-supp\(¬A   supp\(A B\= supp\(A\ supp\(A B   supp\(¬A B\- supp\(A B   supp\(¬A B\ 1-supp\(A\\(B\+ supp\(A B Corollary 1: if A, B, T, A B=F, then   conf\(A B\=\(supp\(A\-supp\(A B\\ supp\(A\=1 conf\(A B   conf\(¬A supp\(B\-supp\(A B\\ \(1-supp\(A   conf\(¬A B\=\(1-supp\(A\p\(B\+supp\(A B\\/\(1- supp\(A\=1- conf\(¬A B Corollary 1 is used to calculate the confidence of negative association rules [4   III  THE APPLICATION OF POSITIVE AND NEGATIVE ASSOCIATION RULES IN THE SOFTWARE DEFECTS ANALYSIS  A  Unary Data and Multiple Data Unary data analysis is analyzing one defect attributes Multiple data analysis is analyzing two or more defects attributes Unary data analysis is only to get one attribute distribution of software defects, but the gotten information is limited, and it is generally expressed with histogram, pie chart and other visualization tools. But the distribution of multiple-defect attribute values is usually better reflect the software process and technical problems than the distribution of a single defect attribute values in the analysis of software defects [5  Th e r ef o r e  th e  d i stri b u ti o n o f  m u ltip l e d ef ec t  attribute values and the association relationship among the attributes are often revealed by the analysis of multiple data B  The Application of Positive and Negative Association Rules in Multiple Data Analysis Characteristics of software defects include the following eight attributes: activities of defects finding, defects consequence, defects trigger, defects target, defects lifecycle defects origin, defects type and defects determiner [6   H e re  we use data mining method to analyze the defects in "Design and Implementation of Mining Linkage Management System of Coal Mine" which been developed  by ourselves; we have chosen three attributes form the characteristics of software defects ,that is," activities of defects finding \(Activity defects origin \(Origin\" and "defects type \(Type\". Their meaning and value are shown in table I [7   We obtain part database D of defects as shown in table II Let minimum support minsupport = 20%, the smallest confidence minconf = 40%, we mine rules to database D respectively through Apriori algorithm and positive and negative association rules method 1  Mining rules from database D  through Apriori We can obtain candidate item sets from database D of defects through Apiori algorithm. Item sets is shown in table III and table IV. The steps are as follows: Firstly, we simply statistic analyze the frequency of each element in item sets and identify item sets whose minimum support is not less than 20%, here we get item sets D1. Secondly, we repeat the first step and obtain the second candidate item sets D2 As shown in table IV, these rules are mined by the algorithm of positive association rules, such as the third rule indicates that large numbers of activities of defects finding  originate from the encoding phase. The twenty-fourth rule indicates that more algorithm defects are introduced in the encoding stage, etc 


TABLE I  D EFECTS ATTRIBUTE  Attribute name Meaning Value Symbol Activity The activities in which defects  have been detected Requirement Inspection Design Review Testing User Operation A B C D Origin The causes of defects, which can be traced back to the earliest of the problem of development activities Requirement-Analysis Design Code Maintenance E F G H Type The type of defects of software Function Interface Assign/Init Arithmetic Data Structure Timing UI I J K L M N O TABLE II  THE DATABASE D OF D EFECTS  Defects Service Serial Number Item sets 1 2 3 4 5 6 7 8 9 10 CGL CGJL CG CGIJ IJL CFG FIL FJ FGJ CFGJL TABLE III  THE CANDIDATE SETS D1 Serial number Item sets Support 1 2 3 4 5 6 C F G I J L 0.6 0.5 0.7 0.3 0.6 0.5 2  Further extracting rules from item sets L2 through positive and negative association rules On the basis of the item sets D2 in table IV, we use the formula of the correlation of positive and negative association rules to calculate as follows   For the item sets GL corrG,L=s\(G L\/s\(G\\(L\0.3/0.6*0.3=0.86<1 This indicates GL is a negative correlation, so mining rules only have G L and ¬G L, Then the confidence of positive and negative association rules can be calculated as: conf\(G L\1>minconf conf\(¬G L\= 0.67>minconf, Therefore G L and G L are all effective negative association rules   For the item sets CG corrC,G=s\(C G\/s\(C\\(G\0.2/0.6*0.7=1.43>1 This indicates CG is a positive correlation, so mining rules only have C G and ¬C G. Then the confidence of positive and negative association rules can be calculated as: conf\(C G\1>minconf conf\(¬C G\=0.75> minconf, Therefore, C G  is an effective positive association rules and ¬C G is an effective negative association rules   For the item sets JI corrJ,I=s\(J I\/s\(J\s\(I\=0.6/0.6*0.7=1.11>1.This indicates JI is a positive correlation, so mining rules only have J I and ¬J I ,  Then the confidence of positive and negative association rules can be calculated:conf\(J I\=0.33<minconf,conf\(¬J I 0.75>minconf. Therefore, J I is invalid association rules and ¬J I  is an effective negative association rules   For the item sets JL, corrJ,L=s\(J L\/s\(J\\(L 1.Therefore, JL notes independent of each other, no rules Other item sets can be discussed in the same way TABLE IV  THE CANDIDATE SETS D2 Serial number Item sets Support Confidence 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 CF CG CJ CL FC FG FJ FL GC GF GJ GL IJ IL JC JF JG JI JL LC LF LJ LI LG 0.2 0.6 0.3 0.3 0.2 0.3 0.3 0.2 0.6 0.3 0.4 0.3 0.2 0.2 0.3 0.3 0.4 0.2 0.3 0.3 0.2 0.3 0.2 0.3 0.33 1.00 0.50 0.50 0.40 0.60 0.60 0.40 0.88 0.43 0.58 0.43 0.67 0.67 0.50 0.50 0.67 0.33 0.60 0.60 0.40 0.60 0.40 0.60 3  The experimental results   From the above analysis we can see that the defects rules sets which been mined through Apiori association rules have fraudulence to some extent such as for item sets JL, support H 3 A 2 30%>minsupport=20%,confidence\(H 3 A 2 6 0%>minconf=40%. Here the minsupport and minconf are all meeting. However, if we calculate through positive and negative association rules, we will find the JL item sets are independent of each other, do not have rule, that is, the type of interface defects and the type of algorithm defects are independent of each other   Table V shows the number sets of defects rules that calculated through the Apiori and positive and negative association rules. We can see that the number of positive association rules calculated through positive and negative association rules 


algorithm is less than Apiori algorithm, it shows that a number of conflicting rules are removed, but also mined a lot of negative association rules, which indicates the effectiveness of positive and negative association rules TABLE V  C OMPARISON THE NUMBER OF SOFTWARE DEFECTS RULES  Algorithm Positive association rules Negative association rules Independent attributes Total Apiori 24 24 Positive and negative association rules 11 39 6 56 IV  C ONCLUSIONS  In this paper, we have discussed positive and negative association rules method based on positive association rules and it has been applied innovatively in analyzing the relationship between the attributes of software defects Compared with positive association rules, positive and negative association rules can expand the affairs item sets This method can enhance the credibility of the software because it can mine not only the relationship of frequent defects attributes sets, but also mine the rules and data which contain valuable information of non-frequent defects attributes sets. Through the analysis of test results in "Design and Implementation of Mining Linkage Management System of Coal Mine ", we have extracted the exterior relationship among the attributes of software defects, and fully mined the rules of inter-attributes. Compared with the general association rules, this method has the advantage of excluding some conflicting rules of defects and improving the accuracy R EFERENCES  1  Menzies T,Lutz R,Mikulski C.Better Analysis of Defect Data at NASA Proceedings of SEKE2003, the Fifteenth International Conference on Software Engineering and Knowledge Engineering.San Francisco,July 2003 2  Han J,Kamber M,Data mining: Concepts and techniques  S an Francisco: Morgan Kaufmann Publishers,2000.149-184 3  Brin S,Motwani R,Silverstein C.Beyond market:Generalizing association rules to correlations[A r o c e s s i ng o f the A C M S I G M O D  Conference 1997  N ew York  A C M Pres s  1 997 2 65 276 4  Dong Xiangjun,Wang Shujing.et.Study on Negative Association Rules. Transactions of Beijing Institute of Technology.2003.Vol.24 NO.11 5  Dalal S,Hamada M,Matthews P,et al.Using Defect Patterns to Uncover Opportunities for Improvement Proceedings of International Conference on Applications of Software Measurement\(ASM\.San Jose,CA.,February 1999:15-19 6  Yin Xiangle,Ma Li,et.Research of software defects classification.Computer Engineering and Design.2008.10 Vol.29 NO.19 7  Liu Hai,Hao Kegang,Method of Software Defect Data Analysis and its Implementation. Computer science. 2008 Vol.35 NO.8   


TABLE III  S IMULATION P ARAMETERS  Parameters for Flash Memory Space  Parameters for Modified FAST scheme  NAND Flash Memory Size 512 Mbytes Space for data blocks 192 ~ 414 MB Page Size 512 bytes Space for random log blocks 64 MB Writing speed 210.5 011  Space for prefetch sequential\ log blocks 64 ~ 128 MB Reading speed 200 011  Erasing speed 1.2 sec go to y of the data, and the other \(100x go to \(100y  of the data and thus 50:50 means no locality. Moreover we have conformed to the Zipfs law to generate the block reference within a particular file. The Zipf's law states that the product of rank number and frequency make up a constant; that is, while only a few blocks within a file are used very often, many or most are used rarely B  Experimental results In our experiment, we have evaluated our proposed method in three aspects. First, it is necessary to determine optimal amounts of training data to develop sequential patterns. Second, in case of using synthetic data, we will investigate how much the locality of reference affects the system performance. Lastly, we need to check the effect which results from adjusting the threshold of pattern weight In principle, we need to check effect which results from changing the size of data block, where the data block means a unit of data transfer; a file consists of a set of data blocks In case of MPEG data, a data block corresponds to GOP Group of Pictures\, whose size is not fixed. However, we have found that the processing time is not greatly dependent upon the size of data block, which implies that our proposed method does not need to have any regard for some special issues depending upon a particular file format 1  Effect of changes in the size of training data We expect that extracted patterns can get more salient as the size of training data get larger. For example, given an extracted pattern F 2 001\027 F 1 for 2,000 training files, one of its related patterns may be F 2 001\027 F 3 001\027 F 5 001\027 F 1 for 3,000 training files This section describes how much the size of training data can affect on performance of prefetching. In general, when developing a prediction model with machine learning algorithms, a larger training data always does not result in developing a better model [6  Fig. 3 shows changes in the processing time as the training data gets larger in size in case of using SYN and UCC data. In this figure, we can see that in order for prefetching to reduce the overall process time, the size of training data had better be greater than some threshold, but excessive amounts of training data causes an increase in process time; this is because excessive amounts of many training data cause pattern over-fitting which leads to prefetch too many files onto flash memory space. In our experiment, the optimal size of training data is 3,500 and 40,000 I/O requests for SYN and UCC data, respectively 2  Effect of changes in locality with the synthetic data This section describes how much the degree of reference of locality can influence on performance of prefetching for SYN data. In our experiment, we have generated the SYN data with three kinds of locality of reference; 2:8, 3:7, 4:6 Fig. 4 shows the processing time according to changes in reference of locality, it shows that our proposed method outperforms the conventional one for all types of locality and 2:8 of locality shows the best performance. On the whole, the processing time decreases as the degree of locality increases  3  Effect of changes in threshold of pattern weight As stated before, lower \(or higher\ threshold value of pattern weight can incur excessive prefetching operations. It is thus important to find the optimal threshold for the best performance   a\In case of SYN data  b\In case of SYN data Figure 3.Changes of processing time from varying the size of training data   Figure 4. Changes of processing time from varying reference of localit y 
284 


Fig. 5 shows the execution time according to changes in the threshold value of weight when using SYN and UCC data. From this figure, we can see that the execution time is greatly influenced by the threshold values. In contrast, in case of file-level prefetching, the change in threshold value of weight does not give a great effect on the execution time For both SYN and UCC data, when the threshold value is set to 2, the proposed method shows the shortest execution time In case of less than 3 \(i.e., prefetching all \(or most of\e objects belonging to the generated sequential patterns excessive prefetching causes a big increase in the execution time. Conversely, as the threshold value becomes higher than the optimal value, the favorable effect from prefetching decreases gradually V  S UMMARY  In this paper, we have proposed an intelligent two-level prefetching method in which sequential pattern mining is incorporated into the FAST-aware hybrid flash-disk storage system. In our work, the hybrid storage uses the flash memory as a cache space, and we focus on prefetching file or block\objects onto prefetch \(or sequential\og blocks to be accessed in the near future through sequential pattern mining. To achieve the best performance, it is very important to determine optimal values in terms of threshold of pattern weight and the size of training data. To be noted is that the proposed method works at the level of file and block objects   b\In case of SYN data   b\In case of SYN data Figure 5: Effect of changes in weight threshold In contrast, previous studies focused on prefetching block-level objects [1 i t h si m p l e he u r i s t i c s e v e n t h o ugh they cannot be applied to hybrid storage systems. On the whole, the proposed two-level prefetching is more effective than file-level prefetching in UCC and the synthetic data Empirical results show that in terms of the execution time the proposed method improves the I/O performance of hybrid storage by about 16% and 18% for UCC and SYN data, respectively, compared to the Top-N prefetching under the FAST scheme. We submit that two-level prefetching can help to significantly enhance the future commercial hybrid storage products. In the future, we plan to study a way of semi-automatically adjusting several parameters such as the weight threshold and the size of training data for sequential pattern mining A CKNOWLEDGMENT  This work was supported by the Basic Research Program through the Korea Science and Engineering Foundation funded by the Ministry of Education, Science and Technology \(Grant Number: R01-2007-000-206490  R EFERENCES  1  Hybrid drive: Wikipedia, http://en.wikipedia.org/wiki/Hybrid_drive 2  S. L. Min and E. H Nam, Current trends in flash memory technology: invited paper, Proceedings of the 2006 conference on Asia South Pacific design automation, 2006, pp. 332-333 3  Y.H. Bae, Design Technique of High Performance Flash Memory SSD \(Solid State Disk\, Journal of Korean Institute of Information Scientists and Engineers, Vol. 25, No. 6, 2007, pp.18-28 4  E. Gal and S. Toledo, Algorithms and Data Structures for Flash Memories, ACM Computing Surveys, Vol. 37, No. 2,  2005, pp.138 163 5  H.J. Kim, and S.G. Lee, An Effective Flash Memory Manager for Reliable Flash Memory Management, IEICE Transactions on Information and Systems, Vol. 85, No. 6, 2002, pp.950-964 6  S. W. Lee, D. J. Park, T. S. Ching, D. H. Lee, S. W. Park, and H. J Song, A Log Buffer-Based Flash Translation Layer Using FullyAssociative Sector Translation, ACM Transactions on Embedded Computing Systems, Vol. 6, No. 3, 2007, pp.18-44 7  R. Agrawal, R. Srikant, Mining sequential patterns, Proceedings of the 11th International Conference on Data Engineering \(ICDE'95 1995, pp.3-14 8  P.N. Tan, M. Steinbach, and V. Kumar, Introduction to Data Mining Addison-Wesley, 2006 9  E.P. Markatos and C. Chronaki, A Top-10 Approach to Prefetching on the Web, Proceedings of the INET 98 Conference, 1998   C.I. Ezeife, Y. Lu, and Y. Liu, PLWAP sequential mining: open source code, Proceedings of the 1st international workshop on open source data mining \(OSDM05\, 2005, pp.26-35   M.L. Chiang, Paul C.H. Lee, and R.C. Chang, Using data clustering to improve cleaning performance for flash memory, Software Practice and Experience, Vol.29, No.3, 1999, pp.267-290   Z. Li, Z. Chen, S. M. Srinivasan and Y. Zhou, C-Miner: Mining Block Correlations in Storage Systems, Proceedings of the 3rd USENIX Conference on File and Storage Technology \(FAST04 2004, pp.173-186  
285 


composition debugging model, are discussed in details. After the decision table is constru cted through collecting WSDL interface information, composition process specification, and testing execution information rule extraction algorithm in rough set reasoning is used to find the rules associated with system or service failures. In a ddition, the feasibility and effectiveness of our approach are validated by two examples and experiments. At present, we onl y consider the debugging problem for the common Web service system, the fault location for semantic Web services should be further explored in the on-going research A CKNOWLEDGMENT  This work was supported in part by the National Natural Science Foundation of China \(NSFC\under Grant No 60803046, China Postdoctoral Science Foundation under Grant No.2007041 0946, the Science Fo undation of Jiangxi Educational Committee under Grant No. GJJ10433, and the Youth Foundation of Jiangxi University of Finance and Economics. The author is grateful to Qiong Zhang for her warm-heart help, and thanks the anonymous reviewers for their insightful comments R EFERENCES  1 W. Han  Integrating Peer-to-Peer into Web Services Master thesis University of Saskatchewan, 2006  W3C Web S e rvi ces Activit y avai lable fro m  http://www w3.org 2002/ws/, accessed on July 2010  W o rld W i de W e b Cons ortiu m  W3C Web Services Description Language \(WSDL\ Version 1.1 March, 2001. Available at http://www. w3.org/TR/wsdl  W o r l d W i de W e b Consor tiu m  W 3C  Simple Object Access Protocol Version 1.2 April 2007, available at http://www.w3.org/TR/soap12  OASIS WSBP EL Technical Co mm i ttee  Web Services Business Process Execution Language, Version 2.0 available at http://docs oasis-open.org/wsbpel/2.0 /wsbpelv2.0.pdf  M. Aoya m a S Wee rawa rana, H Maruya m a and et al W eb  Services Engineering: Promises and Challenges Proc. of ICSE02  ACM Press, New York 2002, pp. 647-648  C. Liu L. Fei X Yan, and et al., Statistical Debuggin g: A Hypothesis Testing-Based Approach IEEE Transactions on Software Engineering 2006, vol. 32, no. 10, pp.1-17  W  Dickinson, D. Leon, and A Podgurski, Finding Failures by Cluster Analysis of Execution Profiles Proc. of ICSE01 2001, pp 339-348  Z. Li and Y Zhou, PRM iner: Automatically Extracting Implicit Programming Rules and Detecting Violations in Large Software Code Proc. of ESEC/ FSE05 2005, pp. 306-315  M. Renieris, and S. P Reiss, Fault LocalizationWith Nearest Neighbor Queries Proc. of ASE03 2003, pp. 30-39  C. Liu, Z Lian and J. Han, How Bayesians Debug Proc. of ICDM06 2006, pp.382-393  G. D. F a tta, S   Leue, and E. St e g antova D iscri m inative Pattern Mining in Software Fault Detection Proc. of SOQUA06 2006 pp.62-69  M. J Harrold, G. Rotherm e l, K Sayre, and et al., An Empirical Investigation of the Relationship Between Fault-revealing Test Behavior and Differences in Program Spectra Journal of Software Testing Verification and Reliability 2000, vol. 10, no.3, pp. 171-194  D. Jeffrey, N. Gup ta, and R. Gupta Fault Localizatio n Using Value Replacement Proc. of ISSTA08 2008, pp. 167-178  IBM W e b Services: Taking e-Busi ness to the Next Level White Paper, 2000, available from: http://www.ibm.com/developerworks/cn websphere/ download/pdf/e-businessj.pdf  S. Noikajana, and T. Suwannasart, W eb Service Test Case Generation Based on Decision Table Proc. of the 8th International Conference on Quality Software \(QSIC08 2008, pp. 321-326  C M a o Per form ing Co m b inator ial Testing on W e b Ser viceBased  Software Proc. of Intl Conf. on Computer Science and Software Engineering \(CSSE08 2008, vol.2, pp.755-758  T  Y Chen F.C  Kuo T  H T s e and et al  M eta m or phic T e sting and Beyond Proc. of the 11th International Workshop on Software Technology and Engineering Practice \(STEP03 2003, pp.94-100  Business Process Managem e nt Initiative Business Process Modeling Language \(BPML November, 2002  W 3 C  OWL-S: Semantic Markup for Web Services Nov. 22, 2004 available from: http://www.w3.org/ Submission/OWL-S  Z. Pawlak, Roug h Set Intl Journal of Information and Computer Science vol. 11, 1982, pp. 341-356  Jianhua Dai Research on Rough Set Theory and Its Applications in Knowledge Discovery \(Ph. D. Dissertation Library of Wuhan University, 2003, pp. 97104.   \(in Chinese  M Kry szkiewicz, Rou gh Set Approach to Inco m p l e t e Inform ation Systems Information Sciences 1998, vol. 112, pp. 39-49  C  M a o, Slicing W e b Ser vicebased Softwar e Proc. of IEEE International Conference on Service-Oriented Computing and Applications \(SOCA09 Taipei, Taiwan, December 14-15, 2009, pp 91-98  C M a o X Hu and Y L u  T owards a Softwar e Diagnosis M e tho d  Based on Rough Set Reasoning Proc. of the IEEE 8th International Conference on Computer and Information Technology \(CIT08  Sydney, Australia, July 811, 2008, pp. 718-723  I   Gr osclaude  M odelbased M o nitor ing of Co m ponentbased Software Systems Proc. of the 15th International Workshop on Principles of Diagnosis 2004, pp. 155-160  L  Ar dissono L  Console A Go y  and et al Enhancing W e b  Services with Diagnostic Capabilities Proc. of the 3rd IEEE European Conference on Web Services 2005, pp. 182-191  X Fu P Z ou  Z   Shang and et al   Fault Diagnosis f o r W e b Ser vice Composition Based on Bayesian Network, Computer Applications 2008, vol.28, no. 5, pp. 1095-1097.   \(in Chinese   
299 


        


9 Appendix Fig 6: Forest Cover Types of the U.S. \(Source. USGS National Atlas of US Summary of Forest Cover Type Data Type Multivariate Abstract The forest cover type for 30 x 30 meter cells obtai ned from US Forest Service \(USFS\ Region 2 Resource Information System RIS\ data Data Characteristics The actual forest cover type for a given observatio n \(30 x 30 meter cell\ was determined from US Fores t Service \(USFS\ Region 2 Resource Information System RIS data Independe nt variables were derived from data originally obta ined from US Geological Survey \(USGS\ and USFS data. Data is in raw form \(not scaled\ and contains binary \(0 or 1 columns of data for qualitative independent variables \(wilderness areas and soil types Summary Statistics Number of instances observations 581012 Number of Attributes 54 Attribute breakdown 12 measures, but 54 columns of data \(10 quantitativ e variables, 4 binary wilderness areas and 40 binary soil type variables Missing Attribute Values None 43 


   C4.2 Open GL has excellent documentation that could help the developer learn the platform with ease C4.3 Developer has very little ex perience in working with Open GL platform  For our case study, alternative B i.e. Adobe Director was the most favorable alternative amongst all the three. It catered to the reusability criteria quite well and aimed at meeting most of the desired operational requirements for the system   6. CONCLUSION & FUTURE WORK  The main contribution of this paper is to develop an approach for evaluating performance scores in MultiCriteria decision making using an intelligent computational argumentation network. The evaluation process requires us to identify performance scores in multi criteria decision making which are not obtained objectively and quantify the same by providing a strong rationale. In this way, deeper analysis can be achieved in reducing the uncertainty problem involved in Multi Criteria decision paradigm. As a part of our future work we plan on conducting a large scale empirical analysis of the argumentation system to validate its effectiveness   REFERENCES  1  L  P Am g o u d  U sin g  A r g u men ts f o r mak i n g an d  ex p lain in g  decisions Artificial Intelligence 173 413-436, \(2009 2 A  Boch m a n   C ollectiv e A r g u men tatio n    Proceedings of the Workshop on Non-Monotonic Reasoning 2002 3 G  R Bu y u k o zk an  Ev alu a tio n o f sof tware d e v e lo p m en t  projects using a fuzzy multi-criteria decision approach Mathematics and Computers in Simualtion 77 464-475, \(2008 4 M T  Chen   F u zzy MCD M A p p r o ach t o Selec t Serv ice  Provider The IEEE International Conference on Fuzzy 2003 5 J. Con k li n  an d  M. Beg e m a n   gIBIS: A Hypertext Tool for Exploratory Policy Discussion Transactions on Office Information Systems 6\(4\: 303  331, \(1988 6 B P  Duarte D e v elo p in g a p r o jec ts ev alu a tio n sy ste m based on multiple attribute value theroy Computer Operations Research 33 1488-1504, \(2006 7 E G  Fo rm an  T h e  A n a l y t ic Hier a rch y P r o cess A n  Exposition OR CHRONICLE 1999 8 M. L ease  an d J L  L i v e l y  Using an Issue Based Hypertext System to Capture Software LifeCycle Process Hypermedia  2\(1\, pp. 34  45, \(1990 9  P e id e L i u   E valu a tio n Mo d e l o f Custo m e r Satis f a c tio n o f  B2CE Commerce Based on Combin ation of Linguistic Variables and Fuzzy Triangular Numbers Eight ACIS International Conference on Software Engin eering, Artificial Intelligence Networking and Parallel Distributed Computing, \(pp 450-454 2007  10  X  F L i u   M an ag e m en t o f an In tellig e n t A r g u m e n tatio n  Network for a Web-Based Collaborative Engineering Design Environment Proceedings of the 2007 IEEE International Symposium on Collaborative Technologies and Systems,\(CTS 2007\, Orlando, Florida May 21-25, 2007 11 X. F L i u   A n In ternet Ba se d In tellig e n t A r g u m e n tatio n  System for Collaborative Engineering Design Proceedings of the 2006 IEEE International Symposium on Collaborative Technologies and Systems pp. 318-325\. Las Vegas, Nevada 2006 12 T  M A sub jec tiv e assess m e n t o f altern ativ e m ission  architectures for the human exploration of Mars at NASA using multicriteria decision making Computer and Operations Research 1147-1164, \(June 2004 13 A  N Mo n ireh  F u zzy De cisio n Ma k i n g b a se d o n  Relationship Analysis between Criteria Annual Meeting of the North American Fuzzy Information Processing Society 2005 14 N  P a p a d ias HERMES Su p p o rti n g A r g u m e n tative  Discourse in Multi Agent Decision Making Proceedings of the 15th National Conference on Artifical Intelligence \(AAAI-98  pp. 827-832\dison, WI: AAAI/MIT Press,  \(1998a 15  E. B T riantaph y llo u   T h e Im p act o f  Ag g r e g atin g Ben e f i t  and Cost Criteria in Four MCDA Methods IEEE Transactions on Engineering Management, Vol 52, No 2 May 2005 16 S  H T s a u r T h e Ev alu a tio n o f airlin e se rv ice q u a lity b y  fuzzy MCDM Tourism Management 107-115, \(2002 1 T  D W a n g  Develo p in g a f u zz y  T O P S IS app r o ach  b a sed  on subjective weights and objective weights Expert Systems with Applications 8980-8985, \(2009 18 L  A  Zadeh  F u z z y Sets   Information and Control 8  338-353, \(1965  152 


                        





