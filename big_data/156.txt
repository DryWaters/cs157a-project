A Paradigm for Detecting Cycles in Large Data Sets via Fuzzy Mining James P. Buckley and Jennifer Seitzer  Computer Science Department University of Dayton 300 College Park Dayton, Ohio  45469-2160 buckley, seitzer}@cps.udayton.edu    Partially supported under Grant 9806184 of the National Science Foundation Abstract Traditional data mining algorithms identify associations in data that are not explicit.  Cycle 
mining algorithms identify meta-patterns of these associations depicting inferences forming chains of positive and negative rule dependencies.   This paper describes a formal paradigm for cycle mining using fuzzy techniques. To handle cycle mining of large data sets, which are inherently noisy, we present the a cycle and b cycle, the underlying formalism of the paradigm. Specifically, we show how a cycles 
desirable cycles, can be reinforced such that complete positive cycles are created, and how b cycles can be identified and weakened.  To accomplish this, we introduce the concept of W nodes that employ an alterability quantification, as well as use standard rule and node weighting \(with associated thresholds 1. Introduction 1.1. Traditional data mining With the present state of technology, we have the 
capability to store extremely large amounts of data in organized and automated systems.  The preponderance of data warehouses and datamarts [3  a r e c o n c r e t e e v i d e n c e t h a t t h i s  i s  n o t o n l y possible, but of great interest to researchers government agencies, and large corporations.  But what is the meaning and usefulness of these large repositories of data Most small to medium-sized databases can be understood by a single developer, and languages 
SQL\nd OLAP exist to provide a useful purpose for having such a storage.  However, extremely large databases present a new set of problems: they cannot be understood by a single human and traditional querying techniques seldom produce enough useful information to justify maintaining such a large database.  The latter is partly due to a lack of comprehension, but additionally they fail due to being cumbersome and tedious.  Even with today\222s high-speed processing capabilities, the answer lies 
not in speeding up current query techniques, rather in a new and radical approach to finding answers and important associations in the data Data mining is the nontrivial extraction of implicit, previously unknown, and potentially useful information from data [4  W e  a r e n o lo n g e r lo o k in g for tabular answers or aggregations of the data rather, we are looking for patterns  within the data that reveal knowledge previously unknown.  One of 
the most common applications of data mining is to generate all significant association rules between items in a data set.  We can employ efficient algorithms to mine a large collection of basket data type transactions for association rules between sets of items with some minimum specified confidence [1    T h e d a t a  n o w ha s  b o t h m e a n i n g  a n d usefulness 1.2. Why meta-patterns are important The patterns we discover in our data sets through 
data mining may not be necessarily isolated.  There may be chains of rules forming patterns of patterns or meta-patterns where the head of one rule is the body of another rule.  In particular, the chain of rules may form a cycle This form of meta-pattern is the focus of our work in this paper 


Cycles exist commonly in everyday life.  The changing seasons, human behavior patterns, and consumer purchasing patterns are all examples of cycles.  As would be expected, the evidence of these cycles can be found in our data.  It is important to identify such patterns because, as for data mining this identification assists us in a better understanding of the data itself.  And more importantly, because events comprising a cycle are interdependent, it allows us to focus on specific events that may perpetuate or break a cycle.  Another powerful aspect of a cycle is its inherent implication of continuity Extraction of a cyclic pattern alerts a system that targeting any of the cycle participant activities assures continuous attainment of the goal \(at least until the cycle is broken\.  Likewise, an undesirable cycle can be broken by failing to fire any of the constituent rules 2.  Cycle Mining In previous work, the authors developed a methodology for discovering cycles as well as a formal data set model   W e  n o w pr e s e n t  a n improved methodology that uses the individual rule supports and confidences to detect and categorize different types of cycles.  We also present an enhanced cycle detection algorithm that uses a metric t computed from constituent rule support and confidence factors.  This metric is used to characterize the strength of the encompassing cycle A user-specified threshold, U, is utilized as a global variable to denote how strong a rule must be to be included in any potential cycle.  This allows the user to select how sensitive the system will be and is dependent upon the particular enterprise being mined The following definition was used and presented in the original paper Definition 2.1 \(support and confidence  The support for a rule, C 254 B, is the percentage of data tuples that satisfy C 331 B;  the confidence for rule C 254 B is the percentage of tuples that satisfy C given all tuples that satisfy B 7 The support of a cycle is the minimum support value of any of the constituent rules forming the cycle; the confidence of a cycle is the minimum confidence of any of the constituent rules forming the cycle We define t the aggregation of the above two metrics  to be our threshold measurement for any specific rule.  No rule with t  less than a userspecified threshold U will be considered meaningful enough to be placed in the system knowledge base  Hence, it will not be detected as part of any cycle Definition 2.2 t  t   support + confidence\ / 2,        when support 263 5 MAX\(support, confidence\,      otherwise Cycles are composed of n individual rules, so we define the strength metric t  applied to cycles as T  min t 1 205 t n where t i is the strength measurement of rule i The revised methodology and cycle detection algorithm do not consider rules with t less than userspecified threshold U Thus, any detected cycle has T at least U  2.1. Cycle mining methodology Discovery of cycles has as much to do with the knowledge representation structure as it does with the rule discovery algorithm itself.  We assume a hypergraph representation of the knowledge base where logical predicates appearing as head of rules are represented as vertices, and sets of \(conjuncted predicates, appearing as rule bodies, are represented as hyperedges.  For example, a rule P\(X 254 R\(X\, \205, Q\(Y with head P\(X and body R\(X\, \205, Q\(Y is internally represented as vertex P\(X with incoming hyperedge R\(X\, \205, Q\(Y Our methodology consists of four steps 1  Discover constituent rules in the form of if-then patterns 2  Insert discovered rules, the supports of which are greater than threshold U into the program hypergraph 3  Run Cycle Mining Algorithm 2.1 \(below 4  Determine the new state of the knowledge base As the dependency graph grows with each newly discovered pattern, the current state of the combined collection is reevaluated Algorithm 2.1   \(Cycle Mining Input:    Hypergraph representation P discovered rule h 254 b with  t  value acceptable  strength threshold U Output Set of nodes forming a cycle C where C  has T  263  U    Precise T of newly found cycle C BEGIN ALGORITHM 2.1 If t of  rule h 254 b  U then discard rule else 


insert rule into P  Perform a postorder numbering \(via simple  dfs\ on the program  hypergraph with head h as starting node If postorder number of head is 263 any of of its incoming neighbor postorder numbers, then  there exists a causal cycle formed by the edge emanating from the incoming neighbor  to the head Traverse the \(cyclic\th C backwards -              node to incoming neighbor -- to h tracking the minimum t   T  min t 1 205 t n  Return C and T END ALGORITHM 2.1 2.2. A brief example Assume the following rules reside in a dependency hypergraph indicating causal relationships within a system.  The user specified acceptab ility threshold is set to 0.85 costly_auto_repair 256 low_funds low_funds 256 car_not_maintained car_not_maintained 256 dirty_engine with t values of  0.92,  0.88, and  0.97, respectively A new pattern with t value of .86 is discovered dirty_engine 256 costly_auto_repair The Cycle Mining Algorithm detects the following cycle with T = 0.86, as shown in Figure 1 Figure 1.  Example cycle 3.  Fuzzy Cycle Paradigm 3.1 a cycles and b cycles Our Cycle Mining algorithm is able to detect all cycles in a particular data set that meet a specific confidence and support threshold.  However, cycles differ to the extent that they meet external system goals or semantic domain criteria Definition 3.1 \(Cycle Types A complete cycle is any cycle where T  263 U where U is a user-specified value\.  A partial cycle is any cycle where  0 T U.  An a cycle is a complete cycle that results in a positive goal. A partial a cycle is a partial cycle that, if complete would result in an a cycle   A b cycle is a complete cycle that contains a proposition that is counter to one or more external system goals. A partial b cycle is a partial cycle that, if complete, would result in a b cycle As indicated above, both a cycles and b cycles are determined semantically.  That is, at this point in our work, there is no automated method to classify cycles as desirable a cycles\r undesirable b cycles\. These assessments are made externally by humans of the enterprise owning the computer system.  The assessments are useful to the enterprise because they indicate whether the cycle should be perpetuated as in the case of a cycles, or broken as in the case of b cycles An example of an a cycle is as follows attends_class 256 takes_notes takes_notes 256 good_test_grade good_test_grade 256 feels_good feels_good 256 attends_class An example of a b cycle is as follows misses_class 256 no_notes no_notes 256 poor_test_grade poor_test_grade 256 low_self_esteem low_self_esteem 256 misses_class Of primary interest in this paper are partial cycles because, in the case of partial a cycles, they can be useful in moving an enterprise to attain its goals. We wish to reinforce or complete any a cycle or partial a cycle.   Partial b cycles can alert an enterprise of a vulnerable and possibly dangerous situation. To handle these detections, we wish to diminish or break any b cycle or partial b cycle.  Algorithm 2.1 however, gives no indication that these chains of dependencies, that are almost cyclical, exist.   We now present a formalism that facilitates identification and handling of partial a and b cycles 3.2 W nodes As will be shown later in the paper, once we have identified partial a cycles and b cycles, we want to strengthen or weaken them. This involves the  low_funds Car_not_maintained d ir ty eng i ne auto r epa i r 


identification of a node or nodes that will effect a change in a cycle Some nodes, such as Student_SSN or Employee_Age, are generally considered unchangeable in terms of a particular data set.  We call these static nodes Other nodes, such as Cost_of_Repair or Quantity_Eaten, are changeable We call these W nodes  Assoc iated with each W node is an alterability factor Y that expresses how \223changeable\224 a particular node is.  Trivially, for static nodes Y would have a value of 0. The remaining nodes would have a Y value such that 0 Y  243 1 For example, we may have the following nodes in our cycle Node Y Age 0 Weight 7 SSN 0 Salary 9 Received_mailing 1.0 Age and SSN are static nodes, whereas Weight Salary, and Received_ mailing are alterable to some degree as indicated by Y  3.3. Fuzzy mining of cycles Suppose we wish to find all partial cycles in our data set that match a particular criteria.  Up to this point, we group all partial cycles together,  that is, all cycles with T 243 U, where U is a user-specified threshold.  We can partition this group into many different types of cycles by using many intermediate thresholds A near-cycle would be a cycle that is very close to being a crisp \(complete\ cycle.  A relatively small modification in a future data set would move this cycle into the complete category.  A mid-cycle is a cycle that is not as close to being a complete cycle as a near-cycle, but it is still relatively strong in its manifestation.  A weak-cycle is not very strong, but is evident enough in the data set to be significant.  The identification of these various strata of cycles in the data set are important.  Near-cycles tell us that this cycle is on the verge of being complete.  If this is a negative cycle, it is an indication that it may manifest itself soon if left unchecked.  Mid- and weak-cycles are indications that patterns are there, although weakly.  They give us a precursor to the possible formation of complete cycles in the future.  Over time, the strengthening of such cycles may indicate specific action\(s\ to be taken depending upon the nature of the cycle We wish to quantify the linguistic concepts nearcycle  mid-cycle and weak-cycle In order to accomplish this, we define a fuzzy cycle to be a partial cycle that is characterized by a membership function in the following format [9  F  m 1  T 1  m 2  T 2  m n  T n where m i is the grade of membership and T i is the cycle threshold value Figure 2 illustrates this containment relationship Figure 2.  Cycle containment For example, to express a near-cycle, we can use the following function Near-cycle = { .4/.74, .6/.76, .8/.78, .9/.80, .9/.82 1/.84 We specify the minimum membership value to be 8.  It is assumed that all T I 84 have a membership value of 1 The membership function allows us to express various degrees of membership based upon a specific application, as well as associated domain knowledge It is similar to the idea of expressing the concept of being tall.  The membership function for \223tall\224 would be quite different in many countries around the world.  Crisp \(non-fuzzy\ classification would be limited to only one definition of \223tallness\224 Therefore, it would not be an accurate imterpretation of the linguistic term \223tall\224 in many countries where people\222s heights are different on the average.  The fuzzy term classification is more responsive to these  Fuzzy Cycles Complete Cycles RuleSets 


forms of differences and can be adjusted accordingly via the membership function This allows us to use a wide range of fuzzy operators [5 to e x p r e s s s u c h f u zzy  co n c e p ts  as a n extremely-near-cycle by using the concentration operation CON\(A m CON\(A x m A x 2 We can now define extremely-near-cycle as Extremely-Near-cycle = { .16/.74, .36/.76, .64/.78 81/.80, .81/.82, 1/.84 This allows us to express mid-cycle, weak-cycle and extremely-weak-cycle in a similar manner 3.4. Fuzzy mining algorithm The following algorithm produces a stratification of all cycles existent in a given knowledge base.  By repeatedly calling Algorithm 2.1, we find all types of cycles in the program dependency hypergraph.  This algorithm uses a sequence of thresholds to identify differing strength cycles such as those defined above complete cycles as well as near, mid, and weak cycles  Because the stratification of cycles desired by the user could contain an arbitrary number of strata, we pass in a sequence S of threshold values as a parameter.   For each threshold U i in the sequence all cycles with threshold T such that U i-1 243 T 243  U i will be identified.  Thus, Algorithm 3.1 returns m classes of fuzzy cycles where m is the number of strata, or equivalently, the number of thresholds provided in sequence S  Algorithm 3.1   \(Fuzzy Mining of Cycles Input:    Hypergraph representation P threshold sequence S = <U 1 205, U m  Output Sequence of m classes P 1 205, P m  of cycles where for each cycle C 316 P i  U i-1 243 T c  243  U i BEGIN ALGORITHM 3.1 For each threshold U i  316 S form cycle class P i  For each node h in program hypergraph P For each incoming neighbor b of node h  P' := Cycle Mining P  h 254 b, U i  Let T be T returned by Cycle Mining  If    T U i then discard cycle P  else  P i P i  310 P  Return P 1 205, P m  END ALGORITHM 3.1 To produce the above mentioned fuzzy cycle sets including complete, near, mid, and weak cycles, the following call to Algorithm 3.1 could be made  sets_of_cycles = Fuzzy Mining P 85, .8, .75, .7 3.5. Reinforcing a cycles and diminishing b cycles It is important to note that any cycles we discover using our algorithm for a given data set are static Only a change of data can cause a cycle to be modified.  The enterprise associated with the data set must incorporate change.  This will produce different data which in turn may alter the cycles already discovered a cycles and b cycles are cycles we want to perpetuate or remove respectively.  In order to accomplish this we do the following For \(each new data set execute algorithm 2.1 \(to enumerate all complete cycles for\( each cycle examine cycle \(to determine the set of a cycles and the set of b cycles for \(each a cycle examine the individual nodes that comprise the cycle and determine all W nodes rank the nodes in terms of Y measure of what to modify first enterprise makes changes \(if deemed necessary for \(each b cycle examine the individual nodes that comprise the cycle and determine all W nodes rank the nodes in terms of Y measure of what to modify first enterprise make changes \(if deemed necessary a new data set is generated indicates non-automated step Of course, much of the modification\(s\  are dependent on the particular enterprise as well as other domain knowledge.  We are currently investigating 


methods of incorporating this domain knowledge into the system itself Of even more impact, is the reinforcing of partial a cycles and the diminishment of partial b cycles.  In order to accomplish this, we do the following For \(each new data set execute algorithm 3.1 \(to enumerate all near-, mid-, and weak- cycles for\( each ordered near-cycle examine near-cycle \(to determine if it is a partial a cycle or a partial b cycle Call Make_or_Break\(\  [below for\( each ordered mid-cycle examine mid-cycle \(to determine if it is a partial a cycle or a partial b cycle Call Make_or_Break for\( each ordered weak-cycle examine weak-cycle \(to determine if it is a partial a cycle or a partial b cycle Call Make_or_Break a new data set is generated indicates non-automated step Procedure Make_or_Break If \(partial a cycle examine the individual rules that comprise the cycle and determine all those that fall below U For \(each low rule If any of the nodes associated with the body of the rule are W nodes then enterprise makes changes associated with node\(s\ to strengthen the association Else For \(each  rule in the partial cycle If any of the nodes associated with the body of the rule are W nodes then enterprise makes changes associated with node\(s\ to weaken the association End Procedure 4.  An Example We have implemented cycle detection work in the machine learning area of inductive logic programming.  Any inductive pursuit including data mining and knowledge discovery, however, can be used to acquire the constituent if-then patterns of cycles.  We exemplify the formalisms presented in this paper here using classification rules that are mined.  A classification rule is a rule of the form X 1 b 1  254 Y 1 a 1  205, \(Y n a n  The context of the example is a business setting where the overall enterprise goal is to foster customer purchases.  Consider the data instance as shown in Table 1 Table 1.  Example data Cust ID Made Purchase Filled Out Card Age 35 Received Mailing 10180 Yes Yes No yes 10181 Yes Yes Yes yes 10182 No No No no 10183 Yes Yes Yes yes 10184 Yes Yes No no 10185 Yes Yes Yes yes 10186 No No Yes no 10187 Yes Yes Yes yes 10188 Yes Yes Yes yes 10189 Yes Yes Yes yes Assume the following rules, as shown in Table 2 along with support, confidence, and t values were discovered from the above data There are two \(fuzzy\ cycles embedded in this data.  Assuming the thresholds of 0.8, 0.78, and 0.72 for complete, near, and weak cycles respectively, we have exactly one weak cycle with its strength T value of 0.728 comprising the rules Made_Purchase 256 Filled_out_Card t 0 Filled_out_Card 256 Age > 35 t 0.72 Age > 35 256 Made_Purchase t 0.728 


Table 2.  Example Data Rule Support Confidence t Received_ma iling 256 Made_Purchase 0.7 1.0 0.85 Made_Purchase 256 Fille d_out_Card 0.8 1.0 0.9 Fille d_out_Card 256 Received_ma iling 0.7 0.875 0.788 Fille d_out_Card 256 Age > 35 0.6 0.75 0.729 Age > 35 256 Made_Purchase 0.6 0.857 0.728 We also have exactly one near cycle of strength value T = 0.788 with membership function of 0.8 \(as defined in the subsection entitled Fuzzy Mining of Cycles made up of constituent rules Received_mailing 256 Made_Purchase t 0.85 Made_Purchase 256 Filled_out_Card t 0 Filled_out_Card 256 Received_mailing t 0.788 Both of these are examples of partial a cycles.  To illustrate how this type of information would be useful for a particular enterprise, consider the nearcycle above.  It is observed that if a customer receives a mailing, then they are likely to make a purchase at the store.  Nearly all customers fill out information cards upon making a purchase However, it is not always the case that a customer receives a mailing \(thus creating the cycle\ if they fill out an information card.  This tells the enterprise that they should examine their process of information card handling to isolate where the possible problem may be occurring.  The near-cycle detection allowed the enterprise to discover a cycle that is in their best interest to strengthen, as well as a strategy for isolating the cause of the less than complete cycle 5.  Conclusion and Future Work We have extended  a cycle mining methodology to include the identification of stratifications of cycles via a sequence of  user-specified thresholds.  One specific stratification was offered housing fuzzy cycles which include complete, near, mid, and weak cycles.   By detecting these patterns that are close to cycles, but not quite strong enough to be considered cycles, we enable the user to either form or prevent a continuous cycle.   The mechanism of the W node \(an alterable node\ has been presented where a user can form a desirable cycle, an a cycle, or prevent an undesirable cycle, a b cycle,  from occurring by honing in on these changeable facts Along with extending our formalism to automatically detect a cycles and b cycles, we are currently endowing our implementation with the capability to detect fuzzy cycles.  We are also examining methods to allow for automated techniques to reinforce and diminish a cycles and b cycles respectively.  We anticipate heavy experimentation with the system on data relating to Lyme Disease Diagnosis.  We are also examining the interconnection of fuzzy rules into cycles as well as considering overlapping cycles References 1  A g r a w a l  T   Imielinski, and A. Swami, \223Mining association rules between sets of items in large databases,\224 ACM SIGMOD Bulletin May 1993 pp. 207-216 2 S  B r in  R  Mo tw a n i  J  U llm a n  a n d S  T s u r  223Dynamic Itemset Counting and Implication Rules for Market Basket Data,\224 ACM SIGMOD May 1997 3 S C h audh ur i  a nd U  D a y a l   223A n o v e r v i e w o f dat a warehousing and OLAP technology,\224 SIGMOD Record Vol.26, Num. 1, 1997, pp. 65-74 4 F r aw l e y and P i at et sky S h api r o   ed i t o r s   Knowledge Discovery in Databases chapter Knowledge Discovery in Databases: An Overview, AAAI Press/The MIT Press. 1991 5 i a r ra ta n o   J  a n d R i l e y  G    Expert Systems Principles And Programming PWS-Kent Publishing, Boston, MA, 1989 6 i mb a l l  R   The Data Warehouse Toolkit John Wiley and Sons, 1996 7 a ma k r is h n a n  R   Database Management Systems  McGraw-Hill, 1998 8 J  S e i t z e r   J P  B u c k l e y  an d A   Mo ng e  223M et aP a t t e r n Extraction: Mining Cycles\224 Proceedings of the Florida Artificial Intelligence Research Society International Conference \(FLAIRS-99 Orlando FL, pp. 466-470 9 I  A  Z a d e h   F u z z y S e ts   Information And  Control  Vol 8, 1965, pp. 338-353 10 M  J  Z a k i S  P a rt h a s a r t h y M  O g ih a r a  a n d W  L i   223New Algorithms for Fast Discovery of Association Rules\224 3 rd International Conference on Knowledge Discovery and Data Mining August 1997 


large itemset I and the cardinality D For example a dataset with 200,000 transactions of mean size 10 and large itemsets of mean size 6 is denoted by T10.I6.D200K By tuning these parameters we were abl e to generate a wide range of datasets with various characteristics We also experimented with a real categorical dataset from the UCI KDD Archive 22 The d ataset contains census data extracted from the 1994 and 1995 current population surveys conducted by the U.S Census Bureau Each tuple corresponds to an individual and includes demographic and employment related info rmation After removing some numerical attributes and clean ing the data e.g missing values were replaced by an extra special value for each attribute we ended up with 36 categorical attributes the domain sizes of which vary from 2 to 53 the total number of values is 525 he data are split into two datasets with 200K and 100K tuples respectively We indexed the 336rst dataset which we denote as CENSUS and we used random samples from the second for querying it 5.2 Comparison between split policies In the 336rst experiment we compare the three SG\320tree split policies described in 3.1 We generated three uncompressed SG\320trees for the CENSUS dataset using 000 001 003 005 007 t  n f 001 003 005 007 t and 017 001\t 001 003 005 007 t  respectively Table 1 compares the characteristics of the resulting trees and shows their relative performance averaged on 100 nearest-neighbor queries Table 1 Comparison of the three split policies comparison metric 021 022 023 025 027 031 032 034 022 023 025 027 031 037 022 031 022 023 025 027 031 average  021  034    at level 1 90 73 74 average  021  034    at level 2 210 158 154 average  021  034    at level 3 458 325 348 insertion cost msec 0.331 0.655 0.645  of data accessed 15.79 4.78 5.72 CPU time msec 119 34.6 41.8 I/O s 862 266 323 All three trees have 4 levels The entries in level 0 leaf level have 336xed area 36 since all data tuples have 36 values The 336rst three rows of Table 1 show the average area of the entries at levels 1,2 and 3 root This can be considered as a quality metric for the three split policies the smaller the average area of the entries at the intermediate levels the better the quality of the clustering The n f 001 003 005 007 t and 017 001 t 001 003 005 007 t policies construct much better trees than 000 001 003 005 007 t  and this can be validated from the last three rows of the table which show the average pruning in terms of data accessed the average CPU cost and average number of node accesses at nearest neighbor search queries On the other hand 000 001 003 005 007 t has the lowest average insertion cost and tree construction time Experimentation with other datasets shows similar results In the sequel we use n f 001 003 005 007 t as the standard split policy for the SG\320tree since it achieves the best quality of the three at an acceptable cost 5.3 NN search on synthetic data We compared the performance of SG\320table and SG\320tree on nearest neighbor search by generating a series of synthetic datasets and using the same itemsets and parameters to also generate a number of queries for each dataset Figures 5 through 12 show the relative performance of the methods for various paramete r settings For each experimental instance the results we re averaged over 100 queries Figures 5 7 9 11 and 12 show in combined diagrams the pruning ef\336ciency bars and computational cost lines of the two methods The pruning ef\336ciency is measured in terms of the transactions accessed and compared with the query transaction percentage Figures 6 8 and 10 compare the number of random I/Os on the two indexes for three of the 336ve experimental instances Figures 5 and 6 show the performance of the indexes when the size of itemsets is 336xed I=6 the size of the dataset is 200K and the size of the transactions T varies When T is small both indexes have similar performance but as T increases the SG\320tree starts to slightly outperform the SG\320table managing to prune more transactions Especially the I/O cost differ ence is high for large values of T since in that case the distance of the nearest neighbor usually increases and the contents of many entries of the SG\320table need to be visited Figures 7 and 8 show the relative costs for T=30 as the size of the large itemsets I in creases This increase generates datasets where the tran sactions are better lustered having smaller average distance between them and favors both structures Observe that the relative performance between them increases and th e SG\320tree becomes signi\336cantly faster than the SG\320table when both T and I are large In the third experimental instance Figures 9 and 10 we 336x the ratio I/T to 0.6 and incr ease the transaction size The rationale is to test the robustness of the indexing methods to the dimensionality of the problem when the data skew remains constant Clearly the SG\320tree is obust to the transaction size whereas the SG\320table fails to index well large transactions even if they cont ain well-clustered data This observation is also validated at the comparison of the structures for real categorical datasets of high dimensionality see Section 5.4 We also tested the robustness of the two structures to the database size by 336xing T 10 and I=6 two parameter values for which the SG\320tabl e performs well and increasing the dataset cardinality D Figure 11 shows that the relative pruning ef\336ciency of the SG\320tree increases with the database size The I/O cost diagram is omitted since it  82  Proceedings of the 19th International Conference on Data Engineering \(ICDE\22203 1063-6382/03 $ 17.00 \251 2003 IEEE 


 0 5 10 15 20 25 30 35 40 10 15 20 25 30 average number of items in transactions T I=6 D=200K  o f d ata p rocessed 0 50 100 150 200 250 300 350 400 450 500 ti m e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 5 Pruning and CPU time varying T 0 2000 4000 6000 8000 10000 12000 14000 10 15 20 25 30 average number of items in transactions T I=6 D=200K number o f r andom I  Os SG-table SG-tree Figure 6 Random I/Os varying T 0 5 10 15 20 25 30 35 40 6121824 average length of large itemsets I T=30 D=200K  o f d ata p rocessed 0 50 100 150 200 250 300 350 400 450 500 ti m e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 7 Pruning and CPU time varying I 0 2000 4000 6000 8000 10000 12000 14000 6121824 average length of large itemsets I T=30 D=200K numbe r of ra ndom I  O s SG-table SG-tree Figure 8 Random I/Os varying I 0 2 4 6 8 10 12 14 16 T=10,I=6 T=20,I=12 T=30,I=18 T=40,I=24 T=50,I=30 Varying T and I I/T=0.6 D=200K  o f d ata p rocessed 0 20 40 60 80 100 120 140 160 tim e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 9 Pruning and CPU time 336xed I/T 0 200 400 600 800 1000 1200 1400 1600 1800 2000 T=10,I=6 I=12 T=30,I=18 I=24 T=50,I=30 Varying T and I I/T=0.6 D=200K numbe r of ra ndom I  Os SG-table SG-tree Figure 10 Random I/Os 336xed I/T 0 1 2 3 4 5 6 7 100 00 300 400 500 Data set cardinality T=10 I=6  o f d ata p rocessed 0 10 20 30 40 50 60 70 80 90 ti m e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 11 Pruning and CPU time varying D 0 10 20 30 40 50 60 0 1 to 3 4 to 10 11 to 20 20 distance of nearest neighbor T30.I18.D200K  o f d at a p rocessed 0 100 200 300 400 500 600 700 800 time m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 12 Pruning and CPU time var 000 000 003 005 007 t  83  Proceedings of the 19th International Conference on Data Engineering \(ICDE\22203 1063-6382/03 $ 17.00 \251 2003 IEEE 


shows a pattern similar to the CPU cost as in the previous experiments During the experiments we observed that queries having a close nearest neighbor were processed fast using both structures whereas for cases with distant neighbors the SG\226tree was signi\036cantly faster than the SG\226table We validated this observation by running 1000 queries on the T30.I18.D200K dataset and averaging the query costs for various distance ranges of the nearest neighbor Figure 12 shows the average pruning an d CPU cost for 036ve distance ranges When the distance is small search is fast for both methods actually for distances in the range 1\2263 the SG\226 table outperforms the SG\226tree However the distant cases are handled much faster by the SG\226tree showing that this access method is more robust to 221outlier\222 queries As a general conclusion from this set of experiments the SG\226tree is a more ef\036cient and robust access method than the SG\226table in addition to its other inherent advantages dynamic data handling independence to hard-wired constants In the next subsection we compare the indexes for other query types on both synthetic and real data 5.4 Real data nd other queries Figures 13 and 14 show the performance of the indexes for 000 NN queries on the T30.I18.D200K synthetic dataset and the CENSUS dataset respectively for various values of 000  The results for each experimental instance were averaged over 100 queries In both 036gures for small to medium values of 000 the SG\226tree is signi\036cantly faster than the SG\226 table When 000 is large  001 003 005 005 005  the fraction of the data that need to be visited becomes too large for the indexes to be useful This is due to the fact that the search space becomes less appropriate for search For example when 000 t 003 005 005 005 005 we observed that the average distance of the 000 th neighbor is very large 31.81 for T30.I18.D200K and 18.06 for CENSUS and very close to the average distance of all transactions from f  This is due to the 221dimensionality curse\222 effect 3 o ften o b s erv e d i n h ig h d i men s io n a l search problems Observe that the SG\226tree is less sensitive to this effect since its performance degenerates at a smaller pace especially for the real dataset We also compared the indexes for similarity range queries Figures 15 and 16 The same datasets and queries as before are used and the distance threshold from the query varies from 2 to 10 For r t 020  the SG\226table outperforms the SG\226tree on the synthetic dataset In all other cases the tree is much faster Observe that on the real dataset in particular for both 000 NN queries and range queries the performance difference quite large in favor of the tree This indicates that the structure can perform very well in real life cases  0 10 20 30 40 50 60 70 80 90 100 1 10 100 1000 10000 k-nn search varying k T30.I18.D200K  o f d ata p rocessed 0 200 400 600 800 1000 1200 1400 time\(msec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 13 021 NN queries T30.I18.D200K 0 10 20 30 40 50 60 70 80 90 100 1 10 100 1000 10000 k-nn search varying k CENSUS  o f d ata p rocessed 0 100 200 300 400 500 600 tim e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 14 022 NN queries CENSUS 5.5 Dynamic data changes In this experiment we compare the structures simulating a case where the nature of the data changes dynamically We generated a synthetic dataset T10.I6.D100K and built an SG\226table and SG\226tree for it We then gradually updated the structures by inserting batches of 100K transactions each with the same characteristics i.e T=10 I=6 but putting different seeds to the random generator i.e the large itemsets used were different for each batch We ran nearest neighbor queries on the two structures after each insertion phase The queries for phase 023 after batch 023 has been inserted 024 026 023 026 032  are generated as follows For each query i a random number 033 from 1 to 023 is chosen and ii the generator parameters i.e large itemsets for batch 033 are used to produce the query For example a query for the phase where the dataset contains 300K data is generated using randomly one of the generators of batches 1 2 or 3 Figure 17 shows the average pruning ef\036ciency and CPU time of the two structures Initially both have similar performance but as more data with different characteristics are inserted into the structures the performance of the SG\226table degenerates since it is optimized for the 036rst 100K data  84  Proceedings of the 19th International Conference on Data Engineering \(ICDE\22203 1063-6382/03 $ 17.00 \251 2003 IEEE 


 0 5 10 15 20 25 30 35 40 246810 similarity range queries varying epsilon T30.I18.D200K  o f d at a p r o cessed 0 50 100 150 200 250 300 350 400 tim e m s e c  SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 15 Range queries T30.I18.D200K 0 10 20 30 40 50 60 70 80 246810 similarity range queries varying epsilon CENSUS  o f d ata p r o cessed 0 50 100 150 200 250 300 350 400 ti me\(msec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 16 Range queries CENSUS On the other hand the SG\226tree is robust to updates and exhibits very good query performance since each batch contains skewed data generated from a different collection of large itemsets 6 Conclusions and Future Work We presented a hierarchical indexing method for similarity search in sets and categorical data The SG\226tree is a disk-based height-balanced tr ee that organizes 036xed-length bitmaps and is appropriate for various query types We have shown how several branch-and-bound methods which apply on R\226tree-like structures can be adapted for ef\036cient similarity search on the SG\226tree Extensive experimental evaluation has shown that the SG\226tree is in most cases much faster than the SG\226table a previous hash-based index The advantages of the SG\226tree can be summarized as follows 000 It is ef\036cient and robust to various data types both categorical and set data and characteristics cardinality density dimensionality It is a versatile structure that can be used for several query types 000 The tree is dynamically adapted to updates and re0 2 4 6 8 10 12 100 200 300 400 500 Dataset cardinality T=10 I=6  o f d ata p rocessed 0 20 40 60 80 100 120 140 160 180 200 tim e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 17 NN search after dynamic updates quires no preprocessing of the data Thus it can be useful for analyzing data which change dynamically over time 001 It relies on no hardwired constants and requires no tuning using a-priori de\036ned parameters 001 It is a disk-based paginated data structure so it can operate with limited memory resources and dynamically changing memory resources Caching policies previously used for the B 002 226tree and the R\226tree can be seamlessly applied on this structure There are several directions for extending the current work In our study we used hamming distance as the similarity metric However the SG\226tree can also be de\036ned tuned and searched for other set theoretic similarity metrics For example if the Jaccar d coef\036cient is used the lower distance bound in fact the upper similarity bound for nearest neighbor search can be de\036ned by 003 005 007 b n f 016 007 020 021 023 024 026 030 003 005 007 b n f 026  We plan to test the effectiveness of the structure using alternative metrics Another direction or future work is to study methods for bulk-loading SG\226trees instead of inserting the data oneby-one We can adapt categor ical clustering algorithms 12 for t hi s purpos e Anot her a pproach i s t o s o rt t h e transactions using gray codes as key in analogy to using space-\036lling curves for bulk-loading multidimensional data to an R\226tree 17  A lternati v ely  hashing t echniques can be used to group similar signatures together The resulting 221globally-optimized\222 tree could have much better quality characteristics while being built faster In a reverse direction we can investigate whether the SG\226tree can be used for clustering large dynamic collections of set and categorical data The cost of existing methods is at least 035 n   026 and the tree could be used to derive good clusters much faster e.g by merging the leaf nodes using their signatures as guides Finally we plan to empirically test the ef\036ciency of the tree to the query types discussed in Section 4.2 In  85  Proceedings of the 19th International Conference on Data Engineering \(ICDE\22203 1063-6382/03 $ 17.00 \251 2003 IEEE 


addition for some data types search can be further optimized For example if the indexed categorical data have 223xed-dimensionality 000 we know that the area of each indexed signature is 223xed to 000  We can use this property to derive stricter lower bounds for the directory node entries 001  instead of the rather relaxed 002 004 006 006 t 013 r 001 020 022 004 025 027 For this example a better bound is 002 004 006 006 t 013 r 001 020 022 004 025 027 033 t 000 037    t 001 020 022 004 025 r 013 027 027  We plan to study such search optimizations using domain properties or statistics from the indexed data References  C  C  A ggarw al  J  L  W ol f and P  S  Y u A N e w Method for Similarity Indexing of Market Basket Data SIGMOD Conference  pages 407\205418 1999  R  A gra w al and R  S ri kant  F as t A l gori t h ms for M i n ing Association Rules in Large Databases VLDB Conference  pages 487\205499 1994  K  S  B e y er  J  G ol ds t e i n  R  R amakri s hnan and U Shaft When Is 215Nearest Neighbor\216 Meaningful International Conference on Database Theory  pages 217\205235 1999  T  B ri nkhof f H.-P  K ri e g el  a nd B  S e e g er  E f 223 ci ent Processing of Spatial Joins Using R-Trees SIGMOD Conference  pages 237\205246 1993  A  C orral  Y  Manol opoul os  Y  T heodori d i s  a nd M Vassilakopoulos Closest Pair Queries in Spatial Databases SIGMOD Conference  pages 189\205200 2000  A  P  d e V ries N  M amoulis N  N es a nd M K e r sten Ef\223cient k-NN Search on Vertically Decomposed Data SIGMOD Conference  pages 322\205333 2002  U  D eppisch S-T r ee A D ynamic B alanced Signature Index for Of\223ce Retrieval ACM SIGIR Conference  pages 77\20587 1986  V  G aede a nd O G 250 unther Multidimensional Access Methods ACM Computing Surveys  30\(2\170\205231 1998  V  G ant i  J  Gehrk e  a nd R  R a makri s hnan C A C T US 205 clustering categorical data using summaries ACM SIGKDD Conference on Knowledge Discovery and Data mining  pages 73\20583 1999  D Gi bs on J  M Kl ei nber g  a nd P  R a gha v a n C l us tering Categorical Data An Approach Based on Dynamical Systems VLDB Conference  pages 311\205322 1998  A Gi oni s  D Gunopul os  a nd N K oudas  Ef 223 c i e nt and Tunable Similar Set Retrieval SIGMOD Conference  2001  S  Guha R  R as t ogi  a nd K S h i m  R OC K A R obust Clustering Algorithm for Categorical Attributes International Conference on Data Engineering  pages 512\205521 1999  A Gut t m an R T rees  A Dynami c I nde x S t r uct u re for Spatial Searching SIGMOD Conference  pages 47\205 57 1984  S  Hel m er and G  M oerk ot t e  A S t udy of F our Inde x Structures for Set-Valued Attributes of Low Cardinality Technical Report University of Mannheim  number 2/99 1999  G R Hjaltason a nd H Samet Distance Bro w sing in Spatial Databases TODS  24\(2\265\205318 1999  A K J a i n and R  C  D ubes  Algorithms for Clustering Data  Prentice-Hall 1988  I Kamel a nd C  F a louts o s  Hilbert R tree An Improved R-tree using Fractals VLDB Conference  pages 500\205509 1994  F  K o rn N  S i d i r opoul os  C  F al out s o s  E S i e g el  a nd Z Protopapas Fast Nearest Neighbor Search in Medical Image Databases VLDB Conference  pages 215\205 226 1996  N K oudas a nd K C  S e vci k  H i g h D i m ens i onal S i m i larity Joins Algorithms and Performance Evaluation International Conference on Data Engineering  pages 466\205475 1998  N R ous s opoul os  S  K el l e y  and F  V i n cent  Neares t Neighbor Queries SIGMOD Conference  pages 71\205 79 1995  Y  S a kurai  M  Y os hi ka w a  S  U emura and H  K oj i m a The A-tree An Index Structure for High-Dimensional Spaces Using Relative Approximation VLDB Conference  pages 516\205526 2000  The U C I KDD Archi v e ht t p    kdd.i c s  uci  edu 23 R W e b e r  H.-J S ch ek  a n d S Blo tt A Q u a n titative Analysis and e Study for SimilaritySearch Methods in High-Dimensional Spaces VLDB Conference  pages 194\205205 1998  86  Proceedings of the 19th International Conference on Data Engineering \(ICDE\22203 1063-6382/03 $ 17.00 \251 2003 IEEE 


13  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Example of supportbased pruning 4 Bread 1 Eggs 4 Diaper 3 Beer 4 Milk 2 Coke Count 1Item 3 Beer,Diaper 3 Milk, Diaper 2 Milk,Beer 3 Bread, Diaper 2 Bread,Beer 3 Bread,Milk Count 2Item 2 Milk, Diaper Beer 3 Bread,Milk Diaper Count 3Item Support-based pruning 225 Min support =3 Ignore subsets of items of size N 225 only if N-1 support > min-support Without pruning 6 C 1  6 C 2  6 C 3 41 With pruning: 6 + 6 + 2 = 14 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Classifiers versus Association rules \(again  Classifiers  Assume entire example set can fit into RAM  Association rule learners  can handle very big data sets  Agraw  t he APRIORI alg o r i t h m   very large data sets  10,000,000 examples  843MB Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


14  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 The Data Mining Desiderata Bradley  Require one scan \(or less\ of the database if possible  On-line \223anytime\224 behavior  223best\224 is always available, with status information on progress, expected remaining time, etc. provided  Suspendable, stoppable, resumable  incremental  progress saved to resume a stopped job  Ability to incrementally incorporate additional data with existing models efficiently  Work within confines of a given limited RAM buffer  Ooops, good-bye traditional classifiers e.g. C4.5  Argued against by some  223Memory is cheap\224: [W A R2 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Conf1  outlo o k overc a s t   1 0   82  40    84  40   4 0 0  Treatment learning sunny, 85 86 false none \(2 1 2 sunny, 80 90 true none sunny, 72 95 false none rain 65 70 true,          none rain, 71 96 true none rain 70  false some \(2 2 4 rain, 68 80 false,  some rain, 75 80 false some sunny,      69 70 false lots    \(2 3 8 sunny,      75 70 true lots overcast,     83  false lots overcast,     64  true lots overcast,     72  true lots overcast,     81 75 false lots outlook temp humidity wind hours on course A good attribute range 225 More frequent in good that bad 225 Weighted by 223distance\224good to bad 225 Normalized by total count 225 Summed for all good/bad class pairs Lots  none Lots  some Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


15  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 sunny, 85 86 false none \(2 1 2 sunny, 80 90 true none sunny, 72 95 false none rain 65 70 true,           none rain, 71 96 true none rain 70  false some \(2 2 4 rain, 68 80 false,  some rain, 75 80 false some sunny,      69 70 false lots    \(2 3 8 sunny,      75 70 true lots overcast,     83  false lots overcast,     64  true lots overcast,     72  true lots overcast,     81 75 false lots 0 1 2 3 attribute ranges with deltaf 4-2024681 conf1 225 treatments 002 attribute.range.conf1 > X 225 treatments|=N 225TAR2 = O\(2 N  225 fails for large N outlook temp humidity wind hours on course Conf1  outlo o k overc a s t   1 0   82  40    84  40   4 0 0  Lots  none Lots  some 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Treatments for golf 0 1 2 3 4 none some lots I f outl ook o verc as t Th en l o t s o f go l f  4 4  0 Least monitor watch the humidityalert if rising over 90 Least change pick a vacation location with overcast weather I f h u m i d i t y  90  97 Th en l o t s o f go l f  1 4  0 1 2 3 none some lots 0 1 2 3 4 5 6 none some lots If n o ch an ge Th en l o t s o f go l f  6 6 3 5  3  Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


16  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 6.7 <= RM < 9.8 And 12.6 <= Ptratio 15.9 BEST ACTION 0.6 <= NOX < 1.9 and 17.16 <= LSTAT < 39 WORST ACTION BASELINE 500 examples  of bad--, bad, ok, good Stop staring at the scenery and tell me where to steer or what to dodge 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Require overall require2 require3 require5 require4     action1 action1, action2, action3,  \205   Cost,    Benefit 1 Y              Y             N,        \205   23200,  250 2           N              N             Y ,       \205   11400,  150 205..       \205             \205            \205        \205   \205         \205 action2 fault2 fault3 fault1 JPL requirements Feather&Menzie Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


17  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case study 99 proposed actions for deep space satellite design; 2 99 10 30 options Each row is one project plan action1, action2, action3,  \205   Cost,    Benefit 1 Y              Y             N,        \205   23200,  250 2           N              N             Y ,       \205   11400,  150 205..       \205             \205            \205        \205   \205         \205 Learnt 225 Do 16 225 Don\222t do 14 225 Ignore 66 options 225 c.f. genetic algorithms Each dot  is one randomly generated project plan 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Pr of tampering 0.02 Pr of fire 0.01 Pr of smoke  given [fi  0.90 Pr of smoke  given [fi  0.01 Pr of report given [exodus=ye 0.75 Pr of report given [exodus=no 0.01 Pr of exodus given [alarm=yes 0.88 Pr of exodus given [alarm=no 0.001 etc tampering fire alarm smoke exodus run away report hello, operator I want to report a fire 0.02 0.01 Use Bayesian analysis to update probabilities given new information Use Bayesian analysis to update probabilities given new information Bayesian Tuning Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


18  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 tampering fire alarm smoke NO exodus report YES 0.50 was 0.02 0.03 was 0.01 Q1: What if there is a report, but no smoke Q1: What if there is a report, but no smoke Q2: What if there is a report, and smoke Q2: What if there is a report, and smoke tampering fire alarm smoke YES exodus 0.03 was 0.02 0.97 was 0.01 report YES Example from : [Poole98   p37 1 Source = http:// www.swi.psy.uva.nl/projects/SWI-Prolog/download.html http://www.cs.ubc.ca/spider/poole/ci/code.tar.gz Files    = code/acp/bnet.pl code/acp/bnet_t1.pl Bayesian Tuning 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Non-na\357ve model bayesian network Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


19  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Low testing effort EXPLAINS 1\ some observed operational defects  and 2\ low pre-release defects 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02  Ancestors  ancestor\(X,Y\:-parent\(X,Y  ancestor\(X,Y\:-parent\(X,Z\ancestor\(Z,Y  Lists  member\(X,[X|Z   member\(X,[Y|Z me mb er X Z   append X X   append\([X|X Y s X Z s  a ppe nd X s Ys Z s  Example Example action action hypothesis hypothesis p\(b,[b add clause p\(X,Y   specialize p\(X,[V p\(x,[a specialize p\(X,[X p\(b,[a add clause p\(X,[X p\(X,[V p\(X W Inductive Logic Programming Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


20  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 East-West trains 1. TRAINS GOING EAST 2. TRAINS GOING WEST 1 2 3 4 5 1 2 3 4 5 1. TRAINS GOING EAST 2. TRAINS GOING WEST 1 2 3 4 5 1 2 3 4 5 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 ILP representation  Example eastbound\(t1  Background theory car\(t1,c1\      car\(t1,c2\       car\(t1,c3\.      car\(t1,c4 rectangle\(c1\  rectangle\(c2\     rectangle\(c3\.   rectangle\(c4 short\(c1\      long\(c2\.          short\(c3\       long\(c4 none\(c1\.        none\(c2\.          peaked\(c3\.      none\(c4 two_wheels\(c1\  three_wheels\(c2\two_wheels\(c3\two_wheels\(c4 load\(c1,l1\.     load\(c2,l2\       load\(c3,l3\    load\(c4,l4 circle\(l1\      hexagon\(l2\       triangle\(l3\    rectangle\(l4 one_load\(l1\  one_load\(l2\.      one_load\(l3\    three_loads\(l4  Output ne\(C Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


21  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Predicting Correctness Almei NewID CN2 C4.5 C4.5_rule FOIL Accuracy 52 54 66 68 73 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 FOIL\222s best rule high\(A executable\(A,B maximum_statement_nesting_depth\(A,C lines_of_comments\(A,B commentsdivsize\(A,E n1\(A,F n2\(A,G less_or_equal\(E,F not less_or_equal\(B,G C <> 4 C <> 43 less_or_equal\(C,D High faults when comment density <= #operators and executable statements > #operators and max nesting <= number of lines of comments and max nesting is not 4 or 43 High faults when comment density <= #operators and executable statements > #operators and max nesting <= number of lines of comments and max nesting is not 4 or 43 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


22  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Inside  some learners  neural nets  genetic algorithms  decision tree learners  association rule learners  treatment learners  bayesian tuning  inductive logic programming 225 sub-symbolic locally guided descent symbolic, global search 225 recursive diversity reduction 225 this goes with that CLASS 225 this goes with that 225 asses 225 a little model goes a long way 225 Horn clauses  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case studies predicting effort \(45 predicting faults \(51 model-based ML \(54 early lifecycle project planning \(60 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


23  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case study How can we estimate earlier in the life cycle  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Predicting development times in months\Srinivasan95 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


24  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Bayes for effort Chulani99  The COCOMO-II project  Open-source software cost estimation  Reuse vs effort XH : multiple product lines VH : across product lines H : across program N : across project L  : none  Regression over data from 83 software projects  Regression conflicted with \223Delphi values\224  Tune regression values using Delphi expectations 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 Low N H VH XH Delphi Regression Adjusted Da ta   reus e low e rs effo r t Ex pe ct e d  reus e incre a se  effo r t    251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 COCOMO-II \(1998\COCOMO-II \(1997 Pred\(30 Pred\(25 Pred\(20 Pred\(X 52 49 46 83 projects 63 59 54 161 projects 7561 68 55 63 48 161 projectsbased on Bayesian 161 projectsbased on Delphi Percentage of estimated effort within X of actual Conclusion data + delphi tuning\a Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


25  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Neural Network Count the wi dge ts in the I n te r f ace to es ti m a te e f f o r t  Labels Edit Boxes Grid Boxes Check Boxes Buttons 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Neural Network Subsystem Pred\(25 MARE Buyer Admin 80 17.6 Buyer Client 80 14.6 Distribution Server 20 96.7 Supplier Client 90 12.2  12 Different Widgets Counted and associated with effort Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


26  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case study: Predicting software 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Predicting software  faults Khoshgoftaar99 Whi c h d o g s di d not ba r k  225 42 attri b ute s  in dat a s e t 225 Only 6 in the l e arnt th e o ry Diffe re nt attri b ute s than b e fore 225 223c au se s f a u l t 224  do m a in s pec i f i c 225 Me thod for fin d ing fa ult s  gen e r a l Whi c h d o g s di d not ba r k  225 42 attri b ute s  in dat a s e t 225 Only 6 in the l e arnt th e o ry Diffe re nt attri b ute s than b e fore 225 223c au se s f a u l t 224  do m a in s pec i f i c 225 Me thod for fin d ing fa ult s  gen e r a l Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


27  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Issue of generality  Specific conclusions may not apply to general projects  Proposal one  Intra-project learning  Lessons should generalize across the same developer methodology, application and tool set  Proposal two  Inter-project learning  Need larger training set  COCOMOII uses 161 projects  Note: two = N * one Khoshgoft good bad Tia bad good  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Model-based ML Bratko89,Pearc Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


28  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Model-based ML simple e.g sum\(X,  Y Z sum   sum   sum\(0 0 0 sum 0  sum 0  sum\(0   sum\(0   sum  Any sum  Any if X >0 X\222=      if X < 0 0 if X= 0  switch\(State,Volts,Amps switch\(on,       0,     Any switch\(off,      Any,   0 blub\(Mode,Light,Volts,Amps bulb\(blown,dark, Any 0 bulb\(ok,     light   bulb\(ok,    light   bulb\(ok,    dark 0 0 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 A qualitative circuit go  :tell\('circ.data'\ go1, told go1 :functor\(X,circuit,9\ forall\(X, example\(X example\(circuit\(Sw1,Sw2,Sw3,B1,B2,B3,L1,L2,L3\classification\(B1,B2,B3,Class format\('~a,~a,~a,~a,~a,~a,~a~n Sw1,Sw2,Sw3,L1,L2,L3,Class  classification\(B1, B2, B3,Class needs 2 our of three bulbs working classification\( ok, ok, B3,   good classification\( ok, B2, ok,   good classification\( B1, ok, ok,   good classification\( B1, B2, B3,   bad Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


29  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Results from > 700 examples circ.names good,bad switch1: on, off switch2: on, off switch3: on, off bulb1: light, dark bulb2: light, dark bulb3: light, dark Command line c4.5 -f circ -m 2 W a t c hing bulb1 tells us th e rest Insight f ul  Or dull W a t c hing bulb1 tells us th e rest Insight f ul  Or dull 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 More Model-based ML Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


30  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 ca n we r e v i s i t thos e warranti e s   Run 1 35,000 tions  Learn 1  Run 2 if Sw2c=off then 3264 tions  Learn 2  Run 2 if Sw2c=off n then 648 tions  Learn 3 Ca n\222t clos e  Sw3c warranty issu es No b u d g e t  for e x p e ns i v e ha rd wa r e 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 3 \223tunings\224 5 SLOC guesstimates 150,000 runs Treatments for software projects Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


31  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 flex=1 pmat=3 sced=2 rest anything from kc1 150,000 runs 150,000 runs Treatments for software projects \(ii 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 pmat=2 acap=2 sced=2 rest anything from kc1 30,000 runs 30,000 runs Treatments for software projects \(iii Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


32  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 ons discussion \(64 downloads \(69 further reading \(71 references \(72 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Will you try ML  Have we motivated you  Will you rush home and do ML on your data  Clearly  ML algorithms work  Caution  you may find it harder than you think Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


33  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Many ways to learn numerous case studies but there is still a problem Theme Learning is a solved problem \(sort of Data collecting and modeling is not 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Be warned match your ML goals to your software process level Project metrics coarse-grain conclusions Product metrics product learning Process metrics process learning Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


34  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Also, match your tool to task Task ML Tool Assembly line robot deciding what to reject Decision tree learner Repair robot trying to do the least to fix the rejected parts Treatment learner Predicting the life of a robot Neural Network Optimizing the assembly line Genetic Algorithm If clustering when no classes iation rule learning If simple background knowledge Bayesian If complex relational background knowledge ILP 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Have we learnt enough  Not yet  But wait Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


35  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Cost = $0  WEKA  E.g. http://www.cs.waikato.ac.nz/~ml/weka/: ML in JAVA 003 decision tree inducers,rule learners, naive Bayes, decision tables locally weighted regression  GDB_Net  http://nas.cl.uh.edu/boetticher/gdb_net.zip  TAR2  http://www.ece.ubc.ca/twiki/bin/view/Softeng/TreatmentLearner  APRIORI  http://fuzzy.cs.uni-magd eburg.de/~borgelt/apriori/apriori.html#download  And many others  E.g. ML  A public domain \223C\224 library of common algorithms  Naive Bayes, ID3, MC4 , Decision Tables ,   Holte's OneR CN2,\205  http://www.sgi.com/tech/mlc/utils.html 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Cost > $0  C4.5  Comes with the book Quinlan  C5.0  http://www.rulequest.com/download.html  Microsoft SQL SERVER 2000\231  Comes with numerous machine learning tools  Proprietary algorithms  Etc  223data mining\224 \223commercial software\224 in Google  3,340 links  223data mining consultancy\224 in Google  850 links Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


36  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Further reading  Mendonca  great rev i e w art i cl e on ML  Large list of available tools  All the things you can do with a decision tree [Menzies0  Treatment learning: [Menzies01a  Michalski\222s excellent survey of ML types [Michalski  Neural nets: [Boetticher01  Special issue SEKE journal, knowledge discovery Morasca99  Inductive logic programming [Bergadano95,Cohen95  Come by IJCAI 2011 and I\222ll tell you all about it\222s applications  Genetic algorithms: [Goldberg8  Bayesian learning [Cheeseman88 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 References  Agrawal  Agrawal, R., and T.Imeilinski and A.Swami \223Mining Association Rules between Sets of Items in Large Databases,\224 Proceedings of the 1993 ACM SIGMOD Conference Washington DC, USA  Bergadan  Bergadano, F., and D.Gunetti Inductive Logic Programming: From Machine Learning to Software Engineering The MIT Press, 1995  B  Berry, M. J. A., and G., Linoff Data Mining For Marketing, Sales, and Customer Support John Wiley Sons, Inc., New York, 1997  Boetticher01  Boetticher, G., "An Assessment of Metric Contribution in the Construction of a Neural Network-Based Effort Estimator Second International Workshop on Soft Computing Applied to Software Engineering  Enschade, NL, 2001 Available from http://nas.cl.uh.edu/boetticher/publications.html  Boetticher01  Boetticher, G., "Using Machine Learning to Predict Project Effort: Empirical Case Studies in Data-Starved Domains First International Workshop on Model-based Requirements Engineering San Diego, 2001 Available from http://nas.cl.uh.edu/boetticher/publications.html  Bradley  Bradley, P., U. Fayyad, and C. Reina. \223Scaling clustering algorithms to large databases\224. In KDD'98  B  Bratko, I., I. Mozetic, and N. Lavrac KARDIO: a Study in Deep and Qualitative Knowledge for Expert Systems MIT Press, 1989  Breim  Breiman, L., J. Friedman, R. Olshen, C. Stone, \223Classification and Regression Trees,\224 Wadsworth International Group, 1984 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


37  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 References  Burgess  Burgess, C.J., and Martin Lefley. \223Can genetic programming improve software effort estimation? A comparative evaluation,\224 Information and Software Technology er 2001  Cheesem  P. Cheeseman, D. Freeman, J. Kelly, M. Self, J. Stutz, and W. Taylor. \223Autoclass: a bayesian classification system,\224 In Proceedings of the Fifth International Conference on Machine Learning  Morgan Kaufman, 1988  Chulani  S.Chulani,  B. Boehm, and B. Steece 223Bayesian analysis of empirical software engineering cost models,\224 IEEE Transaction on Software Engineering 25\(4\ly/August  1999  Cohe  W. W. Cohen, \223Inductive specification recovery: Understanding software by learning  from example behaviors,\224 Automated Software Engineering 2:107-129, 1995  DeJon  DeJong, K.A., and Spears, W.M. "An Analysis of the Interacting Roles of Population Size and Crossover in Genetic Algorithms Proc. First Workshop Parallel Problem Solving from Nature  Springer-Verlag, Berlin, 1990  Dietteric  Dietterich, T. G., \223Machine Learning  Research: Four Current Directions,\224 AI Magazine 18 \(4\97 Pp. 97-136. Available from ftp://ftp.cs.orst.edu/pub/tgd/papers/aimag-survey.ps.gz  s  Feather, M.S., and T. Menzies: \223Converging on the Optimal Attainment of Requirements IEEE Joint Conference On Requirements Engineering  ICRE'02 and  RE'02 9-13th September, University of Essen, Germany, 2002. Available from http://tim.menzies.com/pdf/02re02.pdf 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 References  Fenton00  Fenton, N., and  M. Neil \223Software Metrics: A Roadmap,\224 International Conference on Software Engineering, 2000. Available from http://www.dcs.qmul.ac.uk/~norman/papers/metrics_roadmap.pdf  Goldberg  Goldberg, D.E Genetic Algorithms in Search, Optimization, and Machine Learning Addison-Wesley Reading, Massachusetts, 1989  Khoshgoftaar  Khoshgoftaar, T.M., and E.B. Allen. \223Model software quality with classification trees,\224 in H. Pham, editor 223Recent Advances in Reliability and Quality  Engineering\224, World Scientific, 1999  Mendonc  Mendonca, M., and N.L. Sunderhaft, \223Mining Software Engineering Data: A Survey,\224 A DACS State-ofthe-Art Report September 1999. Available from http://www.dacs.dtic.mil/techs/datamining  Menzie  Menzies, T., \223Practical Machine Learning for Software Engineering and Knowledge Engineering,\224 ftware Engineering and Knowledge Engineering volume 1, 2001\vailable from http://tim.menzies.com/pdf/00ml.pdf  Menzies01a  Menzies, T., and Y. Hu, \223Reusing models for requirements engineering,\224 First International Workshop on Model-based Requirements Engineering 2001. Available from http://tim.menzies.com/pdf/01reusere.pdf  Menzies01b  Menzies, T., and Y. Hu, \223Constraining discussions in requirements engineering,\224 First International Workshop on Model-based Requirements Engineering San Diego, 2001. Available from http://tim.menzies.com/pdf/01lesstalk.pdf  Menzie  Menzies. T., and J. Kiper, \223Better reasoning about software engineering activities,\224 Automated Software Engineering 2001. Available from http://tim.menzies.com/pdf/01ml4re.pdf Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


38  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02  Michalski90   Michalski, R.S., \223Toward a unified theory of learning,\224  In B.G. Buchanan and D.C. Wilkins, editors 223Reading in Knowledge  Acquisition and Learning\224, pages 7--38. Morgan Kaufmann, 1993  Mitchell  Mitchell, T Machine Learning McGraw-Hill, 1997  Morasca99  Morasca, S., and Gunther Ruhe, Guest editors' introduction of the Special issue on \223Knowledge Discovery from Software Engineering Data,\224 International Journal of Software Engineering and Knowledge Engineering October, 1999  Pearce  Pearce, D., \223The induction of fault diagnosis systems from qualitative models,\224 in Proc. AAAI-88 1988  Poole9  Poole, D. L.,  A. K. Mackworth, and R. G. Goebel Computational Intelligence: A Logical Approach  Oxford University Press, New York, 1998  Porter9  Porter, A.A., and R.W. Selby  \223Empirically guided software development using metric-based classification trees,\224 IEEE Software Pp. 46-54, March 1990  Quinla  Quinlan, R C4.5: Programs for Machine Learning Morgan Kaufman, 1992  Srinivasa  Srinivasan, K., and D. Fisher,  \223Machine learning approaches to estimating software development effort,\224 IEEE Transactions on Software Engi neering Pp. 126-137, February 1995  Tian9  Tian, J., and M.V. Zelkowitz 223Complexity measure evaluation and selection,\224 IEEE Transactions on Software Engineering 21\(8\p. 641-649,  August 1995  Webb0  Webb, G., \223Efficient search for association rules,\224 Proceeding of KDD-2000 Boston, MA,  2000  Zhang0  Zhang, Du, \223Applying Machine Learning Algorithms in Software Development,\224 Modelling Software System Structures in a fastly moving scenario Santa Margherita Ligure, Italy, 2000 References Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


