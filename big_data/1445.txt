A Prefix Tree-based Model for Mining Association Rules from Quantitative Temporal Data  Yo-Ping Huang and Li-Jen Kao Department of Computer Science and Engineering Tatung University Taipei, Taiwan 10451 R.O.C  E-mail yphuang@ttu.edu.tw  Frode-Eika Sandnes Faculty of Engineering Oslo University College Oslo, Norway  E-mail Frode-Eika.Sandnes@iu.hio.no  Abstract  There are two problems as we use conventional Boolean association rules mining algorithm to discover temporal association rules over the stock market to predict stock price variation. The first problem is that the discovered rules only consider associations between the presence and absence of variations of stock prices and the second problem is that the associations among stock price variations are within the same transaction day. For example, if stock A raises, then stock B raises the same day This Boolean temporal association rule reveals no information of quantitative variations of stock prices and can only predict price trend in the same day. In this paper we deal with the problem of mining temporal association rules in stock databases containing quantitative price variations to discover the associations among different transactions day. Our algorithm first employs data discretization concept to partition quantitative attributes into intervals and an adaptive Apriori method that cooperates with time sliding window concept and prefix tree is developed to find quantitative temporal association rules An example of such a rule might be “if stock A price variation raised 5% to 7% and stock B raised 2.5% to 5 the same day, then stock C will raise 0% to 2.5% in the next two days.” In this case, the st ock price variation is taking into consideration and the associated stock price variations belong to different transaction days. As compared with conventional methods, more useful results can be found from the proposed quantitative temporal association rules  Keywords data mining, quantitative temporal association rules, prefix tree 1. Introduction Conceptually, the problem of mining Boolean association rules over market basket data can be viewed as finding associations between the “1” values in the relational table where all the attributes are Boolean. However attributes can be quantitative in most business or scientific relational tables. One can mine the quantitative association rules by partitioning the quantitative attribute domain, and then transforming the problem into binary one. An example of a quantitative association rule might be “if company A’s stock closing price variation goes up 2.5% to 5%, then company B’s price variation goes up 5% to 7   The above quantitative association rule still reflects the relationship of stock price variations within the same transaction day. Comparing w ith the rule “if company A’s stock closing price goes up 1% to 3%, then company B’s price goes up 2% to 4% the next day.” You may find there is a fundamental difference between the above rules. The latter rule states the associations among items from different transaction records and is helpful for certain applications such as prediction. Finding temporal associations among different transaction days, we must break the barriers of transactions. However, the search space will increase a lot while th e barriers of transactions are broken. In order to limit the search space, a time sliding window is applied to span several transactions to reduce the search space Currently no data mining algorithms investigate the problems of how to quantitatively extract the temporal association rules over the stock price variation data. Our research aims to establish a scheme not only can get associations from stock dataset with quantitative attributes such as price variation but also can take temporal associations among stock transactions into consideration The proposed algorithm will first map the quantitative association rules problem into the Boolean association rules problem. In order to extract the temporal association rules the time sliding window is applied to span transactions to form inter-transactions. The number of the items will increase while we introduce the concept of inter-transactions [4 is will resu lt in m o re pro cessing  time to find frequent itemsets. An adaptive Apriori-like method based on the concept of prefix-tree is developed to reduce the processing time of finding frequent inter-itemsets The rest of this paper is organized as follows. In section 2 we summarize the problems at hand and introduce related works. In section 3 we describe our proposed algorithm and in section 4 two experiments are given to examine our algorithm. We will give a brief conclusion in section 5 2. Problem Definition In this section, we will describe the problems of mining quantitative temporal association rules. We will also give some definitions before describing our proposed algorithm 


2.1. Quantitative Attributes Many algorithms have been proposed to find the binary association rules in the past [2,5-8 Ho wever  th e attribu tes in a database may be either quantitative \(e.g., stock closing price, age, income orical \(e.g., gender\The algorithm proposed by Srikant et al. finds the association rules by partitioning the quantitative attribute domain combining adjacent partitions and then transforming the problem into binary one [9  T a bl e 1  gi ves a n e x am pl e wi t h  a quantitative attribute “age”. Table 2 shows the transformed result for attribute “age” in Table 1. Age is partitioned into three intervals: {young| age 000 20, 29   middle age| age 000 30, 45  an d {sen io r age 000 46, 99 There are several mapping problems with partitioning quantitative attribute into disjoint intervals. First, if the number of intervals for a quantitative attribute \(or values, if the attribute is not partitioned\ is large, the support for any single interval can be low. Hence, without using larger intervals, some rules involving this attribute may not be found because they are lack of minimum support. Second some information lost whenever we partition the values into intervals. Some rules may have minimum confidence only when an item in the antecedent consists of a single value \(or a small interval\his information loss increases as the interval sizes become larger To solve the first problem, we can combine two or more adjacent intervals. The second problem can be solved by increasing the number of interv als. However, increasing the number of intervals and followed by simultaneously combining adjacent intervals ma y result in the increase of number of rules. Many of these rules are not interesting to users. Srikan ovided a formula to get a reasonable number of inte rvals according to maximum support, minimum support and number of quantitative attributes 2.2. Inter-transaction Association Rules Tung et al. proposed a framework for mining inter-transaction association rules that is based on Apriori algorithm [1 is section   we are go i n g to in t r odu ce some important concepts and give some definitions before dealing with the problem of inter-transaction association rules mining Definition 1. Let I  i 1  i 2  i k be a set of items. Let D  be a dimensional attribute and Dom  D e the domain of D A transaction database is a database containing records in the form d  I j  d  000  Dom  D nd I j  000  I  We call this kind of database a 1-dimensional database  The dimensional attribute is used to describe the properties associated with the items, such as time and location. It is assumed that the domain of the dimensional attribute is ordinal and can be divided into equal length intervals. For example, time can be divided into day, week month, etc. Without loss of generality, these intervals can be represented by integers 0, 1, 2, etc An inter-transaction association rule that spans across m  intervals is found if an association exists between items that are m intervals apart. Many resources may be required to discover all possible inter-transaction association rules that may span across different inte rvals. Beside, users may not be interested in the rules that span longer than a certain number of intervals. In order to avoid spending unnecessary resources to mine the rules which users are not interested in a sliding window denoted by w is introduced. When mining inter-transaction association rules, only the rules spanning shorter than or equal to w intervals will be discovered Users can thus use sliding window to avoid mining the rules that span across wide intervals. The following is an example to illustrate this concept Example 1. Figure 1 shows a 1-dimensional transaction database T with its dimensional attribute, trading day. In database, five transactions locate at intervals 1, 3, 6, 9 and 11. Assuming that the length of sliding window is 4 we will have five sliding w indows W 1 W 2 W 3 W 4 and W 5 starting at the addresses of 1, 3, 6, 9, and 11 respectively. From the figure, it can be seen that the sub-window W 1 co nt ai ns i t e m s  a  b  e and g while the sub-window W 1 co nt ai ns  c  f and i  Each sliding window forms an inter-transaction. An inter-transaction M that is contained within W will be denoted as follows  M  i k  j  i k  000  W  j  000d  k  000d  u 0 000d  j  000d  w 1}, where W is a sliding window with w intervals and u is the number of items in I i 1  i 2  i u  In example 1, the inter-transaction in W 1 will be a 0 b 0 e 0\; g\(0 c 2 f 2 i 2\istinguish the items in an inter-transaction from the items in a traditional transaction, the items in an inter-transaction are called inter-items. We denote the set of all possible inter-items as I 000c Given I and w we will have I 000c  i 1 0 i 1  w 1 i 2 0 i 2  w 1 i u 0 i u  w 1 Now, we can define the concept of inter-transaction association rule Definition 2. An inter-transaction itemset is a set of inter-items B  000  I 000c such that 000\007 i k 0 000  B 1 000d  k  000d  u  Definition 3. An inter-transaction association rule has the form X  000  Y where 1 X  000  I 000c  Y  000  I 000c  2 000\007 i k 0 000  X 1 000d  k  000d  u  3 000\007 i k  j  000  Y 1 000d  k  000d  u  j  000z 0 4 X  000  Y  Definition 4. Let MT xy be the set of inter-transactions that contain a set of inter-items X  000  Y and MT x be the set of inter-transactions that contain X Let S be the number of transactions in the transaction database. Then, the support and confidence of an inter-transaction association rule X  000  Y are defined as 


  sup x xy xy T T confidence  S T port 000 000  Li ke t h e m i ni n g al g o ri t h m fo r classical association rule a mi n i mu m s u p p o r t  mi n s u p  a n d a mi n i m u m c o n f i d en c e   min c o n f will b e  g i v e n and our task is to d i sco v e r t h e in ter-tran s action asso ciation ru les fro m  th e tran saction dat a base wi t h  sup p o rt a nd c o nfi d ence great er t h a n o r eq u a l  t o t h e mi n i mu m r e q u i r e me n t s   2.3. Itemset Pr efix T r ee In o r de r t o  fi n d t h e f r e que nt  i t e m s et s, we h a ve t o c o u n t  ev ery po ssib l e co m b in atio n o f item s in th e transactio ns A  speci al ki n d  of dat a st ru ct ure  pre f i x t r ee i s  im pl em ent e d t o  sto r e the coun ters fo r th e item s e t s. Th e prefix tree no t on ly  allo ws u s to st o r e item s ets ef ficien tly \(u sing little me m o ry but al so s u pp ort s easy  p r oc essi ng  of t h e t r ansact i o ns  3    The st ruct ure of a full ite m s et pre f ix t r ee e x am ple is shown  in Figu re 2  Each  n S de notes a counter for a n ite m s et S The  edge l a bel s  o n  a pat h f r om t h e r o ot t o  som e n ode s p eci fy t h e  comm on part of the item s ets f o r wh ich th ere are coun ters in  t h at no de Si n ce t h e com m o n pa rt w oul d b e a pre f i x i f  w e  were d ealin g with sequ en ces in stead of sets su ch a d a ta  s t r u c t ur e is commo n l y c a lle d a p r ef ix tr ee  S i n c e  w e ar e  d ealin g wit h sets, no t sequ ences, th is is th e reason  wh y th i s  tree struct ure i s unbala nced n abc for i n stance, is the sam e  as  n bca an d th er ef or e o n l y on e of th ese co un ter s is n e ed ed During th e first step  o f t h e Apriori algo rit h m th is tree is created lev e l b y lev e l. Th at is, in a first trav ersal o f the tran saction s th e frequ en cies of th e 1-ite m sets are det e rm i n ed \(t h e ro ot  no de i s  created econd t r ave r sa l th e 2-item se ts are ch eck ed t h e secon d tree lev e l is  creat ed—t he c h i l d re n o f t h e r oot  n d s o  on  The a dva nt ag e  of using prefi x t r ee is that  it is unnecess a ry to generat e  candi date sets and the r efore the ef ficiency can be greatl y  im pro v ed  3 The Pr oposed Mining Pr ocesses Our m i n i n g  p r o cess of qu an titativ e tem p o r al asso ciatio n rul e s fr om  st ock pri ce vari at i on dat a ba se c a n be di vi de d  in to fou r  step s: d a ta preparatio n, q u a n t itativ e attrib u t e  t r ans f o r m a ti on f r eq ue nt  in ter-tran sactio n item s ets di sco v ery  an d associ at i o n r u l e s ge nerat i o n  1  t a  Pre p ar ati o n  T h e first step is t o  orga nize the tran saction s  based on in terv als of th e tran saction ti me  attrib u t e For ex am p l e, to  find th e l o ng-term v a riation trend  of st oc k p r i ces acr oss di ffe re nt  week s or m ont hs we  nee d  to co nv ert d a ily p r ices v a riatio n in t o  week ly group  o r  m ont hl y gr ou p   2  an tit a ti ve A ttrib ute Transf orm a tion Th e second  step is to p a rtitio n st o c k p r ice v a riation attri b u t e in t o  in terv als A qu an titativ e attrib u t e m a y b e  p a rtitio n e d in t o  in terv als, and th e in terv al s are m a pped to consec utive  in teg e rs, such  th at th e o r d e r o f th e i n terv als is p r eserv e d   W i t h ou t lo ss o f  g e n e rality, th ese m a p p i n g let u s treat a d a tab a se as a set o f attribu t e, in teg e r v a lu e> p a irs 3 Fre quen t Inter Tran sac t ion Itemse t s Discover y The  trans f orm e d da ta set from pre v ious phase ca n be treated as  a mark et-b ased d a ta set Assume in to tal t h ere are l ite m s an d  let I f b e t h e new d a ta set of all ite m s th at is tran sfo r m e d fr om t h e pre v i ous p h ase  Let  W b e a tim e wind ow with  w  in terv als along th e tim e a t trib u t e We no w red e fin e a n  in ter-tran s action  M c ont ai ne d wi t h i n  W to be M  i x  t  i x  000  W  t  1  000d  x  000d  l  0 000d  t  000d  w 1  We al so nee d t o re de fi ne t h e set of al l possi bl e  in ter-item s as  f I 000c   i 1 0   i 1  w  1  i 2 0    i 2  w  1 i l 0  i l  w 1 Now we c o uld proceed t o fi nd  fre que nt item s ets fro m inter-tra nsactio n An  in ter-tran s action  k item s et is t h e set B  000  such that 000\007 i f I 000c j 0   000  B 1 000d  j  000d  l Sin c e qu an titativ e attrib u t e tran sform a t i o n  and i n t e r t r a n s act i ons ge nerat e m o re dat a t o  ou r sy st em ou r  alg o rith m will bu ild an ite mset prefix tree to exp e d ite t h e fi n d i n g o f t h e fre que nt i t e m s et s instead of using classical A p r i or i algo r i t h m    To bu ild an ite m s et p r efix tree, we so rt th e item s in  a transaction. T h en processing a t r ansa ction is a sim p le recursive proc edure. To proc e ss a tra n saction for a node of  th e tree 1  e ch ild correspo n d i ng to th e first item i n  th e tr an saction and pr o c ess t h e rem a in d e r of th e transaction  recursiv ely for th at ch ild an d \(2  i scard th e first ite m o f th e  transaction a n d process it re cursi v ely for t h e node itself In a node on t h e currently adde d level, howe ver, we increm ent a cou n t e r i n st e a d o f  pr ocee di ng t o a c h i l d n ode I n t h i s  wa y  o n th e curren t  lev e l all cou n t ers for item s et s th at are p a rt o f  a transacti o n are prop erly in cre m en ted    4  soci ati o n Rules Ge nera tion  T h e ge nerat i o n of  te m p o r al asso ciatio n ru les is si m i lar to th e gen e ration  o f t h e  classical assoc i ation rules, e x cep t th e calcu latio n of ru les con f i d e n ce s h oul d be  sup  sup x xy where s u p xy  e su ppo rt v a lu e fo r item s et th at co n t ains a set o f item s  X  000  Y  an d sup x  th e supp ort v a lu e fo r item s e t th at con t ain s  ite m s  X  4. Experimental Results and Discussions In t h is section, we cond u c t two exp e rim e n t s: th e first  ex p e rim e n t will u s e a syn t hetic d a ta set th at is shown in Tab l e 3  and t h e seco nd ex p e ri m e n t will use th e 20 03 sto c k gr o u p i n dex va ri at i on dat a  fr o m Tai w an St oc k E x c h an ge 4.1. The First Experimental Result Th e fi rst ex am p l e is g i v e n to  illu strate h o w t h e pro p o s ed  fram e wo rk is ap p lied t o th e qu an tit ativ e te m p o r al  associ at i on r u l e s m i ni ng. Ta bl e 3 s h ows t h e o r i g i n al  3  st ocks p r i ce v a ri at i on dat a  To si m p l i f y our w o r k  we o n l y  consider the ra ise condition fo r each stoc k The quantitative at t r i but e “cl os i ng pri ce var i at i on” i s m a ppe d t o t h ree  in terv als, {raise little, if price go es up from 0  to  2  5   


raise medium, if price goes up from 2.5% to 5%} and raise high, if price goes up from 5% to 7%}. Table 4 shows the result after transformation. Next, we rename the fuzzy attribute {raise little} for company A to a 1, {raise medium} to a 2, and {raise high} to a 3. The same rule applies to companies B and C Figure 3 shows the result after this transformation. The sliding window length is set to 4 days, and we assume the minsup and minconf being 30% and 45%, respectively. Table 5  shows the 1-item candidate set C 1 and frequent 1-item set L 1   Table 6  shows the 2-item candidate set C 2 and frequent 2-item set L 2 From Table 7, we can find an inter-transaction association rule a 1\(0 b 2\(0 000  c 1\(3\, which means “if company A’s stock price raised 0% to 2.5% and company B’s stock price raised 2.5% to 5% the same day, then company C’s stock price will raise 0% to 2.5% three days later”. This temporal rule we generate not only can predict the stock price variation trend but also tell us how big the variation and when this variation will happen in the future If we try to discover the classical association rules by setting the same minimum support and confidence values the rule we get will be “if company A’s stock price raised little, then company B’s stock price raised medium the same day.” Comparing to our temporal association rule, the prediction function from the classical association rules has limited use and investors may dislike them. In the future we can apply our algorithm to other data types, for example temporal-spatio data set 4.2. The Second Experimental Result  The second experiment shows the improved performance from our proposed algorithm by incorporating the prefix tree instead of classi cal Apriori algorithm. In this experiment on the real stock data, we compare the itemset prefix tree to classical Apriori algorithm on processing time of finding frequent itemsets. There are 19 stock group index variation data and 244 transactions in database. After partitioning quantitative attribute into 7 intervals and setting sliding window size to 5, the total number of inter-items will be 665. Our test shows that the processing time of using itemset prefix tree to find frequent itemset is much fast than the classical Apriori algorithm. This is because we only need to scan the transactions to determine the prefix tree nodes \(itemsets\requency. Thus, the performance is gained especially when the number of items is big. The results are compared in Table 8 5. Conclusion In this paper we proposed a model to find quantitative temporal association rules that can predict the variations of events. In order to mine temporal inter-transaction association rules, the dimensional attribute and sliding window concepts were intr oduced into our framework Since items may increase drama tically, an itemset prefix tree was incorporated into reducing the complexity of finding frequent itemsets. The future work will include finding n dimensional inter-transaction association rules For example, by adding spatial attribute, one can mine spatial-temporal inter-transaction association rules in earth scientific data Acknowledgment This work is supported by National Science Council Taiwan, R.O.C. under Grants NSC93-2213-E-036-024 NSC92-2516-S-036-001, and by Tatung University under Grant B93-I01-032 References  A K H T u ng H L u J  Han a n d L F e ng E f fi c i e nt  mining of intertransaction association rules IEEE Trans on Knowledge and Data Engineering vol. 15, no. 1 pp.43-56, Jan./Feb. 2003   A. S a vas e re, E  Om i e ci nski  an d S  Na vat h e A n  efficient algorithm for mining association rules in large databases Proc. Int’l Conf. Very Large Data Bases pp 432-443, Sept. 1995 3 g elt an d R K r u s e I ndu ctio n of asso ciatio n ru les Apriori implementation Proc  15th Conference on Computational Statistics pp.395-400, August 2002   H. L u  J Ha n, a n d L Fen g  St o c k m ovem e nt and  n-dimensional intertransaction association rules Proc SIGMOD Workshop Research Issues on Data Mining and Knowledge Discovery vol. 12, pp.1-7, June 1998   J Ha n a n d M  Kam b er   Data Mining: Concept and Techniques Morgan Kaufmann, San Francisco, USA, 2001  S. Pa rk M.S. C h en and P.S. Yu, “An effective hash-based algorithm for mi ning association rules Proc ACM SIGMOD Int’l Conf. Management of Data  pp.175-186, May 1995 7 S  Ch en  J  H a n and P  S Y u  Da t a  min i n g  an  overview from a database perspective IEEE Trans. on Knowledge and Data Engineering vol. 8, no. 6, pp.866-883 1996 8 Agrawal and R  Srik ant, “Fast al g o rith m s fo r m i n i n g  association rules Proc. Int’l Conf. Very Large Data Bases  pp.487-499, Sept. 1994 9 R. Sri k ant and R. Agrawal Min i n g  qu an titativ e association rules in large relation tables Proc. of ACM SIGMOD Int’l Conf. Management of Data pp.1-12, 1996 Table 1. A database with a quantitative attribute “age” and a categorical attribute “gender ID Name Gender Age 1 Peter Male 28 2 Mary Female 31 3 Jim Male 29 4 John Male 51 5 Kelly Female 32 6 Smith Male 60 7 Amy Female 30 8 Vincent Male 29    


Table 2. The data transformed from Table 1. Gender is mapped to two attributes, male and female. Age is mapped to [20    30   45  a nd  4 6 9 9   ID Name Male Female Young 20, 29 Middle age 30, 45 Senior 46, 99 1 Peter 1 0 1 0 0 2 Mary 0 1 0 1 0 3 Jim 1 0 1 0 0 4 John 1 0 0 0 1 5 Kelly 0 1 0 1 0 6 Smith 1 0 0 0 1 7 Amy 0 1 0 1 0 8 Vincent 1 0 1 0 0 Table 3. The original stock price variation data Day Company A stock closing price variation Company B stock closing price variation Company C stock closing price variation 1 0.019 0.036 0.056 4   0.018 6 0.0176 0.041  9 0.0177 0.042 0.01 10  0.009 0.018 Table 4. The data transformed from Table 3  Company A stock closing price variation Company B stock closing price variation Company C stock closing price variation Day Raise little a1 Raise medium  a2 Raise high a3 Raise little b1 Raise medium b2 Raise high b3 Raise little c1 Raise medium c2 Raise high c3 1 1    1    1 4       1   6 1    1     9 1    1  1   10    1   1             Table 5. The 1-item candidate itemsets and the corresponding support value. \(minsup = 30% or 1.5 1-item candidate itemset Support value Frequent itemset a1\(0 3 Y a1\(2 1 N a1\(3 1 N a2\(0 0 N a2\(2 0 N b1\(0 1 N b1\(1 1 N b2\(0 3 Y b2\(2 1 N b2\(3 1 N b3\(0 0 N b3\(2 0 N b3\(3 0 N c1\(0 3 Y c1\(1 1 N c1\(3 2 Y c2\(0 0 N c2\(1 0 N c2\(3 0 N c3\(0 1 N Table 6. The 2-item candidate itemsets and the corresponding support value. \(minsup = 30% or 1.5 2-item candidate itemset Support value Frequent itemset a1\(0\ b2\(0 3 Y a1\(0\ c1\(3 2 Y b2\(0\, c1\(3 2 Y 


T a bl e 7  T h e 3i t e m candi dat e  i t e m s et s and t h e co rres p on di n g s u p p o rt  val u e. \(m i n sup  3 0  or 1  5   3-i t e m candi da t e  ite m s et Su pp ort val u e  Fre que nt  ite m s et a1 0  b 2 0    c1 3  2  Y  T a bl e 8   T h e e xpe ri m e nt al resul t s f o r t h e a s soci at i o n r u l e s m i ni ng fr om 200 3 st oc k gr ou p i n de x vari at i o n dat a  Algorithm  C l a s s i c a l  A p r i o r i  al gorithm  Item se t prefi x t r ee Nu m b er o f  in ter item s  Sm all in t e r item s  36 i n ter item s  5 in ter t r an sacti o n s  L a rg e i n t e ri t e m s  665 i n ter item s  244 in ter t r an sacti o n s  Sm all in t e r item s  36 i n ter item s  5 in ter t r an sacti o n s  L a rg e i n t e ri t e m s  665 i n ter item s  244 in ter t r an sacti o n s  C P U t i m e for m i n-support  25% \(se c ond 0  0 0 7  9 1  5  0  0 0 7  0  2  C P U t i m e for m i n-support  30% \(se c ond N  A  6 0  N  A  0  1 4  C P U t i m e for m i n-support  35% \(se c ond N  A  4 3  N  A  0  1 1  C P U t i m e for m i n-support  39% \(se c ond N  A  9  3  N  A  0  0 6  C P U t i m e for m i n-support  40% \(se c ond N  A  8  N  A  0  0 4   Day T  1 a, b, e, g 2   3 c, f  i  4   5   6 a, e d h 7   8   9  a   e   d  1 0   1 1  b   c   f  1 2   1 3   1 4   Fi gu re 1  A n 1 di m e nsi onal d a t a base wi t h  a sl i d i n g  wi nd o w of 4 i n t e r v al s   n ab n ac n ad n ae n bc n bd n be  n cd n ce  n de  n abc n abd n abe  n acd n ace n ade n bcd n bce n bde  n cde  n abcd n abce  n abde  n acde  n bcde  n abcde n a n b n c n d n e c d d d d d c d c d c b a b W5 W4 W3 W2 W1 d Fig u re 2   A fu ll ite m s et p r efix tree for five item s a, b, c, d and e Day T  1  a 1   b 2   c 3  2   3   4  c 1  5   6  a 1   b 2  7   8   9  a 1   b 2   c 1  1 0  b 1  c 1  1 1   1 2   1 3   W1 W2 W3 W4 Fi gu re 3 The  dat a set t r a n sf o r m e d fr om Tabl e 4 The sl i d i n g wi n d o w l e ng t h i s  4 day s  W5 


503 MFI that is frequent in more than one node as a global can didate. If a maximal itemset is frequent at all nodes, obvi ously it is also a global maximal frequent itemset. We just need to accumulate its local support counts and put it into the FrequentSet. Such global candidates, however, are very few. Fortunately, even though most itemsets in GC1 appear as local MFls in just one or a few nodes, many of them of ten have their supersets frequent in other nodes. In that case the support counts of the supersets of a candidate allow us to estimate the minimum support count of the candidate in those nodes. For example, suppose that itemset { A ,  B,  G is a local MFI with the local count of 4000 in node I, while A,  B ,  C, E ,  G} and { A ,  B ,  G, K }  are local MFIs in node 2 with local counts of 3800 and 4200, respectively. We can then estimate that the local support count of {A, B ,  G}  in node 2 should he at least 4200. By this way, we can esti mate the minimum support count of any itemset in a node if any of its supersets is frequent in that node. Obviously the estimated minimum support count o f a  candidate is the lagest  support count of all its supersets in that node Subset-Infrequency Based Pruning and Superset Frequency Based Pruning: During thc global mining phase, DMM maintains the following scts: GCk \( k  2 11 FrequentSet and InfrequentSer. They are changing dy namically with the progress of the mining process. The global mining phase continues until GC, is empty, for some k 2 1, to ensure that we will not miss any global maximal frequent itemset. Eventually, FrequentSet will include all the global MFIs. Since DMM uses Frequentset and InfrequentSet to perform the superset-frequency based pruning and the subset-infrequency based pruning maintaining these two sets without any rediindancy is important to make the pruning steps efficient. After each pass in the global mining phase, we determitle whether each global candidate is maximally frequent or not. If a global candidate is frequent, we put it into FrequentSet only if none of its supersets is already in that set. On the other hand, i f  a global candidate is infrequent. we put it into InfrequentSet only if none of its subsets is already in that set. For example, if {A, B, G, H }  is infrequent but A ,  H }  is already in InfrequentSet, we do not insert it into InfrequentSer, because any superset of { A ,  B,  G, H }  will be also pruned by {A,H} when the subset-infrequency based pruning is applied If a global candidate k-itemhet is identified as infrequent we split it into k \(k  - 1 as new candidates. However, some of them may not be a valid candidate for the next global pass if it appears in In frequentSet or has a subset in it. In that case, we need to split the invalid candidate into its largest proper subsets. For ex ample, if {A,  B, C, D }  is infrequent and its subset {A, D is in InfrequentSer, we will continue the splitting until we 2004 IEEE International Symposium on Cluster Computing and the Grid get the following new candidates: { A ,  B, C}, {B ,  C,  D A,B},  \( A ,  C}, { B , D }  and {C,D}.  In practice, these two pruning techniques can make the global candidate set shrink drastically for each pass 3.2.3 Cube-based Communication between Processors To perform the communication between processing nodes efficiently, we impose a logical binary n-cube structure on the processing nodes. Then, the nodes can exchange and merge the local count information through increasingly higher dimensional links between them [4]. In the n-cube there are 2n nodes, and each node has n-bit binary address Also, each node has n neighbor nodes which are directly linked to that node through differcnt dimensional links. For example, there are 8 nodes in a 3-cube structure, and node 0 0 0 001 010 100 through a I st-dimensional link, a 2nd-dimensional link, and a 3rd-dimensional link, respectively. Thus, in the n-cube all the nodes can exchange and merge their local counts in 


all the nodes can exchange and merge their local counts in T I  steps, through each of the n different dimensional links When n = 3, the three exchange and merge steps are step 1: node \( 1 where denotes a don't-care bit step 2: node \( 0 1 step 3: node \(0 1 O  3.3 Pseudo-code of DMM As we assume a homogeneous distributed computing environment where all the processing nodes are the same we just give the pseudo-code of the DMM algorithm running on a node P Local Mining Phase P" applies the sequential Max-Miner algorithm on D' and stores local MFIS into LM n = log, N :  I* N processing nodes are used for mining *I for \( j  = 1;j 5 n;j P' exchange and merge LM' with that of a neighbor node through the jth-dimensional link and the result is stored in LiM GC FrequenrSer= 6 foreach local MFI x in LM if the estimated global support o fx  is above the minimum support superset of x else put x into.GC1 then put x into FrequenrSer unless it contains a I apply the suprrset-frequency based pruning on GCI  504 Global Mining Phase InfrequenrSer= 4 global pass k ,  for k 2 1 while \(GCk # 4 Pi scans D' to count the candidates in GCk for \( j  = I ; j  5 n ; j P' exchange and merge the local counts of GCk members with a neighbor node through the jth-dimensional link foreach candidate x in GCx if the support of x is above the minimum support then put x into FrequentSer unless it contains a superset of x subset of x else put I into InfreqrcenrSer unless it contains a  foreach candidate inserted into InfrequenrSer in the current pass split the infrequent candidate into new candidates i.e., its largest subsets apply the subset-infrequency based pruning on these new candidates those candidates pruned by the subset-infrequency based pruning are put back into InfmquenrSer this process will continue until no new candidate either appears in InfrequenrSer or has any subset in i t 1 apply the superset-frequency based pruning on the new candidates remove those candidates which appear in Frequentset or put the new candidates that passed the two pruning operations into GCI,+~ for the next global pass k + I k have any superset in  it *I 1 GM = FrequentSer I* GM is the set of all maximal frequent itemsets 4 Performance Evaluation Our test platform is an &amp;node Linux cluster system 


Our test platform is an &amp;node Linux cluster system where nodes are connected by a Fast Ethernet switch. Each node has a 800 Mhz Pentium processor, 512 MB memory and a 40 GB disk drive. The processes are communicating using the MPI \(Message Passing Interface The databases used in our experiments are synthetic sales transaction databases generated as in [I]. All parameters used for generating databases are described in Table 1. For all databases, c = 0.5, m = 0.5, U = 0.1, ILI = 2000 and N I  = 1000. Table 2 lists all databases used in our perfor mance evaluation experiments. The size of each database is about 360 MB. When running the parallel algorithm on a database, we need to partition it into local databases. To balance the size of the local databases, each transaction is randomly allocated to a node 2004 IEEE Interna6onal Symposium on Cluster Computing and the Grid ID1 TI 111 ILI N I c m D In order to compare the performance of DMM and Count Distribution, we also implemented Count Distribution on the same platform Number of vansactiom in the database Average size of the transactions Average size of the maximal potentially frequent itemxu Numkraf maximal potentially frequent itemels Number of items Comlaliun level Mean of the comption level Variance of the camption level Table 1. Synthetic database parameters Table 2. Databases 4.1 Improvement of DMM over Count Distribu tion We ran both DMM and Count Distribution on different synthetic databases with different minsup values. If we de tine TCD and TDM,U as the execution times of CD and DMM, respectively, then the speedup of DMM over CD is TCD/TDMA,. In Table 3, the speedup of DMM is shown for different databases listed in the first column and for dif ferent values of minsup listed in the first row. In these ex periments, all 8 nodes in our cluster system were used Table 3. Speedup of DMM over CD \(8-node case As minsup decreases, DMM begins to show more and more improvement in our tests. As shown in Table 3, when the 111 value of the database is large, such as 8 or IO, even if minsup is as high as 0.58, DMM is faster than Count Dis tribution with a speedup above 2.5. It is because a large 11 value results in large frequent itemsets \(i.e., long patterns which benefits DMM. If minsup is less than 0.25%, DMM outperforms Count Distribution considerably DMM uses the local and global mining phases to re duce the overall synchronization and communication re quirement, but the global mining phase still needs several passes over the database and incurs some extra computation overhead. In our cluster system, since the communication speed between nodes is high, the benefit of reduced syn chronization and communication overhead is not enough to offset the effect of extra passes during the global mining phase. However, this feature of DMM may be attractive to some distributed systems where the communication cost is relatively high 4.2 Synchronization Requirement of DMM and Count Distribution We compared the number of synchronizations needed between processing nodes in DMM and Count Distribu 


between processing nodes in DMM and Count Distribu tion. In DMM, the local mining phase needs only one syn chronization. So, the total number of synchronizations is the number of passes needed in global mining phase plus one. Table 4 shows the comparison results. Here, we de fine SDMM and SCD as the numbers of synchronizations needed in DMM and CD, respectively. The first row of the table lists various values of minsup, and the first column lists the names of databases. The values in each entry of the table represents SD,MM :SCD Table 4. Comoarison of svnchronization re quirement When minsup is high, DMM is comparable to or a lit tle bit slower than Count Distribution. We also ran Apriori and Max-Miner for these cases, and found that Max-Miner doesn  t show much improvement over Apriori, either. That is because the high minsup limits the number of frequent itemsets and the length of those frequent itemsets. Thus the effect of look-ahead technique used by Max-Miner is not clearly shown, and naturally DMM has the same result DMM needed just two times of synchronization in the best cases. In other cases, the number of synchronizations needed for DMM was also much smaller than that of CD mainly because DMM requires only one synchronization during the local mining phase 505 2004 iEEE International Symposium on Cluster Computing and the Grid 4.3 Communication Requirement of DMM and Count Distribution In Count Distribution, all nodes have the same set of candidate itemsets in each pass. So, every node needs to exchange the same amount of count information with oth ers. In DMM, nodes need to exchange two types of data candidates and their counts. For the merging of local MFIs to construct the first global candidate set, each node per forms log, N send and log, N receive operations when N processing nodes are used. Since the set of local MFIs in one node may he different from those in other nodes, the amount of data each node sends or receives varies at each communication step. In each global pass, all nodes have the same global candidate set and exchange the same count in formation in log, N steps. To make it simple, we computed the average amount of data each node sends and receives during the whole mining Let  s consider the difference in the meaning of candi dates of the two algorithms as the number of candidates determines how much data need to he exchanged between processing nodes during the mining. In Count Distribution its candidates are the potential frequent itemsets generated as in Apriori. In DMM, after the local mining phase, can didates involved in the communication are just the potential maximal frequent itemsets; i.e., all local MFIs and some of their subsets that are not global MFIs. Compared with the set ofcandidates in Count Distribution, the set of candidates in DMM is very small. Thus, DMM requires much less communication than Count Distribution even though DMM needs to merge the candidates first \(after the local mining phase during the global mining phase When the minsup is very low, Count Distribution tends to discover a large number of short frequent patterns, so that there are a large number of candidates in early passes This results in a very high communication overhead be tween nodes. On the other hand, in  DMM, the increase in the number of short frequent patterns usually results in a small change in the number of local MFIs. Thus, even though low minsup value may affect the local mining phase of DMM, it has a relatively small impact on the communi cation overhead during the global mining phase. Therefore as the minsup decreases, DMM performs better than Count Distribution in terms of communication requirement 


Distribution in terms of communication requirement We implemented two versions of Count Distribution one is using the n-cube communication, and the other is using the all-to-all communication. We compared the av erage amount of data each node communicates with oth ers when we executed DMM and Count Distribution on the T30J08D2954K database with various values of minsup and the results are shown in Figure 4 As shown in Figure 4, the communication overhead of 500 450 400 a 350 B 300 g 200 250 150 s d 10.3 50 0 1 075 0 5  0 4  0 3  025 0 2  015 0 1 Minimum Suppon Figure 4. Comparison of communication re quirement DMM is much lower than that of Count Distribution. Even though DMM needs to cxchange candidates at the end of the local mining phase and some candidates may consist of many items, the total amount ofdata to he transferred is still relatively small, because Count Distribution must exchange the count information for much larger candidate sets. Com pared with Count Distribution using the all-to-all commu nication scheme, DMM demonstrates a big improvement in communication for all cases. Here, we  d like to emphasize that the advantage of DMM in communication requirement comes from its much smaller size of candidate sets and the n-cube communication scheme 4.4 Sensitivity Analysis of DMM In this section, we analyze the characteristics of the DMM algorithm in terms of speedup and sizeup. All tests were performed with a minsup of 0.25 4.4.1 Speedup We measured the speedup of DMM as the number of pro cessing nodes was increased while the database size re mained the same. For the databases listed in Table 2, we kept the same database size of 360 MB, but the database was partitioned into 2,  4, and 8 parts when the number of nodes were 2,4, and 8, respectively Figure 5 shows the execution time of DMM on the 2 node, 4-node, and 8-node systems. To demonstrate the speedup, we also ran the sequential Max-Miner for each database on a single node. As the number of nodes was doubled, the execution time of DMM was reduced by about 40% to 50%. Even though DMM may not achieve the linear speedup, it still shows a good speedup When DMM is executed on the T40110D2256K database using 2 nodes, its execution time is small. This is 506 2004 IEEE International Symposium on Cluster Computing and the Grid 16000 4000 3 12000 I ; iwoo E P 2 6000 w 4wo 2000 5 8000 8 0.7 because, when the number of nodes is small, the datadistri bution characteristic of each data partition is very similar to that of the whole database. So, after the local mining phase the initial global candidate set would be similar to the set of 


the initial global candidate set would be similar to the set of global MFIs. As a result, during the global mining phase the communication and synchronization overhead is low  0 2 4 6 8 1 0 Number of Nodes Figure 5. Speedup of DMM 4.4.2 Sizeup For the sizeup test, we fixed the system to the 8-node con figuration, and distributed each database listed in Table 2 to the 8 nodes. Then, we increased the local database sire at each node from 45 MB to 215 MB by duplicating the initial database partition allocated to the node. Thus, the data distribution characteristics remained the same as the local database size was increased. This is different from the speedup test, where the database repartitioning was per formed when the number of nodes was increased. The per formance of DMM is affected by the database repartitioning to some extent, although it is usually very small. During the sizeup test, the local mining result of DMM is not changed at all at each node The results shown in Figure 6 indicate that DMM has a very good sizeup property. Since increasing the size of local database did not affect the local mining result of DMM at each node, the total execution time increased just due to more disk U 0  and computation cost which scaled almost linearly with sizeup 5 Conclusions In this paper, we proposed a new parallel maximal fre quent itemset \(MFI Max-Miner \(DMM tems. DMM is a parallel version of Max-Miner, and it re quires low synchronization and communication overhead compared to other parallel algorithms. In DMM, Max Miner is applied on each database partition during the lo 0 45 90 135 180 225 270 Amwnt of Data per Node \(ME Figure 6. Sizeup of DMM cal mining phase. Only one synchronization is needed at thc end of this phase to construct thc initial global candi date set. In the global mining phase, a top-down search is performed on the candidate set, and a prefix tree is used to count the candidates with different length efficiently. Usu ally, just a few passes are needed to find all global maximal frequent itemsets. Thus, DMM largely reduces the number of synchronizations required between processing nodes Compared with Count Distribution, DMM shows a great improvement when some frequent itemscts are large \(i.e long patterns employed by DMM for efficient communication between nodes; and global support estimation, subset-infrequency based pruning, and superset-frequency based pruning are used to reduce the size of global candidate set. DMM has very good speedup and sizeup properties References I ]  R. Agrawal and R. Srikant  FdSt Algorithms for Mining As sociation Rules  Pmc. o f f h e  ZOrh VLDB Conf, 1994, pp 487499 2] R. Agrawal and I. C. Shafer  Parallel Mining of Association Rules  IEEE Trans. on Knowledge and Dura Engineering Vol. 8, No. 6, 1996, pp. 962-969 3] R. I. Bayardo  Efficient Mining Long Patlems from Databases  Proc. ofrhe ACM SIGMOD Inf  l Conf on Man ogemenr ofDara, 1998, pp. 85-91 4] S.  M. Chung and J. Yang  A Parallel Distributive Join Al gorithm for Cube-Connected Multiprocessors  IEEE Trans on Parallel and Disrribured Systems, Vol. 7, No. 2, 1996, pp 127-137 51 M. Snir, S. Otto. S. Huss-Lederman, D. Walker, and J. Don gana, MPI: The Complete Reference, The MIT Press, 1996 


gana, MPI: The Complete Reference, The MIT Press, 1996 6] R. Rymon  Search through Systematic Set Enumeralion   Pmc. of3rd Inr  l Con$ on Principles of Knowledge Repre sentation and Reasoning, 1992, pp. 539-550 507 pre></body></html 


sketch-index in answering aggregate queries. Then Section 5.2 studies the effect of approximating spatiotemporal data, while Section 5.3 presents preliminary results for mining association rules 5.1 Performance of sketch-indexes Due to the lack of real spatio-temporal datasets we generate synthetic data in a way similar to [SJLL00 TPS03] aiming at simulation of air traffic. We first adopt a real spatial dataset [Tiger] that contains 10k 2D points representing locations in the Long Beach county \(the data space is normalized to unit length on each dimension These points serve as the  airbases  At the initial timestamp 0, we generate 100k air planes, such that each plane \(i uniformly generated in [200,300], \(ii, iii destination that are two random different airbases, and iv  the velocity direction is determined by the orientation of the line segment connecting its source and destination airbases move continually according to their velocities. Once a plane reaches its destination, it flies towards another randomly selected also uniform in [0.02, 0.04 reports to its nearest airbase, or specifically, the database consists of tuples in the form &lt;time t, airbase b, plane p passenger # a&gt;, specifying that plane p with a passengers is closest to base b at time t A spatio-temporal count/sum query has two parameters the length qrlen of its query \(square number qtlen of timestamps covered by its interval. The actual extent of the window \(interval uniformly in the data space \(history, i.e., timestamps 0,100 air planes that report to airbases in qr during qt, while a sum query returns the sum of these planes  passengers. A workload consists of 100 queries with the same parameters qrlen and qtlen The disk page size is set to 1k in all cases \(the relatively small page size simulates situations where the database is much more voluminous specialized method for distinct spatio-temporal aggregation, we compare the sketch-index to the following relational approach that can be implemented in a DBMS. Specifically, we index the 4-tuple table lt;t,b,p,a&gt; using a B-tree on the time t column. Given a count query \(with window qr and interval qt SELECT distinct p FROM &lt;t,b,p,a&gt WHERE t?qt &amp; b contained in qr The performance of each method is measured as the average number of page accesses \(per query processing a workload. For the sketch-index, we also report the average \(relative Specifically, let acti and esti be the actual and estimated results of the i-th query in the workload; then the error equals \(1/100 set the number of bits in each sketch to 24, and vary the number of sketches The first experiment evaluates the space consumption Figure 5.1 shows the sketch index size as a function of the number of sketches used \(count- and sum-indexes have the same results more sketches are included, but is usually considerably smaller than the database size \(e.g., for 16 signatures, the size is only 40% the database size 0 20 40 60 80 


80 100 120 140 160 8 16 32 number of sketches size \(mega bytes database size Figure 5.1: Size comparison Next we demonstrate the superiority of the proposed sketch-pruning query algorithm, with respect to the na  ve one that applies only spatio-temporal predicates. Figure 5.2a illustrates the costs of both algorithms for countworkloads with qtlen=10 and various qrlen \(the index used in this case has 16 sketches also illustrate the performance of the relational method which, however, is clearly incomparable \(for qrlen?0.1, it is worse by an order of magnitude we omit this technique Sketch-pruning always outperforms na  ve \(e.g., eventually two times faster for qrlen=0.25 increases with qrlen, since queries returning larger results tend to set bits in the result sketch more quickly, thus enhancing the power of Heuristics 3.1 and 3.2. In Figure 5.2b, we compare the two methods by fixing qrlen to 0.15 and varying qtlen. Similar to the findings of [PTKZ02]4 both algorithms demonstrate  step-wise  growths in their costs, while sketch-pruning is again significantly faster The experiments with sum-workloads lead to the same observations, and therefore we evaluate sketch-indexes using sketch-pruning in the rest of the experiments 4 As explained in [PTKZ02], query processing accesses at most two paths from the root to the leaf level of each B-tree regardless the length of the query interval Proceedings of the 20th International Conference on Data Engineering \(ICDE  04 1063-6382/04 $ 20.00  2004 IEEE sketch-pruning naive relational 0 100 200 300 400 500 600 700 800 900 0.05 0.1 0.15 0.2 0.25 number of disk accesses query rectangle length 300 0 100 200 400 500 600 1 5 10 15 20 number of disk accesses query interval length a qtlen=10 b qrlen=0.15 Figure 5.2: Superiority of sketch-pruning \(count As discussed in Section 2, a large number of sketches reduces the variance in the resulting estimate. To verify this, Figure 5.3a plots the count-workload error of indexes 


using 8-, 16-, and 32- sketches, as a function of qrlen qtlen=10 error \(below 10 it increases slowly with qrlen used, however, the error rate is much higher \(up to 30 and has serious fluctuation, indicating the prediction is not robust. The performance of 16-sketch is in between these two extremes, or specifically, its accuracy is reasonably high \(average error around 15 much less fluctuation than 8-sketch 32-sketch 16-sketch 8-sketch relative error 0 5 10 15 20 25 30 35 0.05 0.1 0.15 0.2 0.25 query rectangle length relative error 0 5 10 15 20 25 30 35 1 5 10 15 20 query interval length a qtlen=10, count b qrlen=0.15, count relative error query rectangle length 0 5 10 15 20 25 0.05 0.1 0.15 0.2 0.25 relative error query interval length 0 5 10 15 20 25 30 1 5 10 15 20 c qtlen=10, sum d qrlen=0.15, sum Figure 5.3: Accuracy of the approximate results The same phenomena are confirmed in Figures 5.3b where we fix qrlen to 0.15 and vary qtlen 5.3d \(results for sum-workloads number of sketches improves the estimation accuracy, it also leads to higher space requirements \(as shown in Figure 5.1 Figures 5.4a and 5.4b show the number of disk accesses for the settings of Figures 5.3a and 5.3b. All indexes have almost the same behavior, while the 32-sketch is clearly more expensive than the other two indexes. The interesting observation is that 8- and 16-sketches have 


interesting observation is that 8- and 16-sketches have almost the same overhead due to the similar heights of their B-trees. Since the diagrams for sum-workloads illustrate \(almost avoid redundancy 32-sketch 16-sketch 8-sketch number of disk accesses query rectangle length 0 50 100 150 200 250 300 350 400 0.05 0.1 0.15 0.2 0.25 number of disk accesses query interval length 0 50 100 150 200 250 300 350 1 5 10 15 20 a qtlen=10 b qrlen=0.15 Figure 5.4: Costs of indexes with various signatures Summary: The sketch index constitutes an effective method for approximate spatio-temporal \(distinct aggregate processing. Particularly, the best tradeoff between space, query time, and estimation accuracy obtained by 16 sketches, which leads to size around 40 the database, fast response time \(an order of magnitude faster than the relational method average relative error 5.2 Approximating spatio-temporal data We proceed to study the efficiency of using sketches to approximate spatio-temporal data \(proposed in Section 4.1 as in the last section, except that at each timestamp all airplanes report their locations to a central server \(instead of their respective nearest bases maintains a table in the form &lt;time t, plane p, x, y&gt;, where x,y with parameters qrlen and qtlen distinct planes satisfying the spatial and temporal conditions. For comparison, we index the table using a 3D R*-tree on the columns time, x, and y. Given a query, this tree facilitates the retrieval of all qualifying tuples, after which a post-processing step is performed to obtain the Proceedings of the 20th International Conference on Data Engineering \(ICDE  04 1063-6382/04 $ 20.00  2004 IEEE number of distinct planes \(in the sequel, we refer to this method as 3DR method introduces a regular res  res grid of the data space, where the resolution res is a parameter. We adopt 16 sketches because, as mentioned earlier, this number gives the best overall performance Figure 5.5 compares the sizes of the resulting sketch indexes \(obtained with resolutions res=25, 50, 100 the database size. In all cases, we achieve high compression rate \(e.g., the rate is 25% for res=25 evaluate the query efficiency, we first set the resolution to the median value 50, and use the sketch index to answer workloads with various qrlen \(qtlen=10 


workloads with various qrlen \(qtlen=10 size \(mega bytes database size 0 20 40 60 80 100 120 140 160 25 50 100 resolution Figure 5.5: Size reduction Figure 5.6a shows the query costs \(together with the error in each case method. The sketch index is faster than 3DR by an order of magnitude \(note that the vertical axis is in logarithmic scale around 15% error observations using workloads with different qtlen Finally, we examine the effect of resolution res using a workload with qrlen=0.15 and qtlen=10. As shown in Figure 5.6c, larger res incurs higher query overhead, but improves the estimation accuracy Summary: The proposed sketch method can be used to efficiently approximate spatio-temporal data for aggregate processing. It consumes significantly smaller space, and answers a query almost in real-time with low error 3D Rsketch number of disk accesses query rectangle length 1 10 100 1k 10k 0.05 0.1 0.15 0.2 0.25 16 14% 15 15% 13 relative error number of disk accesses query interval length 1 10 100 1k 10k 1 5 10 15 20 16 15% 15% 12% 11 relative error a qtlen=10, res=25 b qrlen=0.15, res=25 0 500 1000 1500 2000 2500 25 50 100 number of disk accesses resolution 20% 15% 14 relative error c qrlen=0.15, qtlen=10 


c qrlen=0.15, qtlen=10 Figure 5.6: Query efficiency \(costs and error 5.3 Mining association rules To evaluate the proposed algorithm for mining spatiotemporal association rules, we first artificially formulate 1000 association rules in the form \(r1,T,90 with 90% confidence i randomly picked from 10k ones, \(ii in at most one rule, and \(iii Then, at each of the following 100 timestamps, we assign 100k objects to the 10k regions following these rules. We execute our algorithms \(using 16 sketches these rules, and measure \(i  correct  rules divided by the total number of discovered rules, and \(ii successfully mined Figures 5.7a and 5.7b illustrate the precision and recall as a function of T respectively. Our algorithm has good precision \(close to 90 majority of the rules discovered are correct. The recall however, is relatively low for short T, but gradually increases \(90% for T=25 evaluated in the previous sections, the estimation error decreases as the query result becomes larger \(i.e., the case for higher T 78 80 82 84 86 88 90 92 94 96 5 10 2015 25 precision HT 78 80 82 84 86 88 90 92 94 96 5 10 2015 25 recall HT a b Figure 5.7: Efficiency of the mining algorithm Summary: The preliminary results justify the usefulness of our mining algorithm, whose efficiency improves as T increases Proceedings of the 20th International Conference on Data Engineering \(ICDE  04 1063-6382/04 $ 20.00  2004 IEEE 6. Conclusions While efficient aggregation is the objective of most spatio-temporal applications in practice, the existing solutions either incur prohibitive space consumption and query time, or are not able to return useful aggregate results due to the distinct counting problem. In this paper we propose the sketch index that integrates traditional approximate counting techniques with spatio-temporal indexes. Sketch indexes use a highly optimized query algorithm resulting in both smaller database size and faster query time. Our experiments show that while a sketch index consumes only a fraction of the space required for a conventional database, it can process 


required for a conventional database, it can process queries an order of magnitude faster with average relative error less than 15 While we chose to use FM sketches, our methodology can leverage any sketches allowing union operations Comparing the efficiency of different sketches constitutes a direction for future work, as well as further investigation of more sophisticated algorithms for mining association rules. For example, heuristics similar to those used for searching sketch indexes may be applied to improve the brute-force implementation ACKNOWLEDGEMENTS Yufei Tao and Dimitris Papadias were supported by grant HKUST 6197/02E from Hong Kong RGC. George Kollios, Jeffrey Considine and were Feifei Li supported by NSF CAREER IIS-0133825 and NSF IIS-0308213 grants References BKSS90] Beckmann, N., Kriegel, H., Schneider, R Seeger, B. The R*-tree: An Efficient and Robust Access Method for Points and Rectangles. SIGMOD, 1990 CDD+01] Chaudhuri, S., Das, G., Datar, M., Motwani R., Narasayya, V. Overcoming Limitations of Sampling for Aggregation Queries. ICDE 2001 CLKB04] Jeffrey Considine, Feifei Li, George Kollios John Byers. Approximate aggregation techniques for sensor databases. ICDE, 2004 CR94] Chen, C., Roussopoulos, N. Adaptive Selectivity Estimation Using Query Feedback. SIGMOD, 1994 FM85] Flajolet, P., Martin, G. Probabilistic Counting Algorithms for Data Base Applications JCSS, 32\(2 G84] Guttman, A. R-Trees: A Dynamic Index Structure for Spatial Searching. SIGMOD 1984 GAA03] Govindarajan, S., Agarwal, P., Arge, L. CRBTree: An Efficient Indexing Scheme for Range Aggregate Queries. ICDT, 2003 GGR03] Ganguly, S., Garofalakis, M., Rastogi, R Processing Set Expressions Over Continuous Update Streams. SIGMOD, 2003 HHW97] Hellerstein, J., Haas, P., Wang, H. Online Aggregation. SIGMOD, 1997 JL99] Jurgens, M., Lenz, H. PISA: Performance Models for Index Structures with and without Aggregated Data. SSDBM, 1999 LM01] Lazaridis, I., Mehrotra, S. Progressive Approximate Aggregate Queries with a Multi-Resolution Tree Structure. SIGMOD 2001 PGF02] Palmer, C., Gibbons, P., Faloutsos, C. ANF A Fast and Scalable Tool for Data Mining in Massive Graphs. SIGKDD, 2002 PKZT01] Papadias,  D., Kalnis, P.,  Zhang, J., Tao, Y Efficient OLAP Operations in Spatial Data Warehouses. SSTD, 2001 PTKZ02] Papadias, D., Tao, Y., Kalnis, P., Zhang, J Indexing Spatio-Temporal Data Warehouses ICDE, 2002 SJLL00] Saltenis, S., Jensen, C., Leutenegger, S Lopez, M.A. Indexing the Positions of Continuously Moving Objects. SIGMOD 2000 SRF87] Sellis, T., Roussopoulos, N., Faloutsos, C The R+-tree: A Dynamic Index for MultiDimensional Objects. VLDB, 1987 TGIK02] Thaper, N., Guha, S., Indyk, P., Koudas, N Dynamic Multidimensional Histograms 


SIGMOD, 2002 Tiger] www.census.gov/geo/www/tiger TPS03] Tao, Y., Papadias, D., Sun, J. The TPR*Tree: An Optimized Spatio-Temporal Access Method for Predictive Queries. VLDB, 2003 TPZ02] Tao, Y., Papadias, D., Zhang, J. Aggregate Processing of Planar Points. EDBT, 2002 TSP03] Tao, Y., Sun, J., Papadias, D. Analysis of Predictive Spatio-Temporal Queries. TODS 28\(4 ZMT+01] Zhang, D., Markowetz, A., Tsotras, V Gunopulos, D., Seeger, B. Efficient Computation of Temporal Aggregates with Range Predicates. PODS, 2001 ZTG02] Zhang, D., Tsotras, V., Gunopulos, D Efficient Aggregation over Objects with Extent PODS, 2002 Proceedings of the 20th International Conference on Data Engineering \(ICDE  04 1063-6382/04 $ 20.00  2004 IEEE pre></body></html 


