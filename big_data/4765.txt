Virtual Machine Portabilit y-ANovel Approach Parshant Tyagi Divya Kapil R C Joshi Department of Computer and Science and Engineering Graphic Era University Dehradun India monutg89 divya.k.rksh chancellor.geu Emmanuel S Pilli Department of Computer Engineering Malaviya National Institute of Technology Jaipur Jaipur India espilli.cse@mnit.ac.in 
Abstract 
The rise of cloud computing has been driven by the beneìts the cheapest purveyor of application hosting storage infrastructure huge cost savings with low initial investment elasticity and scalability ease of adoption operational efìciency 
on-demand resources and the use of equipment that is largely abstracted from the user and enterprise and how the virtualization has changed the foundation of computing In other terms the virtualization is the process that turns the hardware bound entity in to software based component and the end result comes in to the form of VM Current virtualization software supports transparent VM migration between physical servers on the same LAN but WAN migration remains a challenge due to the need for network reconìguration and storage migration With this paper our main concern is to present the virtual machine portability VMP is one of the most important futuristic aspects of Virtual machine migration the term VMP requires that cloud customers can keep their VM including the preìx-when migrate from one 
cloud services provider to another avoiding the costs of switching to new VM conìguration Keywords-Cloud Computing Virtualization Live Virtual Machine Migration 
I I NTRODUCTION With the rapid growth of cloud computing it is very easy to access computing resources without the burden of purchasing updating managing and maintaining the resources Cloud computing provides the illusion of inìnite computing resources which are available from anywhere anytime on demand Cloud service provider manage computing resources at data center and provide these resources to the consumer Infrastructure software platform are offered as service in a pay-as-you-go manner to users Cloud computing makes better use of distributed resources and put them together to solve 
the complex computational problems Most cloud platforms use virtualized data centers which maximize the computing resources utilization Cloud computing is based on utility computing in which resources are provisioned on-demand and adopts its pricing scheme fully due to economical reasons Resources utilization can be maximized and operating costs can be minimized by service providers Users do not need to worry about their data backups because if something happen wrong components fail it is service providerês responsibility to make data available.Virtualization is gaining momentum in the information technology world and emerge as a key technology of cloud computing Virtualization is not a new concept cost savings and manageability are the reasons for the recent rising It also supports service-oriented architectures 
isolated secure systems and exible deployment Virtualization allows to run multiple virtual machines on a single host A virtual machine VM is an abstraction layer between hardware and the user Virtual machines run operating systems and its applications A host operating system can run many virtual machines and shares system hardware components such as CPUs disk memory and I/O among virtual serv Virtualization facilitates server consolidation live migration and resource isolation Live virtual machine migration is the process in which one VM or many VMs are migrated from one physical host to another and they appear to be responsive all the time from userês perspective The service availability can be improved by moving less loaded VMs to another host 
so that resources could be assigned to more loaded VMs It has many beneìts such as energy saving load balancing and online maintenance There are large variety of Cloud services and the great number of service providers The service providers use Service Level Agreements SLAs to express and negotiate user requirements and offer their services Many live migration technologies are proposed to improve migration efìciency within cluster environment or data centers of same cloud service providers In existing technologies there is no such a mechanism in which a user can continue with same service VM but with different service provider due to some difìculties with previous provider In this paper we are proposing a new idea in which a user can 
always keep his virtual machine with same conìguration also with different service provider We call this mechanism VMP Virtual Machine Portability This is the rst idea in which a user can change his service provider but he can continue with his previous virtual machine The remainder of the paper is organized as follows Section II describes the live virtual machine migration in which we describe virtualization and its type and live migration reasons In section III we discuss related work which are categorized into virtual machine migration in cluster modern data centers and cloud data centers We propose our idea in section IV with architecture description and advantages of this mechanism In Section V we show implementation work with eucalyptus tool 
Section VI concludes the paper II L IVE V IRTUAL M ACHINE M IGRATION 
Virtualization technology is used to maximize the utilization of hardware resources It allows multiple operating systems run concurrently on the same physical machine It splits up a physical machine into several virtual machines A virtual machine can be deìned as It is a software implementation of a computing environment in which an operating 
A Virtualization 
2013 International Conference on Cloud Computing and Big Data 978-1-4799-2829-3/13 $26.00 © 2013 IEEE DOI 10.1109/CLOUDCOM-ASIA.2013.108 240 
2013 International Conference on Cloud Computing and Big Data 978-1-4799-2830-9/14 $31.00 © 2014 IEEE DOI 10.1109/CLOUDCOM-ASIA.2013.108 240 


system or program can be installed and run V irtualization is the key technology in cloud computing It is the most efìcient solution resource management in cloud computing Virtualization technology organizes the computing resources exibly and it unscrambles the hardware and software architecture dependency Virtualization technology also facilitates resource sharing cost efìciency fault tolerance application isolation portability A layer called hypervisor separates the hardware resources and provide the virtual machines VM VMs act like real physical machines they use their virtual hardware resources Live migration is one of the key features of virtualization technology which makes it attractive Live migration allows to administrator to move running virtual machine or VMs from one physical server to another It results high availability of services which is very beneìcial for service providers There are two main types of virtualization Type I Bare Metal In this type VMM Virtual Machine Monitor is installed as a primary boot system on the hardware Bare metal hypervisors run directly on the hardware and control the hardware and manage the guest operating system i.e VMM has full control over all virtual machines.Examples are Citrix XenServ VMw are ESX/ESXi[4 KVM[5 and Microsoft Hyper hypervisors Fig 1 Type I Type II Hosted In this type hypervisors run within conventional operating system environment Hypervisor is installed on the host operating system Above hypervisor layer guest operating systems or virtual machines are installed Examples are VMware W and V irtualBox[8 Fig 2 Type II Virtual machine migration is the process that a running virtual machine moves from a physical computer to another computer Many virtualization software such as VMw  KVM[5 and Open VZ[11 are used to implement it There are two types of migration 1 non-live 2 live In non live migration a virtual machine stops and the virtual machineês state is transferred from the source to the destination computer Then restart on the destination computer In live migration virtual machineês state is transferred without stopping it Virtual machineês state has changed so additionally this difference is also transferred Live virtual machines migration is an extremely powerful tool for cluster or data center administrators for many reasons such as load balancing online maintenance and proactive fault tolerance energy saving The manageability of data centers and clusters has been signiìcantly improved using virtualization and migration Load balancing Due to heavy workload on a physical host there is need to rearrange the VMs so to relieve the load VMs are migrated Online maintenance A physical machine may need upgrade and maintenance so physical server must be free all its VMs migrated to alternative server to free the physical machine for maintenance So it improves the service availability Proactive fault tolerance Proactive fault tolerance prevents physical host failures that is about to fail It keeps services alive by avoiding failures through preventative measures All VMs over hosts could be migrated so that services which are running on virtual machines remain available all the time Energy saving Idle servers are frequently left power The idle servers are powered off and power consumption can be reduced by consolidating VMs of idle servers So live virtual machine migration can also be used to save the energy Mostly hypervisors such as OpenVZ[11 KVM[5 and VMW has feature of li v e migration which has v ery short downtime Live virtual machines migration mainly use pre-copy approach which rst transfers all memory pages and then copies pages just modiìed during the last round iteratively When threshold comes or the maximum number of iterations is reached the virtual machine is paused and then only CPU state and dirty pages in the last round are sent out to the destination host and nally resume on it Due to iteration memory pages have been modiìed called dirty pages must be sent to destination also hence memory pages are sent multiple times Current migration requires network attached storage\(NAS which is accessed by all hosts uniformly Live virtual machine migration allows seamless migration of online services without requiring users to reconnect III R ELATED W ORK Sapuntzakis et focused on user mobility and system management by moving hardware state called capsule To reduce amount of data of capsule they developed copy-onwrite disks updates to capsule disks ballooning zeros unused memory demand Paging fetches only needed blocks and hashing avoids sending blocks that already exist at the remote end techniques They have shown that by capsule 
B Live Virtual Machine Migration A Virtual Machine Migration 
    
241 
241 


migration running application can be started within 20 minutes on a 384 kbps link instead of installing the application To overcome the process level problems such as residual dependencies Clark et proposed the basic idea of li v e migration algorithm and also described writable working set concept Live migration has the ability to move the entire operating system They have implemented migration on Xen which is a freely available open source VMM in data center and cluster environments Current technologies of live migration focused on improvement of migration efìciency within cluster environment or data centers of same cloud service providers We are categorizing virtual machine migration related work into cluster data center and cloud data center environment Hines et proposed postcopy technique to optimizing live migration of virtual machines Post-copy contains four key components demand paging active pushing prepaging and dynamic self-ballooning Michael R et compare post-cop y against the precop y approach using Xen Hypervisor Using post-copy technique the total migration time and the number of pages transferred can be reduced as compared to pre-copy But this approach has more downtime which causes to service unavailability the users To provide fast virtual machine migration Jin et used memory compression and a VM migration approach MECOM based on it The virtual machine services may be slightly affected based on memory page characteristics For balancing the performance and the cost of virtual machine migration they also designed an adaptive zero-aware compression algorithm Pages are quickly compressed in batches on the source and exactly recovered on the target They compared with Xen hypervisor it reduces downtime total migration time and total transferred data on average By adding a bitmap page which marks those frequently updated pages Fei Ma et impro v ed pre-cop y approach on Xen 3.3.0 in cluster environment Due to using a networkaccessible storage system such as SAN or NAS only memory and CPU status needs to be transferred from the source node to the target Frequently updated pages put into the page bitmap in the iteration process and those pages are transmitted in the last round of the iteration process This can ensure that those frequently updated pages are transmitted just once in the iteration process It solves the resending problem of memory pages and reduce the transferred data and total migration time Hacking and  focused on migration limitation of lar ger application system such as SAP ERP due to consumption of large amount of memory and they present a system which support transparent migration of large enterprise applications workloads This system has a novel mechanism of memory transfer based on delta compression and to reduce the rigidity of migrating large VMs an adaptive warm up transfer phase is added This system aims to increase transfer performance and reduce down-time Akoush et e xamine migration times and propose models which predict the workload speciìc service interruptions They show that the link speed and page dirty rate are the major factors impacting migration behavior Prediction of migration time must be accurate to enable more dynamic and intelligent placements of VMs without degrading performance The current technology focused on the schemes of VM placement with performance constrains There was little work concerning about both the performance and energy costs during the consolidation actions H Liu et proposed a model the VM migration per formance based on theoretical analysis and empirical studies on Xen platform It is the rst model VM migration costs in terms of both performance and energy They validate the models by conducting a large set of experiments Modeling the performance of migration involves several factors the size of VM memory the workload characteristic network transmission rate and the migration algorithm The most important challenge is to correctly characterize the memory access pattern of each running workloads Address-warping problem is one of the difìculties in wide-area migration the address of the VM warps from the source server to the destination server which complicates the status of the WAN and the LANs connected to the WAN Kanada et use address translation to solve this problem It translates the original and moved addresses of the VM which have the identical but exist in different locations It is like paging in memory virtualization Current live migration technology has long migration times and also wastes valuable network bandwidth due to sending memory pages several times during the live migration process memory pages are frequently updated and these pages must be sent A VM can easily dirty memory pages faster than these can be transferred over the network it causes extended migration downtime These problems be more difìcult when memory or CPU intensive Virtual Machines VMs are migrated or VMs are migrated over slow networks To reduce the total migration time Svard et proposed a method dynamic page transfer reordering which dynamically adapt the transfer order of memory pages In this approach page weight is calculated which is based on page update frequency sampling information Then it is used to prioritize the transfer of less frequently updated pages before the frequently updated pages Then these frequently updated pages are sent in last the number of page re-transfers is reduced by reducing the amount of transferred data total migration time can be reduced To reduce the migration downtime they combine dynamic page transfer reordering with delta compression techniques It increases the migration throughput and thus reduces migration downtime They modiìed KVM hypervisor by implementing the combined page transfer reordering and compression algorithm Three elements memory status and storage the disk-image containing le system and user data are transferred during VM migration from a source cloud to a destination cloud over a WAN Celesti et focus on the dynamic VM allocation and propose a Composed Image Cloning CIC methodology to reduce the consumption of bandwidth and cloud resources Suen et propose and compare techniques for both instance-based and volume-based storage in the public and private cloud infrastructure that can reduce the transfer bandwidth and storage cost of data involved during the migration process Cloud brokerage is a bridge between service provider and the user Gartner explain the responsibility of cloud broker 
1 Cluster Environment 2 Modern Data Center Environment 3 Cloud Data Center Environment B Cloud Brokerage 
242 
242 


2 Advantages 
Bandwidth limitation is the most in\224uential parameter on performance of VM migration It effects to total migration time and downtime To speed up migration it is necessary to have great speed of bandwidth 
200 200 200 200 200 
VMP success also depends on the cost of porting the VM The lower the cost the higher will be the rate of porting The cost here refers to the amount that the customer needs to pay to port their virtual machine to some other service provider\220s 
Portability Simplicity Speed Cost factor Bandwidth Limitation No shared storage Problem with platform compatibility 
200 
The following advantages are describing below 
3 Limitation 
This is a new mechanism for migrating the VM from one service provider to another service provider First user request to the broker to change his service provider then broker verify the request and forward the request to donor\(source service provider then donor approved request and forward approval to the broker The broker 223xes the porting and convey it to both source service provider and target service 
In most migration methods shared virtual disk is considered so that source and destination hypervisor can access to it Otherwise it can take long time due to large size virtual disk We are trying to implement with shared storage 
A Mechanism Description B Virtual Machine Portability 1 Methodology 
VMP success mainly depends on the simplicity of the process There could be many rules that the regulator may impose 
Figure 3 illustrates three roles in cloud to cloud migration architecture user cloud broker cloud provider Here we are giving a term SCA\(Service Change Agreement for changing the service provider 1 User User is one who uses the cloud services and if he/she is not satisfy or with any reason any time he can change his service provider by submitting its VM description to the broker 2 Cloud Broker A cloud broker is an individual or organization that creates and maintains relationship among cloud providers It acts as a liaison between cloud service users and cloud service providers They select best provider for each user and also monitors the service continuously so that user will be satisfy If user has any problem with the service then he can request to broker either to change his service provider or to improve the service 3 Cloud provider A service provider offers storage or software services via a private cloud or public cloud to users The cost is based on a per-use utility model Each cloud provider supports several instance types VM con\223guration A instance type is de\223ned as hardware metrics such as CPU storage main memory Some examples are Amazon Simple Storage Service Amazon S3 Cisco[29 Citrix[30 IBM[31 Google[32  Rackspace[34 Salesforce.com[35 4 SLA Service Level Agreement The emergence of cloud computing has led to evolution in terms of how applications are built and managed this whole new perspective of how the things are done needed a new way of management  This management involves the constraints and parameters of service service customer and service provider are to adhere to It is the cornerstone of how the service provider sets and maintains commitments to the service consumer When a customer wants to use service then 223rst he engages in a negotiation phase after an agreement has been achieved The service provider and customer sign this agreement The goals of SLA is to provide the clear reference to service ownership roles and accountability and it match perceptions of expected service provision with actual service support and delivery 
Speed is one of the major factors that affect the success of VMP Service level agreements should be stringent enough to minimize the time taken to migrate the VM to other service provider This increases the level of customer satisfaction 
Cloud service customer would be able to port service provider while retaining their existing virtual machine 
Fig 3 Virtual Machine Portability provider Then VM would be migrated from donor to recipient with the same con\223guration and VM would be disconnected from donor service provider and provisioned in target service provider 
Many different types hardware is used with different platform hence moving of VM from one service provider to another 
200 
into cloud service arbitrage aggregation and cloud service  Central Cloud Brok er component is gi v en by Grivas et al which is responsible for go v ernance and the management of cloud environment mainly focused on business process management Chaisiri et proposed a cloud broker with optimal virtual machine placement algorithm and this algorithm is also minimize the cost for hosting virtual machines in several provider environment IV P ROPOSED I DEA 
243 
243 


may face this problem Hardware compatibility is a big challenge V I MPLEMENTATION Eucalyptus is a open source softw are that helps in managing and creating public or even private accessible cloud Eucalyptus has become very popular and is seen as one of the key open source cloud platform Its architecture is simple and exible Eucalyptus has ve main components It is the frontend of the architecture and interacts with the user and also provides the virtual machine controlling It is most visible element of the eucalyptus architecture It is a storage which is used to store and access virtual machine images and user data WSC storing and accessing data either from running instance or from anywhere on the web This is used to manage one or more the node controllers and manage/deploys instances on them Cluster controller also manages the networking for instances running on the nodes It operates between cloud controller and node controller It will receive request to allocate machine images from the cloud controller and in turn decides which node controller will run the machine instance This decision is based upon status report which the cluster controller receives from each of the node controllers It is back end of the infrastructure used to control and terminating of virtual machine instances on the host The NC role is to interact with the operating system and hypervisor running on the node as instructed by the cluster controller Fig 4 Eucalyptus Architecture In order to create cloud environment we used two machines for node controller with 500GB hard disks and 8 GB RAM Furthermore we installed Xen on the NCs We install cluster controller and cloud controller on one machine with 500 GB hard disk and 8 GB RAM These machine are connected through LAN network with 100 Mbps bandwidth The cloud administrator and client input their request to the CLC through running API functions Therefore in order to create migration capability in eucalyptus we create an API functions We run euca-migrate-instance API rstly CLC nds the nodeês IP address that the instance currently running there and then these values are transferred to the cluster controller API Function shown in gure 5 We successfully migrated VM from one NC to another NC Fig 5 API Function Now we set up a eucalyptus based cloud with two cloud service provider which are connected through a switch For each service provider we take two machines for node controller and one for cluster controller and cloud controller and these are connected via a private switch Now we are trying to migrate VM running on NC of one service provider\(source to another service providerês\(destination NC Fig 6 A Simple Private Cloud Environment VI C ONCLUSION Current commercial cloud platforms are incapable of meeting the requirements of enterprise customers However The technique described in this paper offer a promising new approach for supporting the task of virtual machine portability In this work we propose the idea Cloud-to-Cloud Migration We envision the future clouds as exible resource pools that seamlessly span multiple data center and enterprise sites With this kind of architecture cloud providers and enterprise customers are able to transparently migrate VMs between sites This can allow a data center operator to perform load balancing between sites without impacting customer applications or for customers to change placement decisions based on This paper takes a step in that direction by simplifying the network reconìguration for migration of virtual servers between cloud sites This approach is expected to produce a more precise traceability reduce costs improve efìciencies and reduce administrative overhead Delivering IT services via the Cloud portends to be a time saver a money saver and allow for better efìciencies 
A Cloud controller\(CLC B Walrus Storage Controller\(WSC C Cluster controller\(CC D Node controller\(NC 
244 
244 


R EFERENCES  Kreuter  D Where serv er virtualization w as born V irtual Strate gy Magazine July 21 2004  A Desai\(2012 V irtual Machine Accessed April 15 2013  Xenserv er  Citrix Xen Serv er A v ailable:http://www.citrix.com/products/xenserver May  VMW are vSphere ESX and ESXi Info Center   2013 online Available vmware.com/products/vsphere/esxi-and-esx May  KVM K ernel-based V irtual Machine  2013 online A v ailable linux-kvm.org May  Microsoft Hyper V Serv er 2012  2013 online A v ailable microsoft.com/server-cloud/hyper-v-server May  vmw are W orkstation 2013 online A v ailable http://www.vmware.com/products/workstation May  Oracle V irtualBox  2013 online A v ailable virtualbox.or g May    VMW are VMW are 2013 online A v ailable http://www.vmware.com/in May  Citrix Xen 2013 online A v ailable http://www x en.or g May    OpenVZ OpenVZ 2013 online A v ailable http://openvz.org/MainPage May  P  S Constantine C Ramesh P  Ben C Jim S L Monica and R Mendel Optimizing the migration of virtual computers in 5th Symposium on Operating Systems Design and Implementation SIGOPS Oper Syst Rev vol 36 Issue SI pp 377-390 2002  C Christopher  F  K eir  H Ste v en H Jacob Gorm J Eric L Christian P Ian and W Andrew Live migration of virtual machines 2nd conference on Symposium on Networked Systems Design and Implementation Volume 2 USENIX Association 2005  R H Michael D Umesh and G Kartik Post-cop y li v e migration of virtual machines SIGOPS Oper Syst Rev vol 43 pp 14-26 2009  R H Michael and G Kartik Post-cop y based li v e virtual machine migration using adaptive pre-paging and dynamic self-ballooning ACM SIGPLAN/SIGOPS international conference on Virtual execution environments Washington DC USA ACM 2009  J Hai D Li W  Song S Xuanhua and P  Xiaodong Li v e virtual machine migration with adaptive memory compression in IEEE International Conference on Cluster Computing and Workshops CLUSTER 09 pp 1-10  M Fei L Feng and L Zhen Li v e virtual machine migration based on improved pre-copy approach in IEEE International Conference on Software Engineering and Service Sciences ICSESS 2010 pp 230-233  H Stuart Beno and H t Impro ving the li v e migration process of lar ge enterprise applications 3rd International Workshop on Virtualization Technologies in Distributed Computing Barcelona Spain ACM 2009  A Sherif S Ripduman R Andre w  W  M Andre w  and H Andy  Predicting the Performance of Virtual Machine Migration in IEEE International Symposium on Modeling Analysis and Simulation of Computer and Telecommunication Systems 2010  L Haikun X Cheng-Zhong J Hai G Jiayu and L.Xiaofei Perfor mance and energy modeling for live migration of virtual machines 20th International Symposium on High Performance Distributed Computing San Jose California USA ACM 2011  Y  Kanada and T  T arui  A netw ork-paging based method for widearea live-migration of VMs in International Conference on Information Networking 2011 ICOIN 2011 Jan 2011 pp 268-272  P  Sv ard J T ordsson B Hudzia and E Elmroth High performance live migration through dynamic page transfer reordering and compression 2011 3rd IEEE International Conference on Cloud Computing Technology and Science CloudCom 2011 pp 542-548  A Celesti F  T usa M V illari and A Puliaìto Impro ving virtual machine migration in federated cloud environments 2nd International Conference on Evolving Internet Internet 2010 pp 61-67  S Chun-Hui M Kirchber g and L Bu Sung Ef cient Migration of Virtual Machines between Public and Private Cloud in IEEE Third International conference on Cloud Computing Technology and Science CloudCom Los Alamitos CA USA Nov 2011 pp 549-53  Gartner research cloud consumers need brok er ages to unlock the potential of cloud services http://www.gartner.com/it/page.jsp?id=1064712 visited May 2013  S Gri v as T  Uttam K umar  and H W ache Cloud brok er Bringing intelligence into the cloud in proceedings of IEEE 3rd International conference on cloud computing\(CLOUD 2010 pp 544-545  S.Chaisiri B.-S Lee and D Niyato optimal virtual machine placement across multiple cloud providers in proceedings of the 4th IEEE Asia paciìc services computing conference pp 103-110  Amazon  Amazon Simple Storage Service Amazon S3 2012  A v ailable a ws.amazon.com/ec2 May 2013  Cisco Cisco System 2013 online A v ailable http://www.cisco.com May  Citrix Citrix-India 2013 online A v ailable http://www citrixindia.com May  IBM IBM 2013 online A v ailable http://www ibm.com/in/en May  Google Google 2013 online A v ailable http://www google.co.in May  Microsoft Microsoft 2013 online A v ailable http://www.microsoft.com/en-us/default.aspx May  Rackspace Rackspace 2013 online A v ailable http://www.rackspace.com May  Salesforce Salesforce 2013 online A v ailable http://www.salesforce.com/in May  N Daniel W  Rich G Chris O Graziano S Sunil Y  Lamia and Z Dmitrii The Eucalyptus Open-Source Cloud-Computing System in Proceedings of the 2009 9th IEEE/ACM International Symposium on Cluster Computing and the Grid IEEE Computer Society 2009 
245 
245 


a 1,000 points resolution b 10,000 points resolution c 40,000 points resolution Figure 5 Zoom on the California region of the ndvi_points array at 1,000 10,000 and 40,000 points resolution Without resolution reduction this query returns over one billion points In addition the actual dimension ranges of the array are on the order of millions which would result in a sparse heatmap with over one trillion cells This is clearly too large of an image to draw on the screen so ScalaR prompts the user to reduce the resolution Using aggregation ScalaR produces an initial visualization at a resolution of about 1000 points shown in Figure 4 Resolution refers to the size of the query results being drawn so Figure 4 shows the result of reducing the data down to a 33 by 33 matrix see Section II This visualization clearly shows the arrayês sparseness and reveals a dense area of data in the array Now the user zooms in on the dense portion of the array by highlighting the area with a selection box and using the zoom-in button The resulting visualization at a resolution of 1000 points is shown in Figure 5a The general shape of the western coast of California/Northern Mexico is apparent but the user may want the image to be clearer Figures 5b and 5c show the results of increasing the resolution to 10000 and 40000 points respectively where the identity of the region is very clear in both images The user can now clearly identify the desired southern California region and zooms in to the Los Angeles Santa Barbara area as shown in Figure 6 To perform the same tasks without ScalaR the user would have to write aggregation queries manually over the data set She has to manually identify the desired region of the array to visualize and perform her own calculations to determine a reasonable resolution for the results She may also need to store the query results in a separate le to load into her desired visualization system The user also resorts to trial and error potentially repeating the above steps many times before nding her desired region and resolution for the image ScalaR eliminates the need to manually write queries to reduce the resolution of the data providing the user with more information quickly and easily V P ERFORMANCE We used a 2-node SciDB cluster to run the following experiments Each node had 50GB of RAM 32 cores and a 1,000 points resolution b 10,000 points resolution Figure 6 Zoom on LA area at 1,000 and 10,000 points resolution  Resolution Aggregation Runtime s Sampling Runtime s 1,000 89.55 1.95 10,000 87.22 1.94 100,000 88.71 24.52 1,000,000 98.58 133.68 10,000,000 132.32 176.58 100,000,000 1247.78 186.90 1,000,000,000 3692.02 296.83 Baseline 210.64 Table I R AW RUNTIME RESULTS IN SECONDS FOR AGGREGATION AND SAMPLING QUERIES OVER THE NDSI 1 ARRAY  WITH VARIOUS RESOLUTION VALUES E XECUTION TIME FOR A FULL SCAN OVER NDSI 1 IS PROVIDED FOR REFERENCE  LABELED AS THE BASELINE  10.8TB of disk space SciDB was limited to using at most 75 of the available memory per node as recommended by the SciDB Userês Guide b u t the operating system still had access to all available memory We measured the execution times of aggregation and sampling queries over a single SciDB array containing Normalized Difference Snow Index calculations NDSI for the entire world which where computed over roughly one week of NASA MODIS data The normalized difference snow index measures the amount of snow cover on the earth at a given latitude-longitude coordinate For the rest of this section we will refer to this array as ndsi1  The ndsi1 array was roughly 209GB on disk when stored directly inside SciDB and 85GB when stored as a compressed SciDB binary le ndsi1 was a sparse array containing over 2.7 billion data points stored across 673,380 different SciDB chunks We varied 7 


   Figure 7 A comparison of aggregation and sampling on the ndsi1 array with various data thresholds the resolution threshold  i.e maximum output size from one thousand to one billion data points and measured the runtime of the resulting SciDB aggregation and sampling queries dispatched by ScalaR As a baseline for comparison we also measured the execution time for a full scan of the ndsi1 array  i.e  SELECT  FROM ndsi1  We present runtime results in Table I and a log-scale comparison of aggregation and sampling in Figure 7 Our preliminary results show that basic aggregation and sampling are effective in reducing output size and execution time for most recorded output sizes We see in Figure 7 that reducing the resolution of ndsi1 via sampling either signiìcantly improves performance or is on par with the baseline Aggregation performs better than or as fast as the baseline for most resolution sizes but slower than sampling We also see that performance plummets at the highest resolution sizes Aggregationês slower performance is due in part to the fact that the ndsi1 array is sparse Aggregation computes over logical array ranges making it less efìcient when reducing sparse arrays In addition as the resolution increases aggregation performs even more operations per SciDB chunk Chunks are SciDBês unit of storage on disk At resolutions of 100 million and one billion data points aggregation is executing hundreds or more operations per chunk causing aggregationês poor performance Note that our simple reduction algorithms require reading virtually the entire data set limiting their performance We plan to implement more efìcient reduction techniques in the future and compare their performance to our basic algorithms VI C ONCLUSIONS AND F UTURE W ORK We presented the design and implementation of ScalaR an information visualization system that dynamically performs resolution reduction to improve query execution performance of clusters running a distributed DBMS ScalaR uses aggregation ltering and/or sampling operations to downsize query results as necessary to reduce completion time while still producing visualizations close in accuracy to the original result We presented preliminary performance results for ScalaR visualizing satellite imagery data stored in SciDB We plan to make several optimizations in ScalaRês design starting with the 2 following approaches The rst is to use machine learning techniques over existing visualizations found on the web to learn how to choose appropriate visualization types for user query results automatically Second we plan to incorporate prefetching in the middle layer of our architecture using feedback from the front-end about user interactions for example whether the user just zoomed in or the direction the user is panning through the visualization R EFERENCES  T ableau softw are  http://www tableausoftw are.com May 2012  T ibco spotìre  http://spotìre.tibco.com May 2012  H V o et al  Parallel visualization on large clusters using mapreduce in Large Data Analysis and Visualization LDAV 2011 IEEE Symposium on  2011 pp 81Ö88  Hadoop  http://hadoop.apache.or g  D Jerding and J Stask o The information mural a technique for displaying and navigating large information spaces Visualization and Computer Graphics IEEE Transactions on  vol 4 no 3 pp 257Ö271 1998  N Elmqvist and J Fek ete Hierarchical aggre gation for information visualization Overview techniques and design guidelines IEEE Trans on Visualization and Computer Graphics  vol 16 no 3 pp 439Ö454 2010  S Chaudhuri and U Dayal  A n o v ervie w o f data w arehousing and olap technology SIGMOD Rec  vol 26 no 1 pp 65Ö74 Mar 1997  J M Hellerstein et al  Online aggregation SIGMOD Rec  vol 26 no 2 pp 171Ö182 Jun 1997  P  J Haas and J M Hellerstein Ripple joins for online aggregation SIGMOD Rec  vol 28 no 2 pp 287Ö298 Jun 1999  J M Hellerstein et al  Interactive data analysis The control project Computer  vol 32 no 8 pp 51Ö59 Aug 1999  D Fisher et al  Trust me iêm partially right incremental visualization lets analysts explore large datasets faster in Proceedings of the 2012 ACM annual conference on Human Factors in Computing Systems  ser CHI 12 New York NY USA ACM 2012 pp 1673Ö1682  S Agarw al et al  Blinkdb queries with bounded errors and bounded response times on very large data New York NY USA ACM 2013 pp 29Ö42  M Bostock et al  D3 Data-driven documents IEEE Trans Visualization  Comp Graphics Proc InfoVis  2011  Google maps api  https://de v elopers.google.com/maps May 2012  P  Cudre-Mauroux et al  A demonstration of scidb a science-oriented dbms Proc VLDB Endow  vol 2 no 2 pp 1534Ö1537 Aug 2009  Scidb user s guide v ersion 13.3  2013 Online A v ailable www.scidb.org 


001 002\001\001 9?:\001 021\f84+\026\033#\001 022\0234\030$'\005\026'\005*+\035\005D\024\024/.L\001 D\026\036\035\025\026+\024\024&\001 024\032\001 001 J\035+\02614\025$\033\001G\026\027\027\026\024'\0058411\035\027\027\005$'&\0058$\032\035*0#\001$'&\001*+\035\001U\024\025\035\001\024\032\001 035\001\0234\030$'\001@$1*\024\033.#\0017\0244\033'$\025\001\024\032\001;\026\0331\033$\032*#\001*\024\0012\035\001/42\025\026\027+\035&\001 9\b:\001 021\f84+\026\033#\001 023\024%\001 024\001 G$\036\035\001 001 N\035-\0261\035\001 026'*\024\001 001 E\033\024&41*L\001 11\035\025\035\033$*\035&\001 D\026\032\035\001 6\035\027*\026'\(\001 020*=\027\001 U\024\025\035#\001 033\02624*\035\027#\001 Q+$\025\025\035'\(\035\027#\001 E\026*\032$\025\025\027#\001 001 020'*\035\033$1*\026\024'\001 026*+\001 W4$\025\026\032\0261$*\026\024'\001 6\035\027*\026'\(.#\001\026'\001\021\f\00184+\026\033#\001QE\001C\024'\(#\001XQ\001D\035\035#\001\035&\027\f\001,G\0261\033\024\005\001 001 A/*\024\005\021\025\0351*\033\024'\0261\001 G$*\035\033\026$\025\027\001 001 8*\03341*4\033\035\027L\001E+0\027\0261\027#\001 G\0351+$'\0261\027#\001 N\035\027\026\('#\001 E$1\036$\(\026'\(#\001 U\035\025\026$2\026\025\026*0.#\001 8/\033\026'\(\035\033#\001 017\r\r\003\f\001 9\003:\001 X\f\001 023\f\001 G\0261+\025\026'\001 001 034\f\001 034\033$2$\033'\026\036#\001 022Q\024\030/$\033\026\027\024'\001 8\035H4\035'*\026$\025\001 6\035\027*\026'\(\001 032\024\033\001 U\035\025\026$2\026\025\026*0L\001 0213$1*\001 Q\024\030/4*$*\026\024'\001 024\032\001 AQ\001 001 8M#\022\001 035\r\007\024\006\017\016\r\003\004 007\024\033\004 035\f\b\f\025\016\021\0212\024\005\025\007\003\005\016\024 001 024\025\f\001\003#\001'\024\f\001\017#\001//\f\001\017\002?\005\t\r\t#\001\017\r\r\b\f\001 9\004:\001\001 C\f\001 f\001 M\035\025\027\024 004 8\025\025\f\b\f\r\007\003\f\033\004 035\f\006\003\005\024\0226\004 006\003\007\003\005\006\003\005\025\007\b\004 021\016\033\f\b\006\032\004 003 f\006\003\004\017\b\007\024\006\032\004\007\024\033\004\033\007\003\007\004\007\024\007\b\n\006\005\006 L\0017\024+'\001C\026\025\0350#\001\006\002\002\r\f\001 9 002:\001 f\001 7\035\033\0330#\001 002\024\003\r\016\0332\025\003\005\016\024\004 003\016\004 002\024\003\f\022\r\007\b\004 A2\007\003\005\016\024\006\004 t\005\003\023\004 8 017\017\b\005\025\007\003\005\016\024\006 001\017  001\035&\fL\0017\024+'\001C\026\025\0350#\001\006\002\002\002\f\001 9\006\r:\001N\f\001;\f\001<\f\001G\026\025\025\035\033#\001 B2\007\024\0032\021\004*\f\025\023\007\024\005\025\006\004\030\016\r\0045\025\005\f\024\003\005\006\003\006\004\007\024\033\004  024\022\005\024\f\f\r\006 L\001Q$\0302\033\026&\(\035\001F'\026-\035\033\027\026*0\001/\033\035\027\027#\001\017\r\r\004\f\001 9 006\006:\001;\f\001 M\f\001 6\026\036+\024'\024-\001 001 J\f\001 X\f\001 033\027\035'\026'#\001 5\016\b2\003\005\016\024\006\004 030\016\r\004 005\b\b\036\004\004\004 017 016\006\f\033\004\017\r\016\013\b\f\021\006 L\001C\026'\027*\024'#\001\006\002\003\003\f\001 9 006\017:\0017\f\001 M\0241\035&$\025\001 001 8\f\001 7\f\001 C\033\026\(+*#\001 0342\021\f\r\005\025\007\b\004 C\017\003\005\021\0057\007\003\005\016\024\032\004  024\033\004\f\033\005\003\005\016\0246 0018/\033\026'\(\035\033#\001\017\r\r\b\f\001 001 030 fI\001\021/\032"#\037 t r\006\016\005\017\020\021\006\016 004\r\f\025\f\005<\f\033\004\007\004:\0375\025\037\004\005\024\004  b\f\025\003\r\005\025\007\b\004\(\024\022\005\024\f\f\r\005\024\022\004\030\r\016\021\004\003\023\f\004 035\f\025\023\024\005\016\024\004D\004\002\024\006\003\005\0032\003\f\004\016\030\004\035\f\025\023\024\016\b\016\022\n\032\004 007\005\030\007\032\004\002\006\r\007\f\b\032\004\005\024\004,EEF\004\007\024\033\004\007\004*\0375\025\037\004\005\024\004 B2\007\b\005\003\n\004\007\006\0062\r\007\024\025\f\004G\004\031\f\b\005\007\013\005\b\005\003\n\004 f\024\022\005\024\f\f\r\005\024\022\032\004\004\007\b\006\016\004\030\r\016\021\004\003\023\f\004\035\f\025\023\024\005\016\024\032\004 005\024\004?FFH\037\004%2\r\r\f\024\003\b\n\004\023\f\004\005\006\004\006\0032\033\n\005\024\022\004\030\016\r\004 9\023\037'\037\004\007\003\004\003\023\f\004\035\f\025\023\024\005\016\024\004D\004\002\024\006\003\005\0032\003\f\004\016\030\004 035\f\025\023\024\016\b\016\022\n\032\004@\007\005\030\007\032\004\002\006\r\007\f\b\032\004\007\024\033\004\023\005\006\004\003\023\f\006\005\006\004\0062\013&\f\025\003\004\005\006\004 I\031\f\b\005\007\013\005\b\005\003\n\004\016\030\004\035\f\025\023\024\016\b\016\022\005\f\006I\037\004\004 5\023\007\005\004\023\007\033\004\006\f\r<\f\033\004\007\006\004\007\024\004\f\b\f\025\003\r\005\025\007\b\004\007\024\033\004\f\b\f\025\003\r\016\024\005\025\006\004\f\024\022\005\024\f\f\r\004 006\005\024\025\f\004,EEF\004\005\024\004<\007\r\005\0162\006\004\022\016<\f\r\024\021\f\024\003\004\017\016\006\005\003\005\016\024\006\037\004%2\r\r\f\024\003\b\n\032\004\023\f\004 005\006\004\007\024\004\007\025\003\005<\f\004\031\f\b\005\007\013\005\b\005\003\n\004\f\024\022\005\024\f\f\r\037\004 017 022 023\021\005\006\016\024\017\020\025\021\016\005 004\005\006\004\016\024\004\003\023\f\004\030\007\0252\b\003\n\004\016\030\004 003 023\f\004\(\b\f\025\003\r\005\025\007\b\004\(\024\022\005\024\f\f\r\005\024\022\004'\f\017\003\032\004 1\024\005<\f\r\006\005\003\n\004\016\030\004%\007\b\005\030\016\r\024\005\007\032\0045\007\024\003\007\004%\r27\032\004 8\032\004\007\024\033\004\005\006\0044\005\006\005\003\005\024\022\0049\r\016\030\f\006\006\016\r\032\004 f\025\023\007\024\005\025\007\b\004\(\024\022\005\024\f\f\r\005\024\022\004'\f\017\003\037\032\004 1\024\005<\f\r\006\005\003\n\004\016\030\004*\007\r\n\b\007\024\033\032\004%\016\b\b\f\022\f\004 9\007\rJ\032\004*'\032\004\007\024\033\004'\f\017\007\r\003\021\f\024\003\004\016\030\004 b\f\025\003\r\016\024\005\025\004*\007\003\f\r\005\007\b\006\032\004\035\f\025\023\024\005\025\007\b\004 1\024\005<\f\r\006\005\003\n\032\0044\005\f\024\024\007\032\00482\006\003\r\005\007\037\004'\r\037\00452\023\005\r\004\005\006\004+\f\b\b\016\t\004\016\030\004\003\023\f\004 002\024\006\003\005\0032\003\f\004\016\030\004\(\b\f\025\003\r\005\025\007\b\004\007\024\033\004\(\b\f\025\003\r\016\024\005\025\006\004\(\024\022\005\024\f\f\r\006\004!\002\(\(\("\032\004 003\023\f\0048\021\f\r\005\025\007\024\0049\023\n\006\005\025\007\b\0045\016\025\005\f\003\n\004!895"\032\004\003\023\f\004\002\024\006\003\005\0032\003\f\004\016\030\004 9\023\n\006\005\025\006\004!\002\0169"\032\0041K\032\004\003\023\f\0048\021\f\r\005\025\007\024\0045\016\025\005\f\003\n\004\016\030\004*\f\025\023\007\024\005\025\007\b\004 024\022\005\024\f\f\r\006\004!85*\("\032\004\007\024\033\004\003\023\f\0045\016\025\005\f\003\n\004\016\030\0049\b\007\006\003\005\025\006\004\(\024\022\005\024\f\f\r\006\004 59\("\037\004'\r\037\00452\023\005\r\004\023\007\006\004\013\f\f\024\004\f\b\f\025\003\f\033\004\007\006\004+\016\r\f\005\022\024\004+2\b\b\004 f\021\013\f\r\004!8\025\007\033\f\021\005\025\005\007\024"\004\016\030\004\003\023\f\004\034\007\003\005\016\024\007\b\0048\025\007\033\f\021\n\004\016\030\004 024\022\005\024\f\f\r\005\024\022\032\0041J\r\007\005\024\fL\004\007\024\033\004\007\006\004+2\b\013\r\005\022\023\003\0045\025\023\016\b\007\r 026\017 0162\024\025\005\b\004 030 016\r\004\002\024\003\f\r\024\007\003\005\016\024\007\b\004\(\020\025\023\007\024\022\f\004\016\030\0045\025\023\016\b\007\r\006\004!%\002\(5"\032\0045\003\007\003\f\004 f\017\007\r\003\021\f\024\003\032\00415\037\004@\f\004\005\006\004'\005\006\003\005\024\0222\005\006\023\f\033\004\027\f\025\0032\r\f\r\004\016\030\004\003\023\f\004 002\(\(\(\004%9*\035\004!%\016\021\017\016\024\f\024\003\006\032\0049\007\025J\007\022\005\024\022\004\007\024\033\004 007\0242\030\007\025\0032\r\005\024\022\004\035\f\025\023\024\016\b\016\022\n"\0045\016\025\005\f\003\n 026\017 8\006\006\016\025\005\007\003\f\004\(\033\005\003\016\r\004\016\030\004 003 023\f\004\002\(\(\(\004%9*\035\004\035\r\007\024\006\007\025\003\005\016\024\006\004\016\024\0048\033<\007\024\025\f\033\0049\007\025J\007\022\005\024\022\032\004 f\021\013\f\r\004\016\030\004\003\023\f\004\(%\035%\004!\(\b\f\025\003\r\016\024\005\025\004%\016\021\017\016\024\f\024\003\006\004\007\024\033\004 035\f\025\023\024\016\b\016\022\n\004%\016\024\030\f\r\f\024\025\f"\0048\017\017\b\005\f\033\004\031\f\b\005\007\013\005\b\005\003\n\004 52\013\025\016\021\021\005\003\003\f\f\032\004\003\023\f\004\002\(\(\(\004%9*\035\004\007\t\007\r\033\004\025\016\021\021\005\003\003\f\f\032\004\003\023\f\004 002\(\(\(\004+\f\b\b\016\t\004\024\016\021\005\024\007\003\005\016\024\004\025\016\021\021\005\003\003\f\f\032\004\007\024\033\004\003\023\f\00485*\(\004 M\f\024\f\r\007\b\0048\t\007\r\033\006\004\025\016\021\021\005\003\003\f\f\037\004'\r\037\00452\023\005\r\004\005\006\004\007\004\025\016\036\030\0162\024\033\f\r\004\016\030\004 003\023\f\00485*\(\004;\0162\r\024\007\b\004\016\030\004\(\b\f\025\003\r\016\024\005\025\0049\007\025J\007\022\005\024\022\004\007\024\033\004\006\f\r<\f\033\004\007\006\004 005\003\006\004\035\f\025\023\024\005\025\007\b\004\(\033\005\003\016\r\004\030\016\r\004\f\005\022\023\003\004\n\f\007\r\006\004!,EEN\036?FF,"\037\004 f\004\023\007\006\004\0072\003\023\016\r\f\033\004\007\013\0162\003\004NFF\004\003\f\025\023\024\005\025\007\b\004\0172\013\b\005\025\007\003\005\016\024\006\004 017\007\003\f\024\003\006\032\004\017\007\017\f\r\006\032\004\013\016\016J\004\025\023\007\017\003\f\r\006\032\004\013\016\016J\006"\032\004\005\024\025\b2\033\005\024\022\004\013\016\016J\006\004 O5\003\r2\025\0032\r\007\b\0048\024\007\b\n\006\005\006\004\005\024\004*\005\025\r\016\f\b\f\025\003\r\016\024\005\025\006\004\007\024\033\004+\005\013\f\r\004 C\017\003\005\025\006\026\032\0044\007\024\036\034\016\006\003\r\007\024\033\032\004,EE,\032\004\007\024\033\004O8\017\017\b\005\f\033\0049\r\016\013\007\013\005\b\005\003\n\004 030\016\r\004\(\024\022\005\024\f\f\r\006\004\007\024\033\0045\025\005\f\024\003\005\006\003\006\026\032\004*\025M\r\007\t\036@\005\b\b\032\004,EEP\037\004'\r\037\004 52\023\005\r\004\005\006\004\f\033\005\003\016\r\004\016\030\004\003\023\f\0045\017\r\005\024\022\f\r\004\013\016\016J\004\006\f\r\005\f\006\004\016\024\004\017\023\n\006\005\025\006\032\004 021\f\025\023\007\024\005\025\006\004\007\024\033 004 017\007\025J\007\022\005\024\022\004\016\030\004\021\005\025\r\016\f\b\f\025\003\r\016\024\005\025\004\007\024\033\004 017\023\016\003\016\024\005\025\004\006\n\006\003\f\021\006\037\004@\f\004\016\r\022\007\024\0057\f\033\004\021\007\024\n\004\0062\025\025\f\006\006\0302\b\004 025\016\024\030\f\r\f\024\025\f\006\004\007\024\033\004\006\n\021\017\016\006\005\007\004\007\024\033\004\017\r\f\006\f\024\003\f\033\004\0242\021\f\r\0162\006\004 J\f\n\024\016\003\f\004\007\024\033\004\005\024<\005\003\f\033\004\003\007\bJ\006\004\t\016\r\b\033\t\005\033\f\037\004'\r\037\00452\023\005\r\004\r\f\025\f\005<\f\033\004 021\007\024\n\004\017\r\016\030\f\006\006\005\016\024\007\b\004\007\t\007\r\033\006\032\004\005\024\025\b2\033\005\024\022\004 027\030\030\031\017 85*\(\004 Q 016\r\025\f\006\003\f\r\004\031\f\007\033\004Q\007\r\024\f\r\004*\f\033\007\b\004\030\016\r\004\0162\003\006\003\007\024\033\005\024\022\004 025\016\024\003\r\005\0132\003\005\016\024\006\004\003\016\004\003\023\f\004\017\f\r\021\007\024\f\024\003\004\b\005\003\f\r\007\0032\r\f\004\016\030\004\f\024\022\005\024\f\f\r\005\024\022\004 003\023\r\0162\022\023\004\007\004\006\f\r\005\f\006\004\016\030\004\017\007\017\f\r\006\004\005\024\004*\f\025\023\007\024\005\025\007\b\032\004 005\025\r\016\f\b\f\025\003\r\016\024\005\025\032\004\007\024\033\004C\017\003\016\f\b\f\025\003\r\016\024\005\025\004\(\024\022\005\024\f\f\r\005\024\022\032\004\t\023\005\025\023\004 f\006\003\007\013\b\005\006\023\f\033\004\007\004\024\f\t\004\033\005\006\025\005\017\b\005\024\f\004J\024\016\t\024\004\007\006\004\003\023\f\0045\003\r2\025\0032\r\007\b\004 8\024\007\b\n\006\005\006\004\016\030\004*\005\025\r\016\f\b\f\025\003\r\016\024\005\025\004\007\024\033\0049\023\016\003\016\024\005\025\0045\n\006\003\f\021\006\004!\023\f\004\005\006\004 003\023\f\004\003\023\005\r\033\004\0312\006\006\005\007\024\0048\021\f\r\005\025\007\024\032\004\007\030\003\f\r\0045\003\f<\f\024\004\035\005\021\016\006\023\f\024J\016\004\007\024\033\004 002\022\016\r\0045\005J\016\r\006J\n\032\004\t\023\016\004\r\f\025\f\005<\f\033\004\003\023\005\006\004\017\r\f\006\003\005\022\005\0162\006\004\007\t\007\r\033"L\004 027\030\030\032\017 002*895\004;\016\023\024\0048\037\004Q\007\022\024\016\024\004\035\f\025\023\024\005\025\007\b\0048\025\023\005\f<\f\021\f\024\003\0048\t\007\r\033\004 030 016\r\004\0162\003\006\003\007\024\033\005\024\022\004\025\016\024\003\r\005\0132\003\005\016\024\006\004\003\016\004\003\023\f\004\003\f\025\023\024\005\025\007\b\004J\024\016\t\b\f\033\022\f\004 016\030\004\003\023\f\004\021\005\025\r\016\f\b\f\025\003\r\016\024\005\025\006\032\004\016\017\003\016\f\b\f\025\003\r\016\024\005\025\006\032\004\007\024\033\004\017\007\025J\007\022\005\024\022\004 005\024\0332\006\003\r\nL\004 027\030\030\030\017 002\(\(\(\036%9*\035\004C2\003\006\003\007\024\033\005\024\022\00452\006\003\007\005\024\f\033\004 035 f\025\023\024\005\025\007\b\004%\016\024\003\r\005\0132\003\005\016\024\0048\t\007\r\033\004\030\016\r\004\0162\003\006\003\007\024\033\005\024\022\032\004\0062\006\003\007\005\024\f\033\004 007\024\033\004\025\016\024\003\005\0242\005\024\022\004\025\016\024\003\r\005\0132\003\005\016\024\006\004\003\016\004\003\023\f\004\003\f\025\023\024\016\b\016\022\005\f\006\004\005\024\004\030\005\f\b\033\006\004 f\024\025\016\021\017\007\006\006\f\033\004\013\n\004\003\023\f\004%9*\035\0045\016\025\005\f\003\nL\004 027\030\030\030\017 59\(\004 002 024\003\f\r\024\007\003\005\016\024\007\b\004\(\024\022\005\024\f\f\r\005\024\022-\035\f\025\023\024\016\b\016\022\n\004!+\r\f\033\004C\037\004%\016\024\b\f\n"\004 8\t\007\r\033\004\030\016\r\004\0162\003\006\003\007\024\033\005\024\022\004\017\005\016\024\f\f\r\005\024\022\004\007\024\033\004\025\016\024\003\005\0242\005\024\022\004 025\016\024\003\r\005\0132\003\005\016\024\006\004\003\016\004\017\b\007\006\003\005\025\006\004\f\024\022\005\024\f\f\r\005\024\022L\004 032\033\033\033\017 85*\(\004\007\024\033\0049\005\036 035 0072\036\0045\005\022\021\007\004%\023\007\r\b\f\006\004\0312\006\006\004\031\005\025\023\007\r\033\006\004*\f\021\016\r\005\007\b\0048\t\007\r\033\004\030\016\r\004 0162\003\006\003\007\024\033\005\024\022\004\025\016\024\003\r\005\0132\003\005\016\024\006\004\003\016\004\021\f\025\023\007\024\005\025\007\b\004\f\024\022\005\024\f\f\r\005\024\022\032\004\007\024\033\004 032\033\033\034\017 f\b\b\004\027\007\013\016\r\007\003\016\r\005\f\006\004'\005\006\003\005\024\0222\005\006\023\f\033\004*\f\021\013\f\r\004\016\030\004 035 f\025\023\024\005\025\007\b\0045\003\007\030\030\0048\t\007\r\033\004\030\016\r\004\033\f<\f\b\016\017\005\024\022\004\f\020\003\r\f\021\f\b\n\004\007\025\0252\r\007\003\f\004 007\024\033\004\r\016\0132\006\003\004\f\024\022\005\024\f\f\r\005\024\022\004\021\f\025\023\007\024\005\025\006\004\021\f\003\023\016\033\006\004\030\016\r\004\017\r\f\033\005\025\003\005\024\022\004 003\023\f\004\r\f\b\005\007\013\005\b\005\003\n\032\004\017\f\r\030\016\r\021\007\024\025\f\032\004\007\024\033\004\021\f\025\023\007\024\005\025\007\b\004\013\f\023\007<\005\016\r\004\016\030\004 025\016\021\017\b\f\020\004\006\003\r2\025\0032\r\f\006\0042\006\f\033\004\005\024\004\021\007\0242\030\007\025\0032\r\005\024\022\004\0272\025\f\024\003\004 035\f\025\023\024\016\b\016\022\005\f\006\004\017\r\016\0332\025\003\006\037\004 017 035 005\036\037 \017!\036"\017\013#$\024\006 032\004\035\f\025\023\024\005\016\024\032\004\002\006\r\007\f\b\032\004 005 006\004\006\003\007\030\030\004\021\f\021\013\f\r\004\016\030\004\002\024\0332\006\003\r\005\007\b\004\007\024\033\004 007\024\007\022\f\021\f\024\003\004\(\024\022\037\004'\f\017\007\r\003\021\f\024\003\032\004\007\024\033\004 021\f\021\013\f\r\004\016\030\004\022\r\007\0332\007\003\f\004\006\0032\033\005\f\006\004\022\r\0162\017\004 017\r\016\022\r\007\021"\004\005\024\004B2\007\b\005\003\n\0048\006\0062\r\007\024\025\f\004\007\024\033\004 031\f\b\005\007\013\005\b\005\003\n\004\007\003\004\035\f\025\023\024\005\016\024\037\004@\005\006\004\r\f\006\f\007\r\025\023\004 005\024\003\f\r\f\006\003\006\004\005\024\025\b2\033\f6\004\f\b\f\021\f\024\003\004\007\024\033\004\006\n\006\003\f\021\004 r\f\b\005\007\013\005\b\005\003\n\032\004\033\007\021\007\022\f\004\007\025\0252\0212\b\007\003\005\016\024\004 017\r\016\025\f\006\006\f\006\032\004\017\023\n\006\005\025\007\b\004J\005\024\f\003\005\025\006\032\004\017\007\003\003\f\r\024\004\r\f\025\016\022\024\005\003\005\016\024\032\004 005\024\030\016\r\021\007\003\005\016\024\004\003\023\f\016\r\n\032\004\024\f2\r\007\b\004\024\f\003\006\032\004\021\f\007\0062\r\f\021\f\024\003\004\003\023\f\016\r\n\004\007\024\033\004 005\024\006\003\r2\021\f\024\003\007\003\005\016\024\032\004\033\f\006\007\b\005\024\007\003\005\016\024\004\003\f\025\023\024\016\b\016\022\n\032\004\024\016\024\033\f\006\003\r2\025\003\005<\f\004 003\f\006\003\005\024\022\032\004\007\024\033\004A2\007\b\005\003\n\004\025\016\024\003\r\016\b\037 017 


001 006\r\001\001 021//#;\"L\t\021\t 001G$*+\035\030$*\0261$\025\001*\024\024\025\027\001$'&\001\0353$\030/\025\035\027 005\035\023\003\002\t t n\020\017\007\005\020\007\t\027\002\003\004*\002\022\b\t\022\005\007\002\t$\t\005\020\005\003\b\007\004\016\005\003\t\017\n\003!\007\004\n\020\t 6+\035\001 027\026\030/\025\035\027*\001 026\025\0254\027*\033$*\026\024'\001 024\032\001 024%\001 035\001 0274\(\(\035\027*\035&\001 033\024$1+\001 024\033\036\027\0011$'\0012\035\001\0242*$\026'\035&\0014'&\035\033\001$'\001$\027\0274\030/*\026\024'\001*+$*\001*+\035\001&\035\025\026-\035\0330\001 033$*\035\001 026\027\001 1\024'\027 004 031  024 003 001  f\001 C\026 035 003 b 001 002 001 035\001 035H4$*\026\024'\001 031\b\\001 2\0351\024\030\035\027L\001\001 r r 031  031  031  035 034 035 034 031 035  031 033 b b 001 006 007 006 003 001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\031;\006\\001  0\001 025\024\(0\001 026*+\001 035\001 0353/\0351*$*\026\024'\001 0254\035\001 032\033\024\030\001 035\001 W4$'*4\030\001 G\0351+$'\0261\027\001 9\006\r:#\001 001 1\024'>4\($*\035\001 033$'\027/\024\027\035\001 031\023\035\033\030\026*\026$'\001 033$'\027/\024\027\035\\001\024/\035\033$*\024\033\001\026\027\001\035\030/\025\0240\035&\001*\024\001&\035*\035\033\030\026'\035\001*+\035\001H4$'*\026*\026\035\027\001 026'\0012\024*+\001/$\033*\027\001\024\032\001*+\035\001\035H4$*\026\024'\001\031;\006\\f\0016+\026\027\0010\026\035\025&\027\001*+\035\001\032\024\025\025\024%\026'\(L\001\001 r r r 031  0353/\031  031  0353/\031    035 035 034 034 033\034 035 033 034 031 035 033\035 033\035 002 026 027 001 006 006 006 030 031 032 033 001 6+\035\001'\0353*\001\026'*\035\(\033$*\026\024'\001\033\035\0274\025*\027\001\026'\001*+\035\001\035H4$*\026\024'L\001 r r r r r I I 006 031 I 0353/\031  I 031 I 0353/\031  I I I 035 035   035 035 034 034 033\034 035 033 033\035 031 035 033\035 034 033\035 033\035 036 037 026 027 026 027 006 006 001 006   030 031 030 031   032 033 032 033   003 003 001\001 023 035'1\035#\001*+\035\001\033\035\025\026$2\026\025\026*0\001\0324'1*\026\024'\001\026\027\001\0353/\033\035\027\027\035&\001$\027\001\032\024\025\025\024%\027L\001 r r r r 017 r 031  031  0353 031 I 0353 I 031  031  I 035 034 035    035 035 034 034 034 034 035 035 033\035 031 034 002 002 001 026 027 006 030 031 032 033 003 031;\017\\001 6+\035\001 035H4$*\026\024'\001 031;\017\\001 1\0244\025&\001 2\035\001 035\033\026\032\026\035&\001 032\024\033\001 035\001 1$\027\035\001 024\032\001 001 0353/\024'\035'*\026$\025\001\033\035\025\026$2\026\025\026*0\001\0324'1*\026\024'\001%\026*+\001*+\035\001\032$\026\0254\033\035\001\033$*\035\001  L\001 031  0353/\031  031 035 035  001 002 006 001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\031;\t\\001 020'*\033\024&41\026'\(\001\031\002;\\001\026'*\024\001*+\035\001\035H4$*\026\024'\001\031\003;\#\001%\035\001\0242*$\026'L\001\001 r 031  0353/\031  031\006 0353/\031   034 035 034 035 035    001 006 002 006 007 006 002 002 006 001\001\001\001\001\001\031;\007\\001 C+\035'\001 026'*\033\024&41\026'\(\001 026\027\001 0353/\033\035\027\027\026\024'\001 2$1\036\001 026'*\024\001 035\001 035H4$*\026\024'\001 031;\017\#\001 035\001 033\024/\033\026$*\035\001 0353/\024'\035'*\026$\025\001 033\035\025\026$2\026\025\026*0\001 0324'1*\026\024'\001 031;\t\\001 1\0244\025&\0012\035\001\035$\027\026\0250\001\033\035\027*\024\033\035&\f\001\001 001 001 001 005\035\023\003\002\t t 037\007\005\007\004\017\007\004\016\005\003\t\023\022\n\023\002\022\007\004\002\017\t\n\013\t\023\n\023!\003\005\007\004\n\020\t\027\b\020\005\035\004\016\017\t 6+\035\001 035\025\026-\035\0330\001 033$*\035\001 1+$'\(\035\027\001 026'\001 026\030\035\001 026*+\001 024 005 004 033\035/\033\035\027\035'*\026'\(\001 035\001 030\0244'*\001&\035\025\026-\035\033\035&\001$*\001*+\035\001\035'&\001\024\032\001*+\035\001*\026\030\035\0014'\026*\001 005 001\031@\026\(4\033\035\001;\f\006$\\f\001 020'\001 026\027\001 1$\027\035#\001 035\001 026'\026*\026$\025\001 024/4\025$*\026\024'\001 026\027\001 034 r  r\f\001 6+\035\001 0353/\0351*\035&\001 024/4\025$*\026\024'\001 0351*\024\033\001 032\024\033\001 035\001 033\035&\035*\035\033\030\026'\035&\001 035\02624\025\025\001 033\035\025\026$2\026\025\026*0\001 0324'1*\026\024'#\0014\027\026'\(\001 035H4$*\026\024'\001\031\003\#\001\026\027\001\027+\024%'\001\026'\001@\026\(4\033\035\001;\f\0062\f\001 A'\035\001 4'&\033\035&\001 033$'&\024\030\001 0351*\024\033\027\001 035\033\035\001 1$\02514\025$*\035&\001 11\024\033&\026'\(\001 024\001 035\001 027\026\0304\025$*\026\024'\001 033\0241\035\027\027\001 0353/\025$\026'\035&\001 026'\001 026\(4\033\035\001 017\f\001 024\033\001 035$1+\001 026\030\035\001 026'&\0353#\001*+\035\001$-\035\033$\(\035\001$'&\001\027*$'&$\033&\001&\035-\026$*\026\024'\001$\033\035\0011$\02514\025$*\035&\f\001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 t  004\026!\022\002\t\021\(?\t$\t\037\007\005\007\004\017\007\004\016\005\003\t\023\022\n\023\002\022\007\004\002\017\t\n\013\t\007\025\002\t\035\n\027\002\003\t 001 001 001 6 035\001 0242*$\026'\035&\001 033\035\0274\025*\027\001 026'&\0261$*\035\001 001 035\001 030\035$'\001 035\033\033\024\033\001 026\027\001 024'\001 035\001 024\033&\035\033\001\024\032\001\007\001\030$\('\026*4&\035\027\001\027\030$\025\025\035\033\001*+$'\001*+\035\001\0353/\0351*\035&\001/\024/4\025$*\026\024'\001 031@\026\(4\033\035\001;\f\006&\\f\001\001 025\027\024#\001 035\001 027*$'&$\033&\001 035-\026$*\026\024'\001 026\027\001 027\030$\025\025\035\033\001 001 035\001 033\035$\027\024'$2\025\035\001 4//\035\033\001 2\0244'&$\0330\001 K\001 035\001 027H4$\033\035\001 033\024\024*\001 024\032\001 035\001 0353/\0351*\035&\001 024*$\025\001 H4$'*\026*0\001 031@\026\(4\033\035\001 f\0061\\001 001 035\001 027\026\('$\025\005*\024\005'\024\026\027\035\001 033$*\026\024\001 027*$2\026\025\0265\035\027\001$\033\0244'&\001\002\r\r\001\031@\026\(4\033\035\001;\f\006\035\\f\001 001 t f\006$\f\001N\035\025\026-\035\0330\001\033$*\035#\001 024 026 001K\001*+\035\001 001 026'/4*\001\032\024\033\001\0353$\030/\025\035\001\020\020\f 001 f\0062\f\001E\024/4\025$*\026\024'#\001 034 026 0011$\02514\025$*\035&\001 20\001\031\003\\001\032\024\033\001\(\026-\035'\001 031!\035 f 001\001 f\0061\f\001 031\006 004 8*$'&$\033&\001&\035-\026$*\026\024 032\004 0 005\004 001 031\017 004 4//\035\033\0012\0244'&\001\032\024\033\001\027\026\0304\025$*\026\024 004\004 f\006&\f\001;1*4$\025\001&\035-\026$*\026\024 001 032\033\024\030 001 035\033$\(\035 032 034 005 004D\004R 005 004"\004 001\001 f\006\035\f\0018\026\('$\025\001*\024\001M\024\026\027\035\001\033$*\026\024 032\004 R 005 n 0 005 004\037 001\001 001 007\b\t\n\013\013 8\026\('$\025\001*\024\001M\024\026\027\035\001U$*\026\024 001 001 002\001\001 004\001\001\001 004\002\001\001 005\001\001\001 005\002\001\001 006\001\001\001 001 004\001\001 006\001\001 025\001\001 027\001\001 003\001\001\001 E\002\t 021   002 t 001 007\b\t\n\013\013 1*4$\025\001N\035-\026$*\026\024 001 036\007\001 036\006\001 036\005\001 036\004\001 001 004\001 005\001 006\001 007\001 001 004\001\001 006\001\001 025\001\001 027\001\001 003\001\001\001 E\027 t 021   027 t 001 001 004\001\001 005\001\001 006\001\001 007\001\001 002\001\001 035\001\001 001 004\001\001 006\001\001 025\001\001 027\001\001 003\001\001\001 007\b\t\n\013\013 E\016\t E\024/4\025$*\026\024'\0018*\fN\035-\f\001 001\001 031\017\\001 031\006\\001 021   016 t 001 001 002\001 004\001\001 004\002\001 005\001\001 005\002\001 001 004\001\001 006\001\001 025\001\001 027\001\001 003\001\001\001 007\b\t\n\013\013 E\024/4\025$*\026\024'#\001 034 005 004\004\004\004 3 006\r 001\t 004\004 004\004\004\004\004 E\006 t A4*/4*\001\001 021   006 t 001 034\001\001 032\001\001 004\001\001\001 004\004\001\001 004\005\001\001 004\006\001\001 004\007\001\001 001 004\001\001 006\001\001 025\001\001 027\001\001 003\001\001\001 N\035\025\026-\035\0330\001U$*\035#\001 024 005 001 001\001 E\005 t 007\b\t\n\013\013 020'/4*\001 021   005 t 


001 006\006\001\001 005\035\023\003\002\t t 0247\n\t\002\013\013\002\016\007\004*\002\t\005\026\0024\026\022\n!\023\t\027\004\017\007\022\004\006!\007\004\n\020\t\013\n\022\t b 030 t\t 6+\026\027\001\0353$\030/\025\035\001\033\035\032\035\033\027\001*\024\001*+\035\001\027$\030\035\001\026'/4*\001&$*$\001$\027\001\026'\001*+\035\001 020\007\021\017\b\f\004 002\002 f\0016+\035\001\026'/4*\001&$*$\001$\033\035\001*+\035\001-\0351*\024\033\027\001\024\032\001*+\035\001&\035\025\026-\035\0330\001\033$*\035\001\031@\026\(4\033\035\001 f\006$\\001$'&\001*+\035\001/\024/4\025$*\026\024'\0012$\025$'1\035\001\031@\026\(4\033\035\001;\f\0062\\f\001\020'\001*+\026\027\0011$\027\035#\001 024%\035-\035\033#\001 035\001 0353/\035\033\026\030\035'*$\025\026\027*\001 024\027\027\035\027\027\035\027\001 024'\0250\001 035\001 001 032\033\024\030\001 001 0332\026*\033$\0330\001 030\024\030\035'*\001 035 005\004 024'%$\033&#\001 001 005 O\t\r\r\f\001 6+\035\033\035\032\024\033\035#\001 035\001 033\0351\035&\026'\(\001 034 t\r\r 001 2\0351\024\030\035\027\001 035\001 14\033\033\035'*\001 034 r 001 001 026'\001 035'\035\033$\025#\001 t\r\r 005 034 007 001 005 034 001 001 t\r\r 005 024 007 001 004 005 024 f\001 M\024*\035\001 001 035\001 14\033\033\035'*\001 034 r 001 0242-\026\0244\027\0250\001 027\001 027\024\030\035\001 036\026'&\001 024\032\001 035\001 026\027*\033\02624*\026\024'P\001 035'1\035#\001 035\001 4'\036'\024%'\001*\0334\035\001&\026\027*\033\02624*\026\024'\001\0304\027*\0012\035\001\035\032\032\0351*\026-\035\0250\001\033\035/\033\035\027\035'*\035&\001*\024\001 025\025\024%\001 0242*$\026'\026'\(\001 001 035'\035\033$\025\0265\035&\001 4\030\035\033\0261$\025\001 027\024\0254*\026\024'\001 024\001 035\001 035H4$*\026\024'\001\031?\\f\001 026\(4\033\035\001;\f\017\001&\035\030\024'\027*\033$*\035\027\001*+\035\0011\024\030/$\033\026\027\024'\0012\035*%\035\035'\001*%\024\0011$\027\035\027\f\001 026\(4\033\035\001 f\017$\001 026\025\0254\027*\033$*\035\027\001 035\001 035-\026$*\026\024'\001 024\032\001 035\001 1$\02514\025$*\035&\001 024/4\025$*\026\024'\001\032\033\024\030\001*+\035\001$1*4$\025\001&$*$#\001+$-\026'\(\001 034 r\001 2\035\035'\001%\033\024'\(\0324\025\0250\001 1\024'\027\026&\035\033\035&\001 024\001 035\001 024\001 035\001 026\027*\033\02624*\026\024'\001 20\001 035\001 032\024\033\0304\025$\001 031\003\#\001 035\033\035$\027\001@\026\(4\033\035\001;\f\0172\001\027+\024%\027\001*+\035\0011\024'\027\035H4\035'1\035\001\024\032\001$'\001\026*\035\033$*\026-\035\001 033\0241\035\027\027\001 2$\027\035&\001 024'\001 024\005\(\033\0244/\001 035\001 026\027*\033\02624*\026\024'\001 025\035$&\026'\(\001 024\001 035\001 1\024'-\035\033\(\035'1\035\001 024\032\001 034 026 001 027\001 035\033\001 031\006\r\#\001 026*+\001 035\001 1*4$\025\001 024/4\025$*\026\024'\001 f\0016+\035\001\0353/\0351*\035&\001\0244*/4*#\001\026\f\035\f\001*+\035\001*\0334\035\001&$*$#\001\026\027\001&\033$%'\00120\001*+\035\001 027\024\025\026&\001\025\026'\035\001\026'\001@\026\(4\033\035\001;\f\017\f\0016+\026\027\001\026\027\001\026&\035'*\0261$\025\001*\024\001@\026\(4\033\035\001;\f\0062\00124*\001 026\032\032\035\033\035'*\0250\001\0271$\025\035&\001\024'\001*+\035\001-\035\033*\0261$\025\001$3\026\027\f\001 6+\035\001 026*\035\033$*\026\024'\001 033\0241\035\027\027\001 027\001 2\035\035'\001 035\033\030\026'$*\035&\001 4\027\026'\(\001 001 026\0274$\025\001 1\033\026*\035\033\026\024'\0011\024'1\0254&\026'\(\001*+\035\001\032\024\025\025\024%\026'\(\001-$\0254\035\027\001\024\032\001*+\035\001/$\033$\030\035*\035\033\027L\001 022 031 n\0162\024\022  O\t?\0019*\026\030\035\0014'\026*\027:#\001 022 031 016\b\033  O\006\002\007\0019*\026\030\035\0014'\026*\027:\001$'&\001 3 r\f?\r?\f\001 6+\035\027\035\001 0254\035\027\001 033\035\001 1*4$\025\0250\001 030\035$'\026'\(\025\035\027\027\001 24*\001 027411\035\027\027\0324\025\0250\001 033\035/\033\035\027\035'*\026'\(\001*+\035\0014'\036'\024%'\001\033\035$\025\001&\026\027*\033\02624*\026\024'\f\001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 027\f\022\f\024\0336\004 f\017 037\004%\007\b\0252\b\007\003\f\033\004\017\016\0172\b\007\003\005\016\024\004\007\006\0062\021\005\024\022\004\034 r 004\023\007\006\004\024\016\004\007\022\f\004\021\f\021\016\r\n\004\004 004\004\007\006\004\017\f\r 001\031\003 037\004 f\0172 037\004%\007\b\0252\b\007\003\f\033\004\017\016\0172\b\007\003\005\016\024\004\007\006\0062\021\005\024\022\004\034 r 017 023\007\006\004\003\t\016\004\007\022\f\036\022\r\0162\017\004\004 004\004\033\005\006\003\r\005\0132\003\005\016\024\004\007\006\004\017\f\r\004 031\006\r 037 017 001 004\026!\022\002\t\021\(>\t$\t/\n\023!\003\005\007\004\n\020\t\013\n\022\t\0077\n\t\005\026\0024\026\022\n!\023\t\005\023\023\022\n\005\016\025 001 001 6 035\001 026\030/$1*\001 024\032\001 033\035$*\026'\(\001 034 r 001 033\024'\(\0324\025\0250\001 032$&\035\027\001 0\001 032*\035\033\001 025\025\001 035\001$\033*\0261\025\035\027\001\024\032\001 034 r\001 001+$-\035\001\022&\026\035&\022#\001\026'\001*+\026\027\001\0353$\030/\025\035\001$\033\0244'&\001 035 004\r\r f\001 001 001 001 t 005\035\023\003\002\t"0 t 024\025\002\t\004\035\023\003\002\035\002\020\007\005\007\004\n\020\t\n\013\t\022\002\005\003\t\013\004\002\003\027\t\027\005\007\005\t\t 6+\035\001 0353*\001 0353$\030/\025\035#\001 026\030\026'\(\001 001 035\001 035-\035\025\024/\030\035'*\001 024\032\001 1*4$\025\001 027/\0351\026\035\027I\001\033\035\025\026$2\026\025\026*0\001\030\024&\035\025#\001\032\024\025\025\024%\027\001$\001\033\0244*\035\001\032\024\033\001\026\030/\025\035\030\035'*\026'\(\001 035\001\(\035'\035\033\0261\001/\033\0241\035&4\033\035\001\0244*\025\026'\035&\001\026'\001\027\0351*\026\024'\001?\f\001\001 M\024'\035*+\035\025\035\027\027#\0014\027\035\0324\025\001\033\035\(4\025$\033\0265$*\026\024'\027\001$\033\035\0010\035*\001/\024\027\027\0262\025\035\001/\033\026\024\033\001*\024\001 035\001 0250\027\026\027\f\001 020'*\033\024&41\026'\(\001 035\001&$*$\001*\024\001*+\035\001 035H4$*\026\024'\001 031\004\\001 026\025\035\001 4\033/\024\027\035\0250\001 033\035\027\027\026'\(\001 035\001 0353/\024'\035'*\026$\025\001 033\035\025\026$2\026\025\026*0\001 030\024&\035\025\001 035'$2\025\035\027\001 035\001 1$\02514\025$*\026\024'\001 024\032\001 035\001 027/\0351\026\035\027I\001 G66@\f\001 6+\026\027\001 1+$\033$1*\035\033\026\027*\0261\001 026\027\001 0353/\0351*\035&\001 024\001 033\0243\026\030$*\035\0250\001 030$\026'*$\026'\001 026*\027\001 0254\035\001 026'\001 035\001 032\026'$\025\001 030\024&\035\025\001 032\024\033\001 0'$\030\0261#\001 030$\027\027\005\027*$*\026\027*\0261\027#\001 001 2$\027\035\f\001 6+\026\027\001 0\026\035\025&\027\001 035\001 0271$\025\035\001 033$\030\035*\035\033\001 9*\026\030\035\001 4'\026*\027:\001 K\001 035\033\035\026'$\032*\035\033\001*+\035\001G66@#\001%+\0261+\001@\024\033\001*+\035\001C\035\02624\025\025\001&\026\027*\033\02624*\026\024'\001\026\027\001 0353/\033\035\027\027\035&\001 20\001 022 023 006 006\n 035\035 025 024 001 006  007 001 026*+\001 Y\001 027\001 035\001 034$\030\030$\001 032 4'1*\026\024'\f\0016+\026\027\001G66@\001\027\035*\027\001$\001-$\025\026&\001\(4\035\027\027\001-$\0254\035\001$'&\001\035\026*+\035\033\001\024\032\001 035\001 033$\030\035*\035\033\027\001  001 024\033\001  001 025\024'\035\001 027+\0244\025&\001 2\035\001 032\026**\035&\f\001 024\033\001 025\035\027\027\001 0'$\030\0261\001 001 2$\027\035\027#\001 033*\02614\025$\033\0250\001 026*+\001 024\001 035%\001 035\025\026-\035\033\026\035\027\001 027\001 026'\001 035\001 1$\027\035\001 027*4&0\001 002\002 001 035\001 035\033$\(\035\001 024/4\025$*\026\024'\001 035\001 001 035 r 001 026\032\001 026\025$2\025\035#\001\030$0\0012\035\0014\027\035&\001$\027\001$\001\(4\035\027\027\001-$\0254\035\001\032\024\033\001*+\035\001\035\032\032\0351*\026-\035\001$\(\035\f\001\001 024\025\025\024%\026'\(\001 035\001 033\0241\035&4\033\035#\001 035\001 032\026\033\027*\001 027\035\001 024\032\001 035\001 0250\027\026\027\001 035'1\035\001 027\0274\030\035\027\001 001 035\001 035\001 026\027*\033\02624*\026\024'\001 024\032\001 034 r 001 026\027\001 0353/\033\035\027\027\035&\001 20\001$\001\024'\035\005\(\033\0244/\001\035\032\032\0351*\026-\035\001$\(\035\f\0016+\035\001\030$*+\035\030$*\0261$\025\001&\035\0271\033\026/*\026\024'\001 024\032\001*+\026\027\0011$\027\035\001\026\027\001*+\035\001\027$\030\035\001$\027\001\026'\001*+\035\001\032\024\033\0304\025$\001\031\006\r\\001%\026 r 034 001 f\001 6+\035\001 026*\035\033$*\026-\035\001 033\024\(\033\035\027\027\001 026'\001 032\026**\026'\(\001 035\001 030\024&\035\025\001 026\027\001 1+\026\035-\035&\001 20\001 030\035$'\027\001 024\032\001$\001\033\035\025\035-$'*\001/\035'$\025*0\001\031\025\024\027\027\\001\0324'1*\026\024'\f\001\020'\001\0244\033\001$'$\0250\027\026\027\001 035\001 033\024\024*\001 030\035$'\001 027H4$\033\035\001 035\033\033\024\033\001 031 031*5 001 027\001 026\030/\025\035\030\035'*\035&\f\001 020*\001 030\035$\0274\033\035\027\001 035\001 001 2\035*%\035\035'\001 035\001 030\024&\035\025\001 024\032\001 035\001 035H4$*\026\024'\001 031\006\r\\001 001*+\035\001\032\026\035\025&\001$1*4$\025\001/\024/4\025$*\026\024'\f\0016+\035\001UG8\021\001\032\024\033\0304\025$\001\026\027L\001 022 023 022 023 017 Z Z 006 031  031  f f  005 021\016\033\f\b 005 030\005\f\b\033 005 031*5 017 034 017 034  033 030 001 001 002 002 n 002 002 001 C+\035\033\035 017 002 001\026\027\001$\001-\0351*\024\033\001\024\032\001$\025\025\001\030\024&\035\025\001/$\033$\030\035*\035\033\027\001$\027\001/\035\033\001\031\006\r\\001$'&\001 031  005 033\037\030\037 001\026\027\001*+\035\001'4\0302\035\033\001\024\032\001\033\035$&\026'\(\027\001\030\026'4\027\001&\035\(\033\035\035\027\001\024\032\001\032\033\035\035&\024\030\001 K\001*+\035\001\030\024&\035\025I\027\001'4\0302\035\033\001\024\032\001/$\033$\030\035*\035\033\027\f\001\001 6\0334'1$*\026'\(\001 1\033\026*\035\033\026\024'\027\001 033\035\001 025\027\024\001 033\035H4\026\033\035&\f\001 6+\0350\001 030$0\001 0330\001 02742>\0351*\001 024\001 035\001 H4$\025\026*0\001 024\032\001 035\001 001 035\001 033\035H4\026\033\035&\001 114\033$10\001 024\033\001 035\001 027*$\(\035\001 024\032\001 035\001 033\0241\035&4\033\035\f\001 024\033\001 026'\027*$'1\035#\001 026'\001 1$\027\035\001 001 024'\035\005 033\0244/\001 035\032\032\0351*\026-\035\001 035\001 030\024&\035\025\001 026\027\001 032$\033\001 032\033\024\030\001 1\024'-\035\033\(\026'\(#\001 026\0274$\025\001 1\033\026*\035\033\026\024'\001 030$0\001 0274\032\032\0261\035\001 024\001 030\024-\035\001 032\024\033%$\033&\001 024\001 035\001 0353*\001 027\035\001 4\027\026'\(\001 024\005\(\033\0244/\001 035\032\032\0351*\026-\035\001 035\001 030\024&\035\025\f\001 020'\001 024*+\035\033\001 1$\027\035\027#\001 035\001 033\0241\035&4\033\035\001 030$0\001 2\035\001 0334'1$*\035&\001 026\032\001 035\001 026\030/\033\024-\035\030\035'*\001 026'\001 UG8\021\001 0254\035\001\026\027\001'\035\(\025\026\(\0262\025\035\f\001\020'\0011$\027\035\001*+\035\001\026'/4*\001&$*$\001$\033\035\001\030\024\027*\001&0'$\030\0261#\001 027\001 026'\001 035\001 1$\027\035\001 027*4&0\001 4 001 035\001 UG8\021\001 030$0\001 2\035\001 1\024\030/$\033\035&\001 024\001 001 11\035/*$2\025\035\001 035-$\0254$*\026\024'\001 024\032\001 035\001 026'/4*\001 032\02541*4$*\026\024'\027P\001 020\032\001 026*\001 026\027\001 027\030$\025\025\035\033\001 001 035\001 026'/4*\001 027*$'&$\033&\001 035-\026$*\026\024'#\001 035\001 033\0241\035&4\033\035\001 0304\027*\0012\035\001*\0334'1$*\035&\001\027\026'1\035\001$'0\001\027\035\035\030\026'\(\001\026\030/\033\024-\035\030\035'*\001\026\027\001$\001\030\035\033\035\001 026\025\0254\027\026\024'\f\001 6+\035\001 025$\027*\001 027*\035/\001 024\032\001 035\001 033\0241\035&4\033\035\001 0353$\030\026'\035\027\001 035*+\035\033\001 035\001 1\024'\027\035H4\035'*\026$\025\001 030\024&\035\025\001 024\032\001 035\001 033\035\025\026$2\026\025\026*0\001 0324'1*\026\024'#\001 026*+\001 024'\035\005 033\0244/\001 035\032\032\0351*\026-\035\001 035#\001 026\027\001 027$*\026\027\032$1*\024\0330\001 11\024\033&\026'\(\001 024\001 035\001 0334'1$*\026'\(\001 1\033\026*\035\033\026\024'\f\001 020*\001 030$0\001 027*\026\025\025\001 2\035\001 024\027\027\0262\025\035#\001 024%\035-\035\033\001 024*\001 0351\035\027\027$\0330#\001 024\001 0324\033*+\035\033\001 030\024&\026\0320\001 035\001 030\024&\035\025\001 20\001 1\024\030\030\035'1\026'\(\001 001 027\0351\024'&\001 027\035\001 026*+\001 024\005\(\033\0244/\001 035\032\032\0351*\026-\035\001 035\001 026\027*\033\02624*\026\024'\f\001 001 026\027\001/+$\027\035#\001*+\035\001%+\024\025\035\001/\033\0241\035&4\033\035\001\026\027\001/\035\033\032\024\033\030\035&\001$\025\025\001\024-\035\033\001$\($\026'#\001 026*+\001\030\024\033\035\0014'\036'\024%'\001/$\033$\030\035*\035\033\027\001$\027\001/\035\033\001\031\006\r\\f\001\001 001 001 004\034\001 005\001\001 005\005\001 005\007\001 005\035\001 005\034\001 006\001\001 001 005\001\001 007\001\001 035\001\001 034\001\001 004\001\001\001 007\b\t\n\013\013 031 031?2 001 EJJ\t 032\020&\024\017\022\b\032\033\013\013\013\013\013\013\013\013 \013\003\001 013 005 013 001 031  f 017   001\001 031  f 017 2  001\001 


Copyright © 2009 Boeing. All rights reserved  Correlation Process To archive received ASDI data  Track messages must be correlated with flight plan messages FLIGHT_KEY assigned Uncorrelated data tagged Approx 30 minutes to correlate one day of data 


Copyright © 2009 Boeing. All rights reserved  Historical Data Processing To load correlated data  Uncompress, unmarshall  Create a list of files containing the correlated data  Write data to warehouse 


Copyright © 2009 Boeing. All rights reserved  Live Data Processing Processed using IBM MQ IBM Message Broker and a technique called XML Shredding Message Broker Compute Nodes  Uncompress Node  Extract correlated messages  Shred Node adds to DB Stored Procedure ìshreds XML docs and adds to tables 


Copyright © 2009 Boeing. All rights reserved  Issues and Observations Initial load of one day of data ~ 7 hours Optimizations  Write data in batches  Use a mutable data structure to create data strings  Deploy a higher performance machine  Use load instead of insert  Use DB2 Range-Partitioned tables  Database tunings Time reduced from 7 hours to approx 30 minutes 


Copyright © 2009 Boeing. All rights reserved  Optimizations Use a mutable data structure to create data strings  Original application created the SQL statement by appending elements to a Java String  It was taking five hours \(of the seven hours Strings  Instead Java StringBuilder used  Java Strings immutable  Time savings of 71.4 


Copyright © 2009 Boeing. All rights reserved  Optimizations Deployed on a higher-performance machine  Application ported from IBM Blade Center HS21 \(4GB of RAM and 64-bit dual-core Xeon 5130 processor to Dell M4500 computer \(4GB of RAM and 64-bit of quad-core Intel Core i7 processor  Reduced the time to thirty minutes Bulk loading instead of insert  Application was modified to write CSV files for each table  Entire day worth of data bulk loaded  Reduced the time to fifteen minutes 


Copyright © 2009 Boeing. All rights reserved  Optimizations Range-Partitioned tables \(RPT  To limit the size of tables, the original code created multiple tables per table type  This puts burden on the application to query multiple tables when a range crosses several tables  With RPT, user is not required to make multiple queries when a range crosses a table boundary  Increased the time to thirty minutes  Additional fifteen minute cost per day of partitioning enabled time savings during queries 


Copyright © 2009 Boeing. All rights reserved  Optimizations Database tunings  Range periods changed from a week to a month  Automatic table space resizing changed from 32MB to 512KB  Buffer pool size decreased  Decreased the time to twenty minutes Overall, total time savings of 95.2 


Copyright © 2009 Boeing. All rights reserved  20 IBM Confidential Analytics Landscape Degree of Complexity Competitive Advantage Standard Reporting Ad hoc reporting Query/drill down Alerts Simulation Forecasting Predictive modeling Optimization What exactly is the problem What will happen next if What if these trends continue What could happen What actions are needed How many, how often, where What happened Stochastic Optimization Based on: Competing on Analytics, Davenport and Harris, 2007 Descriptive Prescriptive Predictive How can we achieve the best outcome How can we achieve the best outcome including the effects of variability Used with permission of IBM 


Copyright © 2009 Boeing. All rights reserved Initial Analysis Activities Flights departing or arriving on a date Flights departing or arriving within a date and time range Flights between city pair A,B Flights between a list of city pairs Flights passing through a volume on a date. \(sector, center, etc boundary Flights passing through a volume within a date and time range Flights passing through an airspace volume in n-minute intervals All x-type aircraft departing or arriving on a date Flights departing or arriving on a date between city pair A,B Flights departing or arriving on a date between a list of city pairs Flights passing through a named fix, airway, center, or sector Filed Flight plans for any of the above Actual departure, arrival times and actual track reports for any of the above 


Copyright © 2009 Boeing. All rights reserved  Initial SPSS Applications Show all tracks by call sign 


Copyright © 2009 Boeing. All rights reserved  Predictive / Prescriptive Analytics Use-Case For a given Airspace Volume of Interest \(AVOI compute distinct traffic volume at some point in the future  Aim to alert on congestion due to flow control areas or weather if certain thresholds are exceeded  Prescribe solution \(if certain thresholds are exceeded Propose alternate flight paths  Use pre-built predictive model  SPSS Modeler performs data processing Counts relevant records in the database \(pattern discovery Computes traffic volume using statistical models on descriptive pattern Returns prediction with likelihood 


Copyright © 2009 Boeing. All rights reserved  Predictive / Prescriptive Analytics Use-Case Advanced Arrival Procedures with Active Abatement Potentials   9/23/10  24 Pulls in the TRACKINFO table of MAIN using SQL Limits the data to database entries which fall inside the AVOI Combines the SOURCE_DATE and SOURCE_TIME to a timestamp that can be understood by modeler Computes which time interval the database entry falls in. The time interval is 15 minutes Defines the target and input fields needed for creating the model Handles the creation of the model Produces a graph based off of the model results Final prediction 


Copyright © 2009 Boeing. All rights reserved  Initial Cognos BI Applications IBM Cognos Report Studio  Web application for creating reports  Can be tailored by date range, aircraft id, departure/arrival airport etc  Reports are available with links to visuals IBM Framework Manager  Used to create the data package  Meta-data modeling tool  Users can define data sources, and relationships among them Models can be exported to a package for use with Report Studio 


Copyright © 2009 Boeing. All rights reserved  Flights Departing Las Vegas on Jan 1, 2012 1 of 3 Report shows the departure date, departure and arrival locations and hyperlinks to Google Map images DeparturePosition and ArrivalPosition are calculated data items formatted for use with Google Maps Map hyperlinks are also calculated based on the type of fix 


Copyright © 2009 Boeing. All rights reserved  Flights Departing Las Vegas on Jan 1, 2012 2 of 3 DeparturePosition, Departure Map, ArrivalPosition and Arrival Map are calculated data items \(see departure items below DepartureLatitude DepartureLongitude DeparturePosition Departure Map 


Copyright © 2009 Boeing. All rights reserved  Flights Departing Las Vegas on Jan 1, 2012 3 of 3 


Copyright © 2009 Boeing. All rights reserved  Conclusion and Next Steps Current archive is 50 billion records and growing  Approximately 34 million elements per day  1GB/day Sheer volume of raw surveillance data makes analytics process very difficult The raw data runs through a series of processes before it can be used for analytics Next Steps  Continue application of predictive and prescriptive analytics  Big data visualization 


Copyright © 2009 Boeing. All rights reserved  Questions and Comments Paul Comitz Boeing Research & Technology Chantilly, VA, 20151 office Paul.Comitz@boeing.com 


Copyright © 2009 Boeing. All rights reserved Advanced Arrival Procedures with Active Abatement Potentials   9/23/10  31 


Copyright © 2009 Boeing. All rights reserved Advanced Arrival Procedures with Active Abatement Potentials   9/23/10  32 Backup Slides 


Copyright © 2009 Boeing. All rights reserved  Initial Approach Initial Investigations  Apache Solr/Lucene  Data Warehouse Evaluate Hadoop in the future 


Copyright © 2009 Boeing. All rights reserved  Using SOLR Uncompress Track Information Messages To use with Solr  Transforming track messages from their  original schema to Solr required building a ìkey, valueî list using an XSTL  Queries made against this list of ìkey, valueî pairs Transformation Process  One day of data ~ 4.5 hours Once transformation complete search/query performance very good Geo spatial queries using  unique query language 


Copyright © 2009 Boeing. All rights reserved  Representation Aviation data is frequently represented in more than one form 


