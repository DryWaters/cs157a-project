A Case Study on Web Application Security Testing with Tools and Manual Testing LaShanda Dukes, Xiaohong Yuan, Francis Akowuah Department of Computer Science North Carolina Agricultural & Technical State University Greensboro, United States ldukes@aggies.ncat.edu  xhyuan@ncat.edu  fakowua@aggies.ncat.edu     Abstract 000 Web application security has become a big issue because of common vulnerabilities found in web applications This paper illustrates a case study on conducting security testing on an example application Tunestore The example application was tested using a number of tools such as Paros WebScarab JBroFuzz Acunetix and Fortify Manual testing was also conducted  The testing results of different tools and manual testing are compared and discussed Our case study shows manual testing is very important since some vulnerability types 000F\000D\000Q\000\003 000R\000Q\000O\000\\\000\003 000E\000H\000\003 000I\000R\000X\000Q\000G\000\003 000W\000K\000U\000R\000X\000J\000K\000\003 000P\000D\000Q\000X\000D\000O\000\003 000W\000H\000V\000W\000L\000Q\000J\000\003 000D\000Q\000G\000\003 000W\000H\000V\000W\000H\000U\000¶\000V\000\003 observations and it is important to utilize a variety of tools as well as conduct careful manual testing in order to find the most number of vulnerabilities in a web application. Based on this case study, hands-on labs can be developed for teaching web security software security testing, and other topics  I  I NTRODUCTION  Web applications today are highly functional and rel y upon a two-way flow of information between the server and browser. Security becomes a big issue because no one wants to use a web application if they believe their information will be disclosed to unauthorized parties 1   V ul n e ra b i l i t i e s  commonly found in web applications include injection crosssite scripting cross-site request forgery security misconfiguration broken authentication and session management, and more Penetration testing and static code analysis may be used to assess the vulnerabilities of web applications Penetration testing is a method of security testing through the simulation of an attack  Static code analysis also known as source code 000D\000Q\000D\000O\000\\\000V\000L\000V\000\003\000L\000V\000\003\000D\000\003\000F\000R\000G\000H\000\003\000U\000H\000Y\000L\000H\000Z\000\003\000S\000U\000R\000F\000H\000V\000V\000\003\000W\000K\000D\000W\000\003\000H\000[\000D\000P\000L\000Q\000H\000V\000\003\000W\000K\000H\000\003\000V\000R\000I\000W\000Z\000D\000U\000H\000¶\000V\000\003 source code for common coding errors and defects without execution [3    This case study uses an example web application Tunestore to conduct security testing It illustrates web application security testing using tools and manual testing. The tools used to conduct testing on Tunestore are Paros WebScarab JBroFuzz Fortify and Acunetix Our case study shows manual testing is very important since some vulnerability types can only be found through manual testing 000D\000Q\000G\000\003\000W\000H\000V\000W\000H\000U\000¶\000V\000\003\000R\000E\000V\000H\000U\000Y\000D\000W\000L\000R\000Q\000V\000\017\000\003\000D\000Q\000G\000\003\000L\000W\000\003\000L\000V\000\003\000L\000P\000S\000R\000U\000W\000D\000Q\000W\000\003\000W\000R\000\003\000X\000W\000L\000O\000L 000H 000\003 000D 000\003 000Y 000D 000U\000L 000H 000W 000 000\003 of tools as well as conduct careful manual testing in order to find the most number of vulnerabilities in a web application Based on this case study hands-on labs can be developed to teach about web application vulnerabilities software security testing, and other topics This paper is organized as follows Section II discusses some common web application vulnerabilities Section III describes the tools we used for web application security testing Section IV gives a description of the example application used to conduct security testing, and Section V and VI discuss the results from testing the example application using tools as well as through manual testing Section VII provides further discussion on the testing results and Section VIII concludes the paper II  C OMMON WEB A PPLICATION V ULNERABILITIES  This section discusses common vulnerabilities of  web applications They include SQL injection cross-site scripting cross-site request forgery broken authentication and session management The se  vulnerabilities were listed in OWASP 000¶\000V\000\003 Top 10 Project as among the Top 10 critical web application security risks 4  T h e y  a l s o  a ppe a r s i g ni f i c a nt l y  i n t h e  W e b Hacking Incident Database WHID    A  b ri e f  di s c us s i o n i s  provided here. A more detailed discussion can be found in [6   SQL injection is a vulnerability type where an application accepts malicious scripts that are later parsed and executed The fundamental way of attack involves the direct insertion of code into user-input variables that are concatenated with SQL commands and executed A rare and indirect way of attack is where the malicious code is injected into strings that are destined for storage in a table or as metadata Subsequently when the stored string is concatenated into a dynamic SQL command the malicious code is executed  An attacker can anonymously read and modify data contained in a database as well as take full control of the server by exploiting the SQL vulnerability An  application is vulnerable to cross-site scripting XSS vulnerabilities when it takes untrusted data and sends it to a web browser without proper validation and escaping This allows attackers to embed malicious JavaScript VBScript ActiveX, HTML or Flash into a dynamic page to trick the user executing the script on his machine in order to gather data  hijack sessions, redirect users to a malicious site or deface the website  Furthermore  a successful attack m ay  result in the compromising of private information, manipulation or theft of cookies, creation of requests that can be mistaken for those of a This work is partially supported by Department of Education under grant P120A090049 and NSF under grant HRD 1137516. Any opinions, findings and conclusions or recommendations expressed in this material are those of the author\(s\ and do not necessarily reflect the views of the National Science Foundation and Department of Educ ation  


valid user. It might also cause the execution of malicious code on the end user systems Three types of XSS exist The first one is Reflected XSS in which dynamic web pages take text submitted by a client or user and simply renders this text back to user within its response. The second type is Stored XSS. It occurs where some malicious user-submitted data is stored in a database to be used in the creation of pages that will be served to other users later. Thus visitors of the web page fall victim for this attack. Lastly, Local XSS exploit targets vulnerabilities that exist within the webpage code itself. Usually, this happens when Document Object Model DOM is wrongly used in JavaScript As a result opening another web page with malicious JavaScript code in it at the same time might actually alter the code in the first page on the local system Broken authentication and session management is the vulnerability whereby the application does not implement its authentication and session management functions correctly The attacker uses leaks or flaws such as exposed accounts session IDs and passwords in the authentication or session management function to impersonate users When successful an attacker is able to do anything the victim could do The situation worsens when the administrator is the victim Cross-site request forgery usually occurs where HTTP cookies are primarily used to transmit session tokens Where precaution is not taken against the misuse of the token an attacker can trick an authenticated user to perform actions of his \(attacker\ choosing. Victims are forced to change data and perform functions they are allowed or authorized to do Insecure direct object reference is a common web application vulnerability regarding access control This occurs when an application wrongfully exposes a reference to an internal implementation object An attacker usually an authorized user, exploits this vulnerability by simply changing a parameter value that references a system object. This enables him to access unauthorized objects III  T OOLS U SED IN THE C ASE S TUDY  This section briefly describes the tools used in this case study which are Paros WebScarab JBroFuzz Acunetix and Fortify A  Paros Paros [7  i s  a  f r e e  w e b  a p pl i c a t i o n v u l n e ra b i l i t y  a s s e s s m e nt  tool written in Java by ProofSecure.com It can be used as a web spider, vulnerability scanner, proxy, and a fuzzer. The web spider function is used to discover the content of a website by parsing a webpage for links to other content, requesting these pages and continuing this process recursively The scanner function scans the web application to identify common vulnerabilities such as cross-site scripting SQL injection forms with autocomplete enabled old versions of files etc Paros can also trap HTTP and HTTPS requests and responses so they can be modified manually [1    B  WebScarab WebScarab 9 i s  a n o pe n s o u r c e  w e b  a p pl i c a t i o n s e c u ri t y  testing tool written in Java. The tool is a part of the Open Web Application Security Project \(OWASP\[10  I t  c a n  b e  us e d  f o r  analyzing applications that communicate with HTTP and HTTPS protocols WebScarab operates as an intercepting proxy in which the user is allowed to review and modify intercepted requests that are created by the browser and responses from the server. Similar to Paros, it can be used as a web spider to discover the content of a website The fuzzer feature of WebScarab allows a user to test a web page by taking a list of test strings and trying them in the input fields automatically [1    C  JBroFuzz  JBroFuzz is a web application fuzzer written in Java and is a part of the OWASP Project. The fuzzer is for requests made over HTTP and HTTPS protocols [12  T h e  f uz z i ng f e a t u r e  i s  used to create a HTTP request to send to the web application A fuzzer can be added to a parameter field to add attack payloads The payload feature has attack strings of several vulnerability categories such as Injection XSS Integer Overflow, XPATH Injection, SQL Injection, and more. HTTP responses are displayed in an output window showing the payload and the HTTP response status code. The responses of the web application to the attack strings are also shown. The graphing feature can generate different types of graphs to visualize the fuzzing results There are six types of graphs/charts Status Code Pie Chart Response Time Bar Chart Response Size Bar Chart Jaccard Index Hamming Distance, and Response Header D  Acunetix  Acunetix is a product of the Acunetix Company [1   I t  i s  a  000Z\000H\000E\000\003 000Y\000X\000O\000Q\000H\000U\000D\000E\000L\000O\000L\000W\000\\\000\003 000V\000F\000D\000Q\000Q\000H\000U\000\003 000F\000U\000H\000D\000W\000H\000G\000\003 000W\000R\000\003 000U\000H\000S\000O\000L\000F\000D\000W\000H\000\003 000K\000D\000F\000N\000H\000U\000¶\000V\000\003 methodologies to find vulnerabilities in web applications Acunetix crawls through the websites to analyze the content including flash content SOAP and AJAX The scanner includes features such as advanced and in-depth SQL injection and cross-site scripting testing penetration tools which include HTTP Editor and HTTP Fuzzer, and others. The cost of the tool ranges from 1,000  12,995 It has a free trial version that can only scan for cross-site scripting vulnerabilities in a web application. In this case study, the free trial version was used to test the example web application E  Fortify  Fortify is a static analysis tool used to find root causes of security vulnerabilities in source code Fortify supports a range of languages platforms build environments and software component APIs Fortify can detect more than 480 types of software security vulnerabilities among 20 different languages. The tool displays results sorted by severity of risk and guidance on how to mitigate the risks 1   T h e  demonstration version of the software that comes with the 000E\000R\000R\000N\000\003\000³\0006\000R\000I\000W\000Z\000D\000U\000H\000\003\0006\000H\000F\000X\000U\000L\000W\000\\\000\035\000\003\000%\000X\000L\000O\000G\000L\000Q\000J\000\003\0006\000H\000F\000X\000U\000L\000W\000\\\000\003\000,\000Q\000´\000\003\000  o nl y  s c a n s  for SQL injection buffer overflow system information leak and HTTP response splitting vulnerabilities. In this case study the demonstration version of Fortify was used to test the example web application Table 1 summarizes the automated tools used for the case study 


IV  T HE E XAMPLE A PPLICATION  The application used to conduct security testing is the Tunestore web application developed by Dr Bei-Tseng Bill 000&\000K\000X\000¶\000V\000\003 000S\000U\000R\000M\000H\000F\000W\000\003 000W\000H\000D\000P\000\003 000I\000U\000R\000P\000\003 000W\000K\000H\000\003 0008\000Q\000L\000Y\000H\000U\000V\000L\000W\000\\\000\003 000R\000I\000\003 0001\000R\000U\000W\000K\000\003 000&\000D\000U\000R\000O\000L\000Q\000D\000\003 000D\000W\000\003 Charlotte. The Tunestore web application is a .war file installed on a server on an Ubuntu Virtual Machine to conduct security testing. Tunestore is an online retail store of songs. A user has to create an account to gain access to the store and its database of songs although users may view the list of songs without being a registered user Registered users are able to select 000V\000H\000Y\000H\000U\000D\000O\000\003 000R\000S\000W\000L\000R\000Q\000V\000\003 000Z\000L\000W\000K\000L\000Q\000\003 000W\000K\000H\000\003 000V\000W\000R\000U\000H\000\035\000\003 000³\000D\000G\000G\000\003 000E\000D\000O\000D\000Q\000F\000H\000´\000\017\000\003 000³\000I\000U\000L\000H\000Q\000G\000V\000´\000\017\000\003 000³\000S\000U\000R\000I\000L\000O\000H\000´\000\017\000\003 000³\000&\000'\000V\000´\000\017\000\003 000D\000Q\000G\000\003 000³\000O\000R\000J\000\003 000R\000X\000W\000´\000\021\000\003 0007\000K\000H\000\003 000³\000D\000G\000G\000\003 000E\000D\000O\000D\000Q\000F\000H\000´\000\003 000R\000S\000W\000L\000R\000Q\000\003 allows the user to add money to their account by using a credit card to purchase songs 000\021\000\003\0007\000K\000H\000\003\000³\000I\000U\000L\000H\000Q\000G\000V\000´\000\003\000R\000S\000W\000L\000R\000Q\000\003\000D\000O\000O\000R\000Z\000V\000\003\000W\000K\000H\000\003\000X\000V\000H\000U\000\003\000W\000R\000\003 add and view friends as well as accept friend requests The 000³\000S\000U\000R\000I\000L\000O\000H\000´\000\003\000R\000S\000W\000L\000R\000Q\000\003\000S\000U\000R\000Y\000L\000G\000H\000V\000\003\000W\000K\000H\000\003\000X\000V\000H\000U\000\003\000Z\000L\000W\000K\000\003\000W\000K\000H\000L\000U\000\003\000X\000V\000H\000U\000Q\000D\000P\000H\000\003\000D\000Q\000G\000\003\000W\000K\000H\000L\000U\000\003 current account balance The user may also change their 000S\000D\000V\000V\000Z\000R\000U\000G\000\003 000X\000Q\000G\000H\000U\000\003 000W\000K\000H\000\003 000³\000S\000U\000R\000I\000L\000O\000H\000´\000\003 000R\000S\000W\000L\000R\000Q\000\021\000\003 0007\000K\000H\000\003 000³\000&\000'\000V\000´\000\003 000R\000S\000W\000L\000R\000Q\000\003 displays a list of songs the user can buy, send as a gift, or make 000D\000\003 000F\000R\000P\000P\000H\000Q\000W\000\003 000X\000Q\000G\000H\000U\000\003 000W\000K\000H\000\003 000&\000'\000\021\000\003 0007\000K\000L\000V\000\003 000R\000S\000W\000L\000R\000Q\000\003 000D\000O\000V\000R\000\003 000V\000K\000R\000Z\000V\000\003 000W\000K\000H\000\003 000X\000V\000H\000U\000¶\000V\000\003 000S\000X\000U\000F\000K\000D\000V\000H\000G\000\003\000&\000'\000V\000\021\000\003\0007\000K\000H\000\003\000³\000O\000R\000J\000\003\000R\000X\000W\000´\000\003\000R\000S\000W\000L\000R\000Q\000\003\000O\000R\000J\000V\000\003\000W\000K\000H\000\003\000X\000V\000H\000U\000\003\000R\000X\000W\000\003\000R\000I\000\003\000W\000K\000H\000L\000U\000\003 profile and redirects them to the homepage of the store V  S ECURITY T ESTING WITH T OOLS  The Tunestore web application was tested using the five tools described in Section III This section describes the testing results of using these tools A  Testing Results with Paros Using the scanner feature of Paros 37 potential vulnerabilities were discovered in the Tunestore web application These vulnerabilities are listed below The number following the vulnerability refers to the number of occurrences of the vulnerability  000x  Obsolete File 7 It indicates that miscellaneous items including files backup unused or obsolete files exist If these files contain program source information such as server logic or ODBC/JDBC user IDs and passwords may be revealed since these file extensions may not be processed by the web server 000x  Obsolete File Extended Check 7 It also indicates that miscellaneous items including files backup unused, or obsolete files exist 000x  Password Autocomplete in Browser 7 This vulnerability means the AUTOCOMPLETE attribute is not disabled in the HTML FORM/INPUT element containing password type input Passwords may be stored in browsers and retrieved 000x  Session ID in URL rewrite 7 URL rewrite is used to track user session IDs The session ID may be disclosed in the referer header Besides the session 000,\000'\000\003 000F\000D\000Q\000\003 000E\000H\000\003 000V\000W\000R\000U\000H\000G\000\003 000L\000Q\000\003 000W\000K\000H\000\003 000E\000U\000R\000Z\000V\000H\000U\000¶\000V\000\003 000K\000L\000V\000W\000R\000U\000\\\000\003 000R\000U\000\003 000V\000H\000U\000Y\000H\000U\000\003 logs 000x  SQL Injection 4 SQL injection is possible User parameters submitted will be formulated into a SQL query for database processing. If the query is built by simple string concatenation it is possible to modify the meaning of the query by carefully crafting the parameter 000x  SQL Injection Fingerprinting \(4\ SQL injection may be possible Tool  Functi onalities  Cost  Operating System  Paros 7   Web proxy  Web spider  Automated vulnerability scanner  Manual request with proxy, fuzzer  Free  Linux, Apple Mac OS X, Microsoft Windows  WebScarab  Web proxy  Web spider  Manual fuzzer  Manual vulnerability scanner  Manual request with web proxy, spider fuzzer, history  Free  Linux, Apple Mac OS X, Microsoft Windows  JBroFuzz 11   Automated fuzzing  Graphing  Built in attack payloads  Free  Linux, Apple Mac OS X, Microsoft Windows  Acunetix [1 2   Automatic client script analyzer  SQL Injection and Cross site scripting testing  Fast scanner crawls  Port scans on web servers  Commercial  1,000  12,995  Microsoft Windows, Microsoft Windows Server, Microsoft Windows 2008 Server  Fortify  13   Automated vulnerability scanner  Source code analyzer  Commercial  Linux, Microsoft Windows, Mac OS, Oracle Solaris, HP UX  Table 1. Automated Tools used in the Case Study  


000x  Cross-Site Scripting 1 Malicious scripts may be injected into the browser which can appear to be genuine content from the original site These scripts can be used to execute arbitrary code or steal 000F\000X\000V\000W\000R\000P\000H\000U\000V\000¶\000\003 000V\000H\000Q\000V\000L\000W\000L\000Y\000H\000\003 000L\000Q\000I\000R\000U\000P\000D\000W\000L\000R\000Q\000\003 000V\000X\000F\000K\000\003 000D\000V\000\003 000X\000V\000H\000U\000\003 passwords or cookies B  Testing Results with WebScarab Using the fuzzer and the proxy features of WebScarab, we discovered potential SQL injection and cross-site scripting vulnerabilities 000x  SQL Injection An input attack file was created which included SQL injection attack strings. This attack file was submitted to the WebScarab fuzzer to test the login page of the Tunestore web application. Some of the attacks were successful 000x  Reflected Cross-Site Scripting Using 000:\000H\000E\0006\000F\000D\000U\000D\000E\000¶\000V\000\003 000I 000 000H 000U\000\003 000I 000H 000D 000W 000X 000U 000H 000\017 000\003 000D 000Q\000\003 000L 000Q\000S\000X 000W 000\003 000D 000W 000W 000D 000F 000N  file was created which included cross-site scripting attack strings to test the login page of the Tunestore web application The scripts were executed showing that the login page has XSS vulnerabilities 000x  Stored Cross\0006\000L\000W\000H\000\003 0006\000F\000U\000L\000S\000W\000L\000Q\000J\000\035\000\003 0008\000V\000L\000Q\000J\000\003 000:\000H\000E\0006\000F\000D\000U\000D\000E\000¶\000V\000\003 proxy feature comments submitted by the user was intercepted and changed to malicious scripts The malicious scripts were then saved on the server and would be activated when someone views the comment on the CD Other input fields such as those related to 000W\000K\000H\000\003 000³\000U\000H\000J\000L\000V\000W\000U\000D\000W\000L\000R\000Q\000´\000\017\000\003 000³\000I\000U\000L\000H\000Q\000G\000´\000\017\000\003\000D\000Q\000G\000\003\000³\000D\000G\000G\000\003\000E\000D\000O\000D\000Q\000F\000H\000´\000\003\000R\000S\000W\000L\000R\000Q\000V\000\003\000F\000R\000X\000O\000G\000\003\000D\000O\000V\000R\000\003\000E\000H\000\003\000W\000H\000V\000W\000H\000G\000\003\000X\000V\000L\000Q\000J\000\003 WebScarab However in this case study those fields were 000W\000H\000V\000W\000H\000G\000\003 000X\000V\000L\000Q\000J\000\003 000W\000K\000H\000\003 000P\000D\000Q\000X\000D\000O\000\003 000D\000S\000S\000U\000R\000D\000F\000K\000\003 000L\000Q\000V\000W\000H\000D\000G\000\003 000R\000I\000\003 000:\000H\000E\0006\000F\000D\000U\000D\000E\000¶\000V\000\003 fuzzer feature C  Testing Results with Fortify \(the Demonstration Version Using Fortify Source Code Analyzer 30 potential vulnerabilities were discovered These vulnerabilities are listed below. The number following the vulnerability refers to the number of occurrences of the vulnerability 000x  SQL Injection \(27 000x  System Information Leak 2 It means system data or debugging information is revealed, which can help attackers learn about the system and plan attacks 000x  HTTP Response Splitting 1 It means unvalidated data in HTTP response headers can enable cache-poisoning cross-site scripting cross-user defacement or hijacking attacks D  Testing Results with JBroFuzz and Acunetix JBroFuzz was first used to test for SQL injection and XSS vulnerabilities. However, a bug in the tool was discovered. For some valid SQL i nj ection attack strings JBroFuzz generated invalid requests to the web application and thus could not identify the SQL injection vulnerability Because of this bug JBroFuzz was no longer used to test for other vulnerabilities in the Tunestore web application However the payloads embedded in JBroFuzz were used in manual testing to discover some of the vulnerabilities in Tunestore Using Acunetix \(free edition\, cross-site scripting vulnerabilities were discovered VI  M ANUAL T ESTING  Using manual testing authentication access control injection cross-site scripting cross-site request forgery and integer overflow vulnerabilities were discovered Some of the vulnerabilities confirm those found through automated tools Others were not reported by the tools   The vulnerabilities found through manual testing which confirm those reported by the automated tools are the following x-none 000x  SQL Injection 000  This allows illegitimate users to login as a legitimate user  x-none 000x  Reflected Cross Site Scripting 000  Malicious scripts may be injected into input fields of the login page and be executed  x-none 000x  Stored Cross Site Scripting 000  0008\000V\000L\000Q\000J\000\003\000:\000H\000E\0006\000F\000D\000U\000D\000E\000¶\000V\000\003 proxy feature, a malicious script can be stored in the comment field  Using manual testing, we were able to confirm some of the vulnerabilities reported by some of the tool. Acunetix indicated cross-site scripting vulnerabilities in the login page of the Tunestore web application Although the tool reported true positives manual testing also revealed cross-site scripting vulnerabilities on the comment page Malicious scripts were stored into the comment field and stored in the database. This indicates a typical case of stored cross-site scripting XSS vulnerability The vulnerabilities found through manual testing which are not reported by the automated tools are the following x-none 000x  The application allows users to register with weak passwords It does not have a minimum or maximum length for passwords It does not give 000X\000V\000H\000U\000V\000¶\000\003 000I\000H\000H\000G\000E\000D\000F\000N\000\003 000R\000Q\000\003 000S\000D ssword strength  This vulnerability can cause an attacker to carry out brute force attacks and enumerate existing users on the system  x-none 000x  The application does not have a lockout policy for failed login attempts  This makes the application have a high risk o f brute force attacks  x-none 000x  Unencrypted credentials are transmitted over HTTP protocol  x-none 000x  000³\000\\000R\000U\000J\000R\000W\000\003 000S\000D\000V\000V\000Z\000R\000U\000G\000´\000\003 000I\000H\000D\000W\000X\000U\000H\000\003 000Z\000D\000V\000\003\000Q\000R\000W\000\003 000L\000P\000S\000O\000H\000P\000H\000Q\000W\000H\000G\000\021\000\003 Registered users will not be able to access the system if they do not remember their passwords  x-none 000x  The application implements 000D\000\003 000³\000V\000W\000D\000\\\000\003 000O\000R\000J\000J\000H\000G\000\003 000L\000Q\000´\000¶\000\003 feature This makes the application have a high risk of session hijacking  


x-none 000x  Insecure storage of credentials Username and passwords stored in the database are not encrypted As a result, an attacker can eavesdrop  on the network and gain  000D\000F\000F\000H\000V\000V\000\003 000X\000V\000H\000U\000V\000  unauthorized information Thus an attacker is able to gain access to the database to view 000X\000V\000H\000U\000V\000  data  x-none 000x  Horizontal privilege escalation 000  The application allows users to view friends CDs and view comments on CDs without logging into the app lication  x-none 000x  Cross Site Request Forgery 000  Malicious scripts may be injected into the comment field of Tunestore which includes a crafted link When a victim clicks on the link, it causes some actions to occur, such as logging the victim out, etc  x-none 000x  Integer Ove rflow 000  The submission of large numbered values will overflow the balance field 000R\000Q\000\003\000W\000K\000H\000\003\000D\000F\000F\000R\000X\000Q\000W\000\021\000\003\0007\000K\000H\000\003\000³\000D\000G\000G\000\003\000E\000D\000O\000D\000Q\000F\000H\000´\000\003\000R\000S\000W\000L\000R\000Q\000\003\000Z\000L\000O\000O\000\003\000Q\000R\000\003 longer operate correctly  x-none 000x  An attacker 000F\000D\000Q\000\003 000D\000G\000G\000\003 000D\000Q\000\003 000D\000P\000R\000X\000Q\000W\000\003 000W\000R\000\003 000W\000K\000H\000\003 000³\000D\000G\000G\000\003 000E\000D\000O\000D\000Q\000F\000H\000´\000\003 000I\000H\000D\000W\000X\000U\000H\000\003 000L\000Q\000\003 000W\000K\000H\000L\000U\000\003 000S\000U\000R\000I\000L\000O\000H\000\003 000E\000\\\000\003 using SQL injection t echniques  Hence an attacker can successfully create a new user account with a substantial amount of money added to their account without providing valid credit card information As a result the attacker  is able to purchase CDs for free This vulnerabili ty was discovered through examining the source code  x-none 000x  I nsecure D irect O bject Reference Requests for protected resources in this case the music files are made directly to the static resources which are located within the web root of the server. The musi c filenames are predictable The last names of the artists are used. Changing the values in the download link permits a user to download any song from Tunestore without purchasing them  VII  D ISCUSSION  Our case study shows that Tunestore is a good example application for teaching students about web security. It can be used to demonstrate various web application vulnerabilities to the students. Limited by our academic environment, we do not have the full versions of Fortify and Acunetix Therefore the testing results from the demonstration or the trial version of the tools are very limited in this study. Universities can apply for the Hewlett-Packard Company Educational Software License Agreement to receive the full version of Fortify for free for educational purposes.  However, we could not get the full version of Fortify because our university did not agree  with the user agreement for the license for the Fortify software  The web spidering and proxy features of Paros and WebScarab are very useful for web application testing The web spidering functions allow testers to understand the content and structure of the web application. The proxy allows testers to intercept and modify requests and responses transmitted between the client and server to conduct attacks The scanner feature of Paros is quite limited It does report some main vulnerabilities such as SQL injection cross-s ite scripting and s 000H\000V\000V\000L\000R\000Q\000\003 000,\000'\000\003 000L\000Q\000\003 0008\0005\000/\000\003 000U\000H\000Z\000U\000L\000W\000H\000\017\000\003 000H\000W\000F\000\021\000\003 000:\000H\000E\0006\000F\000D\000U\000D\000E\000¶\000V\000\003 fuzzer feature can be very useful because a large number of attack strings can be submitted to test the application automatically Some of the manual testing conducted in this case study such as testing for buffer overflow integer overflow vulnerabilities could have been done using 000:\000H\000E\0006\000F\000D\000U\000D\000E\000¶\000V\000\003 000I 000 000H 000U 000\003 000I 000H 000D 000W 000X 000U 000H 000\021 000\003 000\000 000U 000R 000 000X\000 000 000\003 000G\000R 000H 000V 000\003 not have good documentation on how to use the tool From our use of the tool, we discovered a bug in the tool, and did not think the tool worked properly as it is supposed to However the attack types and payloads embedded in the tool can be useful The payloads can be used for manual testing or testing with 000:\000H\000E\0006\000F\000D\000U\000D\000E\000¶\000V\000\003\000I 000 000H 000U\000\003 000I 000H 000D 000W 000X 000U 000H 000\021  Manual testing discovered most of the vulnerabilities especially the design flaws Some of them are the same as those found using Paros, Fortify, Acunetix, for example, SQL injection and cross-site scripting vulnerabilities Most of the authentication and access control vulnerabilities can only be 000I\000R\000X\000Q\000G\000\003 000W\000K\000U\000R\000X\000J\000K\000\003 000P\000D\000Q\000X\000D\000O\000\003 000W\000H\000V\000W\000L\000Q\000J\000\003 000E\000D\000V\000H\000G\000\003 000R\000Q\000\003 000W\000H\000V\000W\000H\000U\000¶\000V\000\003 000R\000E\000V\000H\000U\000Y\000D\000W\000L\000R\000Q\000V\000\021\000\003 Therefore it is important to utilize a variety of tools as well as conduct careful manual testing in order to find the most number of vulnerabilities in a web application VIII  C ONCLUSION  This paper describes a case study of testing for security vulnerabilities of an example application 000  Tunestore It provides an overview of web application security testing tools such as Paros, WebScarab, JBroFuzz, Acunetix, and Fortify. It presents the security vulnerabilities found within an application by using these tools, and by manual testing. While commercial tools are not easily available in an academic environment open source tools can be used to conduct security testing with limited results Our case study shows manual testing is very important since some vulnerability 000W\000\\\000S\000H\000V\000\003 000F\000D\000Q\000\003 000R\000Q\000O\000\\\000\003 000E\000H\000\003 000I\000R\000X\000Q\000G\000\003 000W\000K\000U\000R\000X\000J\000K\000\003 000P\000D\000Q\000X\000D\000O\000\003 000W\000H\000V\000W\000L\000Q\000J\000\003 000D\000Q\000G\000\003 000W\000H\000V\000W\000H\000U\000¶\000V\000\003 observations. It is important to utilize a variety of tools as well as conduct careful manual testing in order to find the most number of vulnerabilities in a web application Based on this case study hands-on labs can be developed for teaching web security, software security testing, and other topics R EFERENCES    Studdard, D., & Pinto, M 0007\000K\000H\000\003\000:\000H\000E\000\003\000$\000S\000S\000O\000L\000F\000D\000W\000L\000R\000Q\000\003\000+\000D\000F\000N\000H\000U\000¶\000V\000\003 Handbook Discovering and Exploiting Security Flaws  Wiley Publishing: Indianapolis, Indiana, 2008   The Open Web Application Security Project Testing Introduction and Objectives 2012 https://www.owasp.org/index.php/Testing:_Introduction_ and_objectives retrieved on November 6, 2012   McGraw G Software Security Building Security In  Pearson Education: Boston, Massachusetts, 2006 


  The Open Web Application Security Project OWASP Top Ten 2010 000  Main 2010 www.owasp.org/index.php/Top_10_2010-Main  retrieved on January 13, 2013   Web-Hacking-Incident-Database Retrieved on Jan 6 2013 http://projects.webappsec.org/w/page/13246995/WebHa cking-Incident-Database    Top 10 2010 Retrieved on January 10 2013 https://www.owasp.org/index.php/Top_10_2010-Main   Paros Paros 000  for web application security assessment 2004 http://www.parosproxy.org  retrieved on November 6, 2012   Paros User Guide for Paros v2.x 2003 http://www.parosproxy.org/paros_user_guide.pdf  retrieved on November 6, 2012   The Open Web Application Security Project Category OWASP WebScarab Project 2012 https://www.owasp.org/index.php/Category:OWASP_We bScarab_Project retrieved on November 6, 2012   The Open Web Application Security Project OWASP 2012 www.owasp.org retrieved on November 6, 2012   Dustin E Nelson L Wysopal C Zovi D The Art of Software Security Testing Identifying  Software Security Flaws  Symantec Corporation Upper Saddle River New Jersey, 2007   The Open Web Application Security Project JBroFuzz 2012 https://www.owasp.org/index.php/JBroFuzz  retrieved on November 6, 2012   Acunetix Ltd Acunetix Web Application Security www.acunetix.com/vulnerability-scanner  retrieved on November 6, 2012   HP Enterprise Security, HP Fortify Static Code Analyzer 2012 http://www.hpenterprisesecurity.com/products/hpfortify-software-security-center/hp-fortify-static-codeanalyzer retrieved on November 6, 2012  


017\012\037\007\034\022\020\027.\007\026$\012\016\034\010\012\027 017.*4\004\007\013\012\016\027.\007\026$\012\016\034\010\012\027 
We have used an Intel Westmere cluster for our evaluations This cluster consists of compute nodes with Intel Westmere series of processors using Xeon Dual quad-core processor nodes operating at 2.67 GHz with 12GB RAM and 160GB HDD Each node is equipped with MT26428 QDR ConnectX HCAs 32 Gbps data rate with PCIEx Gen2 interfaces The nodes are interconnected using a Mellanox QDR switch Each node runs Red Hat Enterprise Linux Server release 6.1 Santiago at kernel version 2.6.32131 with OpenFabrics version 1.5.3 This cluster also has dedicated storage nodes with the same conguration but with 24GB of RAM each Additionally eight of the storage nodes are equipped with two 1TB HDD each Four of the storage nodes also have Chelsio T320 10GbE Dual Port Adapters with TCP Ofoad capabilities In the gures presented in this section we have mentioned OSU-IB to indicate our RDMA-based design of MapReduce and Hadoop-A to indicate the design in 32 Gbps indicates InniBand QDR card speed We have performed this experiment in 10 GigE IPoIB 32 Gbps with vanilla Hadoop and Hadoop-A and compared the results with our design For this experiment we have found that the optimal HDFS block-size for 10 GigE IPoIB 32 Gbps and our design is 256 MB whereas it is 128 MB for Hadoop-A We have used TeraGen to generate the input data for TeraSort Figure 4 shows the job execution times of the TeraSort benchmark in a four-DataNode cluster In the experiments for Figure 4\(a we show performance results with single and dual HDDs for each interconnect For single HDD 30 GB sort size our design reduces the job execution time by 9 over Hadoop-A 32 Gbps 35 over IPoIB 32 Gbps and 38 over 10 GigE Compared with IPoIB and 10 GigE our design uses native IB verbs communication for the data shufe which is much better than the socket based communication on IPoIB and 10 GigE Although HadoopA also uses native IB verbs communication the data prefetching and caching mechanism of our design improves the performance On the other hand if two HDDs are used per node our design improves the execution time by 13 over HadoopA 32 Gbps 38 over IPoIB 32 Gbps and 43 over 10 GigE for the same sort size For 40 GB sort size our design achieves an improvement of 17 48 and 51 over Hadoop-A 32 Gbps IPoIB 32 Gbps and 10 GigE respectively When multiple HDDs are used per node the performance bottleneck of the local disk read and write bandwidth is alleviated Compared to Hadoop-A our design can utilize the improved bandwidth more efciently to overlap the data shufe merge and reduce further as illustrated in section III-B We have performed similar experiments with the TeraSort benchmark using eight DataNodes In this case we varied the sort size from 60 GB to 100 GB As shown in Figure 4\(b our design reduces the job execution time 21 over Hadoop-A 32 Gbps for 100 GB sort size with single 
Figure 3 Overlapping of different processes in MapReduce workow IV P ERFORMANCE E VALUATION In this section we present the detailed performance evaluations of our RDMA-based design of Hadoop MapReduce and its impact on different Hadoop benchmarks We compare the performance of our design with socket based interconnects 10 GigE and IPoIB and Hadoop-A W e ha v e performed the experiments on different storage platforms single/multiple HDDs or SSD per node in order to illustrate the effect of I/O on our design In this study we perform the following set of experiments 1 Evaluation with the TeraSort benchmark and 2 Evaluation with the Sort benchmark These benchmarks are described in section II For each of the benchmarks we have identied the optimal values of HDFS block-size for different interconnects as well as for Hadoop-A and our design Additionally in our experimental setup we have also determined that four is the maximum number of map and reduce tasks that can be run simultaneously to achieve the optimal performance by a TaskTracker In all our experiments we have used Hadoop 0.20.2 Hadoop-A and JDK 1.7.0 
002\003\004 005\006\007\010\010\011\012 002\012\013\014\012 015\012\016\007\017\012 020\021\004\011\022\017\022\023\024\025\003\013\013\022\012\013 002\003\004 005\006\007\010\010\011\012 002\012\013\014\012 015\012\016\007\017\012 020\021\004\011\022\017\022\023\024\025\003\013\013\022\012\013 
A Experimental Setup B Evaluation with the TeraSort Benchmark 
1914 


      
0 500 1,000 1,500 2,000 2,500 40 30 20 Job Executiion Time \(sec Sort Size \(GB 10GigE1disk 10GigE2disks IPoIB1disk \(32Gbps IPoIB2disks \(32Gbps HadoopAIB1disk \(32Gbps HadoopAIB2disks \(32Gbps OSUIB1disk \(32Gbps OSUIB2disks \(32Gbps 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 100 80 60 Job Executiion Time \(sec Sort Size \(GB 1GigE1disk 1GigE2disks IPoIB1disk \(32Gbps IPoIB2disks \(32Gbps HadoopAIB1disk \(32Gbps HadoopAIB2disks \(32Gbps OSUIB1disk \(32Gbps OSUIB2disks \(32Gbps 0 500 1,000 1,500 2,000 2,500 3,000 3,500 4,000 200GB24nodes 100GB12nodes Job Executiion Time \(sec Sort Size 1GigE IPoIB \(32Gbps HadoopAIB \(32Gbps OSUIB \(32Gbps 0 50 100 150 200 250 300 350 400 450 500 20 15 10 5 Job Executiion Time \(sec Sort Size \(GB 1GigE IPoIB \(32Gbps HadoopAIB \(32Gbps OSUIB \(32Gbps 
C Evaluation with the Sort Benchmark 
a Total job execution times in 4 nodes cluster          b Total job execution times in 8 nodes cluster Figure 4 TeraSort benchmark evaluation HDD From Figure 4\(b we observe that with two HDDs per node our design achieves an improvement of 31 over Hadoop-A 32 Gbps          Figure 5 TeraSort benchmark evaluation with larger sort size We have also evaluated TeraSort with larger sized cluster In this case we have varied the sort size from 100 GB to 200 GB with 12 and 24 compute nodes in the cluster respectively Figure 5 shows these results For 100 GB sort size we achieve 41 benet over IPoIB 32Gbps and 7 benet over Hadoop-A 32Gbps For 200 GB sort size also we achieve similar benets From Figure 4 and Figure 5 we observe that Hadoop-A performs better with respect to IPoIB in a bigger cluster with the same sort size whereas our implementation achieves better performance in both cases compared to Hadoop-A As in our setup storage nodes have twice as much memory as compute nodes our implementation has more benets in storage nodes compared to those in compute nodes This clearly depicts the efciency of the caching mechanism implemented in our design Figure 7 Sort benchmark evaluation with SSD Figure 6\(a shows the performance results of the Sort benchmark using four DataNodes For this we have used four compute nodes in our cluster Each DataNode has single HDD per node In this case our design reduces the job execution time by 26 over IPoIB 32 Gbps and 38 over Hadoop-A for 20 GB sort From Figure 6\(b we observe that with eight DataNodes our design can achieve an improvement of 27 over IPoIB 32 Gbps and 32 over Hadoop-A Compared with the TeraSort benchmark the difference in the Sort benchmark is the variable size of the key-value pairs In Sort the combined length of key-value pairs can be as large as 20,000 bytes From the results we can observe that Hadoop-A performs worse than IPoIB even after conguring all the tunable parameters with optimum values as mentioned in Hadoop-A release It re v eals that only substituting the socket based communication with the native IB verbs some applications such as the Sort benchmark cannot get better performance due to the inefciency in number of keyvalue pairs transferred each time that also affects proper overlapping between all the stages Our design with the efcient caching mechanism can get better performance in 
We perform the regular Sort benchmark in 1 GigE IPoIB 32 Gbps with vanilla Hadoop and Hadoop-A and compare the results with our design For this experiment the optimal value of HDFS block-size is 64 MB We have used RandomWriter to generate the input data for the Sort benchmark            
1915 


        
0 200 400 600 800 1,000 1,200 1,400 20 15 10 5 Job Executiion Time \(sec Sort Size \(GB 1GigE IPoIB \(32Gbps HadoopAIB \(32Gbps OSUIB \(32Gbps 0 200 400 600 800 1,000 1,200 1,400 40 35 30 25 Job Executiion Time \(sec Sort Size \(GB 1GigE IPoIB \(32Gbps HadoopAIB \(32Gbps OSUIB \(32Gbps 0 100 200 300 400 500 600 20 15 10 5 Job Executiion Time \(sec Sort Size \(GB IPoIB OSUIB \(Without Caching Enabled OSUIB \(With Caching Enabled 
D Benets of Caching 
a Total job execution times in 4 nodes cluster         b Total job execution times in 8 nodes cluster Figure 6 Sort benchmark evaluation both these cases as it considers the size of the key-value pair before the transfer We also evaluate Sort benchmark using SSD as HDFS data stores Figure 7 shows the comparison for this evaluation In this case our design achieves a benet of 22 over Hadoop-A 32Gbps and 46 over IPoIB 32Gbps in job execution time for 15 GB sort Figure 8 Effect of Caching Mechanism Figure 8 shows the performance comparison between caching enabled and caching disabled in our RDMA-based design for Sort benchmark We perform this experiment using SSD as HDFS data store In this case enabling caching with our design can enhance performance by 18.39 over caching disabled in the same design for 20 GB sort size It reveals that for big workload as in sort an efcient caching mechanism can signicantly improve the performance for an RDMA-based design using a high performance interconnect V R ELATED W ORK Many studies have paid attention to improve the performance of MapReduce in recent years As mentioned before the most analogous one is Hadoop-A which pro vides a new merge method to Hadoop MapReduce framework by utilizing RDMA over InniBand Our work has some major enhancements and differences with respect to their work along pre-fetching caching codebase modication etc We have discussed these detail in section III-C In the authors ha v e proposed techniques of prefetching and pre-shufing into MapReduce From their results the techniques can improve the overall performance of Hadoop We have focused on implementing an efcient key-value pairs pre-fetching and caching mechanism inside TaskTracker which is responsible for fast data shufe when the mappers are yet to be completed Such a design can help reduce the overhead in the reducer side when the shufe and merge procedures run in an overlapped manner The research has demonstrated that there is an impressi v e space for performance improvement in Hadoop MapReduce compared with traditional HPC technologies such as MPI Our earlier work 7 re v ealed that SSD can reduce the I/O cost and make the overheads involved in datatransmission over the network prominent In this paper we have conducted experiments with multiple HDDs and SSDs per node to lessen the I/O bottleneck when studying the effect of communication over different interconnects VI C ONCLUSION In this paper we have presented an RDMA-based design of MapReduce over InniBand We have also proposed efcient pre-fetching and caching mechanisms for retrieving of the intermediate data Our performance evaluation shows that we achieve 21 benet in terms of execution time over Hadoop-A for 100 GB TeraSort For regular Sort benchmark our design outperforms Hadoop-A by 32 for 40 GB sort We also observe an improvement of 22 over Hadoop-A for the same sort size using SSD In future we plan to extend 
In our design we have implemented efcient map output pre-fetching and caching mechanism We have also provided a conguration parameter to enable/disable the caching In this experiment we have evaluated the performance improvement that we can get through caching enabled        
1916 


our design to handle faster recovery in case of task failures We will also evaluate our design on larger clusters with a range of applications R EFERENCES  Y  W ang X Que W  Y u D Goldenber g and D Sehgal Hadoop Acceleration through Network Levitated Merge in  ser SC 11 2011  Apache Hadoop http://hadoop.apache.or g  J Dean and S Ghema w at MapReduce Simplied Data Processing on Large Clusters in  2004  K Shv achk o H K uang S Radia and R Chansler  The Hadoop Distributed File System in  2010  J Appa v oo A W aterland D Da Silv a V  Uhlig B Rosenburg E Van Hensbergen J Stoess R Wisniewski and U Steinberg Providing A Cloud Network Infrastructure on A Supercomputer in  ser HPDC 10 New York NY USA ACM 2010 pp 385394  Greenplum Analytics W orkbench http://www.greenplum.com/news/greenplum-analyticsworkbench  S Sur  H W ang J Huang X Ouyang and D K Panda Can High Performance Interconnects Benet Hadoop Distributed File System in  Atlanta GA 2010  J Jose H Subramoni M Luo M Zhang J Huang M W Rahman N S Islam X Ouyang H Wang S Sur and D K Panda Memcached Design on High Performance RDMA Capable Interconnects in  Sept 2011  J Huang X Ouyang J Jose M W  Rahman H W ang M Luo H Subramoni C Murthy and D K Panda High-Performance Design of HBase with RDMA over InniBand in   N S Islam M W  Rahman J Jose R Rajachandrasekar H Wang H Subramoni C Murthy and D K Panda High Performance RDMA-based Design of HDFS over InniBand in  November 2012  J Jose M Luo S Sur  and D K P a nda Unifying UPC and MPI Runtimes Experience with MVAPICH in  Oct 2010  Hadoop Map Reduce The Apache Hadoop Project  http://hadoop.apache.org/mapreduce  Sort http://wiki.apache.or g/hadoop/Sort  RandomWriter http://wiki.apache.or g/hadoop RandomWriter  Inniband T rade Association http://www innibandta org  OpenF abrics Alliance http://www openf abrics.or g  P  Balaji H V  Shah and D K P anda Sockets vs RDMA Interface over 10-Gigabit Networks An In-depth analysis of the Memory Trafc Bottleneck in  2004  RDMA Consortium  Architectural Specications for RDMA over TCP/IP http://www.rdmaconsortium.org  B Fitzpatrick Distrib uted Caching with Memcached   vol 2004 pp 5 August 2004  A v ailable http://portal.acm.or g/citation.cfm id=1012889.1012894  Apache HBase The Apache Hadoop Project  http://hbase.apache.org  MV APICH2 MPI o v er InniBand 10GigE/iW ARP and RoCE http://mvapich.cse.ohio-state.edu  Mellanox T echnologies Unstructured Data Accelerator http://www.mellanox.com/page/products dyn product family=144  S Seo I Jang K W oo I Kim J.-S Kim and S Maeng HPMR Prefetching and Pre-shufing in Shared MapReduce Computation Environment in  Sep 2009 pp 18  X Lu B W ang L Zha and Z Xu Can MPI Benet Hadoop and MapReduce Applications in  2011 
Proceedings of 2011 International Conference for High Performance Computing Networking Storage and Analysis Operating Systems Design and Implementation OSDI IEEE 26th Symposium on Mass Storage Systems and Technologies MSST Proceedings of the 19th ACM International Symposium on High Performance Distributed Computing Workshop on Micro Architectural Support for Virtualization Data Center Computing and Clouds in Conjunction with MICRO 2010 International Conference on Parallel Processing ICPP IEEE International Parallel and Distributed Processing Symposium IPDPS12 The International Conference for High Performance Computing Networking Storage and Analysis SC Fourth Conference on Partitioned Global Address Space Programming Model PGAS Workshop on Remote Direct Memory Access RDMA Applications Implementations and Technologies RAIT in conjunction with IEEE Cluster Linux Journal Cluster Computing and Workshops 2009 CLUSTER 09 IEEE International Conference on IEEE 40th International Conference on Parallel Processing Workshops ICPPW 
1917 


A Global Solution COVERAGE North and South America EMEA and Asia White lines are flights in the masFlight platform from February 8, 2013 Yellow pins are weather stations feeding hour ly data to our platform Maps from Google Earth / masFlight masFlight tracks flights, airports and weather around the world  Global daily flight information capture  82,000 flights  350 airlines  1700 airports  Integrated weather data for 6,000 stations  Match weather to delays  Validate block forecasts at granular level  Add weather analytics to IRROPS review and scenario planning 


Example 1: Proposed FAA Tower Closures masFlight used big-data to link airport operations across three large data sets  Current and historical airline schedules  Raw Aircraft Situation Display to Industry \(ASDI\AA  Enhanced Traffic Management System Counts \(ETMS\Airport operations counts by type \(commercial, freight, etc TOWER CLOSINGS Dots indicate closures; Red dots have scheduled service Based on scheduled service March 1 7, 20 13; scheduled service includes scheduled charter flights, cargo flig hts, and passenger flights Dots  indicate  closures  Red  dots  have  scheduled  service Bas ed  o n sc h edu l ed  se rvi ce  M a r c h 1  7, 2013; scheduled se rvi ce includ es scheduled c harter fli g hts car g o fli g hts a nd passen g er fli g hts Findings: Proposed Tower Closings  From schedules database: 55 airports with scheduled passenger airline service  14 EAS Airports  From ASDI & ETMS: 10,600 weekly flights on a flight plan \(ex. VFR and local traffic  6,500 Part 91/125 weekly flights  4,100 Part 135/121 weekly flights  


Example 1: Big-Data Analytics Applied to ASDI and ETMS To Analyze Operations TOWER CLOSINGS  26 44 24 23 11 10 6 2 1 2 Up to 5 5-10 10-15 15-20 20-25 25-30 30-35 35-40 40-45 45 Count of Airports Average Number of Daily Operations with a Flight Plan Filed Distribution of Airports By Average Number of Daily Impacted Flights Airports Affected by Tower Closures Source: ASDI radar data  Part 91 151 flying and Part 135/121 flying March 1-7, 2013; masFlight analysis Note: Average daily operations based on 5-day week 


Example 2: Aviation Safety Causal Factor For example, consider the following ASRS report \(ACN 1031837 Departing IAH in a 737-800 at about 17,000 FT, 11 m iles behind a 737-900 on the Junction departure over CUZZZ Intersection. Smooth air with wind on the nose bearing 275 degrees at 18 KTS We were suddenly in moderate chop which lasted 4 or 5 seconds then stopped and then resumed for another 4 or 5 seconds with a significant amount of ri ght rolling I selected a max rate climb mode in the FMC in order to climb above the wake and flight path of the leading -900 We asked ATC for the type ahead of us and reported the wake encounter. The 900 was about 3,300 FT higher than we were  Synopsis  B737-800 First Officer reported wake encounter from preceding B737-900 with resultant roll and moderate chop What causal factors can be identified from this narrative that could be applied to future predictive applications CAUSAL FACTORS Data-mining algorithms can mine the text of safety reports to obtain specific data that can be used to analyze causal factors  


Example 2: Identifying Causal Factors CAUSAL FACTORS  Indicators  Data Element Methods  Identifying Context and Causes  Time of day  Date range \(month day  Aircraft type  Fix or coordinates  Originating airport  Destination airport  Weather notes We pinpoint the sequencing of flights on the IAH Junction Seven departure \(at CUZZZ\the specified wind conditions to find cases wher e a B737-900 at 20,000 feet precedes by 11 miles a B737-800 at 17,000 feet  Search related data sets including ASDI flight tracks, local traffic and congestion  Weather conditions for alter native causes \(winds aloft shear and convecti ve activity  Airline specific informati on \(repeated occurrence of event in aircraft type Big data gives us visibility into contextual factors even if specific data points are missing such as a specific date or route Big-data analytics gives us insight into unreported factors as well 


Example 3: Correlating Utilization and Delays  60 65 70 75 80 85 90 95 100 7 9 11 13 ONTIME DEPARTURE PERFORMANCE HOURS OF DAILY UTILIZATION 60.0 70.0 80.0 90.0 100.0 7.0 9.0 11.0 13.0 Narrowbodies By Day of Week 60.0 70.0 80.0 90.0 100.0 7.0 9.0 11.0 13.0 Widebodies by Day of Week Daily Utilization vs. On-time Departures January 2013 System Operations Correlation Coefficient -0.53 Includes AA, AC, AS B6 F9, FL, NK, UA, US VX and WN SOURCE masFlight \(masflight.com COMPARING OTP AND UTILIZATION 


 6.2 6.0 5.8 5.8 5.2 4.9 LGB JFK BOS MCO DCA FLL JetBlue Focus Average Daily Deps per Gate Used UTILIZATION BY HUB Example 4: Daily Utilization of Gates, by Hub Big-data analysis of different carriers daily departures per gate used SOURCE masFlight \(masflight.com June 1 through August 31, 2012 Gates with minimum 1x daily use 7.7 7.4 7.2 6.2 6.1 5.8 3.8 3.6 ORD LAX SFO EWR DEN IAH IAD CLE United Airlines Hubs Average Daily Deps per Gate Used 7.8 6.4 5.5 5.4 5.3 4.4 4.3 4.0 SEA SAN PDX ANC SFO GEG LAX SJC Alaska Airlines Hubs Average Daily Deps per Gate Used 7.2 6.9 6.8 6.4 5.0 2.7 ORD DFW LAX LGA MIA JFK American Hubs Average Daily Deps per Gate Used 7.2 6.9 6.6 4.9 4.2 CLT DCA PHL PHX BOS US Airways Hubs Average Daily Deps per Gate Used 6.6 5.9 5.5 4.7 MCO BWI ATL MKE AirTran Hubs Average Daily Deps per Gate Used ne pe 


Conclusions for Big Data in Aviation  Big-data transforms operational and commercial problems that were practically unsolvable using discrete data and on-premises hardware  Big data offers new insight into existing data by centralizing data acquisition and consolidation in the cloud and mining data sets efficiently  There is a rich portfolio of information that can feed aviation data analytics  Flight position, schedules, airport/gate, weather and government data sets offer incredible insight into the underlying causes of aviation inefficiency  Excessive size of each set forces analysts to consider cloud based architectures to store, link and mine the underlying information  When structured, validated and linked these data sources become significantly more compelling for applied research than they are individually  Todays cloud based technologies offer a solution CONCLUSIONS 


Conclusions:  Our Approach  masFlights data warehouse and analysis methods provide a valuable example for others attempting to solve cloud based analytics of aviation data sets  masFlights hybrid architecture, consolidating secure data feeds in on-premises server installations and feeding structured data into the cloud for distribution, addresses the unique format, security and scale requirements of the industry  masFlights method is well suited for airline performance review competitive benchmarking, airport operations and schedule design and has demonstrated value in addressing real-world problems in airline and airport operations as well as government applications CONCLUSIONS 





