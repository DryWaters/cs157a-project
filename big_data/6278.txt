Location-Based Analysis of Developers and Technologies on GitHub David Rusk and Yvonne Coady Department of Computer Science University of Victoria Victoria BC Canada Email drusk@uvic.ca ycoady@cs.uvic.ca 
Abstract 
GitHub is a popular platform for collaboration on open source projects It also provides a rich API to query various aspects of the public activity This combination of a popular social coding website with a rich API presents an opportunity for researchers to gather empirical data about software development practices There are an overwhelmingly large number of competing platforms to choose from in software development 
Knowing which are gaining widespread adoption is valuable both for individual developers trying to increase their employability as well as software engineers deciding which technology to use in their next big project In terms of a developerês employability and an employerês ability to nd available developers in their economic region it is important to identify the most common technologies by geographic location In this paper analyses are done on GitHub data taking into account the developers location and their technology usage A web-based tool has been developed to interact with and visualize this data In its current state of development the tool summarizes the amount of code developers have in their public repositories broken down by programming 
language and summarizes data about programmers using speciìc programming languages This allows website visitors to get an immediate picture of the programming language usage in their region of interest Future research could expand this work to technologies beyond programming languages such as frameworks and libraries 
I I NTRODUCTION The software development landscape consists of a confusingly large number of competing platforms Selecting which technologies to learn and use for development is a challenge for software developers whether they be developers in training or experienced professionals It has also become increasingly important for developers to be able to demonstrate their pro 
ciency in a technology through code samples or open source projects Recruiters are interested in using this information to make quicker and better informed decisions about whom to hire The technologies and skills relevant in the local job market depend on the location Therefore the emphasis for this study has been placed on acquiring and analyzing the data for speciìc locations To make the problem concrete data was collected for Victoria and Vancouver BC However the project source code is general and can be used for any geographic location For speciìcity in this paper we will refer to data collected for Victoria BC For example perhaps Node.js is popular in San Francisco but if it is not used by many 
companies in Victoria BC it is less likely to provide a return on time invested learning it for developers interested in jobs in Victoria Social coding websites such as GitHub ha v e become popular in recent years As of its fth birthday on April 10 2013 GitHub had 3.5 million users and 6 million repositories  Since much of the acti vity on GitHub is public it is a large source of information on what technologies are being used in the open source community This paper begins by reviewing the literature concerning analyzing GitHub data and motivates the usefulness of a tool to sift through this data to determine which software development technologies are most popular in speciìc regions It is important for employers to 
know the available pool of talent within their region and it is also important for developers to have knowledge of the most commonly used technologies in their region The tool developed is discussed and then a preliminary evaluation of its usefulness is provided II R ELATED W ORK Thung et al studied the netw ork structures that de v elop in social coding particularly on GitHub A key point they make is that social coding enables a different experience of software development as the activities and interests of one developer are easily advertized to other developers This means that by aggregating this data one can build a picture of 
the interests of groups of developers including technologies used Two of their research questions are 1 projects are the most inîuential and 2 Which developers are the most inîuential They answered these questions by building up a project-project graph and a developer-developer graph Nodes in the project-project graph were the GitHub projects and they had an edge between them if two developers worked on both projects The weight of the edge was increased if there were more developers who worked on both projects The developer-developer graph worked similarly developers had an edge between them if they worked on the same project with higher weight if they worked on multiple projects together 
The PageRank algorithm was used on each of these graphs to nd the most inîuential projects and developers Farah et al ha v e be gun de v elopment of a tool for discovering software components on GitHub that meet developers speciìed requirements Usually software engineers must make comprehensive searches to select candidate components study their documentation when it is available and then build tests to determine whether or not the component meets the search criteria This work can be as or more expensive than the work of developing new components A tool that automates this process would have to be capable of 
2014 28th International Conference on Advanced Information Networking and Applications Workshops 978-1-4799-2652-7/14 $31.00 © 2014 IEEE DOI 10.1109/WAINA.2014.110 681 
2014 28th International Conference on Advanced Information Networking and Applications Workshops 978-1-4799-2652-7/14 $31.00 © 2014 IEEE DOI 10.1109/WAINA.2014.110 681 


analyzing technologies used in software repositories which is information that would also be relevant to the task of selecting popular software development technologies Combined with Thung et al.ês analysis of inîuential projects and developers this could allow extraction of the technologies used in the most inîuential projects and by the most inîuential developers The tool developed for this paper and described in the Experiment section uses data queried directly from the GitHub API This is the only source of which we are aware for the detailed programming language information used in the tool However it is useful to know that there is a service called GHTorrent developed by Gousios and Spinellis that mirrors much of GitHubês data including commits to the projects repositories and events generated through user actions on project resources It provides a persistent ofîine MongoDB and MySQL store and web interface to this data It is intended for use in empirical research related to software repositories Part of the reason that the GHTorrent project is important is that GitHubês full data is estimated to be on the terabyte scale b ut API users are limited to 5000 requests per hour  This makes it impossible for the full GitHub data set to be downloaded The use of social media by programmers has been studied by Singer et al The social media channels the y studied included the proìle aggregation sites Masterbranch and Coderwall These sites provide a meta-proìle by combining information from users proìles on other sites including GitHub BitBucket SourceForge LinkedIn and Stack Overîow Combining proìles across services leads to very rich data sets providing deeper insights into technology usage in software development Singer et al conducted a number of questionnaires and interviews with both software developers and recruiters frequenting proìle aggregation sites From their study they found that one of the main reasons programmers gave for opting into one or more proìle aggregators is they are curious about technology passionate to learn and always trying to improve themselves as developers Some also liked features such as badges that show technologies they have experience with because it is a way to demonstrate their expertise to potential recruiters Singer et al found that recruiters also liked proìle aggregation services because they provide additional information for assessing potential job candidates It was found that when evaluating a developer recruiters rst lter by skills using skill lists provided by many web-based proìles Recruiters with a technical background also reported looking through candidates open source projects to see if they use best practices such as unit testing One interviewee was quoted as saying I always look to see if theyêre writing tests as a key If theyêre not I donêt wanna hire them Capiluppi et al ha v e also studied ho w social web services such as GitHub can be used by employers to evaluate potential candidates for technical jobs They concluded that interpreting a developerês online presence is a matter of summarizing them in a concise comprehensible correct way Metrics and signals about online activity should therefore be open veriìable and reproducible They also make recommendations related to other services such as LinkedIn and Stack Overîow which may be useful for future work on this project The tool discussed in this paper is motivated and guided by the past work discussed above It provides new features and results not addressed in earlier studies in particular it targets speciìc geographic economic zones This is important because employers often indicate they are unable to nd employees with speciìc skills while new graduates and even seasoned developers can nd it difìcult to secure local employment cf Canadian Coalition For Tomorrows ICT Skills III D ATA A CQUISITION All data collected for the project came from GitHubês public API It returns JSON data which is stored in a MongoDB database As stated earlier  the tool described here can be used in any geographic region but the data acquired for this study was for Victoria BC a city in Canada Reliably determining a developerês location based on the free-form text included in the location eld of a developerês proìle required some trial-and-error experimentation The issue is that developers might enter that information in many formats The GitHub search API allows keywords to be passed for the location Being too speciìc in the search ex Victoria BC Canada causes users who list alternative forms such as Victoria British Columbia or Victoria BC or Victoria Canada etc to be missed Therefore the search is done on just victoria but this returns results from Victoria Australia and other unwanted places To solve this problem a post-processing step was added to lter users further based on location At rst a whitelisting approach was attempted This meant the system had a list of possible variations on the name Victoria BC Canada However extensive logging was done to trace how well this worked and it was found that a large number of users from Victoria BC Canada were being ltered out due to small variations from the strings in the white list Since the location eld is free-form there is a huge variety of possible variations that cannot be anticipated Therefore a different approach was taken Instead of using a white-list a black-list was developed This list contained stop-words if any of these words is found in the location the user is ltered out The potential users were examined and all the stopwords such as Australia Melbourne and so on were identiìed This approach is simpler than trying to have a white-list with every single possible variation and it was decided to err on the side of including a user who should not be rather than excluding a user who should be included The initial script developed to gather data from the GitHub API ran serially user by user It took well over half an hour just to do the approximately 3500 API calls to retrieve information for Victoria BC users This was made worse by the fact that one out of every two or three such runs of the script would crash due to a network or server problem while accessing the GitHub API This made the process far too tedious to enable an effective and repeatable data product 
A Location Accuracy B Data Download 
682 
682 


Therefore there were two goals for improving the download process speed it up and make it handle errors These goals were achieved by making the script multi-threaded Usernames are put on a synchronized queue that worker threads pull from and then execute the necessary API calls to process the user Python is not truly multi-threaded due to the Global Interpreter Lock Ho we v er  the lock is released around blocking I/O operations such as network communication This allows many API calls to be made at once Ten threads conìgurable were used and the same 3500 API calls that were taking over 30 minutes were completed in about 3 and a half minutes This made it much easier to gather new data The process was also made more robust Now when an error occurs during an API call the user being processed goes back on the queue to be processed again later One effect of the massive increase in data download speed is that the GitHub API rate limit is easily reached It is not reached when processing Victoria but it is when processing the much larger developer community in Vancouver The limit is 5000 API calls per hour A back-off mechanism was also added to the worker threads so that they will automatically handle this allowing the process to continue running as long as needed without manual intervention The 5000 API call limit can be reached in about 5 minutes The GitHub API reponses contain HTTP headers indicating how many calls are left and what time the limit will be reset If a worker nds that the quota has been used up it checks the reset time and sleeps until then plus a small buffer period IV D ATA A NALYSIS The core of the analysis provided by this application is the list of developers by location and the aggregation of programming languages used across a developerês public repositories This information is not available from the GitHub API directly but the needed data elements are stored by the application in a database which can be queried This data then enables analyses such as 1 Searching for a location such as Victoria BC Canada and getting a list of the developers along with details about them available through the GitHub API such as company real name etc 2 Retrieving a developerês programming language usage across repositories 3 Determining programming language popularity in a speciìc geographic location using aggregated metrics either by number of developers using the language or by the amount of code in their repositories 4 Querying for a list of developers in a location who use a speciìc language These analyses help meet the needs of both developers and recruiters as outlined in the Related Work In particular Singer et al.ês ndings pro vided much guidance as to what features programmers and recruiters are most interested in seeing when exploring data from GitHub For example feature 3 can help developers discover technologies they should learn for their location and feature 4 above helps recruiters lter by skills The tool provides a language summary page per developer including a link to the developerês GitHub proìle From there the recruiter can check their code for best practices breadth of experience and so on Each of these analyses has accompanying visualizations which are discussed in the next section V V ISUALIZATION Web-based bar chart graphics and paginated sortable lterable data tables are the primary means of visualization in the web application These visualizations are well-suited for the data analysis described in the previous section Examples of two types of visualizations Figures 1 and 2 are given below Visualizations of a similar nature have been developed to support each of the analysis tasks mentioned in the Analysis section Fig 1 An example data table visualization showing JavaScript developers in Victoria BC sorted by amount of code in their public repositories Fig 2 An example bar chart visualization showing the top 10 most used programming languages in Victoria BC based on number of developers The vertical axis is the number of developers using the language 
683 
683 


VI E VALUATION To obtain feedback on the usefulness of the existing analysis the URL for the project site was provided to a group of software developers at the University of Victoria and a group of employers in Victoria BC This was an informal exploratory evaluation A handful of software developers were shown the project and asked their opinion Most found the site engaging often because they could see developers that they recognized in their location One reviewer found the use of peopleês real names a bit intrusive at rst but the vast majority of the developers felt this was a must-have feature Some developers felt that it would be nice to have a convenient way to compare multiple developers at once in the same visualization There was also interest in nding other developers with similar interests in programming languages projects and technologies in general An e-mail was sent out to several contacts at local employers around Victoria One interesting response came from a local Victoria company specializing in assembling dedicated enterprise software teams They responded Interesting I can see some uses alright If weêre trying to nd a JS developer it would be interesting to search by developer type and location and retrieve a sample of their code and put it through static analysis to see how they faired and if they were ok grab the email address they list Then drop them an email Something like I can see that you are a Github contributor who has Javascript experience and good code They also responded that the other use I can see is promoting our open source project via email invite This comment is particularly interesting because part of our original motivation for exploring the GitHub API was to nd local open source software projects In the future we will seek further feedback from other local businesses to make the tool even more useful Further feedback will be sought on the usefulness of this project from local companies This will help reìne the set of features which will be most desirable by those people who can get real value from the software Additionally Google analytics will be included in the site so that a more quantitative study of usage patterns can be made This may also reveal what users are nding most interesting or parts of the user interface that cause them to lose interest VII K NOWN L IMITATIONS A remaining challenge is the fact that the user search API will only return 1000 users This is enough for Victoria but not for larger cities such as Vancouver Another scheme will need to be developed to acquire the user list One possibility is using data from the GHTorrent Project It monitors the GitHub public event timeline and stores the data It provides both a MongoDB and MySQL interface for querying this data It does not include the detailed language usage information that this project needs but it may be useful for querying users in a location if appropriate patterns can be found For example using the MySQL interface a query such as could be used for a case-insensitive search for all locations containing Vancouver and then the regular post-processing with stop-words can be applied The current data collection process only considers code in repositories that a developer owns This means that if a developer contributes to a repository that they do not own without creating a fork this contribution will not be included in their metrics Conversely if a developer forks a large project they will get credit for all of the code in that repository even though they did not write it Therefore to make the metrics more accurate it would be necessary to extract data from developers contribution activity not projects owned This is another area where the GHTorrent project may prove useful in the future Since this tool only analyzes public repositories on GitHub it does not obtain a full picture of a regionês software development activity This is because many developers only work on proprietary code which would not be in public repositories One way to obtain information on the type of technologies used within this development community is through analysis of job postings which is the subject of a separate study VIII F UTURE W ORK The tool needs a web administrative interface so that it can be conìgured to collect data for an arbitrary geographic location with stop-words selected from a menu and persisted to a database rather than being hard-coded In the current version of the tool some manual editing of conìguration les is needed to collect data for other locations There are several features that could still be added to this project One is the ability to nd similar developers This might be implemented as a Find similar developers button on the developer information page Calculating this similarity would involve adding some machine learning algorithms Initially the similarity could just be based on using the same languages Later it could take into account the amount of code in each language developers starring the same repositories following the same people etc It would also be interesting to investigate the LinkedIn API and see if it would be possible to acquire more information about developers from there A big challenge would be linking GitHub and LinkedIn accounts but it might be possible using 
A Developer Feedback B Employer Feedback C Future Evaluation A GitHub Search API B Forks vs External Repositories C Proprietary Software Development 
SELECT  FROM users WHERE LOWER\(LOCATION LIKE vancouver 
684 
684 


email addresses or the combination of name and location though that would be less reliable because there could be many John Smithés in a large city Another area for improvement that ties into suggesting to developers strategic technologies to learn would be to dig deeper into the use of tools libraries and frameworks This is more challenging because it is not data available through the GitHub API It would require analyzing the code repositories of developers For example it might be possible to look at import/include statements as well as project conìguration les such as Ruby gemìles Python pip requirements les Java maven build les etc This would require quite a bit of programming effort to account for all of the different languages Also it would be a truly big data task to do full source code parsing on every userês projects for larger geographic regions If the data could be acquired though it would allow a much more ne grained search of developers with speciìc qualiìcations Employers could essentially enter the information from their job posting to nd qualiìed individuals IX C ONCLUSION GitHub is by far the most popular platform for open source collaboration and it has a rich API In this paper we demonstrated how this can be used to obtain detailed information about software development in speciìc geographic locations Other papers have demonstrated how to extract information about social networking but this is the only paper to our knowledge which has attempted to characterize developer activity by geographic location The importance of identifying developers geographic location is especially important because employers often bemoan the lack of qualiìed local developers sometimes resorting to foreign workers and outsourcing Meanwhile some developers nd it difìcult to nd local jobs Therefore it is critical to highlight the available local skills to employers and allow developers to learn which skills will be in greatest demand This information is also useful to educators in their selection of programming languages and frameworks used in university and college curricula so that they can give graduating students the best skill set possible to meet local labour market demands Identifying the most commonly used programming languages and frameworks is a difìcult task because there are a dauntingly large number of competing platforms to choose from in software development However often the choice between technologies to be employed in a project is not which is the best technology but which technology is most likely to lead to a product supported by a large pool of available developers during both the development stage and later in the maintenance stage This tool helps answer that question The web-based tool discussed in this paper is only a rst step towards identifying software development technology by region It characterizes the most commonly used languages by both amount of source code and number of developers using that programming language Much more could still be done A deeper analysis of the contents of the repositories could identify libraries frameworks and other components of software systems Code metrics could also be run on the contents of repositories identifying occurrences of code duplication and other code quality factors X P ROJECT C ODE The source code for this project is itself open source and available on GitHub at https://github.com/drusk/osstrends Below is a list of technologies used for implementation of the web application Python and JavaScript Flask http://îask.pocoo.org MongoDB http://www.mongodb.org and PyMongo https://github.com/mongodb/mongo-python-driver Requests http://requests.readthedocs.org/en/latest Bootstrap http://getbootstrap.com jQuery http://jquery.com DataTables http://datatables.net Chart.js http://www.chartjs.org Select2 http://ivaynberg.github.io/select2 R EFERENCES  GitHub Home P age A v ailable at https://github com  GitHub Blog Fi v e years A v ailable at http://github com/blog/1470 v eyears  Thung F  Bissyande T F  Lo D Lingxiao Jiang Netw ork Structure of Social Coding in GitHub Software Maintenance and Reengineering CSMR 2013 17th European Conference on  vol no pp.323,326 5-8 March 2013 doi 10.1109/CSMR.2013.41  F arah G Correal D  Analysis of intercrossed open-source softw are repositories data in GitHub Computing Colombian Conference 8CCC 2013 8th  vol no pp.1,6 21-23 Aug 2013 doi 10.1109/ColombianCC.2013.6637537  Gousios G Spinellis D GHT orrent Github s data from a rehose Mining Software Repositories MSR 2012 9th IEEE Working Conference on  vol no pp.12,21 2-3 June 2012 doi 10.1109/MSR.2012.6224294  Singer  L Figueira Filho F  Cleary  B T reude C Store y  M.-A Schneider K Mutual Assessment in the Social Programmer Ecosystem An Empirical Investigation of Developer Proìle Aggregators Proceedings of the 2013 Conference on Computer Supported Cooperative Work pp.103116 2013 doi 10.1145/2441776.2441791  Capiluppi A Serebrenik A Singer  L  Assessing T echnical Candidates on the Social Web Software IEEE  vol.30 no.1 pp.45,51 Jan.Feb 2013 doi 10.1109/MS.2012.169  Canadian Coalition F or T omorro ws ICT Skills CCICT The gro wing IT skills gap How organizations are adapting Retrieved October 30 2013 available at http://ccict.ca/news/the-growing-it-skills-gap  GitHub API v3 A v ailable at http://de v eloper github com/v3  MongoDB Home P age A v ailable at http://www mongodb or g  Python Thread State and the Global Interpreter Lock A v ailable at http://docs.python.org/2/c-api/init.html#threads 
         
685 
685 


            


                       


       0 500 1000 1500 2000 2500 3000 3500 4000 2 0 2 4 ST1 \(dps 0 500 1000 1500 2000 2500 3000 3500 4000 2 1 0 1 2 ST2 \(dps Time \(secs 


              


Harvard Business Review Knowledge and Information Systems SIGKDD Explorations Advances in Knowledge Discovery and Data Mining IEEE World Congress on Computational Intelligence \(WCCI 2008 Philosophical transactions Series A Mathematical physical and engineering sciences Journal of Visual Languages Computing Computer 9th Workshop on Domain-Specific Modeling at OOPSLA 9th International Software Product Line Conference Pattern Recognition and Machine Learning The Elements of Statistical Learning - Data Mining, Inference, and Prediction Statistical Science Neural Information Processing Systems NIPS Machine Learning: A Probalbistic Perspective Journal of the Royal Statistical Society Series B \(Methodological IEEE Transactions on Information Theory Artificial Intelligence Journal of Machine Learning Research Statistics in Medicine Bayesian Analysis International Society for Bayesian Analysis Bulletin 3rd International Workshop on Distributed Statistical Computing \(DSC 2003 AMPL: A Modelling Language for Mathematical Programming Operations Research 
UAIê01 
6   October, 2012 7  X  W u  V  Kum a r, J. Ross Qu in lan J. G h o s h, Q  Ya n g  M. Motoda, G. J. McLachlan, A. Ng, B. Liu, P. S. Yu, Z vol. 14, no. 1, pp. 1 37, 2007 8 M Ha ll, E Fran k  G  Holm es B P f ah rin g e r P   vol. 11, no. 1 pp. 10 18, 2009 9 U. M  Fay y ad  G  P iatetsk y S h ap iro, an d  P  Smy t h   in  1996, pp. 1 34 10  2008, pp. 1 24 11 T  Mi n k a, J. W in n J. G u iver, an d D  Kn o w les 12  vol. 371, no. 1984, 2013 13  the visual model-driven development of next generation software, vol. 17, no. 6, pp. 528 550, 2006 14   vol. 39, no. 2, pp. 25 31, 2006 15  Use of Domain, 2009 16  Specific 2005, vol. 3714, pp. 198 209 17  rial on Learning With Bayesian 18  19 C M Bisho p  New York: Springer, 2006 20 T  Ha stie, R. T i b s h irani an d  J. Friedm a n   2nd ed. 2009 21   vol. 19, no. 1, pp. 140 15  5, 2004 22  Version 2 23  24  2008, pp. 1073 1080 25 K Mu r p h y  The MIT Press, 2012 26  computations with probabilities on graphical structures and vol. 50, no. 2 pp. 157 224, 1988 27  the Sum, vol. 47, no. 2, pp. 498 519, 2001 28 P inference in Bayesian belief networks is NP, vol. 60, pp. 141 153, 1993 29  vol. 6, no 1, pp. 661 694, 2005 30  2001, pp. 362 369 31 D L u n n D. S p ieg elh a lter, A  T h o m as, an d N Best vol. 28, no. 25, pp. 3049 3067, 2009 32  M P. W a nd, J  T  O r m e r od S. A  P a doa n  a n d R   distributions vol. 6, no. 4, pp. 1 48 2011 33   vol. 14, pp. 13 15, 2007 34  Bayesian Gr 2003 35  V ersion 1.3 36 R  F o u rer D M. G a y  an d B W  Ke rn igh a    Monterey: Duxbury Press, Brooks/Cole Pub. Co., 2002 37  vol. 50, no. 1, pp. 42 47, 2002 
A. McAfee and E. Brynjolfsson, çBig Data: The Management Revolution Zhou, M. Steinbach, D. J. Hand, and D. Steinberg, çTop 10 algorithms in data mining  Reutemann, and I. H. Witten, çThe WEKA data mining software: an update  From data mining to knowledge discovery: an overview,é in  C. M. Bishop, çA New Framework for Machine Learning,é in  Infer.NET 2.5,é 2012 C. M. Bishop, çModel based Machine Learning H. Giese and S. Henkler, çA survey of approaches for intensive systems  D. C. Schmidt, çModel Driven Engineering  J. K‰rn‰, J. P. Tolvanen, and S. Kelly, çEvaluating the Specific Modeling in Practice,é in J. P. Tolvanen and S. Kelly, çDefining Domain Modeling Languages to Automate Product Derivation\004 Collected Experiences,é in  D. Heckerman, çA Tuto Networks,é Redmond, 1996 M. I. Jordan, çAn introduction to probabilistic graphical models,é 2003 M. I. Jordan, çGraphical models  OMG, çUnified Modeling Language \(UML 4.1 August 2011.é 2011 OMG, çBusiness Process Model and Notation \(BPMN Version 2.0 January 2011.é 2011 T. Minka and J. Winn, çGates: A graphical notation for mixture models,é in  S. L. Lauritzen and D. J. Spiegelhalter, çLocal their application to expert systems  F. R. Kschischang and B. J. Frey, çFactor Graphs and Product Algorithm  Dagum and M. Luby, çApproximating probabilistic hard  J. Winn and C. M. Bishop, çVariational Message Passing  T. P. Minka, çExpectation propagation for approximate Bayesian inference,é in  The BUGS project: Evolution, critique and future directions  Fr¸hrwirth, çMean field variational Bayes for elaborate   K. P. Murphy, çSoftware for Graphical models: a review  M. Plummer, çJAGS\004: A Program for Analysis of aphical Models Using Gibbs Sampling JAGS\004 Just Another Gibbs Sampler,é in Stan Development Team, çStan Modeling Language Userês Guide and Reference Manual 2013 G. B. Dantzig, çLinear Programming  
767 


             


                                          


                                             


                      


                                               


   


                                


                        


                           


   












































     2 8    b 4      1 8             1 2     1  8 2  


1 9    8      2 1       1     2    8    2 3\f        


     8 D 4 9  F  \b 1 8 #J 9 1     2 1   2 #-@ 1   2 9  E 1   1   2 9      6  


    8  8   1  D 1         1 F  \b0         2 D    F  \b 1 8  9  


  1 9  1   E 1  2 9     1 1 F  \b       1    18   F   1    1 #-$+  \b  2 2  


1 D     1 #-$+.B- 0/:% .0             9 1      18    1 6     1 2  1  1  


1   6      2    1 2 E 8 D 1      1 2   1   1 #-4  #-@E     2  1  1  1       


 8     1          2 F    6   F  2   8    2 C<CC/C N\bO 5      


CD    b$44NO F P Q 6   2 b$$$ ,=\b\bA  A N,O 2 C C  b$$4N  92 2   f  9-\b$$4 B N?O  !-    91  2 1 HH111-18-N+O    -1 :3%   2     0-4 


     b N4O 2   2- \f  C b$@$ \b# >\b\b$3\b$N@O  f :.% 9 /9 \f    1  6  f 2  4   A254 


Advantages of Our M ethod Advantages of Our M ethod Exploit the memory v ertical data format utilizes slidin g windows to g form a much larger database to analyze  Flexibility in Choosing what to choose  Choosing what to choose to build the rules Computational and memory efficiency We have a team working only on this aspect 45 Associative IDS for NextGen Frameworks Dr S Dua LA Tech 45 


Preliminary Results Intra transaction Relations Data rate simulator NH-134 Mb HOP PATH update \(Y/N Inference 11.5 Y Y 2 0.120 N N      Y   n 0.345 N NH134 Y/N   Inf 1 0.150 N N 2 0 120 Y N Inter transaction Relations 2 0  120 Y N       5 5.55 0.456 Y Relations  n 0.345 N N Nmap on DMRL nmap.org 


Anticipated Outcome Anticipated Outcome Develop algorithm capable of learning from a given heterogeneous diverse Develop algorithm capable of learning from a given heterogeneous diverse data ff Dynamic algorithmic f ramework designed to shi f t modalities and sampling rates based on complex logic Flexibility of integration into the Snort intrusion detection system 47 Associative IDS for NextGen Frameworks Dr S Dua LA Tech 47 


References References Aircraft Cockpit Image courtesy USAF http://www.faa.gov htt p   www.faa g ov  air traffic  technolo gy  p g  _ gy  Acharya R Dua S Du X Sree V Chua C K Automated Diagnosis of Glaucoma Using Texture and Higher Order Spectra Features To appear in IEEE Transactions on Information Technology in Biomedicine  Du X Dua S 2011 Cancer Prognosis Using Support Vector Regression in Imaging  Modality World Journal of Clinical Oncology 2  1   44 49 Du X Dua S 2010 Salient Frame Extraction Using Support Vector Regression and Motion Features pp 5 Proc of the National Aerospace and Electronics Conference July 14 16 2010 D M P D S 2010 Di i i ti Ft d Cl ifi ti Mthd f D essaue r  M  P  D ua S  2010  Di scr i m i na ti ve F ea t ures an d Cl ass ifi ca ti on M e th o d s f or Accurate Classification 1st ed vol 7704 pp 14 Bellingham WA Proceedings of SPIE Dessauer M P Dua S 2010 Low Resolution Vehicle Tracking using Dense and Reduced Local Gradient Features Maps 1st ed vol 7694 pp 8 Bellingham WA Proceedings of SPIE SPIE 


Acknowledgements Acknowledgements Fundin g A g encies  US 4 1 Million direct fundin g g g 4 g LA BoR NIH NSF AFRL AFOSR and NASA Research Team Samuel Kasimalla Brandy McKnight Dr Pradeep Chowriappa Connor Johnson Vasanth Nair Mihir Chowriappa  Connor Johnson  Vasanth Nair  Mihir Karnik Mohit Jain and Swadheen Songmen Associative IDS for NextGen Frameworks Dr S Dua LA Tech 49 All the respective Logos belong to their owners 


Rf d Rdi R e f erence d R ea di ngs Copyright of cover pages held by respective publishers 


Thank You Questions Thank You  Questions Dr Sumeet Dua E mail sdua@latech.edu Web http://dmrl.latech.edu Associative IDS for NextGen Frameworks Frameworks Dr S Dua LA Tech 51 Image Source roadtrafficsigns.com 


