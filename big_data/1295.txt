html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">Modeling and  Language Support for the Management of Pattern-Bases Manolis Terrovitis  Panos Vassiliadis  Spiros Skiadopoulos  Elisa Bertino  Barbara Catania  AnnaMaddalena  Abstract In our days knowledge extraction methods are able to produce artifacts \(also called patterns resent data. Patterns are usually quite heterogeneous and require ad-hoc processing techniques. So far, little emphasis has been posed on developing an overall integrated environment for uniformly representing and querying different types of patterns.Within the larger context of modelling, storing, and querying patterns, in this paper, we a setting of pattern management through a model that covers data, patterns and their intermediate mappings; \(b present a pattern speci?cation language for pattern management along with safety restrictions; and \(c duce queries and query operators and identify interesting query classes 1. Introduction Nowadays, we are experiencing a phenomenon of information overload, which escalates beyond any of our traditional beliefs. As a recent survey states [13], the world produces between 1 and 2 exabytes of unique information per year, 90% of which is digital and with a 50% annual growth rate. To deal with the vast amounts of collected data, we reduce the available data to knowledge artifacts \(e.g., clusters, association rules data processing methods \(pattern recognition, data This work was partially funded by the European Commission and the Hellenic Ministry of Education through EPEAEK II and the PANDA IST Thematic Network  School of Electrical and Computer Engineering, Nat  l Technical Univ. of Athens, Zographou 157 73 Athens, Hellas mter,spiros}@dblab.ntua.gr  Dept. of Computer Science, Univ. of Ioannina, Ioannina, Hellas, pvassil@cs.uoi.gr  CS Department, Purdue University, bertino@cs.purdue.edu  Dept. of Computer and Information Science, Univ. of Genoa Italy, {catania,maddalena}@disi.unige.it mining, knowledge extraction ber and size \(so that they are manageable by humans while preserving as much as possible from their hidden/interesting/available information. Again, the volume, diversity and complexity of these knowledge artifacts make their management by a DBMS-like environment imperative. In the remainder of this document, we will refer to all these knowledge artifacts as patterns So far, patterns have not been adequately treated as persistent objects that can be stored, retrieved and queried. Thus, the challenge of integration between patterns and data seems to be achievable by designing fundamental approaches for providing database support to patternmanagement. In particular, since patterns represent relevant knowledge, often very large in size, it is important that such knowledge is handled as ?rst-class citizen This means that patterns should be modelled, stored, processed, and queried, in a fashion analogous to data in traditional DBMSs To this end, our research is focused mainly towards providing a generic and extensible model for patterns along with the necessary languages for their de?nition and manipulation. In this context, there is already a ?rst attempt towards a model for pattern management [15], which is able to support di?erent forms of patterns \(constraints, functions, etc data types of the PBMS. In this paper, we provide formal foundations for the above issues by the follow 


formal foundations for the above issues by the following means: First, we formally de?ne the logical foundations for the global setting of PBMS management through a model that covers data, patterns, and intermediate mappings. Second, we discuss language issues in the context of pattern de?nition and management In particular, we present a pattern speci?cation calculus that enables us to specify pattern semantics in a rich and concise way. Safety issues are also discussed in this context. Finally, we introduce queries and identify interesting query classes for the problem. We introduce query operators for patterns and discuss their Proceedings of the 16th International Conference on Scientific and Statistical Database  Management \(SSDBM  04 1099-3371/04 $ 20.00  2004 IEEE usage and semantics The rest of this paper is organized as follows. In Section 2 we introduce the notion of Pattern-Base Management system. Section 3 presents a generic model for the coexistence of data and patterns. In Section 4 we present the Pattern Speci?cation Language, that enables us to specify pattern semantics. In Section 5 we explain how patterns can be queried and introduce query classes and operators. In Section 6 we present related work. Finally, Section 7 o?ers conclusions and topics of future work. A long version of this work appears in [18 2. Patterns and Pattern-Base Management Systems \(PBMS  s Patterns can be regarded as artifacts, which describe a subset of behavior, providing a compact and rich in semantics representation of data. There exists a data space \(the space of raw data data are related through many-to-many relationships Patterns can be managed by a Pattern-Base Management System \(PBMS are managed by a database management system. In our setting, a PBMS can be envisaged as a system where  patterns are \(semi raw data and loaded in the PBMS  patterns are updated as new \(existing loaded into \(deleted from or updated in database. These updates can be done in an ad-hoc on-demand or periodical \(batch  users are enabled to de?ne the internal structure of the PBMS through an appropriate de?nition language  users are allowed to pose queries to and retrieve answers from the PBMS, with the results of these answers properly visualized and presented  an \(approximate or exact terns and raw data is available whenever retrieval of raw data corresponding to patterns is needed The reference architecture for a PBMS is depicted in Fig. 1 and consists of three major layers of information organization. In the bottom of Fig. 1, we depict the data space consisting of data stores that contain raw data \(forming thus, the Raw Data Layer can be either managed by a DBMS or can be stored in les, streams or any other physical mean that is managed outside a DBMS. At the top of Fig. 1, we depict the PBMS repository that corresponds to the pattern space and contains patterns. The PBMS reposPatternsOf Experiment145 Ass. Rule 1 MyClustersOnT ableEMP Class Layer 


Class Layer Type Layer Patterns Layer Member of Instance of DB1 DB2 Flat file Data Mining Algorithms Pattern Recognition Algorithms Raw Data Layer Ass Rules Type Cluster Type Dec Trees Type Cyclical Cluster Type Ass. Rule n Ass. Rule 2 DBSCANC luster 1 DBSCANC luster m DBSCANC luster 2 PBMS Intermediate Mappings Figure 1. Reference architecture for the PatternBase Management System itory is managed by the Pattern-Base Management System. Finally, in the middle of Fig. 1, we can observe the intermediate mappings that relate patterns to their corresponding data, forming the Intermediate Data Layer. Intermediate mappings facilitate the justi?cation of any knowledge inferred at the PBMS with respect to the raw data. The overall architecture is called Integrated Pattern-BaseManagementArchitecture, or simply Pattern Warehouse Next, we present a brief description of all the entities that appear in this abstract description of the PBMS Intermediate Mappings Layer. Ideally, we would like this layer to be part of the PBMS, involving specialized storage and indexing structures. In general, one can imagine that the intermediate mappings can be either precisely traced \(e.g., through some form of join index between patterns and data proximated. In the latter case, one can employ di?erent variations of these approximations through data reduction techniques \(e.g., wavelets on-line data mining algorithms. For practical purposes though, the PBMS should be constructed in such a way Proceedings of the 16th International Conference on Scientific and Statistical Database  Management \(SSDBM  04 1099-3371/04 $ 20.00  2004 IEEE that it functions even if intermediate results are out of its control \(which we would expect as the most possible scenario in real-world scenarios Pattern Layer. Patterns are compact and rich in semantics representations of raw data. In the general case, although not obligatorily, patterns are generated 


case, although not obligatorily, patterns are generated through the application of knowledge extraction algorithms. In Fig. 1, two such algorithms have been applied: an algorithm for the extraction of association rules and an algorithm for the extraction of cyclical clusters Type Layer. The PBMS Pattern Types describe the intentional de?nition, i.e., the syntax of the patterns Patterns of same type share similar characteristics therefore Pattern Types play the role of data types in traditional DBMS  s or object types in OODBMS  s The type layer should be extensible to be able to incorporate user-de?ned pattern types Class Layer. The PBMS classes are collections of patterns which share some semantic similarity. Patterns that are members of the same class are obligatorily required to belong to the same type. Classes are used to create patterns with prede?ned semantics given by the designer; by doing so, the designer makes it easier for the users to work on them in a meaningful way For example, a class may comprise patterns that resulted from the same experiments, like the association rules of Fig. 1 3. Modeling Data and Patterns In this section, we will give the formal foundations for the treatment of data and patterns within the unifying framework of a pattern warehouse. First, we introduce the notions of data types, attributes and relations \(in the usual relational sense de?nitions already given in [5] for this purpose. Then we formally de?ne pattern types, pattern classes, patterns as well as the intermediate mappings. Finally, we de?ne pattern bases and pattern warehouses 3.1. The Data Space In this section, we will deal with the formal de?nition of the entities of the data space, i.e., data types relations and databases. Practically, we start with the data model proposed by Abiteboul and Beeri in [5], and make some changes in the type de?nitions. This data model is a many-sorted model which facilitates the definition of complex values. Our minor changes focus on inserting names in the types de?nitions, so we can easily access the inner components of complex types. In the data model, each constant and each variable is associated with a type and each function and predicate with a signature. We start by introducing simple data types Data types are structured types that use domain names, set and tuple constructors and attributes. For reasons of space and simplicity, we focus our examples in the domains of integers and reals, throughout the rest of the paper De?nition 1 Data Types \(or simply, types ned as follows [5  If D? is a domain name and A is an attribute name then A : D? is an atomic type  IfT1, . . . , Tn are types andA,A1, . . . , An are distinct attribute names then A : [A1:T1, . . . , An:Tn] is also a type, called tuple type  If T is a type and A is an attribute name then A T} is also a type. We call these types set types For a k-ary predicate the signature is a k-tuple of types and for a k-ary function it is a k + 1-tuple of types The values of a speci?c type are de?ned the natural way. For atomic types, we assume an in?nite, countable set of values as their domain, which we call dom\(T The domain of set types is de?ned as the powerset of the domain of the composing type. The domain of tuple types is de?ned as the product of their constituent types 


types Relations in our setting are considered to be sets of tuples de?ned over a certain composite data type. We model relations in the object-relational context and we make the following assumptions  For reasons of simplicity, we assume that relations are sets of tuples of the same type instead of just sets \(in contrast with [5] which requires only that relations are sets  At least one of the tuple components, by default named RID, is atomic and all its values are unique Intuitively, we want each relation tuple to have a row identi?er, according to classical \(object tional terminology. This enables us to use just sets instead of bags. We consider RID to be an implicit attribute and we do not explicitly refer to it when we de?ne the data schema De?nition 2 \([5 D?1, . . . , D?k], [R?1:T1, . . . , R?n:Tn]?, where T1, . . . , Tn are set types involving only the domain names corresponding to the data types D?1, . . . , D?k and R?1, . . . , R?n are relation names Proceedings of the 16th International Conference on Scientific and Statistical Database  Management \(SSDBM  04 1099-3371/04 $ 20.00  2004 IEEE De?nition 3 \([5 database, is a structure DB = ?[D1, . . . , Dk R1, . . . , Rn]?, where Ri  s are relations and Di  s are domains We also refer to D?B as the database type, and to DB as the database value As we will see in the following, we need to be able to de?ne patterns over joins, projections and selections over database relations. To do that, we extend Definition 2 with a set of materialized views V1, . . . , Vm which are de?ned over relations R1, . . . , Rn using relational algebra. We require that each tuple in a materialized view has a unique identi?er called RID. Throughout the rest of the paper, we address views as relations unless explicitly speci?ed otherwise 3.2. The Pattern Space Now that we have de?ned the constructs found at the data space, we are ready to proceed with the definition of the entities belonging to the pattern space Therefore, we will introduce pattern types, which are templates for the actual patterns and pattern classes which are groups of semantically similar patterns. The de?nition of a pattern base then comes straightforwardly Patterns as de?ned in [15] are compact, yet rich in semantics, representations of the raw data. This informal principle is formally translated as a quintuple. We will intuitively de?ne these components here and give the de?nition right next  First, a pattern is uniquely identi?ed by a Pattern Id \(PID  Second, a pattern has a structure: for example, an association rule comprises a head and a body, and a cyclical cluster comprises a center and a radius  Third, a pattern corresponds to some underlying data. The subset of the underlying data space that is represented by the pattern must be speci?ed e.g., through the appropriate relation  Fourth, a pattern informs the user on its quality, i.e., how closely does it approximate reality as compared to the underlying data, through a set of statistical measures. For example, an association rule is characterized by a con?dence and a support measure  Finally, a formula provides the richness in semantics for the pattern. The formula demonstrates a 


tics for the pattern. The formula demonstrates a possibly simpli?ed form, of the relation between the data that are represented by the pattern and the pattern structure. In Section 4 we present a Pattern Speci?cation Language \(PSL formula is expressed A Pattern Type represents the intentional description of a pattern, pretty much like abstract data types do in the case of object-relational data. In other words a pattern type acts as a template for the generation of patterns. Each pattern is an instance of a speci?c pattern type. There are four major components that a Pattern Type speci?es  First, the pattern type dictates the structure of its instances, through a structure schema. For example, it obliges association rules to comprise a head and a body  Moreover, a pattern type speci?es a data schema which dictates the schema of the underlying data which have produced the pattern type; practically this is the schema of the relation which can be employed as the test-bed for pattern generation/de?nition  Third, it dictates a measure schema, i.e., which set of statistical measures that quantify the quality of the approximation is employed by the instances of the pattern type  Finally, a template for the formula of the instances dictates the structure of the formula. The formula is a predicate bounding the DataSchema and the StructureSchema, expressed in the PSL De?nition 4 A Pattern Type is a quintuple [Name StructureSchema, DataSchema, MeasureSchema Formula] such that \(a er among pattern types, \(b tinct complex type \(can be set, set of sets etc c DataSchema is a relation type, \(d a tuple of atomic types and \(e pressed in the PSL language over the StructureSchema and the DataSchema De?nition 5 A Pattern \(Instance tern Type PT is a quintuple [PID, Structure, Data Measure, Formula] such that \(a identi?er among all patterns of the same class, \(b Structure and Measure are valid values of the respective schemata of PT , and \(c expressions in the PSL language, properly instantiating the corresponding expressions of the pattern type PT Example 1 Let us now present an example of a pattern type Cluster that de?nes a cyclical cluster and an example of one of its instance Pattern Type Cluster Proceedings of the 16th International Conference on Scientific and Statistical Database  Management \(SSDBM  04 1099-3371/04 $ 20.00  2004 IEEE Name Cluster Structure Schema disk:[Center: [X:real, Y :real], Rad:real Data Schema rel:{[A1:real, A2:real Measure Schema Precision:real Formula Schema t.A1 ? disk.Center.X t.A1 disk.Center.Y t ? rel Pattern Instance CustomerCluster 


Pattern Instance CustomerCluster Pid 337 Structure disk:[Center:[X:32, Y :90], Rad:12 Data customer:{[Age, Income Measure Precision: 0.91 Formula \(t.Age?32 t.Income?90 t ? customer Intuitively we can see that the formula requires that all data that belong to the relation customer must satisfy the predicate \(t.Age ? 32 t.Income ? 90 122. Precision in this case indicates that only 91% of them do In order to de?ne Pattern Types correctly, we need to be able to de?ne their DataSchema properly. Since a Pattern Type is a generic construct, not particularly bound to a speci?c data set, we employ a set of auxiliary names, which are employed in the de?nition of the DataSchema of Pattern Types for the speci?cation of generic relations and attributes Having said that, the instantiation procedure that generates patterns on the basis of Pattern Types, is straightforward. Assume that a certain Pattern Type PT is instantiated in a new pattern p. Then  The domains involved in the StructureSchema and the MeasureSchema of PT are instantiated by valid values in p  The auxiliary relation and attribute names in the DataSchema of PT are replaced by regular relation and attribute names of an underlying database  Both the previous instantiations apply for the FormulaSchema, too: the attributes of the StructureSchema are instantiated to values and the auxiliary names of the DataSchema are replaced by regular names. All other variable names remain the same Having de?ned the data space and the pattern entities, we are ready to de?ne the notions of Pattern Class and Pattern Pase \(PB type is a collection of semantically related patterns which are instances of this particular pattern type. Pattern classes play the role of pattern placeholders, just like relations do for tuples in the relational model De?nition 6 A Pattern Class is a triplet [Name, PT Extension] such that \(a among all classes, \(b c Extension is a ?nite set of patterns with pattern type PT De?nition 7 A Pattern Base Schema de?ned over a database schema D?D is de?ned as P?B = ?[D?1, . . . , D?n], [P?C1:PT1, . . . , P?Cm:PTm where PTi  s are pattern types involving the domains D?1, . . . , D?n and P?Ci  s are pattern class names De?nition 8 An instance of P?B, i.e., a pattern base, over a database DB is a structure PB = ?[PT1, . . . , PTk], [PC1, . . . , PCm]?, where PCi  s are pattern classes de?ned over pattern types PTi with patterns whose data range over the data in DB 3.3. The Pattern Warehouse Having de?ned the data and the pattern space, we are ready to introduce the global framework, in the context of which data- and pattern-bases coexist. To this end, we formally de?ne the intermediate mappings between data and patterns and the overall context of patterns, data and their mappings Each pattern corresponds to a set of underlying data whom it represents. At the same time, each record in the source database corresponds to a \(possibly empty set of patterns that abstractly represent it. We assume a mapping ? that relates patterns with their corresponding data. Through this mapping, we can capture 


sponding data. Through this mapping, we can capture both the relationship between a pattern and its corresponding data and at the same time, the relationship of a record with its corresponding patterns For reasons of simplicity, we avoid de?ning the relationship between data items and patterns at the level of individual relations and classes. Rather, we employ a generic representation, by introducing the union of all data items ? and the union of all patterns ?. Practically, the existence of RID  s and PID  s allows us to perform this union De?nition 9 The active data space of all data items of a database instance DB = ?[D1, . . . , Dk], [R1, . . . , Rn DB, is the union of all relations, i.e.,?DB =R1       Rn. The active pattern space of all patterns ? of a pattern base instance PB is the union of all pattern classes i.e., ?PB = PC1      PCn De?nition 10 Given the active data- and pattern spaces?DB and?PB, an intermediate pattern-data Proceedings of the 16th International Conference on Scientific and Statistical Database  Management \(SSDBM  04 1099-3371/04 $ 20.00  2004 IEEE mapping ? over ?DB and ?PB is a total function ? : ?DB  PB ? {true, false}.We say that a data item d is represented by a pattern p and we write d ?? p or p ?? d i? ?\(d, p It should be obvious now that the formula of each pattern is an approximation of the mapping?. In principle it is an issue of implementation and mostly administration whether the intermediate mappings will be explicitly saved \(with the storage and maintenance cost that this incurs tern formula \(with the respective approximation error In the sequel, we will demonstrate the usage of the formula as an approximation for the intermediate mappings Now, we are ready to de?ne the notion of Pattern Warehouse which incorporates the underlying database \(or source mediate mappings. Notice that although we separate patterns from data, we need the full environment in order to answer interesting queries, going all the way back to the data and to support interactive user sessions that navigate from the pattern to the data space and vice-versa De?nition 11 A Pattern Warehouse Schema is a pair D?B, P?B?, where D?B is a database schema and P?B is a pattern base schema De?nition 12 A Pattern Warehouse is an instance of a pattern warehouse schema de?ned as a triplet: ?DB,PB,??, where DB is a database instance, PB is a pattern base instance, and ? is an intermediate pattern-data mapping over DB and PB 4. Pattern Speci?cation Language and Formula The pattern formula describes the relation between the patterns, which are described in the structure ?eld and the raw data which are described in the source eld. It is evident that we need a common language to describe all these ?elds. Therefore, in this section we present the Pattern Speci?cation Language \(PSL with particular focus on the following aspects: \(a guage syntax, \(b icates by PSL and \(c Syntax. We chose as Pattern Speci?cation Language the complex value calculus, presented in [5] by Abiteboul and Beeri. This calculus is a many-sorted calculus. The sorts are types as de?ned previously. Each constant and each variable is associated with a type and each function and predicate with a signature. The signature of a k-ary predicate is a k-tuple of types. The 


nature of a k-ary predicate is a k-tuple of types. The signature of a k-ary function is a k + 1-tuple of types involving the types of the parameters and the result of the function. The set of terms of the language is the smallest set that contains the atomic constants and variables, and it is closed under the application of functions. Simple formulae consist of predicates applied to terms and formulae are combinations of atomic formulae through the combination of the connectives   and the quanti?ers Functions and Predicates. Functions and predicates are quite important in the PBMS setting, since the approximation of the data to patterns mapping, usually needs complex functions to be expressed. Functions and predicates can possibly appear both in the formula ?eld and in queries, associating relation names with the pattern structure. We believe that having interpreted functions is the best approach for the PBMS since we would like the formula to be informative to the user and we would like to be able to reason on it Safety andRangeRestriction. The formula is a predicate that we would ideally like to be true for all the data that are mapped to a pattern. Notice that the formula by itself does not contain a logical expression involving the pattern structure schema and the data schema i.e., it is not a query on the relations of the raw data The formula is merely a predicate to be used in queries We would like for example to use it in queries that navigate between the data and the pattern space like the following x | fp\(x where fp is a formula predicate and R is a relation appearing in the Data component. We require that fp is de?ned in such a way that we can construct queries like the previous, which are  safe  Safety is considered in terms of domain independence. Still, we cannot adopt the classical notion of domain independence \(which restricts values to the active domain of the database since even the simple functions can create new values not belonging to the domain of the database fore, we should consider a broader sense of domain independence similar to the one presented in [5, 17, 8 which allows the ?nite application of functions. For example, the n-depth domain independence as suggested in [5] considers domain independence with respect to the active domain closed under n application of functions. This includes the active domain and all the values that can be produced by applying the database functions n times, where n some ?nite integer The easiest way to ensure safety in these terms is to range restrict all variables appearing in a query. To this end, we introduce the where keyword in the formula which facilitates the mapping of the formula predicate free variables to the relation schema that appears in the DataSchema or Data component. More speci?Proceedings of the 16th International Conference on Scientific and Statistical Database  Management \(SSDBM  04 1099-3371/04 $ 20.00  2004 IEEE cally, we require that there are no free variables in the fp that are not mapped to the relation of the Data component by the use of thewhere keyword. This restriction guarantees that all the variables appearing in fp are either range restricted or that the system knows how to range restrict them to a ?nite set of values when fp is used in a query Now we can formally de?ne the well-formed formula for the pattern-type De?nition 13 A pattern type formula is of the form fp\(dv, pv 1 where fp \(formula predicate variable names mapped by the where keyword to the rela 


variable names mapped by the where keyword to the relation in DataSchema and pv are variable names that appear in the StructureSchema At instantiation time pv is assigned values of the Structure component and dv is mapped to the relation appearing in Data component. The de?nition for the pattern well-formed formula is now straightforward De?nition 14 A pattern formula is of the form fp\(dv 2 where fp \(formula predicate variablesmapped by thewhere keyword to the relation appearing in Data component From the previous de?nitions the semantics of the where keyword become evident: we impose that the variables of the formula will take values from speci?c relations when the formula predicate is employed in queries Example 2 Let us consider the following formulas 1. f\(x x 2. f\(g\(x x In the ?rst formula variable x is mapped to R using the where keyword, thus the formula is well formed. Keep in mind that the formula predicate by itself is just the part f\(x is not well-formed since y is not mapped via where to any relation, or otherwise range restricted 5. Querying the Pattern Warehouse We de?ne queries to be posed over the pattern warehouse and not individually over its data- or patternbase components. Through this approach, we are able to sustain queries traversing from the pattern to the data space and vice-versa. At the same time, the consistency of the results is guaranteed by the pattern-data mapping De?nition 15 Let PW the set of all possible Pattern Warehouses. A query is a function with signature PW ? PW. Given a query q and a pattern warehouse pw = \(DB,PB D?B, P?B q\(pw DB?, PB   P?B? = ?[D?1, ..., D?m], [P?C1:PT1]?. We assume that tr, tp\(tr ? R1 ? tp ? PC1 tr, tp Note that, similarly to the relational case, the result of a query is always a pattern warehouse containing just one relation and one pattern class. It is also important to point out that, in practice, even if a query always involve both the data and pattern space, operations over patterns are executed in isolation, locally at the PBMS. The reference to the underlying data is activated only on-demand \(whenever the user speci?cally requests so stored intermediate mappings or the formula approximation 5.1. Query operators In this section we introduce query operators that allow basic queries over the the PW . Assuming that DB denotes the set of all possible database instances and PB the set of all possible pattern bases, we consider the following groups of operators  Database operators: they can be applied locally to the DBMS. op : DB ? DB. We denote the set of database operators with OD  Pattern base operators: they can be applied locally to the PBMS. op : PB ? PB. We denote the set of database operators with OP  Cross-over database operators: they involve evaluation on both the DBMS and the PBMS, the result is a database. op : DB  PB ? DB. We denote the set of database operators with OCD  Cross-over pattern base operators: they involve evaluation on both the DBMS and the PBMS, the 


evaluation on both the DBMS and the PBMS, the result is a pattern base. op : DB  PB ? PB. We denote the set of database operators with OCP In the following, we present examples of the last three classes of operators \(database operators coincide with usual relational operators operators, we introduce some examples of predicates de?ned over patterns Proceedings of the 16th International Conference on Scientific and Statistical Database  Management \(SSDBM  04 1099-3371/04 $ 20.00  2004 IEEE 5.1.1. Pattern predicates We identify two main classes of atomic predicates: predicates over patterns and predicates over pattern components. From those atomic predicates we can then construct complex predicates. In the following, we denote pattern components by using the dot notation. For example, the measure component of a pattern p is denoted by p.Measure Predicates over pattern components. They check properties of speci?c pattern components. Let p1 and p2 be two patterns, possibly selected by some queries. The general form of a predicate over pattern components is t1?t2, where t1 and t2 are path expressions that must de?ne components of patterns p1 and p2, of compatible type and ? must be an operator, de?ned for the type of t1 and t2. For example, if t1 and t2 are integer expressions, then ? can be a disequality operator e.g. one of &lt;,&gt cases  If t1 and t2 are pattern data for patterns p1 and p2, then ? ? {=,?}. t1 = t2 is true if and only if x x ?? p1 ? x ?? p2 and t1 ? t2 is true if and only if ?x x ?? p1 ? x ?? p2  If t1 and t2 are pattern formulas for patterns p1 a n d  p 2   t h e n             t 1    t 2  i s  t r u e  i f  a n d o n l y  i f  t 1    t 2  a n d  t 1    t 2  i s  t r u e  i f  a n d  o n l y  i f  t 1 logically implies t2 Predicates over patterns. We consider the following set of predicates  Identity if they have the same PID, i.e. p1.P ID = p2.P ID  Shallow equality \(=s are shallow equal if their corresponding components \(except for the PID component i.e. p1.Structure = p2.Structure, p1.Source p2.Source, p1.Measure = p2.Measure, and p1.formula = p2.formula. Note that, to check the equality for each component pair, the basic equality operator for the speci?c component type is used  Deep equality \(=d deep equal if their corresponding data are identical, i.e., ?x x ?? p1 ? x ?? p2   S u b s u m p t i o n       A  p a t t e r n  p 1  s u b s u m e s  a  p a t t e r n  p 2   p 1    p 2   i f  t h e y  h a v e  t h e  s a m e  s t r u c ture but p2 represents a smaller set of raw data i.e. p1.Structure = p2.Structure, p1.Source p 2  S o u r c e  a n d  p 1  f o r m u l a    p 2  f o r m u l a  Complex predicates. They are de?ned by applying usual logical connectives to atomic predicates. Thus, if F1 and F2 are predicates, then F1 ? F2,F1 ? F2  F1 are predicates. We make a closed world assumption, thus the calculation of  F is always ?nite 5.1.2. Pattern base operators OP In this subsection, we introduce several operators de?ned over patterns. Some of them, like set-based operators, renaming and selection are quite close to their relational counterparts; nevertheless, some others, like join and projection have signi?cant di?erences Set-based operators. Since classes are sets, usual operators such as union, di?erence and intersection are de 


tors such as union, di?erence and intersection are de?ned for pairs of classes of the same pattern type Renaming. Similarly to the relational context, we consider a renaming operator ? that takes a class and a renaming function and changes the names of the pattern attributes according to the speci?ed function Projection. The projection operator allows one to reduce the structure and the measures of the input patterns by projecting out some components. The new expression is obtained by projecting the formula de?ning the expression over the remaining attributes [12 Note that no projection is de?ned over the data source since in this case the structure and the measures would have to be recomputed Let c be a class of pattern type pt. Let ls be a non empty list of attributes appearing in pt.Structure and lm a list of attributes appearing in pt.Measure. Then the projection operator is de?ned as follows ls,lm c id s m f p ? c, p = \(pid, s, d,m, f In the previous de?nition, id ing new pids for patterns, ?mlm\(m projection of the measure component and ?sls\(s ned as follows: \(i s usual relational projection; \(ii sls\(s and removing the rest from set elements. The last component ?ls?lm\(f computed in certain cases, when the theory over which the formula is constructed admits projection. This happens for example for the polynomial constraint theory 12 Selection. The selection operator allows one to select the patterns belonging to one class that satisfy a certain predicate, involving any possible pattern component, chosen among the ones presented in Section 5.1.1 Let c be a class of pattern type pt. Let pr be a predicate. Then, the selection operator is de?ned as follows pr\(c p Join. The join operation provides a way to combine patterns belonging to two di?erent classes according to a join predicate and a composition function speci?ed by the user Proceedings of the 16th International Conference on Scientific and Statistical Database  Management \(SSDBM  04 1099-3371/04 $ 20.00  2004 IEEE Let c1 and c2 be two classes over two pattern types pt1 and pt2. A join predicate F is any predicate de?ned over a component of patterns in c1 and a component of patterns in c2. A composition function c pattern types pt1 and pt2 is a 4-tuple of functions c cStructureSchema, cDataSchema, cMeasureSchema, cFormula one for each pattern component. For example, function cStructureSchema takes as input two structure values of the right type and returns a new structure value, for a possible new pattern type, generated by the join. Functions for the other pattern components are similarly de?ned. Given two patterns p1 = \(pid1, s1, d1,m1, f1 p2 = \(pid2, s2, d2,m2, f2 p1, p2 ned as the pattern p with the following components Structure : cStructureSchema\(s1, s2 Data : cDataSchema\(d1, d2 Measure : cMeasureSchema\(m1,m2 Formula : cformula\(f1, f2 The join of c1 and c2 with respect to the join predicate F and the composition function c, denoted by c 1   F  c  c 2   i s  n o w  d e  n e d  a s  f o l l o w s    F  c  c 2     c  p 1   p 2   p 1    c 1  p 2    c 2  F   p 1   p 2     t r u e   5.1.3. Cross-over database operators OCD Drill-Through. The drill-through operator allows one to 


Drill-Through. The drill-through operator allows one to navigate from the pattern layer to the raw data layer Thus it takes as input a pattern class and it returns a raw data set. More formally, let c be a class of pattern type pt and let d be an instance of the data schema ds of pt. Then, the drill-through operator is denoted by c c Data-covering. Given a pattern p and a dataset D sometimes it is important to determine whether the pattern represents it or not. In other words, we wish to determine the subset S of D represented by p \(p can also be selected by some query the formula as a query on the dataset. Let p be a pattern, possibly selected by using query language operators, and D a dataset with schema \(a1, ..., an ible with the source schema of p. The data-covering operator, denoted by ?d\(p,D responding to all tuples in D represented by p. More formally d\(p,D t.a1, ..., t.an In the previous expression, t.ai denotes a speci?c component of tuple t belonging to D and p.formula\(t.a1, ..., t.an instantiated by replacing each variable corresponding to a pattern data component with values of the considered tuple t Note that, since the drill-though operator uses the intermediate mapping and the data covering operator uses the formula, the covering ?\(p,D D = ?\(p not be equal to D. This is due to the approximating nature of the pattern formula 5.1.4. Cross-over pattern base operators OCP Pattern-covering. Sometimes it can be useful to have an operator that, given a class of patterns and a dataset, returns all patterns in the class representing that dataset \(a sort of inverse data-covering operation Let c be a pattern class and D a dataset with schema a1, ..., an pattern type. The pattern-covering operator, denoted as ?p\(c,D all patterns in c representing D. More formally p\(c,D t.a1, ..., t.an true Note that: ?p\(c,D p,D 6. Related Work Although signi?cant e?ort has been invested in extending database models to deal with patterns, no coherent approach has been proposed and convincingly implemented for a generic model There exist several standardization e?orts for modeling patterns, like the Predictive Model Markup Language \(PMML  eling approach, the ISO SQL/MM standard [2], which is SQL-based, and the Common Warehouse Model CWM  ing e?ort. Also, the Java Data Mining API \(JDMAPI 3] addresses the need for a language-based management of patterns. Although these approaches try to represent a wide range of data mining result, the theoretical background of these frameworks is not clear. Most importantly, though, they do not provide a generic model capable of handling arbitrary cases of pattern types; on the contrary only a given list of prede?ned pattern types is supported To our knowledge, research has not dealt with the issue of pattern management per se, but, at best, with peripheral proximate problems. For example, the paper by Ganti et. al. [9] deals with the measurement 


per by Ganti et. al. [9] deals with the measurement of similarity \(or deviation, in the authors  vocabulary between decision trees, frequent itemsets and clusters Although this is already a powerful approach, it is not generic enough for our purpose. The most relevant research e?ort in the literature, concerning pattern management is found in the ?eld of inductive databases Proceedings of the 16th International Conference on Scientific and Statistical Database  Management \(SSDBM  04 1099-3371/04 $ 20.00  2004 IEEE meant as databases that, in addition to data, also contain patterns [10], [7]. Our approach di?ers from the inductive database one mainly in two ways. Firstly, while only association rules and string patterns are usually considered there and no attempt is made towards a general pattern model, in our approach no prede?ned pattern types are considered and the main focus lies in devising a general and extensible model for patterns Secondly, di?erently from [10], we claim that the peculiarities of patterns in terms of structure and behavior together with the characteristic of the expected workload on them, call for a logical separation between the database and the pattern-base in order to ensure e?cient handling of both raw data and patterns through dedicated management systems Finally, we remark that even if some languages have been proposed for pattern generation and retrieval 14, 11], they mainly deal with speci?c types of patterns \(in general, association rules sider the more general problem of de?ning safe and su?ciently expressive language for querying heterogeneous patterns 7. Conclusions and Future Work In this paper we have dealt with the issue of modelling and managing patterns in a database-like setting Our approach is enabled through a Pattern-Base Management System, enabling the storage, querying and management of interesting abstractions of data which we call patterns. In this paper, we have \(a de?ned the logical foundations for the global setting of PBMS management through a model that covers data patterns and intermediate mappings and \(b language issues for PBMS management. To this end we presented a pattern speci?cation language for pattern management along with safety constraints for its usage and introduced queries and query operators and identi?ed interesting query classes Several research issues remain open. First, it is an interesting topic to incorporate the notion of type and class hierarchies in the model [15]. Second, we have intentionally avoided a deep discussion of statistical measures in this paper: it is more than a trivial task to de?ne a generic ontology of statistical measures for any kind of patterns out of the various methodologies that exist \(general probabilities Dempster-Schafer, Bayesian Networks, etc. [16 nally, pattern-base management is not a mature technology: as a recent survey shows [6], it is quite cumbersome to leverage their functionality through objectrelational technology and therefore, their design and engineering is an interesting topic of research References 1] Common Warehouse Metamodel \(CWM http://www.omg.org/cwm, 2001 2] ISO SQL/MM Part 6. http://www.sql99.org/SC32/WG4/Progression Documents/FCD/fcddatamining-2001-05.pdf, 2001 3] Java Data Mining API http://www.jcp.org/jsr/detail/73.prt, 2003 4] Predictive Model Markup Language \(PMML http://www.dmg.org 


http://www.dmg.org pmmlspecs v2/pmml v2 0.html, 2003 5] S. Abiteboul and C. Beeri. The power of languages for the manipulation of complex values. VLDB Journal 4\(4  794, 1995 6] B. Catania, A. Maddalena, E. Bertino, I. Duci, and Y.Theodoridis. Towards abenchmark for patternbases http://dke.cti.gr/panda/index.htm, 2003 7] L. De Raedt. A perspective on inductive databases SIGKDD Explorations, 4\(2  77, 2002 8] M. Escobar-Molano, R. Hull, and D. Jacobs. Safety and translation of calculus queries with scalar functions. In Proceedings of PODS, pages 253  264. ACMPress, 1993 9] V. Ganti, R. Ramakrishnan, J. Gehrke, andW.-Y. Loh A framework for measuring distances in data characteristics. PODS, 1999 10] T. Imielinski and H. Mannila. A database perspective on knowledge discovery. Communications of the ACM 39\(11  64, 1996 11] T. Imielinski and A. Virmani. MSQL: A Query Language for Database Mining. Data Mining and Knowledge Discovery, 2\(4  408, 1999 12] P. Kanellakis, G. Kuper, and P. Revesz. Constraint QueryLanguages. Journal of Computer and SystemSciences, 51\(1  52, 1995 13] P. Lyman and H. R. Varian. How much information http://www.sims.berkeley.edu/how-much-info, 2000 14] R.Meo, G. Psaila, and S. Ceri. An Extension to SQL for Mining Association Rules. Data Mining and Knowledge DiscoveryM, 2\(2  224, 1999 15] S. Rizzi, E. Bertino, B. Catania, M. Golfarelli M. Halkidi, M. Terrovitis, P. Vassiliadis, M. Vazirgiannis, and E. Vrachnos. Towards a logical model for patterns. In Proceedings of ER 2003, 2003 16] A. Siblerschatz and A. Tuzhillin. What makes patterns interesting in knowledge discovery systems. IEEE TKDE, 8\(6  974, 1996 17] D. Suciu. Domain-independent queries on databases with external functions. In Proceedings ICDT, volume 893, pages 177  190, 1995 18] M.Terrovitis, P.Vassiliadis, S. Skadopoulos, E. Bertino B. Catania, and A. Maddalena. Modeling and language support for the management of patternbases. Technical Report TR-2004-2, National Technical University of Athens, 2004. Available at http://www.dblab.ece.ntua.gr/pubs Proceedings of the 16th International Conference on Scientific and Statistical Database  Management \(SSDBM  04 1099-3371/04 $ 20.00  2004 IEEE pre></body></html 


The reason of the hiding failure of SWA is the same in Fig.8 Notice the result at x = 0.7646 in Fig.14, because the hiding failure is occurred at the seeds of the sensitive patterns, a high weakness is produced As shown in Fig.15 and Fig.16, the misses cost and dissimil arity of our work decreases as RL2 increases. This is because the larger RL2 is, the less effect on non-sensitive patterns. Also weakness and dissimilarity of SWA are independent of RL2 5. Conclusion In the paper, a novel method improving the balance between sensitive knowledge protecting and discovery on frequent patte rns has been proposed. By setting entries of a sanitization matrix to appropriate values and multiplying the original database by the matrix with some probability policies, a sanitized database is gotten. Moreover, it can avoid F-I Attack absolutely when the confidence level given by users approximates to 1. The experimental results revealed that although misses cost and dissimilarity between the original and sanitized database of our process are little more than SWA, ours provide more safely protection than SWA. Unlike SWA, our sanitization process could not suffer from F-I Attack and the probability policies in our approach also take the minimum support into account, the users only need to decide the confidence level which affects the degree of patterns hiding 6. Reference 1] M. Atallah, E. Bertino, A. Elmagarmid, M. Ibrahim and V. Verykios Disclosure Limitation of Sensitive Rules", Proc. of IEEE Knowledge and Data Engineering Exchange Workshop 1999 2] R. Agrawal and R. Srikant. Fast algorithms for mining association rules. VLDB, Santiago, Chile, 1994 3] R. Agrawal and R. Srikant. Privacy preserving data mining. In ACM SIGMOD, Dallas, Texas, May 2000 4] E. Dasseni, V. Verykios, A. Elmagarmid and E. Bertino, Hiding Association Rules by Using Confidence and Support", Proc. of 4th Intl Information Hiding Workshop \(IHW 5] A. Evfimievski, J. Gehrke, and R. Srikant. Limiting Privacy Breac hed in privacy preserving data mining. SIGMOD/PODS, 2003 6] A. Evfimievski, R. Srikant, R. Agrawal, and J. Gehrke. Privacy preserving mining of association rules. KDD 2002 7] M. Kantarcioglu and C. Clifton. Privacy-preserving distributed mining of association rules on horizontally partitioned data. In ACM SIGMOD Workshop on Research Issues on Data Mining and Knowledge Discovery, June 2002 8] Guanling Lee, Chien-Yu Chang and Arbee L.P Chen. Hiding sensitive patterns in association rules mining. The 28th Annual International Computer Software and Applications Conference 9] Y. Lindell and B. Pinkas. Privacy Preserving Data mining. In CRYPTO, pages 36-54, 2000 10] S. R. M. Oliveira and O. R. Za  ane. Privacy Preserving Frequent Itemset Mining. In Proc. of IEEE ICDM  02 Workshop on Privacy Security, and Data Mining 11] S. R. M. Oliveira and O. R. Za  ane. Algorithms for Balancing Priv acy and Knowledge Discovery in Association Rule Mining. IDEAS  03 12] S. R. M. Oliveira and O. R. Za  ane. Protecting Sensitive Knowledge By Data Sanitization, ICDM  03 13] S. R. M. Oliveira, O. R. Za  ane and Y  cel Saygin. Secure Association Rule Sharing, PAKDD-04 14] Benny Pinks. Cryptographic Techniques For Privacy-Preserving D ata Mining. ACM SIGKDD Explorations Newsletter Vol. 4, Is. 2, 2002 15] S. J. Rizvi and J. R. Haritsa. Maintaining data privacy in association rule mining. VLDB, 2002 16] J. Vaidya and C. W. Clifton. Privacy preserving association rule mining in vertically partitioned data. KDD2002 17] Verykios, V.S.; Elmagarmid, A.K.; Bertino, E.; Saygin, Y.; Dasseni E. Association rule hiding. IEEE Transactions On Knowledge And Data Engineering, Vol. 16, No. 4, April 2004 Proceedings of the 29th Annual International Computer Software and Applications Conference  COMPSAC  05 0730-3157/05 $20.00  2005 IEEE pre></body></html 


pre></body></html 


Batt Power Batt Type Stabilization Type Propulsion Mechanism  of Solar Panels  of Solar Cells Manufacturing Qty Satellites in Constellation On-Orbit Spares Channels Number of Bands Data Storage Processing Power Source type Block Name Thermal Control Material Type Level of Technology Known Inheritance Propulsion station keeping Number of Axes Ground Based Spares Pointing Accuracy APPENDIX C EXISTING MODELS Numerous models are today in use for estimating spacecraft cost Two of the most common are the NASA/Air Force Cost Model and the Aerospace Small Satellite Cost Model Here is a description of the NAFCOM model The NASA/Air Force Cost Model NAFCOM is a parametric estimating toolfor space hardware It is based on historical NASA and Air Force space projects and is primarily used in the very early phases of a development project NAFCOM can be used at the subsystem or component levels The database currently includes 122 missions including 76 unmanned earth orbiting 24 unmanned planetary 11 launch vehicles 8 manned 3 engines It uses parametric relationships to estimate subsystem or component level costs for any aerospace hardware including earth orbital spacecraft manned spacecraft launch vehicle upper stages liquid rocket engines scientific instruments or planetary spacecraft 7 And for the Aerospace Small Satellite Cost Model SSCM employs a parametric methodology for estimation of program cost and is best suited to the early conceptual development phase of a spacecraft program during which time the design is likely to be less mature and when cost and performance trades can be easily performed SSCM consists of a collection of cost-estimating relationships or CERs which estimate the costs of developing andproducing a spacecraft system with the following subsystems  Attitude Determination and Control Subsystem ADCS  Propulsion  Power  Telemetry Tracking  Command TT&C  Command  Data Handling C&DH  Structure  Thermal CERs were also developed for integration assembly and test IA&T program management PM and systems engineering SE and launch and orbital operations support LOOS Individual subsystem cost estimates are statistically rolled up to yield a cost-risk distribution which provides the estimator with a range of cost estimates andpercentiles 8 The SSCM was calibrated from over 100 post-1990 Earth-orbiting andplanetary missions REFERENCES 1 Lack of Disciplined Cost-Estimating Processes Hinders Effective Program Management GAO study 04-642 2 Jilla Cyrus D and Miller David W Satellite Design Past Present and Future International Journal of Small Satellite Engineering 12 February 1997 3 Bearden David A A Complexity Based Risk Assessment of Low-Cost Planetary Missions:When Is A Mission Too Fast and Too Cheap Fourth IAA International Conference On Low-Cost Planetary Missions JHU/APL MAY 2-5 2000 4 Kellogg Mahr and Lobbia An Analogy-based Method for Estimating the Costs of Spacecraft IEEEAC paper 1371 Version 4 5 Hoeting Jennifer A Methodology for Bayesian Model Averaging An Update f 6]btp/ewiieiao iiAaos 7 Keith Smith NASA/Air Force Cost Model Science Applications International Corporation 8 18 


BIOGRAPHIES Lee Fischman served as Principle Investigator for this project Lee is Senior Director of Development at Galorath Incorporated where he directs much of the new product development and research at the firm He developed SEER for Software  Hardware Integrations with Microsoft Project the Comparison Sizing tool COTS Software model in addition to various data mining information extraction and expert systems Previously he was a software designerlprogrammer in the New York financial industry Lee earned a BA from the University of Chicago and an MA from UCLA both in economics Mike Kimel carried out statistical work on the project Mike is an Economist for Galorath Inc in addition to maintaining his own quantitative consulting practice He has also taught Economics and Advanced Statistics at the Graziadio School of Business and Management at Pepperdine University run the Competitive Strategy group for a Fortune 500 Telecom Company and worked as a Consultant at PriceWaterhouse LLC now PriceWaterhouse-Coopers He earned a Ph.D in Economicsfrom UCLA Troy Masters programmed analytic methods and is integrating the Far Out model into its parent product SEER for Hardware previously SEER-H Troy is a Software Engineer with Galorath Incorporated where he has been the primary developer for a range ofproducts He earned a BS in computer science from UCLA David J Pine was our subject matter expert helping us assemble data and gain insight into technical trends Dave is retired after a 34-year career with the National Aeronautics and Space Administration NASA currently is a consultant to various government and industry entities While at NASA his organizations in the Office of the Chief Financial Officer and later at the IPAO at Langley Research Center were responsible for the conduct of major NASA program analyses and evaluations for the NASA Administrator and Deputy Administrator From early 1988 through the end of 1990 he was the Deputy Program Manager for the Hubble Space Telescope Program specifically responsible for the telescope operations and science support aspects of the program He earned a BS in Aerospace Engineering from the Polytechnic Institute of Brooklyn and a Masters of Engineering Administration from the George Washington University 19 


  20 Angeles, where he also received a B.S. in Applied Mathematics  Eric Fetzer is a Senior Member of the Technical Staff at the Jet Propulsion Laboratory, Pasadena, California specializing in satellite observations of the atmosphere.  His scientific interests include planetary boundary layer processes, tropical phenomena, upper tropospheric variability, and climatologies of temperature, water vapor and clouds.  His technical interests include analysis of large data sets, and of multi-sensor observations. He has over 20 peer-reviewed publications and given numerous scientific presentations, public lectures and media interviews about climate science. Eric received a B.A. in Physics from the University of California Berkeley, and a Ph.D. in Astrophysical, Planetary and Atmospheric Sciences from the University of Colorado, Boulder   Amy Braverman is a Senior Statistician at the Jet Propulsion Laboratory, California Institute of Technology She holds a B.A. in Economics from Swarthmore College an M.A. in Mathematics from UCLA, and a Ph.D. in Statistics also from UCLA. Prior to her current position in JPL's Science Data Understanding Group, she was a Caltech Post-doctoral Scholar at the Jet Propulsion Laboratory, and a Scientist in the Flight Sciences Experiments Section of the Science Division. Dr Braverman conducts research on information-theoretic methods for the analysis of massive data sets and streams statistical data fusion, high-dimensional data analysis, and statistical analysis for climate model evaluation and diagnosis. She has published in both the statistics and geoscience literature, and is active in both communities She is a member of the Multi-angle Imaging SpectroRadiometer Science Team, and serves as a member of the Atmospheric Infrared Sounder Science Integration Team. Her responsibilities on both missions include designing data reduction algorithms for massive, remote sensing data sets. Dr. Braverman also holds an appointment in the Department of Statistics at UCLA as Adjunct Associate Professor, and is active in UCLA\222s Center for Environmental Statistics. She is member of the Committee on Applied and Theoretical Statistics of the US National Academy of Science. She has refereed for the Journal of the American Statistical Association, the Journal of Computational and Gr aphical Statistics, IEEE Transactions on Geoscience and Remote Sensing, and the Journal of Applied Meteorology and Climatology Seungwon Lee is a senior member of the High Capability Computing and Modeling Group at Jet Propulsion Laboratory. She is conducti ng research on comet gas dynamics, nonlinear dynamics control, climate model parameterization, Earth science data analysis, parallel computing, and advanced numerical algorithms. She received her Ph.D in Physics fr om the Ohio State University and her M.S. and B.S. in Physics from the Seoul National University, Korea  Matthew Henderson is software engineer in the High Capability Computing and Mode ling group at JPL. His current work includes Web Services and Instrument Data Level 2 subsetting. He received a B.S. Computer Science from CSU Pomona, and is currently pursuing M.S Computer Science  Steven J. Lewis is a member of the Information System and Computer Science staff member at the Jet Propulsion Laboratory.  He received a BS in Mathematics from the University of California, Los Angeles in June 2001, and the MS and Ph.D. Degree from Claremont Graduate University in May 2004 and May 2007, respectively.  He worked as a post doctoral fellow at Keck Graduate Institute from June 2007 until he joined JPL in March of 2008.  During his graduate and post doctoral work, his studies focused on applications of Bayesian methods to hidden Markov models with particular interest and application to protein sequencing.  His work at JPL has focused on integrating web services into various programming platforms for the purposes of accessing NASA satellite data, as well as developing object tracking so ftware and contributing to image enhancement and restoration efforts Van Dang is a member of the Science Data Understanding Group at the Jet Propulsion Laboratory. She was responsible for the NEWS Level 2 processing that generated the formal merged Level 2 data from multiple A-Train instruments  Manuel de la Torre is a Physicist from the Universidad Complutense at Madrid \(Spain\. After finishing his Ph.D work at the University of Bayreuth \(Germany\ on pattern formation in turbulent flows and a 7 1/2 year stunt as Ass and Assoc. Prof. at the Escuela T\351cnica Superior de Ingenieros Aeron\341uticos in Madrid \(Spain\, he came to the Jet Propulsion Laboratory on a 1-year Sabatical leave in 1997 wanting to apply fundamental concepts of nonlinear systems and geophysical fluid dynamics to something that might be directly useful to soci ety. He discovered the JPL as a great place to achieve that goal and extende d his stay a bit longer, becoming Technical staff and working on different aspects of remote sensing, validation of satellite instruments, and data analysis of atmospheric processes and climate  


