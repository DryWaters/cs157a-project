The  cost of database scanning has been a bottle-neck problem in data mining Many algorithms proposed recently are based on FP-tree These algorithms include all frequent  itemsets 
Abstract 
Lan 
YanTai,264005 
sdytqy mining, closed frequent  
Z/O 
Shandong Institute of Business and Technology  China  
Yong Qiu and Yong-Jie  
163  
Efficient Improvement of FT-tree Based Frequent  Itemsets 
corn 
 
Mining Algorithms 
user given number of times minimum support 
bufer 
1 Introduction 
and merging methods a novel algorithm called QFPC was proposed which can create FP-tree with one database scanning 
A fundamental component in data mining tasks is finding frequent patterns in a given  Frequent patterns are ones that occur at least a  
itemsets mining and top-k closed frequent  itemsets mining However creating FP-tree from database must scan database two times  In 
order to enhance the  
efficncy 
of FP-tree based algorithms using  
dataset[l 
They allow us to perform essential tasks such as discovering association relationships among items correlation sequential pattern mining Algorithms proposed in  dataset FP-growth[4 can mine all frequent  
I 
in the  dataset find all frequent sets in a  accomplishes this by employing a bottom-up search But almost all previous Apriori-like algorithms use the candidate set generate-and-test approach FP-tree based mining 4 is an exception It has performance improvements over Apriori since it uses a compressed data representation and does not need to generate candidate sets  itemsets\(AF1S 
1,2,3,4 The Apriori algorithm  
might not be a good idea To solve this problem another type of a frequent  called closed frequent  itemsets CFIS was proposed in  itemset itemset 
in database However when a transaction database is very dense and the minimum support is very low  
i.e 
when the database contains a significant number of large frequent itemsets mining all frequent  itemsets itemset A frequent  
5 
X is closed if none of its proper supersets have the same support. Any frequent  
has 
itemsets thus contains complete information for generating association rules In most cases the number of CFIS is far less than the number of AFIS But there still have a problem to come up with an appropriate  Top k frequent closed  itemsets\(TCF1S 
min-support 
in[6,8 
the support of its smallest closed superset The set of all closed frequent  
threshold one needs to have detailed knowledge about the mining query and the task-specific data To solve this mining  
was proposed  where k is a user-desired number of frequent 
itemsets itemsets from FP-Tree 
 
Han et al. proposed a data structure called frequent pattern tree or FP-Tree  
closed  
itemsets database must scan database two times In order to enhance the efficiency of FP-tree based algorithms we propose a novel algorithm called QFPC which can create FP-tree with one database scanning FP-growth mines frequent  
2 FP-tree based algorithms 
4 
to be mined \(which is easy to specify top-k refers to the k most frequent closed  All the algorithms mentioned above are based on FP-tree However creating FP-tree  from 
1 
Algorithm 1 
without generating candidate frequent itemsets The construction of FP-Tree requires two data scans. In the first scan the support of each item is found In the second scan items within transactions are sorted in descending order according to the support of items 
5 
a minimum support threshold  Output Its frequent pattern tree, FP-Tree Method The FP-tree is constructed in the following steps  
FP-tree  construction  Input A transaction database DB Scan the transaction database DB once Collect the set of frequent items F and their supports. Sort F in support descending order as L 
and 
T Function insert-tree  
insert-tree  
N's 
2 Create the root of an FP-tree T and label it as null for each transaction in DB do the following. Select and sort the frequent items in transaction according to the order of L Let the sorted frequent item list in transaction be  
pitem-name Then increment  
PIP 
 
pip T If T has a child N such that Nitem-name count by 1 
where p is the first element and P is the remaining list. Call  PIP 


as was proposed It use the top-down pseudo tree-projection and upward subset-checking for sparse datasets whereas for dense datasets the bottom-up physical tree-projection and a compressed result-tree have been adopted The CLOSET algorithm is described as follows First scan TDB once to find the global frequent items and sort them in support descending order The sorted frequent item list forms the  TFP first builds the FP-tree from the input database DB If the number of frequent items in an input transaction T is no less than the minimal length, T is inserted into FP-tree in the mean time it uses the closed node count method to raise minimum support min-sup and uses the raised min-sup to prune infrequent items from the FP-tree. After the  fiom As analyzed above it is obvious that Constructing FP-tree is the key step in FP-tree based algorithms  fiom into n parts For example, Every part contains  f-list itemsets\(TCF1S build conditional FP-tree together with its header table for it and mine the frequent closed itemsets Finally, output the top-k frequent closed  FP FP-tree To construct FP-tree we must scan data base twice one for creating 1-itemset and one for build FP-tree To mine useful information from database effectively, we needs to solve efficiency problem of mining when data quantity very large efficiency of mining algorithm become the key of mining problem to increase efficiency of mining algorithm developing one database scanning algorithm is an effective policy In this section we present a algorithm to construct FP-tree with only one database scanning First we divide the    5 5 TI  wh~le  f-list TFP[9  T=NULL,TI  n parts averagely. For example  Every part contains  T2 merge  T1 Tl=T2,T2=T,T=Tl swap  T,T2 Prune the items from T where its support is less then  Create same node link for T Return T  Input Two sub FP-trees Output: a merged FP-tree named  FP-tree FP-tree2 Procedure  FP-merge\(result  FP-tree  FP-tree2:FP-TREE  Count the item support number from  FP-tree1 and FP-tree2 and sort the items in descending  order,insert into head table of result  retrieve one item train in  FP-tree1 from leaf to root sort the items in descending order of head table  merge-lnsert  retrieve one item train in FP-tree2 from leaf to root sort the items in descending order of head table  n=leaf  count 1 part\(1 PIP 3.Create   DO Scan the  of database, read the transactions into buffer Collect the set of items F and their supports. Sort F in support descending order  or bottom-up manner for dense datasets. During the mining process use the item merging item skipping and sub-itemset pruning methods to prune search space For each candidate frequent closed  or pseudo-projection based upward checking method for sparse  to do closure checking Finally stop when all the items in the global header table have been mined The complete set of frequent closed item-sets can be found either from the result tree or the output file F  tree contains compressed message of frequent itemsets it is easy to mining frequent  itemsets from FP-trees  CLOSET+[8 itemsets in a top-down manner for sparse  datasets itemset use the two-level hash indexed result tree method for dense  datasets datasets tree has been constructed the descendant-sum method is adopted to further raise min-sup and prune FP-tree Then, we begin the mining process: Top-down traverse each item in the global header table If the corresponding item's I-count is no less than the current min-sup treat this item as a frequent prefix  itemset itemsets  the result pattern tree by traversing it in a bottom-up manner and in the support descending order  itemsets  create a local FP-tree and merge into result FP-tree When the loop finished the result FP-tree is the global FP-tree We need not to create same node link for sub FP-Trees because it is only a local part of database we create same node link after all sub FP-Trees are merged into one FP-tree Algorithm 2 QFPC: Quick FP-tree Constructing Algorithm Input: A transaction database DB and a minimum support threshold   PIP N's parent link be linked to T N's node-link be linked to the nodes with the same item-name via the node-link structure If P is nonempty, Call insert-tree P N To minie frequent closed  1000 AIgorithm n=leaf FP-tree 1000 NULL,TZ=NULL L Create local FP-tree as  and T2 into T  NULL do FP-tree with one database scanning  TI  Else do create a new node N N's count Second, scan TDB and build FP-tree using the  Third With the divide-and-conquer and depth-first searching paradigm, mine FP-tree for frequent closed  can mines the set of top-k frequent closed  FP datasets transactions Then for each part of database, we scan transaction data one time read data into a memory buffer Output Its frequent pattern tree, FP-Tree Method: The FP-tree is constructed in the following steps  Divide database into  transactions For 1=1 to  n FP-Merge\(T,Tl  NULL,T2=NULL 3 FP-merge FP-tree merging algorithm do not create head table and node link in result FP-tree Method: call FP-merge\( result  FP-tree1 s count Let the item train be  where p is the last element and P is the frontal list Call  result n Remove the item train from  while FP-tree2 !=NULL do s   FP-tresresulP 


T1 be  from  Fi 4  Im  cfam1 to Result  to Result  to Result  to Result  moving\(cfa a 8  Table 1 An  Figure 1. Create sub FP-trees  Tl\(1eft tree from  T1 Figure cfa moving  cfa from  T1 After moving  cfa  cfa from  Figure 8 After  T1 to Result    Algorithm 4 merge-insert: insert a items train into FP-tree Input: item trains, FP-tree node, count of trains Output: a merged FP-tree Method: call merge-insert \(items train node support Procedure merge-insert  N.item-name  pitem-name N's count N's  Else do Create a new node N N's count PIP I  I exampleabase 1 1 3 7 After moving  2\(ri~ht m  2  FP-tree2 2mivide from,Tl a pip pip num N's parent link be linked to T If P is nonempty, Call merge-insert P N num To explain the algorithm we use an example with the transactions shown in Table 1 Let the number of  3 I Im  Let the item train be  where p is the last element and P is the frontal list Call merge-insert  result, n Remove the item train from  counwnum n database into two pars and the minimum DB  1  tree from DB Figure 2 After moving  from  I After moving  T1 Figure  Afier ure 6  to Result  from  Figure 9 After Pruning the items h 2  T num If T has a child N such that  


VLDBY94 3 in comparison with three algorithms  pp  1 ith  I-caOSCI The goal of the experiments is to find out the extent of different  PC with  Datasets Figure 10 Run time Comparison of CLOSET+ and CLOSET with QFPC R Agrawal and R Srikant Fast algorithms for mining association rules In  499 R J Bayardo Efficiently mining long patterns from databases. In  High performance mining of maximal frequent itemsets In Proc of the 6th SIAM Int'l Workshop on High Performance Data Mining \(HPDM  2003.135-143 N Pasquier Y  Itemsets NO. 5, MAY 2005 J Wang J Han and J Pei CLOSET Searching for the Best Strategies for Mining Frequent Closed Itemsets Proc 2003 ACM SIGKDD  236-245 Jianyong Wang and  TFP+QFPC CW+w    Id C  17 5 Conclusion 4 Experiments and Results QPFC  2 Support  1.8GHz In this paper we have introduced an efficient implementation of an FP-Tree constructing algorithm QFPC can create FP-tree with one database scanning Our future research work is to use the method into implementation of SQL-based, highly scalable FP-tree structure, constraint-based mining of frequent patterns sequential patterns max-patterns partial periodicity and other interesting frequent patterns mining 487 pp.85-93 K Wang Y He and J Han Mining Frequent  2003 pp XP  JF Thresho  dataset properties that could affect the performance of QPFC algorithms and the relative performance compares with other FP-tree based algorithms In this section we will evaluate  QPFC+QFP-growth  QPFC+CLOSET and  QPFC+TFP FP  growth,CLOSET and TFP All the experiments were performed on Pentium 4  512Mb RAM running on Window  are generated with the data generator by IBM QUEST FP-growth is provided by the original authors All programs are complied with the same compiler. Experimental results show it is efficient and scalable for mining large databases or data warehouses  SIGMOD'98 Itemsets Using Support Constraints Proc  Int Conf. on on Very Large Data Bases VLDB'OO Cairo Egypt, Sept. 2002  J Han J Pei and Y Yin Mining Frequent Patterns without Candidate  Generation\(PDF Slides Proc 2000 ACM-SIGMOD Int May 2000 Grahne G Zhu  Bastide R. Taouil and L  Lakhal Discovering Frequent Closed  for Association Rules Proc Int'l Conf Database Theory, pp. 398-416, Jan. 1999 Gosta Grahne and Jianfei Zhu Fast Algorithms for Frequent  Itemset Mining Using FP-Trees  ieee transactions on knowledge and data engineering VOL Jiawei Han TFP An Efficient Algorithm for Mining Top-K Frequent Closed Itemsets ieee transactions on knowledge and data engineering VOL 17 NO 5 MAY 2005 Figure 11. Run time Comparison of TFP and  2 3  6 References 0 0.5 1 1.5 2 2.5 


sets of each infrequent itemset are considered to he included in GCkCl for the next pass In DMM, we utilize InfrequentSet and Frequentset to perform the subset-infrequency based pruning and superset frequency based pruning on GCkfl. Before each largest proper subset of an infrequent itemset is included in GCk+l as a new candidate, we check whether it can he pruned or not. If a new candidate appears in  InfrequentSet or has any subset in it, then it is already idrntified as infrequent. In this case, we should split it into its largest proper subsets, and repeat the same procedure. This subset-infrequency based pruning technique help us avoid unnecessary computations especially for large candidates. Wc can break them down early into subsets that are close to the really frequent item sets After the suhsct-infrequency based pruning step, we can check if each remaining candidate appears in Frequentset or has any supersct in it. If yes, it will not be included in GCk+l according to the concept of superset-frequency based pruning. In fact, after the first couple of passes, there may be many frequent itemsets already identified. They help us remove a large number of new candidates, espe cially those split from short infrequent itemsets. In prac tice, these two pruning techniques considerably reduce the size of candidate sets, pass after pass. How to maintain Fre quentSet and InfrequentSet are described in Section 3.2.2 The global mining phase must continue until there is no more candidate for the following pass 3.2 Features of DMM 3.2.1 Prefix Tree for Counting Global Candidates with Different Length I Structure of the Prefix Tree: In DMM, we use the prefix tree to count the global candidates with different length. An example prefix tree is shown in Figure 2 together with some candidate itemsets to be counted The root node is at level 0, while the first item of each candidate itemset is placed at level 1, the second item at level 2, and so on. Each node in the prefix tree corresponds to an item and is connected to maximum two other nodes one through a child link and the other through a brother link. All the items following a common prefix item in dif ferent candidate itemsets are regarded as the children of the prefix item, and they are linked through brother links at the W d . 1 .  M PI: *.U.C.E.r p2: A.". E n. *.B.F P4 *.C.D.F PI: i3.c P6 c. ".I PI: c.0.c p8: C.E.F p9: 6.P.G PI0:B.T P l l '  A, ". c PI?:*.C P I 3 C . E m4.e H Figure 2. Prefix tree structure items appearing in the candidates. Node A is the first child of the root node as it comes first in the lexicographical or der among the children of the root node, and other children are linked one by one in ascending order through brother links. Similarly, nodes E and C have a common prefix A in different candidate itemsets, so they are linked together at level 2 as children of node A at level I, while only node B is directly connected to node A through a child link. If a node corresponds to the last item of an candidate itemset then it references the candidate itemset through the candi date pointer. In Figure 2, each of those last nodes is repre 


sented as a gray node or a black node, depending on whether it is a internal node or a leaf node in the prefix tree Construction of the Prefix Tree: Initially, the prefix tree has only the root node whose brother and child pointers are null. Then, we insert the candidate itemsets, one by one Suppose there is a candidate k-itemset 111, Iz, .  . . , Ik This candidate itemset can be inserted into the prefix tree in k steps, one for each item. First, we check whether the root node has children. As described above, every node at level I should he the first item of a candidate itemset. If the root node doesn't have a child at all, then we need to create a node of I1 and link it as the first child of root node. If the root node has children, we can reach the first child of the root node through its child link, then check other children through the brother links to make sure whether 11 is already at level 1. If not, we need to create a node of I1 at the right position to keep the lexicographical order of the items at level 1. From the node of Il at level 1, we repeat the same procedure for the next item I2 in order to have it at level 2 This procedure is repeated until the last item I ,  is located or inserted at level IC, and then it will reference the candidate itemset through its candidate pointer same level in their lexicographical order, but only the first child is directly connected to the prefix item through a child link. The root node corresponds to a null item and has four children in Figure 2: A, B, C and E ,  which are the first Counting the Global Candidates Using the P r e b  Tree For each transaction, we use a recursive method to count all candidates appear in the transaction. Figure 3 shows 502 2004 IEEE International Symposium on Cluster Computing and the Grid how to count the candidates in a transaction containing A ,  B, D ,  E ,  G}. We begin with the whole transaction at the root node. At level I ,  items A,  B and E are matched and only E references a candidate, so we increase the count of the candidate itemset { E }  by one. Then, we recursively process the transaction segment {B ,  D ,  E ,  G} on node A D ,  E ,  G }  on node B, and {G} on node E. These three operations let us enter the next level. At level 2, A's first child B appears in {B, D ,  E ,  G}  but does not reference any candidate. So, we continue processing { D ,  E ,  G} on this B node. Back to the node B at level 1, where we pro cess { D ,  E ,  G} on it, we can find it has no child appearing in { D ,  E,G}, so we simply stop here without processing on any of its children. For the node E at level I ,  its one child G is matched. Since this G references a candidate we increase its count by one. On this branch, the transac tion segment becomes cmpty after processing G, so we also stop here. Now, from thc node B at level 2, we can enter level 3. Node E,  the second child of node B, is matched and the corresponding candidate is counted. When we try to process {G} on node E ,  we cannot find a matching child since E has no child. So, after the transaction is scanned the counts of {A,  B,  E} ,  { E } ,  and { E ,  G }  are increased by one  V".GI i Figure 3. Counting the global candidates us ing the prefix tree 3.2.2 Reduction of the Global Candidate Set For DMM, how to reduce the sire of the initial global can didate set GCl and the subsequent global candidate sets as much as possible is very important for the overall pertor mance. Three techniques were used to solve this problem global support estimation, subset-infrequency based prun ing, and superset-frequency based pruning Support Estimation of the Global Candidates: When we merge the local maximal frequent items \(MFIs processing nodes, we need to keep just one copy of each  503 


503 MFI that is frequent in more than one node as a global can didate. If a maximal itemset is frequent at all nodes, obvi ously it is also a global maximal frequent itemset. We just need to accumulate its local support counts and put it into the FrequentSet. Such global candidates, however, are very few. Fortunately, even though most itemsets in GC1 appear as local MFls in just one or a few nodes, many of them of ten have their supersets frequent in other nodes. In that case the support counts of the supersets of a candidate allow us to estimate the minimum support count of the candidate in those nodes. For example, suppose that itemset { A ,  B,  G is a local MFI with the local count of 4000 in node I, while A,  B ,  C, E ,  G} and { A ,  B ,  G, K }  are local MFIs in node 2 with local counts of 3800 and 4200, respectively. We can then estimate that the local support count of {A, B ,  G}  in node 2 should he at least 4200. By this way, we can esti mate the minimum support count of any itemset in a node if any of its supersets is frequent in that node. Obviously the estimated minimum support count o f a  candidate is the lagest  support count of all its supersets in that node Subset-Infrequency Based Pruning and Superset Frequency Based Pruning: During thc global mining phase, DMM maintains the following scts: GCk \( k  2 11 FrequentSet and InfrequentSer. They are changing dy namically with the progress of the mining process. The global mining phase continues until GC, is empty, for some k 2 1, to ensure that we will not miss any global maximal frequent itemset. Eventually, FrequentSet will include all the global MFIs. Since DMM uses Frequentset and InfrequentSet to perform the superset-frequency based pruning and the subset-infrequency based pruning maintaining these two sets without any rediindancy is important to make the pruning steps efficient. After each pass in the global mining phase, we determitle whether each global candidate is maximally frequent or not. If a global candidate is frequent, we put it into FrequentSet only if none of its supersets is already in that set. On the other hand, i f  a global candidate is infrequent. we put it into InfrequentSet only if none of its subsets is already in that set. For example, if {A, B, G, H }  is infrequent but A ,  H }  is already in InfrequentSet, we do not insert it into InfrequentSer, because any superset of { A ,  B,  G, H }  will be also pruned by {A,H} when the subset-infrequency based pruning is applied If a global candidate k-itemhet is identified as infrequent we split it into k \(k  - 1 as new candidates. However, some of them may not be a valid candidate for the next global pass if it appears in In frequentSet or has a subset in it. In that case, we need to split the invalid candidate into its largest proper subsets. For ex ample, if {A,  B, C, D }  is infrequent and its subset {A, D is in InfrequentSer, we will continue the splitting until we 2004 IEEE International Symposium on Cluster Computing and the Grid get the following new candidates: { A ,  B, C}, {B ,  C,  D A,B},  \( A ,  C}, { B , D }  and {C,D}.  In practice, these two pruning techniques can make the global candidate set shrink drastically for each pass 3.2.3 Cube-based Communication between Processors To perform the communication between processing nodes efficiently, we impose a logical binary n-cube structure on the processing nodes. Then, the nodes can exchange and merge the local count information through increasingly higher dimensional links between them [4]. In the n-cube there are 2n nodes, and each node has n-bit binary address Also, each node has n neighbor nodes which are directly linked to that node through differcnt dimensional links. For example, there are 8 nodes in a 3-cube structure, and node 0 0 0 001 010 100 through a I st-dimensional link, a 2nd-dimensional link, and a 3rd-dimensional link, respectively. Thus, in the n-cube all the nodes can exchange and merge their local counts in 


all the nodes can exchange and merge their local counts in T I  steps, through each of the n different dimensional links When n = 3, the three exchange and merge steps are step 1: node \( 1 where denotes a don't-care bit step 2: node \( 0 1 step 3: node \(0 1 O  3.3 Pseudo-code of DMM As we assume a homogeneous distributed computing environment where all the processing nodes are the same we just give the pseudo-code of the DMM algorithm running on a node P Local Mining Phase P" applies the sequential Max-Miner algorithm on D' and stores local MFIS into LM n = log, N :  I* N processing nodes are used for mining *I for \( j  = 1;j 5 n;j P' exchange and merge LM' with that of a neighbor node through the jth-dimensional link and the result is stored in LiM GC FrequenrSer= 6 foreach local MFI x in LM if the estimated global support o fx  is above the minimum support superset of x else put x into.GC1 then put x into FrequenrSer unless it contains a I apply the suprrset-frequency based pruning on GCI  504 Global Mining Phase InfrequenrSer= 4 global pass k ,  for k 2 1 while \(GCk # 4 Pi scans D' to count the candidates in GCk for \( j  = I ; j  5 n ; j P' exchange and merge the local counts of GCk members with a neighbor node through the jth-dimensional link foreach candidate x in GCx if the support of x is above the minimum support then put x into FrequentSer unless it contains a superset of x subset of x else put I into InfreqrcenrSer unless it contains a  foreach candidate inserted into InfrequenrSer in the current pass split the infrequent candidate into new candidates i.e., its largest subsets apply the subset-infrequency based pruning on these new candidates those candidates pruned by the subset-infrequency based pruning are put back into InfmquenrSer this process will continue until no new candidate either appears in InfrequenrSer or has any subset in i t 1 apply the superset-frequency based pruning on the new candidates remove those candidates which appear in Frequentset or put the new candidates that passed the two pruning operations into GCI,+~ for the next global pass k + I k have any superset in  it *I 1 GM = FrequentSer I* GM is the set of all maximal frequent itemsets 4 Performance Evaluation Our test platform is an &amp;node Linux cluster system 


Our test platform is an &amp;node Linux cluster system where nodes are connected by a Fast Ethernet switch. Each node has a 800 Mhz Pentium processor, 512 MB memory and a 40 GB disk drive. The processes are communicating using the MPI \(Message Passing Interface The databases used in our experiments are synthetic sales transaction databases generated as in [I]. All parameters used for generating databases are described in Table 1. For all databases, c = 0.5, m = 0.5, U = 0.1, ILI = 2000 and N I  = 1000. Table 2 lists all databases used in our perfor mance evaluation experiments. The size of each database is about 360 MB. When running the parallel algorithm on a database, we need to partition it into local databases. To balance the size of the local databases, each transaction is randomly allocated to a node 2004 IEEE Interna6onal Symposium on Cluster Computing and the Grid ID1 TI 111 ILI N I c m D In order to compare the performance of DMM and Count Distribution, we also implemented Count Distribution on the same platform Number of vansactiom in the database Average size of the transactions Average size of the maximal potentially frequent itemxu Numkraf maximal potentially frequent itemels Number of items Comlaliun level Mean of the comption level Variance of the camption level Table 1. Synthetic database parameters Table 2. Databases 4.1 Improvement of DMM over Count Distribu tion We ran both DMM and Count Distribution on different synthetic databases with different minsup values. If we de tine TCD and TDM,U as the execution times of CD and DMM, respectively, then the speedup of DMM over CD is TCD/TDMA,. In Table 3, the speedup of DMM is shown for different databases listed in the first column and for dif ferent values of minsup listed in the first row. In these ex periments, all 8 nodes in our cluster system were used Table 3. Speedup of DMM over CD \(8-node case As minsup decreases, DMM begins to show more and more improvement in our tests. As shown in Table 3, when the 111 value of the database is large, such as 8 or IO, even if minsup is as high as 0.58, DMM is faster than Count Dis tribution with a speedup above 2.5. It is because a large 11 value results in large frequent itemsets \(i.e., long patterns which benefits DMM. If minsup is less than 0.25%, DMM outperforms Count Distribution considerably DMM uses the local and global mining phases to re duce the overall synchronization and communication re quirement, but the global mining phase still needs several passes over the database and incurs some extra computation overhead. In our cluster system, since the communication speed between nodes is high, the benefit of reduced syn chronization and communication overhead is not enough to offset the effect of extra passes during the global mining phase. However, this feature of DMM may be attractive to some distributed systems where the communication cost is relatively high 4.2 Synchronization Requirement of DMM and Count Distribution We compared the number of synchronizations needed between processing nodes in DMM and Count Distribu 


between processing nodes in DMM and Count Distribu tion. In DMM, the local mining phase needs only one syn chronization. So, the total number of synchronizations is the number of passes needed in global mining phase plus one. Table 4 shows the comparison results. Here, we de fine SDMM and SCD as the numbers of synchronizations needed in DMM and CD, respectively. The first row of the table lists various values of minsup, and the first column lists the names of databases. The values in each entry of the table represents SD,MM :SCD Table 4. Comoarison of svnchronization re quirement When minsup is high, DMM is comparable to or a lit tle bit slower than Count Distribution. We also ran Apriori and Max-Miner for these cases, and found that Max-Miner doesn  t show much improvement over Apriori, either. That is because the high minsup limits the number of frequent itemsets and the length of those frequent itemsets. Thus the effect of look-ahead technique used by Max-Miner is not clearly shown, and naturally DMM has the same result DMM needed just two times of synchronization in the best cases. In other cases, the number of synchronizations needed for DMM was also much smaller than that of CD mainly because DMM requires only one synchronization during the local mining phase 505 2004 iEEE International Symposium on Cluster Computing and the Grid 4.3 Communication Requirement of DMM and Count Distribution In Count Distribution, all nodes have the same set of candidate itemsets in each pass. So, every node needs to exchange the same amount of count information with oth ers. In DMM, nodes need to exchange two types of data candidates and their counts. For the merging of local MFIs to construct the first global candidate set, each node per forms log, N send and log, N receive operations when N processing nodes are used. Since the set of local MFIs in one node may he different from those in other nodes, the amount of data each node sends or receives varies at each communication step. In each global pass, all nodes have the same global candidate set and exchange the same count in formation in log, N steps. To make it simple, we computed the average amount of data each node sends and receives during the whole mining Let  s consider the difference in the meaning of candi dates of the two algorithms as the number of candidates determines how much data need to he exchanged between processing nodes during the mining. In Count Distribution its candidates are the potential frequent itemsets generated as in Apriori. In DMM, after the local mining phase, can didates involved in the communication are just the potential maximal frequent itemsets; i.e., all local MFIs and some of their subsets that are not global MFIs. Compared with the set ofcandidates in Count Distribution, the set of candidates in DMM is very small. Thus, DMM requires much less communication than Count Distribution even though DMM needs to merge the candidates first \(after the local mining phase during the global mining phase When the minsup is very low, Count Distribution tends to discover a large number of short frequent patterns, so that there are a large number of candidates in early passes This results in a very high communication overhead be tween nodes. On the other hand, in  DMM, the increase in the number of short frequent patterns usually results in a small change in the number of local MFIs. Thus, even though low minsup value may affect the local mining phase of DMM, it has a relatively small impact on the communi cation overhead during the global mining phase. Therefore as the minsup decreases, DMM performs better than Count Distribution in terms of communication requirement 


Distribution in terms of communication requirement We implemented two versions of Count Distribution one is using the n-cube communication, and the other is using the all-to-all communication. We compared the av erage amount of data each node communicates with oth ers when we executed DMM and Count Distribution on the T30J08D2954K database with various values of minsup and the results are shown in Figure 4 As shown in Figure 4, the communication overhead of 500 450 400 a 350 B 300 g 200 250 150 s d 10.3 50 0 1 075 0 5  0 4  0 3  025 0 2  015 0 1 Minimum Suppon Figure 4. Comparison of communication re quirement DMM is much lower than that of Count Distribution. Even though DMM needs to cxchange candidates at the end of the local mining phase and some candidates may consist of many items, the total amount ofdata to he transferred is still relatively small, because Count Distribution must exchange the count information for much larger candidate sets. Com pared with Count Distribution using the all-to-all commu nication scheme, DMM demonstrates a big improvement in communication for all cases. Here, we  d like to emphasize that the advantage of DMM in communication requirement comes from its much smaller size of candidate sets and the n-cube communication scheme 4.4 Sensitivity Analysis of DMM In this section, we analyze the characteristics of the DMM algorithm in terms of speedup and sizeup. All tests were performed with a minsup of 0.25 4.4.1 Speedup We measured the speedup of DMM as the number of pro cessing nodes was increased while the database size re mained the same. For the databases listed in Table 2, we kept the same database size of 360 MB, but the database was partitioned into 2,  4, and 8 parts when the number of nodes were 2,4, and 8, respectively Figure 5 shows the execution time of DMM on the 2 node, 4-node, and 8-node systems. To demonstrate the speedup, we also ran the sequential Max-Miner for each database on a single node. As the number of nodes was doubled, the execution time of DMM was reduced by about 40% to 50%. Even though DMM may not achieve the linear speedup, it still shows a good speedup When DMM is executed on the T40110D2256K database using 2 nodes, its execution time is small. This is 506 2004 IEEE International Symposium on Cluster Computing and the Grid 16000 4000 3 12000 I ; iwoo E P 2 6000 w 4wo 2000 5 8000 8 0.7 because, when the number of nodes is small, the datadistri bution characteristic of each data partition is very similar to that of the whole database. So, after the local mining phase the initial global candidate set would be similar to the set of 


the initial global candidate set would be similar to the set of global MFIs. As a result, during the global mining phase the communication and synchronization overhead is low  0 2 4 6 8 1 0 Number of Nodes Figure 5. Speedup of DMM 4.4.2 Sizeup For the sizeup test, we fixed the system to the 8-node con figuration, and distributed each database listed in Table 2 to the 8 nodes. Then, we increased the local database sire at each node from 45 MB to 215 MB by duplicating the initial database partition allocated to the node. Thus, the data distribution characteristics remained the same as the local database size was increased. This is different from the speedup test, where the database repartitioning was per formed when the number of nodes was increased. The per formance of DMM is affected by the database repartitioning to some extent, although it is usually very small. During the sizeup test, the local mining result of DMM is not changed at all at each node The results shown in Figure 6 indicate that DMM has a very good sizeup property. Since increasing the size of local database did not affect the local mining result of DMM at each node, the total execution time increased just due to more disk U 0  and computation cost which scaled almost linearly with sizeup 5 Conclusions In this paper, we proposed a new parallel maximal fre quent itemset \(MFI Max-Miner \(DMM tems. DMM is a parallel version of Max-Miner, and it re quires low synchronization and communication overhead compared to other parallel algorithms. In DMM, Max Miner is applied on each database partition during the lo 0 45 90 135 180 225 270 Amwnt of Data per Node \(ME Figure 6. Sizeup of DMM cal mining phase. Only one synchronization is needed at thc end of this phase to construct thc initial global candi date set. In the global mining phase, a top-down search is performed on the candidate set, and a prefix tree is used to count the candidates with different length efficiently. Usu ally, just a few passes are needed to find all global maximal frequent itemsets. Thus, DMM largely reduces the number of synchronizations required between processing nodes Compared with Count Distribution, DMM shows a great improvement when some frequent itemscts are large \(i.e long patterns employed by DMM for efficient communication between nodes; and global support estimation, subset-infrequency based pruning, and superset-frequency based pruning are used to reduce the size of global candidate set. DMM has very good speedup and sizeup properties References I ]  R. Agrawal and R. Srikant  FdSt Algorithms for Mining As sociation Rules  Pmc. o f f h e  ZOrh VLDB Conf, 1994, pp 487499 2] R. Agrawal and I. C. Shafer  Parallel Mining of Association Rules  IEEE Trans. on Knowledge and Dura Engineering Vol. 8, No. 6, 1996, pp. 962-969 3] R. I. Bayardo  Efficient Mining Long Patlems from Databases  Proc. ofrhe ACM SIGMOD Inf  l Conf on Man ogemenr ofDara, 1998, pp. 85-91 4] S.  M. Chung and J. Yang  A Parallel Distributive Join Al gorithm for Cube-Connected Multiprocessors  IEEE Trans on Parallel and Disrribured Systems, Vol. 7, No. 2, 1996, pp 127-137 51 M. Snir, S. Otto. S. Huss-Lederman, D. Walker, and J. Don gana, MPI: The Complete Reference, The MIT Press, 1996 


gana, MPI: The Complete Reference, The MIT Press, 1996 6] R. Rymon  Search through Systematic Set Enumeralion   Pmc. of3rd Inr  l Con$ on Principles of Knowledge Repre sentation and Reasoning, 1992, pp. 539-550 507 pre></body></html 


sketch-index in answering aggregate queries. Then Section 5.2 studies the effect of approximating spatiotemporal data, while Section 5.3 presents preliminary results for mining association rules 5.1 Performance of sketch-indexes Due to the lack of real spatio-temporal datasets we generate synthetic data in a way similar to [SJLL00 TPS03] aiming at simulation of air traffic. We first adopt a real spatial dataset [Tiger] that contains 10k 2D points representing locations in the Long Beach county \(the data space is normalized to unit length on each dimension These points serve as the  airbases  At the initial timestamp 0, we generate 100k air planes, such that each plane \(i uniformly generated in [200,300], \(ii, iii destination that are two random different airbases, and iv  the velocity direction is determined by the orientation of the line segment connecting its source and destination airbases move continually according to their velocities. Once a plane reaches its destination, it flies towards another randomly selected also uniform in [0.02, 0.04 reports to its nearest airbase, or specifically, the database consists of tuples in the form &lt;time t, airbase b, plane p passenger # a&gt;, specifying that plane p with a passengers is closest to base b at time t A spatio-temporal count/sum query has two parameters the length qrlen of its query \(square number qtlen of timestamps covered by its interval. The actual extent of the window \(interval uniformly in the data space \(history, i.e., timestamps 0,100 air planes that report to airbases in qr during qt, while a sum query returns the sum of these planes  passengers. A workload consists of 100 queries with the same parameters qrlen and qtlen The disk page size is set to 1k in all cases \(the relatively small page size simulates situations where the database is much more voluminous specialized method for distinct spatio-temporal aggregation, we compare the sketch-index to the following relational approach that can be implemented in a DBMS. Specifically, we index the 4-tuple table lt;t,b,p,a&gt; using a B-tree on the time t column. Given a count query \(with window qr and interval qt SELECT distinct p FROM &lt;t,b,p,a&gt WHERE t?qt &amp; b contained in qr The performance of each method is measured as the average number of page accesses \(per query processing a workload. For the sketch-index, we also report the average \(relative Specifically, let acti and esti be the actual and estimated results of the i-th query in the workload; then the error equals \(1/100 set the number of bits in each sketch to 24, and vary the number of sketches The first experiment evaluates the space consumption Figure 5.1 shows the sketch index size as a function of the number of sketches used \(count- and sum-indexes have the same results more sketches are included, but is usually considerably smaller than the database size \(e.g., for 16 signatures, the size is only 40% the database size 0 20 40 60 80 


80 100 120 140 160 8 16 32 number of sketches size \(mega bytes database size Figure 5.1: Size comparison Next we demonstrate the superiority of the proposed sketch-pruning query algorithm, with respect to the na  ve one that applies only spatio-temporal predicates. Figure 5.2a illustrates the costs of both algorithms for countworkloads with qtlen=10 and various qrlen \(the index used in this case has 16 sketches also illustrate the performance of the relational method which, however, is clearly incomparable \(for qrlen?0.1, it is worse by an order of magnitude we omit this technique Sketch-pruning always outperforms na  ve \(e.g., eventually two times faster for qrlen=0.25 increases with qrlen, since queries returning larger results tend to set bits in the result sketch more quickly, thus enhancing the power of Heuristics 3.1 and 3.2. In Figure 5.2b, we compare the two methods by fixing qrlen to 0.15 and varying qtlen. Similar to the findings of [PTKZ02]4 both algorithms demonstrate  step-wise  growths in their costs, while sketch-pruning is again significantly faster The experiments with sum-workloads lead to the same observations, and therefore we evaluate sketch-indexes using sketch-pruning in the rest of the experiments 4 As explained in [PTKZ02], query processing accesses at most two paths from the root to the leaf level of each B-tree regardless the length of the query interval Proceedings of the 20th International Conference on Data Engineering \(ICDE  04 1063-6382/04 $ 20.00  2004 IEEE sketch-pruning naive relational 0 100 200 300 400 500 600 700 800 900 0.05 0.1 0.15 0.2 0.25 number of disk accesses query rectangle length 300 0 100 200 400 500 600 1 5 10 15 20 number of disk accesses query interval length a qtlen=10 b qrlen=0.15 Figure 5.2: Superiority of sketch-pruning \(count As discussed in Section 2, a large number of sketches reduces the variance in the resulting estimate. To verify this, Figure 5.3a plots the count-workload error of indexes 


using 8-, 16-, and 32- sketches, as a function of qrlen qtlen=10 error \(below 10 it increases slowly with qrlen used, however, the error rate is much higher \(up to 30 and has serious fluctuation, indicating the prediction is not robust. The performance of 16-sketch is in between these two extremes, or specifically, its accuracy is reasonably high \(average error around 15 much less fluctuation than 8-sketch 32-sketch 16-sketch 8-sketch relative error 0 5 10 15 20 25 30 35 0.05 0.1 0.15 0.2 0.25 query rectangle length relative error 0 5 10 15 20 25 30 35 1 5 10 15 20 query interval length a qtlen=10, count b qrlen=0.15, count relative error query rectangle length 0 5 10 15 20 25 0.05 0.1 0.15 0.2 0.25 relative error query interval length 0 5 10 15 20 25 30 1 5 10 15 20 c qtlen=10, sum d qrlen=0.15, sum Figure 5.3: Accuracy of the approximate results The same phenomena are confirmed in Figures 5.3b where we fix qrlen to 0.15 and vary qtlen 5.3d \(results for sum-workloads number of sketches improves the estimation accuracy, it also leads to higher space requirements \(as shown in Figure 5.1 Figures 5.4a and 5.4b show the number of disk accesses for the settings of Figures 5.3a and 5.3b. All indexes have almost the same behavior, while the 32-sketch is clearly more expensive than the other two indexes. The interesting observation is that 8- and 16-sketches have 


interesting observation is that 8- and 16-sketches have almost the same overhead due to the similar heights of their B-trees. Since the diagrams for sum-workloads illustrate \(almost avoid redundancy 32-sketch 16-sketch 8-sketch number of disk accesses query rectangle length 0 50 100 150 200 250 300 350 400 0.05 0.1 0.15 0.2 0.25 number of disk accesses query interval length 0 50 100 150 200 250 300 350 1 5 10 15 20 a qtlen=10 b qrlen=0.15 Figure 5.4: Costs of indexes with various signatures Summary: The sketch index constitutes an effective method for approximate spatio-temporal \(distinct aggregate processing. Particularly, the best tradeoff between space, query time, and estimation accuracy obtained by 16 sketches, which leads to size around 40 the database, fast response time \(an order of magnitude faster than the relational method average relative error 5.2 Approximating spatio-temporal data We proceed to study the efficiency of using sketches to approximate spatio-temporal data \(proposed in Section 4.1 as in the last section, except that at each timestamp all airplanes report their locations to a central server \(instead of their respective nearest bases maintains a table in the form &lt;time t, plane p, x, y&gt;, where x,y with parameters qrlen and qtlen distinct planes satisfying the spatial and temporal conditions. For comparison, we index the table using a 3D R*-tree on the columns time, x, and y. Given a query, this tree facilitates the retrieval of all qualifying tuples, after which a post-processing step is performed to obtain the Proceedings of the 20th International Conference on Data Engineering \(ICDE  04 1063-6382/04 $ 20.00  2004 IEEE number of distinct planes \(in the sequel, we refer to this method as 3DR method introduces a regular res  res grid of the data space, where the resolution res is a parameter. We adopt 16 sketches because, as mentioned earlier, this number gives the best overall performance Figure 5.5 compares the sizes of the resulting sketch indexes \(obtained with resolutions res=25, 50, 100 the database size. In all cases, we achieve high compression rate \(e.g., the rate is 25% for res=25 evaluate the query efficiency, we first set the resolution to the median value 50, and use the sketch index to answer workloads with various qrlen \(qtlen=10 


workloads with various qrlen \(qtlen=10 size \(mega bytes database size 0 20 40 60 80 100 120 140 160 25 50 100 resolution Figure 5.5: Size reduction Figure 5.6a shows the query costs \(together with the error in each case method. The sketch index is faster than 3DR by an order of magnitude \(note that the vertical axis is in logarithmic scale around 15% error observations using workloads with different qtlen Finally, we examine the effect of resolution res using a workload with qrlen=0.15 and qtlen=10. As shown in Figure 5.6c, larger res incurs higher query overhead, but improves the estimation accuracy Summary: The proposed sketch method can be used to efficiently approximate spatio-temporal data for aggregate processing. It consumes significantly smaller space, and answers a query almost in real-time with low error 3D Rsketch number of disk accesses query rectangle length 1 10 100 1k 10k 0.05 0.1 0.15 0.2 0.25 16 14% 15 15% 13 relative error number of disk accesses query interval length 1 10 100 1k 10k 1 5 10 15 20 16 15% 15% 12% 11 relative error a qtlen=10, res=25 b qrlen=0.15, res=25 0 500 1000 1500 2000 2500 25 50 100 number of disk accesses resolution 20% 15% 14 relative error c qrlen=0.15, qtlen=10 


c qrlen=0.15, qtlen=10 Figure 5.6: Query efficiency \(costs and error 5.3 Mining association rules To evaluate the proposed algorithm for mining spatiotemporal association rules, we first artificially formulate 1000 association rules in the form \(r1,T,90 with 90% confidence i randomly picked from 10k ones, \(ii in at most one rule, and \(iii Then, at each of the following 100 timestamps, we assign 100k objects to the 10k regions following these rules. We execute our algorithms \(using 16 sketches these rules, and measure \(i  correct  rules divided by the total number of discovered rules, and \(ii successfully mined Figures 5.7a and 5.7b illustrate the precision and recall as a function of T respectively. Our algorithm has good precision \(close to 90 majority of the rules discovered are correct. The recall however, is relatively low for short T, but gradually increases \(90% for T=25 evaluated in the previous sections, the estimation error decreases as the query result becomes larger \(i.e., the case for higher T 78 80 82 84 86 88 90 92 94 96 5 10 2015 25 precision HT 78 80 82 84 86 88 90 92 94 96 5 10 2015 25 recall HT a b Figure 5.7: Efficiency of the mining algorithm Summary: The preliminary results justify the usefulness of our mining algorithm, whose efficiency improves as T increases Proceedings of the 20th International Conference on Data Engineering \(ICDE  04 1063-6382/04 $ 20.00  2004 IEEE 6. Conclusions While efficient aggregation is the objective of most spatio-temporal applications in practice, the existing solutions either incur prohibitive space consumption and query time, or are not able to return useful aggregate results due to the distinct counting problem. In this paper we propose the sketch index that integrates traditional approximate counting techniques with spatio-temporal indexes. Sketch indexes use a highly optimized query algorithm resulting in both smaller database size and faster query time. Our experiments show that while a sketch index consumes only a fraction of the space required for a conventional database, it can process 


required for a conventional database, it can process queries an order of magnitude faster with average relative error less than 15 While we chose to use FM sketches, our methodology can leverage any sketches allowing union operations Comparing the efficiency of different sketches constitutes a direction for future work, as well as further investigation of more sophisticated algorithms for mining association rules. For example, heuristics similar to those used for searching sketch indexes may be applied to improve the brute-force implementation ACKNOWLEDGEMENTS Yufei Tao and Dimitris Papadias were supported by grant HKUST 6197/02E from Hong Kong RGC. George Kollios, Jeffrey Considine and were Feifei Li supported by NSF CAREER IIS-0133825 and NSF IIS-0308213 grants References BKSS90] Beckmann, N., Kriegel, H., Schneider, R Seeger, B. The R*-tree: An Efficient and Robust Access Method for Points and Rectangles. SIGMOD, 1990 CDD+01] Chaudhuri, S., Das, G., Datar, M., Motwani R., Narasayya, V. Overcoming Limitations of Sampling for Aggregation Queries. ICDE 2001 CLKB04] Jeffrey Considine, Feifei Li, George Kollios John Byers. Approximate aggregation techniques for sensor databases. ICDE, 2004 CR94] Chen, C., Roussopoulos, N. Adaptive Selectivity Estimation Using Query Feedback. SIGMOD, 1994 FM85] Flajolet, P., Martin, G. Probabilistic Counting Algorithms for Data Base Applications JCSS, 32\(2 G84] Guttman, A. R-Trees: A Dynamic Index Structure for Spatial Searching. SIGMOD 1984 GAA03] Govindarajan, S., Agarwal, P., Arge, L. CRBTree: An Efficient Indexing Scheme for Range Aggregate Queries. ICDT, 2003 GGR03] Ganguly, S., Garofalakis, M., Rastogi, R Processing Set Expressions Over Continuous Update Streams. SIGMOD, 2003 HHW97] Hellerstein, J., Haas, P., Wang, H. Online Aggregation. SIGMOD, 1997 JL99] Jurgens, M., Lenz, H. PISA: Performance Models for Index Structures with and without Aggregated Data. SSDBM, 1999 LM01] Lazaridis, I., Mehrotra, S. Progressive Approximate Aggregate Queries with a Multi-Resolution Tree Structure. SIGMOD 2001 PGF02] Palmer, C., Gibbons, P., Faloutsos, C. ANF A Fast and Scalable Tool for Data Mining in Massive Graphs. SIGKDD, 2002 PKZT01] Papadias,  D., Kalnis, P.,  Zhang, J., Tao, Y Efficient OLAP Operations in Spatial Data Warehouses. SSTD, 2001 PTKZ02] Papadias, D., Tao, Y., Kalnis, P., Zhang, J Indexing Spatio-Temporal Data Warehouses ICDE, 2002 SJLL00] Saltenis, S., Jensen, C., Leutenegger, S Lopez, M.A. Indexing the Positions of Continuously Moving Objects. SIGMOD 2000 SRF87] Sellis, T., Roussopoulos, N., Faloutsos, C The R+-tree: A Dynamic Index for MultiDimensional Objects. VLDB, 1987 TGIK02] Thaper, N., Guha, S., Indyk, P., Koudas, N Dynamic Multidimensional Histograms 


SIGMOD, 2002 Tiger] www.census.gov/geo/www/tiger TPS03] Tao, Y., Papadias, D., Sun, J. The TPR*Tree: An Optimized Spatio-Temporal Access Method for Predictive Queries. VLDB, 2003 TPZ02] Tao, Y., Papadias, D., Zhang, J. Aggregate Processing of Planar Points. EDBT, 2002 TSP03] Tao, Y., Sun, J., Papadias, D. Analysis of Predictive Spatio-Temporal Queries. TODS 28\(4 ZMT+01] Zhang, D., Markowetz, A., Tsotras, V Gunopulos, D., Seeger, B. Efficient Computation of Temporal Aggregates with Range Predicates. PODS, 2001 ZTG02] Zhang, D., Tsotras, V., Gunopulos, D Efficient Aggregation over Objects with Extent PODS, 2002 Proceedings of the 20th International Conference on Data Engineering \(ICDE  04 1063-6382/04 $ 20.00  2004 IEEE pre></body></html 


