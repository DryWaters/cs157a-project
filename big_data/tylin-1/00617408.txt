Query Optimization to Support Data Mining Sunil Choenni Arno Siebes Informatics Division Database Research Group National Aerospace Laboratory P.O Box 90502 1006 BM Amsterdam Centre for Mathematics  Comp Science P.O Box 94079 1090 GB Amsterdam Abstract In order to extract knowledge from databases data mining algorithms heavzly query the databases Inejji cient processing of these queries will inevitably have its impact on the performance of these algorithms mak ing them less valuable In this paper we describe an optimization framework for 
an eficient processing of queries generated by different data mining algorithms We show how to take advantage ofthe physzcal orga nization of the database the operators and the control structures used in an algorithm Finally we discuss how our framework fits into conventional query opti mization frameworks 1 Introduction Research and development in data mining evolves in several directions such as association rules time series and classification The direction of association rules is focussed on the development of algorithms to find frequently occurring patterns in a database see among others 
a 8 91 In time series databases one tries to find all common patterns embedded in a database of sequences of events 3 The classification of tuples in a number of groups on the basis of com mon characteristics and the derivation of rules from a group is another direction in data mining l 4 6 71 Our interest lies in the last field We are develop ing a system to classify tuples in groups and to de rive rules from these groups ll The architecture of our system is according to Figure 1 
A data mining system equipped with several algorithms generates queries and passes them to the database system The database system derives the answers of the queries and passes them to data mining system In Figure 1 the data mining system has as task to come up with strate gies that limit the number of queries and the database system has as task to process received queries effi ciently The advantages of such an architecture in the field of association rules have been discussed in 8 and in the field of classification in ll However although search strategies attempt to 
minimize the number of queries passed to a database system in order to ex tract knowledge they still generate a large number of queries Consequently the architecture of Figure 1 is only viable if the data mining system receives the an swers of queries within an acceptable amount of time This paper is devoted to the optimization of queries generated by different search strategies which may I 1 Database Syslem Figure 1 An integrated mining and database systems present in a data mining system We show that queries generated at later steps in a search 
process are de pendent of queries generated at earlier steps As in 6 71 queries are regarded as conjunctions of predi cates over a number of attributes We assume that the number of tuples satisfying to queries are required for the search process and not the tuples self We note that for many data mining a1 orithms this as sumption holds see among others 74 2 7 91 We exploit these properties and present a framework for query optimization that seamlessly fits in traditional frameworks We note that since aggregate predicates are significant for 
data mining queries many research is devoted to this type of predicates Our research complements the research on optimization of aggre gate predicates Results from the this field can be included in our framework For the time being we have elaborated the frame work for variants of three search strategies namely hill climber simulated annealing and genetic algorithms The optimization techniques in our framework ex ploit the following aspects physical organization of the database the operators used in an algorithm and the control structures of an algorithm We note that although some of the above mentioned aspects have been exploited 
for query pro cessing in several data mining algorithms they nei ther have been wrapped up in a general Optimization framework nor their roles have been systematically analysed in the context of these algorithms The op timization framework can be used by each data min ing algorithm that satisfies to above-mentioned prop erties What distinguish our framework from conven tional frameworks for query optimization is that con ventional ones do not benefit from the dependency between queries Conventional frameworks optimize a query in isolation of other queries[lO 0-8186-8147-0/97 10.00 0 1997 IEEE 658 


The remainder of this paper is organized as follows In Section 2 we outline some preliminaries In Sec tion 3 we present a number of search strategies and the queries generated by them in order to discover knowledge In Section 4 we discuss how to optimize the queries generated by these strategies by storing and re-using intermediate results Section 5 shows how the optimizing techniques of the previous section can be incorporated in existing frameworks for query optimization Finally Section 6 concludes the paper 2 Preliminaries  assumptions A database consists of a universal relation The relation is defined over some attributes such as attl at  atk and is a subset of the Cartesian product dom\(att1 x dom\(alt2 x  x dom\(att in which dom\(at?j is the set of values that can be as sumed by attribute at A tuple is an ordered list of attribute values to which a unique identifier tid is associated The content of the database remains the same during the mining process An expression is used to derive a relation and is defined as a conjunction of predicates over some at tributes The length of an expression is the num ber of attributes involved in the expression Ex pressions with length 1 are called elementary expres sions An example of an expression of length 2 is  age E 19,24 A gender  221male\222  representing the males who are older than 18 and younger than 25 An expression esub is a subexpression of e if each elementary expression of esub is contained in e and length\(e  length\(e,,b We d ea1 with search spaces that contain expres sions An expression e\221 is an extension of e if e is a subexpression of e\222 and length\(e\222  length\(e  1 An expression e\222 is a called a reduction of e if e\222 is a subexpression of e and length\(e  length\(e\222  1 An expression e\222 is called a neighbour of e if e\222 is a extension of e or e\221 is a reduction of e A generalization enlarges the range of an elemen tary expression while a specialization reduces this range Examples of a generalization and specializa tion of  age E 19,24  are  age E 19,30  and  age E 19,2O  respectively Finally we assume that the WHERE clause of a query consists of an expression and that the output is the number of tuples satisfying this expression This type of queries is significant for many data mining algorithms see among others l 2 4 6 7 8 91 3 Search strategies To be successful search strategies impose a certain structure on a search space For example a search strategy that is focussed on finding a local optimum in a search space that almost consists of local optima will not be very useful Unfortunately the search spaces that stem from data mining problems neither have a specific structure nor the structure is known in advance On the basis of evidence one should choose for a search strategy Therefore a mining tool should be equipped with sev eral search strategies In this section we discuss vari ants of a number of search strategies and we study the expected generation pattern of queries by each strat egy The search strategies are equipped with one or more operators that can be applied on expressions in the corresponding algorithm We start the discussion with a variant of a hill climber and continue with a variant of simulated annealing and genetic algorithm Hill Climber The variant of the hill climber discussed in this section is equipped with the operator eztenszon which takes as input an expression and computes an extension of it The hill climber starts with an ini tial expression eo Then it computes all extensions of eo and their qualities and the extension with the best quality becomes the expression for further explo ration The whole procedure will be repeated again until no improvements are possible or some user de fined criteria are met Searching according to a hill climber guarantees a local optimum Variants of a hill climber can be found in B 71 0 Simulated annealing The variant of simulated an nealing is equipped with the operator nezghbour which takes as input an expression and computes an neigh bour of it In contrary to the hill climber this strategy can choose with a certain probability an element for further exploration that has a worse quality than the current element This provides the possibility to es cape from a local optimum As time progresses this probability gradually decreases until it becomes zero which is the terminating criteria 0 Genetic algorithm A genetic algorithm selects an initial population Individuals in the population are represented as strings of bits Then it computes the quality of all individuals On the basis of the quality, a selection of individuals is made Some of the selected individuals undergo a minor modification called mu tation For some pairs of selected individuals a ran dom point is selected and the substrings behind this random point are exchanged called cross-over The selected individuals form a new generation and the same procedure is repeated until no significantly bet ter population can be found For minin purposes a genetic algorithm has been tailored in 4f 0 From the above described strategies we observe that expressions that will be evaluated in a next step de pends on the present step and not on former steps This is a well-known property of a Markov process 5 This indicates that stored results of the present step may be used for the next step For example the tu ples that satisfy an extension of an expression e will be always a subset of e Searching for tuples that satisfy an extension of e in the set of tuples satisfying e will be in general cheaper than searching for those tuples in the database since the database will contain more tuples What intermediate results to store and how to reuse them is the topic of the next section 4 Optimization Query optimization is often performed in two phases a so-called logical and physical optimization phase lo In the logical optimization phase it is determined in which order the involved basic oper ations in a query should be processed In the second 659 


phase it is determined how the basic operations can be efficiently performed This depends on the way the data is stored and is described in a physical schema If an inefficient physical schema is chosen for a database this has its impact on query optimization In Section 4.1 we discuss an efficient way to store a relation for data mining In the two-phased optimization process it is as sumed that queries are independent of each other i.e no profit is taken from the arrival pattern of queries As a consequence no reuse of information is made We study how reusability can be exploited to support query optimization To what extent we may benefit from reusing intermediate results for query optimiza tion depends on the operators used in a search strategy and the algorithm In Section 4.2 we discuss the role of the operators and in Section 4.3 we discuss the role of the algorithms 4.1 Physical schema A relation will be stored as a binary storage model In a binary storage model there exists a separate ta ble for each attribute and each row in a table is a pair attribute value tid-list The advantage of storing a relation as a number of binary tables is that queries requiring the number of tuples satisfying to an expres sion can be efficiently processed To determine the number of tuples satisfying an elementary expression att  v we access the binary relation correspond ing to att with entry  and count the number of tids in the tid-list To determine the number of tuples satisfying a non-elementary expression in which m attributes are involved we access each of the m corre sponding binary relations with the relevant entry, and save the tid-lists Then we intersect these tid lists and count the resulted tids In this way activities as searching and retrieving of tuples are avoided In commercial database management systems the binary storage model can be simulated by allocating an index to each attribute and sorting it on attribute value An index can be regarded as a table in which each row is a pair attribute value tid list We note that in data mining application there is no mainte nance cost of indices since queries are the only rele vant type of database operation 4.2 Operators We discuss what information should be stored in order to optimize the basic operators extension re duction generalization, specialization and cross-over We note that a neighbour can be regarded as either an extension or reduction and a mutation as either a generalization or specialization In the following a list L contains the tuples identifiers tids satisfying the expression el extension and reduction Let us consider an exten sion e ofexpression  e{AeiAeiA  Aei  with an expression  e  By keeping track of of L1,2,3  n-l in which 5~,2,3,..~-1  L n Li n Lf n  n Li-l the number of tuples satisfying to the extension e can be computed by L1,2:3 n  L1,2,3  n-lr and count ing the elements in L1,2,3  n In contrary to the extension operator reuse of in termediate results is not straightforward in case of the reduction operator Consider the reduction e  el A e2 A e3 A  A ej-1 A ej+l A  A e  of the ex pression e  el A e2 Ae3 A  A ej A  A e  Then the list of tids satisfying e can not be used in com puting e since the tuples satisfying e is not longer a subset of the tuples satisfying e However if tids of tuples satisfying proper subexpression are stored e.g  el A e2 A e3 A  A ej-1  they can be used in computing the tuples satisfying a reduction Subex pressions with length n  1 have the highest priority to be stored since a reduction reduces an expression with length one generalization and specialization Let us consider an expression el  atti E uk up To determine the number of tuples satisfying to a generalization of e we apply the following procedure We determine the values that is added in the range Vk wp For each value we access the corresponding entry in the bi nary relation corresponding to atti Then we take the union of the tid-lists of these entries and L The re sulting number of tids due to this action is the number of tuples that satisfies to the generalized expression To determine the number of tuples satisfying to a specialization of el we apply a similar procedure We determine the values that is discarded in the range Vk up For each value we access the corresponding entry in the binary relation corresponding to atti Fi nally we take the difference of the tid-lists of these entries and Lj The resulting number of tids due to this action is the number of tuples that satisfies to the specialized expression Cross-over A crossover operation takes as input 2 expressions it selects a random point and the subex pressions behind this point are exchanged For ex ample a crossover on two expression e  e A e A e A  A A e A eitl A  A e  and e  e Ae Aei A Aei A Aei  at point k results into two new expressions namely el  el A e A eJ A  A A e A ei+l A _ A ej  and e  e~Aej2Aej3A Aei-lAe~Aei+lA...Aei  No optimization guidelines can be given for this op erator because a cross-over operator randomly jumps from one state to another state in the search space 4.3 Algorithms In Section 3 we have observed that the discussed search strategies choose from a current expression an other expression for further exploration They differ in the way the choice of the expression for further ex ploration is made We consider the following three cases In the first case a hill climber and a simulated annealing algorithm are equipped with the extension operator and in the second case both types of algo rithms are equipped with the neighbour operator In the third case a genetic algorithm equipped with a mutation and cross-over operation is considered 660 


level 1 level 2 level 3 level m A Figure 2 Search process of a hill climber Case la hill climber In Figure 2 we have depicted the search process of a hill climber The different ele mentary expressions in which uti is involved are dis tinguished by a superscript So the expression e rep resents the j-th expression in which att is involved We assume that the generation of elementary expres sions has been done in a separate process Techniques to generate these expressions can be found in 9 The hill climber starts with the evaluation of all elemen tary expressions e and chooses the expression with the highest quality Then, it computes the extensions of the chosen expression choose the extension with the highest quality and the whole process is repeated again So the expressions that are considered in this process are conjunctions of operations along a path Since each non elementary expression considered in this search process at a level i is an extension of a certain expression e at level i  1 we can use the opti mization techniques for the extension operator as de scribed in Section 4.2 It should be clear that if we store for each elemen tary expression the tids of tuples that satisfy the ex pression and the tids of the tuples satisfying the ex pression whose extensions will be further explored the main activity in processing queries is reduced to the intersection of 2 tid lists In order to store the list of tids that satisfies the expression that will be further explored one should know this expression Because this expression is not known at proper time this may lead to the storage of many lists of tids For example while computing the extensions of the expression  e A e  in Figure 2 we do not know which of the extensions will be chosen for further exploration Since we know that the hill climber will choose one of the extensions we may decide to store for each expression at level 3 the list of tids satisfying the expression In general as long as we do not know which exten sion of an expression e at level i  1 will be chosen for further exploration, one can decide to store all exten sions of e We note that the extensions of e are the expressions at level i This means that if the number of branches at level i are b we need extra storage space for b lists of tids We note that the maximal number of branches is generated at level 1 Since we do not have to store tid lists satisfying elementary ex pressions the maximal number of tid lists that should be stored is generated at level 2 We note that in general the longer the length of an expression will be the shorter the list of tids will be that satisfy the expression This means that the longest lists will be also generated at level 2 Furthermore once we know which expression is chosen for further exploration at level i the list of tids concerning this level can be discarded Another alternative is not to store any of the lists of tids computed at level i until we know which ex pression will be further explored This information is released at the moment when the hill climber requires the evaluation of expressions at level i  1 At that moment it will ask to compute queries with regard to the extensions of the selected expression at level i Since we have not stored any tid lists of tuples at level i this means we have to compute the tid list of tuples that satisfies to the selected expression at level i again Consider the expression  ef A e  at level 2 in Figure 2 Suppose that for the first time a query has an expression of length 4 in its WHERE clause Let us assume that this expression is  e A e A e A et  Then the selected expression at level 3 is  ea A e A e;1  Since we have not stored any of the tid lists at level 3 we compute the following intersection again L2,3 1  L2,3n Lyl in which L2,3  Li n Li and store the list LZ In this case extra storage space is only required for one list of tids namely those tids that satisfy the expression whose extensions will be further explored On the other hand this strategy requires one extra intersection between 2 tid lists at each level of the search process Whenever the intersection of tid lists appears to be cheaper than temporary storing all the generated lists of tids at each level the intersec tion of tid lists is preferred Otherwise the storage of tid lists is preferred 0 Case lb simulated annealing This algorithm ran domly chooses an expression selects an extension of this expression and decides immediately whether this extension will be chosen for further exploration or not If an extension is selected this procedure is repeated In Figure 3 a search process of a simulated anneal ing is depicted Since a simulated annealing algorithm immediately determines whether an expression will be chosen or not it is sufficient to store only one list of tids namely the tid list of tuples satisfying the expres sion whose extensions are currently explored 0 Case 2 In this case we assume that a hill climber and a simulated annealing algorithm are equipped with the neighbour operation As has been shown the tid list of tuples satisfying an extension of an expression e can be computed by using the tid list of tuples Satisfying e In case of a reduction of e the tid list of tuples satisfying e can not be used in computing the tid list of tuples satisfying the reduction We note that a neighbour operator in combination with a hill climber algorithm offers the possibility to 66 1 


  Figure 3 Search process of simulated annealing leave an earlier chosen path and to explore a new one Suppose that the application of the reduction operator to  eh A e AeTl  yields the expression  e A e:\221  Then in Figure 2 this concerns a path that starts at e at level 1 In a simulated annealing algorithm as well as in a hill climber algorithm it is possible that an ear lier visited expression will be visited again or one of its extension will be visited By storing lists of tids of expressions that are computed earlier in the search process the number of lists of tids that should be intersected further on in the search process may be reduced Consider the following expression e  el Ae2 Ae3A  AejA  Ae  and suppose that the re duction e\221  elAeaAe3A  Aej_lAej+lA  Ae  is selected for further exploration If e\222 was visited ear lier and the corresponding tids satisfying e\222 has been stored this can be reused in processing queries with e\222 in their WHERE clause If for example not e\222 but e\224  el A e2 A e3 A  A ej-1  was visited ear lier then the list of tids satisfying e\224 can be used in computing the tid list satisfying e\222 Le namely It should be clear the more of the computed tid lists during the search process are stored the better the chances are that the number of lists that should be intersected can be reduced However since the avail able amount of storage space will be limited, it will be not possible to store all computed tid lists during the search process A possible heuristic is to delete lists of tids of tuples that satisfy expressions that are not a subexpression of the expression that will be further explored The rationale behind this heuristic is that if neighbours of an expression e become shorter the tid lists of tuples that satisfy subexpressions of e can be used in computing queries having these neighbour ex pressions in their WHERE clause If neighbours of e become longer the tid lists of tuples that satisfy e can be used in computing queries having these neighbour expressions in their WHERE clause Another heuristic to discard tid lists if the avail able storage space is limited is based on the length of tid lists Tid lists with relatively few number of tids or a large number of tids in comparison with the cardinality of the database can be discarded The ra tionale behind this heuristic is based on the fact that the quality of an expression is based on the number of tuples satisfying the expression An expression to which only a few tuples satisfy will be in general not interesting and therefore it will have a low quality The same holds for expressions that yield almost the whole database 17 L  L n L n  n L Case 3 A genetic algorithm starts with an initial population, i.e a number of expressions in our termi nology It evaluates all expressions of the population and selects some of the expressions on which the mu tation or the crossover operation is applied yielding a new population For each expression in a new gen eration holds the expression is the same as in the previous generation or the expression is modified due to a crossover or a mutation It should be clear to store the list of tids satisfying to expressions of the present generation A number of these expressions will remain the same in the next gen eration So we can reuse these tid lists in processing queries that have expressions in their WHERE clause which remain the same in two consecutive generation The optimization techniques discussed in Section 4.2 with regard to generalization and specialization can be applied whenever expressions undergo a muta tion To speed up queries which regard to expressions that are due to a cross-over no general guidelines can be given One can store tid lists that satisfy to subex pressions of an expression that appear in a present generation Then these tid lists may be used in the same way as in Case 2 To control the storage space the guideliness of Case 2 can be used 0 We have analysed the role of a physical schema the operators and the algorithms in the optimization of queries generated by different search strategies We have suggested to store a relation according to the bi nary storage model or to allocate a sorted index to each attribute We have argued that the processing of queries may be accelerated by storing proper lists of tids The amount of extra storage space required to store tid lists depends on the algorithm and operators used, e.g., hardly extra storage space is required for a simulated annealing algorithm that is equipped with an extension operator In the case of a limited amount of storage space we have introduced two heuristics to control the storage space In the next section we discuss a framework of an optimization module in which above mentioned tech niques are embedded 5 Framework We present a framework of an optimization module for query optimization to support data mining Fur thermore we show how the framework can be related to current database management systems The optimization module is depicted in Figure 4 The module receives as input a set of queries and the search strategy that generates the queries A dis patcher passes the queries to an optimizing submodule depending on the search strategy The optimizing sub module generates a piece of intermediate code for each query q This module checks whether stored lists of tids can be used in computing the results of q and de termines which parts of the results should be stored Furthermore, it also invokes heuristics to discard lists of tids whenever there is a shortage of storage space The intermediate code is passed to a translator that translates the code in a language that is understood by the underlying database management system dbms 662 


Translator  _  222Eir tab Figure 4 Diagram of the optimization framework and the query is passed to the dbms The query op timizer of the dbms generate an efficient query execu tion plan The result produced by the dbms is passed to the optimizing module which passes it on its turn to the search strategy Let us illustrate the working of the optimization module by means of an example Consider the ear lier mentioned insurance database in Section 2 The database is stored according the binary storage model and consists of among others the binary relations age gender and accadent Suppose that a simu lated annealing search strategy passes the queries count the tuples satisfying the expression el  age\200 19,24 A gender  221female\222 and count the tu ples satisfying the expression e2  age\200 19,24 A gender  221female\222 A accadent  221true\222  Then the dispatcher passes these queries to the submodule sim ulated annealing This submodule checks whether it can accelerate the processing of these queries by ear lier stored intermediate results md generates a piece of code Since no results are stored yet the submodule simulated annealing generates the following interme diate code for the first query 1 L1  age.seZect\(l9,24 2 L2  gender.select 221male 222 3 Le  zntersect L1 Lz 4 pass\(count\(L I  5 store\(L ince the list Le has been stored and it can be used in processing the second query the submodule simulated annealing generates the following code 6 L3  acczdent.seleci 221true\222 7 Le  antersect L3 Lei 8 pass\(count\(L   9 store\(L II We note that the statements l a and 6 can be done in parallel Once L3 has been computed state ments 4 and 8 can be done in parallel too Depending on the underlying database manage ment system the translator translates the inter mediate code in a language that is understood by the database management system e.g SQL queries 11 These queries are offered to the dbins which selects an efficient execution plan for them In this way we com bine the optimizing techniques used by an optimizer and techniques based on reuse of information 6 Conclusions  further research Many data mining problems can be characterized as the search for specific expressions among an enor mous number of expressions making an exhaustive search infeasible The evaluation of each expression leads to a number of queries to the database to be mined Although cfficicnt search strategies attempt to minimize the number of queries to be evaluated still many queries have to be evaluated to find the specified expression\(s Inefficient evaluation of these queries will have its impact on the performance of a whole data mining system, making such a system less valuable Since queries generated in a future step in a search process are dependent of queries generated at the present step exploiting the dependencies between queries in a data mining session promises a consid erable speed-up of the discovery process In this pa per we have argued how such a speed-up can be achieved for the cost of some extra storage for five cases Generalizing from these cases we propose an optimization framework in which the 223browsing opti mization\224 seamlessly fits in the traditional query op timizing strategy A topic for the near future is the implementation of the framework and the connection of the module to commercial database systems as well as to experimen tal database management systems Refer en ces l Agrawal R Ghosh S hielinski T Iyer B Swami A An Interval Classifier for Database Mining Applications Proc of the 18th VLDB Conf 1992 pp 560-573 2 Agrawal R Srikant R Fast Algorithms for Mining As sociation Rules Proc onf 1994 pp 487-499 3 Agrawal R Sri Sequential Patterns Proc 11th Int Conf on Data Engineering 1995 pp 3-14 4 Augier S Venturini G Kodratoff Y Learning First Order Logic Rules with a Genetic Algorithm Proc 1st Int Cod on Knowledge Discovery and Data Mining pp 21-26 Grimmet G.R Stirzaker D.R Probability and Random Processes Oxford Science Publications Oxford University 5 Press New York USA 161 Han J Cai Y Cerone N Knowledge Discovery in 1  Databases An Attribute-Oriented Approach Proc of the onf., 1992 pp 547-559 r M Kersten M.L Architectural Support for Proc Adbi-94 Workshop on Knowledge Dis covery pp 217-228 Houtsma M Swami A., Set-Oriented Mining for Associ ation Rules in Relational Databases, Proc 11th Int Cod on Data Engineering 1995 pp 25-33 Srikant R Agrawal, R., Mining Quantitative Association Rules in Large Relational Tables Proc AGM SIGMOD 22296 Int Conf on Management of Data IO Ullman J Principles of Database and Knowledge-Base Svstems V01.2 The New Technologies. ComDuter Science 8 9  Pkss New York USA 1989 1111 Wrobel S Wettschereck D Verkamo I Siebes A  Mannila H Kwakkel F Kloesgen W User Interactivity in Very Large Scale Data Mining to appear 663 


 r 004 \005\\006 r\003\020 004\005\005\006 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 r#\002\016\004\r 005 b\033\004 004\032\r\r\022 002\006 005\003\021 032\002\003\033 005 002 020\(\003\b\022 004\033\003\002\033\r\013\020 005\003 r!'#\b\r\006\033 004\r\013\021\r\006\033\002\033\b\005\006\024 2\036\(\036 021\006 030\025\030\030$\006 f\031\n r\016\n\f\b\f\022\013\n\f\r\t\004 006\013$\f\t\007 033\f\n\021 n\021\006 k 2 r\017 025\005\033\r 033 \002\033 b\006 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033 \r\003\r b\004 006\005 006\r\r\022 033\005 005\021\032\016\033\r 002\006\020 subop  002\031\016\r\024 023 \b\004 b\004  033 \r\003\r b\004 006\005 k 2 002#\033\005\003 b\006 033 \r 005\021\032\031\r,\b\033\020 005 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021\024 D\016\033 b\006 033 \r 005\033 \r\003 033\\005 002\031\013\005\003\b\033 \021\004 r#\002\016\004\r 004\r\031\r#\033\b\005\006 005 004\r\013\021\r\006\033\004 b\004 002\004\r\022\r\006\033\b\003\r\031\020\005\006\033 \r subop  002\031\016\r\004 k 2 r#\005\021\r\004 002 022\005\021\b\t 006\002\006\033 002#\033\005\003 b\006 033 \r\b\003 005\021\032\031\r,\b\033\020\024 023\005 r\031\b\021\b\006\002\033\r 033 \r k 2 002#\033\005\003 005\006\r r\016\003\b\004\033\b b\004 033\005 006\022 002 005\006\004\033\002\006\033 006\016\021\(\r\003 005 b\033\r\021\004 b 002\003\r 005\006 033 \r 016\(\(\031\r=\024 023 \r\004\r 002\003\r 033 \r b\033\r\021\004 005\004\r 003\r"\016\r\006#\b\r\004 002\003\r\031\020 004\002\033\b\004!\020 002\006\022 002\003\r 033 \r 031\005\004\r\004\033 033\005 033 \r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\024 023 \r\006 b\006 033 \r subop  002\031#\016\031\002\033\b\005\006  003\r\004\033\003\b#\033 033 \r 004\016\021\021\002\033\b\005\006 b\006 r"\016\002\033\b\005\006 035.\037 005\006\031\020 005%\r\003 002\031\031 032\002\b\003\004 005 b\033\r\021\004 b\006 033 \r 016\(\(\031\r 031\b\004\033=\024 023 \b\004 b\004 003\r\002\004\005\006\002\(\031\r r#\002\016\004\r 033 \r 031\033\r\003\b\006\013 005!!\r\003\r\022 020 033 \r 036\n\n\030 b\004 r,\032\r#\033\r\022 033\005 r 033 \r 021\005\004\033 002\032\032\031\b#\002\(\031\r 033\005 033 \005\004\r b\033\r\021\004 005\004\r 003\r"\016\r\006#\b\r\004 002\003\r 031\005\004\r\004\033 033\005 033 \r 033 \003\r\004 \005\031\022\024 005\003 r,\002\021\t 032\031\r 033 \r\003\r 021\002\020 r k  1000 b\033\r\021\004 b\006 002\031\031 016\033 033 \r 016\(\(\031\r 031\b\004\033 021\002\020 005\006\033\002\b\006 005\006\031\020 w  100 b\033\r\021\004\024 8\006 033 \b\004 002\004\r 005\003 003\024\032\002 005\021\032\016\033\002\033\b\005\006 005 subop   033 \r 006\016\021\(\r\003 005 032\002\b\003\004 005\006\004\b\022\r\003\r\022 b\006 033 \r 004\016\021\021\002\033\b\005\006 003\r\022\016#\r\004 003\005\021  k 2   499 500 033\005  w 2 950 024 025\005\033\r 033 \002\033 033 \r 005\006\033\r\006\033 005 033 \r 016\(\(\031\r 031\b\004\033 022\r\032\r\006\022\004 005\006 002 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\024 023 \b\004 016\(\(\031\r 031\b\004\033 033 \r\006 033\016\003\006\004 033 \r 005#\016\004 005 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 004"\016\002\003\r\031\020 005\006 033 \r b\033\r\021\004 b\006 033 \r 031\b\004\033\024 D\016\033 b\033 b\004 b\021\032\005\003\033\002\006\033 033\005 003\r\021\r\021\(\r\003 033 \002\033  004\r\013\021\r\006\033\002\033\b\005\006 b\033 033 \r 016\(\(\031\r 031\b\004\033 003\r"\016\b\003\r\004 004\005\021\r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 033 \r 036\n\n\030 032\003\005\t 022\016#\r\022 002\006 r 016\004\r\022 005\003 024\005\013 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\024 8\006 033 \r 006\r,\033 004\r#\t 033\b\005\006   r%\002\031\016\002\033\r 033 \r r!!\r#\033\b%\r\006\r\004\004 005 002\006 036\n\n\030 033 \002\033 002\004 032\003\005\022\016#\r\022 b\033 002 016\(\(\031\r 031\b\004\033 002\004\r\022 005\006 005\006\r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 016\033 b\004 016\004\r\022 022\020\006\002\021\b#\002\031\031\020 033\005 002\006\022\031\r 022\b!!\r\003\r\006\033 004\016\032\032\005\003\033 033 \003\r\004 \t 005\031\022\004\024 2\036,\036 4\026\030\017\f\034 031\006\007\b\006\t\n\013\n\f\r\t 031\n\017\013\n\006\007\f\006\031\004 006\013$\f\t\007 033\f\n\021 n\021\006 p 2 r\017 b\033 033 \r 016\(\(\031\r 031\b\004\033 r\016\003\b\004\033\b 033 \r k 2 002#\033\005\003 022\b\004\002\032\032\r\002\003\004 003\005\021 033 \r 005\021\032\031\r,\b\033\020 005 033 \r 9\003\r\r\022\020 002\006\022 017\001 002\031\013\005\003\b\033 \021\004\024 002\033 002\(\005\016\033 033 \r p 2 002#\033\005\003G 004 002 r\016\003\b\004\033\b 033\005 005\032\r  004\b\033\016\002\033\b\005\006\004  p b\004 031\002\003\013\r  005!!\r\003 020\(\003\b\022 004\r\013\021\r\006\033\002\033\b\005\006 004\033\003\002\033\r\013\b\r\004\024 E,\002\021\032\031\r\004 b\006#\031\016\022\r 013\t\034\r\b!&\027 002\006\022 013\t\034\r\b 1\017\006\006\034\026 024 023 \002\033 b\004 005\003 002 031\002\003\013\r b\006\b\033\b\002\031 002\031\016\r p b\006\033 \r'\003\004\033 032 \002\004\r r 016\004\r 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033\005 021\r\003\013\r 033 \r p 032\002\013\r\004 033\005 p mid 004\r\013\021\r\006\033\004 035 p mid m user 037\024 023 \r\006 b\006 033 \r 006\002\031 032 \002\004\r 033 \r 017\001 005\003 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 033\005 021\r\003\013\r 033 \r p mid 004\r\013\021\r\006\033\004 b\006\033\005 033 \r m user 004\r\013\021\r\006\033\004\024 8\006 033 \r 006\r,\033 004\r#\033\b\005\006   r%\002\031\016\002\033\r  033 \r\004\r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 005\003\027 002\033 002\031\031\024 5\036 016\006\017\f\b\006\t\n\013 006 \013$\025\013\n\f\r\t 8\006 033 \b\004 004\r#\033\b\005\006 r 032\003\005%\b\022\r r,\033\r\006\004\b%\r r,\032\r\003\b\021\r\006\033\002\031 r%\002\031\016\t 002\033\b\005\006 005 002\031\031 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\006\022 r\016\003\b\004\033\b#\004 032\003\005\t 032\005\004\r\022 002\(\005%\r\024 n\032\r#\b'#\002\031\031\020 r 032\003\005%\b\022\r r\021\032\b\003\b#\002\031 r%\002\031\016\002\t 033\b\005\006 005\006 3\024 033 \r 004\032\r\r\022\016\032 002\006 036\n\n\030 032\003\005%\b\022\r\004 002\033 016\r\003\020 r,\r#\016\033\b\005\006 005\003 r,\032\031\005\003\002\033\b\005\006 033\b\021\rB 002\006\022 024 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 005 032\003\005\022\016#\b\006\013 033 \r 036\n\n\030 b\033 005\003 b\033 \005\016\033 033 \r 016\(\(\031\r 031\b\004\033 002\006\022 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004\024 r 005\006#\031\016\022\r 033 \b\004 004\r#\033\b\005\006 b\033 002 003\r#\005\021\021\r\006\022\r\022 003\r#\b\032\r 005\003 022\b!!\r\003\r\006\033 b\003#\016\021\004\033\002\006#\r\004\024 5\036\035\036 016\006\017\f\b\006\t\n\013 031\006\n\025\016 023 \r 004\r\013\021\r\006\033 021\b\006\b\021\b\034\002\033\b\005\006 002\006\022 033 \r 005\006\004\033\003\002\b\006\r\022 004\r\013\021\r\006\t 033\002\033\b\005\006 032\003\005\(\031\r\021\004 002\032\032\031\020 033\005 033 \r 021\002\006\020 002\031\013\005\003\b\033 \021\004 033 \002\033 005\006\t 022\016#\033 021\b\006\b\006\013 005 002\003\b\005\016\004 027\b\006\022\004 005 032\002\033\033\r\003\006\004 002\004\r\022 005\006 002\006\022\b\022\002\033\r 013\r\006\r\003\002\033\b\005\006 035\004\r\r n\r#\033\b\005\006 3\037\024 023 \r 003\r\004\016\031\033\004 003\r\032\005\003\033\r\022 r\003\r 002\003\r 002\004\r\022 005\006 002 004\032\r#\b b\006\004\033\002\006#\r 005 033 \r\004\r 002\031\013\005\003\b\033 \021\004 C 006\002\021\r\031\020 033 \r 031\002\004\004\b#\002\031 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 005\003 002\004\004\005#\b\002\033\b\005\006 003\016\031\r 021\b\006\b\006\013\024 025\005\006\r\033 \r\031\r\004\004 033 \r 032\003\r\004\r\006\033\r\022 b\022\r\002\004 002\006\022 002\031\013\005\003\b\033 \021\004 002\032\032\031\020 033\005 005\033 \r\003 b\006\004\033\002\006#\r\004 002\004  031\031 033 \r r,\032\r\003\b\021\r\006\033\004 r\003\r 032\r\003!\005\003\021\r\022 005\006 002 033\b\021\r\t\004 \002\003\b\006\013 r\006%\b\003\005\006\021\r\006\033 005\006 002 2 030\026\034 021\002# \b\006\r\024 031\031 033 \r 032\003\005\013\003\002\021\004 r b\033\033\r\006 b\006 001\024 023 \r\003\r 002\003\r 033\\005 027\b\006\022\004 005 r,\r#\016\033\b\005\006 033\b\021\r\024 023 \r 003\004\033 b\004 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r  b\006#\031\016\022\r\004 002\031\031 001?H 002\006\022 8;\036 005\004\033\004 b\006#\016\003\003\r\022 005\003 004\r\013\021\r\006\033\002\033\b\005\006\024 023 \r 004\r#\005\006\022 b\004 033 \r 003\016\006\033\b\021\r 005 032\003\b\005\003\b  005\003 016\033 033 \r 036\n\n\030 b b\006\t 031\016\022\r\004 002\031\031 001?H 002\006\022 8;\036 005\004\033\004 033\005 006\022 002\031\031 033 \r 003\r"\016\r\006\033 004\r\033\004\024 023 \r 003\r\032\005\003\033\r\022 013\016\003\r\004 002\003\r 002\004\r\022 005\006 033 \r 002%\r\003\002\013\r 005 021\016\031\033\b\032\031\r 033 \003\r\r\022\002\033\002\004\r\033\004\\r\016\004\r\022 3\024 6\r'\f\013\034\013\n\013\031\006\n  b b\004 002 003\r\002\031 022\002\033\002 004\r\033 003\005\021 025\005\027\b\002 005\006 002 004\r"\016\r\006#\r 031\r 005\006\033\002\b\006\b\006\013 002\(\005\016\033 7 033\003\002\006\004\002#\033\b\005\006\004 005 002\(\005\016\033  022\b\004\033\b\006#\033 033\020\032\r\004 005 033\r\031\r#\005\021\021\016\006\b#\002\033\b\005\006\004 006\r\033\\005\003\027 002\031\002\003\021\004\024 005\003 032\003\005\032\003\b\r\033\002\003\020 003\r\002\004\005\006\004 r 002\006\006\005\033 022\r\004#\003\b\(\r 033 \b\004 022\002\033\002 004\r\033 016\003\033 \r\003\024 024 020 034\013\n\013 031\006\n  b b\004 002 004\020\006\033 \r\033\b 022\002\033\002 004\r\033 013\r\006\r\003\002\033\r\022 016\004\b\006\013 033 \r 032\003\005\013\003\002\021 022\r%\r\031\005\032\r\022 002\033 8D\030 031\t 021\002\022\r\006 017\r\004\r\002\003# \001\r\006\033\r\003 0\024 023 \r r,\002#\033 006\016\021\(\r\003 005 033\003\002\006\004\t 002#\033\b\005\006\004 b\004 006\005\033 b\021\032\005\003\033\002\006\033 r#\002\016\004\r 033 \r 027\r\020 032\002\003\002\021\r\033\r\003 b\004 033 \r 006\016\021\(\r\003 005 032\002\013\r\004 p 024 8\006 005\016\003 r,\032\r\003\b\021\r\006\033\002\033\b\005\006 p 002\003\b\r\004 003\005\021  033\005 7  002\006\022 033 \r 006\016\021\(\r\003 005 b\033\r\021\004 b\004 k 1000 024 024 031'\006\033\006\034!\031\026\t\n\021\006\n\f\020 034\013\n\013 031\006\n  b b\004 002 004\020\006\033 \r\033\b 022\002\033\002 004\r\033 033 \002\033 002\004 004\027\r\\r\022 004\r\002\004\005\006\002\031 r \002%\b\005\003\024 n\032\r#\b'#\002\031\031\020 7@I 005 033 \r b\033\r\021\004 002%\r 002 b\013 \r\003 032\003\005\(\002\(\b\031\b\033\020 005 002\032\032\r\002\003\b\006\013 b\006 033 \r 003\004\033 002\031 005 033 \r 005\031\031\r#\033\b\005\006 005 033\003\002\006\004\002#\033\b\005\006\004 002\006\022 033 \r 005\033 \r\003 7@I 002%\r 002 b\013 \r\003 032\003\005\(\002\(\b\031\b\033\020 005 002\032\032\r\002\003\b\006\013 b\006 033 \r 004\r#\005\006\022 002\031!\024 023 \r 003\r\002\004\005\006 005\003 016\004\b\006\013 033 \b\004 022\002\033\002 004\r\033 b\004 033 \002\033 b\006 033 \r 003\r\002\031 005\003\031\022 033 \r\003\r 002\003\r 021\002\006\020 022\002\033\002\(\002\004\r\004 033 \002\033 022\005 006\005\033 005\031\031\005 002 003\r\013\016\031\002\003 005\003 016\006\b!\005\003\021 022\b\004\033\003\b\(\016\033\b\005\006 035\r\024\013\024 002 004\016\032\r\003\t 021\002\003\027\r\033 022\002\033\002\(\002\004\r 005\006\004\b\004\033\b\006\013 005 033\003\002\006\004\002#\033\b\005\006\004 005%\r\003 002 r 021\005\006\033 \004 003\005\021 004\016\021\021\r\003 033\005 b\006\033\r\003\037\024 5\036%\036 025\t\n\f\b\006 031\016\006\006\034\025\016 023 \r 003\004\033 004\r\033 005 r,\032\r\003\b\021\r\006\033\004 r%\002\031\016\002\033\r\004  033 \r 036\n\n\030 032\003\005%\b\022\r\004 004\b\013\006\b'#\002\006\033 004\032\r\r\022\016\032\024 023 \r 004\032\r\r\022\016\032 005\003 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021 X b\004 022\r'\006\r\022 033\005 r 033 \r 003\002\033\b\005 005 033 \r r,\r#\016\033\b\005\006 033\b\021\r 005 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 b\033 \005\016\033 033 \r 036\n\n\030 033\005 033 \002\033  033 \r 036\n\n\030 032\003\005\022\016#\r\022 020 002\031\013\005\003\b\033 \021 X 035 X b\004 033 \r 017\002\006\t 022\005\021 017\001 005\003 9\003\r\r\022\020 002\031\013\005\003\b\033 \021\037\024 023 \b\004 013\b%\r\004 033 \r 020\t\002,\b\004 005 033 \r 013\003\002\032 b\006 b\013\016\003\r 5\035\002\037\024 023 \r t\002,\b\004 004 \005\\004 033 \r 006\016\021\(\r\003 005 004\r\013\021\r\006\033\004 m user 002\031\031\005 b\006 033 \r 036\n\n\030\024 n\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\004\b\022\r 033 \r 003\004\033 005\(\004\r\003%\002\033\b\005\006 003\005\021 b\013\016\003\r 5\035\002\037 b\004 033 \002\033 033 \r 036\n\n\030 b\004 002 016\004\r!\016\031 004\033\003\016#\033\016\003\r\024 8\033 b\004 031\b\013 \033\t\ \033\024 005\003 m user  100 004\r\013\021\r\006\033\004 002\006\022 005\003 3 b\033\r\021\004 033 \r 036\n\n\030 005\006\004\016\021\r\004 005\006\031\020 002\(\005\016\033 024 r\013\002\(\020\033\r\004\024 D\016\033 b\033 002\006 003\b\006\013 002\(\005\016\033 002 004\032\r\r\022\016\032 003\005\021 002\003\005\016\006\022 2 033\b\021\r\004 033\005 002\(\005\016\033  033\b\021\r\004\024 006\022 005\003 m user J 37 004\r\013\021\r\006\033\004 035\033 \016\004 005\006\t 004\016\021\b\006\013 024 021\r\013\002\(\020\033\r\004\037 033 \r 004\032\r\r\022\016\032 002\006 r 002\(\005\016\033 7 033\b\021\r\004\024 023 \r 004\r#\005\006\022 005\(\004\r\003%\002\033\b\005\006 b\004 033 \002\033 002\004 r,\032\r#\033\r\022 033 \r 031\002\003\013\r\003 033 \r Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


  001 002\001 003\001 004\001 005\001 006\001 003\001 005\001 007\001 b\001 002\001\001 002\003\001 002\005\001 002\007\001 t\n\013\013\f\r\n\016\017\013\020\021\022\023\024\013\016\022\025\016\026\\n\017\023\025\017\023\016\027\023\022\030\025\r\022\016\022\030\013\016\\t\t\031 032\r\033\034\013\017\016\025\035\016\036\013\037\033\013 \022\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021 017\013\013\f     021 \f\025\033  021 013\020\021\022\023\024\013 036\n\013\013\f\r\n   001 001*\002 001*\003 001*\004 001*\005 001*\006 001*\007 001 003\001 005\001 007\001 b\001 002\001\001 002\003\001 002\005\001 002\007\001 032\r\033\034\013\017\016\025\035\016$\021 \f\023\f\021\022\013\016\003\,\023\022\013\033\036\013\022\036\016\017\013\020\021\022\023\024\013\016\\022\025\016\026\n\017\023\025\017\023\016\027\023\022\030\025\r\022\016\\022\030\013\016\t\t\031 032\r\033\034\013\017\016\025\035\016\036\013\037\033\013 \022\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021  021 \f\025\033     017\013\013\f 034 017\021$\022\023\025 025\035 021 \f\023\f\021\022\013 003,\023\022\013\033\036\013\022\036 025\022 n\017\r \013\f 001\002\003\004\005\006 036\b 037\017\017\006 \f\002!\006\013\006\016\016 r\017 f\020\006 016\006\003\021\006\013\f\022\f\002\r\013 022\025\003\r\005\002\f\020\021\016 002\031\016\r 005 m user  033 \r b\013 \r\003 b\004 033 \r 004\032\r\r\022\016\032\024 8\006\033\r\003\r\004\033\b\006\013\031\020 r%\r\006 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 002\006 005!!\r\003 002 004\032\r\r\022\016\032 033 \002\033 b\004 r\033\t 033\r\003 033 \002\006 002\006 005\003\022\r\003 005 021\002\013\006\b\033\016\022\r\024 8\006 033\r\003\021\004 005 033 \r 004\032\r\r\022\016\032 033 \r 003\002\006\027 b\006 022\r\004#\r\006\022\b\006\013 005\003\022\r\003 b\004 002\031\\002\020\004 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021 033 \r 017\001 002\031\013\005\003\b\033 \021 002\006\022 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021\024 023 \r 013\002\032\004 r\t 033 033 \r\021 005\032\r\006 016\032 013\003\002\022\016\002\031\031\020 002\004 m user r#\005\021\r\004 031\002\003\013\r\003\024 023 \r 004\032\r\r\022\016\032 002\006 r 022\b\003\r#\033\031\020 031\b\006\027\r\022 033\005 033 \r 006\016\021\(\r\003 005 002\006\t 022\b\022\002\033\r\004 033 \002\033 003\r"\016\b\003\r 003\r"\016\r\006#\020 005\016\006\033\b\006\013 b\024\r\024 002\006\022\b\022\002\033\r\004 033 \002\033 002\003\r 006\005\033 032\003\016\006\r\022 002\004\r\022 005\006 r"\016\002\033\b\005\006 0353\037\024 b\013\016\003\r 5\035\(\037 005\021\t 032\002\003\r\004 033 \r 006\016\021\(\r\003 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 r"\016\b\003\r\022 b\033 005\003 016\033 033 \r 036\n\n\030\024 013\002\b\006 033 \r 003\002\033\b\005 b\004 004 \005\\006 005\006 r 020\t 002,\b\004 033 \r 003\002\033\b\005 3 r\b\006\013 033 \r 002\004\r b\033 \005\016\033 033 \r 036\n\n\030\024 001\031\r\002\003\031\020 033 \r 036\n\n\030 032\003\005%\b\022\r\004 004\b\013\006\b'#\002\006\033 032\003\016\006\b\006\013\024 005\003 r,\002\021\032\031\r b\033 m user 150  002\006\022 033 \r 036\n\n\030 032\003\005\022\016#\r\022 020 033 \r 9\003\r\r\022\020 002\031\t 013\005\003\b\033 \021 005\006\031\020 002\(\005\016\033 I 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 r#\027\r\022 020 032\003\b\005\003\b 005\003\022\b\006\002\003\b\031\020 002\003\r 006\005\033 032\003\016\006\r\022 020 033 \r b\006!\005\003\021\002\033\b\005\006 027\r\032\033 b\006 033 \r 036\n\n\030\024 b\013\016\003\r 5\035\(\037 005\006\031\020 004 \005\\004 033 \r 003\r\022\016#\033\b\005\006 005\003 002\006\t 022\b\022\002\033\r t\b\033\r\021\004\r\033\004\024 023 \r 036\n\n\030 002\032\032\031\b\r\004 033\005 002\006\022\b\022\002\033\r 004\r\033\004 005 b\013 \r\003 002\003\022\b\006\002\031\b\033\b\r\004\024 9\b%\r\006 005\016\003 004\020\006\033 \r\033\b 022\002\033\002 004\r\033\004 033 \r 003\r\t 022\016#\033\b\005\006 005\003 b\013 \r\003 002\003\022\b\006\002\031\b\033\b\r\004 b\004 021\b\006\b\021\002\031\024 D\016\033 033 \b\004 b\004 006\005\033 002\004 006\r\013\002\033\b%\r 002\004 b\033 021\002\020 004\r\r\021 r#\002\016\004\r b\033 b\004  027\006\005 033 \002\033 033 \r 021\002\b\006 005\033\033\031\r\006\r#\027 005 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 b\004 005\006 b\033\004 032\003\005#\r\004\004\t b\006\013 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 370B 033 \b\004 b\004 032\003\r#\b\004\r\031\020 033 \r 002\003\r\002  036\n\n\030 r,#\r\031\004\024 023 \r 003\r\004\016\031\033\004 003\r\032\005\003\033\r\022 b\006 b\013\016\003\r 5 002\003\r 002\004\r\022 005\006 033 \r 003\r\013\016\031\002\003\t 004\020\006\033 \r\033\b 022\002\033\002 004\r\033 002\006\022 002 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 005 3I\024 8\006 002\022\022\b\t 033\b\005\006 r 002%\r r,\032\r\003\b\021\r\006\033\r\022 b\033 005\033 \r\003 022\002\033\002 004\r\033\004 021\r\006\033\b\005\006\r\022 016\003\r 004\033\003\002\033\r\013\020 n\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r n\032\r\r\022\016\032 017\002\006\022\005\021 0  02 006 0  00 004 2  6 006 0  1 017\001 2791 006 7 004 5  5 006 0  4 9\003\r\r\022\020 5439 006 6 004 5  9 006 0  3 021 r\017\013 036\022\017\021\022\013\037\023\013\036 027\023\022\030 p  006\001\001 026\020\(\003\b\022 004\033\003\002\033\r\013\020 n\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r n\032\r\r\022\016\032 017\002\006\022\005\021\t\017\001 521 006 2 004 4  3 006 0  0 017\002\006\022\005\021\t9\003\r\r\022\020 1051 006 1 004 5  2 006 0  1 034 0#\034\017\023\f 036\022\017\021\022\013\037\023\013\036 027\023\022\030 p  001 001\001\0011 p mid  003\001\001 001\002\003\004\005\006 b 006\003\021\006\013\f\022\f\002\r\013 r\016\f\016 004\005\006 022\013\032 020\023 024\005\002\032 016\f\005\022\f\006\003\002\006\016 002\f\020 m user 036 002\(\005%\r 002\006\022 002\003\b\005\016\004 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022\004\024 031\r\002\004\r r!\r\003 033\005 005\016\003 033\r# \006\b#\002\031 003\r\032\005\003\033 3.0 005\003 021\005\003\r 022\r\033\002\b\031\004\024 5\036\(\036 002\006\007\b\006\t\n\013\n\f\r\t 020\r\031\n 8\006 031\b\013 \033 005 033 \r 004\b\013\006\b'#\002\006\033 004\032\r\r\022\016\032 005!!\r\003\r\022 020 002\006 036\n\n\030 033 \r 006\002\033\016\003\002\031 016\r\004\033\b\005\006 033\005 002\004\027 b\004  033 \b\004 004\032\r\r\022\016\032 b\004 002# \b\r%\r\022 020 002 b\013 005\021\032\b\031\r\t\033\b\021\r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033\024 023 \r 027\r\020 032\002\003\002\021\r\033\r\003\004 r\003\r 002\003\r p 002\006\022 m user 024 b\031\r r r,\032\r\003\b\t 021\r\006\033\r\022 b\033 \021\002\006\020 005\021\(\b\006\002\033\b\005\006\004 r 005\006\031\020 003\r\032\005\003\033 004\005\021\r 005 033 \r\021 r\031\005 022\016\r 033\005 002 031\002#\027 005 004\032\002#\r\024 005\003 r,\002\021\032\031\r b\013\016\003\r 7\035\002\037 003\r\032\005\003\033\004 033 \r 003\r\004\016\031\033\004 005\003 p 500 002\006\022 m user 40 024 00\006\020\n\f \006\t\006\031\031 r0 n\021\006 016\025\017\006 031\006\007\b\006\t\n\013\n\f\r\t 031\n\017\013\n\006\007\f\006\031\004 004 r,\t 032\r#\033\r\022 005\033 033 \r 017\001 002\006\022 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021\004 033\002\027\r 002 031\005\006\013 033\b\021\r 033\005 032\003\005\022\016#\r 033 \r 036\n\n\030\024 D\016\033 b\004 b\033 033\005\005 031\005\006\013G 8\004 033 \r 002\022\t 022\b\033\b\005\006\002\031 005\006\r\t\033\b\021\r 005\004\033 005 75/6 004\r#\005\006\022\004 005\003\033 \ \b\031\r 033\005 b\006\t 003\r\002\004\r 033 \r 004\032\r\r\022\016\032 003\005\021 0241 033\005 7\0246 005\003 003\024\032\002 021\b\006\b\006\013 016\r\003\020G 023 \r 002\006\004\\r\003 033\005 033 \b\004 016\r\004\033\b\005\006 b\004 004\016\(*\r#\033\b%\r 022\r\032\r\006\022\b\006\013 005\006 033 \r 003\r\031\002\033\b%\r b\021\032\005\003\033\002\006#\r 005 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 033\005 022\020\006\002\021\b 016\r\003\020 r,\r#\016\033\b\005\006 005\004\033 005\003 033 \r 004\032\r#\b 002\032\032\031\b#\002\033\b\005\006\024 8\033 002\031\004\005 022\r\032\r\006\022\004 005\006 033 \r 002\021\005\016\006\033 005 004\032\002#\r 033 \r 036\n\n\030 002\006 005##\016\032\020 b\024\r\024 033 \r 002\031\016\r 005 m user 024 8\006 013\016\003\r\004 r 022\r\031\b\(\r\003\002\033\r\031\020 033\002\027\r 002 004\021\002\031\031\r\003 002\031\016\r m user 40 033\005 002\031\031\005 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 032\003\005#\r\004\004 033\005 033\002\027\r 031\005\006\013\r\003\024 8 033 \r 002\032\032\031\b#\002\033\b\005\006 002\006 002!!\005\003\022 002 031\002\003\013\r\003 002\031\016\r 005 m user  033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 034\b\f.\t  033 \r 004\032\r\r\022\016\032 006\005\032\b\003\024\t\003\t 024 8\006 033 \b\004 002\004\r 033 \r 005\b#\r r#\005\021\r\004 021\005\003\r 005\(%\b\005\016\004 C 006\002\021\r\031\020 b\033 032\002\020\004 005 033\005 016\004\r 002 021\005\003\r r\031\002\(\005\003\002\033\r 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021 033\005 032\003\005\022\016#\r 002 b\013 \r\003\t"\016\002\031\b\033\020 036\n\n\030\024 00\006\020\n\f \006\t\006\031\031 r0 n\021\006 021\026\030\017\f\034 031\006\007\b\006\t\n\013\n\f\r\t 031\n\017\013\n\006\007\f\006\031\004 9\b%\r\006 033 \r 006\016\021\(\r\003\004 b\006 b\013\016\003\r 7\035\002\037 002 006\002\033\016\003\002\031 016\r\004\033\b\005\006 033\005 002\004\027 b\004 005  033 \r 021\005\003\r r\031\002\(\005\003\002\033\r 002\031\013\005\003\b\033 \021\004 004#\002\031\r 016\032 b\033 003\r\t 004\032\r#\033 033\005 p 024 8 b\033 033\002\027\r\004 75/6 004\r#\005\006\022\004 005\003 033 \r 9\003\r\r\022\020 002\031\013\005\t 003\b\033 \021 005\003 p  500 032\002\013\r\004 005 031\005\006\013 022\005\r\004 b\033 033\002\027\r 005\003 p  50 000 032\002\013\r\004G 035$\005\003 002 032\002\013\r 004\b\034\r 005 5 027\b\031\005\(\020\033\r\004 r\002# \032\002\013\r 002\006 005\006\033\002\b\006 003\005\016\013 \031\020 3 033\003\002\006\004\002#\033\b\005\006\004\024 023 \016\004 7  032\002\013\r\004 005\003\003\r\004\032\005\006\022 033\005 7 021\b\031\031\b\005\006 033\003\002\006\004\002#\033\b\005\006\004\024\037 023 \b\004 b\004 002\006 b\021\032\005\003\033\002\006\033 016\r\004\033\b\005\006 r#\002\016\004\r 022\002\033\002 021\b\006\b\006\013 002\032\032\031\b#\002\033\b\005\006\004 002\003\r 004\016\032\032\005\004\r\022 033\005 002%\r 002 016\013\r 006\016\021\(\r\003 005 033\003\002\006\004\002#\033\b\005\006\004 035\002\006\022 032\002\013\r\004\037\024 005\003\033\016\006\002\033\r\031\020 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 005\021\r\004 033\005 033 \r 003\r\004#\016\r\024 017\r#\002\031\031 003\005\021 b\013\016\003\r 7\035\002\037 033 \002\033 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033\002\027\r\004 002 006\r\013\031\b\013\b\(\031\r 002\021\005\016\006\033 005 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r 016\033 004\033\b\031\031 022\r\031\b%\r\003\004 003\r\002\004\005\006\002\(\031\r 004\032\r\r\022\016\032\024 023 \b\004 005\032\r\006\004 033 \r 032\005\004\004\b\(\b\031\b\033\020 005 020\(\003\b\022 004\r\013\021\r\006\033\002\033\b\005\006 004\033\003\002\033\r\013\b\r\004 005\003 031\002\003\013\r 002\031\016\r\004 005 p 024 b\013\016\003\r 7\035\(\037 004 \005\\004 033 \r 004\b\033\016\002\033\b\005\006 005\003 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 017\002\006\022\005\021\t\017\001 002\006\022 017\002\006\022\005\021\t9\003\r\r\022\020\024 030\005\003\r 004\032\r#\b'#\002\031\031\020 033 \r b\006\b\033\b\002\031 002\031\016\r 005 p b\004 7 024 023 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 033\005 016\b#\027\031\020 003\r\t 022\016#\r p 033\005 p mid 200 004\r\013\021\r\006\033\004\024 003\005\021 033 \002\033 032\005\b\006\033 005\006 r\b\033 \r\003 Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


  001*\002 002 002\001 002\001\001 002\001\001\001 001 002\001 003\001 004\001 005\001 006\001 007\001 t\013\037\033\013 \022\021\022\023\025 \016$\025\036\022\016\(\023 \016\\036\013$\025 \f\036 t\0232\013\016\025\035\016\034\r\034\034\020\013\016\020\023\036\022\016\\(\023 \016\n\013\017$\013 \022\021\037\013\016\025\035\016\f\025\033\021\\023 \016\023\022\013\033\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021  021 \f\025\033,&\017\013\013\f   021 \f\025\033  021 t\013\037\033\013 \022\021\022\023\025 022\023\033\013   004 004*\006 005 005*\006 006 001 002\001 003\001 004\001 005\001 006\001 007\001 t\n\013\013\f\r\n\016\017\013\020\021\022\023\024\013\016\022\025\016\026\\n\017\023\025\017\023\016\027\023\022\030\025\r\022\016\022\030\013\016\\t\t\031 t\0232\013\016\025\035\016\034\r\034\034\020\013\016\020\023\036\022\016\\(\023 \016\n\013\017$\013 \022\021\037\013\016\025\035\016\f\025\033\021\\023 \016\023\022\013\033\036 013\037\r\020\021\017!\016\t# \022\030\013\022\023$\016%\021\022\021  021 \f\025\033,&\017\013\013\f   021 \f\025\033  034 t\n\013\013\f\r\n 001\002\003\004\005\006 b 037\017\017\006 \f\002!\006\013\006\016\016 r\017 f\020\006 024\004\024\024\025\006 025\002\016\f r f\002\021\002,\022\f\002\r\013 033 \r 017\001 005\003 033 \r 9\003\r\r\022\020 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 033\005 004\r\031\r#\033 033 \r 006\002\031 m user 40 004\r\013\021\r\006\033\004\024 025\005\033\b#\r 033 \002\033 005\003 017\002\006\022\005\021\t\017\001 033 \r 033\005\033\002\031 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r 005\003 7  032\002\013\r\004 b\004 005\006\031\020 7.3 004\r#\005\006\022\004 002\004 004\016\032\032\005\004\r\022 033\005 263 004\r#\005\006\022\004 005\003 005\006\031\020 7 032\002\013\r\004 016\004\b\006\013 032\016\003\r\031\020 033 \r 017\001 002\031\t 013\005\003\b\033 \021\024 K\r\033 033 \r\003\r b\004 002 021\b\006\b\021\002\031 022\003\005\032 b\006 004\032\r\r\022\016\032\024 n\b\021\b\031\002\003 005\(\004\r\003%\002\033\b\005\006\004 002\006 r 005\(\033\002\b\006\r\022 005\003 017\002\006\022\005\021\t9\003\r\r\022\020\024 8\006 013\r\006\t r\003\002\031 013\b%\r\006 002 031\002\003\013\r b\006\b\033\b\002\031 p 002\031\016\r 002 013\005\005\022 004\033\003\002\033\r\013\020 b\004 033\005 016\004\r 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 033\005 r\022\016#\r p 033\005 002 021\016# \004\021\002\031\031\r\003 p mid 002\031\016\r 035\r\024\013\024 r\033\\r\r\006 3 033\005 7 032\002\013\r\004\037 002\006\022 033 \r\006 033\005 016\004\r 002\006 r\031\002\(\005\003\002\033\r 002\031\013\005\003\b\033 \021 033\005 005\021\032\031\r\033\r 033 \r 004\r\013\021\r\006\033\002\033\b\005\006\024 00\006\020\n\f \006\t\006\031\031 r0 n\021\006 030\025\030\030$\006 f\031\n r\016\n\f\b\f\022\013\n\f\r\t\004 032\002\003\033 003\005\021 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 r 002\031\004\005 032\003\005\032\005\004\r 033 \r 016\(\(\031\r 031\b\004\033 r\016\003\b\004\t 033\b b\033 033 \r 005\(*\r#\033\b%\r 005 005#\016\004\b\006\013 033 \r 005\021\032\016\033\002\033\b\005\006 033\005 033 \r subop  002\031\016\r 005\006\031\020 033\005 033 \005\004\r b\033\r\021\004 033 \002\033 002\003\r 005\006 033 \r 016\(\(\031\r 031\b\004\033\024 b\013\016\003\r 1 004 \005\\004 033 \r 004\b\033\016\002\033\b\005\006 r\006 033 \r 016\(\(\031\r 031\b\004\033 002\004 005\003\021\r\022 002\004\r\022 005\006 033 \r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 024.7I 002\006\022 020\r\033 022\016\003\t b\006\013 016\r\003\020 r%\002\031\016\002\033\b\005\006 033 \r 002#\033\016\002\031 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 b\004 3I\024 023 \r t\002,\b\004 004 \005\\004 033 \r 002\003\020\b\006\013 004\b\034\r 005 033 \r 016\(\(\031\r 031\b\004\033 r,\t 032\003\r\004\004\r\022 002\004 033 \r 032\r\003#\r\006\033\002\013\r 005 k  033 \r 033\005\033\002\031 006\016\021\(\r\003 005 b\033\r\021\004 b\006 033 \r 022\005\021\002\b\006\024 023 \r 027\r\020 005\(\004\r\003%\002\033\b\005\006 b\004 033 \002\033 033 \r 004\r\013\021\r\006\033\002\t 033\b\005\006 005\004\033 b\004 022\003\002\004\033\b#\002\031\031\020 003\r\022\016#\r\022\024 005\003 r,\002\021\032\031\r 033 \r 017\002\006\022\005\021\t 9\003\r\r\022\020 020\(\003\b\022 004\033\003\002\033\r\013\020 b\033 033 \r 016\(\(\031\r 031\b\004\033 002\006 032\003\005\022\016#\r 002\006 036\n\n\030 b\006 002\(\005\016\033 3 004\r#\005\006\022\004 005 033\005\033\002\031 033\b\021\r 005\003 7 021\b\031\031\b\005\006 033\003\002\006\004\t 002#\033\b\005\006\004 035\b\024\r\024 7  032\002\013\r\004\037 002\004 005\032\032\005\004\r\022 033\005 3@73 004\r#\005\006\022\004 005\003 033 \002\033 b\033 \005\016\033 033 \r 016\(\(\031\r 031\b\004\033 035#!\024 b\013\016\003\r 7\035\(\037\037\024  004\b\021\b\031\002\003 003\r\022\016#\033\b\005\006 002\032\032\031\b\r\004 033\005 033 \r 017\002\006\022\005\021\t\017\001 020\(\003\b\022 004\033\003\002\033\r\013\020\024 023 \b\004 H H H H H H H b b b b b b b H H H H H H H b b b b b b b H H H H H H H b b b b b b b 013\t\034\r\b 013\t\034\r\b!&\027 013\t\034\r\b!1\017\006\006\034\026 1\017\006\006\034\026 031\002\003\013\r m user 002\006\022 004\027\r\\r\022 005\033 \r\003\\r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 002\006 b\004\004\016\r 005\033 \r\003\\r r\003\020 031\002\003\013\r p 005\033 \r\003\\r 001\002\003\004\005\006 b 034\006 \r\021\021\006\013\032\006\032 005\006 \002+\006 004 \005\\004 033 \002\033 033 \r 016\(\(\031\r 031\b\004\033 r\016\003\b\004\033\b b\004 r\003\020 r!!\r#\033\b%\r b\006 003\r\t 022\016#\b\006\013 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033\024 b\013\016\003\r 1\035\(\037 004 \005\\004 033 \002\033 r%\r\006 033 \005\016\013 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 033\b\021\r b\004 004\b\013\006\b'#\002\006\033\031\020 003\r\022\016#\r\022 033 \r 016\002\031\b\033\020 005 033 \r 036\n\n\030 032\003\005\t 022\016#\r\022 020 033 \r 020\(\003\b\022 004\033\003\002\033\r\013\b\r\004 b\004 006\005\033 005\021\032\003\005\021\b\004\r\022 004\b\013\006\b!\t b#\002\006\033\031\020\024 016\003\033 \r\003\021\005\003\r r%\r\006 033 \005\016\013 033 \r 004\016\032\032\005\003\033 033 \003\r\004 \005\031\022 016\004\r\022 022\016\003\b\006\013 004\r\013\021\r\006\033\002\033\b\005\006 b\004 022\b!!\r\003\r\006\033 003\005\021 033 \r 005\006\r 016\004\r\022 002\033 016\r\003\020 r,\r#\016\033\b\005\006 033\b\021\r 033 \r 004\032\r\r\022\016\032 005!!\r\003\r\022 020 033 \r 036\n\n\030 b\004 004\033\b\031\031 004\b\013\006\b'#\002\006\033\024 004 r,\032\r#\033\r\022 033 \r 031\005\006\013\r\003 033 \r 016\(\(\031\r 031\b\004\033 033 \r b\013 \r\003 b\004 033 \r 016\002\031\b\033\020 005 033 \r 036\n\n\030 002\006\022 033 \016\004 033 \r 004\032\r\r\022\016\032\024 5\036,\036 002\025\b\b\013\017\026\004 005 017\006\020\r\b\b\006\t\034\006\034 017\006\020\f\016\006 8\006 004\016\021 r 002%\r 032\003\005%\b\022\r\022 r,\033\r\006\004\b%\r r,\032\r\003\b\021\r\006\033\002\031 003\r\004\016\031\033\004 r%\002\031\016\002\033\b\006\013 033 \r 002\003\b\005\016\004 032\003\005\032\005\004\r\022 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\006\022 r\016\003\b\004\033\b#\004\024 b\013\016\003\r 2 004 \005\\004 002 003\r#\b\032\r r 003\r#\005\021\021\r\006\022 005\003 022\r#\b\022\b\006\013 005\006 b 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021 033\005 016\004\r 005\003 002\003\b\005\016\004 027\b\006\022\004 005 002\032\032\031\b#\002\033\b\005\006\004\024 b\003\004\033 b 033 \r 002\032\032\031\b#\002\033\b\005\006 002\006 002!!\005\003\022 002 031\005\033 005 004\032\002#\r 005\003 033 \r 036\n\n\030 035\b\024\r\024 m user b\004 031\002\003\013\r\037 002\006\022 033 \r 022\002\033\002 b\004 004\027\r\\r\022 033 \r 017\002\006\022\005\021 002\031\013\005\003\b\033 \021 b b\004 033 \r 004\b\021\032\031\r\004\033 b\004 004\016!'#\b\r\006\033 005\003 004\r\013\021\r\006\033\002\033\b\005\006\024 036\033 \r\003 b 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 b\004 006\005\033 002\006 b\004\004\016\r 002\033 002\031\031 033 \r 9\003\r\r\022\020 002\031\t 013\005\003\b\033 \021 b\033 033 \r 016\(\(\031\r 031\b\004\033 b\004 033 \r 005\b#\r\024 026\005\\r%\r\003 b 033 \r 006\016\021\(\r\003 005 b\006\b\033\b\002\031 032\002\013\r\004 p b\004 031\002\003\013\r 033 \r\006  003\r#\005\021\021\r\006\022 r\b\033 \r\003 033 \r 017\002\006\022\005\021\t\017\001 005\003 033 \r 017\002\006\022\005\021\t9\003\r\r\022\020 002\031\013\005\003\b\033 \021 b\033 033 \r 016\(\(\031\r 031\b\004\033\024 7\036 f\031\020\025\031\031\f\r\t 8\006 032\003\r%\b\005\016\004 004\r#\033\b\005\006\004 r 002%\r 004 \005\\006 005 033 \r 036\n\n\030 r\031\032\004 033\005 b\021\032\003\005%\r 033 \r r!'#\b\r\006#\020 005 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 035\002\006 b\006\004\033\002\006#\r 005 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021\004\037\024 D\r\b\006\013 002 013\r\006\r\003\b 022\002\033\002 004\033\003\016#\033\016\003\r 033 \r 036\n\n\030 002\006 r r"\016\002\031\031\020 002\032\032\031\b#\002\(\031\r 033\005 033 \r 022\b\004#\005%\r\003\020 005 004\r"\016\r\006\033\b\002\031 032\002\033\033\r\003\006\004 r\032\b\004\005\022\r\004 005\006\004\033\003\002\b\006\r\022 003\r\t 016\r\006\033 004\r\033\004 r\033#\024 004 021\r\006\033\b\005\006\r\022 b\006 n\r#\033\b\005\006  033 \r 036\n\n\030 033\r# \t 006\b"\016\r b\004 003\002\033 \r\003 022\b!!\r\003\r\006\033 003\005\021 033 \r A\026 002\031\013\005\003\b\033 \021 370 002\006\022 033 \r 002\003\033\b\033\b\005\006 002\031\013\005\003\b\033 \021 320\024 D\016\033 002\006 005\(\004\r\003%\002\006\033 003\r\002\022\r\003 021\002\020 005\006\022\r\003 r\033 \r\003 033 \r 036\n\n\030 032\003\005%\b\022\r\004 r\033\033\r\003 032\003\016\006\b\006\013 033 \002\006 033 \r 033\\005 r,\b\004\033\b\006\013 002\031\013\005\003\b\033 \021\004\024 026\005\\r%\r\003 033 \b\004 b\004 033 \r 003\005\006\013 016\r\004\t 033\b\005\006 033\005 002\004\027 r#\002\016\004\r 033 \r 036\n\n\030 002\006 r 021\002\022\r 033\005 005\003\027 b\006 032\f\005 021\005\032\n\006\f\005  033 \r 033\\005 002\031\013\005\003\b\033 \021\004\024 017\r#\002\031\031 033 \002\033 033 \r A\026 002\031\013\005\003\b\033 \021 002\004 \r\004 002 k t\b\033\r\021\004\r\033 035\r\024\013\024 k 2 037 033\005 002 016#\027\r\033 b 021\002\020 r%\r\006\033\016\002\031\031\020 r 032\003\016\006\r\022 022\016\r 033\005 002\006 b\006\004\016!'#\b\r\006\033 006\016\021\(\r\003 005 b\033\r\021\004\r\033\004 r\b\006\013 002\004 \r\022 b\006\033\005 004\016 002 016#\027\r\033\024 026\005\\r%\r\003 b 002\006 036\n\n\030 b\004 016\004\r\022 004\b\021\016\031\033\002\006\r\005\016\004\031\020 033 \r\006 027\006\005\\006 b\006!\003\r"\016\r\006\033 k t\b\033\r\021\004\r\033\004 002\003\r 006\005\033 013\r\006\r\003\002\033\r\022 b\006 033 \r 003\004\033 032\031\002#\r\024 8\033\r\021\004\r\033\004 033 \002\033 032\002\004\004 033 \003\005\016\013 033 \r 032\003\016\006\b\006\013 020 033 \r 036\n\n\030 002\006 006\005 r 016\003\033 \r\003 032\003\016\006\r\022 020 033 \r A\026 002\031\013\005\003\b\033 \021\024  032\003\r\t 031\b\021\b\006\002\003\020 003\r\004\016\031\033 032\003\r\004\r\006\033\r\022 b\006 033 \r 005\031\031\005\\013 033\002\(\031\r 004 \005\\004 033 \r Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


002\022\022\b\033\b\005\006\002\031 r\006\r'\033 003\005\016\013 \033 020 002\006 036\n\n\030 035#\005\006\004\033\003\016#\033\r\022 016\004\b\006\013 033 \r 017\002\006\022\005\021\t\017\001 002\031\013\005\003\b\033 \021 b\033 m J 5 004\r\013\021\r\006\033\004\037 033\005 033 \r A\026 002\031\013\005\003\b\033 \021 b\033  214 016#\027\r\033\004\024 031\013\005\003\b\033 \021\004 017\016\006\033\b\021\r 025\005\024 005 C 2 A\026 b\033 \005\016\033 033 \r 036\n\n\030 4  01 006 0  13 004 6 A\026 b\033 \033 \r 036\n\n\030 1  96 006 0  01 004 35 026\r\003\r r\006 033 \r A\026 002\031\013\005\003\b\033 \021 b\004 016\004\r\022 b\006 005\006*\016\006#\033\b\005\006 b\033 033 \r 036\n\n\030 033 \r 006\016\021\(\r\003 005 002\006\022\b\022\002\033\r t\b\033\r\021\004\r\033\004 035 C 2 037 b\004 002\(\005\016\033 002\031 002\006\022 033 \r 004\032\r\r\022\016\032 b\004 002\(\005\016\033  033\b\021\r\004 035\ \r\006 005\021\032\002\003\r\022 033\005 033 \r A\026 002\031\013\005\003\b\033 \021 b\033 \005\016\033 033 \r 036\n\n\030\037\024 n\b\021\b\031\002\003\031\020 033 \r 036\n\n\030 002\006 003\b\006\013 002\022\022\b\033\b\005\006\002\031 r\006\r'\033\004 033\005 004\005\021\r 005\033 \r\003 002\031\013\005\003\b\033 \021\004\024 005\003 031\002#\027 005 004\032\002#\r  003\b\rL\020 022\b\004\t 016\004\004 r\031\005 005 033 \r 036\n\n\030 002\006 r 002\032\032\031\b#\002\(\031\r 033\005 033 \r 002\003\033\b\033\b\005\006 002\031\013\005\003\b\033 \021 320 002\006\022 033\005 033 \r A\r\032\033 ?\003\005*\r#\033 002\031\013\005\003\b\033 \021 30\024 005\003 033 \r 002\003\033\b\033\b\005\006 002\031\013\005\003\b\033 \021 b 002\006 036\n\n\030 b\004 016\b\031\033 005\003 r\002 032\002\003\033\b\033\b\005\006 033 \r r,\r#\016\033\b\005\006 033\b\021\r 005\003 r\002 032\002\003\033\b\033\b\005\006 b\031\031 r 004\b\013\t 006\b'#\002\006\033\031\020 003\r\022\016#\r\022 r#\002\016\004\r 027\006\005 031\005#\002\031 b\006!\003\r"\016\r\006\033 b\033\r\021\004\r\033\004 002\003\r 032\003\016\006\r\022 020 033 \r 036\n\n\030\024 023\005 b\021\032\003\005%\r 033 \r 032\r\003!\005\003\021\002\006#\r 016\003\t 033 \r\003 b 033 \r 036\n\n\030\004 005\003 002\031\031 033 \r 032\002\003\033\b\033\b\005\006\004 002\003\r 002%\002\b\031\002\(\031\r 033 \r\006 021\002\006\020 005 033 \r 013\031\005\(\002\031 002\006\022\b\022\002\033\r\004 035\b\024\r\024 b\033\r\021\004\r\033\004 033 \002\033 002\003\r 031\005#\002\031\031\020 003\r"\016\r\006\033 b\006 002 032\002\003\033\b\033\b\005\006\037 b 002\003\r 027\006\005 033\005 r 013\031\005\(\002\031\031\020 b\006\t 003\r"\016\r\006\033 b\033 \003\r\004\032\r#\033 033\005 033 \r 036\n\n\030\004 002\006 b\006 002#\033 r 032\003\016\006\r\022\024 017\r#\r\006\033\031\020 002 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021 002\031\031\r\022 A\r\032\033 \t 003\005*\r#\033 002\004 032\003\005\032\005\004\r\022 033\005 013\r\006\r\003\002\033\r 031\005\006\013 032\002\033\033\r\003\006\004 020 016\004\b\006\013 022\r\032\033 \t'\003\004\033 004\r\002\003 005\006 002 031\r,\b#\005\013\003\002\032 \b 033\003\r\r 005 b\033\r\021\004\r\033\004\024 030\005\003\r 032\003\r#\b\004\r\031\020 002\033 r\002 004\033\r\032 033 \r 002\031\013\005\003\b\033 \021 013\r\006\r\003\002\033\r\004 032\005\004\004\b\(\031\r 003\r\t 016\r\006\033 031\r,\b#\005\013\003\002\032 \b r,\033\r\006\004\b\005\006\004 035\b\024\r\024 002\006\022\b\022\002\033\r\004\037 005 002 033\003\r\r 006\005\022\r 002\006\022 033\r\004\033\004 005\003 003\r"\016\r\006#\020\024 8 002\006 036\n\n\030 b\004 016\004\r\022 004\b\021\016\031\t 033\002\006\r\005\016\004\031\020 033 \r\006 027\006\005\\006 b\006!\003\r"\016\r\006\033 002\006\022\b\022\002\033\r\004 002\006 r 032\003\016\006\r\022 r!\005\003\r 033 \r 003\r"\016\r\006#\020 005\016\006\033\b\006\013\024 8\036 027\r\t\020$\025\031\f\r\t\031 8\006 033 \b\004 032\002\032\r\003 r 032\003\005\032\005\004\r\022 002 031\b\013 \033\t\\r\b\013 \033 004\033\003\016#\033\016\003\r 002\031\031\r\022 005\032\033\b\021\b\034\r\022 004\r\013\021\r\006\033 004\016\032\032\005\003\033 021\002\032 035\036\n\n\030\037\024 8\006 002\022\022\b\033\b\005\006 033\005 b\021\t 032\003\005%\b\006\013 033 \r 032\003\016\006\b\006\013 b\006 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021\004 b\033 002\031\004\005 032\003\005%\b\022\r\004 022\b\003\r#\033 b\006!\005\003\021\002\033\b\005\006 002\(\005\016\033 033 \r 002\003\b\002\(\b\031\b\033\020 005 003\r"\016\r\006\t b\r\004 b\006 022\b!!\r\003\r\006\033 004\r\013\021\r\006\033\004 005 033 \r 033\003\002\006\004\002#\033\b\005\006\004\024 H\006\031\b\027\r 021\002\006\020 002\031\013\005\003\b\033 \021\004 b 002\006\006\005\033 002\006\022\031\r 004\027\r\\r\022 022\002\033\002 033 \r 004\033\003\r\006\013\033 005 033 \r 036\n\n\030 b\004 033\005 r,\032\031\005\b\033 033 \r 002\003\b\002\(\b\031\b\033\020\024 001\005\006#\r\003\006\b\006\013 033 \r 036\n\n\030 r 004\033\016\022\b\r\022 033\\005 021\002\b\006 032\003\005\(\031\r\021\004 035\b\037 033 \r 021\b\006\b\021\016\021 006\016\021\(\r\003 005 004\r\013\021\r\006\033\004 005\003 002\006 036\n\n\030 033\005 b\006#\016\003 006\005 031\005\004\004 b\006 002##\016\t 003\002#\020 035\033 \r 004\r\013\021\r\006\033 021\b\006\b\021\b\034\002\033\b\005\006 032\003\005\(\031\r\021\037 002\006\022 035\b\b\037 033 \r r\004\033 005\021\032\005\004\b\033\b\005\006 005 033 \r 004\r\013\021\r\006\033\004 013\b%\r\006 002 016\004\r\003\t\022\r\033\r\003\021\b\006\r\022 006\016\021\t r\003 005 004\r\013\021\r\006\033\004 035\033 \r 005\006\004\033\003\002\b\006\r\022 004\r\013\021\r\006\033\002\033\b\005\006 032\003\005\(\031\r\021\037\024 005\003 033 \r 003\004\033 032\003\005\(\031\r\021 r 032\003\005%\b\022\r\022 002 033 \005\003\005\016\013 002\006\002\031\020\004\b\004 002\006\022 002\003\022\006\r\004\004 003\r\004\016\031\033\004 004 \005\\b\006\013 033 \002\033 006\005 031\005\004\004 b\006 002##\016\003\002#\020 016\004\b\006\013 033 \r 036\n\n\030 003\r"\016\b\003\r\004 033\005\005 021\002\006\020 004\r\013\021\r\006\033\004 b\006 013\r\006\r\003\002\031\024 005\003 033 \r 004\r#\005\006\022 032\003\005\(\031\r\021 r 022\r%\r\031\005\032\r\022 033 \r r\016\003\b\004\033\b 004\r\013\021\r\006\033\002\033\b\005\006 002\031\013\005\003\b\033 \021\004 002\031\031\r\022 033 \r 017\002\006\022\005\021 017\001 002\006\022 9\003\r\r\022\020 002\031\013\005\003\b\033 \021\004\024 023\005 016\003\033 \r\003 003\r\022\016#\r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 r 032\003\005\032\005\004\r\022 005\032\033\b\021\b\034\002\t 033\b\005\006\004 033 \002\033 016\004\r 002 016\(\(\031\r 031\b\004\033 002\006\022 003\016\006 033 \r 002\031\013\005\003\b\033 \021\004 b\006 002 020\(\003\b\022 002\004 \b\005\006\024 036\016\003 r,\032\r\003\b\021\r\006\033\002\031 003\r\004\016\031\033\004 002\003\r 004\033\003\005\006\013 b\006\022\b#\002\033\b\006\013 033 \002\033 005\003 002 004\021\002\031\031 036\n\n\030 035\r\024\013\024 024 021\r\013\002\(\020\033\r\004\037 033 \r 004\032\r\r\022\016\032 002\006 r r\003\020 004\b\013\006\b'#\002\006\033 035\r\024\013\024 7 033\b\021\r\004\037 020\r\033 033 \r 004\r\013\021\r\006\033\002\033\b\005\006 005\004\033 b\004 004\021\002\031\031 035\r\024\013\024 3 004\r#\005\006\022\004 005\003 7 021\b\031\031\b\005\006 033\003\002\006\004\002#\033\b\005\006\004\037\024 r 005\006#\031\016\022\r\022 020 032\003\r\004\r\006\033\b\006\013 002 003\r#\005\021\021\r\006\022\r\022 003\r#\b\032\r 005\003 002\003\b\005\016\004 b\003#\016\021\004\033\002\006#\r\004\024 b\031\r 005\016\003 r,\032\r\003\b\021\r\006\033\004 r\003\r 002\004\r\022 005\006 006\022\t b\006\013 003\r"\016\r\006\033 004\r\033\004 016\004\b\006\013 033 \r 032\003\b\005\003\b 002\031\013\005\003\b\033 \021 b\033 b\004 b\021\032\005\003\t 033\002\006\033 033\005 003\r\021\r\021\(\r\003 033 \r 013\r\006\r\003\002\031\b\033\020 005 033 \r 036\n\n\030 8\033 b\004 002\032\032\031\b#\002\t 031\r 033\005 021\002\006\020 032\002\033\033\r\003\006 022\b\004#\005%\r\003\020 002\031\013\005\003\b\033 \021\004 035\021\002\006\020 005 b 002\003\r 031\b\004\033\r\022 b\006 033 \r b\006\033\003\005\022\016#\033\b\005\006\037\024 r r,\032\r#\033 033 \r 036\n\n\030 033\005 r r"\016\002\031\031\020 r!!\r#\033\b%\r 005\003 033 \005\004\r 002\031\013\005\003\b\033 \021\004\024 0060\006\017\006\t\020\006\031 30 017\024\001\024 013\002\003\\002\031 001\024\001\024 013\013\002\003\\002\031 002\006\022 M\024M\024M\024 003\002\004\002\022\024 A\r\032\033 '\003\004\033 013\r\006\t r\003\002\033\b\005\006 005 031\005\006\013 032\002\033\033\r\003\006\004\024 8\006 b\f\032  025  032 3@4N334\024 0 017\024 013\003\002\\002\031 023\024 8\021\b\r\031\b\006\004\027\b 002\006\022 024 n\\002\021\b\024 030\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004 r\033\\r\r\006 004\r\033\004 005 b\033\r\021\004 b\006 031\002\003\013\r 022\002\033\002\(\002\004\r\004\024 8\006 b\f\032 9 035>>\026  032\032 2N.31\024 0 017\024 013\003\002\\002\031 026\024 030\002\006\006\b\031\002 r\033 002\031\024 002\004\033 022\b\004#\005%\r\003\020 005 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024 034\007\024\005\032\003\t 006\005 005\f1\020\003\034!\003 006\t\032\f\007\003\b\013 024\005\034 024\n\024 030\006\005\006\005  032 2N/.4\024 8;\0308\023 003\r\004\004 3661\024 50 017\024 013\003\002\\002\031 002\006\022 017\024 n\003\b\027\002\006\033\024 030\b\006\b\006\013 004\r"\016\r\006\033\b\002\031 032\002\033\033\r\003\006\004\024 8\006 b\f\032  035>>A  032 N35\024 70 017\024O\024 D\002\020\002\003\022\005\024 E!'#\b\r\006\033\031\020 021\b\006\b\006\013 031\005\006\013 032\002\033\033\r\003\006\004 003\005\021 022\002\033\002\(\002\004\r\004\024 8\006 b\f\032 9 035>>B  032 47N6/\024 10 n\024 D\003\b\006 017\024 030\005\033\\002\006\b 002\006\022 001\024 n\b\031%\r\003\004\033\r\b\006\024 D\r\020\005\006\022 021\002\003\027\r\033 002\004\027\r\033 9\r\006\r\003\002\031\b\034\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004 033\005 005\003\003\r\031\002\033\b\005\006\004\024 8\006 b\f\032 9\6\030 035>>C  032 17N.21\024 20 9\024 9\003\002 \006\r f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 002\006\022 P\024 002\006\013\024 E!'#\b\r\006\033 021\b\006\b\006\013 005 005\006\004\033\003\002\b\006\r\022 005\003\003\r\031\002\033\r\022 004\r\033\004\024 8\006 b\f\032 017 025  032 73.N7.3\024 40 O\024 026\002\006 O\024 r\b 002\006\022 K\024 K\b\006\024 030\b\006\b\006\013 003\r"\016\r\006\033 032\002\033\033\r\003\006\004 b\033 \005\016\033 002\006\022\b\t 022\002\033\r 013\r\006\r\003\002\033\b\005\006\024 8\006 b\f\032 9 025  032 3N3.\024 60 001\024 026\b\022\(\r\003\024 036\006\031\b\006\r 002\004\004\005#\b\002\033\b\005\006 003\016\031\r 021\b\006\b\006\013\024 8\006 b\f\032 9 035  032\032 357N371\024 3@0 f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 001\024\007\024\t\n\024 f\r\016\006\013 002\006\022 017\024\023\024 025\013\024 023 \r 004\r\013\021\r\006\033 004\016\032\t 032\005\003\033 021\002\032 n#\002\031\002\(\031\r 021\b\006\b\006\013 005 003\r"\016\r\006\033 b\033\r\021\004\r\033\004\024 9 020\f b\024\n\006\f\005\t   035.\037 032\032 3N.2 A\r#\024 024 330 f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 017\024 025\013 r\033 002\031\024 036\032\033\b\021\b\034\002\033\b\005\006 005 005\006\004\033\003\002\b\006\r\022 003\r\t 016\r\006\033 004\r\033 016\r\003\b\r\004 002\003\b\002\(\031\r 005\006\004\033\003\002\b\006\033\004\024 8\006 b\f\032 9\6\030 035  032 372N314\024 3.0 001\024\007\024\t\n\024 f\r\016\006\013 017\024\023\024 025\013 002\006\022 026\024 030\002\006\006\b\031\002\024 023 \r 005\032\033\b\021\b\034\r\022 004\r\013\021\r\006\033 004\016\032\032\005\003\033 021\002\032 005\003 033 \r 021\b\006\b\006\013 005 003\r"\016\r\006\033 032\002\033\033\r\003\006\004\024 023\r# \006\b#\002\031 017\r\t 032\005\003\033 001\n 023\017\t.@@3\t34 023 \r H\006\b%\r\003\004\b\033\020 005 D\003\b\033\b\004 001\005\031\016\021\(\b\002 001\002\006\002\022\002 3\024 3/0 026\024 030\002\006\006\b\031\002 026\024 023\005\b%\005\006\r\006 002\006\022 0248\024 M\r\003\027\002\021\005\024 A\b\004#\005%\r\003\020 005 003\r"\016\r\006\033 r\032\b\004\005\022\r\004 b\006 r%\r\006\033 004\r"\016\r\006#\r\004\024 024\n\024 030\006\005\006\005 024\005\034 005\f1\020\003\034!\003 006\t\032\f\007 003\b\013  035 035/\037 032\032 76N.46 n\r\032\033\024 3662\024 350 017\024\023\024 025\013 f\024M\024\n\024 f\002\027\004 \021\002\006\002\006 r\033 002\031\024 E,\032\031\005\003\002\033\005\003\020 021\b\006\b\006\013 002\006\022 032\003\016\006\b\006\013 005\032\033\b\021\b\034\002\033\b\005\006\004 005 005\006\004\033\003\002\b\006\r\022 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024 8\006 b\f\032 9\6\030 035>>B  032 3/N.5\024 370 O\024\n\024 002\003\027 030\024\t\n\024 001 \r\006 002\006\022 024\n\024 K\016\024 H\004\b\006\013 002 002\004 \t\(\002\004\r\022 021\r\033 \005\022  033\003\002\006\004\002#\033\b\005\006 033\003\b\021\021\b\006\013 005\003 021\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024  001  9 0357\037 032\032 43/N4.7 n\r\032\033\024;\036#\033\024 3662\024 310 025\024 002\004"\016\b\r\003 K\024 D\002\004\033\b\022\r r\033 002\031\024 A\b\004#\005%\r\003\b\006\013 003\r"\016\r\006\033 031\005\004\r\022 b\033\r\021\004\r\033\004 005\003 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004\024 8\006 b\f\032 017:\001 035  032 64N531\024 320 024 n\002%\002\004\r\003\r E\024 036\021\b\r#\b\006\004\027\b 002\006\022 n\024 025\002%\002\033 \r\024 006 r!'#\b\r\006\033 002\031\013\005\t 003\b\033 \021 005\003 021\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006 003\016\031\r\004 b\006 031\002\003\013\r 022\002\033\002\(\002\004\r\004\024 8\006 b\f\032 D:\016 035>>A  032 5/.N55/\024 340 001\024 n\b\031%\r\003\004\033\r\b\006 n\024 D\003\b\006 r\033 002\031\024 n#\002\031\002\(\031\r 033\r# \006\b"\016\r\004 005\003 021\b\006\b\006\013 002\016\004\002\031 004\033\003\016#\033\016\003\r\004\024 8\006 b\f\032 031D:\016 035>>B  032 765N1@7\024 360 017\024 n\003\b\027\002\006\033 Q\024 M\016 002\006\022 017\024 013\003\002\\002\031\024 030\b\006\b\006\013 002\004\004\005#\b\002\033\b\005\006\004 003\016\031\r\004 b\033 b\033\r\021 005\006\004\033\003\002\b\006\033\004\024 8\006 b\f\032  035>>C  032 12N2/\024 0 030\024O\024 R\002\027\b 002\006\022 007\024 9\005\016\022\002\024 002\004\033 r\003\033\b#\002\031 021\b\006\b\006\013 016\004\b\006\013 022\b!!\004\r\033\004\024 023\r# \t 006\b#\002\031 017\r\032\005\003\033 3\t3 017\r\006\004\004\r\031\002\r\003 005\031\020\033\r# \006\b 8\006\004\033\b\033\016\033\r H\n 3\024 30 030\024O\024 R\002\027\b 002\006\022 001\024\tO\024 026\004\b\002\005\024 001\026+\017\030 006 r!'#\b\r\006\033 002\031\013\005\003\b\033 \021 005\003 031\005\004\r\022 002\004\004\005#\b\002\033\b\005\006 003\016\031\r 021\b\006\b\006\013\024 023\r# \006\b#\002\031 017\r\032\005\003\033 66\t3 017\r\006\004\004\r\031\002\r\003 005\031\020\033\r# \006\b 8\006\004\033\b\033\016\033\r H\n 3666\024 Proceedings of the 18th International Conference on Data Engineering \(ICDE\22202 1063-6382/02 $17.00 \251 2002 IEEE 


expect this optimization to be of greatest bene\336t when the transaction sizes are large r example if our transaction is T 000 f A\000 B 000 C\000 D\000 E g  k 000 3 fan-out 000 2 then all the 3-subsets of T are f ABC,ABD,ABE,ACD,ACE,ADE,BCD,BCE,BDE,CDE g  Figure 2 shows the candidate hash tree C 3  We ave to increment the support of every subset of T contained in C 3  We egin with the subset AB C  and hash to node 11 and process all the itemsets In this downward path from the root we mark nodes 1 4 and 11 as visited We then process subset AD B  and mark node 10 Now consider the subset CDE  We see in this case that node 1 has already been marked and we can preempt the processing at this very stage This approach can r consume a lot of memory r a n fan-out F  for iteration k  e need additional memory of size F k to store the 337ags In the parallel implementation we have to keep a VISITED 336eld for each processor bringing the memory requirement to P\000F k  This can still get very large especially with increasing number of processors In we sho w a mechanism by which further reduces the memory requirement to only k 000F  The approach in the parallel setting yields a total requirement of k 000F 000P  5 Experimental Evaluation Database T I D Total Size T5.I2.D100K 5 2 100,000 2.6MB T10.I4.D100K 10 4 100,000 4.3MB T15.I4.D100K 15 4 100,000 6.2MB T20.I6.D100K 20 6 100,000 7.9MB T10.I6.D400K 10 6 400,000 17.1MB T10.I6.D800K 10 6 800,000 34.6MB T10.I6.D1600K 10 6 1,600,000 69.8MB Table 2 Database properties 5.1 Experimental Setup All the experiments were performed on a 12-node SGI Power Challenge shared-memory multiprocessor Each node is a MIPS processor running at 100MHz There\325s a total of 256MB of main memory The primary cache size is 16 KB 64 bytes cache line size with different instruction and data caches while the secondary cache is 1 B 128 bytes cache line size The databases are stored on an attached 2GB disk All processors run IRIX 5.3 and data is obtained from the disk via an NFS 336le server We used different synthetic databases with size ranging form 3MB to 70MB 2  and are generated using the procedure described in These databases mimic the transactions in a retailing en vironment Each transaction has a unique ID followed by a list of items bought in that transaction The 2 While results in this section are only shown for memory resident databases the concepts and optimization are equally applicable for non memory resident databases In non memory resident programs I/O becomes an important problem Solutions to the I/O problem can be applied in combination with the schemes presented in this paper These solutions are part of future research 11 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


  0 500 1000 1500 2000 2500 0 2 4 6 8 10 12 Number of Large Itemsets Iterations Large Itemset at Support = 0.5 222T5.I2.D100K\222  222T10.I4.D100K\222   222T15.I4.D100K\222   222T20.I6.D100K\222   222T10.I6.D400K\222   222T10.I6.D800K\222   222T10.I6.D1600K\222  Figure 3 Large Itemsets per Iteration data-mining provides information about the set of items generally bought together Table 2 shows the databases used and their properties The number of transactions is denoted as jD j  average transaction size as j T j  and the average maximal potentially large itemset size as j I j  The number of maximal potentially large itemsets j L j 000 2000 and the number of items N 000 1000 We refer the reader to for more detail on the database generation All the e xperiments were performed with a minimum support value of 0.5 and a leaf threshold of 2 i.e max of 2 itemsets per leaf We note that the  improvements shown in all the experiments except where indicated do not take into account initial database reading time since we speci\336cally wanted to measure the effects of the optimizations on the computation Figure 3 shows the number of iterations and the number of large itemsets found for different databases In the following sections all the results are reported for the CCPD parallelization We do not present any results for the PCCD approach since it performs very poorly and results in a speed-down on more than one processor 3  5.2 Aggregate Parallel Performance Table 3 s actual running times for the unoptimized sequential and a naive parallelization of the base algorithm Apriori for 2,4 and 8 processors without any f the techniques descibed in sections 3 and 4 In this section all the graphs showing  improvements are with respect to the data for one processor in table 3 Figure 4 presents the speedups obtained on different databases and different processors for the CCPD parallelization The results presented on CCPD use all the optimization discussed 3 Recall that in the PCCD approach every processor has to read the entire database during each iteration The resulting I/O costs on our system were too prohibitive for this method to be  12 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


Database 1 proc 2 procs 4 procs 8 procs T5.I2.D100K 20 17 12 10 T10.I4.D100K 96 70 51 39 T15.I4.D100K 236 168 111 78 T20.I6.D100K 513 360 238 166 T10.I6.D400K 372 261 165 105 T10.I6.D800K 637 435 267 163 T10.I6.D1600K 1272 860 529 307 Table 3 Naive Parallelization of Apriori seconds   0 2 4 6 8 10 12 0 2 4 6 8 10 12 Speedup Number of Processors CCPD Ideal  T5.I2.D100K.t2   T10.I4.D100K.t2   T15.I4.D100K.t2   T20.I6.D100K.t2   T10.I6.D400K.t2   T10.I6.D800K.t2   T10.I6.D1600K.t2    0 2 4 6 8 10 12 0 2 4 6 8 10 12 Speedup Number of Processors CCPD : With Reading Time Ideal  T5.I2.D100K.t2   T10.I4.D100K.t2   T15.I4.D100K.t2   T20.I6.D100K.t2   T10.I6.D400K.t2   T10.I6.D800K.t2   T10.I6.D1600K.t2  Figure 4 CCPD Speed-up a without reading time b with reading time 13 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


Reading  f Total Time Database Time P 000 1 P 000 2 P 000 4 P 000 8 P 000 12 T5.I2.D100K 9.1s 39.9 43.8 52.6 56.8 59.0 T10.I4.D100K 13.7s 15.6 22.2 29.3 36.6 39.8 T15.I4.D100K 18.9s 8.9 14.0 21.6 29.2 32.8 T20.I6.D100K 24.1s 4.9 8.1 12.8 18.6 22.4 T10.I6.D400K 55.2s 16.8 24.7 36.4 48.0 53.8 T10.I6.D800K 109.0s 19.0 29.8 43.0 56.0 62.9 T10.I6.D1600K 222.0s 19.4 28.6 44.9 59.4 66.4 Table 4 Database Reading Time in section 4 320 computation balancing hash tree balancing and short-circuited subset checking The 336gure on the left presents the speed-up without taking the initial database reading time into account We observe that as the number of transactions increase we get increasing speed-up with a speed-up of more than 8 n 2 processors for the largest database T10.I6.D1600K with 1.6 million transactions r if we were to account for the database reading time then we get speed-up of only 4 n 2 processors The lack of linear speedup can be attributed to false and true sharing for the heap nodes when updating the subset counts and to some extent during the heap generation phase Furthermore since variable length transactions are allowed and the data is distributed along transaction boundaries the workload is not be uniformly balanced Other factors like s contention and i/o contention further reduce the speedup Table 4 shows the total time spent reading the database and the percentage of total time this constitutes on different number of processors The results indicate that on 12 processors up to 60 of the time can be spent just on I/O This suggest a great need for parallel I/O techniques for effective parallelization of data mining applications since by its very nature data mining algorithms must operate on large amounts of data 5.3 Computation and Hash Tree Balancing Figure 5 shows the improvement in the performance obtained by applying the computation balancing optimization discussed in section 3.1.2 and the hash tree balancing optimization described in section 4.1 The 336gure shows the  improvement r a run on the same number of processors without any optimizations see Table 3 Results are presented for different databases and on different number of processors We 336rst consider only the computation balancing optimization COMP using the multiple equivalence classes algorithm As expected this doesn\325t improve the execution time for the uni-processor case as there is nothing to balance r it is very effective on multiple processors We get an improvement of around 20 on 8 processors The second column for all processors shows the bene\336t of just balancing the hash tree TREE using our bitonic hashing the unoptimized version uses the simple mod d hash function Hash tree balancing by itself is an extremely effective optimization It s the performance by about 30 n n uni-processors On smaller databases and 8 processors r t s not as 14 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


