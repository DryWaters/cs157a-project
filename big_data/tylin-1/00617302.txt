Discovery an lication of Inter-Class Patterns in Dong-Ha Lee Dong-Yal Seo Kang-Sik Moon Jisook Chang Do-Won Nam Jeon-Young Lee Intelligent Information Systems Laboratory POSTECH Infomation Research Laboratories\(PIRL Pohang University of Science and Technology Nam-Gu Pohang Kyungbuk 790-784 Korea dongha dyseo, ksmoon jihan irene jeon  white.postech.ac.kr Abstract This paper presents an inter-class pattern discovery method in 
real world database While data in conventional database has tuple structure the data in pattern discovery has set-values or sequences The structural difference between them may cause useless resulting patterns and may result in inefficient pattern discovery method To resolve those issues we propose an inter-class pattern discovery methodology The first step is to convert conventional database to set of objects During the conversion process a tuple in the original database is converted to a conceptual object and as another result object generalization hierarchies are generated From the object generalization hierarchies, interesting patterns of the 
conceptual objects can be extracted by applying multi-level pattern discovery algorithms The resulting patterns are inter-class patterns of original conventional database We also show a pattern discovery query for our methodology and its application on intelligent query processing 1 Introduction Knowledge hidden in database can be extracted by KDD\(know1edge discovery in database techniques The hidden knowledge, for example students from Seoul and more than 30-year old are tend to get good grade in courses of computer 
department can not be extracted by conventional database interface languages or using statistical tools Moreover the extraction processing should be tractable considering the amount of data in practical database Knowledge discovery systems or pattern discovery systems are motivated by the above problem. They extract previously unknown and possibly useful knowledge that helps decision-making Two of the most useful patterns among knowledge discovery techniques are association rules and sequential patterns Association rules are extracted 
from bucket database that is composed of set of buckets each bucket has a set of items An association rule finds out dependency relationships among items Some items tend to appear at the same time with certain items On the other hand sequential patterns are defined by the sequence database that is composed of set of sequences Each sequence is a list of items The sequential patterns show temporal inter-relationship among item sets These kinds of knowledge from databases are very useful 
and have been applied to practical applications to get meaningful results 2][3 The inputs of these algorithms are somewhat different form from the data stored in conventional database While objects in conventional database have tuple structure the target objects in pattern discovery are set values or sequences The different format between data in conventional database and inputs for pattern discovery makes it irrelevant to apply the latter for exploiting the former To apply these knowledge discovery techniques 
for real-world database we develop a well-defined mechanism to convert conventional databases into a set of items or sequences During the transformation a tuple in the original database is converted to a conceptual object and object generalization hierarchies are built Using the object generalization hierarchies interesting patterns of the conceptual objects can be extracted by applying previously developed multi-level pattern discovery algorithms As a useful application of inter-class pattern discovery we show intelligent query answering 
system in which user information and interaction patterns have the form of relational tables The rest of this paper is organized as follows Previous researches on association rules and sequential patterns are introduced in section 2 Section 3 gives inter-class pattern discovery methods 3 steps of inter-class discovery methods are object abstraction from relational table and target transaction generation and multi-level pattern 326 0-8186-8147-0197 10.00 0 1997 IEEE 


discovery Applications of inter-class pattern discovery are given in section 4 The examples of pattern discovery query and intelligent query processing are given Section 5 is a conclusion 9625x1120  2 Previous researches on association rules and sequential patterns Association rule was introduced by 2 It has the form of rules among items in retail database An association rule of a b  c means that an item set a, b tends to be appeared with an item set IC Two important parameters for finding association rule are minimum support minsup and minimum confidence minconf Association rules among item set in database are found with given parameters of minimum support and minimum confidence Sequential pattern was introduced by 3 Transactions in the database have time stamps. Sequential patterns are patterns of time sequences An example of the sequential pattern a b c means when item set a b tends to be followed by item set c In this pattern minimum support parameter should be given Both pattern discoveries need multiple scans of database A big effort has been given to reduce the number of database scans or main memory requirement    Other researches focused on expanding expressiveness of resulting rules with multi-level patterns Do-WonNam 25 Taegu    Korea Foreign c Any Seoul Not-Seoul c Korea  Kyungbuk Kyungnam, Kangwon  c Not-Seoul Chunchon, Wonju   c Kangwon Age 20 Figure 1 Concept Hierarchy on values of birth-place birth-place Seoul Recent database extensions introduce concept hierarchy on attributes Figure 1 shows concept hierarchy for values of birth-place attribute. Using given concept hierarchies on the database generalized association rules or generalized sequential patterns can be extracted  12][7 Generalized patterns give more abstracted information. For example a generalized association rule of birth-place attributes is Foreign students tend to get good grade on English Though useful results come out using association rule and sequential pattern finding in practical applications there is still major obstacles using these mining techniques on real world conventional database Because target objects in pattern discovery need to be item sets or lists of item sets but the data objects in real world database has tuple structure Thus a database tuple should be merged into large item set to be used as an input for pattern discovery. Even after changing into large item set there could be come out irrelevant result with pattern discovery on several tables or trivial association rules of dependant items To use these pattern discovery techniques on real world conventional database we develop inter-class pattern discovery method We describe it in next section I 9325d07 I Dong-HaLee I 30 I Seoul I I 9425d05 I DonirYalSeo-r 29 TChunchon I 3 Inter-class association rules discovery We show inter-class pattern discovery method in this section focused on discovery patterns on association rules The results may be easily expanded to sequential patterns We describe the ICAR\(1nter-Class Association Rules algorithm which is used to extract association rules among several tables or classes in OODB The 3 steps of this algorithm are tuple abstraction target transaction composition and multi-level association rule finding First tuples in relational database are abstracted as objects The original target tables are called base tables During the abstraction object generalization hierarchies are generated Second target transaction databases are built by joining the resulting objects from the first step Each target transaction has same number of attributes and each item represents a tuple in the base table Finally multi-level association rule finding algorithm is executed on the target transactions using the object hierarchy that was generated by step 1 Table 2 Generalized tuples from table student 20 25 Seoul 25 30 Not-Seoul I Not-Seoul I I 30   3 1 Tuple abstraction  The attribute birthglace is defined in the relational schema of Figure 3 327 


This step abstracts tuples in base table given table into objects and build generalization hierarchy that conceives the resulting objects One of the most well known knowledge discovery techniques is attribute-oriented induction 5 This technique results in generalized table from base table using given concept hierarchies The processes of attribute-oriented induction are given in table 1 table 2 and table 3 The concept hierarchy of each attributes in student table we can obtain the result of table 2\(Note that we must choose target attributes before this abstraction step In general it is common that interesting attributes are predefined by administrator\More generalization can be applied to the table 2 and it generates table 3 30 30  Table 3 Generalized table from table 2 Seoul ANY 1 Age I birthglace 1 I 30 I Not-Seoul I After getting the generalized relation a tuple in student table can be viewed as being located in an abstraction hierarchy. This generalization information can be kept as hierarchy tree which is similar to conceptual hierarchy defined on an attribute Figure 2 gives the object generalization hierarchy in which tuples in base table are abstracted as objects and the hierarchy is used for next step We used attribute-oriented induction to build the object generalization hierarchy in this paper but other kinds of hierarchical tuple clustering methods can be used As the first step of inter-class association rule discovery or inter-class sequential pattern discovery, the table abstraction step results in the object generalization hierarchy student 3b Seouf Figure 2 Object generalization hierarchy on table student A tuple in student table can be generalized on the object hierarchy in Figure 2 When sid is tuple identifier of the tuple a student 9325d07 can be generalized as a class that is represented as 25 3b Seoul and the student can be classified to as more generalized class of 30 Seoul 3.2 Target transaction composition Target transaction database is constructed by joining the participating base tables. Pattern discovery algorithm is performed on a set of items in target transaction database A target transaction is an object that represents a tuple in a base table student\(sid name status major gpa course\(cid, name dept register\(ritf sno cno grade birth-date birthjlace address Figure 3 Example schema For example a relational schema is given in Figure 3 Target transaction is compose of 3 items sid cid and rid which represent each base tables After defining target transaction scheme the target transaction database should be built by joining the base tables The resulting table has not all attributes but only tuple identifiers. The number of target transactions should be same as the number of tuples in the result table After building the target transaction database multi level association rule finding algorithm 7 121 should be executed The resulting association rules are inter-class association rules Algorithm ICAR Input Tables T Interesting attributes IA Output  247et of Association Rule filter out non-interesting attributes from T if it is neither foreach table t in T do primary or foreign key  generalize table t using attribute-oriented induction and remember the generalization path  build target transaction schema collecting the representative attributes  build target transaction database by join the encapsulated objects multi-level association rule mining convert the result to inter-class association rules Figure 4 Algorithm ICAR 3.3 Representative attributes An attribute selected from base table is referred as representative attribute that is an abstraction of the tuple In the previous section we used tuple identifiers as the representative attribute The representative attribute should be chosen carefully These considerations make more efficient the result for the inter-class pattern discovery 328 


For the base table has no interesting attributes that are not foreign keys the table has no representative attribute This table is used with a connection of other tables No meaningful association rule can be extracted On such tables, generalization step can be omitted Second when base table has only one interesting attribute that is not foreign key the only interesting attribute becomes the representative attribute of the table The attribute is the only attribute in the table that can be contributed for inter-class association rules as a meaningful concept In this case the generalization step is also omitted The concept hierarchy defined on the attributes plays the role of object generalization hierarchy of the table Finally when the only one interesting attribute is set type all the values of the attributes should be appeared in target transaction The resulting target transactions will have different sizes Recently published multi-level pattern discovery techniques give efficient results for set data type In this case, object generalization step omitted also For previous example, the target transaction schema of the example relational database in Figure 3 is sid dept grade The dept attribute came from course table 3.4 Performance gain Let the tuple numbers of n tables be tl, t2  t and attribute numbers al a2 a Let the number of bytes for attributes be same In conventional method we need to join all the participating base tables and that requires space of o ak n tk  And we need time for finding association rules\(or sequential rules from the transaction database of attribute size But the proposed techniques requires space of O\(n ntk and time for association rule\(or sequential rule finding from the transaction database of attributes size n and the size of transaction of O\(n tk  and the time for table generalization which is O\(max ai ti  and multi-level association rule\(or sequential rule finding in target transaction database The time requires to generalize the base table is linear to the size of base table. Both cases require additional time for table joins Time requirements both pattern discoveries are not yet analyzed exactly Considering that time requirement of pattern discovery is higher than linear linearity of time requirement of object generalization step promises that the performance of proposed method is better ak and the size of transaction of o\(n tk 4 Applications In this section we present a pattern discovery language as an extension of SQL and give intelligent query answering system that is an application for inter-class pattern discovery and the pattern discovery language Inter-class pattern discovery enables variety of application of pattern discovery Query pattern ts u-id at-id cond at-idqair Answer pattern ts u-id at-id val ts time stamp ufd user identifier atid selected attribute id cond: constant condition at-id-pair join condition Val retrieved values Figure 5 Patterns query discover RULE-TYPE from TABLE-LIST where in relevance to INTERESTING-ATTRIBUT with DISCOVERY-PARAMETST during E-LIST discover association rules from where s.birth-place Seoul and s.sid  in relevance to s.status s.major s.address with support=0.01 confidence=OA during every winter student s course c register r resid and c.cld  rxid s.birth-date c.dept discover sequential patterns from with confidence=OA window size  5 during every winter student s course c register r constraint 4 Figure 6 Pattern discovery query syntax and examples 4.1 Pattern discovery query language The development of query language for knowledge discovery is one of hot issues in data mining research area We design a pattern discovery language that has similar syntax with SQL To get specific inter-class patterns target base table and discovery parameters should be expressed using pattern discovery query 329 


The designed pattern discovery query language is given in Figure 5 Inter-class pattern discovery enables pattern discovery from multiple tables and the pattern discovery query can be expressed as structured form shown in the examples We are considering other discovery options One of the discovery options is temporal constraint such as during winter By considering specific time period, more interesting patterns can be found which are ignored during the process of global pattern discovery The results of pattern discovery query can be expressed as a set of rules in association rules or a set of lists of items in sequential patterns 4.2 Intelligent query answering Recently a research on intelligent query answering using knowledge discovery techniques was introduced 8 Intelligent query answering is an attempt to give more relevant information for user query Related studies are cooperative query answering 6 and intensional answering  111 Techniques used in those researches can be classified as generalization summarization query rewriting using associated or neighborhood information comparison of answers with those of similar queries and intensional answers or explanation of answers 9 Han and others 8 focus on their knowledge-rich data model and depends generalization technique among various knowledge discovery techniques We suggest that more cooperative behavior of database can be served by analyzing user access pattern User access pattern can be expressed in list of items Therefore recent research on association rule and sequential pattern discovery enables efficient and meaningful user analysis Observing user interactions between database system and user query we model the interaction as query step and answer step At each step target pattern can be generated We give possible patterns at Figure 6 We refer the pattern comes from query step as query pattern and the other as answer pattern A query pattern is a tuple of an extended relational model with set item extension Query patterns will be abstracted as objects and object generalization hierarchy will be generated using tuple abstraction method of section 3 1 In this intelligent query answering system it is assumed that user information is given as a table which named user table The user table has relational information such as affiliation age department and classified group During preprocessing the user table is abstracted using tuple abstraction method described in section 3.1 As the result of tuple abstraction object generalization hierarchy for user table is generated. Using the two object generalization hierarchies we can give pattern discovery query, such as in Figure 7 The result of the pattern discovery query in Figure 7 can be used in intelligent query answering technique of neighborhood query discover association rules from query q user U where u.birth-place Seoul and u.u-id  q.u-id and ts in 97/01/01 97/03/01 with support=O.Ol  confidence=0.4 Figure 7 A pattern discovery query from query pattern 4.3 More intelligent query answering More intelligent query answering is possible Pattern discovery from query pattern can show the tendency of user group The group tendency information can be used in query rewriting to give interesting neighborhood query In other case comparative group tendency can be used for comparison query For example given graduate student's query it is more informative to give not only the answer of the query but also the answer of undergraduate student's frequent query Query pattern and answer pattern also can be extended Possible extension of pattern is considering positive and negative answer 13 Query result is a table and that is positive answer. Negative answer is obtained when all table participating the query are joined and projected as query result and excluded the positive answer Patterns from negative answers represent the tendency of data which have been excluded from retrieval 5 Conclusion We have presented an inter-relation pattern discovery method that has improved efficiency and relevance This inter-class pattern discovery method makes it possible to expand the application areas of knowledge discovery As we know no research on association rule or sequential pattern did work on real-world database Database should be preprocessed for those pattern discovery The proposed method has been illustrated by the application to the design of an intelligent query answering system To help the application a structured query has been designed Association rules and sequential patterns discovered by the proposed inter-class pattern discovery method from the database have shown the significantly improved the intelligence of the system This preliminary work is being extended in several directions We are extending the discovery pattern to be found in real-world database Object generalization hierarchy extraction process can be optimized in a certain point of view\or can be effected by user feedback Also we want to find more large grain pattern from database or user-database interactions 330 


6 References l R Agrawal S Ghosh T Imielinski, B Iyer and A Swami An Interval Classifier for Database Mining Applications," Proc 18th Int Conf VLDB pages 560 573,1992 21 R Agrawal T Imielinski and A Swami Mining association rules between sets of items in large database Proc 1993 Int Conf ACM SIGMOD pages 207-216 May 1993 3 R Agrawal and R Srikant Mining Sequential Patterns," Proc 1 lth Int. Conf. Data Engineering, pages 4 R Agrawal H Mannila R Srikant H Toivonen and A I Verkamo Fast discovery of association rules in U M Fayyad et. al. eds Advances in Knowledge Discovery and Data Mining Menlo Park CA AAAI/MIT Press pages 307-328, 1996 5 Y Cai N Cercone and J Han Attribute-Oriented Induction in Relational Databases in G Piatetsky Shapiro and W Frawley Editors Knowledge Discovery in Databases, Menlo Park, CA AAAI/MIT Press, pages 6 F Cuppens and R Demolombe Cooperative Answering A Methodology to Provide Intelligent Access to Databases Proc 2nd Int Conf Expert Database Systems pages 621-643, Apr. 1988 7 J Han and Y Fu Discovery of Multiple-Level Association Rules from Large Databases," Proc 21th Int Conf VLDB, pages 420-431,1995 SI J Han Y Huang N Cercone and Y Fu, "Intelligent Query Answering by Knowledge Discovery Techniques IEEE Trans Knowledge and Data Engineering, Vol 8 No 3 pages 373-390, Jun. 1996 9 T Gaasterland P Godfrey and J Minker An Overview of Cooperative Answering J Intelligent Information Systems Kluwer Academic Pub. Vol 1 No 2 pages 123-157, 1992 lo A Savasere E Omiecinski and S Navathe An Efficient Algorithm for Mining Association Rules in Large Databases Proc 21th Int Conf VLDB pages  111 C.-D Shum and R Muntz, "Implicit Representation for Extensional Answers Pro 2nd Int Conf Expert Database Systems, pages 497-522 Apr 1988 12 R Srikant and R Agrawal Mining Generalized Association Rules Proc 21th Int Conf VLDB pages 13 J P Yoon and L Kerschberg A Framework for K~OW~~X&D~QVCX 4 Evolutian in Databases IEEE Trans Knowledge and Data Engineering, Vol 5 No 6 pages 973-979 Dec 1993 3-14 1995 213-228, 1991 432-444, 1995 407-419,1995 331 


mum support decreases, and long rules are more likely to be excluded by the informative rule set than short rules There is little difference in size between an association rule set and a non-redundant rule set So in the following comparisons we only compare the informative rule set with the associa tion rule set Now we will compare generating efficiency of the in formative rule set and the association rule set We imple mented Apriori on the same data structure as the proposed algorithm and generated only single target association rules Our experiments were conducted on a Sun server with two 200 MHz UltraSPARC CPUs I iln Figure 3 Generating time for different rule sets The generating time for association rule sets and infor mative rule sets is listed in the Figure 3 We can see that mining an informative rule set is more efficient than mining a single target association rule set This is because the in formative rule miner does not generate all frequent itemsets and does not test all items as targets in a frequent itemset The improvement of efficiency becomes more evident when the minimum support decreases This is consistent with the deduction of rules being excluded from an association rule set as shown in Figure 2 I L I i 33 Figure 4 The number of times for scanning the database Further, the number of times of scanning a database for generating an informative rule set is smaller than that for an association rule set as showed in Figure 4 This is because the proposed algorithm avoids generating many long fre quent itemsets that contain no rules included in an informa tive rule set. From the results we also know that long rules are easier to be excluded by an informative rule set than short rules Clearly this number is significantly smaller than the number of different antecedents in the generated rule set which are needed to scan a database in aother direct algorithm To better understand of improvement of efficiency of the algorithm for mining the informative rule set over that for the association rule set we list the number of nodes in a candidate tree for both rule sets in Figure 5 They are all frequent itemsets for the association rule set and partial frequent itemsets searched by mining the informative rule set We can see that in mining the informative rule set, the searched itemsets is less than all frequent itemsets for form ing association rules So this is the reason for efficiency im provement and reduction in number of scanning a database 7 Conclusions We have defined a new informative, rule set that gener ates prediction sequences equal to those generated by the association rule set by the confidence priority The infor mative rule set is significantly smaller than the association rule set especially when the minimum support is small We have studied the upward closed properties of informative rule set for omission of unnecessary rules from the set and presented a direct algorithm to efficiently mine the informa tive rule set without generating all frequent itemsets first 367 


10  B 8 B  6 4 2\222 0 0 15 02 0 25 03 Figure 5 The number of candidate nodes The experimental results confirm that the informative rule set is significantly smaller than both the association rule set and the non-redundant association rule set, that can be gen erated more efficiently than the association rule set The experimental results also show that this efficiency improve ment results from that the generation of the informative rule set needs fewer candidates and database accesses than that of the association rule set The number of database accesses of the proposed algorithm is much smaller than other direct methods for generating unconstrained association rule sets Although the informative rule set provides the same pre diction sequence as the association rule set there may exist other definitions of 223interesting\224 in different applications How to use the informative rule set to make predictions un der such different criteria remains a subject of future work References I R Agrawal T Imielinski and A. Swami Mining associa tions between sets of items in massive databases In Proc of the ACM SIGMOD Int\222l Conference on Management of Data 1993 2 R Agrawal and R Srikant. Fast algorithms for mining asso ciation rules in large databases In Proceedings of the Twen tieth International Conference on Very Large Databases pages 487-499 Santiago Chile, 1994 3 R Bayardo and R Agrawal Mining the most interesting rules In S Chaudhuri and D Madigan editors Proceed ings of the Fifth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining pages 145-1 54 N.Y Aug 15-18 1999. ACM Press 4 R Bayardo R Agrawal and D Gunopulos Constraint based rule mining in large dense database In Proc of the 15th Int\222l Con on Data Engineering pages 188-197 1999 5 J Han J Pei and Y Yin Mining frequent patterns with out candidate generation In Proc 2000 ACM-SIGMOD Int Con5 on Management of Data SIGMOD\222OO pages 1  12 May 2000 6 M. Holsheimer, M. Kersten H Mannila and Toivonen A perspective on databases and data mining In Ist Intl Conf Knowledge Discovery and Data Mining Aug 1995 7 M Houtsma and A Swami Set-oriented mining of associ ation rules in relational databases In 11th Intl Conj data Engineering 1995 8 B Liu W Hsu and Y Ma Pruning and summarizing the discovered associations In SIGKDD 99 1999 9 H Mannila H. Toivonen and I Verkamo Efficient algo rithms for discovering association rules In AAAI Wkshp Knowledge Discovery in Databases July 1994 lo R Ng L Lakshmanan J Han and A Pang Exploratory mining and pruning optimizations of constrained associa tions rules In Proceedings of the ACM SIGMOD Interna tional Conference on Management of Data SIGMOD-98 volume 27 of ACM SIGMOD Record pages 13-24 New York Junel-4 1998 ACM Press  111 J S Park M Chen, and P S Yu An effective hash based algorithm for mining association rules In ACM SIGMOD Intl Conf Management of Data May 1995  121 R Rymon Search through systematic set enumeration In W Nebel Bernhard Rich, Charles Swartout editor Pro ceedings of the 3rd International Conference on Principles of Knowledge Representation and Reasoning pages 539 552, Cambridge, MA oct 1992. Morgan Kaufmann 13 A Savasere R Omiecinski, and S Navathe An efficient algorithm for mining association rules in large databases In 21st VLDB Conf 1995 14 P Shenoy J R Haritsa S Sudarshan G Bhalotia M. Bawa and D Shah Turbo-charging vertical mining of large databases In Proceedings of the ACM SIGMOD In ternational Conference on Management of Data \(SIGMOD 99 pages 22-33 151 H. Toivonene M Klemettinen P RonKainen K Hatonen and H. Mannila Pruning and grouping discovered associa tion rules Technical report Department of Computer Sci ence University of Helsinki Finland, 1998 161 G I Webb Efficient search for association rules In R Ra makrishnan S Stolfo R Bayardo and 1 Parsa editors Pro ceedinmgs of the 6th ACM SIGKDD International Confer ence on Knowledge Discovery and Data Mining KDD-00 pages 99-107 N Y Aug 20-23 2000 ACM Press 171 M J Zaki Generating non-redundant association rules In 6th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining pages 34  43 August 2000 181 M J Zaki S Parthasarathy M Ogihara, and W Li New al gorithms for fast discovery of association rules In D Heck erman H Mannila D Pregibon and R Uthurusamy edi tors Proceedings of the Third International Conference on Knowledge Discovery and Data Mining KDD-97 page 283 AAAI Press 1997 368 


 0 5 10 15 20 25 30 35 40 10 15 20 25 30 average number of items in transactions T I=6 D=200K  o f d ata p rocessed 0 50 100 150 200 250 300 350 400 450 500 ti m e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 5 Pruning and CPU time varying T 0 2000 4000 6000 8000 10000 12000 14000 10 15 20 25 30 average number of items in transactions T I=6 D=200K number o f r andom I  Os SG-table SG-tree Figure 6 Random I/Os varying T 0 5 10 15 20 25 30 35 40 6121824 average length of large itemsets I T=30 D=200K  o f d ata p rocessed 0 50 100 150 200 250 300 350 400 450 500 ti m e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 7 Pruning and CPU time varying I 0 2000 4000 6000 8000 10000 12000 14000 6121824 average length of large itemsets I T=30 D=200K numbe r of ra ndom I  O s SG-table SG-tree Figure 8 Random I/Os varying I 0 2 4 6 8 10 12 14 16 T=10,I=6 T=20,I=12 T=30,I=18 T=40,I=24 T=50,I=30 Varying T and I I/T=0.6 D=200K  o f d ata p rocessed 0 20 40 60 80 100 120 140 160 tim e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 9 Pruning and CPU time 336xed I/T 0 200 400 600 800 1000 1200 1400 1600 1800 2000 T=10,I=6 I=12 T=30,I=18 I=24 T=50,I=30 Varying T and I I/T=0.6 D=200K numbe r of ra ndom I  Os SG-table SG-tree Figure 10 Random I/Os 336xed I/T 0 1 2 3 4 5 6 7 100 00 300 400 500 Data set cardinality T=10 I=6  o f d ata p rocessed 0 10 20 30 40 50 60 70 80 90 ti m e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 11 Pruning and CPU time varying D 0 10 20 30 40 50 60 0 1 to 3 4 to 10 11 to 20 20 distance of nearest neighbor T30.I18.D200K  o f d at a p rocessed 0 100 200 300 400 500 600 700 800 time m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 12 Pruning and CPU time var 000 000 003 005 007 t  83  Proceedings of the 19th International Conference on Data Engineering \(ICDE\22203 1063-6382/03 $ 17.00 \251 2003 IEEE 


shows a pattern similar to the CPU cost as in the previous experiments During the experiments we observed that queries having a close nearest neighbor were processed fast using both structures whereas for cases with distant neighbors the SG\226tree was signi\036cantly faster than the SG\226table We validated this observation by running 1000 queries on the T30.I18.D200K dataset and averaging the query costs for various distance ranges of the nearest neighbor Figure 12 shows the average pruning an d CPU cost for 036ve distance ranges When the distance is small search is fast for both methods actually for distances in the range 1\2263 the SG\226 table outperforms the SG\226tree However the distant cases are handled much faster by the SG\226tree showing that this access method is more robust to 221outlier\222 queries As a general conclusion from this set of experiments the SG\226tree is a more ef\036cient and robust access method than the SG\226table in addition to its other inherent advantages dynamic data handling independence to hard-wired constants In the next subsection we compare the indexes for other query types on both synthetic and real data 5.4 Real data nd other queries Figures 13 and 14 show the performance of the indexes for 000 NN queries on the T30.I18.D200K synthetic dataset and the CENSUS dataset respectively for various values of 000  The results for each experimental instance were averaged over 100 queries In both 036gures for small to medium values of 000 the SG\226tree is signi\036cantly faster than the SG\226 table When 000 is large  001 003 005 005 005  the fraction of the data that need to be visited becomes too large for the indexes to be useful This is due to the fact that the search space becomes less appropriate for search For example when 000 t 003 005 005 005 005 we observed that the average distance of the 000 th neighbor is very large 31.81 for T30.I18.D200K and 18.06 for CENSUS and very close to the average distance of all transactions from f  This is due to the 221dimensionality curse\222 effect 3 o ften o b s erv e d i n h ig h d i men s io n a l search problems Observe that the SG\226tree is less sensitive to this effect since its performance degenerates at a smaller pace especially for the real dataset We also compared the indexes for similarity range queries Figures 15 and 16 The same datasets and queries as before are used and the distance threshold from the query varies from 2 to 10 For r t 020  the SG\226table outperforms the SG\226tree on the synthetic dataset In all other cases the tree is much faster Observe that on the real dataset in particular for both 000 NN queries and range queries the performance difference quite large in favor of the tree This indicates that the structure can perform very well in real life cases  0 10 20 30 40 50 60 70 80 90 100 1 10 100 1000 10000 k-nn search varying k T30.I18.D200K  o f d ata p rocessed 0 200 400 600 800 1000 1200 1400 time\(msec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 13 021 NN queries T30.I18.D200K 0 10 20 30 40 50 60 70 80 90 100 1 10 100 1000 10000 k-nn search varying k CENSUS  o f d ata p rocessed 0 100 200 300 400 500 600 tim e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 14 022 NN queries CENSUS 5.5 Dynamic data changes In this experiment we compare the structures simulating a case where the nature of the data changes dynamically We generated a synthetic dataset T10.I6.D100K and built an SG\226table and SG\226tree for it We then gradually updated the structures by inserting batches of 100K transactions each with the same characteristics i.e T=10 I=6 but putting different seeds to the random generator i.e the large itemsets used were different for each batch We ran nearest neighbor queries on the two structures after each insertion phase The queries for phase 023 after batch 023 has been inserted 024 026 023 026 032  are generated as follows For each query i a random number 033 from 1 to 023 is chosen and ii the generator parameters i.e large itemsets for batch 033 are used to produce the query For example a query for the phase where the dataset contains 300K data is generated using randomly one of the generators of batches 1 2 or 3 Figure 17 shows the average pruning ef\036ciency and CPU time of the two structures Initially both have similar performance but as more data with different characteristics are inserted into the structures the performance of the SG\226table degenerates since it is optimized for the 036rst 100K data  84  Proceedings of the 19th International Conference on Data Engineering \(ICDE\22203 1063-6382/03 $ 17.00 \251 2003 IEEE 


 0 5 10 15 20 25 30 35 40 246810 similarity range queries varying epsilon T30.I18.D200K  o f d at a p r o cessed 0 50 100 150 200 250 300 350 400 tim e m s e c  SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 15 Range queries T30.I18.D200K 0 10 20 30 40 50 60 70 80 246810 similarity range queries varying epsilon CENSUS  o f d ata p r o cessed 0 50 100 150 200 250 300 350 400 ti me\(msec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 16 Range queries CENSUS On the other hand the SG\226tree is robust to updates and exhibits very good query performance since each batch contains skewed data generated from a different collection of large itemsets 6 Conclusions and Future Work We presented a hierarchical indexing method for similarity search in sets and categorical data The SG\226tree is a disk-based height-balanced tr ee that organizes 036xed-length bitmaps and is appropriate for various query types We have shown how several branch-and-bound methods which apply on R\226tree-like structures can be adapted for ef\036cient similarity search on the SG\226tree Extensive experimental evaluation has shown that the SG\226tree is in most cases much faster than the SG\226table a previous hash-based index The advantages of the SG\226tree can be summarized as follows 000 It is ef\036cient and robust to various data types both categorical and set data and characteristics cardinality density dimensionality It is a versatile structure that can be used for several query types 000 The tree is dynamically adapted to updates and re0 2 4 6 8 10 12 100 200 300 400 500 Dataset cardinality T=10 I=6  o f d ata p rocessed 0 20 40 60 80 100 120 140 160 180 200 tim e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 17 NN search after dynamic updates quires no preprocessing of the data Thus it can be useful for analyzing data which change dynamically over time 001 It relies on no hardwired constants and requires no tuning using a-priori de\036ned parameters 001 It is a disk-based paginated data structure so it can operate with limited memory resources and dynamically changing memory resources Caching policies previously used for the B 002 226tree and the R\226tree can be seamlessly applied on this structure There are several directions for extending the current work In our study we used hamming distance as the similarity metric However the SG\226tree can also be de\036ned tuned and searched for other set theoretic similarity metrics For example if the Jaccar d coef\036cient is used the lower distance bound in fact the upper similarity bound for nearest neighbor search can be de\036ned by 003 005 007 b n f 016 007 020 021 023 024 026 030 003 005 007 b n f 026  We plan to test the effectiveness of the structure using alternative metrics Another direction or future work is to study methods for bulk-loading SG\226trees instead of inserting the data oneby-one We can adapt categor ical clustering algorithms 12 for t hi s purpos e Anot her a pproach i s t o s o rt t h e transactions using gray codes as key in analogy to using space-\036lling curves for bulk-loading multidimensional data to an R\226tree 17  A lternati v ely  hashing t echniques can be used to group similar signatures together The resulting 221globally-optimized\222 tree could have much better quality characteristics while being built faster In a reverse direction we can investigate whether the SG\226tree can be used for clustering large dynamic collections of set and categorical data The cost of existing methods is at least 035 n   026 and the tree could be used to derive good clusters much faster e.g by merging the leaf nodes using their signatures as guides Finally we plan to empirically test the ef\036ciency of the tree to the query types discussed in Section 4.2 In  85  Proceedings of the 19th International Conference on Data Engineering \(ICDE\22203 1063-6382/03 $ 17.00 \251 2003 IEEE 


addition for some data types search can be further optimized For example if the indexed categorical data have 223xed-dimensionality 000 we know that the area of each indexed signature is 223xed to 000  We can use this property to derive stricter lower bounds for the directory node entries 001  instead of the rather relaxed 002 004 006 006 t 013 r 001 020 022 004 025 027 For this example a better bound is 002 004 006 006 t 013 r 001 020 022 004 025 027 033 t 000 037    t 001 020 022 004 025 r 013 027 027  We plan to study such search optimizations using domain properties or statistics from the indexed data References  C  C  A ggarw al  J  L  W ol f and P  S  Y u A N e w Method for Similarity Indexing of Market Basket Data SIGMOD Conference  pages 407\205418 1999  R  A gra w al and R  S ri kant  F as t A l gori t h ms for M i n ing Association Rules in Large Databases VLDB Conference  pages 487\205499 1994  K  S  B e y er  J  G ol ds t e i n  R  R amakri s hnan and U Shaft When Is 215Nearest Neighbor\216 Meaningful International Conference on Database Theory  pages 217\205235 1999  T  B ri nkhof f H.-P  K ri e g el  a nd B  S e e g er  E f 223 ci ent Processing of Spatial Joins Using R-Trees SIGMOD Conference  pages 237\205246 1993  A  C orral  Y  Manol opoul os  Y  T heodori d i s  a nd M Vassilakopoulos Closest Pair Queries in Spatial Databases SIGMOD Conference  pages 189\205200 2000  A  P  d e V ries N  M amoulis N  N es a nd M K e r sten Ef\223cient k-NN Search on Vertically Decomposed Data SIGMOD Conference  pages 322\205333 2002  U  D eppisch S-T r ee A D ynamic B alanced Signature Index for Of\223ce Retrieval ACM SIGIR Conference  pages 77\20587 1986  V  G aede a nd O G 250 unther Multidimensional Access Methods ACM Computing Surveys  30\(2\170\205231 1998  V  G ant i  J  Gehrk e  a nd R  R a makri s hnan C A C T US 205 clustering categorical data using summaries ACM SIGKDD Conference on Knowledge Discovery and Data mining  pages 73\20583 1999  D Gi bs on J  M Kl ei nber g  a nd P  R a gha v a n C l us tering Categorical Data An Approach Based on Dynamical Systems VLDB Conference  pages 311\205322 1998  A Gi oni s  D Gunopul os  a nd N K oudas  Ef 223 c i e nt and Tunable Similar Set Retrieval SIGMOD Conference  2001  S  Guha R  R as t ogi  a nd K S h i m  R OC K A R obust Clustering Algorithm for Categorical Attributes International Conference on Data Engineering  pages 512\205521 1999  A Gut t m an R T rees  A Dynami c I nde x S t r uct u re for Spatial Searching SIGMOD Conference  pages 47\205 57 1984  S  Hel m er and G  M oerk ot t e  A S t udy of F our Inde x Structures for Set-Valued Attributes of Low Cardinality Technical Report University of Mannheim  number 2/99 1999  G R Hjaltason a nd H Samet Distance Bro w sing in Spatial Databases TODS  24\(2\265\205318 1999  A K J a i n and R  C  D ubes  Algorithms for Clustering Data  Prentice-Hall 1988  I Kamel a nd C  F a louts o s  Hilbert R tree An Improved R-tree using Fractals VLDB Conference  pages 500\205509 1994  F  K o rn N  S i d i r opoul os  C  F al out s o s  E S i e g el  a nd Z Protopapas Fast Nearest Neighbor Search in Medical Image Databases VLDB Conference  pages 215\205 226 1996  N K oudas a nd K C  S e vci k  H i g h D i m ens i onal S i m i larity Joins Algorithms and Performance Evaluation International Conference on Data Engineering  pages 466\205475 1998  N R ous s opoul os  S  K el l e y  and F  V i n cent  Neares t Neighbor Queries SIGMOD Conference  pages 71\205 79 1995  Y  S a kurai  M  Y os hi ka w a  S  U emura and H  K oj i m a The A-tree An Index Structure for High-Dimensional Spaces Using Relative Approximation VLDB Conference  pages 516\205526 2000  The U C I KDD Archi v e ht t p    kdd.i c s  uci  edu 23 R W e b e r  H.-J S ch ek  a n d S Blo tt A Q u a n titative Analysis and e Study for SimilaritySearch Methods in High-Dimensional Spaces VLDB Conference  pages 194\205205 1998  86  Proceedings of the 19th International Conference on Data Engineering \(ICDE\22203 1063-6382/03 $ 17.00 \251 2003 IEEE 


13  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Example of supportbased pruning 4 Bread 1 Eggs 4 Diaper 3 Beer 4 Milk 2 Coke Count 1Item 3 Beer,Diaper 3 Milk, Diaper 2 Milk,Beer 3 Bread, Diaper 2 Bread,Beer 3 Bread,Milk Count 2Item 2 Milk, Diaper Beer 3 Bread,Milk Diaper Count 3Item Support-based pruning 225 Min support =3 Ignore subsets of items of size N 225 only if N-1 support > min-support Without pruning 6 C 1  6 C 2  6 C 3 41 With pruning: 6 + 6 + 2 = 14 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Classifiers versus Association rules \(again  Classifiers  Assume entire example set can fit into RAM  Association rule learners  can handle very big data sets  Agraw  t he APRIORI alg o r i t h m   very large data sets  10,000,000 examples  843MB Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


14  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 The Data Mining Desiderata Bradley  Require one scan \(or less\ of the database if possible  On-line \223anytime\224 behavior  223best\224 is always available, with status information on progress, expected remaining time, etc. provided  Suspendable, stoppable, resumable  incremental  progress saved to resume a stopped job  Ability to incrementally incorporate additional data with existing models efficiently  Work within confines of a given limited RAM buffer  Ooops, good-bye traditional classifiers e.g. C4.5  Argued against by some  223Memory is cheap\224: [W A R2 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Conf1  outlo o k overc a s t   1 0   82  40    84  40   4 0 0  Treatment learning sunny, 85 86 false none \(2 1 2 sunny, 80 90 true none sunny, 72 95 false none rain 65 70 true,          none rain, 71 96 true none rain 70  false some \(2 2 4 rain, 68 80 false,  some rain, 75 80 false some sunny,      69 70 false lots    \(2 3 8 sunny,      75 70 true lots overcast,     83  false lots overcast,     64  true lots overcast,     72  true lots overcast,     81 75 false lots outlook temp humidity wind hours on course A good attribute range 225 More frequent in good that bad 225 Weighted by 223distance\224good to bad 225 Normalized by total count 225 Summed for all good/bad class pairs Lots  none Lots  some Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


15  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 sunny, 85 86 false none \(2 1 2 sunny, 80 90 true none sunny, 72 95 false none rain 65 70 true,           none rain, 71 96 true none rain 70  false some \(2 2 4 rain, 68 80 false,  some rain, 75 80 false some sunny,      69 70 false lots    \(2 3 8 sunny,      75 70 true lots overcast,     83  false lots overcast,     64  true lots overcast,     72  true lots overcast,     81 75 false lots 0 1 2 3 attribute ranges with deltaf 4-2024681 conf1 225 treatments 002 attribute.range.conf1 > X 225 treatments|=N 225TAR2 = O\(2 N  225 fails for large N outlook temp humidity wind hours on course Conf1  outlo o k overc a s t   1 0   82  40    84  40   4 0 0  Lots  none Lots  some 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Treatments for golf 0 1 2 3 4 none some lots I f outl ook o verc as t Th en l o t s o f go l f  4 4  0 Least monitor watch the humidityalert if rising over 90 Least change pick a vacation location with overcast weather I f h u m i d i t y  90  97 Th en l o t s o f go l f  1 4  0 1 2 3 none some lots 0 1 2 3 4 5 6 none some lots If n o ch an ge Th en l o t s o f go l f  6 6 3 5  3  Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


16  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 6.7 <= RM < 9.8 And 12.6 <= Ptratio 15.9 BEST ACTION 0.6 <= NOX < 1.9 and 17.16 <= LSTAT < 39 WORST ACTION BASELINE 500 examples  of bad--, bad, ok, good Stop staring at the scenery and tell me where to steer or what to dodge 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Require overall require2 require3 require5 require4     action1 action1, action2, action3,  \205   Cost,    Benefit 1 Y              Y             N,        \205   23200,  250 2           N              N             Y ,       \205   11400,  150 205..       \205             \205            \205        \205   \205         \205 action2 fault2 fault3 fault1 JPL requirements Feather&Menzie Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


17  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case study 99 proposed actions for deep space satellite design; 2 99 10 30 options Each row is one project plan action1, action2, action3,  \205   Cost,    Benefit 1 Y              Y             N,        \205   23200,  250 2           N              N             Y ,       \205   11400,  150 205..       \205             \205            \205        \205   \205         \205 Learnt 225 Do 16 225 Don\222t do 14 225 Ignore 66 options 225 c.f. genetic algorithms Each dot  is one randomly generated project plan 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Pr of tampering 0.02 Pr of fire 0.01 Pr of smoke  given [fi  0.90 Pr of smoke  given [fi  0.01 Pr of report given [exodus=ye 0.75 Pr of report given [exodus=no 0.01 Pr of exodus given [alarm=yes 0.88 Pr of exodus given [alarm=no 0.001 etc tampering fire alarm smoke exodus run away report hello, operator I want to report a fire 0.02 0.01 Use Bayesian analysis to update probabilities given new information Use Bayesian analysis to update probabilities given new information Bayesian Tuning Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


18  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 tampering fire alarm smoke NO exodus report YES 0.50 was 0.02 0.03 was 0.01 Q1: What if there is a report, but no smoke Q1: What if there is a report, but no smoke Q2: What if there is a report, and smoke Q2: What if there is a report, and smoke tampering fire alarm smoke YES exodus 0.03 was 0.02 0.97 was 0.01 report YES Example from : [Poole98   p37 1 Source = http:// www.swi.psy.uva.nl/projects/SWI-Prolog/download.html http://www.cs.ubc.ca/spider/poole/ci/code.tar.gz Files    = code/acp/bnet.pl code/acp/bnet_t1.pl Bayesian Tuning 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Non-na\357ve model bayesian network Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


19  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Low testing effort EXPLAINS 1\ some observed operational defects  and 2\ low pre-release defects 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02  Ancestors  ancestor\(X,Y\:-parent\(X,Y  ancestor\(X,Y\:-parent\(X,Z\ancestor\(Z,Y  Lists  member\(X,[X|Z   member\(X,[Y|Z me mb er X Z   append X X   append\([X|X Y s X Z s  a ppe nd X s Ys Z s  Example Example action action hypothesis hypothesis p\(b,[b add clause p\(X,Y   specialize p\(X,[V p\(x,[a specialize p\(X,[X p\(b,[a add clause p\(X,[X p\(X,[V p\(X W Inductive Logic Programming Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


20  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 East-West trains 1. TRAINS GOING EAST 2. TRAINS GOING WEST 1 2 3 4 5 1 2 3 4 5 1. TRAINS GOING EAST 2. TRAINS GOING WEST 1 2 3 4 5 1 2 3 4 5 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 ILP representation  Example eastbound\(t1  Background theory car\(t1,c1\      car\(t1,c2\       car\(t1,c3\.      car\(t1,c4 rectangle\(c1\  rectangle\(c2\     rectangle\(c3\.   rectangle\(c4 short\(c1\      long\(c2\.          short\(c3\       long\(c4 none\(c1\.        none\(c2\.          peaked\(c3\.      none\(c4 two_wheels\(c1\  three_wheels\(c2\two_wheels\(c3\two_wheels\(c4 load\(c1,l1\.     load\(c2,l2\       load\(c3,l3\    load\(c4,l4 circle\(l1\      hexagon\(l2\       triangle\(l3\    rectangle\(l4 one_load\(l1\  one_load\(l2\.      one_load\(l3\    three_loads\(l4  Output ne\(C Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


21  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Predicting Correctness Almei NewID CN2 C4.5 C4.5_rule FOIL Accuracy 52 54 66 68 73 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 FOIL\222s best rule high\(A executable\(A,B maximum_statement_nesting_depth\(A,C lines_of_comments\(A,B commentsdivsize\(A,E n1\(A,F n2\(A,G less_or_equal\(E,F not less_or_equal\(B,G C <> 4 C <> 43 less_or_equal\(C,D High faults when comment density <= #operators and executable statements > #operators and max nesting <= number of lines of comments and max nesting is not 4 or 43 High faults when comment density <= #operators and executable statements > #operators and max nesting <= number of lines of comments and max nesting is not 4 or 43 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


22  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Inside  some learners  neural nets  genetic algorithms  decision tree learners  association rule learners  treatment learners  bayesian tuning  inductive logic programming 225 sub-symbolic locally guided descent symbolic, global search 225 recursive diversity reduction 225 this goes with that CLASS 225 this goes with that 225 asses 225 a little model goes a long way 225 Horn clauses  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case studies predicting effort \(45 predicting faults \(51 model-based ML \(54 early lifecycle project planning \(60 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


23  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case study How can we estimate earlier in the life cycle  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Predicting development times in months\Srinivasan95 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


24  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Bayes for effort Chulani99  The COCOMO-II project  Open-source software cost estimation  Reuse vs effort XH : multiple product lines VH : across product lines H : across program N : across project L  : none  Regression over data from 83 software projects  Regression conflicted with \223Delphi values\224  Tune regression values using Delphi expectations 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 Low N H VH XH Delphi Regression Adjusted Da ta   reus e low e rs effo r t Ex pe ct e d  reus e incre a se  effo r t    251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 COCOMO-II \(1998\COCOMO-II \(1997 Pred\(30 Pred\(25 Pred\(20 Pred\(X 52 49 46 83 projects 63 59 54 161 projects 7561 68 55 63 48 161 projectsbased on Bayesian 161 projectsbased on Delphi Percentage of estimated effort within X of actual Conclusion data + delphi tuning\a Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


25  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Neural Network Count the wi dge ts in the I n te r f ace to es ti m a te e f f o r t  Labels Edit Boxes Grid Boxes Check Boxes Buttons 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Neural Network Subsystem Pred\(25 MARE Buyer Admin 80 17.6 Buyer Client 80 14.6 Distribution Server 20 96.7 Supplier Client 90 12.2  12 Different Widgets Counted and associated with effort Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


26  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case study: Predicting software 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Predicting software  faults Khoshgoftaar99 Whi c h d o g s di d not ba r k  225 42 attri b ute s  in dat a s e t 225 Only 6 in the l e arnt th e o ry Diffe re nt attri b ute s than b e fore 225 223c au se s f a u l t 224  do m a in s pec i f i c 225 Me thod for fin d ing fa ult s  gen e r a l Whi c h d o g s di d not ba r k  225 42 attri b ute s  in dat a s e t 225 Only 6 in the l e arnt th e o ry Diffe re nt attri b ute s than b e fore 225 223c au se s f a u l t 224  do m a in s pec i f i c 225 Me thod for fin d ing fa ult s  gen e r a l Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


27  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Issue of generality  Specific conclusions may not apply to general projects  Proposal one  Intra-project learning  Lessons should generalize across the same developer methodology, application and tool set  Proposal two  Inter-project learning  Need larger training set  COCOMOII uses 161 projects  Note: two = N * one Khoshgoft good bad Tia bad good  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Model-based ML Bratko89,Pearc Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


28  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Model-based ML simple e.g sum\(X,  Y Z sum   sum   sum\(0 0 0 sum 0  sum 0  sum\(0   sum\(0   sum  Any sum  Any if X >0 X\222=      if X < 0 0 if X= 0  switch\(State,Volts,Amps switch\(on,       0,     Any switch\(off,      Any,   0 blub\(Mode,Light,Volts,Amps bulb\(blown,dark, Any 0 bulb\(ok,     light   bulb\(ok,    light   bulb\(ok,    dark 0 0 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 A qualitative circuit go  :tell\('circ.data'\ go1, told go1 :functor\(X,circuit,9\ forall\(X, example\(X example\(circuit\(Sw1,Sw2,Sw3,B1,B2,B3,L1,L2,L3\classification\(B1,B2,B3,Class format\('~a,~a,~a,~a,~a,~a,~a~n Sw1,Sw2,Sw3,L1,L2,L3,Class  classification\(B1, B2, B3,Class needs 2 our of three bulbs working classification\( ok, ok, B3,   good classification\( ok, B2, ok,   good classification\( B1, ok, ok,   good classification\( B1, B2, B3,   bad Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


29  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Results from > 700 examples circ.names good,bad switch1: on, off switch2: on, off switch3: on, off bulb1: light, dark bulb2: light, dark bulb3: light, dark Command line c4.5 -f circ -m 2 W a t c hing bulb1 tells us th e rest Insight f ul  Or dull W a t c hing bulb1 tells us th e rest Insight f ul  Or dull 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 More Model-based ML Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


30  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 ca n we r e v i s i t thos e warranti e s   Run 1 35,000 tions  Learn 1  Run 2 if Sw2c=off then 3264 tions  Learn 2  Run 2 if Sw2c=off n then 648 tions  Learn 3 Ca n\222t clos e  Sw3c warranty issu es No b u d g e t  for e x p e ns i v e ha rd wa r e 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 3 \223tunings\224 5 SLOC guesstimates 150,000 runs Treatments for software projects Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


31  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 flex=1 pmat=3 sced=2 rest anything from kc1 150,000 runs 150,000 runs Treatments for software projects \(ii 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 pmat=2 acap=2 sced=2 rest anything from kc1 30,000 runs 30,000 runs Treatments for software projects \(iii Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


32  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 ons discussion \(64 downloads \(69 further reading \(71 references \(72 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Will you try ML  Have we motivated you  Will you rush home and do ML on your data  Clearly  ML algorithms work  Caution  you may find it harder than you think Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


33  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Many ways to learn numerous case studies but there is still a problem Theme Learning is a solved problem \(sort of Data collecting and modeling is not 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Be warned match your ML goals to your software process level Project metrics coarse-grain conclusions Product metrics product learning Process metrics process learning Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


34  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Also, match your tool to task Task ML Tool Assembly line robot deciding what to reject Decision tree learner Repair robot trying to do the least to fix the rejected parts Treatment learner Predicting the life of a robot Neural Network Optimizing the assembly line Genetic Algorithm If clustering when no classes iation rule learning If simple background knowledge Bayesian If complex relational background knowledge ILP 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Have we learnt enough  Not yet  But wait Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


35  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Cost = $0  WEKA  E.g. http://www.cs.waikato.ac.nz/~ml/weka/: ML in JAVA 003 decision tree inducers,rule learners, naive Bayes, decision tables locally weighted regression  GDB_Net  http://nas.cl.uh.edu/boetticher/gdb_net.zip  TAR2  http://www.ece.ubc.ca/twiki/bin/view/Softeng/TreatmentLearner  APRIORI  http://fuzzy.cs.uni-magd eburg.de/~borgelt/apriori/apriori.html#download  And many others  E.g. ML  A public domain \223C\224 library of common algorithms  Naive Bayes, ID3, MC4 , Decision Tables ,   Holte's OneR CN2,\205  http://www.sgi.com/tech/mlc/utils.html 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Cost > $0  C4.5  Comes with the book Quinlan  C5.0  http://www.rulequest.com/download.html  Microsoft SQL SERVER 2000\231  Comes with numerous machine learning tools  Proprietary algorithms  Etc  223data mining\224 \223commercial software\224 in Google  3,340 links  223data mining consultancy\224 in Google  850 links Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


36  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Further reading  Mendonca  great rev i e w art i cl e on ML  Large list of available tools  All the things you can do with a decision tree [Menzies0  Treatment learning: [Menzies01a  Michalski\222s excellent survey of ML types [Michalski  Neural nets: [Boetticher01  Special issue SEKE journal, knowledge discovery Morasca99  Inductive logic programming [Bergadano95,Cohen95  Come by IJCAI 2011 and I\222ll tell you all about it\222s applications  Genetic algorithms: [Goldberg8  Bayesian learning [Cheeseman88 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 References  Agrawal  Agrawal, R., and T.Imeilinski and A.Swami \223Mining Association Rules between Sets of Items in Large Databases,\224 Proceedings of the 1993 ACM SIGMOD Conference Washington DC, USA  Bergadan  Bergadano, F., and D.Gunetti Inductive Logic Programming: From Machine Learning to Software Engineering The MIT Press, 1995  B  Berry, M. J. A., and G., Linoff Data Mining For Marketing, Sales, and Customer Support John Wiley Sons, Inc., New York, 1997  Boetticher01  Boetticher, G., "An Assessment of Metric Contribution in the Construction of a Neural Network-Based Effort Estimator Second International Workshop on Soft Computing Applied to Software Engineering  Enschade, NL, 2001 Available from http://nas.cl.uh.edu/boetticher/publications.html  Boetticher01  Boetticher, G., "Using Machine Learning to Predict Project Effort: Empirical Case Studies in Data-Starved Domains First International Workshop on Model-based Requirements Engineering San Diego, 2001 Available from http://nas.cl.uh.edu/boetticher/publications.html  Bradley  Bradley, P., U. Fayyad, and C. Reina. \223Scaling clustering algorithms to large databases\224. In KDD'98  B  Bratko, I., I. Mozetic, and N. Lavrac KARDIO: a Study in Deep and Qualitative Knowledge for Expert Systems MIT Press, 1989  Breim  Breiman, L., J. Friedman, R. Olshen, C. Stone, \223Classification and Regression Trees,\224 Wadsworth International Group, 1984 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


37  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 References  Burgess  Burgess, C.J., and Martin Lefley. \223Can genetic programming improve software effort estimation? A comparative evaluation,\224 Information and Software Technology er 2001  Cheesem  P. Cheeseman, D. Freeman, J. Kelly, M. Self, J. Stutz, and W. Taylor. \223Autoclass: a bayesian classification system,\224 In Proceedings of the Fifth International Conference on Machine Learning  Morgan Kaufman, 1988  Chulani  S.Chulani,  B. Boehm, and B. Steece 223Bayesian analysis of empirical software engineering cost models,\224 IEEE Transaction on Software Engineering 25\(4\ly/August  1999  Cohe  W. W. Cohen, \223Inductive specification recovery: Understanding software by learning  from example behaviors,\224 Automated Software Engineering 2:107-129, 1995  DeJon  DeJong, K.A., and Spears, W.M. "An Analysis of the Interacting Roles of Population Size and Crossover in Genetic Algorithms Proc. First Workshop Parallel Problem Solving from Nature  Springer-Verlag, Berlin, 1990  Dietteric  Dietterich, T. G., \223Machine Learning  Research: Four Current Directions,\224 AI Magazine 18 \(4\97 Pp. 97-136. Available from ftp://ftp.cs.orst.edu/pub/tgd/papers/aimag-survey.ps.gz  s  Feather, M.S., and T. Menzies: \223Converging on the Optimal Attainment of Requirements IEEE Joint Conference On Requirements Engineering  ICRE'02 and  RE'02 9-13th September, University of Essen, Germany, 2002. Available from http://tim.menzies.com/pdf/02re02.pdf 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 References  Fenton00  Fenton, N., and  M. Neil \223Software Metrics: A Roadmap,\224 International Conference on Software Engineering, 2000. Available from http://www.dcs.qmul.ac.uk/~norman/papers/metrics_roadmap.pdf  Goldberg  Goldberg, D.E Genetic Algorithms in Search, Optimization, and Machine Learning Addison-Wesley Reading, Massachusetts, 1989  Khoshgoftaar  Khoshgoftaar, T.M., and E.B. Allen. \223Model software quality with classification trees,\224 in H. Pham, editor 223Recent Advances in Reliability and Quality  Engineering\224, World Scientific, 1999  Mendonc  Mendonca, M., and N.L. Sunderhaft, \223Mining Software Engineering Data: A Survey,\224 A DACS State-ofthe-Art Report September 1999. Available from http://www.dacs.dtic.mil/techs/datamining  Menzie  Menzies, T., \223Practical Machine Learning for Software Engineering and Knowledge Engineering,\224 ftware Engineering and Knowledge Engineering volume 1, 2001\vailable from http://tim.menzies.com/pdf/00ml.pdf  Menzies01a  Menzies, T., and Y. Hu, \223Reusing models for requirements engineering,\224 First International Workshop on Model-based Requirements Engineering 2001. Available from http://tim.menzies.com/pdf/01reusere.pdf  Menzies01b  Menzies, T., and Y. Hu, \223Constraining discussions in requirements engineering,\224 First International Workshop on Model-based Requirements Engineering San Diego, 2001. Available from http://tim.menzies.com/pdf/01lesstalk.pdf  Menzie  Menzies. T., and J. Kiper, \223Better reasoning about software engineering activities,\224 Automated Software Engineering 2001. Available from http://tim.menzies.com/pdf/01ml4re.pdf Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


38  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02  Michalski90   Michalski, R.S., \223Toward a unified theory of learning,\224  In B.G. Buchanan and D.C. Wilkins, editors 223Reading in Knowledge  Acquisition and Learning\224, pages 7--38. Morgan Kaufmann, 1993  Mitchell  Mitchell, T Machine Learning McGraw-Hill, 1997  Morasca99  Morasca, S., and Gunther Ruhe, Guest editors' introduction of the Special issue on \223Knowledge Discovery from Software Engineering Data,\224 International Journal of Software Engineering and Knowledge Engineering October, 1999  Pearce  Pearce, D., \223The induction of fault diagnosis systems from qualitative models,\224 in Proc. AAAI-88 1988  Poole9  Poole, D. L.,  A. K. Mackworth, and R. G. Goebel Computational Intelligence: A Logical Approach  Oxford University Press, New York, 1998  Porter9  Porter, A.A., and R.W. Selby  \223Empirically guided software development using metric-based classification trees,\224 IEEE Software Pp. 46-54, March 1990  Quinla  Quinlan, R C4.5: Programs for Machine Learning Morgan Kaufman, 1992  Srinivasa  Srinivasan, K., and D. Fisher,  \223Machine learning approaches to estimating software development effort,\224 IEEE Transactions on Software Engi neering Pp. 126-137, February 1995  Tian9  Tian, J., and M.V. Zelkowitz 223Complexity measure evaluation and selection,\224 IEEE Transactions on Software Engineering 21\(8\p. 641-649,  August 1995  Webb0  Webb, G., \223Efficient search for association rules,\224 Proceeding of KDD-2000 Boston, MA,  2000  Zhang0  Zhang, Du, \223Applying Machine Learning Algorithms in Software Development,\224 Modelling Software System Structures in a fastly moving scenario Santa Margherita Ligure, Italy, 2000 References Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


