Concise Representation of Frequent Patterns based on Disjunction-free Generators Marzena Kryszkiewicz Institute of Computer Science Warsaw University of Technology Nowowiejska 15/19,00-665 Warsaw, Poland mkr@ii.pw.edu.pl Abstract Many data mining problems require the discovery of frequent patterns in order to be solved Frequent itemsets are useful in the discovery of association rules episode rules sequential patterns and clusters The number of 
frequent itemsets is usually huge Therefore it is important to work out concise representations of frequent itemsets In the paper we describe three basic lossless representations of frequent patterns in an uniform way and ofer a new lossless representation of frequent patterns based on disjunction-free generators The new representation is more concise than two of the basic representations and more efficiently 
computable than the third representation We propose an algorithm for determining the new representation 1 Introduction Many data mining problems require the discovery of frequent patterns in order to be solved. Frequent itemsets are useful in the discovery of association rules episode rules sequential patterns and clusters etc see 6 for overview Nevertheless the number of frequent itemsets is usually huge Therefore it is important to work out concise preferably lossless representations of frequent itemsets Recently there 
have been investigated the following interesting subsets of frequent itemsets: closed itemsets \(see e.g 2,8-9 generators \(see e.g 2,8 and the representation based on disjunction-free sets 5 Both frequent closed itemsets and the disjunction-free sets representation are lossless representations in the sense that they allow derivation and support determination of all frequent itemsets without accessing the database The frequent generators themselves do not possess this property unless augmented by the set of minimal 0-7695-1 119-8101 17.00 0 2001 
IEEE 305 infrequent generators Applications of frequent closed itemsets and frequent generators have been demonstrated in the case of the discovery of association rules and their essential subsets see e.g 7-8,lO-113 In particular in the case of representative association rules 7 and informative basis SI the antecedent of any such rule is a generator whle the consequent is a closed itemset decreased by the items present in the rule\222s antecedent In this paper we introduce yet 
another lossless representation of frequent itemsets that benefits both from the properties of generators and disjunction-free sets We prove that the new representation constitutes a subset of the generators representation and the disjunction-free sets representation On the other hand the frequent closed itemsets representation may happen to be either more concise or less concise depending on particular data Conciseness of the frequent closed itemsets representation has been proved experimentally see e.g ll The algorithms for computing this representation require the discovery of frequent generators first \(see e.g 
2,8-91 In 2,8 generators are treated as seeds of closed itemsets that are determined by intersecting database transactions This makes the discovery of frequent closed itemsets inefficient. To the contrary, the new representation does not require such a computational overhead In the paper we propose an algorithm for determining the new representation The layout of the paper is as follows Section 2 introduces the notions and properties of frequent itemsets, closed itemsets and generators, as well as the representations based 
on closed itemsets on generators and on disjunction-free sets In Section 3 we introduce the new representation based on disjunction-free generators and prove that all frequent itemsets and their supports can be derived from it In Section 4 we prove that the new representation is not less concise than the ones based on generators and on disjunction-free sets An algorithm for determining the new representation is presented in Section 5 Section 6 concludes the results 


2 Basic notions and properties 2.1 Itemsets frequent itemsets Let I i i2  im Z+0 be a set of distinct literals called items In the case of a transactional database a notion of an item corresponds to a sold product while in the case of a relational database an item will be an attribute,value pair Any non-empty set of items is called an itemset An itemset consisting of k items will be called k-itemset Let D be a set of transactions \(or tuples respectively where each transaction \(tuple Tis a subset of Z Without any loss of generality we will restrict further considerations to transactional databases By ID we will denote a subset of items in I that occurred in D at least once Support of an itemset X is denoted by sup\(X and defined as the number of transactions in D that contain X The itemset X is calledfrequent if its support is greater than some user-defined threshold minSup The set of all frequent itemsets will be denoted by F F  XcA sup\(X Property 2.1.1 111 a b Property 2.1.2 Let X,Y,VEI If XcY and sup\(X Y then sup\(Xu V  Yu V Let X,Ycl If XcY then sup\(X  Y If XE F then VYd YE F 2.2 Closures closed itemsets and generators Closure of an itemset X is denoted by y\(X and is defined as the greatest w.r.t set inclusion itemset that occurs in all transactions in D in which X occurs Property 2.2.1 Let XcI b V YGI if XcYcy\(X then sup Y X Proof Ad a Immediate by definition of a closure Ad b By Prop. 2.1.1 a sup\(,y  Y y\(X and by Prop. 2.2 la X 0 The itemset Xis defined closed iff y\(X The set of all a suP\(Y\(X x3 closed itemsets will be denoted by C i.e c  Xd y\(X Let X be a closed itemset A minimal itemset Y satisfying y Y is called a generator of X By G\(X we will denote the set of all generators of X The union of generators of all closed itemsets will be denoted by G i.e G  U{G\(X XEC Example 2.2.1 Let D be the database from Table 1. The itemset A,B,C,D,E is closed since y A,B,C,D,E A,B,C,D,E The itemsets A,B,C and A,B,C,D are not closed because y\({A,B,C and y A,B,C,D respectively The support of A,B,C and A,B,C,D is the same as the support of their closure A,B,C,D,E and is equal to 3 A,B,C is a minimal subset the closure of which equals to 0 A,B,C,D,E  Hence  A,B,C E G A,B,C,D,E I Id I Transaction I Table 1 Example database D Property 2.2.2 SI Let Xd y\(X TzX n{YcA YECAY~X Property 2.2.2 states that the closure of an itemset X can be computed 1\as the intersection of the transactions in D that are supersets ofX or 2 as the intersection of the closed itemsets that are supersets ofX Property 2.2.3 Let XGZ XEG iffsup\(X f min{sup\(Al{A AEIY Property 2.2.4 Let XcI XEG iff VYd sup\(X Y Proof By Property 2.2.3 and Property 2.1 la 0 Lemma 2.2.1 Let X,YcZ IfXcYg\(X then VZaY, ZeG Proof By contradiction Let XcYcy\(X and ZEG Z=YuV Yn V=0 Since XcYcy\(,Y then sup\(Y x by Property 2.2.lb and sup\(z Yuv Xuv by Property 2.1.2\Hence Xu V whch is a proper subset of Z=YuV has the same support as Z Then by Property 2.2.4 Ze G which contradicts the assumption 0 Lemma 2.2.2 If XcY and sup Y X then y Y a Proof Let XcY and sup\(Y X Then the set of transactions in D in which X occurs, say D\222 equals to the set of transactions in which Y occurs. Thus by definition of a closure y\(X as well as y\(Y are the greatest itemset that occurs in all transactions in D\222 Hence y Y X 0 Theorem 2.2.1 LetXcZ IfXEG then VYm YEG Proof By contradiction Let XEG and Yd such that YEG. Then by Property 2.2.4 there is some ZcY such that sup\(Z Y Hence by Lemma 2.2.2 y\(Z Y and thus ZcYg\(Y z By Lemma 2.2.1 we conclude that X which is a superset of Y is not a generator This Theorem 2.2.1 states that subsets of generators are conclusion contradicts the assumption 0 generators \(a different proof was provided in 2 306 


Property 2.2.5 Let XzI a sup\(X  max{sup\(r YEC A Yza b sup\(X  min\(sup\(Y YEG A Ym Proof Ad a Let Z=y\(X Then ZzX and ZEC Thus Z by Prop 2.2.la and sup\(X y for every YE C such that YzX by Prop 2.1.1 a Therefore sup\(X Y YEC A Yza Ad. b Let ZG such that Z\200G\(y\(X Then ZEG and ZOq@i z Thus sup\(X Z by Prop 2.2.1 b Y for every YEG Yfl\(by Prop. 2.1.1a 0 Hence in order to compute support of any itemset it is sufficient to know either supports of all closed itemsets or supports of all generators Therefore sup\(X Y YEC A Yg 2.3 Closed itemsets representation Most research on concise representations of frequent itemsets was devoted to closed itemsets Here we will present this representation An itemset X is defined to be frequent closed iff X is closed and frequent. In the sequel the set of all frequent closed itemsets will be denoted by FC i.e FC  FnC Closed itemsets representation is defined as the set FC enriched by the information on support for each XE FC The property below is an immediate consequence of Property 2.2.5a and shows how to determine if an itemset is frequent and if so how to determine its support based on the closed itemsets representation Property 2.3.1 Let Xcl 0 Otherwise XE F If there is ZEFC such that ZzX then XEF and sup\(X  max\({sup\(Y Generators representation Generators are commonly used as an intermediate step for the discovery of closed itemsets However the generators themselves can constitute a concise lossless representation of frequent itemsets Below we introduce such a generators representation Frequent generators denoted by FG, are defined as FG  FnG Negative generators border denoted by GBd is GBd XEG~XEFA\(VYCY YEFG GBd consists of all minimal w.r.t set inclusion defined as follows infrequent generators Generators representation is defined as 0 0 the border set GB6 It can be proved that the generators representation as introduced here is equivalent to the approximate free sets representation 3-41 for 60 in which case the approximate representation becomes lossless The property below is an immediate consequence of Property 2.2.5b and shows how to determine if an itemset is frequent and if so how to determine its support based on the generators representation Property 2.4.1 Let XE the set FG enriched by the information on support for each XE FG the set ID of items that occurred in D If ID or 326 GBd Zfl then XE F Otherwise XE F and sup  min sup Y YE FG A Y 2.5 Disjunction-free sets representation The notion of disjunction-free sets was introduced in SI Let us present this concept by means of an auxiliary notion called a 2-disjunctive rule X3AlvA2 is defined a 2-disjunctive rule if XcI A1,Az Xn{AI,Az}=O Observe, that a 2-disjunctive rule X=AlvAz can have an empty antecedent X=0 and its consequents can be equal A I=A2 Support of XaA,vAz denoted by sup\(XaAIvA2 is defined as the number of transactions in D in which X occurs together with AI or Az that is SU~\(X~AIVA  SUP\(XLJ{AI  SU~\(XU{A  suP\(Xu{AIJlz Confidence of the rule X=AIvAz denoted by condX3A IvAz is defined as follows condXzA IvAz  sup\(X3A IvA X X3AlvA2 is defined a certain rule if confiX=AIvYz Thus X3AIvA2 is certain if each transaction containing X contains also AI or A2 Example 2.5.1 Let us consider the database D from Table 1 To make the notation brief we will write itemsets without brackets and commas \(e.g AC instead of A,C Let us consider the 2-disjunctive rule 03AvA The rule is not certain since there is a transaction T6 that contains 0 and does not contain A On the other hand 0aAvC is a certain rule as each transaction in D contains A or C Similarly CaDvE is a certain rule since each transaction containing C contains also D or E 0 Property 2.5.1 5 X=AlvA2 is certain iff sup\(X  sup\(Xu{A 11  sup\(~442 1 sup\(XLJ{A IJld 1 307 


Property 2.5.2 SI If XsAlvAz is certain then VZIX Z3AlvAz is also certain Example 2.5.2 Let us consider the database D from Table 1 The rule C~DVE is certain, thus ACzDvE and ABCsDvE and so forth\are also certain rules 17 An itemset Xis defined disjunctive iff there are A,BEX such that A\(A,B}aAvB is a certain rule. Otherwise, the itemset is called disjunction-free The set of all disjunction-free sets will be denoted by DFree Example 2.5.3 Let us consider the database D from Table 1 and the itemset DE The only 2-disjunctive rules involving all items in DE are 03DvE DsEvE E-DvD The rule EzDvD is not certain however Q~DVE and DsEvE are certain thus DE is a disjunctive set \(i.e DEeDFree Now since 03DvE is certain in D then by Property 2.5.2 AaDvE is also certain. Hence ADEe DFree Similarly we can conclude ACDEeDFree and so forth The property below generalizes this observation U Property 2.5.3 151 a b are defined as If XE DFree then V YSf YE DFree If XE DFree then V Yd YE DFree Frequent disjunction-free itemsets denoted by FDFree FDFree  DFreenF Negative border of FDFree is denoted by DFreeBd and DFreeBd  XcA XG FDFree A V YcX YE FDFree  Disjunction-jiree sets representation is defined as the set FDFree enriched by the information on support for each XE FDFree the border set DFreeBd enriched by the information on support for each XE DFreeBd the set ID of items that occurred in D The disjunction-free sets representation is sufficient to determine all frequent itemsets and their supports 5 defined as 3 New representation of frequent itemsets based on disjunction-free generators In this section we will introduce a new representation of frequent itemsets based on frequent generators that are disjunction-free sets We will prove that the new representation is sufficient to derive all frequent itemsets Disjunction-free generators denoted by DFreeG are  For the original definition of a disjunction-free set see 5 Based on Lemma 3 in 5 we propose an equivalent definition that is more suitable for further presentation defined as follows DFreeG  DFreenG Property 3.1 If XE DFreeG then VYcX YE DFreeG Proof By Theorem 2.2.1 and Property 2.5.3b U Frequent disjunction-free generators denoted by FDFreeG are defined as FDFreeG  DFreenFnG Property 3.2 If XE FDFreeG then V Yd YE FDFreeG Proof By Property 2.1.1 b and Property 3.1 0 Negative infrequent generators border denoted by IDFreeGBd is defined as follows IDFreeGBd  XE GI XE F A V Yd YE FDFreeG  IDFreeGBd consists of all minimal \(w.r.t. set inclusion infrequent generators the subsets of which are disjunction free generators Negative frequent generators border denoted by FDFreeGBd is defined as FDFreeGBd  XE GI XE F A XE DFreeG A VYd YEFDFreeG DFreeGBd consists of all minimal w.r.t set inclusion Let us note that IDFreeGBd n FDFreeGBd  0 Disjunction-free generators representation is defined as the set FDFreeG enriched by the information on support for each XE FDFreeC the border set FDFreeGBd enriched by the information on support for each XE FDFreeCBd the border set IDFreeGBd the set ID of items that occurred in D frequent disjunctive generators Theorem 3.1 The disjunction-free generators representation is sufficient to determine for any itemset if it is frequent and if so to determine its support Proof constructive Any itemset X that is not a subset of ID is infrequent In the sequel of the proof we assume Xzl The proof will be made by induction on N Induction hypothesis For every itemset Va we can determine if it is frequent or not, and if V is frequent then we can determine its support 0 One can distinguish the following five cases If XE FDFreeC then XE F and sup\(X is known If XE FDFreeGBd then XE F and sup\(X is known If 3 YEIDFreeGBd Yfl then XE F If 42~IDFreeGBd ZG and 3 YE FDFreeGBd Yd then X is a disjunctive set as a superset of some disjunctive itemset in FDFreeCBd by Property 2.5.3a Let YE FDFreeGBd and Yd Hence, there are some items A,BEY such that the 308 


rule M{A,B}zAvB is certain Let A and B be such items Then by Property 2.5.2 A{A,B}=AvB is also certain and sup\(X A  A   A  B  sup\(A{A,B By induction hypothesis we can determine if A{A A{B and A{A,B are frequent and if so we can determine their supports If any of these itemsets is not frequent then XgF Now if all the three itemsets are frequent then sup\(X can be determined according to the formula above If sup\(X then XE F otherwise Xg F Let XBFDFreeG and 4ZEFDFreeGBd vIDFreeGBd ZO Then no generator being a subset of X is a superset of any ZEFDFreeCBd UIDFreeGBd Hence all generators being subsets of X are contained in FDFreeG By Property sup\(Y YEG A Ya In our case this equation is equivalent to sup\(X min sup\(Y YE FDFreeG A YM Clearly XE F as sup\(X is equal to the support of some frequent The proof of Theorem 3.1 can be treated as a naive algorithm for determining frequent itemsets and their supports Example 3.1 Given minSup=l the following disjunction free generators representation will be discovered in the database D from Table 1 The information on supports of the itemsets is provided in the form of a subscript disjunction-free generator 0 FDFreeG  Q A5 B5 C5 D5, H2 Id FDFreeGBd  AB AC4 BC4, BD4 CO IDFreeGBd  F G BH BI ID  ABCDEFGHI Thus the disjunction-free generators representation consists of 17 itemsets Below we illustrate how to use this representation for evaluating the itemsets ACDF and ACD The itemset ACDF is infrequent as it is a superset of the itemset Fin IDFreeGBd 0 The itemset ACD is a superset of ACEFDFreeGBd so ACD is disjunctive The following 2-disjunctive rule is certain for AC 0aAvC Hence D-.AvC is a certain 2-disjunctive rule for ACD Thus sup\(ACD sup\(AD CD D AD We note that ADgFDFreeG and there is no subset of AD in the border FDFreeGBdvIDFreeGBd Hence sup\(AD  min\({sup\(Y YEFDFreeG A YeD  min{sup\(0 A D 5 Finally sup\(ACD 5+4-5=4 0 In the disjunction-free generators representation all infrequent items are kept in IDFreeGBd An alternative more concise representation of frequent itemsets will not contain this information Below we specify such a reduced disjunction-free generators representation FDFreeG\222  FDFreeG FDFreeGBd\222  FDFreeGBd IDFreeGBd\222  IDFreeGBd   A I A E ID A Aim ID\222=ID AEIDJ A}EF We observe that only IDFreeGBd and ID are reduced in this representation The reduced disjunction-free generators representation can be used for retrieving frequent itemsets the same way as the original one Example 3.2 Given minSup=l the following reduced disjunction-free generators representation will be obtained for the database D from Table 1  IDFreeGBd\222  BH BI FDFreeG\222  06 A5 B5 C5 Dg H2 12 FDFreeGBd\222  AB4 AC4 BC4 BD4 CD.41 ID\222  ABCDEHI Let us note that the infrequent items F and G do not 0 occur in the reduced representation 4 Disjunction-free generators versus generators and disjunction-free sets In this section we investigate the relationship between generators and disjunction-free sets and compare the disjunction-free generators representation with the generators and the disjunction-free sets representations Theorem 4.1 Let XcI a b c DFreeG  DFree Proof Ad a IfXeG then 3Ad sup\(A{A A\222 by Property 2.2.3\Thus A{A}-.AvA is a certain disjunctive rule So Xg DisFree Ad b By Theorem 4.1 a X62 G implies XB DisFree Now XgG implies X~DisFree iff 1XPG v XgDisFree iff XE DisFree v XE G iff XE DisFree implies XE G 0 Theorem 4.1 states an interesting fact that each disjunction-free set is a generator The proposition below compares the disjunction-free generators representation with the generators representation Proposition 4.1 a FDFreeG v FDFreeGBd c FG b IDFreeGBd c GBd c FDFreeG U FDFreeGBd v IDFreeGBd v ID E Proof By definitions of the disjunction-free generators representation and the generators representation  0 If XB G then XE DFree If XE DFree then XE G Ad c Follows immediately from Theorem 4.lb FG v GBd v ID 309 


It follows from Proposition 4 I that the disjunction-free generators representation constitutes a subset of the generators representation Example 4.1 Let us assume minSup=l The following generators representation will be discovered in the database D from Table 1  FG  ab A5,Bs C5 Ds H2,I2 AB4 AC4 BC4, BD4 CD4 ABC3 BCD31 GBd  F G BH BI 1  ABCDEFGHI The generators representation consists of 19 itemsets In comparison with the disjunction-free generators representation see Example 3 l the generators representation contains 2 more itemsets the underlined ones 0 In order to compare the new representation with the disjunction-free sets one below we specify properties of sets characteristic for these representations Lemma 4.1 a IDFreeGBd  XEGI XgF A VYd y~FDFree b FDFreeGBd  XEGI XEF A XgDFree A VYd YE FDFree c DFreeBdV  XcA Xg F A V YcX YE FDFree d DFreeBdnF  XzA XEF A XgDFree A VYd YE FDFree  Proof Ad a By Theorem 2.2.1 if an itemset X is a generator then all its subsets are generators Thus XEGI XEF A VYd YeFDFree  XE GI XE F A V YcX YE FDFreeG  IDFreeGBd Ad b Similar to that for the case a Ad c d Immediate by definition of DFreeBd 0 Now we are able to compare both representations Proposition 4.2 a FDFreeG  FDFree b FDFreeCBd z DFreeBdnF c IDFreeGBd  DFreeBdV d FDFreeG v FDFreeGBd v IDFreeGBd v  ID FDFree v DFreeBd U ID Proof Ad a Follows immediately from Theorem 4.1 c Ad b\Immediate from Lemma 4.1 b d Ad c We will prove that tDFreeCBd=DFreeBd\\F by showing the equivalence of the following sets XE GI XE F A VYcX YE FDFree and XcA Xg F A VYcX YEFDFree that are equal to IDFreeGBd and DFreeBdV respectively by Lemma 4.la,c Let X be an infrequent itemset whose all proper subsets are frequent Then V YcX sup Y X By Property 2.2.4, each such itemset Xis a generator The set Xa XE F A VYcX YE FDFree consists of infrequent itemsets whose proper subsets are frequent Thus, each itemset in XzAXgF A VYd YEFDFree is a generator. Hence XzA XEF A VYcX YEFDFree XEGI XEFA VYcX YEFDFree 0 As follows from Proposition 4.2 the disjunction-fiee generators representation constitutes a subset of the disjunction-free sets representation. Surprisingly the both representations differ solely on the parts of the respective negative borders that contain frequent itemsets Example 4.2 Let us assume minSup=l The following disjunction-free sets representation will be discovered in the database D from Table 1  DFreeBdnF  6,AB4,AC4,AD5,AH2,A12 BC4 Ad d Immediate from Proposition 4.2a-c FG  6 A5 B5 C5 D5 H2 h BD4 CD4 CH2 cl27 DH2 m2 H21 DFreeBdV   F G BH BI ID  ABCDEFGHI The disjunction-free sets representation consists of 26 itemsets In comparison with the disjunction-free generators representation see Example 3 l the disjunction-free generators representation contains 9 more itemsets the underlined ones In accordance with Proposition 4.2 all the redundant itemsets belong to DFreeBdnF 0 5 Computing disjunction-free generators representation 5.1 Algorithmic properties of disjunction-free generators representation In this subsection we provide properties that will be used in the algorithm determining the disjunction-free generators representation Lemma 5.1.1 Let XcI The following statements are equivalent 3A~Xsuch thatA{A}=AvA is a certain rule 3A~Xsuch that sup\(x  sup\(A{A e XEG Proof AEX such that A{A is a certain rule iff sup\(X A{A X\\{A A{AJi iff sup\(x 0 Lemma 5.1.2 a 0~DFree b EG c Proof Ad a There is no 2-disjunctive rule involving only 0 and no more items. Hence XEDFree Ad b\Immediate from Lemma 5.1.2a and Theorem 4.lb Ad c a Immediate from Theorem 4.1 b t A}EG then D-AvA which is the only sup\(A{A iffXEG by Property 2.2.3 Let AEI A EDFree iff A EG 310 


2-disjunctive rule that can be built from A is not certain 0 Lemma 5.1.3 Let XEG The following statements are equivalent Xis a disjunctive set A,BEX such that A+B and X\\{A,B}sAvB is a certain rule A,BEX such that A+B and sup\(X A{A sup\(A{BI  fi{A,B Proof Immediate by definition of a disjunctive set and Lemma 5.1.1 0 by Lemma 5.1.1 Thus A E DFree 5.2 Algorithm for determining disjunction-free generators representation The outline of the DFreeCenApriori algorithm we propose is similar to that of Apriori see l It differs from the original algorithm by additional constraints that guarantee the resultant set to be restricted to the frequent disjunction-free generators and their border instead of the whole set of frequent itemsets In the algorithm we use the following notation FDFreeGk FDFreeCBdk IDFreeGBdk  k-itemsets in the respective components of the disjunction-free generators representation ck  candidate frequent disjunction-free k-generators The itemsets are assumed to be kept in an ascending order With each itemset c there are associated the following fields sup  support of c minSubSup  minimum of the supports of the proper subsets of c The DFreeCenApriori algorithm starts with checking if the number of transactions in D is greater than minSup If so then 0 is frequent By Lemma 5.1.2a-b 0 is a disjunction-free generator Hence 0 is included in FDFreeCo provided 0 is frequent Next all items in D are identified and stored as I-candidates in C Their union determines ID By Property 2.2.3 each itemset in C is a generator if its support differs from sup\(0 In addition Lemma 5.1.2 guarantees that each generator in C is a disjunction-free set Hence each generator in CI is added to the set of frequent disjunction-free generators FDFreeCI if its support is sufficiently high. Otherwise it is included in the negative infrequent generators border IDFreeGBd Next the 2-candidates C are created from FDFreeC by the AprioriCCen algorithm see Subsection 5.3 Now the following steps are performed level-wise for all k-candidates for k22 1 Supports for the candidate k-itemsets Ck are determined by a pass over the database see proc Supportcount The k-candidates ck the support of which differs from the supports of their proper subsets c.sup;t c.minSubSup are found generators by Property 2.2.3 Infrequent k-generators in Ck are added to the negative infrequent generators border IDFreeCBdk The IsDis function determines for each frequent k-generator if it is disjunctive see Subsection 5.4 Frequent disjunctive k-generators are added to the negative frequent generators border FDFreecBdk The remaining frequent k-generators are disjunction free and hence, they are added to DFreeGk The AprioriGGen function is called to generate the candidate k+l ck+l from the frequent disjunction free k-generators FDFreeCk and to initialize the minSubSup field for each new candidate see Subsection 5.3 AprioriCCen follows Property 3.2 to guarantee that the k+l include all itemsets having all their subsets in FDFreeCk The algorithm ends when there are no more candidates Algorithm DFreeCenApriori\(var FDFreeC FDFreeCBd FDFreeG   FDFreeGBd   IDFreeCBd   ID 0 if ID1  rninSup then begin IDFreeCBd ID 0.sup  ID FDFreeGo  0 C   1-itemsets in D with rninSubSup initialized to 0.sup forall candidates ceCI do begin ID=UCi SupporrCount\(C if cmp  0.sup then  c is a generator if csup 5 minSup then add c to IDFreeCBd or remove c from ID if computing the reduced representation else add c to FDFreeCl endif endif endfor C  AprioriCCen\(FDFreeC for k  2 ck  0 k do begin SupportCount Ck forall candidates CGck do if c.sup  c.rninSubSup then  c is a generator if c.sup I rninSup then add c to IDFreeGBdk elseif IsDis\(c FDFreeGk  FDFreeCk.2 then else add c to FDFreeCk endif add c to FDFreeCBdk endif endfor ck+l  AprioriGGen\(FDFreeCk endfor FDFreeG  uk FDFreeGk  FDFreeCBd  uk FDFreeGBdk  IDFreeCBd  uk IDFreeCBdk  endif return FDFreeG FDFreeCBd, IDFreeGBd I 311 


procedure SupportCount\(var ck forall transactions teD do forall candidates ceck do if c t then c.count endif end for end for endproc Let us observe that an algorithm for computing the reduced disjunction-free generators representation would differ only slightly from the presented DFreeCenApriori algorithm The only change would occur for candidate infrequent 1 generators Such candidates should be discarded from 1 instead of being added to IDFreeGBdl 5.3 Generating candidates The AprioriGGen function is similar to AprioriGen see l for details The difference consists in additional computing the value of minSubSup field For each new candidate c minSubSup is assigned the minimum from the supports of the proper subsets of c function AprioriCCen\(Gk forallf h EGk do iff[l]=h 11 A  f[k-l]=h[k-l f[k]<h[k then begin c Al]*A2 A k]*h[k add C to ck+l endif endfor I Pruning I forall CEC do forall k-itemsets s c c do ifs e Gk then delete c from ck else c.minSubSup  min\(c.rninSubSup s.sup endif endfor endfor return ck+j 5.4 Checking if generator is disjunctive The IsDis function checks if an itemset c provided as the first argument is disjunctive or not It is assumed that c is a frequent generator of the size k22 The second and thrd arguments FDFreeGk.I FDFreeGk.z contain all frequent disjunction-free generators of the size k-1 and k-2 respectively Let us note that for every pair gl,gz of different k-1 of c glngz is a k-2 of c IsDis checks if there is a pair gl,gz of different k-1 of c satisfying the equation sup\(c gl sup\(g2 glng2 If so then by Lemma 5.1.3 the itemset c is disjunctive and the function returns true Otherwise c is not disjunctive and the function returns false function IsDis\(k4temset c FDFreeGk.l FDFreeG I Assert c is a frequent generator of the size k 2 2 I forall k-1 g,,g2 c c such that gl f gz do begin determine supports of gl and gz based on FDFreeGk.l determine support of gl ngz based on FDFreeGk if c.sup  g,.sup  g2.sup  glngz then return true endif end for return false 6 Conclusions An overview of concise lossless representations of frequent itemsets was provided The new lossless disjunction-free generators representation was offered It was proved that the new representation constitutes a subset of the generators representation and the disjunction-free sets representation It was also proved that each disjunction-free set is a generator The algorithm for determining the new representation was offered References  11 R Agrawal H Mannila R Srikant H Toivonen A I Verkamo Fast discovery of association rules In Advances in Knowledge Discovery and Data Mining pages 307-328 AAA1 Press, Menlo Park, California, 1996 2 Y Bastide R Taouil N Pasquier G Stumme L Lakhal Mining frequent patterns with counting inference ACM SIGKDD Explorations Vol 2\(2 December 2000 3 J-F. Boulicaut A Bykowski C Rigotti Approximation of frequency queries by means of free-sets In Proc of PKDD 00 pages 75-85 Springer. September 2000 4 J-F. Boulicaut A Bykowski C Rigotti Free-Sets a condensed representation of Boolean data for the approximation of frequency queries Research Report LISI INSA-Lyon, June 2001 5 A Bykowski C Rigotti A condensed representation to find frequent patterns In Proc of the 12th ACM SIGACT SIGMOD-SIGART PODS 01 May 2001 6 J Han M Kamber Datu Mining Concepts and Techniques Morgan Kaufmann Publishers 2000 71 M Kryszkiewicz Closed set based discovery of representative association rules In Proc of IDA 01 Springer, September 2001 81 N Pasquier Data mining Algorithmes dextraction et de rkduction des regles association dans les bases de donnkes These de Doctorat UniversitC Blaise Pascal  Clermont-Ferrand 11 January 2000 91 J Pei J Han R Mao. CLOSET An efficient algorithm for mining frequent closed itemsets In Proc of the ACM SIGMOD DMKD 00 pages 2 1-30 Dallas May 2000 lo J Saquer J S Deogun Using closed itemsets for discovering representative association rules In Proc of ISMIS 00 pages 495-504, Springer October 2000  111 M J Zaki. Generating non-redundant association rules In Proc of the 6th ACM SIGKDD Intl Conf on Knowledge Discovery and Datu Mining pages 34-43 August 2000 312 


In Figures 10 and 11 we see MAFIA is approximately four to five times faster than Depthproject on both the Connect-4 and Mushroom datasets for all support levels tested down to 10 support in Connect-4 and 0.1 in Mushroom For Connect-4 the increased efficiency of itemset generation and support counting in MAFIA versus Depthproject explains the improvement Connect 4 contains an order of magnitude more transactions than the other two datasets 67,557 transactions amplifying the MAFIA advantage in generation and counting For Mushroom the improvement is best explained by how often parent-equivalence pruning PEP holds especially for the lowest supports tested The dramatic effect PEP has on reducing the number of itemsets generated and counted is shown in Table 1 The entries in the table are the reduction factors due to PEP in the presence of all other pruning methods for the first eight levels of the tree The reduction factor is defined as  itemsets counted at depth k without PEP   itemsets counted at depth k with PEP In the first four levels Mushroom has the greatest reduction in number of itemsets generated and counted This leads to a much greater reduction in the overall search space than for the other datasets since the reduction is so great at highest levels of the tree In Figure 12 we see that MAFIA is only a factor of two better than Depthproject on the dataset Chess The extremely low number of transactions in Chess 3196 transactions and the small number of frequent 1-items at low supports only 54 at lowest tested support muted the factors that MAFIA relies on to improve over Depthproject Table 1 shows the reduction in itemsets using PEP for Chess was about an order of magnitude lower compared to the other two data sets for all depths To test the counting conjecture we ran an experiment that vertically scaled the Chess dataset and fixed the support at 50 This keeps the search space constant while varying only the generation and counting efficiency differences between MAFIA and Depthproject The result is shown in Figure 13 We notice both algorithms scale linearly with the database size but MAFIA is about five times faster than Depthproject Similar results were found for the other datasets as well Thus we see MAFIA scales very well with the number of transactions 5.3 Effects Of Compression To isolate the effect of the compression schema on performance experiments with varying rebuilding threshold values we conducted The most interesting result is on a scaled version of Connect-4, displayed in Figure 14 The Connect-4 dataset was scaled vertically three times so the total number of transactions is approximately 200,000 Three different values for rebuilding-threshold were used 0 corresponding to no compression 1 compression immediately and all subsequent operations performed on compressed bitmaps\and an optimized value determined empirically We see for higher supports above 40 compression has a negligible effect but at the lowest supports compression can be quite beneficial e.g at 10 support compression yields an improvement factor of 3.6 However the small difference between compressing immediately and finding an optimal compression point is not so easily explained The greatest savings here is only 11 at the lowest support of Conenct-4 tested We performed another experiment where the support was fixed and the Connect-4 dataset was scaled vertically The results appear in Figure 15 The x-axis shows the scale up factor while the y-axis displays the running times We can see that the optimal compression scales the best For many transactions \(over IO6 the optimal re/-threshold outperforms compressing everywhere by approximately 35 In any case both forms of compression scale much better than no compression Compression on Scaled ConnectAdata Compression Scaleup Connectldata ALL COMP 0 5 10 15 20 25 30 100 90 80 70 60 50 40 30 20 10 0 Min Support  Scaleup Factor Figure 14 Figure 15 45 1 


6 Conclusions We presented MAFIA an algorithm for finding maximal frequent itemsets Our experimental results demonstrate that MAFIA consistently outperforms Depthproject by a factor of three to five on average The breakdown of the algorithmic components showed parent-equivalence pruning and dynamic reordering were quite beneficial in reducing the search space while relative compressiodprojection of the vertical bitmaps dramatically cuts the cost of counting supports of itemsets and increases the vertical scalability of MAFIA Acknowledgements We thank Ramesh Agarwal and Charu Aggarwal for discussing Depthproject and giving us advise on its implementation We also thank Jayant R Haritsa for his insightful comments on the MAFIA algorithm and Jiawei Han for providing us the executable of the FP-Tree algorithm This research was partly supported by an IBM Faculty Development Award and by a grant from Microsoft Research References I R Agarwal C Aggarwal and V V V Prasad A Tree Projection Algorithm for Generation of Frequent Itemsets Journal of Parallel and Distributed Computing special issue on high performance data mining to appear 2000 2 R Agrawal T Imielinski and R Srikant Mining association rules between sets of items in large databases SIGMOD May 1993  R Agrawal R Srikant Fast Algorithms for Mining Association Rules Proc of the 20th Int Conference on Very Large Databases Santiago Chile, Sept 1994  R Agrawal H Mannila R Srikant H Toivonen and A 1 Verkamo Fast Discovery of Association Rules Advances in Knowledge Discovery and Data Mining Chapter 12 AAAVMIT Press 1995 5 C C Aggarwal P S Yu Mining Large Itemsets for Association Rules Data Engineering Bulletin 21 1 23-31 1 998 6 C C Aggarwal P S Yu Online Generation of Association Rules. ICDE 1998: 402-41 1 7 R J Bayardo Efficiently mining long patterns from databases SICMOD 1998: 85-93 8 R J Bayardo and R Agrawal Mining the Most Interesting Rules SIGKDD 1999 145-154 9 S Brin R Motwani J D Ullman and S Tsur Dynamic itemset counting and implication rules for market basket data SIGMOD Record ACM Special Interest Group on Management of Data 26\(2\1997 IO B Dunkel and N Soparkar Data Organization and access for efficient data mining ICDE 1999 l 11 V Ganti J E Gehrke and R Ramakrishnan DEMON Mining and Monitoring Evolving Data. ICDE 2000: 439-448  121 D Gunopulos H Mannila and S Saluja Discovering All Most Specific Sentences by Randomized Algorithms ICDT 1997: 215-229 I31 J Han J Pei and Y Yin Mining Frequent Pattems without Candidate Generation SIGMOD Conference 2000 1  12 I41 M Holsheimer M L Kersten H Mannila and H.Toivonen A Perspective on Databases and Data Mining I51 W Lee and S J Stolfo Data mining approaches for intrusion detection Proceedings of the 7th USENIX Securiry Symposium 1998 I61 D I Lin and Z M Kedem Pincer search A new algorithm for discovering the maximum frequent sets Proc of the 6th Int Conference on Extending Database Technology EDBT Valencia Spain 1998 17 J.-L Lin M.H Dunham Mining Association Rules: Anti Skew Algorithms ICDE 1998 486-493 IS B Mobasher N Jain E H Han and J Srivastava Web mining Pattem discovery from world wide web transactions Technical Report TR-96050 Department of Computer Science University of Minnesota, Minneapolis, 1996 19 J S Park M.-S Chen P S Yu An Effective Hash Based Algorithm for Mining Association Rules SIGMOD Conference 20 N Pasquier Y Bastide R Taouil and L Lakhal Discovering frequent closed itemsets for association rules ICDT 99 398-416, Jerusalem Israel January 1999 21 J Pei J Han and R Mao CLOSET An efficient algorithm for mining frequent closed itemsets Proc of ACM SIGMOD DMKD Workshop Dallas TX May 2000 22 R Rastogi and K Shim Mining Optimized Association Rules with Categorical and Numeric Attributes ICDE 1998 Orlando, Florida, February 1998 23 L Rigoutsos and A Floratos Combinatorial pattem discovery in biological sequences The Teiresias algorithm Bioinfomatics 14 1 1998 55-67 24 R Rymon Search through Systematic Set Enumeration Proc Of Third Int'l Conf On Principles of Knowledge Representation and Reasoning 539 550 I992 25 A Savasere E Omiecinski and S Navathe An efficient algorithm for mining association rules in large databases 21st VLDB Conference 1995 26 P Shenoy J R Haritsa S Sudarshan G Bhalotia M Bawa and D Shah: Turbo-charging Vertical Mining of Large Databases SIGMOD Conference 2000: 22-33 27 R Srikant R Agrawal Mining Generalized Association Rules VLDB 1995 407-419 28 H Toivonen Sampling Large Databases for Association Rules VLDB 1996 134-145 29 K Wang Y He J Han Mining Frequent Itemsets Using Support Constraints VLDB 2000 43-52 30 G I Webb OPUS An efficient admissible algorithm for unordered search Journal of Artificial Intelligence Research 31 L Yip K K Loo B Kao D Cheung and C.K Cheng Lgen A Lattice-Based Candidate Set Generation Algorithm for I/O Efficient Association Rule Mining PAKDD 99 Beijing 1999 32 M J Zaki Scalable Algorithms for Association Mining IEEE Transactions on Knowledge and Data Engineering Vol 12 No 3 pp 372-390 May/June 2000 33 M. J. Zaki and C Hsiao CHARM An efficient algorithm for closed association rule mining RPI Technical Report 99-10 1999 KDD 1995: 150-155 1995 175-186 3~45-83 1996 452 


