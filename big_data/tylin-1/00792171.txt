A Distributed OLAP Infrastructure for E-Commerce Qiming Chen, Umesh Dayal, Meichun Hsu Software Technology Laboratory HP Laboratories Palo Alto, California, USA qchen, dayal, mhsu}@hpl.hp.com Abstract Warehousing and mining sales transaction data to generate summary information, customer profiles, and business rules has become increasingly important in ecommerce. Such summary information and rules have to be extracted from very large collections of transaction data gathered at many distributed sites. This is challenging data mining, both in terms of the magnitude 
of data involved, and the need to incrementally adapt the mined patterns and rules as new data is collected This paper describes a distributed and cooperative data warehousing, OLAP, and data mining infrastructure that addresses these challenges.  Our contributions are as follows. First, we define various new classes of multidimensional and multi-level association rules \(scoped multidimensional, with conjoint items, and functional that can be extracted from customer profiles and are useful for e-commerce applications. Then, we show how customer profiles and different classes of association rules can be computed in a distributed, cooperative 
manner using OLAP tools. Finally, we show how the summaries, profiles, and rules can be incrementally updated as new transaction data is collected. This infrastructure has been prototyped at HP Labs 1  Introduction Mining transaction data to generate summary information, customer profiles and business rules benefits both merchants and customers [2,3,9,1 d has become increasingly important in e-commerce. For example, customer profiles can be used to derive shopping behavior patterns to guide personalized 
marketing, commercial promotion and fraud detection association rules can be used to identify opportunities for cross-selling, explain causes of sudden sale increases or drops, analyze trends, etc. Such summary information and rules have to be extracted from very large collections of transaction data gathered at multiple distributed sites. To create and incrementally update the information, typically hundreds of millions of transaction records may have to be processed daily 1,4,6,1 Such ap p licatio ns have c h alle n g ed d a ta 
mining in several aspects One challenge is to provide continuous rather than one-time value to e-commerce. Currently most data mining efforts are focused on analyzing historical data In reality, however, data are continuously collected, and it is important to mine the data continuously to detect trends and changes dynamically in real-time. For instance, a cross-sale association rule describes the relationship of the sales of one item to the sales of another. While such relationships are helpful for making planning and promotion decisions, the 
changes of crosssale associations may be even more significant, since such changes usually reflect real-time trends, the reaction to a promotion, or the cause of sales drops or rises.  For example, suppose the sales of VCRs had been strongly associated with the sales of TVs, but this association has recently weakened as TV buyers turn to buying DVDs instead of VCRs. Such a change in the association helps to explain or predict the slow down of VCR sales. To catch such dynamic association relationships requires us to do association rule mining 
continuously and incrementally Another challenge is scaling to very large data sets. In a shopping network, a huge volume of transaction records must be processed every day, and it is unlikely that centralized processing will yield satisfactory performance. The scalability issue becomes even more critical to providing the real-time data mining service described above. In order to scale up, it is necessary to distribute data processing, reduce data volumes at each local site by summarization, and mine data incrementally at multiple levels of aggregation 
These challenges have motivated us to develop a distributed and cooperative data-warehouse, OLAP and data mining infrastructure. This infrastructure involves multiple Local Data-warehouse/OLAP Stations LDOS\d a Global Data-warehouse/OLAP Station GDOS\\(in practice these stations may be organized in a multilevel hierarchy, but for simplicity in this paper 


we consider only two levels\Although various data mining results may be generated, in this paper we focus on the generation and incremental update of customer shopping behavior profiles and cross-sale association rules derived from these profiles LDOSs are typically divided by geography  The transaction data from the area covered by an LDOS are summarized and reduced in volume, and the resulting summary information, partial customer profiles including the local data for mining association rules, are sent to the GDOS to be used in combination with the data sent in by other LDOSs. Thus, LDOSs serve as distributed data collection, aggregation and reduction stations. They dramatically improve the parallelism of data mining and reduce the data load and computation load on the GDOS The GDOS integrates the summary information or partial knowledge fed from the LDOSs, and hence the GDOS can generate more complete knowledge than any single LDOS. For example, since customers shop around, the complete shopping activities of a single customer in two cities, which are covered by two separate LDOSs, may not be captured at any single LDOS. Thus a single LDOS may not have sufficient information to generate complete shopping behavior profiles or association rules The customer profiles, rules, etc, generated at the GDOS may be fed back to the LDOSs periodically or upon request. As a result, at each LDOS, global trends rules or alerts can be used to provide local decision support guidelines. For example, suppose the cause of a dramatic drop in VCR sales was discovered at the GDOS by detecting the change in the association relationship between VCR sales and TV sales, and suppose that this conclusion was drawn from data covering a few geographic areas. Alerts can then be issued to other markets where the sales drop has not yet happened for guiding promotions or inventory management The distributed OLAP infrastructure allows us to generate association rules with enhanced expressive power. Let us focus on the typical cross-sale association rules, e.g. how the sale of item A is associated with the sale of item B. The cross-sale association rules reported in the literature so far are typically based on transactions, that is, they associate items sold together in the same transaction This is too limiting for real applications. In practice, we might be interested in associations based on different elements, such as customers instead of transactions. These base elements form the scope of the association rules.  For example we can consider customer-based association of VCR sales with TV sales in one month, regardless of when where, or whether in the same transaction, the purchases are made.  As a customer may buy a TV and a VCR in different shops covered by different LDOSs, such an association rule may not be generated from the transactions seen at a single LDOS. Further, we can combine items, e.g product and time into conjoint items, e.g product, time to express more powerful association relationships such as the percentage of customers who bought a VCR in Jan99 after they bought a TV in Dec98. We can also introduce variables in rules to express such association relationships as the percentage of customers who bought a VCR within a month after they bought a TV Customer profiles and association rules are represented as multidimensional data cubes and handled by OLAP servers. The profile cubes at the LDOSs and the GDOS give measures such as sales in units discounts, payment methods, etc, from which many other related measures such as discount rate and sales forecast, can be derived. Profile cubes can be based on volume and probability. Volume-based cubes are stored in the data warehouse. Probability-based cubes are derived from volume-based cubes as \223views\224 Association rule related cubes are generated from profile cubes In summary, our major contributions are twofold First, we have developed a distributed OLAP based infrastructure for mining e-commerce transaction data Second, since our infrastructure enables us to flexibly combine information from different locations and across different time periods we have introduced new kinds of multilevel, multidimensional association rules with enhanced expressive power, including the following 214  scoped association rules which can be based on different elements, such as transactions or customers, as described above 214  association rules with conjoint items and 214  functional association rules   This infrastructure has been designed and prototyped at HP Labs to support business intelligence in electronic commerce. At each site the mining engine is built on top of an Oracle-8 based data-warehouse and Oracle Express, a multidimensional OLAP server. At each site the engine is responsible for building and updating related cubes incrementally by mining the data that flow into the data-warehouse daily.  We have demonstrated the practical value of using OLAP servers as computation engines to perform data mining, and using the distributed OLAP infrastructure to scale data mining. We have also shown the power of the enhanced multilevel and multidimensional association rules for ecommerce applications OLAP technology has gained increasing popularity in data warehousing [1,2,5,8  H o w e ve r  t h e iss u e s regarding the use of OLAP servers as distributed 


computation engines have not been studied. There exist a number of previous efforts on association rule mining from databases or other data sets [9,10,11 e v e ral of these efforts are based on cube structures using OLAP  e v e r, s o f a r th ere is  n o  w o rk  reported on mining scoped or functional association rules using OLAP. Although time-variant association rules have been studied, such rules fall into a special case of association rules with general conjoint items. Most significantly, our approach is based on the support of a distributed OLAP infrastructure to enhance the expressive power of association rules.  We claim the novelty of our solution from this point of view The rest of this paper is organized as follows. Section 2 gives an overview of our distributed OLAP infrastructure. Section 3 describes customer profiling and shopping pattern analysis based on this infrastructure. Section 4 discusses our extension to multilevel and multidimensional association rules Section 5 describes distributed and incremental rule mining. Finally in section 6 some conclusions are given 2  Architecture As shown in Figure 1, our infrastructure includes at least two layers of data warehouse/OLAP stations LDOSs and a GDOS. The LDOSs are responsible for local data mining and summarization, while the GDOS is responsible for merging and mining the input data from LDOSs, and for providing the mining results to LDOSs for business applications such as personalized promotions, inventory management, etc Figure 1: Distributed data-warehouse/OLAP based architecture LDOS A local data warehouse and one or more OLAP servers are maintained in each LDOS. The basic input data to a LDOS are transactions that are fed in daily and dumped to archive after us T h e bas i c ou t p u t dat a sent to the GDOS periodically from an LDOS is conceptually, a Profile Snapshot Cube PSC\, which contains partial information for customer profiling Transaction data and related reference data are stored in the warehouse. Each OLAP server is used as a computation engine for building and incrementally updating PSC, by mining new transactions flowing into the local data-warehouse, and deriving patterns for local analysis. Loading transaction data into the datawarehouse, and then loading the warehoused data to the OLAP server for generating PSCs, is a periodic process e.g. hourly or daily  Besides feeding PSCs to the GDOS periodically, an LDOS also receives data mining results, such as global association rules or alerts, from the GDOS. It can access the GDOS to get rules and customer profiles when necessary  Data-warehouse OLAP engine transactions profile cubes profile cubes pattern cubes volume cubes Association rule cubes LDOS LDOS GDOS Data-warehouse OLAP engine Data-warehouse OLAP engine feedback 


GDOS A global data warehouse and one or more OLAP servers are maintained in the GDOS. The GDOS has bidirectional communications with the LDOS. It combines the summary information from multiple LDOSs to build and incrementally update global customer profiles, association rules, etc, which cannot be completed at a single LDOS, and feeds back the resulting profiles, rules and other derived objects such as promotion plans, to the LDOSs. Multilevel and multidimensional customer shopping patterns may be extracted, analyzed, and compared. In our implementation, the volume cubes for generating association rules are extracted from cubes representing customer profiles. We shall describe this in more detail later In summary the GDOS and the LDOSs must cooperate. The GDOS relies on the LDOSs to reduce data load and computation load for enhanced scalability and the customer profiles and rules are generated at the GDOS by using the summary information fed by the LDOSs in combination. As we indicated before, more levels of stations may be introduced 3  Customer Profiles and Shopping Patterns We represent customer profiles and shopping patterns as cubes. A cube C has a set of underlying dimensions D 1 205, D n  and is used to represent a multidimensional measure Each cell of the cube is identified by one value from each of the dimensions, and contains a value of the measure. We say that the measure is dimensioned by D 1 205, D n The set of values of a dimension D called the domain of D may be limited \(using the OLAP limit operation\ a subset  A sub-cube \(slice or dice\ be derived from a cube C by dimensioning C by a subset of its dimensions, and/or by limiting the value sets of these dimensions 3.1.  Profile Cubes A profile cube, say PF contains profiling information of multiple customers, and has dimensions kind product, customer, merchant, time, area It is derived from the transaction data stored in the relational data warehouse. In Oracle Express Language it is defined as  define PF   variable decimal <kind, sparse product,  customer, merchant, time, area where dimension kind has values 221saleInUnits\222 221saleInDollars\222, \221discounts\222, \221couponDiscounts\222 221loyaltyDiscounts\222, \221paymentMethods\222  etc. Introducing this dimension allows us to represent multiple measures by the single cube. The decimal data type is used to cover all numerical data types. A specific integer measure may be derived from a profile cube, and the integer data type converted from the decimal data type The use of keyword \223sparse\224 in the above definitions instructs Oracle Express to create a composite dimension product, customer, merchant, time, area  in order to handle sparseness in an efficient way Profile cubes are maintained at both the GDOS and the LDOSs. At an LDOS, a local profile cube is populated by means of binning A transaction data record contains fields with values mapping to each dimension of the cube. Such a mapping is referred to as binning. For example, \22101Jan98 8:44am\222 is mapped to time-bin \22101Jan98\222. A transaction occurring at \22101Jan98 8:44am\222 and at the \221Safeway Market\222 in S.F. falls into the cell corresponding to time 22101Jan98\222 and area  221S.F.\222 At the GDOS, a centralized profile cube with desired coverage in time, area etc, is retrieved from the database and updated by merging the appropriate local profile cubes, and then may be stored back to the database. In Oracle Express, expressing such a merge operation is straightforward. Let PF be the centralized cube and PF 1 205, PF k the local cubes. Their merge is simply expressed as PF = PF + PF 1 205 + PF k In this way customer profiles are combined and updated incrementally as each new local cube flows into the GDOS 3.2. Multilevel Pattern Representation Shopping pattern cubes are derived from profile cubes and are used to represent the shopping behavior of individual customers In order to represent shopping behavior at multiple levels, we define each of the dimensions to be a hierarchical dimension, along which the shopping pattern cubes can roll up A hierarchical dimension D contains values at different levels of abstraction. Associated with D there are a dimension DL describing the levels of D a relation DL_D mapping each value of D to the appropriate level and a relation D_D mapping each value of D to its parent value \(the value at the immediate upper level Let D be an underlying dimension of a numerical cube C  D  DL, DL_D and D_D fully specify a dimension 


hierarchy. They provide sufficient information to roll up cube C along dimension D that is, to calculate the total of the cube\222s measure values at the upper levels using the corresponding lower-level measure values. A cube may be rolled up along multiple dimensions. In the applications discussed in this paper, the following hierarchies are introduced. The product hierarchy is made up of the following objects 214  product dimension with values at the product level e.g. 'HP Inkjet500'\ct_category level \(e.g 221printer\222\, etc, and a special value \221top\222 at top-level 214  prodLevel: dimension with values 'prod_item prod_category\222, 'prod_kind', \221top\222 214  prod_prod: parent relation \(product, product mapping each value to its parent, e.g  prod_prod\(product 'HP Inkjet500'\ = 'printer prod_prod\(product 'top'\ = NA 214  prodLevel_prod: level relation \(product, prodLevel mapping each value to its level, e.g  prodLevel_prod\(product 'HP Inkjet500'\='prod_item  prodLevel _prod\(product 'printer'\=\221comp peripheral Analogously, the merchant hierarchy is made up of dimension merchant   dimension mercLevel with values s t o r e   store_category\222and 'top'; parent relation merc_merc and level relation mercLevel_merc The customer hierarchy is made up of dimension customer  dimension custLevel with values 'shopper shopper_group\222, \221shopper_category\222and 'top'; parent relation cust_cust and level relation custLevel_cust The time hierarchy is made up of dimension time  dimension timeLevel with values 'day', \221month\222 221year\222and \221top\222; parent relation time_time and level relation timeLevel_time The area hierarchy is made up of dimension area dimension areaLevel with values city', \221state\222, \221region\222 and 'top'; parent relation area_area and level relation areaLevel_area 3.3.  Deriving Shopping Pattern Cubes Various shopping patterns can be derived from profile cubes and handled as shopping pattern cubes They may be used to represent the shopping behavior of a collection of customers or a single customer; they may be based on volumes or probability distributions; and they may be materialized \(defined as variables\ot defined as formulas Multiple or single customer based patterns For example a cube representing a single measure SaleUnits may be defined as a formula \(view\ of the above profile cube PF by the following  define SaleUnits formula \(PF\(kind \221saleInUnits\222 int <product, customer, merchant, time, area A cube representing the same measure for a single customer, say, \221Doe\222, is defined as  define SaleUnits.1  formula \(PF\(kind \221saleInUnits\222 customer \221Doe\222\nt <product, merchant,time, area Volume and probability based patterns In a volume-based shopping pattern cube, each cell value is a quantitative measure. The cube may be rolled up along its hierarchical dimensions. For example, cube SaleUnits defined above can be rolled up along dimension product using relation prod_prod, and analogously, along dimensions customer, merchant time, area Then, for example, cell SaleUnits\(product \221pen\222, customer \221John Doe\222 merchant \221Sears\222, time \22101Jan98\222, area \221San Francisco\222 g ives the number of pens purchased by John Doe at Sears in San Francisco on 01Jan98. Cell SaleUnits.Doe\(product \221pen\222, customer \221John Doe\222 merchant \221top\222, time \221top\222, area \221top\222 gives the number of pens purchased by John Doe anywhere and anytime covered by the profiling period and area Cubes representing probability distribution based shopping patterns are derived from volume-based pattern or profile cubes. They provide more fine-grained representation of dynamic behavior than fixed value based ones. They also allow shopping patterns corresponding to different lengths of profiling interval to be compared. For example, the following cube PLD represents the probability distributions of loyalty discounts over all discounts along multiple dimensions  define PLD   variable decimal <customer, product merchant, time, area It can be calculated through the following steps 267  Define cubes LoyaltyDiscount and Discount over dimensions customer, product, merchant, time area 267  Populate LoyaltyDiscount and Discount as subcubes of PF with dimension kind limited to 223LoyaltyDiscount\224  and \223Discount\224 respectively 267  Rollup LoyaltyDiscount and Discount along dimension product, merchant, time and area 267  Then PLD = LoyaltyDiscount / Discount please note this is a cell-wise operation For efficiency as well as consistency it is only necessary to store profile cubes persistently in the data 


warehouse. Shopping patterns, either based on volume or probability, can be derived on the fly \(at analysis time\ using the OLAP engine for computation. For storing, combining and updating profile cubes, only the bottom level of each dimension is necessary. Shopping pattern cubes are allowed to rollup along any hierarchical dimension. This shows the simplicity, and yet the power, of using OLAP to handle customer profiling 4  Extended Association Rules An important application of our distributed datawarehouse/OLAP infrastructure is to enhance association rule mining. In e-commerce, association rules benefit both merchants and customers. However association rules are created and incrementally updated from hundreds of millions of transaction records generated daily. Our infrastructure allows us to distribute data processing, reduce data volumes at each local site by summarization, and mine data incrementally at multiple levels. In addition to scaling up rule mining, this infrastructure also allows us to combine information from different locations for generating association rules with enhanced expressive power. In this section we will extend multilevel and multidimensional association rules by introducing scoped association rules  association rules with conjoint items and functional association rules and we will show how to compute these rules using data cubes and OLAP 4.1.   Scoped Multidimensional and Multilevel Association Rules Association rules provide a quantitative measurement of the association relationships between facts Association rule mining aims at inferring such relationships from transaction summary data. For example, a cross-sale association rule is used to answer 223how many customers who bought product A, also bought product B in one month?\224 An association rule can be simply expressed by X 336 Y where X is its antecedent  and Y is its consequent and they are conjunctive predicates  Related to each association rule there is a confidence and a support In the above example, if 80% of the customers who bought A also bought B, and only 10% of all the customers bought both, we say that the association rule has confidence 80% and support 10%. Given application-specific minimum support and confidence thresholds, a rule is considered strong if it satisfies these thresholds An association rule has an underlying base B  that contains a population over which the rule is defined For example, the above cross-sale association rule can be based on transactions, as  x 316 Transactions: contain_product\(x,A 336 contain_product\(x, B or based on customers, as  x 316 Customers: buy_product\(x, A 336 buy_product\(x, B  regardless of whether the purchases were made in the same transaction or not.  In this example, the association rule uses binary predicates with the first place denoting a base element and the second place denoting an item In these examples, the items are elements of a set of products The notion of base is especially important for cooperative rule mining between GDOS and LDOSs For example, if the customers of interest shop at several locations covered by different LDOSs, then customer based cross-sale association rules should be mined at the GDOS on the summary data fed from multiple LDOSs If the customers of interest are partitioned geographically and covered by individual LDOSs, such rules can be first mined locally at each LDOS and then assembled in the GDOS For the kind of application we are considering in this paper, we provide association rules with different bases and we refer to such rules as scoped association rules For a rule B: X 336 Y  let us denote the set of base elements in B that match X by P x and its cardinality by P x The confidence of rule X 336 Y in B denoted by x B  X 336 Y    can be calculated by x B X 336 Y\ = |P X 307 P Y P X  and ranges from 0 to 1 The support of rule X 336 Y in B, denoted by q B  X 336 Y   can be calculated by q B X 336 Y\ = |P X 307 P Y B For simplicity, when the base B is understood from the context, we drop the suffix B from x  and q   We also provide multidimensional  association rules e.g  x 316 Customers: buy_product x,\221A\222 336 buy_product\(x,\221B\222  275 merchant = \221Sears\222,area = \221Los Angeles\222,  time =\221Jan98\222 In this example customer is the  base products are the  items  and merchant, area and time are underlying features of the rule. Essentially, the base of multidimensional rules are dimensioned by the features Further a feature may be represented at multiple levels For example, an area may be represented at the city level \(e.g. San Francisco\e state level \(e.g 


California\a time may be represented at the day, month or year levels. Accordingly, association rules at different area levels and time levels can be specified e.g x 316 Customers: buy_product x,\221A\222 336 buy_product\(x,\221B\222  275 merchant = \221Sears\222,area=\221Los Angeles\222, time = \221Jan98\222 x 316 Customers: buy_product\(x,\221A\222 336 buy_product\(x,\221B\222  275 merchant = \221Sears\222, area =\221 California 222, time = \221Jan98\222 x 316 Customers: buy_product\(x,\221A\222 336 buy_product\(x,\221B\222  275 merchant = \221Sears\222, area =\221 California 222, time = \221 Year98 222 For multidimensional association rules, the cardinalities, confidence and support are dimensioned by, or as functions of, the features 4.2.  Cube-based Association Rule Mining We represent association rules by cubes. We will use volume cubes where cell values are counts, for deriving and measuring multidimensional P X 307 P Y   P X  and B in the intermediate steps of computing multidimensional association rules Figure 2: Slices of a list of cubes related to cross-sale association rules Volume cube A volume cube contains multidimensional counts for deriving association rules. For example, cross-sale association rules are derived from volume cubes such as  SaleUnits\(customer, product, merchant, time, area Each cell contains the number of purchased units dimensioned by customer, product, merchant, time and area This cube is derived from a profile cube and materialized for mining cross-sale association rules Volume cubes such as SaleUnits are maintained at both GDOS and LDOSs. At a LDOS, a local cube is populated from transaction data. At the GDOS, a centralized cube with desired coverage in time, area etc, is retrieved from the database and updated by merging local cubes The dimensions of a volume cube as well as other association rule related cubes, can be classified into the following categories for the purpose of association rule mining 267  Item dimensions on which volume data for quantifying the association relationship are counted, such as the product dimension  in the above example 267  Base dimensions  on which rules are quantified such as the customer dimension. A volume cube may roll up along its hierarchical dimensions, but not along a base dimension. For example aggregating the number of purchased products along the customer dimension to a high-level customer value, say, \221engineer\222, may not be meaningful to deriving cross-sale associations, e.g if one engineer buys milk and another buys eggs this does not imply any meaningful cross-sale association  P1 P2 P3 312 Po p ulation-cube p roduct P1 P2 P3 P1312 P2 1 1 P3 2 2 Association-cube p roduct p roduct2 P1 P2 P3 S1 1 2 S2 2 2 S3 2 1 Volume-cube p roduct customer P1 P2 P3 P1 1/3 2/3 P2 1/1 P3 1/1 Confidence-cube p roduct p roduct2 P1 P2 P3 P1 1/3 2/3 P2 1/3 P3 2/3 Su pp ort-cube p roduct p roduct2 Base-cube 3 


267  Feature dimensions  on which the generated rules may be dimensioned such as merchant, time and area  A volume cube C v is sufficient for deriving the instances of rule X 336 Y if it has a base dimension that represents the base of the rule, and the association conditions for qualifying X 331 Y are definable on C v For deriving cross-sale association rules from cube SaleUnits an association condition can be  for each base and feature dimension C v product A\ > 0 331 C v product B\ > 0 If the association conditions used to compute multidimensional P X  307 P Y  are definable on C v then another kind of condition, called antecedent conditions that are used to compute multidimensional  P X    are also definable on C v such as  for each base and feature dimension C v product A\ > 0 Association cube The association cube C a  for rule X 336 Y gives a volume-based measure of multidimensional association relationships that are computed from the volume cube C v and is used to derive the confidence cube and the support cube of association rules. More exactly, it maintains dimensioned P X 307 P Y i.e the number of base elements that satisfy X 331 Y Usually C a is dimensioned differently from C v In the cross-sale association rule example, the association cube is defined as  CrossSales product, product2, customer_group, merchant time, area  A cell of this cube, CrossSales product 221A\222 product2 221B\222  customer_group \221 engineer\222 merchant 221Sears\222 time 221Jan98\222 area 221Los Angeles\222\eans that there are 4,500 customers who are engineers, who bought item A as well as item B, at a Sears store in Los Angeles in Jan98 For an association cube the item dimensions underlie the counts for deriving association rules, such as dimensions product and product2 for the above CrossSales cube. The dimension product2 has the same set of values as product and we call it the mirror dimension  of product We introduce a mirror dimension simply because the cross-sale association rule involves more than one element of the item dimension  The base dimension   such as the customer dimension  underlies the base of rules. Unlike the volume cube, the association cube does not necessarily have to be dimensioned by the base dimension However, we can dimension rules by a derived dimension, each value of which identifies a group of base dimension values at bottom levels. In the cube CrossSales shown above, we introduce the hierarchical dimension customer_group   which has levels customer_profession\222, \221customer_category\222 and 'top'. A relation is also defined for relating customers and customer groups. For example, a value of the derived customer_group dimension, say, \223engineer\224, is used to identify a group of individual customers who are engineers  An association can cube also have underlying feature dimensions  such as merchant, time and area Population cube and base cube The population cube C p and the base cube C b for rule X 336 Y are also derived from the volume cube C v  C p is used to measure dimensioned P X i.e the numbers of base elements satisfying X  C b is used to represent dimensioned B For the above cross-sale rules, the population cube is defined as NumOfBuyers \(product, customer_group, merchant, time area A cell of this cube NumOfBuyers product 221A\222 customer_group \221 engineer\222 merchant 221Sears\222 time 221Jan98\222 area 221Los Angeles\222  10000  means that there are 10,000 customers who are engineers, and who bought item A in Los Angeles in Jan98. The base cube is defined as  NumOfShoppers \(customer_group, merchant, time, area Note that NumOfShoppers is not aggregated from NumOfBuyers as a single customer may buy multiple products Confidence cube and support cube The confidence of rule X 336 Y defined as P X 307 P Y  P X  and the support, defined as P X 307 P Y B are represented as cubes C f  and C s  C f  is derived from C a and C p and C s is derived from C a  and C b They have the same dimensions as C a For the above cross-sale rules the confidence cube and support cube are defined as  Confidence \(product, product2, customer_group, merchant time, area   Support  product, product2, customer_group, merchant time, area Figure 2 shows the cubes related to cross-sale association rules, with one slice of each cube. The volume-cube is generated from transactions; the 


association-cube, base-cube and population-cube are derived from the volume cube; the confidence-cube is derived from the association cube and population cube and the support-cube is derived from the associationcube and base-cube. The slices of these cubes shown in Figure 2 correspond to the same list of values in dimension merchant, time, area and customer_group  Multidimensional and multilevel rules Representing association rules by cubes and underlying cubes by hierarchical dimensions, naturally supports multidimensional and multilevel rules. Also these rules are well organized and can be easily queried  First, the cells of an association cube with different dimension values are related to association rule instances in different scopes. In the association cube CrossSales cell CrossSales product \221A\222, product2 \221B\222  customer_group 221engineer\222, merchant \221Sears\222, area \221Los Angeles\222, time 221Jan98\222 represents the following multidimensional rule x 316 Customers: buy_product\(x, \221A\222 336 buy_product\(x,\221B\222  275 customer_group = \221engineer\222, merchant = \221Sears\222, area 221Los  Angeles\222, time =  \221Jan98\222 If this cell has value 4500, and the corresponding cell in the population cube has value 10000, then this rule has confidence 0.45 Next as the cubes representing rules can have hierarchical dimensions, they represent not only multidimensional but also multi-level association rules. For example, the following cells CrossSales\(product \221A\222, product2 \221B\222, customer_group 221engineer\222, merchant \221Sears\222, area \221 California 222, time 221Jan98\222 CrossSales\(product \221A\222, product2 \221B\222, customer_group 221engineer\222, merchant \221Sears\222, area \221 California 222, time 221 Year98 222 represent association rules at different area levels \(i.e the city level and the state level\d different time levels \(i.e., the month level, the year level x 316 Customers: buy_product\(x, \221A\222 336 buy_product\(x, \221B\222  275 customer_group = \221engineer\222, merchant =  \221Sears\222, area 221 California 222, time =  \221Jan98\222 x 316 Customers: buy_product\(x, \221A\222 336 buy_product\(x, \221B\222  275 customer_group = \221engineer\222, merchant =  \221Sears\222, area 221 California 222, time =  \221 Year98 222 The cell CrossSales\(product \221A\222, product2 \221B\222,  customer_group 221top\222, merchant \221top\222, area \221top\222,  time \221top\222 represents the customer-based cross-sale association rule for all customers, merchants, areas, and times in the given range of these dimensions, expressed as x 316 Customers: buy_product\(x, \221A\222 336 buy_product\(x, \221B\222 4.3  Generating Association Rule Related Cubes The basic task of our OLAP based association rule mining framework, either at the GDOS or at an LDOS is to convert a volume cube i.e. the cube representing the purchase volumes of customers dimensioned by product  area etc, into an association cube a base cube and a population cube These cubes are then used to derive the confidence cube and the support cube of multidimensional association rule instances. The following general steps are involved in cross-sale association rule mining 267  Roll up the volume cube SaleUnits by aggregating it along merchant, time, area dimensions 267  Derive cube NumOfBuyers from SaleUnits based on the antecedent condition SaleUnits 0 267  Populate cube NumOfShoppers by the counts of customers dimensioned by merchant, area  time not by product\at satisfy the antecedent conditions 267  Derive cube CrossSales from SaleUnits based on the association conditions SaleUnits  product  p 1  0 and SaleUnits  product2  p 2 0 267  Derive cube Confidence and cube Support using cell-wise operations 214  Confidence = CrossSales  NumOfBuyers 214  Support  CrossSales  NumOfShoppers  Cubes Confidence  Support  CrossSales are dimensioned by product  product2 customer_group,merchant  time, area NumOfBuyers is dimensioned by product  customer_group, merchant time, area  NumOfShoppers is dimensioned by customer_group, merchant  time, area Rules with confidence and support that exceed specified thresholds  may be considered interesting 4.4. Rules with Conjoint Items Cubes with conjoint dimensions can be used to represent refined multidimensional association rules For example, using OLAP, we can derive association rules across time  Time-variant or temporal association rules such as 


x 316 Customers buy_product\(x,\222 A\222, \221 Jan98\222  336 buy _product\(x, \221B\222, \221 Feb98\222   275 area = \221Los Angeles\222 can be used to answer such questions as \223 How are  the sales of B in Feb98  associated with the sales of A in Jan98 224 The items in this rule are value pairs of dimensions product and time In order to specify this kind of association rule we introduce a conjoint dimension product, time and mirror it with dimension product2, time2 This allows a cell in the association cube to cross two time values. Accordingly, the cubes related to association rule mining are defined as follows Association cube  CrossSales.2 \(<product, time>, <product2, time2 customer_group, merchant, area  Population cube  NumOfBuyers.2  \(<product, time>, customer_group merchant, area Base cube  NumOfShoppers.2  \( customer_group, merchant, area Confidence cube Confidence.2 \(<product, time>, <product2, time2 customer_group, merchant, area Support  cube  Support.2  product, time>, <product2, time2 customer_group, merchant, area  The steps for generating these cubes are similar to the ones described before. The major differences are that a cell is dimensioned by, besides others product, time and product2, time2 and the template of the association condition is  SaleUnit s  product p 1 time t 1  0 and  SaleUnits  product2 p 2 time2 t 2  0 where, in any instance of this condition, the time expressed by the value of time2 is not contained in the time expressed by the value of time The template of the antecedent condition is SaleUnits   product p 1 time t 1  0 In general, other dimensions such as area may be added to the conjoint dimensions to specify more refined rules 4.5. Functional Association Rules A multidimensional association rule is functional if its predicates include variables, and the variables in the consequent are functions of those in the antecedent.  For example, functional association rules can be used to answer the following questions, where a_month and a_year are variables q  What is the percentage of people in California who buy a printer in the next month after they bought a PC x 316 Customer buy_product\(x, \221PC\222, a_ month 336 buy_product\(x, \221printer\222, a_month+1  275 area = \221California\222 q  What is the percentage of people who buy a printer within the year when they bought a PC  x 316 Customer: buy_product\(x, \221PC\222, a_ year 336 buy_product\(x, \221printer\222, a_year 275 area = \221California\222 To be distinct, we call the association rules that are not functional as instance association rules; e.g x 316 Customer: buy_product\(x,\222 PC\222, \221Jan98\222 336 buy_product\(x,\222 printer\222, \221Feb98\222  275 area =  \221California\222 Time variant, functional association rules can be derived from time variant, instance association rules through cube restructuring. Let us introduce a new dimension time_delta that has values one_day, two_day 205, at the day level, and values one_month, two_month, \205, at the month level, etc. Then, let us consider the following functional association rule related cubes Association cube  CrossSales.3 \(product, product2, customer_group merchant, area, time_delta  Population cube  NumOfBuyers.3 \(product, customer_group, merchant area Base cube  NumOfShoppers.3 \( customer_group, merchant, area Confidence cube  Confidence.3 \(product, product2, customer_group merchant, area, time_delta Support cube  Support.3 \(product, product2, customer_group, merchant area, time_delta The association cube CrossSales.3  can be constructed from CrossSales.2   The cell values of CrossSales.2  in the selected time and time2 ranges are added to the corresponding cells of CrossSales.3 For example, the count value in cell  CrossSales.2\(<PC, Jan98>, <printer, Feb98>\205 is added to cell \(bin CrossSales.3\(PC, printer, one_month,\205 


It can also be added to cell CrossSales.3\(PC, printer one_year,\205 5  Distributed and Incremental Rule Mining There exist two ways to deal with association rules 267  Static that is, to extract a group of rules from a snapshot, or a history, of data and use "as is 267  Dynamic that is, to evolve rules from time to time using newly available data We mine association rules from an e-commerce data warehouse holding transaction data. The data flows in continuously and is processed daily Mining association rules dynamically has the following benefits 267  223Real-time\224 data mining, that is, the rules are drawn from the latest transactions for reflecting the current commercial trends 267  Multilevel knowledge abstraction, which requires summarizing multiple partial results. For example association rules on the month or year basis cannot be concluded from daily mining results. In fact multilevel mining is incremental in nature 267  For scalability, incremental and distributed mining has become a practical choice Figure 3: Distributed rule mining Incremental association rule mining requires combining partial results. It is easy to see that the confidence and support of multiple rules may not be combined directly. This is why we treat them as \223views\224 and only maintain the association cube, the population cube and the base cube that can be updated from each new copy of volume cube. Below, we discuss several cases to show how a GDOS can mine association rules by incorporating the partial results computed at LDOSs 267  The first case is to sum up volume-cubes generated at multiple LDOSs. Let C v,i be the volume-cube generated at LDOS i The volume-cube generated at the GDOS by combining the volume-cubes fed from these LDOSs is 345   n i i v v C C 1  The association rules are then generated at the GDOS from the centralized C v  214  The second case is to mine local rules with distinct bases at participating LDOSs, resulting in a local association cube C a,I a local population cube C p,I  and a local base cube C b,i at each LDOS. At the GDOS, multiple association cubes, population cubes and base cubes sent from the LDOSs are simply combined, resulting in a summarized association cube and a summarized population cube, as 345   n i i a a C C 1   345   n i i p p C C 1  and 345   n i i b b C C 1  The corresponding confidence cube and support cube can then be derived as described earlier. Cross-sale association rules generated from distinct customers belong to this case In general, it is inappropriate to directly combine association cubes that cover areas a 1 205, a k to cover a larger area a In the given example, this is because association cubes record counts of customers that satisfy   customer product merchant time area Doe TV Dept Store 98Q1 California Doe VCR Dept Store 98Q1 California customer product merchant time area Doe VCR Sears 5-Feb-98 San Francisco Joe PC OfficeMax 7-Feb-98 San Francisco customer product merchant time area Doe TV Fry's 3-Jan-98 San Jose Smith Radio Kmart 14-Jan-98 San Jose Association   population      base          confidence      support cube               cube                cube         cube                cube LDOS LDOS GDOS 


the association condition, and the sets of customers contained in a 1 205, a k are not mutually disjoint. This can be seen in the following examples 214  A customer who bought A and B in both San Jose and San Francisco which are covered by different LDOSs , contributes a count to the rule covering each city, but has only one count, not two, for the rule A  336  B covering California 214  A customer \(e.g. Doe in Figure 3\who bought a TV in San Jose, but a VCR in San Francisco, is not countable for the cross-sale association rule TV  336 VCR covering any of these cities, but countable for the rule covering California. This is illustrated in Figure 3 6  Conclusions In order to scale-up association rule mining in ecommerce, we have developed a distributed and cooperative data-warehouse/OLAP infrastructure. This infrastructure allows us to generate association rules with enhanced expressive power, by combining information of discrete commercial activities from different geographic areas, different merchants and over different time periods. In this paper we have introduced scoped association rules  association rules with conjoint items and functional association rules as useful extensions to association rules The proposed infrastructure has been designed and prototyped at HP Labs to support business intelligence applications in e-commerce. Our preliminary results validate the scalability and maintainability of this infrastructure, and the power of the enhanced multilevel and multidimensional association rules. In this paper we did not discuss privacy control in customer profiling However, we did address this issue in our design by incorporating support for the P3P protocol [1 i n  ou r data warehouse. We plan to integrate this framework with a commercial e-commerce system References 1  Sameet Agarwal, Rakesh Agrawal, Prasad Deshpande Ashish Gupta, Jeffrey F. Naughton, Raghu Ramakrishnan, Sunita Sarawagi, "On the Computation of Multidimensional Aggregates", 506-521, Proc. VLDB'96 1996 2  Surajit Chaudhuri and Umesh Dayal, \223An Overview of Data Warehousing and OLAP Technology\224, SIGMOD Record Vol \(26\ No \(1\ 1996 3  Qiming Chen, Umesh Dayal, Meichun Hsu 223 OLAPbased Scalable Profiling of Customer Behavior\224, Proc. Of 1 st International Conference on Data Warehousing and Knowledge Discovery \(DAWAK99\, 1999, Italy 4  Hector Garcia-Molina, Wilburt Labio, Jun Yang Expiring Data in a Warehouse", Proc. VLDB'98, 1998 5  J. Han, S. Chee, and J. Y. Chiang, "Issues for On-Line Analytical Mining of Data Warehouses", SIGMOD'98 Workshop on Research Issues on Data Mining and Knowledge Discovery \(DMKD'98\ , USA, 1998 6  J. Han, "OLAP Mining: An Integration of OLAP with Data Mining", Proc. IFIP Conference on Data Semantics DS-7\, Switzerland, 1997 7  Raymond T. Ng, Laks V.S. Lakshmanan, Jiawei Han Alex Pang, "Exploratory Mining and Pruning Optimizations of Constrained Associations Rules", Proc ACM-SIGMOD'98, 1998 8  Torben Bach Pedersen, Christian S. Jensen Multidimensional Data Modeling for Complex Data Proc. ICDE'99, 1999 9  Sunita Sarawagi, Shiby Thomas, Rakesh Agrawal Integrating Association Rule Mining with Relational Database Systems: Alternatives and Implications", Proc ACM-SIGMOD'98, 1998   Hannu Toivonen, "Sampling Large Databases for Association Rules", 134-145, Proc. VLDB'96, 1996   Dick Tsur, Jeffrey D. Ullman, Serge Abiteboul, Chris Clifton, Rajeev Motwani, Svetlozar Nestorov, Arnon Rosenthal, "Query Flocks: A Generalization of Association-Rule Mining" Proc. ACM-SIGMOD'98 1998   P3P Architecture Working Group, \223General Overview of the P3P Architecture\224, P3P-arch-971022 http://www.w3.org/TR/WD-P3P.arch.html 1997 


Plenary Panel Session 30 XML Databases   Moderator: Michael Carey, IBM Almaden Research Center USA Panelists Adam Bosworth, Microsoft Corporation USA David De Witt University of Wisconsin-Madison, USA Alon Levy University of Washington USA Bruce Lindsay IBM Almaden Research Center USA Jennifer Widom Stanford University USA Demo Session 1 Web Query Optimizer  661 V Zadorozhny L Bright L Raschid T Urhan and M Vidal ReQueSS: Relational Querying of Semi-structured Data  664 R Sunderraman The IDEAL Approach to Internet-Based Negotiation for E-Business  666 J Hammer C Huang Y Huang C Pluempitiwiriyawej M Lee H Li L Wang Y Liu and S Su READY A High Performance Event Notification Service  668 R Gruber B Krishnamurthy, and E Panagos A Multimedia Information Server with Mixed Workload Scheduling  670 G Nerjes DISIMA An Object-Oriented Approach to Developing an Image Database System  672 V Oria T Ozsu P Iglinski B Xu and L Cheng Demo Session 2 The Collaboration Management Infrastructure  677 H Schuster D Baker A Cichocki D Georgakopoulos and M Rusinkiewicz Assisting the Integration of Taxonomic Data The LITCHI Toolkit  679 I Sutherland J Robinson S Brandt A Jones S Embury W Gray R White and F Bisby TheaterLoc: Using Information Integration Technology to Rapidly Build Virtual Applications  681 G. Barish Y.4 Chen D Dipasquo, C Knoblock S Minton I Muslea and C Shahabi Lineage Tracing in a Data Warehousing System  683 Y Cui and J Widom xiii 


The Mentor-Lite Prototype A Light-Weight Workflow Management System  685 J Weissenfels M Gillmann 0 Roth, G Shegalov and W Wonner Location Prediction and Queries for Tracking Moving Objects  687 0 Wolfson B Xu and S Chamberlain Semiorder Database for Complex Activity Recognition in Multi-Sensory Environments  689 S Bhonsle A Gupta S Santini and R Jain Tutorial 1 Web Information Retrieval  693 M Henzinger Tutorial 2 Mobile and Wireless Database Access for Pervasive Computing  694 P Chrysanthis and E Pitoura Tutorial 3 Data Mining with Decision Trees  696 J Gehrke Tutorial 4 Directories Managing Data for Networked Applications  697 D Srivastava Tutorial 5 Indexing High-Dimensional Spaces Database Support for Next Decade\222s Applications  698 S Berchtold and D Keim xiv 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


