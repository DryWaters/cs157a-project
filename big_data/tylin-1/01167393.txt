Proceedings of the First International Conference on Machine Learning and Cybernetics Beijing 4-5 November 2002 AN IMPROVING MINING ALGORITHM AIMING AT A KIND OF SPECIFIC FUNCTION OF DEGREE OF INTEREST TIAN-RUI LI JUN MA YANG XU Department of mathematics, Southwest Jiaotong University, Chengdu, China E-MAIL: trli30 163.com yxu@home.swjtn.edu.cn Abstract Association rule mining is an important research area in data mining, which has broad application background. There exist two shortages in classical assnciation rule mining problem, namely every itemset is treated equivalently and use a uniform minimum support and minimum conference as weighing standard Through introducing the fnnction of the degree 'of interest on 
itemsets  a dimcl generation of the problem of assnciation rule mining called passociation rule mining was introduced in 111 It can solve the two shortages at the same time Based on FP-tree, a universal algorithm for mining pfreqnent closed iten was proposed in Z Because this algorithm is based on general definition of q it will not perform well for all 9 Io this paper aiming at a kind of specifc  namely, the degree of interest of every item is given we present an improving algorithm The experimental and 
performance studies show that our algorithm is more eflicient than previous algorithm io 21 Keywords Data mining passociation rule mining pfrequent itemset 1 Introduction association rule.mining is an important research area in data mining which has broad application background lo There exist two shortages in classical association rule mining problem namely every itemset is treated equivalently and use a uniform minimum support and minimum conference as weighing standard At present three representative methods for solving these two shortages are as follows One is using multiple minimum sup another is mining multiple-level association N the third is mining association rules with weighted items[6 From these methods we can see that they only 
aim at one of the two shortages Through introducing the function of the degree of interest on itemsets cp a direct generation of the problem of association rule mining called passociation rule mining was introduced in l It can solve the two shortages at the same time. Based on FP-tree a universal algorithm for mining pfrequent closed itemset was proposed in 2 Because this algorithm is based on the general definition of cp it will not perform well for all cp In this paper aiming at a kind of specific cp namely the degree of interest of every item is given we present an improving algorithm The experimental and performance 0-7803-7508-4/02/$17.00 
WOO2 IEEE studies show that our algorithm is more efficient than previous algorithm in 2 2 Preliminaries Let I be a set of all the items in a transaction database TDB Definition 1 Let cp be a function from P I to 0  m  which satisfy: for any two subsets X Y of I if x C Y then cp\(x cp Then cp is called as a function of the degree of interest on I where cp\(X represents the degree of interest of X and cp\(X Y represents that 
the itemset X is less interesting than Y Definition 2 Let cp be a function of the degree of interest on I and X c I  The psupport of the itemset X in TDB is defined as supp x cp\(X denoted as psupp X Definition 3 An itemset X is said to be cp-frequent if its p support in TDB is at least given minimum support The set FI of cp-frequent itemsets in TDB is Definition 4 A passociation rule is an implication between itemsets of the form X 3 Y  
Where X Y E FZ and X fI Y I The itemset X is called the antecedent of the rule and the itemset Y is called the consequent. The p support of a passociation rule denoted as p supp X 3 Y  is defined'as psupp X U Y  The cp confidence of the Nle denoted as cp-conf  X Y  is defined as cp-supp  X U Y psupp X   Definition 5  The  task of mining cp-association 
rules consists in generating all valid passociation rules i e p association rules with psupp and pconf are at least minimum support and minimum conference respectively It is obvious that cp-association rule mining is a direct generalization of association rule ning It can also be FI  X c ZIP supp\(X t 5  decomposed by two subproblems     1 Find all cp-frequent itemsets in TDB 2 Generate all passociation roles Like classicalassociation rule mining, the problem of cp association rules mining can also be reduced to the problem of finding cp-frequent itemsets til4 


Proceedings of the First International Conference on Machine Learning and Cybernetics Beijing 4-5 November 2002 Definition 6['l An itemset is a closed itemset if there exists no itemset Y so that Y is a proper superset of X and every transaction containing X also contains Y Because closed itemsets reserve all the information of itemset 13 8-10  we will use this;property to simplify our problem Definition 7['l A closed itemset is called as cpfrequent closed itemset if its cpsupport is at least the given minimum support DeOoition 8 The task of mining pfrequent closed itemset consists in generating all cpfrequent closed itemset from a transaction database Proposition 1 For every one cp-frequent itemset there exists only one closed itemset Y which is also pfrequent satisfy that XcY and supp\(X Y From this proposition if all the pfrequent closed itemsets are mined then we'can obtain all cpfrequent itemsets according to the function of degree of interest'of itemset Therefore our aim only considers the'problem of mining cp-frequent closed itemset Because the amount of cpfrequent closed'itemsets is less than cp-frequent itemsets the efficiency of mining will be enhanced greatly Definition 9 Given a transaction database TDB and a support threshold 5 the'list of all frequent items in support descending order is called the frequent item list or F-list 5 in short Definition lof3 A frequent pattern tree or FP-tree in short is a tree structure defined below 1 It consists of one root labeled as null a set of item prefix subtrees as the children f the root and a frequent item header table 2 Each node in the i&m'prefix subtree consists of three fields item-nume count and node-link where item-nume registers which item' this node represents count registers the number of transactions represented by the portion of the path reaching this rode, and node-link links to the next node in the FP-tree canying the same item-nume or null if there is none 3 Each entry in the frequent item header table consists of two fields 1 item-nume and 2 head of node-link which points to the first node in the FP-tree carrying the same item-nume Definition 11 Given a transaction database TDB and a support threshold 5 Let a be a frequent item in F-list 5 The a-conditional database, denoted TDBI is the subset of transactions in TDB containing a and all the occurrences of infrequent items, item a and items following a in the F-list 5 are omitted Let b be a frequent item in X-conditional database TDBlx where X is a frequent itemset The bX-conditional database denoted as TDBlbx is the subset of transactions in TDBlx containing b and all the occurrences of local infrequent items, item b and items following b in F-Sst are omitted In the following, aiming at a kind of specific cp namely the degree of interest of every item is .given we present an improving algorithm It need reconstructing FP-tree in which itemset must be sorted by its degree of interest in descending.order This is because the support of the itemset of less degree of interest is relatively large gd the support of the itemset of large degree of interest is relatively less On the one hand it wili save some memory for constructing FP-tree on the other hand if an itemset is not pfrequent its corresponding X-conditional database does not need constructing. For convenience, here we suppose Max cp 3  Algorithm of construction of FP-tree Following is the algorithm of construction of FP-tree aiming at the above cp  Algorithm 1 FP-tree construction Input A transaction database TDB a minimum support threshold 5 and cp which only gives the degree of interest for every item Method The FP-tree is constructed in the following steps 1 Scan the transaction'database TDB once Collect the set of frequent items F its minimum support is 200/Ik and their supports Sort F in support descending order as F-list Vlk and Sort F in degree of interest increasing order as ID-list  Ik Suppose F-list output Its FP-tree L I z2 I  ill i i 1 zjj z  Vlk  k I I   i  zj where the items i z2 1 ilL   i i  i;,\(l<t<k are the frequent items which support is at least VI Let F,-list  ii  i  VI A  i i  i z 1 5 t 5 k 2 Create the root of an FP-tree T and label it as nulP For each transaction Trans in TDB do the following Get the degree of interest of T denoted as 1 from ID-list Ej2 Delete all infrequent items and all the items following ii in F-list VIk from T And sort  T  in ID-list U item's order as PIP where p is the first element and Pis the remaining list Call insert-FP-tree IplP R The function insert-FP-tree plP],.R is performed as follows If R has a child N so that N.item-nume=p.item-nume then increment hrs count by 1 else create a new node N and let its count be 1 its parent link be linked to R and its node link be linked to the nodes with the same item-name via the nbde-link structure If P is nonempty call insert-FP-tree P h9 recursively Remark 1 From the FP-tree instruction process we can see that it is a little different from the FP-tree in 3 which is that here we construct FP-tree accord to the degree of interest of item Similar to the proof of correctness of algorithm of constructing FP-tree in 3 the above algorithm is also correct 1215 


Proceedings of the First International Conference on Machine Learning and Cybernetics Beijjg 4-5 November ZOO2 Proposition 2 FP-tree reserves all the information for mining cpfrequent itemset Proof From its construction it is obvious 4 An improving mining algorithm aiming at the above cp Based on the above FP-tree's construction we have an improving mining algorithm aiming at the above cp as fOUOWS Algorithm 2 Mining cpfrequent closed itemsets by the FP tree method Input A transaction database TDB a minimum support threshold 6 and cp which only gives the degree of interest for every item Output The complete set of cp-frequent closed itemsets Method I Initialization Let FCI be the set of cp-frequent 2 Find out all frequent items Scan TDB once find 3 Recursively mining cp-frequent closed itemset Call Subroutine Gen-cp-CSET X DB F-list s/ln ID-list clbsed itemset initialized as  out F-List ulk and obtain ID-list s/Zh according to cp Gen-cp-CSET e TDB F-list ulk ID-list  FCI E/U FCI Parameters X if DB is TDB then X is  if DB is X-conditional database then X if a frequent itemset DB conditional database F-list s/l Frequent item list in DB l is the largest degree of interest of item in DB ID-list s/l Degree of Interest item list in DB FCI cpfrequent closed itemsets be mined Method a Y be a set of some cp-frequent items in ID list&,/l where every item all appears in every transaction of DB If XuY is not a proper subset of an itemset in FCI of the same support then insert it into FCI  FP-tree of DB c FP-tree only bas one path then we can directly extract cpfrequent closed itemsets from it d every of the rest items in ID-Iist construct its conditional database and calculate the local frequent item list of these conditional databases e every of the rest item in ID-lista\(&lm start at the last one item in ID-list&l If aX is not a proper subset of an cp-frequent closed itemet be mined of the same support then recursively call Gen-cp-CSET aX DBC F list&l ID-list&fd FCI where DBI is an a conditional database with respect to DB F-list&lm is its corresponding fresoent item list ID-liSt.,\(s/l is its corresponding degree of interest item list Propositron 3 If X is not cpfresuent then there does not exist cpfrequent itemset in X-conditional database namely in the mining process X-conditional database does not need constructing Proof Because in the mining process items of large degree of interest are regarded earlier all the itemsets in X conditional database have the same degree of interest and their support is not greater than X According to the definition of cp-frequent itemset all the itemsets in X conditional database are not gfrequent namely in the mining process X-conditional database does not need Remark 2 Similar to the proof in 3 the above algorithm is also correct Example 1 We have the following table 1 to illustrate the above results Suppose the minimum support 2009.5 the degree of interest of every item in itemset a b c d e f is  1 1.5,0.5,2 I 1 respectively According to the above algorithm the mining process is as follows 1 out F-list 0.32 and ID-list 0.512 constructing Table 1 Transaction database Items a, c d e f c e f a c d f c, e f In this example F-list 0.5/2 e:4 t4 a:3 d2 where item is sorted by the support descending order, the number er  is denoted as its support. According to cp ID-list OSn a f e d The following table 2 is the above transaction database sorted by the ID-list 092 order Table 2 Transaction database c f e c, a f d c e f 2 search space In this example All the cp frequent closed itemsets can he divided into 5 non-overlap subsets based on ID-list 0.5/2 a\ones containing item d  ones containing item e but no d c\ones containing item f but no d nor e d containing item a but nod e nor E e one containing only c 3 subsets of cpfrequent closed itemsets The subsets of cpfrequent closed itemsets can be mined by 1216 


Proceebgs of the First International Conference on Machine Learning and Cybernetics Beijing 4-5 November 2002 Database TlOl8D1OK TlOIlDlOK TlOI8DlOK T1018D40K T1018D40K T1018D40K constructing corresponding conditional databases and mine each recursively a cpfrequent closed itemsets containing d Only transactions containing d are needed The d-conditional database, denoted as TDBld contains all the transactions having d which is cefa:l,cfa:l Notice that the item d is omitted in each transaction since it appears in every transaction in the d-conditional database. The support of d is 2 The large degree of interest of item is DI\(d\Items c f and a appear twice respectively in TDBld Namely, every transaction containing d also contains c f and a Moreover e is not pfrequent Therefore dcfa 2 is a cp-frequent closed itemsets. Since this item covers every cp-frequent item in TDBld the mining of TDBld finishes cpfrequent closed itemsets containing e but no d Similarly the e-conditional database TDBI.=\(caf:l a:l cE2 Item d in such transactions is also omitted. The large degree of interest of item is DI e Since there is no any item appearing in every transaction in TDBI and the 221p support of e is 4 e 4 is a cpfrequent closed itemset To fmd the remaining cpfrequent closed itemsets containing e but no d we need recursively mine that is to find the local frequent item list of e-conditional database F-list 0.5/1 f:3 and Il-list\(O.5/l b Since c f appears in every transaction in e-conditional database we can directly obtain that ecf 3 is a cpfrequent closed itemset in e-conditional database The mining of TDBI finishes c frequent closed itemsets containing f hut no d nor e f-conditiond database TDBlf;\(ca:2 The large degree of interest of item is DI f Because c appears in every transaction of TDBlr and fc is not a subset of any cp frquent closed itemset with the same support fc 4 is a cp fkequent closed itemset Since a is not local cpfrequent The mining of TDBlr finishes d\cpfrequent closed itemsets containing a but no d e nor f a-conditional database TDBI.=\(c:2 The large degree of interest of item is DI a Since cis not local cp frequent. The mining of TDBI finishes e\cpfrequent closed itemsets containing only c c-conditional database TDBIc The large degree of interest of item is Dl\(c Although c appears in every transaction in TDBI c:4 is not cp-frequent The mining of TDBI finishes 4 set of all the cp-frequent closed itemsets FCI is dcfa:2 e:4 fce:3 fc:4 5 Performance evaluation and conclusions Experiments are carried out to compare the efficiency of our algorithm noted as Al and the algorithm proposed in 121 noted as A2 The dataset for experiment is generated based on the principle intmduced in 181 The experiments are performed on a 733 Pentium PC machine with 320MB main memory running on Microsoft Windows 2OOO The entire algorithms were written in Ctt The method of generating degree of interest of items is Number Minimum A1 A2 ofitems support 8 s 40 0.01 222 6.0 7.8 40 0.02 222 5.4 5.9 40 0.04 5.0 5.3 80 0.01 7.1 9.1 80 0.02 6.5 7.9 80 0.04 6.1 7.2 References T LI Mining rp-frequent itemset using FP-tree Journal of southwest Jiaotong University Vo1.9 pp67 14,2001 T Ll Y XU W PAN The problem of cp-frequent closed itemset mining and its algorithm Journal of southwest Jiaotong University Chinese Vo1.36 pp225-228,2001 J Pei J Han R Mao CLOSET An efficient algorithm for mining frequent closed itemsets DMKD\222OO Dallas TX pplI-20,2OOO B Liu W Hsu Y Ma. Mining association rules with multiple minimum supports KDD\22299 San Diego, CA USA, pp337-341, 1999 J Han and Y Fu Discovery of multiple-level association rules from large databases IEEE Transactions on Knowledge and Data Engineering Vol.11 ppl-8 1999 C Cai W Fu C Cheng and W Kwong Mining association des with weighted items KDD\22297 pp102-112,1997 R Agrawal, Imielinki A Swami Mining association rules between sets of items in large databases 1217 


Proceedings of the First Internadond Conference on Machine Learning and Cybernetics Beijing 45,November 2002 Proceeding of ACM SIGMOD Conference on Management of Data Washington D C pp207-216 1993 SI N Pasquier Y  Bastide R Taouil L Lakhal Efficient mining of association rules using closed itemset lattices Information Systems Vo1.24 pp25-46 1999  9  J Han J Pei and Y Yin Mining frequent.pattems without candidate generation Proceeding of ACM SIGMOD Conference on Management of Data, Dallas TX ppl-20,2000 IO M J m C. Hsiao, CHARM An efficient dgorithrn for closed association rule mining, Tech Rep 99-10 Computer Science Rensselaer Polytechnic Institute ppl-24 1999 i 1218 


031 computing for each span needs one subtraction, the total number of subtractions is 2+4+\205+\(n-2\=n\(n-2\4. Thus the complexity is O\(n 2  c  It is easy to see that based on the Peak-Valley Chain The Aggregation array PV_AggregateArray[MaxPV c a n be constructed by calling simple functions such as Max Min, Average in a loop. The implementation in Hbase is G et_PV_AggregateArray Its details were omitted because simplisity. It will be used in following algorithm Algorithm 3 Mining Relaxed-Periodicity Input Temporal Database\(TDB attribute A loop control number MaxPV Output The Relaxed-periodicity for the values of attribute A in TDB Procedure z  Step1 Select appropriate time granularity, Use temporal operation such as projection and  TDrill TRoll, prepare time series data  including TimeArray of size L  as the inputs of Algorithm 1 z  Step2 By Inertia Algorithm Algorithm1  produce TrendArray[L for a t t r i b ut e  A by i n e r t i a pr i n c i p l e  z  Step3 By Peak-Valley  Algorithm produce PeakValley Chain z  Step4 For k=2 to MaxPV, computing the k-Span Array by Theorem 2. Then construct k-th PeakValley Aggregation Record as PV_ AggregateArray  Find integer j such that PV_ AggregateArray[j  D i f f S is m i ni mum  for 2 0 j 0 MaxPV z  Step5 Output PV_AggregateArra  A v e S a s Relaxed-periodicity of Attribute A c Example 5 Mining the Relaxed-periodicity from the data in Figure 2 1  Set parameters as following   The current granularity  is MONTH  MaxNoise=1 loop control number MaxPV=3   Trend inertia function is GetInertia \(A , TrendType 310 Duration 0.01*Duration Inertia transfer function is InertiaToAntiNoise \(TheTrend, InertiaValue InertiaValue 2\pply our algorithms 1, get the TrendArray as Fig .4 3\ Algorithm 2, based on the TrendArray and    scanning the temporal database ,get the Peak -valley Chain The chain is as following S1= \(Peak, 15, 95. 02 316 S2= \(Valley, 5, 95.05 316 S3= \(Peak, 10, 95.09 316 S4= \(Valley, 5, 95.11 316 S5= \(Peak , 17, 96.02 316 S6= \(Valley, 6, 96.04 316 S7= \(Peak , 17, 96.08 316 S6= \(Valley,8, 96.10  Time 1995 Trend Time 1996 Trend 95.1 EdgeInit 96.1 Up 95.2 Peak 96.2 Peak 95.3 Down 96.3 Down 95.4 Down 96.4 Valley 95.5 Valley 96.5 Up 95.6 Up 96.6 Up 95.7 Up 96.7 Up 95.8 Up 96.8 Peak 95.9 Peak 96.9 Down 95.10 Down 96.10 Valley 95.11 Valley 96.11 Up 95.12 Up 96.12 EdgeIni t   Fig .3  The trend array 4\For 2 0 k 0  MaxPV=3, construct k-span array the results are SpanArray 2 7,6,5,6,6.4 SpanArray 3 12,12,11,11 By simple aggregation function, get Peak-Valley Arregation Array   Its contents is shown in Fig. 4  with current time granularity = MONTH Agg K MaxSpan MinSpan AveSpan DiffSpan  274 5.63 3 12 11 11.5 0 .5   Fig. 4 The statistics for k-Span Array 5\Note that PV_AggregateArra h a s m i n i m u m DiffSpan value. Thus the relaxed periodicity of attribute A is the AveSpan in PV_AggregateArra i  e  11  5  Werounded 11.5 to 12  \( since time granularity is not dividable \. Thus the periodicity. of the specified attribute is 12 months c 5 Discussion   1\ Note that our mining process is based on the PeakValley Chain \(or Peak-Valley pattern\ regardless the inflation or deflation. Once we get the Relaxedperiodicity p, we can figure out the average inflation at k+1\th period \(with respect to k-th period \y the following procedure 


032 Procedure 2  GetInflation k \ // inflation at \(k+1\th segment  TotalInflation =0 For \(i=kp; i<\(k+1\*p; i TotalInflation  Get_Attr_at\(A,k*p+p+i\Get_Attr_at\(A, k*p+i    AverageInflation = TotalInflation / L Return AverageInflation c 2\e apply our algorithms to the Data Warehouse for Earthquake information of Sichuan Province. The test data keep the transmogrification information for the AnNing River Area measured  by stain gauge from 1970 to 1995. The total numeber of records  is 10000 The result is consistent with historical facts. The performance study \(not included here for lack of space shows that the implementation of our methods in Hbase is acceptable for temporal databases with practical scale 6 Summary We discuss the phenomena with Relaxed Periodicity  introduce the concepts of attribute trend, trend inertia and Peak-Valley Chain propose the Inertia Algorithm and Peak-Valley Algorithm    Note that, the Trend Inertia is the essential property of object. Once we construct a good inertia function and a good inertia evaluation function, we can calculate the trend of temporal attributes just like what happens in the real world. The Peak-Valley Chain \(or Peak-Valley pattern disregards the noises and inflation, gives global trend of attributes. The pattern itself is a kind of knowledge, for example, when we talk about a pattern of career \223with tree valley and tree peaks, and each peak is higher than previous peak\224, people may remember a great statesman in the contemporary era of China. The further study on Peak-Valley Chain, Inertia function and inertia transfer function will be discussed elsewhere References 1   T e m po r a l D a t a ba s e s  T h eor y  D e s i gn a n d   I m p l e m en t a t i on  A Tansel, J.Clifford, S.    Dadia,.Jajodia,  A.Segev and R.Snodgrass, The Benjamin Cummings Publishing Company 1993 2  Tang Changjie and Xiong Min 000 The Temporal Mechanisms in  HBase 001 Journal of Computer Science and  Technology,  Vol.11, No.4 July 1996, P365\227371 304 3  Tang Changjie, Yu Zhonghua, Zhang Tainqing, Xu DaiGangang and Yang Feng: \223Storage By Separate Historical Segment in Temporal Database\224, in Proceedings of The 15-th Conference   on Database of China \(CDBC 98 \.Nanjing city, Oct.1998 4  Ozden,B., Ramaswamy, S. And Silberschatz, A. 1998. Cyclic association rules, In Proc. Of 1998 international Conference Data Engineering \(ICDE\22298\, p412-421 5  Jiawei Han, WanGong anf Yiwen Yin :Mining Segment-wise Periodic Pattern in Time Related   Databases, Proc. Of 1998 of International Conf. On Knowledge Discovery and Data   Mining\(KDD\22298\ New York City, NY. Aug 1998 6  Rakesh Agrawal, King-Ip Ling, Harpreet S. Sawhney Kyuseok Shim,  Fast Similarity Search    in the presence of Noise, Scaling, and Translation in Time-Series Databases Procedings of    the 21-st VLDB Conference Zurich Switzerland 1995 7  Sakoe,H., and Chiba,S.1990, Dynamic Programming Algorithm Optimization for  Spoken   Word Recognition In Readings  In speech Recognition eds. Waibel,A. And Lee,K., 159-  165.San Mateo,CA: Morgan Kaufman Publishers, Inc 8  Usama M.Fayyad,Grerory Piatetsky-Shapiro, Ed Advanced in Knowledge Discover and  Data Mining, AAAI Press The MIT Press 1996.p1-25 


Ministry of Education Science Sports and Culture of Japan References l R Agrawal and R Srikant Fast algorithms for mining association rules In Proc of the 20th International Conference on Very Large Data Bases pages 487-499 Santiago, Chile 1994 2 Alta Vista Company Alta vista http://www.altavista.com 31 C Chen Information Visualization and Virtual En vironment Springer 1999 4 U M Fayyad G Piatetsky-Shapiro P Smyth, and R Uthurusamy Advances in Knowledge Discovery and Data Mining AAAI/MIT Press 1996 5 R Feldman Practical text mining In Second Sym posium on Principles of Data Mining and Knwoledge Discovery PKDD-97 Nantes, France 1998 fresheye http://www.fresheye.com 6 Fresheye Cooporation  Google Inc google http://www.google.com 181 A Gupta and S Mumick Materialized Views Tech niques Implementations and Applications The MIT press 1998 9 J Han S Nishio H Kawano and W Wei Generalization-based data mining in object-oriented databases using an object cube model Data and Knowledge Engineering 25 1998 lo M Kawahara and H Kawano Performance evaluation of bibliographic navigation system with association rules from roc convex hull method Transactions of the IPSJ:Database 40\(SIG3\(TOD1 1999 I 11 M Kawahara and H Kawano Performance evaluation of bibliographic navigation system with materialized association rules Transactions of the IEICE D-I J82 1121 Wf Kawahara and H Kawano The other thresholds in the mining association algorithm In Proc of The 14th International Conference on Systems Engineer ing ICSE 2000 volume 1 Coventry UK Sep 2000 I31 M Kawahara H Kawano and T Hasegawa Data mining technologies for bibliographic navigation sys tem Transactions of the ZPSJ 39\(4 I41 H Kawano Mondou Web search engine with textual data mining In Proc of IEEE Pacific Rim Confer ence on Communications, Computers and Signal Pro cessing pages 402-405 1997 15 H Kawano Text and web mining panel discussion In International Workshop and Web Knowledge Dis covery and Data Mining WKDDM\2222000 in conjunc tion with PAKDDOO Keihanna Japan 2000 To see or not to see is that the query In Proc of 14th ACM/SIGIR pages 134-141 Chicago IL USA 1991 D-I\(1 1999 16 R R Korfhage 17 M Koster Guidelines for robot writers 18 Y Matsumoto S Kurohashi T Utsuro Y Myoki and M Nagao Japanese morphological analysis sys tem juman manual version 1.0 Nara Institute of Sci ence and Technology 1993 19 R Michalski I Bratko h4 Kubat and eds Ma chine Learning and Data Mining Methods and Appli cations John Wiley  Sons 1998 20 NTT-X goo http://www.goo.ne.jp 21 Members of the Clever Project Hypersearching the web June 1999 22 F Provost and T Fawcett. Analysis and visualization of classifier performance Comparison under imprecise class and cost distributions In Proceedings of 3rd Int 222I Conference on Knowledge Discovery and Data Mining KDD-97 pages 43-48 1997  Yahoo Inc Yahoo http://www.yahoo.com 24 1 


FIGURE 5 Execution time and rules returned versus minimum coverage for the various algorithms FIGURE 6 Execution time of dense_0002 as minconf is varied for both data-sets. Minimum coverage is fixed at 5% on pums and 1% on connect-4 FIGURE 7 Maximum confidence rule mined from each data-set for a given level of minimum coverage   1 10 100 1000 10000 100000 0 10 20 30 40 50 60 70 80 90 Execution time \(sec Minimum Coverage connect-4 apriori_c  dense_0002   dense_002   dense_02    1 10 100 1000 10000 100000 1e+06 0 10 20 30 40 50 60 70 80 90 Number of Rules Minimum Coverage connect-4 apriori_c  dense_0002   dense_002   dense_02    1 10 100 1000 10000 100000 0 10 20 30 40 50 60 70 80 90 Execution Time \(sec Minimum Coverage pums apriori_c  dense_0002   dense_002   dense_02    1 10 100 1000 10000 100000 1e+06 1e+07 0 10 20 30 40 50 60 70 80 90 Number of Rules Minimum Coverage pums apriori_c  dense_0002   dense_002   dense_02    0 500 1000 1500 2000 2500 3000 3500 20 25 30 35 40 45 50 55 60 65 Execution time \(sec minconf pums  connect-4  1 10 100 1000 10000 100000 1e+06 20 25 30 35 40 45 50 55 60 65 Number of Rules minconf pums  connect-4    0 10 20 30 40 50 60 70 80 90 100 0 10 20 30 40 50 60 70 80 90 100 Highest Rule Confidence Minimum Coverage pums  connect-4 


8.2  Effects of minimum confidence The next experiment \(Figure 6\ws the effect of varying minconf while fixing minimp and minsup to very low values. With connect-4, we used a minimum coverage of 1%, and with pums, a minimum coverage of 5%. Minimp was set to .0002 with both data-sets. As can be extrapolated from the previous figures, the number of rules meeting these weak minimp and minsup constraints would be enormous As a result, with these constraints alone, Dense-Miner exceeds the available memory of our machine The efficiency of Dense-Miner when minimum confidence is specified shows that it is effectively exploiting the confidence constraint to prune the set of rules explored. We were unable to use lower settings of minconf than those plotted because of the large number of rules. As minconf is increased beyond the point at which fewer than 100,000 rules are returned, the run-time of Dense-Miner rapidly falls to around 500 seconds on both data-sets 8.3  Summary of experimental findings These experiments demonstrate that Dense-Miner, in contrast to approaches based on finding frequent itemsets achieves good performance on highly dense data even when the input constraints are set conservatively. Minsup can be set low \(which is necessary to find high confidence rules as can minimp and minconf \(if it is set at all\This characteristic of our algorithm is important for the end-user who may not know how to set these parameters properly. Low default values can be automatically specified by the system so that all potentially useful rules are produced. Refinements of the default settings can then be made by the user to tailor this result. In general, the execution time required by Dense-Miner correlates strongly with the number of rules that satisfy all of the specified constraints 9.     Conclusions We have shown how Dense-Miner exploits rule constraints to efficiently mine consequent-constrained rules from large and dense data-sets, even at low supports. Unlike previous approaches, Dense-Miner exploits constraints such as minimum confidence \(or alternatively, minimum lift or conviction\ and a new constraint called minimum improvement during the mining phase. The minimum improvement constraint prunes any rule that does not offer a significant predictive advantage over its proper sub-rules. This increases efficiency of the algorithm, but more importantly it presents the user with a concise set of predictive rules that are easy to comprehend because every condition of each rule strongly contributes to its predictive ability The primary contribution of Dense-Miner with respect to its implementation is its search-space pruning strategy which consists of the three critical components: \(1\functions that allow the algorithm to flexibly compute bounds on confidence, improvement, and support of any rule derivable from a given node in the search tree; \(2\proaches for reusing support information gathered during previous database passes within these functions to allow pruning of nodes before they are processed; and \(3\ item-ordering heuristic that ensures there are plenty of pruning opportunities. In principle, these ideas can be retargeted to exploit other constraints in place of or in addition to those already described We lastly described a rule post-processor that DenseMiner uses to fully enforce the minimum improvement constraint. This post-processor is useful on its own for determining the improvement value of every rule in an arbitrary set of rules, as well as associating with each rule its proper sub-rule with the highest confidence. Improvement can then be used to rank the rules, and the sub-rules used to potentially simplify, generalize, and improve the predictive ability of the original rule set References 1 w a l  R.; Im ie lin ski  T   a n d S w a m i, A. 1 9 9 3   M i n i ng As so ciations between Sets of Items in Massive Databases. In Proc of the 1993 ACM-SIGMOD Int\222l Conf. on Management of Data 207-216 2 raw a l R.; M a n n ila, H Sri k an t  R T o i v o n en  H.; an d  Verkamo, A. I. 1996. Fast Discovery of Association Rules. In Advances in Knowledge Discovery and Data Mining AAAI Press, 307-328 3 K Ma ng a n a r is S a n d Sri k a n t, R 19 97  P a rtia l Cl a ssif i cation using Association Rules. In Proc. of the 3rd Int'l Conference on Knowledge Discovery in Databases and Data Mining 115-118 4 a rd o  R. J 1 9 9 8  Ef f i c i en tly Min i n g  Lo n g  P a ttern s fro m  Databases. In Proc. of the 1998 ACM-SIGMOD Int\222l Conf. on Management of Data 85-93 5  Mi c h ae l J. A a n d  Lin o f f G  S 1 9 9 7  Data Mining Techniques for Marketing, Sales and Customer Support John Wiley & Sons, Inc 6 Bri n, S  M o t w a n i, R.; Ullm a n J.; a n d  Tsu r S. 19 9 7 Dyn a m i c  Itemset Counting and Implication Rules for Market Basket Data. In Proc. of the 1997 ACM-SIGMOD Int\222l Conf. on the Management of Data 255-264 7 h e n  W   W   1 9 9 5 F a st Ef fecti v e Ru le In d u ctio n   In  Proc. of the 12th Int\222l Conf. on Machine Learning 115-123 8 In tern atio n a l Bu sin e s s Mac h in e s   1 9 9 6  IBM Intelligent Miner User\222s Guide Version 1, Release 1 9 m e t tin e n M   Ma nn ila  P  Ro nk a i ne n  P   a n d V e rk a m o  A  I. 1994. Finding Interesting Rules from Large Sets of Discovered Association Rules. In Proc. of the Third Int\222l Conf. on Information and Knowledge Management 401-407 10  Ng   R  T    L a k s hm ana n   V   S    Ha n  J   an d P a ng A  1 9 9 8   Exploratory Mining and Pruning Optimizations of Constrained Association Rules. In Proc of the 1998 ACM-SIGMOD Int\222l Conf. on the Management of Data 13-24 11 Ry mo n  R 1 9 9 2   Search  t h ro u g h Sy s t e m atic S e t En u m era tion. In Proc. of Third Int\222l Conf. on Principles of Knowledge Representation and Reasoning 539-550 1  Sha f e r  J  A g r a w a l R   an d Me ht a M 19 98  SPR I N T   A  Scalable Parallel Classifier for Data-Mining. In Proc. of the 22nd Conf. on Very Large Data-Bases 544-555 13  S m y t he P  and  Go od man   R  M 19 92 An I n f o r m at i o n Th eo retic Approach to Rule Induction from Databases IEEE Transactions on Knowledge and Data Engineering 4\(4\:301316 14  S r i k a n t   R    V u  Q an d Ag r a w a l  R  19 97 M i ni ng  A ssoc i a tion Rules with Item Constraints. In Proc. of the Third Int'l Conf. on Knowledge Discovery in Databases and Data Mining 67-73 15 W e bb, G. I 1 9 9 5 OP U S An Ef f i c i e n t Adm i ssible Algo rit h m for Unordered Search. In Journal of Artificial Intelligence Research 3:431-465 


It can also be added to cell CrossSales.3\(PC, printer one_year,\205 5  Distributed and Incremental Rule Mining There exist two ways to deal with association rules 267  Static that is, to extract a group of rules from a snapshot, or a history, of data and use "as is 267  Dynamic that is, to evolve rules from time to time using newly available data We mine association rules from an e-commerce data warehouse holding transaction data. The data flows in continuously and is processed daily Mining association rules dynamically has the following benefits 267  223Real-time\224 data mining, that is, the rules are drawn from the latest transactions for reflecting the current commercial trends 267  Multilevel knowledge abstraction, which requires summarizing multiple partial results. For example association rules on the month or year basis cannot be concluded from daily mining results. In fact multilevel mining is incremental in nature 267  For scalability, incremental and distributed mining has become a practical choice Figure 3: Distributed rule mining Incremental association rule mining requires combining partial results. It is easy to see that the confidence and support of multiple rules may not be combined directly. This is why we treat them as \223views\224 and only maintain the association cube, the population cube and the base cube that can be updated from each new copy of volume cube. Below, we discuss several cases to show how a GDOS can mine association rules by incorporating the partial results computed at LDOSs 267  The first case is to sum up volume-cubes generated at multiple LDOSs. Let C v,i be the volume-cube generated at LDOS i The volume-cube generated at the GDOS by combining the volume-cubes fed from these LDOSs is 345   n i i v v C C 1  The association rules are then generated at the GDOS from the centralized C v  214  The second case is to mine local rules with distinct bases at participating LDOSs, resulting in a local association cube C a,I a local population cube C p,I  and a local base cube C b,i at each LDOS. At the GDOS, multiple association cubes, population cubes and base cubes sent from the LDOSs are simply combined, resulting in a summarized association cube and a summarized population cube, as 345   n i i a a C C 1   345   n i i p p C C 1  and 345   n i i b b C C 1  The corresponding confidence cube and support cube can then be derived as described earlier. Cross-sale association rules generated from distinct customers belong to this case In general, it is inappropriate to directly combine association cubes that cover areas a 1 205, a k to cover a larger area a In the given example, this is because association cubes record counts of customers that satisfy   customer product merchant time area Doe TV Dept Store 98Q1 California Doe VCR Dept Store 98Q1 California customer product merchant time area Doe VCR Sears 5-Feb-98 San Francisco Joe PC OfficeMax 7-Feb-98 San Francisco customer product merchant time area Doe TV Fry's 3-Jan-98 San Jose Smith Radio Kmart 14-Jan-98 San Jose Association   population      base          confidence      support cube               cube                cube         cube                cube LDOS LDOS GDOS 


the association condition, and the sets of customers contained in a 1 205, a k are not mutually disjoint. This can be seen in the following examples 214  A customer who bought A and B in both San Jose and San Francisco which are covered by different LDOSs , contributes a count to the rule covering each city, but has only one count, not two, for the rule A  336  B covering California 214  A customer \(e.g. Doe in Figure 3\who bought a TV in San Jose, but a VCR in San Francisco, is not countable for the cross-sale association rule TV  336 VCR covering any of these cities, but countable for the rule covering California. This is illustrated in Figure 3 6  Conclusions In order to scale-up association rule mining in ecommerce, we have developed a distributed and cooperative data-warehouse/OLAP infrastructure. This infrastructure allows us to generate association rules with enhanced expressive power, by combining information of discrete commercial activities from different geographic areas, different merchants and over different time periods. In this paper we have introduced scoped association rules  association rules with conjoint items and functional association rules as useful extensions to association rules The proposed infrastructure has been designed and prototyped at HP Labs to support business intelligence applications in e-commerce. Our preliminary results validate the scalability and maintainability of this infrastructure, and the power of the enhanced multilevel and multidimensional association rules. In this paper we did not discuss privacy control in customer profiling However, we did address this issue in our design by incorporating support for the P3P protocol [1 i n  ou r data warehouse. We plan to integrate this framework with a commercial e-commerce system References 1  Sameet Agarwal, Rakesh Agrawal, Prasad Deshpande Ashish Gupta, Jeffrey F. Naughton, Raghu Ramakrishnan, Sunita Sarawagi, "On the Computation of Multidimensional Aggregates", 506-521, Proc. VLDB'96 1996 2  Surajit Chaudhuri and Umesh Dayal, \223An Overview of Data Warehousing and OLAP Technology\224, SIGMOD Record Vol \(26\ No \(1\ 1996 3  Qiming Chen, Umesh Dayal, Meichun Hsu 223 OLAPbased Scalable Profiling of Customer Behavior\224, Proc. Of 1 st International Conference on Data Warehousing and Knowledge Discovery \(DAWAK99\, 1999, Italy 4  Hector Garcia-Molina, Wilburt Labio, Jun Yang Expiring Data in a Warehouse", Proc. VLDB'98, 1998 5  J. Han, S. Chee, and J. Y. Chiang, "Issues for On-Line Analytical Mining of Data Warehouses", SIGMOD'98 Workshop on Research Issues on Data Mining and Knowledge Discovery \(DMKD'98\ , USA, 1998 6  J. Han, "OLAP Mining: An Integration of OLAP with Data Mining", Proc. IFIP Conference on Data Semantics DS-7\, Switzerland, 1997 7  Raymond T. Ng, Laks V.S. Lakshmanan, Jiawei Han Alex Pang, "Exploratory Mining and Pruning Optimizations of Constrained Associations Rules", Proc ACM-SIGMOD'98, 1998 8  Torben Bach Pedersen, Christian S. Jensen Multidimensional Data Modeling for Complex Data Proc. ICDE'99, 1999 9  Sunita Sarawagi, Shiby Thomas, Rakesh Agrawal Integrating Association Rule Mining with Relational Database Systems: Alternatives and Implications", Proc ACM-SIGMOD'98, 1998   Hannu Toivonen, "Sampling Large Databases for Association Rules", 134-145, Proc. VLDB'96, 1996   Dick Tsur, Jeffrey D. Ullman, Serge Abiteboul, Chris Clifton, Rajeev Motwani, Svetlozar Nestorov, Arnon Rosenthal, "Query Flocks: A Generalization of Association-Rule Mining" Proc. ACM-SIGMOD'98 1998   P3P Architecture Working Group, \223General Overview of the P3P Architecture\224, P3P-arch-971022 http://www.w3.org/TR/WD-P3P.arch.html 1997 


Plenary Panel Session 30 XML Databases   Moderator: Michael Carey, IBM Almaden Research Center USA Panelists Adam Bosworth, Microsoft Corporation USA David De Witt University of Wisconsin-Madison, USA Alon Levy University of Washington USA Bruce Lindsay IBM Almaden Research Center USA Jennifer Widom Stanford University USA Demo Session 1 Web Query Optimizer  661 V Zadorozhny L Bright L Raschid T Urhan and M Vidal ReQueSS: Relational Querying of Semi-structured Data  664 R Sunderraman The IDEAL Approach to Internet-Based Negotiation for E-Business  666 J Hammer C Huang Y Huang C Pluempitiwiriyawej M Lee H Li L Wang Y Liu and S Su READY A High Performance Event Notification Service  668 R Gruber B Krishnamurthy, and E Panagos A Multimedia Information Server with Mixed Workload Scheduling  670 G Nerjes DISIMA An Object-Oriented Approach to Developing an Image Database System  672 V Oria T Ozsu P Iglinski B Xu and L Cheng Demo Session 2 The Collaboration Management Infrastructure  677 H Schuster D Baker A Cichocki D Georgakopoulos and M Rusinkiewicz Assisting the Integration of Taxonomic Data The LITCHI Toolkit  679 I Sutherland J Robinson S Brandt A Jones S Embury W Gray R White and F Bisby TheaterLoc: Using Information Integration Technology to Rapidly Build Virtual Applications  681 G. Barish Y.4 Chen D Dipasquo, C Knoblock S Minton I Muslea and C Shahabi Lineage Tracing in a Data Warehousing System  683 Y Cui and J Widom xiii 


The Mentor-Lite Prototype A Light-Weight Workflow Management System  685 J Weissenfels M Gillmann 0 Roth, G Shegalov and W Wonner Location Prediction and Queries for Tracking Moving Objects  687 0 Wolfson B Xu and S Chamberlain Semiorder Database for Complex Activity Recognition in Multi-Sensory Environments  689 S Bhonsle A Gupta S Santini and R Jain Tutorial 1 Web Information Retrieval  693 M Henzinger Tutorial 2 Mobile and Wireless Database Access for Pervasive Computing  694 P Chrysanthis and E Pitoura Tutorial 3 Data Mining with Decision Trees  696 J Gehrke Tutorial 4 Directories Managing Data for Networked Applications  697 D Srivastava Tutorial 5 Indexing High-Dimensional Spaces Database Support for Next Decade\222s Applications  698 S Berchtold and D Keim xiv 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


