 Mining Association Rules in Text Databases Using Multipass with Inverted Hashing and Pruning John D Holt and Soon M Chung Dept of Computer Science and Engineering 
Wright State University Dayton Ohio 45435, USA Abstract In this paper we propose a new algorithm named Multipass with Inverted Hashing and Pruning MI HP for mining association rules between words in text databases The characteristics of text databases are quite different from those of retail transaction databases, and existing mining algorithms cannot handle text databases efficiently because of the large number of itemsets i.e words that need to be counted Two well-known mining algorithms the Apriori algo 
rithm and the Direct Hashing and Pruning DHP algorithm are evaluated in the context of mining text databases and are compared with the proposed MI HP algorithm It has been shown that the MI HP algorithm has better performance for large text databases Keywords association rules text database inverted hashing performance analysis 1 Introduction Mining association rules in transaction databases has been demonstrated to be useful and technically feasible in several application areas  particularly in retail sales Let I  il,i2 im be a set of items 
Let V be a set of transactions where each transaction T is a set of items such that T  I An association rule is an implication of the form X Y where X C I y C I and X n y  I>. The association rule X y holds in the database V with confidence c if c% of transactions in V that contain X also contain Y The rule X y has support s if s% of transactions in V contain X U Y Mining association rules is to find all association rules that have support and confidence greater than or equal to the user-specified minimum support called minsup and minimum confidence called mincon  respectively For exampIe beer and disposable diapers are items such that 
beer =>- diapers is an association rule mined from the database if the co-occurrence rate of beer and disposable diapers in the same transaction is not less than minsup and the occurrence rate of diapers in the transactions containing beer is not less than minconf The first step in the discovery of association rules is to find each set of items called itemset that have co-occurrence rate above the minimum support An 
itemset with at least the minimum support is called a large itemset or a frequent items et In this paper the term frequent itemset will be used The size of an itemset represents the number of items contained in the itemset and an itemset containing k items will be called a k-itemset For example beer disposable diapers can be a frequent 2-itemset Finding all frequent itemsets is a very resource consuming task and has received a considerable amount of research effort in recent years The second step of forming the association rules from the frequent itemsets is straightforward as described in For every frequent itemset f  find all non-empty subsets of f For every such subset a generate a rule of the form a =>- \(1 a if the ratio of support\(1 to support\(a is at least minconf 
The association rules mined from point-of-sale pas transaction databases can be used to predict the purchase behavior of customers In the case of text databases there are several uses of mined association rules The association rules for text can be used for building a statistical thesaurus Consider the case that we have an association rule B C where B and C are words A search for documents containing C can be expanded by including B This expansion will allow for finding documents using C that do not contain C as a term A closely related use is Latent Semantic Indexing where documents are considered close to each other if they share a sufficient number of associations Latent Semantic Indexing can be used to retrieve documents that do not have any terms in common with the original text search expression by 
This research was supported in part by LexisNexis and NCR Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence \(ICTAI\22202 1082-3409/02 $17.00 \251 2002 IEEE 


adding documents to the query result set that are close to the documents in the original query result set The word frequency distribution of a text database can be very different from the item frequency distribution of a sales transaction database Additionally the number of unique words in a text database is significantly larger than the number of unique items in a transaction database Finally the number of unique words in a typical document is much larger than the number of unique items in a transaction These differences make the existing algorithms such as Apripri and Direct Hashing and Pruning DHP ineff~ctive in mining association rules in the text databases A new algorithm suitable for mining association rules in text databases is proposed in this paper This algorithm is named Multipass with Inverted HaJshing and Pruning MI HP and is described in Section 3 The results of performance analysis are discussed in Section 4 The new algorithm demonstrated s~gnificantly better performance than Apriori and DHP algorithms for large text databases 2 Text Databases i Mining associations rules between words inl controlled vocabularies has been done in 3 Documents labeled with a controlled vocabulary were mined for association rules Generalized association rules can also be mined when the controlled votabulary has a thesaurus by substituting broadening terms The number of controlled vocabulary terms a~plied to a particular document is much smaller tham the number of unique words in the same document Using controlled vocabularies can improve precisiQn for many kinds of searching However when the terms of interest are new so that they are not in the cont~olled vocabulary both precision and recall are adversely affected This paper is concerned with finding associations between words in text documents without using a controlled vocabulary The word distribution characteristics of text data present some scalability challenges to the algorithms that are typically used in mining transaction databases A sample of text documents was drawn from the 1996 TREC Text Research Collection The sample consisted of the April 1990 Wall Street Journal articles that were in the TREC There were 3,568 articles and 47 189 unique words Most of those  words occur in only a few of the documents Some of the key distribution statistics are  I 48.2 of the words occur in only one document i 13.4 of the words occur in only two documentsj 7.0 of the words occur in only three documents The mean number of unique words in a document was 207, with a standard deviation of 174.2 words In this sample only 6.8% of the words occurred in more than 1% of the documents A single day sample of January 21 1990 was taken as well In that sample there were 9,830 unique words and 78.3 of the words occurred in three or fewer documents The characteristics of this word distribution have profound implications for the effic.iency of association rule mining algorithms The most important implications are 1 the large number of items and combinations of items that need to be counted and 2 the large number of items in each document in the database It is commonly recognized in the information retrieval community that words that appear uniformly in a text database have little value in differentiating documents and further those words occur in a substantial number of documents It is reasonable to expect that frequent itemsets composed of highly frequent words typically considered to be words with occurrence rates above 20%\would also have little value Therefore text database miners need to work with itemsets composed of words that are not too frequent but are frequent enough The range of minimum and maximum support suitable for word association mining is not known at this time However it is clear that word association mining will require using minimum support levels that are significantly lower than the ones typically used for pas transaction databases The relatively low minimum support required for text database mining exacerbate the problems caused by the word frequency distribution In text documents the preponderance of the words are of moderate or low frequency and these words are precisely the words of interest for finding frequent itemsets 3 Multipass with Inverted Hashing and Pruning MI HP Algorithm The new Multipass with Inverted Hashing and Pruning MI HP Algorithm is a combination of the Multipass-Aprirori M-Apriori algorithm and the Inverted Hashing and Pruning IHP algorithm that we proposed They are described below in Section 3.1 and Section 3.2 respectively Due to M-Apriori we can reduce the the required memory space by partitioning the frequent l-itemsets and processing each partition separately At the same time by using IHP we can prune some of the candidate itemsets generated for each pass efficiently 3.1 Multipass-Apriori M-Apriori Algorithm The Multipass-Apriori M-Apriori algorithm for mining association rules is direct descendent of the Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence \(ICTAI\22202 1082-3409/02 $17.00 \251 2002 IEEE 


6 frequent items in 3 partitions Apriori Algorithm Apriori is not suitable foIt mining frequent itemsets in text databases because of the high memory space requirement for counting t~e occurrences of large number of potential frequent iitemsets The Multipass approach directly reducEjs the required memory space by partitioning the frequent I-itemsets and processes each partition separ,ately Each partition of items contains a fraction of the set of all items in the database so that the memory space required for counting the occurrences of the s~ts of items within a partition will be much less thap the case of counting the occurrences of the sets of ll the items in the database The M-Apriori algorithm is described as follows 1 Count the occurrences of each item in the database to find the frequent l-itemsets 2 Partition the frequent l-itemsets into p partitions Pl,P2,...,Pp  Figure 1 M-Apriori Partitioning a set of 6 frequent items for 3 Use Apriori algorithm to find all the frequent itemsets whose member items are in each partition in the order of Pp, Pp-I PI by scanning the database. When partition P p is processed, we can find all the frequent itemsets whose member items are in Pp When the next partition Pp-I is processed, we can find all the frequent iteIbsets whose member items are in Pp-I and Pp.This is because, when Pp-I is processed, the ite$ls in Pp-I are extended with the frequent itemsets we found from P p and then counted. This procJdure is continued until PI is processed Assume, without loss of generality, that the frequent l-itemsets or simply items are ordered lexically The frequent items are partitioned into pi partitions P1,P2, ...,Pp such that for every i j very item a E Pi is less than every item b E Pj hus the itemsets under consideration for some partiti\(j\Pi have a particular range of item prefixes Notice,that if the partitions have the same number of items~ the potential number of itemsets that will be formed by extending a lexically lower ordered partition will be larger than the potential number of itemsets from a lexically higher ordered partition Since the frequent items are ordered lexically, it is important to process the partitions in sequence from the highest ordered one to the lowest ordered lone This processing order is required to support the druning of candidate itemsets based on the subset clQsure property of frequent itemsets. Figure 1 shows art example of partitions where items 0 1, 2, 3, 4, and 5 are frequent l-itemsets and are partitioned into PI, P2 and P3 When P3 is being processed, we consider only the candidate itemsets whose members are in 2,3,4,5 not including O and 1 Thus the number of candidates will be smaller compared to the case of considering all the frequent l-itemsets Similarly when P2 is processed, item 0 is not considered and many of the candidate itemsets can be pruned Therefore, it requires less memory space during the processing as one partition is processed at a time Suppose that 2, 3 is the only frequent 2-itemset found as a result of processing the frequent items in partition P3 When the next partition P2 is being processed, item 1 in P2 is extended with each of the items in P3 first As a result we can find some frequent 2-itemsets including item 1. Let's assume that 1, 2 1, 3}, and {1, 5} are found frequent. Then, {1,2 and 1,3 are joined into 1,2,3 and we need to check if 2,3 is also frequent to determine whether {1, 2, 3} is a candidate 3-itemset or not Since {2, 3 was found frequent when P3 was processed, {1,2,3 becomes a candidate 3-~temset. This explains why we need to process the l~t partition of frequent items first in the multipass algorithm On the other hand, {1, 2,5 and 1,3,5 are not candidate 3-itemsets because {2,5 and {3, 5 were not found frequent In practice, if the estimated number of candidate itemsets to be generated is small after processing a  Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence \(ICTAI\22202 1082-3409/02 $17.00 \251 2002 IEEE 


Items B c A D E F G Entr Till Hash Tables Figure 3 Till Hash Tables of frequent itemsets certain number of partitions then we can merge the remaining partitions into a single partition so that the number of database scannings will be reduced 3.2 Inverted Hashing and Pruning IHP Algorithm Inverted Hashing and Pruning IHP is analogous to the Direct Hashing and Pruning DHP in the sense that both use hash tables to prune some of the candidate itemsets. In DHP, during the k-th pass on the database, every \(k + 1\within each transaction is hashed into a hash table, and if the count of the hash value of a \(k 1\is less than the minimum support it is not considered as a candidate in the next pass. In IHP for each item the transaction identifiers \(Tills of the transactions that contain the item are hashed to a hash table associated with the item which is named Till Hash Table \(THT of the item When an item occurs in a transaction, the Till of this transaction is hashed to entry of the THT of the item and the entry stores the number of transactions whose Tills are hashed to that entry Thus the THT of each item can be generated as we count the occurrences of each item during the first pass on the database. After the first pass, we can remove the THTs of the items which are not contained in the set of frequent l-itemsets, Fl and the THTs of the frequent l-itemsets can be used to prune some of the candidate 2-itemsets. In general, after each pass k 1, we can remove the THT of each item that is not a member of any frequent k-itemset, and the remaining THTs can prune some of the candidate \(k 1 Consider a transaction database with seven items A B, C, D, E, F, and G. Figure 2 shows the THTs of these items at the end of the first pass. In our exampie, each THT has five entries for illustration purpose Here we can see that item D occurred in five transactions There were two Tills hashed to 0 one Till hashed to 1, and two Tills hashed to 4 Items B c D E F G O 1 Entries 7 If the minimum support count is 7, we can remove the THTs of the items B, D, E, and F as shown in Figure 3. Only the items A, C, and G are frequent and are used to determine G2, the set of candidate 2-itemsets Based on the Apriori algorithm A,C A,G and C,G are generated as candidate 2-itemsets by paring the frequent l-itemsets However, in IHP, we can eliminate {A,G from consideration by using the THTs of A and G. Item A occurs in 12 transactions, and item G occurs in 19 transactions However, according to their THTs they can co-occur in at most 6 transactions Item G occurs in 5 transactions whose Tills are hashed to 0, and item A occurs in no transactions that have such Tills Thus\none of those 5 transactions that contain G also contains A Item A occurs in 3 transactions whose Tills are hashed to 1 and item G occurs in 6 transactions with those Tills So, in the set of transactions whose Tills are hashed to 1, items A and G can co-occur at most 3 times. The other THT entries corresponding to the Till hash values of 2, 3 and 4 can be examined similarly, and we can determine items A and G can co-occur in at most 6 transactions which is below the minimum support level In general, for a candidate k-itemset, we can estimate its maximum possible support count by adding the minimum count of the k items at each entry of their THTs If the maximum possible support count is less than the required minimum support, it is pruned from the candidate set 3.3 MI HP Algorithm The details of the MI HP algorithm are presented below 1 2 3 4 Till Hash Tables Database  set of transactions Items  set of items transaction  TID x I x E Items Comment Read the transactions and count the occurrences of each item and create a Till Hash Table THT for each item Figure 2 Till Hash Tables at the end of the first pass O 1 ies 2 3 4  Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence \(ICTAI\22202 1082-3409/02 $17.00 \251 2002 IEEE 


the k 1 in Fk-l assuming that the items are lexically ordered in each itemset For example if F2 includes A B and A C then A B C is a potential candidate 3-itemset Then the potential candidate k-itemsets are pruned in line 24 by using the property that all the k 1 of a frequent k-itemset should be frequent k 1  This property is subset closure property of the frequent itemset Thus for A B C to be a candidate 3-itemset B C also should be a frequent 2-itemset To count the occurrences of the candidate itemsets efficiently as the transactions are scanned they can be stored in a hash tree where the hash value of each item occupies a level in the tree  GetMaxPossibleCaunt\(x returns the maximum number of transactions that may contain k-itemset x by using the THTs of the k items in x Let's denote the k items in x by   Then GetM axPossibleCaunt\(x  can be defined as follows  using a hash function h 5 foreach transaction t E Database do begin 6 foreach item x in t do begin 7 x.count  8 x.THT[\(h\(t.TID   9 end 10 end 11 Comment Fl is a set of frequent l-itemsets 12 Fl  x E Items I x.caunt/IDatabasel  mfnsup 13 Partition Fl into p partitions Pl, P2 Pp 14 Comment Process the partitions in the order of Pp,Pp-l,...,Pl 15 for m = p;m  O;m do begin 16 Comment Find Fk, the set of frequent k-itemsets, k 2, whose members are in partitions Pm, Pm+l Pp 17 for k 2; Fk-l  4>; k  do begin 18 Comment Initialize Fk before Pp is processed if m = p then Fk 4 Comment Ck is the set of candida~e k-itemsets whose members are in Pm,Pm+l,...,Pp Comment Fk-l Fk-l is the natuIial join of Fk-l and Fk-l on the first k -2 items Ck Fk-l Fk-l  foreach k-itemset x E Ck do if 3y I y  k 1\of x and y jt Fk-l then remove x from Ck Comment Prune the candidate k-itlemsets using the THTs foreach k-itemset x E Ck do if GetMaxPossibleCaunt\(x  minsup then remove x fro Ck Comment Scan the transactions to! count the occurrences of candidate k-itehtsets i foreach transaction t E Database dQ begin foreach k-itemset x in t do if x E Ck then x.caunt  19 20 21 GetM axPossibleCO'Unt\(itemset x begin k  size\(x MaxPossibleCount  0 for j  O;j  size\(THT   do MaxPossibleCount     x[k].THT[j return MaxPossibleCount  end 22 23 24 25 26 27 28 29 30 31 32 33 34 35 end Fk  Fk U x E Gk I x.count/IDatabasel  minsup 36 end 37 end 38 Answer  Fk The formation of the set of candidate itemsetsi can be done effectively when the items in each itemset are stored in a lexical order, and itemsets are also lexi~ally ordered. As specified in line 22, candidate k-item$ets for k  2 are obtained by performing the na~ural join operation Fk-l Fk-l the first k -2 ite~s of size\(x represents the number of items in the itemset x and size\(T HT represents the number of entries in the THT  For further performance improvement the MI HP algorithm can be used together with the transaction trimming and pruning method proposed as a part of the DHP algorithm The concept of the transaction trimming and pruning is as follows During the k-th pass on the database if an item is not a member of at least k candidate k-itemsets within a transaction it can be removed from the transaction for the next pass transaction trimming because it cannot be a member of a candidate k  l Moreover if a transaction doesn't have at least k 1 candidate kitemsets it can be removed from the database transaction pruning  because it cannot have a candidate k  l Transaction trimming and pruning is synergistic with the candidate pruning by MI HP The reduction of candidate k-itemsets for the k-th pass k  2 will result in additional items to be trimmed during the pass Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence \(ICTAI\22202 1082-3409/02 $17.00 \251 2002 IEEE 


 300000T  0  E   200000i  I 0I e I  100000 0 E I  z 1-ltemsets D 2-itemsets ra 3-itemsets m 4-itemsets 3.00 2.75 250 225 200 1.75 Minimum Support Figure 4 Number of frequent itemsets port levels upon the execution time of the five miners There are three distinct performance groups visible The slowest miner is DHP The distribution of words in text documents and the large document sizes do not play to the strength of DHP because the overhead of direct hashing for each pass on the database offsets the benefit of pruning candidate itemsets A variation of DHP that uses the direct hashing only for the second pass performs about as well as Apriori The middle group is Apriori and M-Apriori Note that M-Apriori is slightly faster than Apriori at the lower minimum support levels due to the improvement from the multipass approach The faster group is composed of IHP and MI HP The difference in performance between the two groups is due to the combination of reducing the number of candidate itemsets and the processing efficiency gained through transaction trimming and pruning Again we see at the lower thresholds the MI HP algorithm is faster than the IHP algorithm It is important to recall that these runs were memory constrained such that the JVM memory for objects was limited to 512 Mbytes Since the main memory size was also 512 Mbytes there was no virtual memory paging affecting the execution times Only MI HP was able to complete at the 1.75% minimum support level The Apriori M-Apriori and IHP miners were run at the 1.75 minimum support level but were terminated after running 100,000 seconds For MI HP the effect of the partition size of frequent items was examined in a series of runs with the minimum support level of 2.5 and partition sizes of 25,50 100, 250, and 500 frequent items IpFigure 6 we see that a partition size of about 100 frequent items is appropriate This implies that multipass is effective only up to the point where the efficiency of working with a smaller number of candidate itemsets for each pass overcomes the overhead of additional scanning of the database 4 Performance Analysis of MI HP Some performance tests have been done with MI HP. The first objective was to assess whether the multipass approach combined with Inverted Hashing and Pruning IHP would improve the performance The second objective was to assess the scalability of the MI HP miner To meet these objectives, we studied the performance of five miners, Apriori DHP, MApriori IHP, and MI HP. All these miners were derived from the same code base All of the test runs were made on a machine with a 400 MHz Pentium processor and 512 Mbytes of memory All miners were written in Java, and the IBM JVM 1.1.8 was used For all of the tests the JVM memory for objects was constrained \(via the mx parameter\to 456 Mbytes The initial heap size was set to 456 Mbytes via the ms parameter\to control the effect of heap growth overhead on the performance The partition size used for the M-Apriori and MI HP was 100 frequent items and the hash table size for MI HP and IHP was 500 entries. The hash table size for DHP was 500,000 entries The minimum support ranged from 3% to 1.75% in the runs comparing the miners For the test of scalability at various document collection sizes, 1.75% minimum support level was used The minimum support values for the comparison test runs was selected such that only 456 Mbytes of memory would be required The rationale for this choice is to study the performance of the algorithms without the additional complication of accounting for the impact of paging upon the performance At the 1.75% minimum support level, only MI HP was able to fit within the 456 Mbytes constraint The memory constraint was lifted to 512 Mbytes, and the Apriori M-Apriori and IHP miners were allowed to run for 100,000 seconds each before they were terminated We did not use a stop-word list but instead used a maximum support threshold of 20% to remove the common words This threshold removed about 500 words from consideration We also did not perform any stemming of the words. We did however monocase the words The comparison runs were made against the April 1990 Wall Street Journal articles There were 3,568 documents in 11.7 Mbytes, and 47,188 unique words were in the collectio The number of frequent itemsets for each of the' minimum support levels can be seen in Figure 4 At the 2% minimum support level there were total 131, 793 frequent itemsets of all sizes At the 1.75% minimum support level, this jumped to 242,569 frequent itemsets In Figure 5, we see that the effect of various supf  ljji Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence \(ICTAI\22202 1082-3409/02 $17.00 \251 2002 IEEE 


Apriori  M-Apriori DHP BIHP MI HP     E F Figure 5 Comparison of execution times Figure 7 Effect of Till hash table size on the candidates IHP MI HP Figure 6 Effect of multipass partition size in M[HP Figure 8 Effect of Till hash table size on the execution time The effect of the Till hash table size was examined in a series of runs with a minimum support leViel of 2.5% and Till hash table sizes of 10, 25, 50, 100, 250 and 500 entries. Figure 7 shows that there is a sharp reduction in the number of candidate 2-itemsets as the number of Till hash table entries increases up to 250 but only a modest decrease after that In Figure 8 we see that the change in the size of Till hash table, and hence the change in the number of candidate itemsets has little effect upon the total execution time until it becomes as large as 500 entries At this point the effect of candidate pruning clearly offsets the overhead of using the Till hash tables The above results suggest that the MI HP algorithm is more effective than Apriori DHP, M-Apriori and IHP algorithms for mining frequent itemsets from text documents. The next tests were conducted to e'i'aluate how well MI HP scaled in terms of the number of documents to be processed and the number of frequent itemsets mined There were four document collections used for the scalability test a two-week collection \(from 3/2/1992 to 3/13/1992 of 1,739 documents; a one-month collection \(April 1990\of 3,568 documents; a two-mC collection \(September and October of 1991\of 7,361 documents; and the largest collection was for three months \(January, February, and March in 1992\containing 10,163 documents The minimum support level was 1.75% for all test runs In Figure 9 we see that the time per frequent itemset mined increases proportionally with the number of documents in the collection. This suggests that MI HP will scale linearly with respect to the number of documents processed. In Figure 10 we see that the time per frequent itemset mined decreases as the minimum support level decreases. The time per candidate itemset processed was constant at about 1 msec. The decrease in time per frequent itemset mined is due to the increase in the number of candidate itemsets that become frequent itemsets as the minimum support level rlecreases 5 Conclusions The main conclusions that can be drawn from this study are centered around the nature of the text databases and the use of the mined association rules The distribution of words in text document collections Minimum Support  Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence \(ICTAI\22202 1082-3409/02 $17.00 \251 2002 IEEE 


Figure 10 Time per frequent itemset mined 3,568 documents and the number of unique words in a document hlake the problem of finding frequent itemsets i.e s~ts of words in text databases very different from the c~e of traditional point-of-sale transaction databases i This difference motivated us to develop a new MI HP iMul tipass with Inverted Hashing and Pruning algoltithm for text databases Our performance analyses show that the mult~pass approach can be effective with text databases i The key performance factor appears to be the reduction in the amount of required memory space The ultipass approach reduces the number of objects in rf1emory during each pass by partitioning the frequetlt 1itemsets and processes each partition separately Moreover Inverted Hashing and Pruning IHP can prune some, of the candidate itemsets generated for  each pass on the database efficiently Since a lot of Till hash tables are pruned before we count the otcurrences of the candidate 2-itemsets most of the emI ory used for holding the Till hash tables in thelfirst pass on the database is available to hold the c~ndidate 2-itemsets for the second and subsequent p~ses In large part this effect is a result of the distribution of word occurrences discussed in Section 2 The large number of words with very low occurrence rates resuits in a situation that the preponderance of the Till hash tables generated in the first pass are pruned prior to the initiation of the second pass References  R Agrawal and R Srikant Fast Algorithms for Mining Association Rules Proc of the 2Oth VLDB Con 1994 pp 487-499  M S Chen J Han and P S Yu Data Mining An Overview from a Database Perspective IEEE 1rans on Knowledge and Data Engineering Vol 8 No.6 Dec 1996 pp 866-883  R Feldman and H Hirsh Finding Associations in Collections of Text Machine Learning and Data Mining Methods and Applications R Michalski I Bratko and M Kubat editors John Wiley and Sons 1998 pp 223-240  R Feldman I Dagen and H Hirsh Mining Text Using Keyword Distributions Journal of Intelligent Information Systems Vol 10 No.3 1998 pp 281300  M Gordon and 8 Dumais Using Latent Semantic Indexing for Literature Based Discovery Journal of the Amer Soc of Info Science Vol 49 No.8 June 1998 pp 674-685  J Holt and S M Chung Multipass Algorithms for Mining Association Rules in Text Databases Knowledge and Information Systems Vol 3, No.2 SpringerVerlag 2001 pp 168-183  J Holt and S M Chung Mining Association Rules Using Inverted Hashing and Pruning Information Processing Letters Vol 83 No.4 Elsevier Science 2002 pp 211-220  J S Park M S Chen and P S Yu Using a HashBased Method with Transaction Trimming for Mining Association Rules IEEE 1rans on Knowledge and Data Engineering Vol 9 No.5 Sep/Oct 1997 pp 813-825  G Salton Automatic Text Processing the transformation analysis and retrieval of information by computer Addison-Wesley Publishing 1988  A Savasere E Omiecinski and S Navathe An Efficient Algorithm for Mining Association Rules in Large Databases Proc of the 21st VLDB Con 1995 pp 432-444 1  E M Voorhees and D K Harmon editors The Fifth Text Retrieval Conference National Institute of standards and Technology 1997  Proceedings of the 14th IEEE International Conference on Tools with Artificial Intelligence \(ICTAI\22202 1082-3409/02 $17.00 \251 2002 IEEE 


 0 5 10 15 20 25 30 35 40 10 15 20 25 30 average number of items in transactions T I=6 D=200K  o f d ata p rocessed 0 50 100 150 200 250 300 350 400 450 500 ti m e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 5 Pruning and CPU time varying T 0 2000 4000 6000 8000 10000 12000 14000 10 15 20 25 30 average number of items in transactions T I=6 D=200K number o f r andom I  Os SG-table SG-tree Figure 6 Random I/Os varying T 0 5 10 15 20 25 30 35 40 6121824 average length of large itemsets I T=30 D=200K  o f d ata p rocessed 0 50 100 150 200 250 300 350 400 450 500 ti m e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 7 Pruning and CPU time varying I 0 2000 4000 6000 8000 10000 12000 14000 6121824 average length of large itemsets I T=30 D=200K numbe r of ra ndom I  O s SG-table SG-tree Figure 8 Random I/Os varying I 0 2 4 6 8 10 12 14 16 T=10,I=6 T=20,I=12 T=30,I=18 T=40,I=24 T=50,I=30 Varying T and I I/T=0.6 D=200K  o f d ata p rocessed 0 20 40 60 80 100 120 140 160 tim e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 9 Pruning and CPU time 336xed I/T 0 200 400 600 800 1000 1200 1400 1600 1800 2000 T=10,I=6 I=12 T=30,I=18 I=24 T=50,I=30 Varying T and I I/T=0.6 D=200K numbe r of ra ndom I  Os SG-table SG-tree Figure 10 Random I/Os 336xed I/T 0 1 2 3 4 5 6 7 100 00 300 400 500 Data set cardinality T=10 I=6  o f d ata p rocessed 0 10 20 30 40 50 60 70 80 90 ti m e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 11 Pruning and CPU time varying D 0 10 20 30 40 50 60 0 1 to 3 4 to 10 11 to 20 20 distance of nearest neighbor T30.I18.D200K  o f d at a p rocessed 0 100 200 300 400 500 600 700 800 time m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 12 Pruning and CPU time var 000 000 003 005 007 t  83  Proceedings of the 19th International Conference on Data Engineering \(ICDE\22203 1063-6382/03 $ 17.00 \251 2003 IEEE 


shows a pattern similar to the CPU cost as in the previous experiments During the experiments we observed that queries having a close nearest neighbor were processed fast using both structures whereas for cases with distant neighbors the SG\226tree was signi\036cantly faster than the SG\226table We validated this observation by running 1000 queries on the T30.I18.D200K dataset and averaging the query costs for various distance ranges of the nearest neighbor Figure 12 shows the average pruning an d CPU cost for 036ve distance ranges When the distance is small search is fast for both methods actually for distances in the range 1\2263 the SG\226 table outperforms the SG\226tree However the distant cases are handled much faster by the SG\226tree showing that this access method is more robust to 221outlier\222 queries As a general conclusion from this set of experiments the SG\226tree is a more ef\036cient and robust access method than the SG\226table in addition to its other inherent advantages dynamic data handling independence to hard-wired constants In the next subsection we compare the indexes for other query types on both synthetic and real data 5.4 Real data nd other queries Figures 13 and 14 show the performance of the indexes for 000 NN queries on the T30.I18.D200K synthetic dataset and the CENSUS dataset respectively for various values of 000  The results for each experimental instance were averaged over 100 queries In both 036gures for small to medium values of 000 the SG\226tree is signi\036cantly faster than the SG\226 table When 000 is large  001 003 005 005 005  the fraction of the data that need to be visited becomes too large for the indexes to be useful This is due to the fact that the search space becomes less appropriate for search For example when 000 t 003 005 005 005 005 we observed that the average distance of the 000 th neighbor is very large 31.81 for T30.I18.D200K and 18.06 for CENSUS and very close to the average distance of all transactions from f  This is due to the 221dimensionality curse\222 effect 3 o ften o b s erv e d i n h ig h d i men s io n a l search problems Observe that the SG\226tree is less sensitive to this effect since its performance degenerates at a smaller pace especially for the real dataset We also compared the indexes for similarity range queries Figures 15 and 16 The same datasets and queries as before are used and the distance threshold from the query varies from 2 to 10 For r t 020  the SG\226table outperforms the SG\226tree on the synthetic dataset In all other cases the tree is much faster Observe that on the real dataset in particular for both 000 NN queries and range queries the performance difference quite large in favor of the tree This indicates that the structure can perform very well in real life cases  0 10 20 30 40 50 60 70 80 90 100 1 10 100 1000 10000 k-nn search varying k T30.I18.D200K  o f d ata p rocessed 0 200 400 600 800 1000 1200 1400 time\(msec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 13 021 NN queries T30.I18.D200K 0 10 20 30 40 50 60 70 80 90 100 1 10 100 1000 10000 k-nn search varying k CENSUS  o f d ata p rocessed 0 100 200 300 400 500 600 tim e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 14 022 NN queries CENSUS 5.5 Dynamic data changes In this experiment we compare the structures simulating a case where the nature of the data changes dynamically We generated a synthetic dataset T10.I6.D100K and built an SG\226table and SG\226tree for it We then gradually updated the structures by inserting batches of 100K transactions each with the same characteristics i.e T=10 I=6 but putting different seeds to the random generator i.e the large itemsets used were different for each batch We ran nearest neighbor queries on the two structures after each insertion phase The queries for phase 023 after batch 023 has been inserted 024 026 023 026 032  are generated as follows For each query i a random number 033 from 1 to 023 is chosen and ii the generator parameters i.e large itemsets for batch 033 are used to produce the query For example a query for the phase where the dataset contains 300K data is generated using randomly one of the generators of batches 1 2 or 3 Figure 17 shows the average pruning ef\036ciency and CPU time of the two structures Initially both have similar performance but as more data with different characteristics are inserted into the structures the performance of the SG\226table degenerates since it is optimized for the 036rst 100K data  84  Proceedings of the 19th International Conference on Data Engineering \(ICDE\22203 1063-6382/03 $ 17.00 \251 2003 IEEE 


 0 5 10 15 20 25 30 35 40 246810 similarity range queries varying epsilon T30.I18.D200K  o f d at a p r o cessed 0 50 100 150 200 250 300 350 400 tim e m s e c  SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 15 Range queries T30.I18.D200K 0 10 20 30 40 50 60 70 80 246810 similarity range queries varying epsilon CENSUS  o f d ata p r o cessed 0 50 100 150 200 250 300 350 400 ti me\(msec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 16 Range queries CENSUS On the other hand the SG\226tree is robust to updates and exhibits very good query performance since each batch contains skewed data generated from a different collection of large itemsets 6 Conclusions and Future Work We presented a hierarchical indexing method for similarity search in sets and categorical data The SG\226tree is a disk-based height-balanced tr ee that organizes 036xed-length bitmaps and is appropriate for various query types We have shown how several branch-and-bound methods which apply on R\226tree-like structures can be adapted for ef\036cient similarity search on the SG\226tree Extensive experimental evaluation has shown that the SG\226tree is in most cases much faster than the SG\226table a previous hash-based index The advantages of the SG\226tree can be summarized as follows 000 It is ef\036cient and robust to various data types both categorical and set data and characteristics cardinality density dimensionality It is a versatile structure that can be used for several query types 000 The tree is dynamically adapted to updates and re0 2 4 6 8 10 12 100 200 300 400 500 Dataset cardinality T=10 I=6  o f d ata p rocessed 0 20 40 60 80 100 120 140 160 180 200 tim e m sec SG-table\(%data SG-tree\(%data SG-table\(time SG-tree\(time Figure 17 NN search after dynamic updates quires no preprocessing of the data Thus it can be useful for analyzing data which change dynamically over time 001 It relies on no hardwired constants and requires no tuning using a-priori de\036ned parameters 001 It is a disk-based paginated data structure so it can operate with limited memory resources and dynamically changing memory resources Caching policies previously used for the B 002 226tree and the R\226tree can be seamlessly applied on this structure There are several directions for extending the current work In our study we used hamming distance as the similarity metric However the SG\226tree can also be de\036ned tuned and searched for other set theoretic similarity metrics For example if the Jaccar d coef\036cient is used the lower distance bound in fact the upper similarity bound for nearest neighbor search can be de\036ned by 003 005 007 b n f 016 007 020 021 023 024 026 030 003 005 007 b n f 026  We plan to test the effectiveness of the structure using alternative metrics Another direction or future work is to study methods for bulk-loading SG\226trees instead of inserting the data oneby-one We can adapt categor ical clustering algorithms 12 for t hi s purpos e Anot her a pproach i s t o s o rt t h e transactions using gray codes as key in analogy to using space-\036lling curves for bulk-loading multidimensional data to an R\226tree 17  A lternati v ely  hashing t echniques can be used to group similar signatures together The resulting 221globally-optimized\222 tree could have much better quality characteristics while being built faster In a reverse direction we can investigate whether the SG\226tree can be used for clustering large dynamic collections of set and categorical data The cost of existing methods is at least 035 n   026 and the tree could be used to derive good clusters much faster e.g by merging the leaf nodes using their signatures as guides Finally we plan to empirically test the ef\036ciency of the tree to the query types discussed in Section 4.2 In  85  Proceedings of the 19th International Conference on Data Engineering \(ICDE\22203 1063-6382/03 $ 17.00 \251 2003 IEEE 


addition for some data types search can be further optimized For example if the indexed categorical data have 223xed-dimensionality 000 we know that the area of each indexed signature is 223xed to 000  We can use this property to derive stricter lower bounds for the directory node entries 001  instead of the rather relaxed 002 004 006 006 t 013 r 001 020 022 004 025 027 For this example a better bound is 002 004 006 006 t 013 r 001 020 022 004 025 027 033 t 000 037    t 001 020 022 004 025 r 013 027 027  We plan to study such search optimizations using domain properties or statistics from the indexed data References  C  C  A ggarw al  J  L  W ol f and P  S  Y u A N e w Method for Similarity Indexing of Market Basket Data SIGMOD Conference  pages 407\205418 1999  R  A gra w al and R  S ri kant  F as t A l gori t h ms for M i n ing Association Rules in Large Databases VLDB Conference  pages 487\205499 1994  K  S  B e y er  J  G ol ds t e i n  R  R amakri s hnan and U Shaft When Is 215Nearest Neighbor\216 Meaningful International Conference on Database Theory  pages 217\205235 1999  T  B ri nkhof f H.-P  K ri e g el  a nd B  S e e g er  E f 223 ci ent Processing of Spatial Joins Using R-Trees SIGMOD Conference  pages 237\205246 1993  A  C orral  Y  Manol opoul os  Y  T heodori d i s  a nd M Vassilakopoulos Closest Pair Queries in Spatial Databases SIGMOD Conference  pages 189\205200 2000  A  P  d e V ries N  M amoulis N  N es a nd M K e r sten Ef\223cient k-NN Search on Vertically Decomposed Data SIGMOD Conference  pages 322\205333 2002  U  D eppisch S-T r ee A D ynamic B alanced Signature Index for Of\223ce Retrieval ACM SIGIR Conference  pages 77\20587 1986  V  G aede a nd O G 250 unther Multidimensional Access Methods ACM Computing Surveys  30\(2\170\205231 1998  V  G ant i  J  Gehrk e  a nd R  R a makri s hnan C A C T US 205 clustering categorical data using summaries ACM SIGKDD Conference on Knowledge Discovery and Data mining  pages 73\20583 1999  D Gi bs on J  M Kl ei nber g  a nd P  R a gha v a n C l us tering Categorical Data An Approach Based on Dynamical Systems VLDB Conference  pages 311\205322 1998  A Gi oni s  D Gunopul os  a nd N K oudas  Ef 223 c i e nt and Tunable Similar Set Retrieval SIGMOD Conference  2001  S  Guha R  R as t ogi  a nd K S h i m  R OC K A R obust Clustering Algorithm for Categorical Attributes International Conference on Data Engineering  pages 512\205521 1999  A Gut t m an R T rees  A Dynami c I nde x S t r uct u re for Spatial Searching SIGMOD Conference  pages 47\205 57 1984  S  Hel m er and G  M oerk ot t e  A S t udy of F our Inde x Structures for Set-Valued Attributes of Low Cardinality Technical Report University of Mannheim  number 2/99 1999  G R Hjaltason a nd H Samet Distance Bro w sing in Spatial Databases TODS  24\(2\265\205318 1999  A K J a i n and R  C  D ubes  Algorithms for Clustering Data  Prentice-Hall 1988  I Kamel a nd C  F a louts o s  Hilbert R tree An Improved R-tree using Fractals VLDB Conference  pages 500\205509 1994  F  K o rn N  S i d i r opoul os  C  F al out s o s  E S i e g el  a nd Z Protopapas Fast Nearest Neighbor Search in Medical Image Databases VLDB Conference  pages 215\205 226 1996  N K oudas a nd K C  S e vci k  H i g h D i m ens i onal S i m i larity Joins Algorithms and Performance Evaluation International Conference on Data Engineering  pages 466\205475 1998  N R ous s opoul os  S  K el l e y  and F  V i n cent  Neares t Neighbor Queries SIGMOD Conference  pages 71\205 79 1995  Y  S a kurai  M  Y os hi ka w a  S  U emura and H  K oj i m a The A-tree An Index Structure for High-Dimensional Spaces Using Relative Approximation VLDB Conference  pages 516\205526 2000  The U C I KDD Archi v e ht t p    kdd.i c s  uci  edu 23 R W e b e r  H.-J S ch ek  a n d S Blo tt A Q u a n titative Analysis and e Study for SimilaritySearch Methods in High-Dimensional Spaces VLDB Conference  pages 194\205205 1998  86  Proceedings of the 19th International Conference on Data Engineering \(ICDE\22203 1063-6382/03 $ 17.00 \251 2003 IEEE 


13  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Example of supportbased pruning 4 Bread 1 Eggs 4 Diaper 3 Beer 4 Milk 2 Coke Count 1Item 3 Beer,Diaper 3 Milk, Diaper 2 Milk,Beer 3 Bread, Diaper 2 Bread,Beer 3 Bread,Milk Count 2Item 2 Milk, Diaper Beer 3 Bread,Milk Diaper Count 3Item Support-based pruning 225 Min support =3 Ignore subsets of items of size N 225 only if N-1 support > min-support Without pruning 6 C 1  6 C 2  6 C 3 41 With pruning: 6 + 6 + 2 = 14 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Classifiers versus Association rules \(again  Classifiers  Assume entire example set can fit into RAM  Association rule learners  can handle very big data sets  Agraw  t he APRIORI alg o r i t h m   very large data sets  10,000,000 examples  843MB Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


14  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 The Data Mining Desiderata Bradley  Require one scan \(or less\ of the database if possible  On-line \223anytime\224 behavior  223best\224 is always available, with status information on progress, expected remaining time, etc. provided  Suspendable, stoppable, resumable  incremental  progress saved to resume a stopped job  Ability to incrementally incorporate additional data with existing models efficiently  Work within confines of a given limited RAM buffer  Ooops, good-bye traditional classifiers e.g. C4.5  Argued against by some  223Memory is cheap\224: [W A R2 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Conf1  outlo o k overc a s t   1 0   82  40    84  40   4 0 0  Treatment learning sunny, 85 86 false none \(2 1 2 sunny, 80 90 true none sunny, 72 95 false none rain 65 70 true,          none rain, 71 96 true none rain 70  false some \(2 2 4 rain, 68 80 false,  some rain, 75 80 false some sunny,      69 70 false lots    \(2 3 8 sunny,      75 70 true lots overcast,     83  false lots overcast,     64  true lots overcast,     72  true lots overcast,     81 75 false lots outlook temp humidity wind hours on course A good attribute range 225 More frequent in good that bad 225 Weighted by 223distance\224good to bad 225 Normalized by total count 225 Summed for all good/bad class pairs Lots  none Lots  some Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


15  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 sunny, 85 86 false none \(2 1 2 sunny, 80 90 true none sunny, 72 95 false none rain 65 70 true,           none rain, 71 96 true none rain 70  false some \(2 2 4 rain, 68 80 false,  some rain, 75 80 false some sunny,      69 70 false lots    \(2 3 8 sunny,      75 70 true lots overcast,     83  false lots overcast,     64  true lots overcast,     72  true lots overcast,     81 75 false lots 0 1 2 3 attribute ranges with deltaf 4-2024681 conf1 225 treatments 002 attribute.range.conf1 > X 225 treatments|=N 225TAR2 = O\(2 N  225 fails for large N outlook temp humidity wind hours on course Conf1  outlo o k overc a s t   1 0   82  40    84  40   4 0 0  Lots  none Lots  some 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Treatments for golf 0 1 2 3 4 none some lots I f outl ook o verc as t Th en l o t s o f go l f  4 4  0 Least monitor watch the humidityalert if rising over 90 Least change pick a vacation location with overcast weather I f h u m i d i t y  90  97 Th en l o t s o f go l f  1 4  0 1 2 3 none some lots 0 1 2 3 4 5 6 none some lots If n o ch an ge Th en l o t s o f go l f  6 6 3 5  3  Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


16  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 6.7 <= RM < 9.8 And 12.6 <= Ptratio 15.9 BEST ACTION 0.6 <= NOX < 1.9 and 17.16 <= LSTAT < 39 WORST ACTION BASELINE 500 examples  of bad--, bad, ok, good Stop staring at the scenery and tell me where to steer or what to dodge 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Require overall require2 require3 require5 require4     action1 action1, action2, action3,  \205   Cost,    Benefit 1 Y              Y             N,        \205   23200,  250 2           N              N             Y ,       \205   11400,  150 205..       \205             \205            \205        \205   \205         \205 action2 fault2 fault3 fault1 JPL requirements Feather&Menzie Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


17  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case study 99 proposed actions for deep space satellite design; 2 99 10 30 options Each row is one project plan action1, action2, action3,  \205   Cost,    Benefit 1 Y              Y             N,        \205   23200,  250 2           N              N             Y ,       \205   11400,  150 205..       \205             \205            \205        \205   \205         \205 Learnt 225 Do 16 225 Don\222t do 14 225 Ignore 66 options 225 c.f. genetic algorithms Each dot  is one randomly generated project plan 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Pr of tampering 0.02 Pr of fire 0.01 Pr of smoke  given [fi  0.90 Pr of smoke  given [fi  0.01 Pr of report given [exodus=ye 0.75 Pr of report given [exodus=no 0.01 Pr of exodus given [alarm=yes 0.88 Pr of exodus given [alarm=no 0.001 etc tampering fire alarm smoke exodus run away report hello, operator I want to report a fire 0.02 0.01 Use Bayesian analysis to update probabilities given new information Use Bayesian analysis to update probabilities given new information Bayesian Tuning Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


18  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 tampering fire alarm smoke NO exodus report YES 0.50 was 0.02 0.03 was 0.01 Q1: What if there is a report, but no smoke Q1: What if there is a report, but no smoke Q2: What if there is a report, and smoke Q2: What if there is a report, and smoke tampering fire alarm smoke YES exodus 0.03 was 0.02 0.97 was 0.01 report YES Example from : [Poole98   p37 1 Source = http:// www.swi.psy.uva.nl/projects/SWI-Prolog/download.html http://www.cs.ubc.ca/spider/poole/ci/code.tar.gz Files    = code/acp/bnet.pl code/acp/bnet_t1.pl Bayesian Tuning 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Non-na\357ve model bayesian network Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


19  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Low testing effort EXPLAINS 1\ some observed operational defects  and 2\ low pre-release defects 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02  Ancestors  ancestor\(X,Y\:-parent\(X,Y  ancestor\(X,Y\:-parent\(X,Z\ancestor\(Z,Y  Lists  member\(X,[X|Z   member\(X,[Y|Z me mb er X Z   append X X   append\([X|X Y s X Z s  a ppe nd X s Ys Z s  Example Example action action hypothesis hypothesis p\(b,[b add clause p\(X,Y   specialize p\(X,[V p\(x,[a specialize p\(X,[X p\(b,[a add clause p\(X,[X p\(X,[V p\(X W Inductive Logic Programming Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


20  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 East-West trains 1. TRAINS GOING EAST 2. TRAINS GOING WEST 1 2 3 4 5 1 2 3 4 5 1. TRAINS GOING EAST 2. TRAINS GOING WEST 1 2 3 4 5 1 2 3 4 5 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 ILP representation  Example eastbound\(t1  Background theory car\(t1,c1\      car\(t1,c2\       car\(t1,c3\.      car\(t1,c4 rectangle\(c1\  rectangle\(c2\     rectangle\(c3\.   rectangle\(c4 short\(c1\      long\(c2\.          short\(c3\       long\(c4 none\(c1\.        none\(c2\.          peaked\(c3\.      none\(c4 two_wheels\(c1\  three_wheels\(c2\two_wheels\(c3\two_wheels\(c4 load\(c1,l1\.     load\(c2,l2\       load\(c3,l3\    load\(c4,l4 circle\(l1\      hexagon\(l2\       triangle\(l3\    rectangle\(l4 one_load\(l1\  one_load\(l2\.      one_load\(l3\    three_loads\(l4  Output ne\(C Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


21  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Predicting Correctness Almei NewID CN2 C4.5 C4.5_rule FOIL Accuracy 52 54 66 68 73 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 FOIL\222s best rule high\(A executable\(A,B maximum_statement_nesting_depth\(A,C lines_of_comments\(A,B commentsdivsize\(A,E n1\(A,F n2\(A,G less_or_equal\(E,F not less_or_equal\(B,G C <> 4 C <> 43 less_or_equal\(C,D High faults when comment density <= #operators and executable statements > #operators and max nesting <= number of lines of comments and max nesting is not 4 or 43 High faults when comment density <= #operators and executable statements > #operators and max nesting <= number of lines of comments and max nesting is not 4 or 43 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


22  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Inside  some learners  neural nets  genetic algorithms  decision tree learners  association rule learners  treatment learners  bayesian tuning  inductive logic programming 225 sub-symbolic locally guided descent symbolic, global search 225 recursive diversity reduction 225 this goes with that CLASS 225 this goes with that 225 asses 225 a little model goes a long way 225 Horn clauses  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case studies predicting effort \(45 predicting faults \(51 model-based ML \(54 early lifecycle project planning \(60 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


23  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case study How can we estimate earlier in the life cycle  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Predicting development times in months\Srinivasan95 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


24  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Bayes for effort Chulani99  The COCOMO-II project  Open-source software cost estimation  Reuse vs effort XH : multiple product lines VH : across product lines H : across program N : across project L  : none  Regression over data from 83 software projects  Regression conflicted with \223Delphi values\224  Tune regression values using Delphi expectations 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 Low N H VH XH Delphi Regression Adjusted Da ta   reus e low e rs effo r t Ex pe ct e d  reus e incre a se  effo r t    251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 COCOMO-II \(1998\COCOMO-II \(1997 Pred\(30 Pred\(25 Pred\(20 Pred\(X 52 49 46 83 projects 63 59 54 161 projects 7561 68 55 63 48 161 projectsbased on Bayesian 161 projectsbased on Delphi Percentage of estimated effort within X of actual Conclusion data + delphi tuning\a Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


25  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Neural Network Count the wi dge ts in the I n te r f ace to es ti m a te e f f o r t  Labels Edit Boxes Grid Boxes Check Boxes Buttons 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Neural Network Subsystem Pred\(25 MARE Buyer Admin 80 17.6 Buyer Client 80 14.6 Distribution Server 20 96.7 Supplier Client 90 12.2  12 Different Widgets Counted and associated with effort Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


26  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case study: Predicting software 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Predicting software  faults Khoshgoftaar99 Whi c h d o g s di d not ba r k  225 42 attri b ute s  in dat a s e t 225 Only 6 in the l e arnt th e o ry Diffe re nt attri b ute s than b e fore 225 223c au se s f a u l t 224  do m a in s pec i f i c 225 Me thod for fin d ing fa ult s  gen e r a l Whi c h d o g s di d not ba r k  225 42 attri b ute s  in dat a s e t 225 Only 6 in the l e arnt th e o ry Diffe re nt attri b ute s than b e fore 225 223c au se s f a u l t 224  do m a in s pec i f i c 225 Me thod for fin d ing fa ult s  gen e r a l Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


27  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Issue of generality  Specific conclusions may not apply to general projects  Proposal one  Intra-project learning  Lessons should generalize across the same developer methodology, application and tool set  Proposal two  Inter-project learning  Need larger training set  COCOMOII uses 161 projects  Note: two = N * one Khoshgoft good bad Tia bad good  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Model-based ML Bratko89,Pearc Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


28  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Model-based ML simple e.g sum\(X,  Y Z sum   sum   sum\(0 0 0 sum 0  sum 0  sum\(0   sum\(0   sum  Any sum  Any if X >0 X\222=      if X < 0 0 if X= 0  switch\(State,Volts,Amps switch\(on,       0,     Any switch\(off,      Any,   0 blub\(Mode,Light,Volts,Amps bulb\(blown,dark, Any 0 bulb\(ok,     light   bulb\(ok,    light   bulb\(ok,    dark 0 0 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 A qualitative circuit go  :tell\('circ.data'\ go1, told go1 :functor\(X,circuit,9\ forall\(X, example\(X example\(circuit\(Sw1,Sw2,Sw3,B1,B2,B3,L1,L2,L3\classification\(B1,B2,B3,Class format\('~a,~a,~a,~a,~a,~a,~a~n Sw1,Sw2,Sw3,L1,L2,L3,Class  classification\(B1, B2, B3,Class needs 2 our of three bulbs working classification\( ok, ok, B3,   good classification\( ok, B2, ok,   good classification\( B1, ok, ok,   good classification\( B1, B2, B3,   bad Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


29  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Results from > 700 examples circ.names good,bad switch1: on, off switch2: on, off switch3: on, off bulb1: light, dark bulb2: light, dark bulb3: light, dark Command line c4.5 -f circ -m 2 W a t c hing bulb1 tells us th e rest Insight f ul  Or dull W a t c hing bulb1 tells us th e rest Insight f ul  Or dull 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 More Model-based ML Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


30  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 ca n we r e v i s i t thos e warranti e s   Run 1 35,000 tions  Learn 1  Run 2 if Sw2c=off then 3264 tions  Learn 2  Run 2 if Sw2c=off n then 648 tions  Learn 3 Ca n\222t clos e  Sw3c warranty issu es No b u d g e t  for e x p e ns i v e ha rd wa r e 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 3 \223tunings\224 5 SLOC guesstimates 150,000 runs Treatments for software projects Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


31  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 flex=1 pmat=3 sced=2 rest anything from kc1 150,000 runs 150,000 runs Treatments for software projects \(ii 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 pmat=2 acap=2 sced=2 rest anything from kc1 30,000 runs 30,000 runs Treatments for software projects \(iii Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


32  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 ons discussion \(64 downloads \(69 further reading \(71 references \(72 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Will you try ML  Have we motivated you  Will you rush home and do ML on your data  Clearly  ML algorithms work  Caution  you may find it harder than you think Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


33  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Many ways to learn numerous case studies but there is still a problem Theme Learning is a solved problem \(sort of Data collecting and modeling is not 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Be warned match your ML goals to your software process level Project metrics coarse-grain conclusions Product metrics product learning Process metrics process learning Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


34  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Also, match your tool to task Task ML Tool Assembly line robot deciding what to reject Decision tree learner Repair robot trying to do the least to fix the rejected parts Treatment learner Predicting the life of a robot Neural Network Optimizing the assembly line Genetic Algorithm If clustering when no classes iation rule learning If simple background knowledge Bayesian If complex relational background knowledge ILP 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Have we learnt enough  Not yet  But wait Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


35  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Cost = $0  WEKA  E.g. http://www.cs.waikato.ac.nz/~ml/weka/: ML in JAVA 003 decision tree inducers,rule learners, naive Bayes, decision tables locally weighted regression  GDB_Net  http://nas.cl.uh.edu/boetticher/gdb_net.zip  TAR2  http://www.ece.ubc.ca/twiki/bin/view/Softeng/TreatmentLearner  APRIORI  http://fuzzy.cs.uni-magd eburg.de/~borgelt/apriori/apriori.html#download  And many others  E.g. ML  A public domain \223C\224 library of common algorithms  Naive Bayes, ID3, MC4 , Decision Tables ,   Holte's OneR CN2,\205  http://www.sgi.com/tech/mlc/utils.html 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Cost > $0  C4.5  Comes with the book Quinlan  C5.0  http://www.rulequest.com/download.html  Microsoft SQL SERVER 2000\231  Comes with numerous machine learning tools  Proprietary algorithms  Etc  223data mining\224 \223commercial software\224 in Google  3,340 links  223data mining consultancy\224 in Google  850 links Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


36  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Further reading  Mendonca  great rev i e w art i cl e on ML  Large list of available tools  All the things you can do with a decision tree [Menzies0  Treatment learning: [Menzies01a  Michalski\222s excellent survey of ML types [Michalski  Neural nets: [Boetticher01  Special issue SEKE journal, knowledge discovery Morasca99  Inductive logic programming [Bergadano95,Cohen95  Come by IJCAI 2011 and I\222ll tell you all about it\222s applications  Genetic algorithms: [Goldberg8  Bayesian learning [Cheeseman88 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 References  Agrawal  Agrawal, R., and T.Imeilinski and A.Swami \223Mining Association Rules between Sets of Items in Large Databases,\224 Proceedings of the 1993 ACM SIGMOD Conference Washington DC, USA  Bergadan  Bergadano, F., and D.Gunetti Inductive Logic Programming: From Machine Learning to Software Engineering The MIT Press, 1995  B  Berry, M. J. A., and G., Linoff Data Mining For Marketing, Sales, and Customer Support John Wiley Sons, Inc., New York, 1997  Boetticher01  Boetticher, G., "An Assessment of Metric Contribution in the Construction of a Neural Network-Based Effort Estimator Second International Workshop on Soft Computing Applied to Software Engineering  Enschade, NL, 2001 Available from http://nas.cl.uh.edu/boetticher/publications.html  Boetticher01  Boetticher, G., "Using Machine Learning to Predict Project Effort: Empirical Case Studies in Data-Starved Domains First International Workshop on Model-based Requirements Engineering San Diego, 2001 Available from http://nas.cl.uh.edu/boetticher/publications.html  Bradley  Bradley, P., U. Fayyad, and C. Reina. \223Scaling clustering algorithms to large databases\224. In KDD'98  B  Bratko, I., I. Mozetic, and N. Lavrac KARDIO: a Study in Deep and Qualitative Knowledge for Expert Systems MIT Press, 1989  Breim  Breiman, L., J. Friedman, R. Olshen, C. Stone, \223Classification and Regression Trees,\224 Wadsworth International Group, 1984 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


37  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 References  Burgess  Burgess, C.J., and Martin Lefley. \223Can genetic programming improve software effort estimation? A comparative evaluation,\224 Information and Software Technology er 2001  Cheesem  P. Cheeseman, D. Freeman, J. Kelly, M. Self, J. Stutz, and W. Taylor. \223Autoclass: a bayesian classification system,\224 In Proceedings of the Fifth International Conference on Machine Learning  Morgan Kaufman, 1988  Chulani  S.Chulani,  B. Boehm, and B. Steece 223Bayesian analysis of empirical software engineering cost models,\224 IEEE Transaction on Software Engineering 25\(4\ly/August  1999  Cohe  W. W. Cohen, \223Inductive specification recovery: Understanding software by learning  from example behaviors,\224 Automated Software Engineering 2:107-129, 1995  DeJon  DeJong, K.A., and Spears, W.M. "An Analysis of the Interacting Roles of Population Size and Crossover in Genetic Algorithms Proc. First Workshop Parallel Problem Solving from Nature  Springer-Verlag, Berlin, 1990  Dietteric  Dietterich, T. G., \223Machine Learning  Research: Four Current Directions,\224 AI Magazine 18 \(4\97 Pp. 97-136. Available from ftp://ftp.cs.orst.edu/pub/tgd/papers/aimag-survey.ps.gz  s  Feather, M.S., and T. Menzies: \223Converging on the Optimal Attainment of Requirements IEEE Joint Conference On Requirements Engineering  ICRE'02 and  RE'02 9-13th September, University of Essen, Germany, 2002. Available from http://tim.menzies.com/pdf/02re02.pdf 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 References  Fenton00  Fenton, N., and  M. Neil \223Software Metrics: A Roadmap,\224 International Conference on Software Engineering, 2000. Available from http://www.dcs.qmul.ac.uk/~norman/papers/metrics_roadmap.pdf  Goldberg  Goldberg, D.E Genetic Algorithms in Search, Optimization, and Machine Learning Addison-Wesley Reading, Massachusetts, 1989  Khoshgoftaar  Khoshgoftaar, T.M., and E.B. Allen. \223Model software quality with classification trees,\224 in H. Pham, editor 223Recent Advances in Reliability and Quality  Engineering\224, World Scientific, 1999  Mendonc  Mendonca, M., and N.L. Sunderhaft, \223Mining Software Engineering Data: A Survey,\224 A DACS State-ofthe-Art Report September 1999. Available from http://www.dacs.dtic.mil/techs/datamining  Menzie  Menzies, T., \223Practical Machine Learning for Software Engineering and Knowledge Engineering,\224 ftware Engineering and Knowledge Engineering volume 1, 2001\vailable from http://tim.menzies.com/pdf/00ml.pdf  Menzies01a  Menzies, T., and Y. Hu, \223Reusing models for requirements engineering,\224 First International Workshop on Model-based Requirements Engineering 2001. Available from http://tim.menzies.com/pdf/01reusere.pdf  Menzies01b  Menzies, T., and Y. Hu, \223Constraining discussions in requirements engineering,\224 First International Workshop on Model-based Requirements Engineering San Diego, 2001. Available from http://tim.menzies.com/pdf/01lesstalk.pdf  Menzie  Menzies. T., and J. Kiper, \223Better reasoning about software engineering activities,\224 Automated Software Engineering 2001. Available from http://tim.menzies.com/pdf/01ml4re.pdf Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


38  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02  Michalski90   Michalski, R.S., \223Toward a unified theory of learning,\224  In B.G. Buchanan and D.C. Wilkins, editors 223Reading in Knowledge  Acquisition and Learning\224, pages 7--38. Morgan Kaufmann, 1993  Mitchell  Mitchell, T Machine Learning McGraw-Hill, 1997  Morasca99  Morasca, S., and Gunther Ruhe, Guest editors' introduction of the Special issue on \223Knowledge Discovery from Software Engineering Data,\224 International Journal of Software Engineering and Knowledge Engineering October, 1999  Pearce  Pearce, D., \223The induction of fault diagnosis systems from qualitative models,\224 in Proc. AAAI-88 1988  Poole9  Poole, D. L.,  A. K. Mackworth, and R. G. Goebel Computational Intelligence: A Logical Approach  Oxford University Press, New York, 1998  Porter9  Porter, A.A., and R.W. Selby  \223Empirically guided software development using metric-based classification trees,\224 IEEE Software Pp. 46-54, March 1990  Quinla  Quinlan, R C4.5: Programs for Machine Learning Morgan Kaufman, 1992  Srinivasa  Srinivasan, K., and D. Fisher,  \223Machine learning approaches to estimating software development effort,\224 IEEE Transactions on Software Engi neering Pp. 126-137, February 1995  Tian9  Tian, J., and M.V. Zelkowitz 223Complexity measure evaluation and selection,\224 IEEE Transactions on Software Engineering 21\(8\p. 641-649,  August 1995  Webb0  Webb, G., \223Efficient search for association rules,\224 Proceeding of KDD-2000 Boston, MA,  2000  Zhang0  Zhang, Du, \223Applying Machine Learning Algorithms in Software Development,\224 Modelling Software System Structures in a fastly moving scenario Santa Margherita Ligure, Italy, 2000 References Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


