WP1 5:15 1904 IEEE lnlemalional Symposium on InIellbW Control 16-18Augurt 1894 Cdumbur Ohio USA Fuzzy Systems for Function Approximation with Applications to Failure Estimation Eric G Laukonen and Kevin M Passino t Department of Electrical Engineering The Ohio State University 2015 Neil Avenue Columbus Ohio 43210 Abstract A fuzzy system can be constructed to interpolate be tween input-output data to provide an approzimation for the function that is implicitly defined by the input-output data pair associations In this paper we begin by explain ing how function approzimation techniques can be 
used to solve nonlinear estimation and system identification prob lems Nezt we discuss several fundamental issues related to how to choose the input-output data pairs so that ac curate function approximation can be achieved with fuzzy systems Our main result is a new technique for function approzimation via fuzzy systems where we specify mem bership functions and add rules to try to achieve a pm specified function approzimation accuracy We illustrate the new technique on an actuator failure detection and identification problem for the F-16 aircraft cia1 cases of this problem Next we examine some theoretical issues associated with how to choose the input-output 
data so that good function approxima tion can be achieved The main result of the paper provides a new technique for function approximation with fuzzy systems In this technique we use ideas from the approaches in l 2 31 and utilize a unique and novel way to position membership functions and add rules to a fuzzy system to try to achieve a pre specified function approximation accuracy. While the approaches in l 2 31 and related ones in 4 5 6 71 have been used successfully for a variety of highly nonlinear identification and estimation problems the problems studied to date have been 
of relatively low complexity In this paper we evaluate our new func tion approximation approach by showing how it can be used to construct complex nonlinear estimators for aileron and differential elevator failures on an F-16 aircraft I Introduction 11 Background Fuzzy systems have been successfully applied in several areas within engineering including control signal processing and pattern recognition Some re cent work has focused on the idea of constructing fuzzy systems from a finite set of input-output train ing data in order to perform function approximation This new focus is particularly important due to the fact that many problems in estimation and identifi cation can be formulated 
as function approximation problems For instance in conventional system iden tification input-output data is gathered from a phys ical system and a least squares approach can be used to provide the best approximation for the linear func tion that maps the system inputs to its outputs Sim ilarly in parameter estimation if one is given data that associates measurable system variables with an internal system parameter a functional mapping may be constructed that approximates the process of es timation of the internal system parameter In this paper we begin by precisely defining the function ap proximation problem and showing how nonlinear sys tem identification and nonlinear estimation are spe tThis 
work was supported in part by an Ohio State Univer sity Interdisciplinsry Seed Grant and by National Science Foundation Grant IRI 9210332 Address all correspondence to Kevin Passino 614 5716 email passino6ee.eng.ohiestate.edu 0-7803-1 990-7/94/$4.00 01 994 IEEE 184 Given some function f  X C LR\224  Y C LR where y is a bounded set we wish to construct a fuzzy sys tem g  X c X  Y c y where X and Y are 
some domain and range of interest by choosing a parame ter vector e E 0 so that f\(z  g\(z S  e\(a 1 for all g E X where e\(g the error in approxima tion, is as small as possible We assume that all that is available to choose the parameters of the fuzzy system g\(g;O is some part of the function f in the form of a finite set of input-output data pairs The ith input-output data pair for the system f is denoted by 3 yi 
where 4 E XI yi E Y and yi  f\(3 We call the set of input-output data pairs the fruining data set and denote it by F={\(4~ly Fly~F cx xy 2 where mF denotes the number of 1/0 data pairs con tained in F Therefore the problem we consider here is how to construct a fuzzy system g\(g;g so that f\(4  g\(g for all 4 E X when we have only lim ited information about f in the form of the training set F 


Many applications exist in the control and signal processing areas which may utilize nonlinear function approximation. One such application is system iden tification System identification is the process of con structing a mathematical model of a dynamical sys tem using experimental data from that system Let f denote the physical system that we wish to iden tify The training set F is defined by the experimen tal input-output data In linear system identification an Autoregressive Moving Average \(ARMA\model is often used where 0 0 and u\(k and y\(k are the system input and output at time k In this case g\(z;e which is not a fuzzy system is defined by 3 where y\(k  1  y\(k  q k   u\(k  p 4 ea    ea bo    8b,IT 5  z   e System identification amounts to adjusting e using information from F so that g\(2 e m f 2 for all z E X Clearly restricting g\(g;e to be linear may often make it difficult to achieve accurate identification i.e function approximation especially if f 2 is highly nonlinear Parameter estimation is the process of estimating the value of some system quantity based on measur able data from that system. In this case it is assumed that the parameter we wish to estimate is  where 200  f z Many techniques currently exist for parameter esti mation which utilize model-based approaches We utilize a parameterized fuzzy system g\(g e developed using a training set F to estimate the quantity of in terest  In this case g and F become  x Y\(k  Y\(k  Q u\(k  u\(k  P 7 F  k 200l   I IF  200mI  8 Techniques which detect and isolate failures within complex systems in real time have been implemented in several applications 8 91 Although many of these model based techniques perform adequate fault detec tion in both failed and unfailed conditions if the real process acts as a known linear model and the neces sary signal processing and decision logic is tractable we consider the case where the model may be nonlin ear and unknown Therefore we treat the fault esti mation problem as a special case of parameter estima tion where 1/0 data F 8 from the process is known and f\(3 is the associated fault value Therefore the FDI problem we consider is equivalent to param eter estimation where a fuzzy system is constructed so that k  g\(g represents a fault value In this paper we will investigate the possibility of constructing a fuzzy system g\(g;e by choosing e based on available training data F so that e\(k is small for all k Similar to conventional system iden tification we will utilize an appropriately defined 223re gression vector\224 g as specified in 4 Our hope is that since the fuzzy system g\(2 e has more functional ca pabilities than the linear map defined in 3 we will be able to achieve more accurate identification for highly nonlinear systems by appropriate adjustment of its parameters 8 A system which exhibits universal approximation is capable of approximating any real continuous func tion on a compact set to any arbitrary accuracy Cer tain classea of fuzzy systems have the property of uni versal appmzimation One common class of fuzzy sys tems we consider with singleton fuzzification product inference, Gaussian membership functions, and cen troid defuzzification is governed by the parameter set and has see lo for an interpretation of 10 and a fuller ex planation of fuzzy systems The size of  is governed by the number of fuzzy rules N and the number of inputs to the fuzzy system n For the fuzzy system 10 the output membership function for the i*h rule is represented by the scalar point bi a 223singleton\224 the input membership function for the ith rule and jth inpct is a Gaussian type input membership func tion with a point of maximum 4 and a relative width term 4  0 This form for a fuzzy system has the property of universal approximation I is continu ously differentiable and has nonzero input member ship values over the domain of interest X 111 Technique for Function Approximation with Fuzzy Systems In this section we utilize some of the insight from the analysis performed in the previous section to pro pose a simple method for constructing a fuzzy sys tem for nonlinear function approximation based on a training data set F defined by 2 The method we propose is an extension of other techniques pro posed for nonlinear function approximation via fuzzy systems Namely we utilize a technique given in 3 entitled 223learning by examples\224 and some ideas from 2 and l to develop a new method to construct a fuzzy system for nonlinear function approximation We first develop the methodology and then present the function approximation algorithm 185 


A Function Approximation Algorithm Given the parameterized fuzzy system 10 we choose the parameters in  and the number of rules N so that we approximate a nonlinear function f  X c LR  Y c LR based on input-output data pairs generated via experiment or simulation The first question we address in the construction of a fuzzy system is the choice of the number of fuzzy rules N More fuzzy rules means increased computa tional complexity in implementation Therefore spe cific applications may limit the number of rules which may be utilized in implementation On the other hand the use of many fuzzy rules may produce a fuzzy system with more functional capability avail able for approximation Therefore a tradeoff exists between computational complexity and functional ca pability based on the number of fuzzy rules N We first define the quantity 2001 which character izes the desired accuracy with which the fuzzy sys tem performs function approximation Specifically the output of the current fuzzy system is compared to the output portion of the input-output training data point yi If this comparison is greater then cj then we choose to augment the current fuzzy system with an additional rule so that IS e  yi I  cj  modify Ig\(gi e  yi I 5 cj 11 do not modify The choice for cj determines the number of fuzzy rules where a smaller value for E generally means more fuzzy rules for a given training data set and vice versa Employment of cj in the function approx imation algorithm is outlined below Algorithm To Construct Fuzzy System 1 Construct An Initial Fuzzy System We assume that we have input-output train ing data pairs given by 3,yi E F where i  1   M We also choose an initial value for the input membership associated with the first fuzzy rule given by 4  uo for all j  1    n The initial choice uo often has little effect on the resulting fuzzy system as training progresses but it is necessary to initialize the fuzzy sys tem The first step in the algorithm is to form a fuzzy rule according to the first input-output training data pair gl y1 and the initial fuzzy system by S.--d bl n exP[-\(y n eXP[-\($321  12 z e1 s\(z;B  where 4  4 bl  yl and 4  uo for j  1   n Once the initial fuzzy system is constructed the function approximation algo rithm forms additional fuzzy rules and chooses parameters 0 for the fuzzy system based on the remaining input-output training data pairs and the desired approximation accuracy cj in Steps 2 and 3 Evaluate New Training Data Point For each additional training data point a yi E F for i  2   M we evaluate 11 with the current fuzzy system If an additional rule is necessary then we go to Step 3 otherwise we return to the start of to Step 2 to evaluate the next training data point according to 11 Augment Current Fuzzy System We modify some of the parameters of the orig inal fuzzy system namely 4 to account for the new information contained in 3 yi that passed the test in 11 A new rule is added to the fuzzy system so that the new fuzzy param eter set e is given by N  N+l 13 bN  i 14 N  4 j 1  n 15 dN  60 j=l  16 Moreover we modify I for i  1   N j  1   n to adjust spacing between the membership function for the rules in the aug mented fuzzy system so that i the added rule does not distort what has already been learned and ii we achieve a smooth interpolation be tween training points Modification of 4 is car ried out by determining for each rule a nearest neighbor We modify 4 for the ith rule accord ing to the computed nearest neighbor which we denote by the index i i  argmin\(ll5 illz  i  1  iV,i  i 17 where 4  cr    PIT We update 5  U    IT according to the equation j  1  n 1 18  a   d.I where W is a weighting term which governs the input membership function overlap between nearest neighbor rules A larger W means less overlap of membership functions and vice versa This is done for all rules i  1     N Once Step 3 is complete we go to Step 2 for the next training data point until the number of training data points are exhausted IV Function Approximation Example F-16 Aircraft In this example the function approximation algo rithm is used to construct an estimator that can de tect and identify actuator failures by using measur able F-16 aircraft data. The presence of an actuator 186 


failure is detected by comparing the actuator\222s com manded position and the estimated position A fail ure is detected if the commanded position and the estimated position differ by more than some thresh old for some window of time A F-16 Aircraft Model and Failure Modes The F-16 aircraft model used in this example is based on a set of five linear perturbation models that are extracted from a non-linear model at the five op erating conditions Ai Bil Cil Di i E  1,2,3,4,5 kfl6  AiZfl6  Biu y  Cizfl6+Diu 19 where the variables are defined as follows 0 Inputs U  6de 6 6 lT  6  elevator deflection \(degrees  6de  differential elevator deflection de  6  aileron deflection \(degrees  6  rudder deflection \(degrees grees System State Zfl6  a q 4 p p rlT  a  angle of attack degrees  q  body axis pitch rate degrees/sec   Euler roll angle \(degrees    sideslip angle \(degrees  p  body axis roll rate degees/sec  r  body axis yaw rate degrees/sec Outputs y   716 IT  A  normal acceleration g\222s 0 System Matrices Ai Bil Ci Di Provided by The nominal control laws for the F-16 aircraft that were provided by the Wright Laboratories consist of two parts one for the longitudinal channel and the other for the lateral channel The inputs to the con troller are the pilot commands and the F-16 system feedback signals For the longitudinal channel the pilot command is the desired pitch A,d and the sye tem feedback signals are normal acceleration A  an gle of attack a and pitch rate Q Likewise for the lateral channel the pilot commands are the desired roll rate pd as well as the desired yaw pd and the system feedback signals are the roll rate p yaw angle r and sideslip p The controller gains for the lon gitudinal and for the lateral channels are scheduled as a function of different dynamic pressures The dy namic pressure at all five perturbation models is fixed at 499.24 psf which is based on an assumption that Wright Laboratories All information about the F-16 craft modela WM provided by Wright Laboratories I87 the F-16 aircraft will operate with constant speed and altitude Hence a gain schedule table which is pro vided by Wright Laboratories, is used to determine the controller gains is used to represent the actuator dynamics for each of the aircraft control sur faces and the actuators have physical saturation lim its SO that 21\222 5 6 5 21\222 21\222 5 6de 5 21\260 23\222 5 6 5 20\260 and 30\222 5 6 5 30\222 The actu ator rate saturation is f60\260/s for all the actuators To simulate the closed-loop system we interpolate be tween the five perturbation models based on the value of a For all the simulations a special 223loaded roll command sequence\224  provided by Wright Laborato ries is used For this command sequence at time t  0.0 a 6Oo/s roll rate command pd is held for 1 second at time t  1.0 a 3g pitch command  is held for 9 seconds at time t  4.5 a 6Oo/s roll rate command pd is held for 1.8 seconds and at time t  11.5 a 6Oo/s roll rate command pd command is held for 1 second The sideslip command d is held at zero throughout the sequence While many different failures can occur on a high performance aircraft such as the F-16 e.g perfor mance degradation or structural damage in this study we will focus on FDI for aileron and differential elevator stuck failures The transfer function B Failure Models and naining In order to implement a fuzzy estimator for FDI on the F-16 aircraft it is necessary to determine those signals from the aircraft which enable us to deduce the position of the aileron and differential elevator Specifically we need to first determine the inputs 3 i  1   n so that a fuzzy system 10 may pro duce accurate estimates  and ide for the aileron and differential elevator positions Sa and ad We do this by examining the structure of the F-16 air craft model and understanding the effect of the con troller on the actuator positions Specifically we rec ognize that if a failure in the aileron actuator occurs the controller compensates via the differential eleva tor actuator and vice versa We also recognize that the roll command input pd affects both the aileron and differential elevator positions Therefore we uti lize these signals as inputs to the fuzzy estimator to deduce the position of the aileron and differential ele vator In particular we sample the aircraft responses and choose where 6 and 6 are the signals commanded by the controller The vector I n  3 is used in the esti mation of both the aileron position and the position of the differential elevator Next we let fa and fde denote the unknown functional mapping between the aircraft variables and the estimates of the actuator positions so that we let I  a 6:ey PdIT 20 L\(k  fO\(I 21 


and Note that the choice of the inputs in 20 intuitively represents signals which may contribute to the func tional mapping fa or fde in order to construct the fuzzy estimator For instance, during no fault opera tion the aileron and differential elevator positions are related linearly to the roll command Pd Basically the estimator construction problem involves training the fuzzy system to approximate fa and another to approximate fde With this we will have one fuzzy system to estimate the position of the aileron and one to estimate the position of the differential elevator We train the fuzzy systems for estimation by ob taining input-output training data developed through simulation with a sampling time of T  0.02 sec We alternately fail the aileron and differential elevator ac tuators at various positions no failure 1 sec 3 sec 5 sec 7 sec and collect sampled data for c We then construct the fuzzy systems for estimation by means of the training algorithm which chooses values for N bi 4 and 4 to achieve an accuracy of fl de gree on both the aileron and the differential elevator estimators during training i.e  1 The width scaling term W is 3 The resulting fuzzy system for estimation of aileron position contains 108 rules and the resulting fuzzy system for estimation of differen tial elevator position contains 224 rules C Results The fuzzy estimator provides a simple FDI system to detect and isolate failures for the aileron and dif ferential elevator actuators We simply form the ab solute value of the difference between the estimated value with the value commanded for the actuator If one differs above some threshold for some period of time we may guess that a failure has occurred and in this situation one may want to reconfigure the control laws \(see 12 In our case we evaluate the median of the residual over 21 samples If the resulting median exceeds a threshold of 3 degrees for the aileron and 1 degree for the differential elevator then we flag the system that a specific actuator failure has occurred we choose these thresholds via a simulation-based analysis of the no fault residuals Once a residual exceeds a threshold the failure flag is set for the en tire test The results are given in Figures 1-3 Notice that in Figure 1 if there is no actuator failure then the failure estimators for both the aileron and differ ential elevator provide an estimate of the actuator po sitions that is reasonably close to the actual position Clearly if we choose a detection threshold of 3 degrees for the aileron residual and a detection threshold of 1 degree for the differential elevator no failure will be indicated Using the median filter described above failures are correctly detected and determined for an aileron failure at 1 second Figure 2 into the loaded roll command sequence with the filtered aileron resid uals exceeding the threshold and the filtered differen tial elevator residual remaining below the threshold Moreover, failures are correctly detected and deter mined for a differential elevator failure at 1 second into the loaded roll command sequence with the fil tered differential elevator residuals exceeding the l degree threshold and the filtered aileron residuals re maining below the threshold see Figure 3 We see that the estimators provide an adequate estimate of the position at which the aileron and differential ele vator are stuck and also properly indicate which ac tuator has not failed Our simulation results actually show that the fuzzy estimator can accurately discrim inate between and aileron and differential elevator failures for the training data set we utilize If fail ures occur other than the ones we have trained for or if a different aircraft maneuver is initiated accu rate estimation may not be achieved V Conclusions In this paper we i concisely stated the func tion approximation problem in the context of fuzzy systems where input-output training data was avail able ii illustrated possible applications for nonlin ear function approximation in the system identifica tion and signal processing fields iii discussed the functional capability of fuzzy systems in terms of the universal approximation property and discussed con traints associated with the input-output training data set In addition we introduced a new method to per form function approximation that builds on the ap proaches in l 31 and uses some ideas from 2 Fi nally we used the function approximation algorithm to design failure estimators for one class of failures in the ailerons and differential elevator on an F-16 aircraft References l A T Magan 223Fuzzy parameter estimation for fail ure identification,\224 Master\222s thesis, Dept of Electri cal Engineering Ohio State University 1992 2 L.-X Wang 223Training of fuzzy logic systems sing nearest neighborhood clustering,\224 in 2nd IEEE Con ference on Fuzzy Systems San Fmnsico California 3 L.-X Wang and J M Mendel 224Generating fuzzy rules by learning from example,\224 IEEE Trans on Systems Man and Cybernetics vol 22 pp 1414 1427 November 1992 4 H Tanaka and H Ishibuchi, \223Identification of possi bilistic linear systems by quadratic membership func tions of fuzzy parameters,\224 Fuzzy Sets and Systems 5 L.-X Wang and J M Mendel 223Back-propagation fuzzy system as nonlinear dynamic system identi fiers,\224 in 1st IEEE Conference on Fuzzy Fystems San Diego California pp 1409-1418 1992 pp 13-17, 1993 vol 41 pp 145-160 1991 188 


L.-X Wang and J M Mendel 224Fuzzy basis func tions universal approximation and orthogonal least squares learning,\224 IEEE Tmns on Neuml Networks vol 3 pp 1-8 september 1992 S.-K Sin and R J Defigueiredo 223Fuzzy system de sign through fuzzy clustering and optimal predefuzzi fication,\224 in 2nd IEEE Conference on fizzy Systems San Fmnsico California pp 190-195, 1993 J J Gertler 223Survey of model-based failure detec tion and isolation in complex plants,\224 IEEE Control Systems Magazine vol 3 no 6 pp 3-11 1988 P M Frank 223Fault diagnosis in dynamic systems using analytical and howledgebased redundancy-a survey and some new results,\224 Automatica vol 26 no 3 pp 459-474 1990 L X Wang Adaptive fizzy Systems and Control Prentice Hall New Jersey 1994 L.-X Wang 223Fuzzy systems are universal approxi mators,\224 in 1st IEEE conference on fizzy systems W A Kwong K M Passino and S Yurkovich 223Fuzzy learning systems for aircraft control law re configuration.\224 IEEE Int Symposium on Intelligent Control Columbus, Ohio Aug 1994 pp 1163-1170 March 1992 Fo J 8p.iq 2 0 5 10 15 20 1 0 0 5 10 15 20 unw s he 10 F 2210 5 10 15 10 5 10 15 20 unw s tm s Figure 1 No Failure Case solid line  estimate and residual dotted line true value and threshold 6 10 15 20 UM s unw s Figure 2 Aileron Failure at t=l sec solid line  esti mate and residual dotted line true value and thresh old  1.5 222\224 __ j  OO 5 10 15 20 tm s FL%--l O0\224 5 10 15 20 un s Figure 3 Differential Elevator Failure at t=l sec solid line  estimate and residual dotted line true value and threshold 189 


4 If large k-itemset is empty the algorithm termi nates Otherwise k  k  1 and the coordinator broadcasts large k-itemsets to all the processors and goto 2231\224 3.5 HPA with Extremely Large Itemset Duplication  HPA-ELD In case the size of candidate itemset is smaller than the available system memory HPA does not use the remaining free space However HPA-ELD does utilize the memory by copying some of the itemsets The itemsets are sorted based on their frequency of ap pearance HPA-ELD chooses the most frequently oc curring itemsets and copies them over the processors so that all the memory space is used which contributes to further reduce the communication among the pro cessor In HPA it is generally difficult to achieve a flat workload distribution If the transaction data is highly skewed that is, some of the itemsets appear very fre quently in the transaction data the processor which has such itemsets will receive a much larger amount of data than the others This might become a system bottleneck In real situations the skew of items is easily discovered In retail applications certain items such as milk and eggs appear more frequently than others HPA-ELD can handle this problem effectively since it treats the frequently occurring itemset entries in a special way HPA-ELD copies such frequently occurring item sets among the processors and counts the sup port-count locally like in NPA In the first phase when the processors generate the candidate k-itemset using the large \(k-1 if the sum of the support val ues for each large itemset exceeds the given threshold it is inserted in all the processor\222s hash table The re maining candidate itemsets are partitioned as in HPA The threshold is determined so that all of the available memory can be fully utilized using sort After reading all the transaction data all processor\222s support-count are gathered and checked whether it satisfies the min imum support condition or not Since most of the algorithm steps are equal to HPA we omit a detailed description of HPA-ELD 4 Performance Evaluation Figure 6 shows the architecture of Fujitsu APlOOODDV system, on which we have measured the performance of the proposed parallel algorithms for mining association rules NPA SPA HPA and HPA ELD APlOOODDV employs a shared-nothing archi tecture A 64 processor system was used where each processor, called cell, is a 25MHz SPARC with 16MB local memory and a 1GB local disk drive Each pro t15.14 t20.14 T-net 15 4 2048K 145MB 20 4 2048K 187MB Figure 6 Organization of the APlOOODDV system Name I It1 I 111 I ID1 I S ize tlO.14 I 10 I 4 I 2048K I lOOMB Table 4 Parameters of data sets cessor is connected to three independent networks T net B-net and S-net The communication between processors is done via a torus mesh network called the T-net and broadcast communication is done via the B-net In addition a special network for barrier syn chronization called the S-net is provided To evaluate the performance of the four algo rithms synthetic data emulating retail transactions is used where the generation procedure is based on the method described in 2 Table 4 shows the mean ing of the various parameters and the characteristics of the data set used in the experiments 4.1 Measurement of Execution Time Figure 7 shows the execution time of the four pro posed algorithms using three different data sets with varying minimum support values 16\(4 x 4 proces sors are used in these experiments Transaction data is evenly spread over the processor\222s local disks In these experiments, each parallel algorithm is adopted only for pass 2 the remaining passes are performed using NPA, since the single processor\222s memory can not hold the entire candidate itemsets only for pass 2 and if it fits NPA is most efficient HPA and HPA-ELD significantly outperforms SPA 25 


tlO.14 16 processors 1m 1 161 t 1 the number ofall the transactions 127  CpP 10 I 0 0.2 0.4 0.6 0.8 1 1.2 1.4 minimum supwrt  t15.14 16 processors 0 0.2 0.4 0.6 0.8 1 1.2 1.4 rrrrm SUDPOIT  t20.14 16 processors looOa 1 A SPA  0 0.2 0.4 0.6 0.8 1 1.2 1.4 U SUDWrt  Figure 7 Execution time varying minimum support value Since all transaction data is broadcast to all of the processors in SPA its communication costs are much larger in SPA than in HPA and HPA-ELD where the data is not broadcasted but transfered to just one pre cessor determined by a hash function In addition SPA transmits the transaction data while HPA and HPA ELD transmit the itemsets which further reduces the communication costs In NPA the execution time increases sharply when the minimum support becomes small Since the can didate itemsets becomes large for small minimum sup port the single processor's memory cannot hold the entire candidate itemsets NPA has to divide the can didate itemsets into fragments Processors have to scan the transaction data repetitively for each frag ment which significantly increases the execution time 4.2 Communication Cost Analysis Here we analyze the communication costs of each algorithm Since the size of the transaction data is usually much larger than that of the candidate item set we focus on the transaction data transfer In NPA the candidate itemsets are initially copied over all the processors which incurs processor communication In addition during the last phase of the processing, each processor sends the support count statistics to the co ordinator where the minimum support condition is ex amined This also incurs communications overhead But here we ignore such overhead and concentrate on the transaction data transfer for SPA and HPA in sec ond phase In SPA, each processor broadcasts all transaction data to all the other processors The total amount of communication data of SPA at pass IC can be expressed as follows p=l i=l N It x N  1 x ID1 1 where the number of items in i-th transaction of pth processor the number of pth Drocessor's transactions In HPA the itemsets of the transaction are trans mitted to the limited number of processors instead of broadcasting The number of candidates is dependent on the data synthesized by the generator The total 26 


amount of communication for HPA at pass IC can be expressed as follows CAN M p=l i=l the amount of the candidate itemset in bytes the size of main memory of a single pre cessor in bytes One transaction potentially generate t,p ck candi dates However in practice most of them are filtered out as is denoted by the parameter CY Since a is usually small4 MkSPA  MFPA Since it is difficult to derive a we measured the amount of data received by each processor Figure 8 shows the total amounts of received messages of SPA HPA and HPA-ELD where t15.14 transaction data was used with 0.4 minimum support As you can see in Figure 8 the amount of messages received of HPA is much smaller then that of SPA In HPA-ELD the amount of messages received is further reduced since a part of the candidate itemset is handled separately and the itemsets which corre spond to them are not transmitted but just locally processed SPA HPA HPA-ELD Figure 8 the amount of messages received pass 2 4.3 Search Cost Analysis In the second phase the hash table which consists of the candidate itemsets are probed for each transac tion itemset 41f the number of processors is very small and the number of items in transaction is large then McPA could be larger than MzPA With reasonable number of processors, this does not happen as you can see in Figure 8 We are currently doing experiments on mining association rules with item\222s classifica tion hierarchy, where combination of items becomes much larger than the ordinary mining association rules When ak increases McPA tends to increase as well we will report on this case in a future paper In NPA the number of probes at pass IC can be expressed as follows p=l i=l 11 ItlCk x lak x ID x N 4 In HPA and HPA-ELD the number of searches at pass IC can be expressed as follows p=l i=l E ltlck x lakl x 5 The search cost of HPA and HPA-ELD is always smaller than SPA It is apparent that SFPA  SfPA Not only the communication cost but also search cost also can be reduced significantly by employing hash based algorithms which is quite similar to the way in which the hash join algorithm works much better than nested loop algorithms. In NPA the search cost depends on the size of the candidate itemsets If the candidate itemset becomes too large SrPA could be larger than SfPA But if it fits SFPA N SZPA  SfPA that is the search cost is much smaller than SPA and almost equal to HPA Figure 9 shows the search cost of the three algorithms for each pass where the t15.14 data set is used under 16 processors with the minimum support 0.4 In the experimental results we have so far shown all passes except pass 2 adopts NPA algorithm We applied different algorithms only for pass 2 which is computationally heaviest part of 27 


the total processing However here in order to focus on the search cost of individual algorithm more clearly each algorithm is applied for all passes The cost of 500 400 300 200 100 0 1 2 3 4 oass number    Figure 9 the search cost of SPA NPA and HPA NPA changes drastically for pass 2 The search cost of NPA is highly dependent on the size of available main memory If memory is insufficient, NPA's performance deteriorates significantly due to the cost increase at pass 2 In Figure 9 the search cost of NPA is less than SPA However as we explained before it incurred a lot of additional 1/0 cost Therefore the total execution time of NPA is much longer than that of SPA 4.4 In this section the performance comparison be tween HPA and HPA-ELD is described In HPA-ELD we treat the most frequently appearing itemsets sepa rately In order to determine which itemset we should pick up we use the statistics accumulated during pass 1 As the number of pass increases the size of the candidate itemsets decreases Thus we focused on pass 2 The number of the candidate itemsets to be separated is adjusted so that sum of non-duplicated itemsets and duplicated itemsets would just fit in the available memory Figure 10 shows the execution time of HPA and HPA-ELD for t15.14 varying the minimum support value on a 16 processors system HPA-ELD is always faster than HPA The smaller the minimum support the larger the ratio of the difference between the execu tion times of the two algorithms becomes As the min imum support value decreases the number of candi date itemsets and the count of support increases The candidate itemsets which are frequently found cause large amounts of communication The performance of HPA is degraded by this high communications traffic Comparison of HPA and HPA-ELD  0 0.5 1 1.5 2 minimum supwrt  Figure 10 Execution time of HPA and HPA-ELD at pass 2 Figure 11 shows the number of probes in each pro cessor for HPA and HPA-ELD for t15.14 using a 16 processor system for pass 2 We picked up an exam ple which is highly skewed Horizontal axis denotes processor ID In HPA the distribution of the number 14 9 c g 12 g 10 s U  2 6 4t 2 Y 0 2 4 6 8 101214 processor ID Figure 11 The number of search of HPA and HPA ELD at pass 2 of probes is not flat Since each candidate itemset is allocated to just one processor the large amount of messages concentrate at a certain processor which has many candidate itemsets occurring frequently In HPA-ELD the number of probes is compara tively flat HPA-ELD handle certain candidate item sets separately thus reducing the influence of the data skew However as you can see in Figure 11 there still remain the deviation of the load amongst processors If we parallelize the mining over more than 64 proces sors we have to introduces more sophisticated load 28 


18001  balancing mechanism which requires further investi gation 4.5 Speedup Figure 12 shows the speedup ratio for pass 2 vary ing the number of processors used, 16 32 48 and 64 where the curve is normalized with the 16 processor execution time The minimum support value was set to 0.4 4.5 0.5 1 1 0 I 10 20 30 40 50 60 70 number of mxessors Figure 12 Speedup curve NPA HPA and HPA-ELD attain much higher lin earity than SPA HPA-ELD an extension of HPA for extremely large itemset decomposition further in creases the linearity HPA-ELD attains satisfactory speed up ratio This algorithm just focuses on the item distribution of the transaction file and picks up the extremely frequently occurring items Transferring such items could result in network hot spots HPA-ELD tries not to send such items but to process them locally. Such a small mod ification to the original HPA algorithm could improve the linearity substantially 4.6 Effect of increasing transaction Figure 13 shows the effect of increasing transac tion database sue as the number of transactions is increased from 256,000 to 2 million transactions We used the data set t15.14 The behavior of the results does not change with increased database size The minimum support value was set to 0.4 The num ber of processors is kept at 16 As shown each of the parallel algorithms attains linearity 5 Summary and related work In this paper we proposed four parallel algorithms for mining association rules A summary of the four database size Sizeup 0 I 0 500 loo0 1500 uxw amount of transaction thousands Figure 13 Sizeup curve algorithms is shown in Table 5 In NPA the candi date itemsets are just copied amongst all the proces sors Each processor works on the entire candidate itemsets NPA requires no data transfer when the supports are counted However in the case where the entire candidate itemsets do not fit within the mem ory of a single processor the candidate itemsets are divided and the supports are counted by scanning the transaction database repeatedly Thus Disk 1/0 cost of NPA is high PDM, proposed in 6 is the same as NPA which copies the candidate itemsets among all the processors Disk 1/0 for PDM should be also high The remaining three algorithms SPA HPA and HPA-ELD partition the candidate itemsets over the memory space of all the processors Because it better exploits the total system's memory, disk 1/0 cost is low SPA arbitrarily partitions the candidate itemsets equally among the processors Since each processor broadcasts its local transaction data to all other pro cessors the communication cost is high HPA and HPA-ELD partition the candidate itemsets using a hash function which eliminates the need for transac tion data broadcasting and can reduce the comparison workload significantly HPA-ELD detects frequently occurring itemsets and handles them separately which can reduce the influence of the workload skew 6 Conclusions Since mining association rules requires several scans of the transaction file its computational requirements are too large for a single processor to have a reasonable response time This motivates our research In this paper we proposed four different parallel algorithms for mining association rules on a shared nothing parallel machine and examined their viabil 29 


Table 5 characteristics of algorithms ity through implementation on a 64 node parallel ma chine the Fujitsu AP1000DDV If a single processor can hold all the candidate item sets parallelization is straightforward It is just suf ficient to partition the transaction over the proces sors and for each processor to process the allocated transaction data in parallel We named this algo rithm NPA However when we try to do large scale data mining against a very large transaction file the candidate itemsets become too large to fit within the main memory of a single processor In addition to the size of a transaction file a small minimum support also increases the size of the candidate itemsets As we decrease the minimum support computation time grows rapidly but in many cases we can discover more interesting association rules SPA HPA and HPA-ELD not only partition the transaction file but partition the candidate itemsets among all the processors We implemented these al gorithms on a shard-nothing parallel machine Per formance evaluations show that the best algorithm HPA-ELD attains good linearity on speedup by fully utilizing all the available memory space which is also effective for skew handling At present we are doing the parallelization of mining generalized association rules described in 9 which includes the taxonomy is-a hierarchy Each item belongs to its own class hierarchy In such mining associations between the higher class and the lower class are also examined Thus the candidate itemset space becomes much larger and its computation time also takes even longer than the naive single level association mining Parallel pro cessing is essential for such heavy mining processing Acknowledgments This research is partially supported as a priority research program by ministry of education We would like to thank the F\221ujitsu Parallel Computing Research Center for allowing us to use their APlOOODDV sys tems References l R.Agrawal T.Imielinski and ASwami 223Min ing Association Rules between Sets of Items in Large Databases\224 In Proc of the 1993 ACM SIGMOD International Conference on Manage ment of Data pp207-216 May 1993 2 R.Agrawal and RSrikant 223Fast Algorithms for Mining Association Rules\224 In Proc of the 20th International Conference on Very Large Data Bases pp.487-499 September 1994 3 J.S.Park M.-S.Chen and P.S.Yu 223An Effec tive Hash-Based Algorithm for Mining Associ ation Rules\224 In Proc of the 1995 ACM SIG MOD International Conference on the Manage ment of Data SIGMOD Record Vo1.24 pp.175 186 June 1995 4 H.Mannila H.Toivonen and A.I.Verkamo 223Ef ficient Algorithms for Discovering Association Rules\224 In KDD-94:AAAI Workshop on Knowl edge Discovery in Databases pp.181-192 July 1994 5 A.Savasere, E.Omiecinski and S.Navathe 223An Effective Algorithm for Mining Association Rules in Large Databases\224 In Proc of the 21th International Conference on Very Large Data Bases pp.432-444 September 1995 6 J.S.Park M.-S.Chen and P.S.Yu 223Efficient Parallel Data Mining for Association Rules\224 In Proc of the 4th International Conference on In formation and Knowledge Management pp.31 36 November 1995 7 T.Shintani and M.Kitsuregawa 223Considera tion on Parallelization of Database Mining\224 In Institute of Electronics Information and Com munication Engineering Japan SIG CPS Y95 88 Technical Report Vo1.95 No.47 pp.57-62 December 1995 8 T.Shimizu T.Horie and H.Ishihata 223Perfor mance Evaluation of the APlOOO Effects of message handling broadcast and barrier syn chronization on benchmark performance-\224  In S WO PP 22292 9.2 ARC 95 Information Processing Society of Japan Vo1.92 No.64 1992 9 R.Srikant and R.Agrawal 223Mining Generalized Association Rules\224 In Proc of the 21th Inter national Conference on Very Large Data Bases pp.407-419 September 1995 30 


Plenary Panel Session 30 XML Databases   Moderator: Michael Carey, IBM Almaden Research Center USA Panelists Adam Bosworth, Microsoft Corporation USA David De Witt University of Wisconsin-Madison, USA Alon Levy University of Washington USA Bruce Lindsay IBM Almaden Research Center USA Jennifer Widom Stanford University USA Demo Session 1 Web Query Optimizer  661 V Zadorozhny L Bright L Raschid T Urhan and M Vidal ReQueSS: Relational Querying of Semi-structured Data  664 R Sunderraman The IDEAL Approach to Internet-Based Negotiation for E-Business  666 J Hammer C Huang Y Huang C Pluempitiwiriyawej M Lee H Li L Wang Y Liu and S Su READY A High Performance Event Notification Service  668 R Gruber B Krishnamurthy, and E Panagos A Multimedia Information Server with Mixed Workload Scheduling  670 G Nerjes DISIMA An Object-Oriented Approach to Developing an Image Database System  672 V Oria T Ozsu P Iglinski B Xu and L Cheng Demo Session 2 The Collaboration Management Infrastructure  677 H Schuster D Baker A Cichocki D Georgakopoulos and M Rusinkiewicz Assisting the Integration of Taxonomic Data The LITCHI Toolkit  679 I Sutherland J Robinson S Brandt A Jones S Embury W Gray R White and F Bisby TheaterLoc: Using Information Integration Technology to Rapidly Build Virtual Applications  681 G. Barish Y.4 Chen D Dipasquo, C Knoblock S Minton I Muslea and C Shahabi Lineage Tracing in a Data Warehousing System  683 Y Cui and J Widom xiii 


The Mentor-Lite Prototype A Light-Weight Workflow Management System  685 J Weissenfels M Gillmann 0 Roth, G Shegalov and W Wonner Location Prediction and Queries for Tracking Moving Objects  687 0 Wolfson B Xu and S Chamberlain Semiorder Database for Complex Activity Recognition in Multi-Sensory Environments  689 S Bhonsle A Gupta S Santini and R Jain Tutorial 1 Web Information Retrieval  693 M Henzinger Tutorial 2 Mobile and Wireless Database Access for Pervasive Computing  694 P Chrysanthis and E Pitoura Tutorial 3 Data Mining with Decision Trees  696 J Gehrke Tutorial 4 Directories Managing Data for Networked Applications  697 D Srivastava Tutorial 5 Indexing High-Dimensional Spaces Database Support for Next Decade\222s Applications  698 S Berchtold and D Keim xiv 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


