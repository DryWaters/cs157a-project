Mining Bases for Association Rules Using Closed Sets Ra\002k Taouil Nicolas Pasquier Yves Bastide Lot\002 Lakhal LIMOS Universit 264 e Clermont-Ferrand II 24 av des Landais 63177 Aubi 036 ere France f pasquier,bastide,taouil,lakhal g libd2.univ-bpclermont.fr Abstract We address the problem of the usefulness and the relevance of the set of discovered association rules Using the frequent closed itemset groundwork we propose to generate bases for association rules that are non-redundant generating sets for all association rules 1 Introduction Association rules are conditional implications between frequent itemsets The problem of the usefulness and the relevance of the set of discovered association rules is re 
lated to the huge number of rules extracted and the presence of many redundancies among these rules for many datasets We address this important problem using the Galois connection framework and we show that we can generate bases for association rules using the frequent closed itemsets extracted by the Close 4 o r t he A-C l os e  5  al gori t h ms  2 Galois connection framework The association rule extraction is performed from a data mining context that is a triplet D   O  I  R  where O and I are 002nite sets of objects and items respectively and R 022 O\002I is a binary relation Each couple  o i  2 R 
denotes the fact that the object o 2O is related to the item i 2I  The closure operator h of the Galois connection 1 is the composition of the application f  that associates with O 022O the items common to all objects o 2 O  and the application g  that associates with an itemset I 022I the objects related to all items i 2 I  The closure operator h  f 016 g associates with I the maximal set of items common to all the 
objects containing I  i.e the intersection of these objects Using this closure operator we de\002ne the frequent closed itemsets that constitute a minimal non-redundant generating set for all frequent itemsets and their support and thus for all association rules their support and their con\002dence This property comes from the fact that the support of a frequent itemset is equal to the support of its closure and that the maximal frequent itemsets are maximal frequent closed itemsets 4 De\002nition 1 Frequent closed itemsets A frequent itemset I is a frequent closed itemset iff h  I  I  The smallest minimal closed itemset containing an itemset I is 
h  I  i.e the closure of I  We denote FC the set of frequent closed itemsets in D  3 Bases for association rules We adapt the Duquenne-Guigues basis for global implications 2 1 a nd t h e L ux enb u r g er bas i s f or part i a l i mpl i cations 3 t o t he e x act as s o ci at i o n r ul es 100 con\002 dence rules and the approximate association rules respectively Theorem 1 Duquenne-Guigues basis A frequent pseudo-closed itemset is a frequent itemset that is not closed and that contains the closures of all its subsets that are frequent pseudo-closed itemsets Let FP be the set of frequent pseudo-closed itemsets in 
D  The Duquenne-Guigues basis for exact association rules contains all rules of the form I 1   I 2 n I 1  for I 1 2 FP  I 2 2 FC and h  I 1  I 2  Theorem 2 Luxenburger basis The Luxenburger basis for approximate association rules contains all rules of the form I 1   I 2 n I 1  for I 1 I 2 2 FC 
and I 1 032 I 2  The transitive reduction of this basis i.e for I 1 032 I 2 and  I 3 2 FC such as I 1 032 I 3 032 I 2  is also a basis for all approximate association rules All approximate association rules their support and their con\002dence can be deduced from the Luxenburger basis or its reduction and all exact association rules can be deduced from the Duquenne-Guigues basis They are minimal non redundant sets of association rules References 1 B  G an ter a n d R W ille Formal Concept Analysis Mathemat 
ical foundations  Springer 1999  V  D uquenne and J L  Guigues 223F amille minimale d'implications informatives r\264 esultant d'un tableau de donn\264 ees binaires\224 Math.etSci.Hum  24\(95\:5\22618 1986 3 M  L ux enb u r g er  223 I m pl i cat i ons par t i e l l e s d ans u n c ont e x t e\224 Math Inf et Sci Hum  29\(113\:35-55 1991  N  P asquier  Y  B astide R T a ouil a nd L  L a khal 223E f 002 cient mining of association rules using closed itemset lattices\224 Information Systems  24\(1\:25\22646 1999 5 N  P asqui er  Y  B ast i d e R  T a oui l a nd L  L a khal  223D i s co vering frequent closed itemsets for association rules\224 Proc ICDT Conf  pp 398\226416 January 1999 


of transactions, where each transaction T consists of a set of items such that Tc I Given an itemset X c I a transaction T contains X if and only if X c T The number of items that a itemset contains is called it\222s size. An itemset of size k is called a k-itemset The items that a itemset contains form a new itemset which is called sub-itemset of the original one. For an itemset X its support denoted by a\(X is the percentage of transactions in DB which contain X and its support count, denoted by X.sup is the number of transactions in DB containing X An itemset X is large or more precisely frequently occurring if its support is no less than a minimum support threshold minsup An association rule is an implication of the form X Y where X,Y cl and Xn Y    The association rule X 3 Y holds in DB with confidence c if the probability of a transaction in DB which contains X also contains Y is c The association rule X j Y has support s in DB if the probability of a transaction in DB contains both X and Y is s The task of mining association rules is to find all the association rules whose support is no less than a minimum support threshold minsup and whose confidence is no less than a minimum confidence threshold minconf i.e r tXUY 3minsup and hninconf a\(X U Y dX The problem of mining association rules can be reduced to two subproblems: finding all large itemsets for a given minimum support threshold generating association rules from the large itemsets found Our research mainly focuses on how to develop efficient methods to solve the first subproblem 2.2 Distributed Mining Association Rules with Item Constraints Let B be a boolean expression over I We assume without loss of generality that B is in a disjunctive normal form DNF That is B is of the form B v B v  v B  where each disjunct B is of the form a A ar2 A  urn When there are no taxonomies present each element a is either I or 4 I E I When there are taxonomies present a is ancestor  I   descendant  I 1  incestor  Iq or 7descendant I  I E I The paper mainly 190 discusses items without taxonomies can make B true Definition 2.1 An itemset satisfies B if its subsets In order to apply B efficiently to the mining process we introduce a guided set of items S Definition 2.2 For given B a guided set S is such that any itemset that satisfies B will contain at least one item from S For example, let the set of items I  1 2 3 4 5 B 1 A 2 v 3 So the sets 1 3 2 3 and 1 2 3,4 5 are all guided sets If B  1 A 2 v 3 the set  1,2 4 5 is guided itemset. Notice that an itemset contains an item from S must not satisfy B An itemset contains at least one item from S is called selected itemset Definition 2.3 For given B a rule X=Y is efficient 0 223XuY satisfies B 0 223XuY\224 has support greater than or equal to the minimum support 0 223X 3 Y 224 has confidence greater than or equal to the minimum support Given a boolean expression B the problem of mining association rules with item constraints is to discover all rules that satisfy B and have support and confidence greater than or equal to the user-specified minimum support and minimum confidence respectively A solution of the problem can be divided into two steps find all large itemsets L\224 that satisfy the set S then based on them search all large itemsets LE that satisfy B Now we examine mining association rules in a distributed environment. Let DB be a database with D transactions There are n sites S S  S in a distributed system DS and database DB is partitioned over the n sites into DB,,DB2  DB respectively Assume the size of partition OB be D i=l  n Xsup and X.sup be the support counts of an itemset X in DB and DB respectively X.sup is called the global support count of itemset X and X.sup is the local support count of X at site SI The formal definition of globally large and locally large itemsets is as follows Definition 2.4 Given a boolean expression B and a minimum support threshold minsup S is guided set associated B a selected itemset X is globally selected if 1 


large in a distributed system DS if X.sup2minsupxD correspondingly X is locally large at site SI if X sup,2m insupx D Definition 2.5 In DS S S2  S for given boolean expression B a rule 223X a Y 224 is globally efficient if 0 223XuY\224 is globally selected large  0 223XuY\222 satisfies B 0 the confidence of 223X a Y 224 is no less than the minimum confidence threshold at the current level In the following portion LE are all globally large itemsets in DB and satisfy B Lf are all globally large k-itemsets in L and satisfy B The essential task of a distributed algorithm of mining association rule with item constraints is to find all globally large itemsets L at multiple sites S a 3 Techniques for Distributed Mining Association Rules with Item Constraints guided set of items is either I or 11 for some items I E I Several techniques used in our algorithm DMCA are introduced in this section including guided items S generating, candidate itemsets generating and pruning and support counts computing, etc. The main notations used in this section are listed in Table 1 GL CG I B I D v D v  v D m disjuncts I gl-selected large k-itemsets at Si selected candidate sets generated from GL L Li selected large k-itemsets at Si satify B and globally large k-itemsets 3.1 Generating guided set For a given expression B there may be many different sets S such that any itemset that satisfies B contains an item from S We would like to choose a set of items for S such that the sum of the supports of items in S is minimized. Because the sum of the supports of items is correlated with the sum of the supports of the large itemsets that contain these items which is correlated with the execution time We now show that we can generate S by choosing one element aq from each disjunct D in B and adding either 1 or all the elemenits in I 1  to S based on whether a is 1 or 1 respectively 222 Theorem 1 Let S be a set of items such that VDi E B~u E Di[\(a  I A I E S Then any non-empty itemset that satisfies B will Proof let X be an itemiset that satisfies B Since X satisfies B there exists soime Di E B that is true for X From the theorem\222s statement, there exists some ail E D such that either ay  1 and lge S or a and I 1 S If the former we are done: since D is true for X 1 EX If it is the latter X must contain some item in I   l since X does not contain lo and Xis not an empty set Since I   1 c S X contains an item from S v a  4 A I  Z c S contain an item in S 3.2 Generation of Candidate Sets Given Li  the set of all selected large k-itemsets the candidate generation procedure must return a superset of the set of all selected large el Recall that unlike in the Apriori algorithm, not all subsets of candidate in Ci+l will be in LL  While all subsets of a large selected itemset are large they may not be selected itemsets Hence the join produce of the Apriori algorithm will not generate all the candidates Therefore, modifying the produce, we sort the itemsets in LL that all items in S precede all items not in S lexicographic ordering is used when two items are both in S or both not in S Lemma 1 If the ordering of items in itemsets is such that all items in S precede all items not in S the join procedure of the Apriori algorithm applied to L will generate a superset of Li  This lemma infers that the first item of any large selected itemset is always a selected item Hence for any el X there exist two large selected k subsets ofXwith the same first k-I items In a distributed environment, pruning the candidate itemsets based on the relation between the locally large 1902 


itemsets and globally large itemsets can improve algorithm\222s efficiency The definition of gl-selected large itemsets is as follows Definition 3.1 At site SI if itemset X is both locally selected large and globally selected large then X is called gl-selected large at the site The gl-selected large itemsets at a site form a basis for generating the site\222s candidate itemsets Lemma 2 If itemset X is globally selected large then there exists a site SI 1 Si such that X and all its subsets are gl selected large at the site Proof see also 7 Theorem 2 For each k k>l the set of all selected large k-itemsets LL is a subset of CG  U CGr  where CG  Apriori_gen GLS,k-I  Proof For each itemset XE Li  it follows from Lemma 2 that there exists a site SI 1 i 9 such that all the size-\(k-1 subsets of X are gl-selected large at the site Hence XE CGl  So the following formula is valid Li ECG,\224  U CGr U Apriori_gen GL:,k-I  Theorem 2 shows that CG can be taken as the set of candidate sets for size-k large itemsets Moreover GL c LL  so the numbers of candidate itemsets will be less improving algorithm efficiency 3.3 Pruning Candidate Sets 1 Constraint Pruning one subset not in Li  then delete it from CG  2 Locally pruning From lemma 1 for any XE CG at sites SI if X.sup,<minsupxD then discard it from L;,k where L denotes local selected large itemsets in CG  3 Global Pruning In fact the local support counts from other sites can also be used for pruning. At the end of each iteration all local and global support counts of candidate set X are available These local support counts can be broadcast together with the global support counts after a candidate set is found to be globally large Using this information, some global pruning can be performed on For any candidate itemset XE CG  if it contains the candidate sets at a subsequent iteration We introduce the following theorem Theorem 3 At each SI suppose Xis a size-k selected candidate itemset at the k-th iteration X.sup is the global support count of X use maxsup,\(X to denote the minimum value of the local support counts of all the size-\(k-1 subsets of X i.e masup,\(X min Y.sup,lYcXand Iy1=k-l maxsup\(X is the sum of the maxsup,\(X over all sites then the following formula holds sup I maxsup c\224 maxsup,\(X  r=l Proof Because maxsup,\(X is the minimum value of the local support counts of all the size-\(k-1 subsets of X based on the relation of subsets it is an upper bound of Xsup i.e Xsup,l maxsup,\(X\maxsup\(X is the sum of maxsup,\(X at all sites hence maxsup\(X is an upper bound of X.sup The upper bound can be used for pruning i.e if maxsup\(X then X cannot be a candidate itemset This technique is called global pruning It can be combined with local pruning to form different pruning strategies and different algorithms Global pruning is a useful technique for reducing the number of candidate sets its efficiency depends on the distribution of the local support counts 3.4 Count Polling In algorithm CD the local support count of every candidate itemset is broadcast from every site to every other site Therefore the number of messages required for count exchange for each candidate itemset is O\(n2 where n is the number of sites Applying our count polling method only O\(n messages are needed to collect all the support counts for every candidate itemset In general few candidate itemsets are locally large at all sites For each candidate itemset X the technique uses an assignment function which could be a hash function on X to assign X a polling site assuming the assignment function is known to every site The polling site assigned to X is independent of the sites at which X is founded to be locally large Therefore, even if X is found to be locally large at more than one sites it will still be sent to the same polling site For each 1903 


candidate itemset X its polling site is responsible to find out whether X is globally large To achieve that purpose the polling site of X has to broadcast the polling request for X collect the local support counts and compute the global support count Since there is only one polling site for each candidate itemset X the number of messages required for count exchange for X is reduced to O\(n 4 Algorithm for Distributed Mining Association Rules with Item Constraints In this section we will discuss the algorithm DMCA which using a number of techniques including multiple encoded transaction tables candidate set reduction and local pruning etc 4.1 Algorithm Schema 1 Generate a set of guided set S such that any itemset that satisfies B will contain at least one selected item 2 Find globally selected I-itemset Li  collect all local large 1-itemsets L,,l at each site then generate large I-itemsets F by looping finally compute Li  Fx S 3 then F=FuX 4 G=FxS 5 for\(k=2 Li PI k-t-t 6 7 8 9 if X.sup  minsup xD then 10 j  polling-site\(9 insert\(X sup into L\224lk  12 send L\224Jk to site 4 13 forj 1  ndo  receive L\224lk 14 for AllXE L\224lk do 15 CG,\224  U CG  U Apriori_gen GLf,k-I  k  get_locul_count\(l3B CG,S k 1 for All X E T[k 1 1 while\(i=l L;,k 0 and-i<=n;i if X E LP,[k then insert X into LP,[k update X.lurge-sites  1 6 for All XeLP,[k do send-computing-request 1 7 reply-computing-requestl:T,[k 1 8 19 for All XE LP,[k do  receiveX.sup, from the sites 4 where 4 Xlurge-sites 20 X.sup c;=,x.sup  21 if X.sup1mimupxD then 22 23 then insert Xinto G,[k  24 broadcast G,[k 25 receive G,[k from All other sites 4,\(j  i 26 Li U Li,k  divide ci into GL  i=1  n if g-upper-bound\(.;ll 2 minsup x D 3 For each k  2 generate CG,:k  apriori_gen GL\224  at each site 4 For each X in CG,sk  collect its supports to generate Ls,k+l after local pruning then send Ls,k+l and their supports to looping sites 5 Collect the supports of all candidate itemsets at each looping site then prune them based on constraint expression to get  globally large itemsets LE 27 L comp Li  28 LE ukLf  I 5 Experimental results To examine the performance of the proposed algorithm DMCA is implemented arid tested on a distributed system Several pes n,ming NT system and connected by LAN are used1 to perform the experiment 6 Integrate all large itemsets of each size into 4.2 Algorithm DMCA The databases in the expleriment are composed of synthetic data We set I the total number of items to 1000 L the number of potentially large itemsets to B contains 10 items Experimental results are displayed Output LE all large itemsets that satisfy B in Figure 1 The figure indicates performance 1 fS find Ti l]=get_focal_count\(DB 0,l difference between algorithm DMCA and FDM 2 for All X E T 11 if X.sup  minsup xD DMCA outperformed FDM by 40-45 The reduction in the numbers of candidate sets and execution time in Input DBI l,.**,n the database partition at sites 200 D the total number OfIransactions to 100000 and SI B and minsup 1904 


DMCA is much significant than that in FDM Therefore the algorithm is efficient 6 Conclusions In this paper we propose a distributed algorithm DMCA for mining association rules with item constraints Experimental results show that the algorithm is efficient Extension of our algorithm DMCA to data mining tasks such as generalized association rules quantitative association rules classification rules etc is an interesting issue for the future research This paper only discusses item constraints with boolean expression, future research is to explore mining association rules with constraints expressed by more complicated forms such as predicate forms, etc 10000 8 Q 600OW-q 4 2000 3 4 5 6 I The number of notes Figure 1 The comparison DMCA with FDM References I U M Fayyad G Piatetsky-Shapiro P Smyth and R Uthurusamy. Advances in Knowledge Discovery and Data Mining AAAIMIT Press, 1996  Agrawal R Imielinski T Swami A Mining association rules between sets of items in large databases. In: Bunemuu P Jajodia S eds. Proceedings of the 1993 A CM SIGMOD Conference on Management of Data New York, NY ACM Press, 1993.207-216  Agrawal R Mannila H Srikant R et al. Fast discovery of association rules In Fayyad M Piatetsky-Shapiro G Smyth P eds. Advances in Knowledge Discovery and Data Mining. Menlo Park CA AAAIMIT Press 1996. 307 328 4 Park J Chen M Yu P An effective hash based algorithm for mining association rules In: Anon ed Proceedings of the ACM SIGMOD International Conference on Management of Data. New York NY ACM Press 1995 175 186 5 Ramakrishnan Srikant Quoc Vu etc Mining Association Rules with Item Constraints. KDD\22297 6 R Agrawal and J. C. Shafer. Parallel mining of association rules Design implementation and experience In IBM Research Report 1996 7 David W Cheung Jiawei Han etc A Fast Distributed Algorithm for Mining Association Rules Proc 1996 Int\222l Conf. Parallel and Distributed Information Systems, 3 1-44 1905 


Since we can only decrease the value of the subtractive term by such a transformation, we have not decreased the value of the expression Now, given and it is easy to show that  and Because the expression is anti-monotone in and and monotone in we can replace  with  with and with without decreasing its value We are now left with an expression identical to the expression in the theorem, except for occurring in place of Taking the derivative of this expression with respect to and solving for 0 reveals it is maximized when Note that for any rule derivable from  must fall between and Given this restriction on the equation is maximized at  We can therefore replace with without decreasing its value. The resulting expression, identical to that in the theorem statement, is thus an upper-bound on  To apply this result to prune a processed group  Dense-Miner sets to since the required supports are known. Computing a tight value for  where is the item in that minimizes this support value\ is not possible given the support values available in the candidate set of and its ancestors. Dense-Miner therefore sets to an upperbound on as computed by the following function when has a parent and where denotes the single item within the itemset  otherwise This computation requires only the value of which was previously computed by the parent, and the supports of candidate set members   and in order to compute  In applying theorem 5.6 to prune an unprocessed group Dense-Miner computes as above. For it lacks the necessary support information to compute so instead it computes a lowerbound on the value as described in section 5.3 5.5  Bounding support The value of is comparatively easy to compute because support is anti-monotone with respect to rule containment. For Dense-Miner simply uses the value of Other anti-monotone constraints, e.g those discussed in [1  c a n b e e x p l oi te d w i th s i m ila r  e a s e  6.     Item ordering The motivation behind reordering tail items in the Generate-Next-Level function is to, in effect, force unpromising rules into the same portion of the search tree. The reason this strategy is critical is that in order for a group to be prunable every sub-node of the group must represent a rule that fails to satisfy one of the constraints. An arbitrary ordering policy will result in a roughly even distribution of rules that satisfy the constraints throughout the search tree, yielding little pruning opportunities We experimented with several different ordering policies intended to tighten the bounds provided by the pruning functions. The strategy we found to work best exploits the fact that the computations for and both require a value and the larger the value allowed for the tighter the resulting bound. The idea then is to reorder tail items so that many sub-nodes will have a large value for This is achieved by positioning tail items which contribute to a large value of last in the ordering since tail items which appear deeper in the ordering will appear in more sub-nodes than those tail items appearing earlier. We have found that the tail items which contribute most to this value tend to be those with small values for This can be seen from Observation 5.4 which yields a larger lower-bound on when the value of summed over every tail item is small. The policy used by Dense-Miner is therefore to arrange tail items in decreasing order of  7.     Post-processing The fact that Dense-Miner finds all frequent, confident large-improvement rules and places them into follows from the completeness of a set-enumeration tree search and the correctness of our pruning rules, as established by the theorems from Section 5. Dense-Miner must still post-process because it could contain some rules that do not have a large improvement Removing rules without a large improvement is non-trivial because improvement is defined in terms of all the proper sub-rules of a rule, and all such rules are not necessarily generated by the algorithm. A naive post-processor for removing rules without a large improvement might, for every mined rule, explicitly compute its improvement by generating and testing every proper sub-rule. Because Dense-Miner is capable of mining many long rules, such an approach would be too inefficient Instead, the post-processor first identifies some rules that do not have a large improvement by simply comparing them to the other rules in the mined rule set It compares each rule to every rule such that and  If ever it is found that then rule is removed because its improvement is not large This step alone requires no database access, and removes almost all rules that do not have a large improvement To remove any remaining rules, the post-processor performs a set-enumeration tree search for rules that could potentially prove some rule in does not have a large improvement. The main difference between this procedure and the mining phase is in the pruning strategies applied For this search problem, a group is prunable when none of its derivable rules can prove that some rule in lacks a large improvement. This is determined by either of the following conditions rr s a 0 263 y  y 263b  b 243 a  y  b  a  0 b  b y  y x  x x  x  y 2 y b   gx  sup hg  C 310  minsup x  x minmax y 2 y b minsup  sup hg  C 310    x  x  x imp r  g y sup hg  tg  c 330  310\310  b sup hg  i m 226  i m 330 c 330   310  i m hg  g b sup hg  i m 226  i m 330 c 330   310  f b g  min f b g p sup hg p  i 330 c 330   310     g g p i hg  hg p  226 f b g  245  f b g p  hg  hg  C 310 hg p  hg p  C 310 sup hg p  i 330 c 330   310  g b y sup hg  tg  c 330  310\310  usup g  usup g  sup hg  C 310  uconf g  uimp g  y sup hg  tg  c 330  310\310  243 y sup hg  tg  c 330  310\310  sup hg  tg  c 330  310\310  sup hg  i 330 c 330   310  sup hg  tg  c 330  310\310  sup hg  i 330 c 330   310  sup hg  i 330 c 330   310  R R R r 1 R 316 r 2 r 2 R 316 r 2 r 1 314 conf r 1  conf r 2  226 minimp  r 1 R g R 


225 There exists no rule for which  225 for all rules such that  After groups are processed, any rule is removed if there exists some group such that and Because the search explores the set of all rules that could potentially prove some rule in does not have a large improvement, all rules without a large improvement are identified and removed Our post-processor includes some useful yet simple extensions of the above for ranking and facilitating the understanding of rules mined by Dense-Miner as well as other algorithms. The improvement of a rule is useful as an interestingness and ranking measure to be presented to the user along with confidence and support. It is also often useful to present the proper sub-rule responsible for a rule\222s improvement value. Therefore, given an arbitrary set of rules, our post-processor determines the exact improvement of every rule, and associates with every rule its proper subrule with the greatest confidence \(whether or not this subrule is in the original rule set\le-sets that are not guaranteed to have high-improvement rules \(such as those extracted from a decision tree\, the sub-rules can be used to potentially simplify, improve the generality of, and improve the predictive ability of the originals 8.     Evaluation This section provides an evaluation of Dense-Miner using two real-world data-sets which were found to be particularly dense in [4  1 The first data-set is compiled from PUMS census data obtained from It consists of 49,046 transactions with 74 items per transaction, with each transaction representing the answers to a census questionnaire. These answers include the age, taxfiling status, marital status, income, sex, veteran status, and location of residence of the respondent. Similar data-sets are used in targeted marketing campaigns for identifying a population likely to respond to a particular promotion. Continuous attributes were discretized as described in  though no frequently occurring items were discarded. The second data-set is the connect-4 data-set from the Irvine machine learning database repository It consists of 67,557 transactions and 43 items per transaction This data-set is interesting because of its size, density, and a minority consequent item \(\223tie games\224\ accurately predicted only by rules with low support. All experiments presented here use the \223unmarried partner\224 item as the consequent with the pums data-set, and the \223tie games\224 item with the connect-4 data-set; we have found that using other consequents consistently yields qualitatively similar results Execution times are reported in seconds on an IBM IntelliStation M Pro running Windows NT with a 400 MHZ Intel Pentium II Processor and 128MB of SDRAM. Execution time includes runtime for both the mining and post-processing phases The minsup setting used in the experiments is specified as a value we call minimum coverage where In the context of consequent constrained association rule mining, minimum coverage is more intuitive than minimum support, since it specifies the smallest fraction of the population of interest that must be characterized by each mined rule 8.1  Effects of minimum improvement The first experiment \(Figure 5\hows the effect of different minimp settings as minsup is varied. Minconf in these experiments is left unspecified, which disables pruning with the minimum confidence constraint. The graphs of the figure plot execution time and the number of rules returned for several algorithms at various settings of minimum support Dense-miner is run with minimp settings of .0002, .002, and 02 \(dense_0002, dense_002, and dense_02 respectively We compare its performance to that of the Apriori algorithm optimized to exploit the consequent constraint \(apriori_c This algorithm materializes only those frequent itemsets that contain the consequent itemset The first row of graphs from the figure reveals that apriori_c is too slow on all but the greatest settings of minsup for both data-sets. In contrast, very modest settings of minimp allow Dense-Miner to efficiently mine rules at far lower supports, even without exploiting the minconf constraint. A natural question is whether mining at low supports is necessary. For these data-sets, the answer is yes simply because rules with confidence significantly higher than the consequent frequency do not arise unless minimum coverage is below 20%. This can be seen from Figure 7 which plots the confidence of the best rule meeting the minimum support constraint for any given setting 2 This property is typical of data-sets from domains such as targeted marketing, where response rates tend to be low without focusing on a small but specific subset of the population The graphs in the second row of Figure 5 plot the number of rules satisfying the input constraints. Note that runtime correlates strongly with the number of rules returned for each algorithm. For apriori_c, the number of rules returned is the same as the number of frequent itemsets containing the consequent because there is no minconf constraint specified. Modest settings of minimp dramatically reduce the number of rules returned because most rules in these data-sets offer only insignificant \(if any\ predictive advantages over their proper sub-rules. This effect is particularly pronounced on the pums data-set, where a minimp setting of .0002 is too weak a constraint to keep the number of such rules from exploding as support is lowered. The increase in runtime and rule-set size as support is lowered is far more subdued given the larger \(though still small\inimp settings 1 Both data-sets are available in the form used in these experiments from http://www.almaden.ibm.com/cs/quest rR 316 hg  r 314 conf r   uconf g  226 minimp 263 rR 316 hg  r 314 rR 316 g hg  r 314 conf r   conf hg   226minimp  R http://augustus.csscr.washington.edu/census/comp_013.html http://www.ics.uci.edu/~mlearn/MLRepository.html 2 The data for this figure was generated by a version of Dense-Miner that prunes any group that cannot lead to a rule on the depicted support/confidence border. This constraint can be enforced during mining using the confidence and support bounding techniques from section 5 minimum coverage minsup sup C  244  


FIGURE 5 Execution time and rules returned versus minimum coverage for the various algorithms FIGURE 6 Execution time of dense_0002 as minconf is varied for both data-sets. Minimum coverage is fixed at 5% on pums and 1% on connect-4 FIGURE 7 Maximum confidence rule mined from each data-set for a given level of minimum coverage   1 10 100 1000 10000 100000 0 10 20 30 40 50 60 70 80 90 Execution time \(sec Minimum Coverage connect-4 apriori_c  dense_0002   dense_002   dense_02    1 10 100 1000 10000 100000 1e+06 0 10 20 30 40 50 60 70 80 90 Number of Rules Minimum Coverage connect-4 apriori_c  dense_0002   dense_002   dense_02    1 10 100 1000 10000 100000 0 10 20 30 40 50 60 70 80 90 Execution Time \(sec Minimum Coverage pums apriori_c  dense_0002   dense_002   dense_02    1 10 100 1000 10000 100000 1e+06 1e+07 0 10 20 30 40 50 60 70 80 90 Number of Rules Minimum Coverage pums apriori_c  dense_0002   dense_002   dense_02    0 500 1000 1500 2000 2500 3000 3500 20 25 30 35 40 45 50 55 60 65 Execution time \(sec minconf pums  connect-4  1 10 100 1000 10000 100000 1e+06 20 25 30 35 40 45 50 55 60 65 Number of Rules minconf pums  connect-4    0 10 20 30 40 50 60 70 80 90 100 0 10 20 30 40 50 60 70 80 90 100 Highest Rule Confidence Minimum Coverage pums  connect-4 


8.2  Effects of minimum confidence The next experiment \(Figure 6\ws the effect of varying minconf while fixing minimp and minsup to very low values. With connect-4, we used a minimum coverage of 1%, and with pums, a minimum coverage of 5%. Minimp was set to .0002 with both data-sets. As can be extrapolated from the previous figures, the number of rules meeting these weak minimp and minsup constraints would be enormous As a result, with these constraints alone, Dense-Miner exceeds the available memory of our machine The efficiency of Dense-Miner when minimum confidence is specified shows that it is effectively exploiting the confidence constraint to prune the set of rules explored. We were unable to use lower settings of minconf than those plotted because of the large number of rules. As minconf is increased beyond the point at which fewer than 100,000 rules are returned, the run-time of Dense-Miner rapidly falls to around 500 seconds on both data-sets 8.3  Summary of experimental findings These experiments demonstrate that Dense-Miner, in contrast to approaches based on finding frequent itemsets achieves good performance on highly dense data even when the input constraints are set conservatively. Minsup can be set low \(which is necessary to find high confidence rules as can minimp and minconf \(if it is set at all\This characteristic of our algorithm is important for the end-user who may not know how to set these parameters properly. Low default values can be automatically specified by the system so that all potentially useful rules are produced. Refinements of the default settings can then be made by the user to tailor this result. In general, the execution time required by Dense-Miner correlates strongly with the number of rules that satisfy all of the specified constraints 9.     Conclusions We have shown how Dense-Miner exploits rule constraints to efficiently mine consequent-constrained rules from large and dense data-sets, even at low supports. Unlike previous approaches, Dense-Miner exploits constraints such as minimum confidence \(or alternatively, minimum lift or conviction\ and a new constraint called minimum improvement during the mining phase. The minimum improvement constraint prunes any rule that does not offer a significant predictive advantage over its proper sub-rules. This increases efficiency of the algorithm, but more importantly it presents the user with a concise set of predictive rules that are easy to comprehend because every condition of each rule strongly contributes to its predictive ability The primary contribution of Dense-Miner with respect to its implementation is its search-space pruning strategy which consists of the three critical components: \(1\functions that allow the algorithm to flexibly compute bounds on confidence, improvement, and support of any rule derivable from a given node in the search tree; \(2\proaches for reusing support information gathered during previous database passes within these functions to allow pruning of nodes before they are processed; and \(3\ item-ordering heuristic that ensures there are plenty of pruning opportunities. In principle, these ideas can be retargeted to exploit other constraints in place of or in addition to those already described We lastly described a rule post-processor that DenseMiner uses to fully enforce the minimum improvement constraint. This post-processor is useful on its own for determining the improvement value of every rule in an arbitrary set of rules, as well as associating with each rule its proper sub-rule with the highest confidence. Improvement can then be used to rank the rules, and the sub-rules used to potentially simplify, generalize, and improve the predictive ability of the original rule set References 1 w a l  R.; Im ie lin ski  T   a n d S w a m i, A. 1 9 9 3   M i n i ng As so ciations between Sets of Items in Massive Databases. In Proc of the 1993 ACM-SIGMOD Int\222l Conf. on Management of Data 207-216 2 raw a l R.; M a n n ila, H Sri k an t  R T o i v o n en  H.; an d  Verkamo, A. I. 1996. Fast Discovery of Association Rules. In Advances in Knowledge Discovery and Data Mining AAAI Press, 307-328 3 K Ma ng a n a r is S a n d Sri k a n t, R 19 97  P a rtia l Cl a ssif i cation using Association Rules. In Proc. of the 3rd Int'l Conference on Knowledge Discovery in Databases and Data Mining 115-118 4 a rd o  R. J 1 9 9 8  Ef f i c i en tly Min i n g  Lo n g  P a ttern s fro m  Databases. In Proc. of the 1998 ACM-SIGMOD Int\222l Conf. on Management of Data 85-93 5  Mi c h ae l J. A a n d  Lin o f f G  S 1 9 9 7  Data Mining Techniques for Marketing, Sales and Customer Support John Wiley & Sons, Inc 6 Bri n, S  M o t w a n i, R.; Ullm a n J.; a n d  Tsu r S. 19 9 7 Dyn a m i c  Itemset Counting and Implication Rules for Market Basket Data. In Proc. of the 1997 ACM-SIGMOD Int\222l Conf. on the Management of Data 255-264 7 h e n  W   W   1 9 9 5 F a st Ef fecti v e Ru le In d u ctio n   In  Proc. of the 12th Int\222l Conf. on Machine Learning 115-123 8 In tern atio n a l Bu sin e s s Mac h in e s   1 9 9 6  IBM Intelligent Miner User\222s Guide Version 1, Release 1 9 m e t tin e n M   Ma nn ila  P  Ro nk a i ne n  P   a n d V e rk a m o  A  I. 1994. Finding Interesting Rules from Large Sets of Discovered Association Rules. In Proc. of the Third Int\222l Conf. on Information and Knowledge Management 401-407 10  Ng   R  T    L a k s hm ana n   V   S    Ha n  J   an d P a ng A  1 9 9 8   Exploratory Mining and Pruning Optimizations of Constrained Association Rules. In Proc of the 1998 ACM-SIGMOD Int\222l Conf. on the Management of Data 13-24 11 Ry mo n  R 1 9 9 2   Search  t h ro u g h Sy s t e m atic S e t En u m era tion. In Proc. of Third Int\222l Conf. on Principles of Knowledge Representation and Reasoning 539-550 1  Sha f e r  J  A g r a w a l R   an d Me ht a M 19 98  SPR I N T   A  Scalable Parallel Classifier for Data-Mining. In Proc. of the 22nd Conf. on Very Large Data-Bases 544-555 13  S m y t he P  and  Go od man   R  M 19 92 An I n f o r m at i o n Th eo retic Approach to Rule Induction from Databases IEEE Transactions on Knowledge and Data Engineering 4\(4\:301316 14  S r i k a n t   R    V u  Q an d Ag r a w a l  R  19 97 M i ni ng  A ssoc i a tion Rules with Item Constraints. In Proc. of the Third Int'l Conf. on Knowledge Discovery in Databases and Data Mining 67-73 15 W e bb, G. I 1 9 9 5 OP U S An Ef f i c i e n t Adm i ssible Algo rit h m for Unordered Search. In Journal of Artificial Intelligence Research 3:431-465 


It can also be added to cell CrossSales.3\(PC, printer one_year,\205 5  Distributed and Incremental Rule Mining There exist two ways to deal with association rules 267  Static that is, to extract a group of rules from a snapshot, or a history, of data and use "as is 267  Dynamic that is, to evolve rules from time to time using newly available data We mine association rules from an e-commerce data warehouse holding transaction data. The data flows in continuously and is processed daily Mining association rules dynamically has the following benefits 267  223Real-time\224 data mining, that is, the rules are drawn from the latest transactions for reflecting the current commercial trends 267  Multilevel knowledge abstraction, which requires summarizing multiple partial results. For example association rules on the month or year basis cannot be concluded from daily mining results. In fact multilevel mining is incremental in nature 267  For scalability, incremental and distributed mining has become a practical choice Figure 3: Distributed rule mining Incremental association rule mining requires combining partial results. It is easy to see that the confidence and support of multiple rules may not be combined directly. This is why we treat them as \223views\224 and only maintain the association cube, the population cube and the base cube that can be updated from each new copy of volume cube. Below, we discuss several cases to show how a GDOS can mine association rules by incorporating the partial results computed at LDOSs 267  The first case is to sum up volume-cubes generated at multiple LDOSs. Let C v,i be the volume-cube generated at LDOS i The volume-cube generated at the GDOS by combining the volume-cubes fed from these LDOSs is 345   n i i v v C C 1  The association rules are then generated at the GDOS from the centralized C v  214  The second case is to mine local rules with distinct bases at participating LDOSs, resulting in a local association cube C a,I a local population cube C p,I  and a local base cube C b,i at each LDOS. At the GDOS, multiple association cubes, population cubes and base cubes sent from the LDOSs are simply combined, resulting in a summarized association cube and a summarized population cube, as 345   n i i a a C C 1   345   n i i p p C C 1  and 345   n i i b b C C 1  The corresponding confidence cube and support cube can then be derived as described earlier. Cross-sale association rules generated from distinct customers belong to this case In general, it is inappropriate to directly combine association cubes that cover areas a 1 205, a k to cover a larger area a In the given example, this is because association cubes record counts of customers that satisfy   customer product merchant time area Doe TV Dept Store 98Q1 California Doe VCR Dept Store 98Q1 California customer product merchant time area Doe VCR Sears 5-Feb-98 San Francisco Joe PC OfficeMax 7-Feb-98 San Francisco customer product merchant time area Doe TV Fry's 3-Jan-98 San Jose Smith Radio Kmart 14-Jan-98 San Jose Association   population      base          confidence      support cube               cube                cube         cube                cube LDOS LDOS GDOS 


the association condition, and the sets of customers contained in a 1 205, a k are not mutually disjoint. This can be seen in the following examples 214  A customer who bought A and B in both San Jose and San Francisco which are covered by different LDOSs , contributes a count to the rule covering each city, but has only one count, not two, for the rule A  336  B covering California 214  A customer \(e.g. Doe in Figure 3\who bought a TV in San Jose, but a VCR in San Francisco, is not countable for the cross-sale association rule TV  336 VCR covering any of these cities, but countable for the rule covering California. This is illustrated in Figure 3 6  Conclusions In order to scale-up association rule mining in ecommerce, we have developed a distributed and cooperative data-warehouse/OLAP infrastructure. This infrastructure allows us to generate association rules with enhanced expressive power, by combining information of discrete commercial activities from different geographic areas, different merchants and over different time periods. In this paper we have introduced scoped association rules  association rules with conjoint items and functional association rules as useful extensions to association rules The proposed infrastructure has been designed and prototyped at HP Labs to support business intelligence applications in e-commerce. Our preliminary results validate the scalability and maintainability of this infrastructure, and the power of the enhanced multilevel and multidimensional association rules. In this paper we did not discuss privacy control in customer profiling However, we did address this issue in our design by incorporating support for the P3P protocol [1 i n  ou r data warehouse. We plan to integrate this framework with a commercial e-commerce system References 1  Sameet Agarwal, Rakesh Agrawal, Prasad Deshpande Ashish Gupta, Jeffrey F. Naughton, Raghu Ramakrishnan, Sunita Sarawagi, "On the Computation of Multidimensional Aggregates", 506-521, Proc. VLDB'96 1996 2  Surajit Chaudhuri and Umesh Dayal, \223An Overview of Data Warehousing and OLAP Technology\224, SIGMOD Record Vol \(26\ No \(1\ 1996 3  Qiming Chen, Umesh Dayal, Meichun Hsu 223 OLAPbased Scalable Profiling of Customer Behavior\224, Proc. Of 1 st International Conference on Data Warehousing and Knowledge Discovery \(DAWAK99\, 1999, Italy 4  Hector Garcia-Molina, Wilburt Labio, Jun Yang Expiring Data in a Warehouse", Proc. VLDB'98, 1998 5  J. Han, S. Chee, and J. Y. Chiang, "Issues for On-Line Analytical Mining of Data Warehouses", SIGMOD'98 Workshop on Research Issues on Data Mining and Knowledge Discovery \(DMKD'98\ , USA, 1998 6  J. Han, "OLAP Mining: An Integration of OLAP with Data Mining", Proc. IFIP Conference on Data Semantics DS-7\, Switzerland, 1997 7  Raymond T. Ng, Laks V.S. Lakshmanan, Jiawei Han Alex Pang, "Exploratory Mining and Pruning Optimizations of Constrained Associations Rules", Proc ACM-SIGMOD'98, 1998 8  Torben Bach Pedersen, Christian S. Jensen Multidimensional Data Modeling for Complex Data Proc. ICDE'99, 1999 9  Sunita Sarawagi, Shiby Thomas, Rakesh Agrawal Integrating Association Rule Mining with Relational Database Systems: Alternatives and Implications", Proc ACM-SIGMOD'98, 1998   Hannu Toivonen, "Sampling Large Databases for Association Rules", 134-145, Proc. VLDB'96, 1996   Dick Tsur, Jeffrey D. Ullman, Serge Abiteboul, Chris Clifton, Rajeev Motwani, Svetlozar Nestorov, Arnon Rosenthal, "Query Flocks: A Generalization of Association-Rule Mining" Proc. ACM-SIGMOD'98 1998   P3P Architecture Working Group, \223General Overview of the P3P Architecture\224, P3P-arch-971022 http://www.w3.org/TR/WD-P3P.arch.html 1997 


Plenary Panel Session 30 XML Databases   Moderator: Michael Carey, IBM Almaden Research Center USA Panelists Adam Bosworth, Microsoft Corporation USA David De Witt University of Wisconsin-Madison, USA Alon Levy University of Washington USA Bruce Lindsay IBM Almaden Research Center USA Jennifer Widom Stanford University USA Demo Session 1 Web Query Optimizer  661 V Zadorozhny L Bright L Raschid T Urhan and M Vidal ReQueSS: Relational Querying of Semi-structured Data  664 R Sunderraman The IDEAL Approach to Internet-Based Negotiation for E-Business  666 J Hammer C Huang Y Huang C Pluempitiwiriyawej M Lee H Li L Wang Y Liu and S Su READY A High Performance Event Notification Service  668 R Gruber B Krishnamurthy, and E Panagos A Multimedia Information Server with Mixed Workload Scheduling  670 G Nerjes DISIMA An Object-Oriented Approach to Developing an Image Database System  672 V Oria T Ozsu P Iglinski B Xu and L Cheng Demo Session 2 The Collaboration Management Infrastructure  677 H Schuster D Baker A Cichocki D Georgakopoulos and M Rusinkiewicz Assisting the Integration of Taxonomic Data The LITCHI Toolkit  679 I Sutherland J Robinson S Brandt A Jones S Embury W Gray R White and F Bisby TheaterLoc: Using Information Integration Technology to Rapidly Build Virtual Applications  681 G. Barish Y.4 Chen D Dipasquo, C Knoblock S Minton I Muslea and C Shahabi Lineage Tracing in a Data Warehousing System  683 Y Cui and J Widom xiii 


The Mentor-Lite Prototype A Light-Weight Workflow Management System  685 J Weissenfels M Gillmann 0 Roth, G Shegalov and W Wonner Location Prediction and Queries for Tracking Moving Objects  687 0 Wolfson B Xu and S Chamberlain Semiorder Database for Complex Activity Recognition in Multi-Sensory Environments  689 S Bhonsle A Gupta S Santini and R Jain Tutorial 1 Web Information Retrieval  693 M Henzinger Tutorial 2 Mobile and Wireless Database Access for Pervasive Computing  694 P Chrysanthis and E Pitoura Tutorial 3 Data Mining with Decision Trees  696 J Gehrke Tutorial 4 Directories Managing Data for Networked Applications  697 D Srivastava Tutorial 5 Indexing High-Dimensional Spaces Database Support for Next Decade\222s Applications  698 S Berchtold and D Keim xiv 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


