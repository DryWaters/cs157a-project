A new algorithm of association rules mining  Gang FANG, Ji-Ping ZENG, Jiang XIONG, Xiao-Feng CHEN Chongqing Three Gorges University Chongqing, P.R. China cqwzjsjfg@163.com   Abstract To reduce the number of candidate itemsets and the times of scanning database, and to fast generate candidate itemsets and compute support, this paper proposes an algorithm of association rules mining based on attribute vector, which is suitable for mining any frequent itemsets. The algorithm generates candidate itemsets by computing nonvoid proper subset of attributes items, it uses ascending value and descending value to compute nonvoid proper subset of the weights of attributes items, the method may be used to reduce the number of candidate itemsets to improve efficiency of generating candidate itemsets. And the algorithm gains support by computing attribute vector module, the method may be used to reduce the time of scanning database, and so the algorithm only need scan once database to search all frequent itemsets. The experiment indicates that the efficiency of the algorithm is faster and more efficient than presented algorithms of congener association rules mining Index Terms data mining, association rules, attribute vector proper subset, attributes items weights I   I NTRODUCTION  Apriori mainly wants to solve two key problems: one is how to reduce the number of candidate itemsets and the times of scanning database, the other is how to fast generate candidate itemsets and compute support. Aiming to the first problem, people present some algorithms, DMFIA as in  and IDMFIA as in [2  A n d th e n t o s o lv e th e s e c o n d  pr o b l e m   some algorithms based on binary were presented, B-Apriori as in [3 B_A R D SM as in 4 an d B _ UD MA  as in 5   T h e s e  algorithms improved the method of generating candidate itemsets and computing support by binary logic operation to indeed improve efficiency. However, they need repeated scan database when computing support. These algorithms based on binary are inefficient because they still use traditional way of generating candidate itemsets and computing support Therefore, this paper proposes an algorithm of association rules mining based on attribute vector, denoted by ARMBAV, which is suitable for mining any long frequent itemsets II  B ASE N OTIONS AND P ROPERTIES  Let I= {i 1 i 2 i m be a set of attribute items, suppose each i k has been changed into Boolean quantity from multiattribute Definition 1 Binary Transaction \(BT\, a transaction is expressed as binary, binary transaction of transaction T is expressed as BT= \(b 1 b 2 b m b k  0 k=1  m  i f i k  T and then b k 1, otherwise b k 0 Example, let I={1,2,3,4,5,6} be a set of attribute items, if T={2,5,6}, and then BT=\(010011 2  Definition 2 Transaction Weights \(TW\, it is an integer, its value is equal to decimal integer of binary transaction Example, if BT = \(010101 2 and then TW \(BT\ =21 Definition 3 Relation of transaction weights accords with relation of transaction set Example, suppose transaction weights of a transaction T 1 is denoted by TW 1 transaction weights of a transaction T 2 is denoted by TW 2 If T 1  T 2 and TW 1  TW 2 namely, TW 1  TW 2 TW 1 TW 1 is regarded as subset of TW 2 which is regarded as superset of TW 1  Definition 4 Attribute Vector \(AV\ it is constituted by the m-order integer, m is called vector dimension, and each integer is called vectorial component Example, 3-AV= {23, 45, 33}, here 23, 45 and 33, they are also called vectorial component Definition 5 Vectorial Component Module \(VCM\, it is an integer, which is equal to the number of ç1é contained by binary code of vectorial component Example, here, 23 is one of vectorial component of above 3-AV, VCM \(23\ = VCM \(010111\ = 4 Definition 6 Attribute Vector Module \(AVM\ it is an integer, which is equal to the summation of vectorial component module Example, 3-AV= {23, 45, 33}, AVM \(3-AV\ = VCM \(23 VCM \(45\ + VCM \(33\= 4 + 4 + 2 = 10 Definition 7 Attribute Vectors Cross Product \(AVCP\, the result of operation is a vector. Each component is the value that components corresponding to all Attribute Vectors will operate andé logical operation Example, if here are two Attribute Vectors, 3-AV 1 23, 45 33}, 3-AV 2 20, 36, 35}, and AVCP \(3-AV 1 3-AV 2 is equal to the result: {23&20, 45&36, 33& 35} = {20, 36, 33 Property 1 Let p and q be binary transactions with m bits let T p be a transaction about p, let T q be a transaction about q and p & q=p, let F be frequent itemsets If T q  F, then T p  F If T p  F, then T q  F 978-1-4244-6005-2/10/$26.00 ©2010 IEEE The 5th International Conference on Computer Science & Education Hefei, China. August 24ñ27, 2010 511 ThP1.8 


     III  ASSOCIATION RULES MINING ALGORITHM BASED ON ATTRIBUTE VECTOR  Suppose there are N transactions in database, which contains m attributes item, and these items are Boolean variable. There are n different transactions in database A  The method of generating candidate itemsets We let I = {i 1 i 2 i m be a set of attribute items, If we let I be a transaction, and TW \(I\ = 2 m 1, this value is also denoted by the weights of attributes items. According to this knowledge as in t h e  a l gor i t hm c o m p ut e s no nvoi d pro per sub s e t  o f  t h e  weights of attributes items to generate candidate itemsets by ascending value and descending value, this course is expressed as follows Min= 1, Max= 2 m 2 The course of generating candidate itemsets by ascending value is expressed as follows V Min 1, 2, 3 The course of generating candidate itemsets by descending value is expressed as follows V Max 2 m 2, 2 m 3, 2 m 4 Example let I= {a, b, c, d}, and then TW \(I\ = 2 4 1=15 namely, 15 is the weights of attributes items. Let NPS be a nonvoid proper subset, and all NPS of the weights of attributes items is expressed as follows Min=1, Max=14 NPS 1 1, it denote candidate itemsets {d NPS 2 14, it denote candidate itemsets {a, b, c NPS 3 2, it denote candidate itemsets {c NPS 4 13, it denote candidate itemsets {a, b, d NPS 5 3, it denote candidate itemsets {c, d NPS 6 12, it denote candidate itemsets {a, b NPS 7 4, it denote candidate itemsets {b NPS 8 11, it denote candidate itemsets {a, c, d NPS 9 5, it denote candidate itemsets {b, d NPS 10 10, it denote candidate itemsets {a, c NPS 11 6, it denote candidate itemsets {b, c NPS 12 9, it denote candidate itemsets {a, d NPS 13 7, it denote candidate itemsets {b, c, d NPS 14 8, it denote candidate itemsets {a According to the example, we know all candidate itemsets were generated by computing nonvoid proper subset of the weights of attributes items B  The method of computing support According to this knowledge as in [7 th e m e th o d  o f  computing attribute vector module is used to gain support by the algorithm, which is expressed as follows Step1: Turning original transaction into Binary Transaction according to definition 1 Step2: Aiming to the column corresponding to each attribute item, its corresponding Binary code is turned into integer in fragment, and these integers will constitute Attribute Vector of attribute item according to definition 4 Step3: Each attribute item in candidate itemsets has own Attribute Vector, and then we will use these Attribute Vectors to operation by Attribute Vectors Cross Product. Finally, a new Attribute Vector will be gained Step4: Computing Attribute Vector Module of new Attribute Vector according to definition 6. The result is equal to support of candidate itemsets For example, there are ten transactions in database. The course of computing support is expressed as follows Step1: Turning original transaction into Binary Transaction T 1 a, b, e, f}, BT 1 110011 2  T 2 b, c, d, e}, BT 2 011110 2  T 3 a, b, d, e, f}, BT 3 110111 2  T 4 a, b, c, d, e, f}, BT 4 111111 2  T 5 c, d, e, f}, BT 5 001111 2  T 6 a, c, d, f}, BT 6 101101 2  T 7 a, c, d, e, f}, BT 7 101111 2  T 8 a, b, c, e, f}, BT 8 111011 2  T 9 b, d, e, f}, BT 9 010111 2  T 10 a, b, c, d, f}, BT 10 111101 2  Setp2: Computing Attribute Vector of each attribute item in database is expressed as table I TABLE I  COMPUTING A TTRIBUTE V ECTOR  No a b c d e f BT 1 1 1 0 0 1 1 BT 2  0 1 1 1 1 0 BT 3 1 1 0 1 1 1 BT 4 1 1 1 1 1 1 BT 5  0 0 1 1 1 1 component 1 22 30 11 15 31 23 BT 6  1 0 1 1 0 1 BT 7  1 0 1 1 1 1 BT 8 1 1 1 0 1 1 BT 9 0 1 0 1 1 1 BT 10  1 1 1 1 0 1 component 2 29 7 29 27 14 31 Attribute Vectors 22 29 30 7 11 29 15 27 31 14 23 31 Step3-step4: Let candidate = {b, e, f} be a candidate itemsets, and then we use these three Attribute Vector of attribute item to compute support by Attribute Vectors Cross Product, denoted by Support \(candidate AV \({b}\0, 7 AV \({e}\ = {31, 14 512 ThP1.8 


     AV \({f}\ = {23, 31 AVCP \({b}, {e}, {f}}\1&23, 7&14&31 22, 6 Support \(candidate\ = AVM \(AVCP \({b}, {e}, {f AVM \({22, 6 VCM \(22\+VCM \(6 3 + 2 = 5 C  The program of generating frequent itemsets Let I= {i 1 i 2 i m be a set of attribute items, we define some signs expressed as follows D: saving all Binary Transactions F 1 saving frequent itemsets by ascending value F 2 saving frequent itemsets by descending value NF: saving non frequent itemsets by ascending value 1\ Min =1, Max=2 m 2 2\hile \(Min<Max 3\  If \(\(Min  F 1 NF  Min 4\   If \(Support \(Min\inimal support 5\   Write Min to F 1 and delete its subset in F 1  6\   Else 7\   Write Min to NF 8 9\  If \(\(Max  F 2 NF  Max 10\    If \(Support \(Max\=minimal support 11\     Write Max to F 2 and delete its subset in F 1  12 13\  Min 14\  Max 15\ Output F 1 and F 2  Input: a Candidate Output: support of Candidate Support \(int Candidate 1\ int i = 0, j = 0, Support = 0, exit = 0 2\  int Se t n e w in t[Ro w   3\  i = 0 4\  While \(\(i < Column\&& \(Exit == 0 5\     If \(\(Candidate & 1\ == 1 6\       Exit = 1 7\       For \(j = 0; j < Row; j 8\         Set D   j i    9 10\     Else 11\         Candidate = Candidate >> 1 12\         i 13 14\   j = i 15\   While \(\(j < Column\ && \(Candidate! = 0 16\       If \(\(Candidate & 1\ == 1 17\         For \(i = 0; i < Row; i 18\           Set[i  S e t  i     D i j    19 20\       Candidate = Candidate >> 1 21\       j 22\   For \(i = 0; i < Row; i 23\     Support = Support + VCM \(Set[i     24\  Return Support IV  C OMPARING THE CAPABILITY OF ALGORITHMS  Here we use B-Apriori as in [3 nd B_ ARD S M a s i n 4 t o  compare with ARMBAV presented by this paper A  Analyzing the Capability of Algorithms B-Apriori: The algorithm generates candidate itemsets which contain the number of items from fewness to many However, the algorithm use traditional method to compute support of candidate, namely, it need scan once database when computing once support, and so there are many times of scanning database in the course of mining association rules, the efficiency of algorithm would be affected because of this B_ARDSM: Generating candidate frequent digital transaction DTL of which is from maximum and minimum to middle. The algorithm is suitable for mining general database where frequent itemsets arenêt confined, but the method of computing support is the same as B-Apriori, the algorithm scans once database when computing support. And so it need scan all these transaction several times, and so the efficiency of algorithm still isnêt fast and efficient ARMBAV: The algorithm is suitable for mining any frequent itemsets. It generates candidate itemsets by computing nonvoid proper subset of attributes items, it uses ascending value and descending value to compute nonvoid proper subset of the weights of attributes items, the method is used to reduce the number of candidate itemsets to improve efficiency of generating candidate itemsets. The algorithm gains support by computing attribute vector module, the method is used to reduce the time of scanning database, and so the algorithm only need scan once database to search all frequent itemsets B  Comparing the experiment of algorithms Now we use result of experiment to testify above analyses and conclusion. Above three algorithms are used to generate 513 ThP1.8 


     frequent itemsets from these transaction weights, which are from 3 to 8191, these transactions donêt include any single items, and so the number of attributes is expressed as m=13 the sum of transactions is expressed as n=8178 Our experimental circumstances are expressed as follow Intel\(R\ Celeron\(R\ M CPU 420 1.60 GHz, 1.24G, language of the procedure is Visual C# 2005.NET, OS is Windows XP Professional The experimental result is expressed as Fig. 1 and 2, where support is absolute value. The runtime of algorithms B-Apriori and ARMBAV is expressed as Fig. 3 as support and length of itemsets change. The runtime of algorithms B_ARDSM and ARMBAV is expressed as Fig. 4 as support and length of itemsets change  Figure 1  The experimental result  Figure 2  The experimental result                                        Figure 3  Runtime of algorithms B-Apriori and ARMBAV                              Figure 4  Runtime of algorithms B_ARDSM and ARMBAV V  C ONCLUSION  This paper proposes an algorithm of association rules mining based on attribute vector, which is suitable for mining any long frequent itemsets. The experiment indicates its efficiency is faster and more efficient than presented congener algorithms A CKNOWLEDGMENT  This work was fully supported by science and technology research projects of Chongqing Education Commission \(Project No. KJ091108\ and it was also fully supported by science and technology research projects of Chongqing Three Gorges University \(Project No. 10QN-22 R EFERENCES  1  Song YQ, Zhu YQ, Sun ZH, Chen G. An algorithm of its updating algorithm based on FP-Tree for mining maximum frequent itemsets Journal of Software, 2003, vol. 14\(9\, pp.1586-1592 2  Ji GL, Yang M. Song YQ. Sun ZH. Fast Updating Maximum Frequent Itemsets. Journal of Computers, 2005, vol. 28\(1\, pp.128-135 3  Chen G, Zhu YQ, Yang HB, Study of Some Key Techniques in Mining Association Rule, Journal of Computer Research and Development 2005, vol. 42 \(10\, pp. 1785-1789 4  Fang Gang, Wei Zu-Kuan, Yin Qian. An Algorithm of Association Rules Double Search Mining Based on Binary. In Proc. of 7th International Conference on Machine Learning and Cybernetics, IEEE Press, China, 2008, pp.184-189 5  Fang G, Wei ZK, Yin Q. The Research of Association Rules Mining Algorithm Based on Binary. In Proc. of International Conference on Cybernetics and Intelligent Systems and International Conference on Robotics, Automation and Mechatronics, IEEE Press, China. 2008, pp 406-410 6  Liu YL, Fang G, Xiong J, Wu YB. An Efficient Algorithm of Mining Association Rules Based on Digital Pure Subset. In Proc. of 6th International Conference on Fuzzy Systems and Knowledge Discovery IEEE Press, 2009, China, pp.43-46 7  Fang G, Wei ZK, Liu YL. An Algorithm of Improved Association Rules Mining. In Proc. of 8th International Conference on Machine Learning and Cybernetics, China. IEEE press, 2009, pp.133 - 137  514 ThP1.8 


From Table IV, we attempt to relate the links between the association rules in Table III. From two tables, we gain knowledge that is displayed in Fig. 1. From that figure, it showed only four clusters. This is because in the 30 association rules, association only occurred in C0, C1, C2 and C5. In C3 and C4, association does not happen between the objects Figure 1 Association and clustering between attributes V C ONCLUSIONS In manufacturing the environments, numerous factors contribute to the productivity. These factors such as the personnel, machine capacity or material are conditionally dependent on one another. Due to this, the data mining techniques can be applied on manufacturing data to assist the manufacturer in getting an interesting and valuable knowledge. In this paper, we used the Apriori algorithm to obtain association rules and predict when the most frequent production occurs in the plastic company. Also, we use the k-means algorithm to uncover the link between the observed frequent patterns. From the experiments, we obtained the association prediction model and found two most produced products, i.e. housing and retaining ring. Also, week 19 and week 33 are the frequent weeks  so it can be concluded that the production is massive in week 19 and week 33 Further analysis can be done using other techniques in association rules or clustering. Data in manufacturing possess the characteristics of imbalance and fluctuate. This will be an interesting challenge to the data mining researchers to obtain interesting and valuable information This study can also be viewed from other angle to solve another issue that might be raised in the plastic industry such as the cycle time production, capacity, maintenance or quality control R EFERENCES 1 Hi ll T   L e w i c k i P   20 10 I n t r odu ct i o n  t o  d a t a m i ni n g    STATISTICA Data Mining. http://www.statsoft.com/textbook/datamining-techniques/ [06 June 2  2  Rav iw o n g s e  R  A l l a da V   S a nd idg e J r  T   20 0 0  P l as t i c  Manufacturing Process Selection Methodology Using SelfOrganising Map \(SOM\/Fuzzy Analysis Int. Journal Adv Manufacturing Technology 16 155-161 3 B e rgm a n n A   20 10 Dat a m i ni n g  for m a nu fac tu rin g: Preven t i ve Maintenance, Failure Prediction, Quality Control 4 W a ng  K   20 0 6   Knowledge Enterprise: Intelligent Strategies in Product Design,  Manufacturing and Management Kovacs, G Wozny, M. &Fang, M. Data mining in manufacturing: The nature and implications. 207. Springer Boston 5 L i a o  T   W   T r i a n t a p h y ll ou  E  20 07  Recent Advances in Data Mining of Enterprise Data: Algorithms and Applications 6 Singapore. World Scientific Publishing Co. Pte. Ltd  C0 C0,C1,C2 C0, C1, C2, C5 C1, C2, C5 C1, C5 w14:p4r4 w47:p4r1 w49:p4r1 w19:p4r1 w42:p3r3 w38:p3r3 w31:p3r2 w46:p3r3 w46:p3r2 w17:p4r2 w17:p3r2 w33:p3r1 w33:p4r1 w45:p3r2 w28:p3r2 w34:p3r1 w21:p3r2 2010 10th International Conference on Inte lligent Systems Design and Applications 1463 


6  Ha n J   K a m b er M   20 01   Data mining Concepts and techniques  Data mining on what kind of data. Academic press. Morgan Kaufmann 7  A g r a w a l  R., I m iel ins k i, T   S w am i, A  N  19 93  Mi ni ng  association rules between set of items in large databases Proceedings of the 1993 ACM SIGMOD International Conference on Management of Data pp. 207-216 8  C h ou d h a r y A  K  H a r d i n g  J A T i wa r i  M  K 2 0 0 8  D a t a  mining in manufacturing: a review based on the kind of knowledge Journal Intell Manufacturing  9 J i a o J   Z h an g Y   20 05 Produ ct  port foli o i d en ti fic a t i on b a s e d o n  association rule mining Computer Aided Design 37 149-172 10  P a wa r  P  A   Ag g a r w a l   A  K 2 0 0 4  As s o c i a t i v e r u l e m i n i n g o f  mobile data           services usage for preference analysis personalization & promotion Proceeding of WSEAS International Conference on Simulation, Modeling and Optimization   A j ok u  P N  Nn aj i B   20 06  I m p r ovi n g p r od uc ti vi t y in manufacturing environments using data mining Artificial Intelligence and data mining workshop   J e ges  R  M ont e C a rlo s i m u la ti on  i n M S E x c e l http://www.projectsmart.co.uk/docs/monte-carlo-simulation.pdf [12 March 20   M e t r op oli s  N   19 87 T h e b e gi n n in g of t h e m o n t e c a r lo m e t h o d  Los Alamos Science 1987 Special issue dedicated to Stanislaw Ulam 125-130  A g ra w a l R   Sri k a n t  R   19 94 F a s t a l gori t h m s for m i ni ng  association rules in large databases Proceedings of the 20th International Conference on Very Large Databases pp. 487 - 499  W i t t en  I  H   Fra n k   E   2 005   Data mining: Practical machine learning tools and techniques 2nd Ed. New York. Elsevier  Ned u n c h ezh ia n  R   A n bu m a n i  K   2 007 Pos t  m i n i n g Di s c overi n g  valid rules from different sized data sources International Journal of Information Technology 3 \(1\: 47-53 17  K h atta k A  M K h a n  A  M T a hir  R a she e d L e e  Y K an d L e e  S   2009. Comparative Analysis of XLMiner and Weka for Association Rule Mining and Clustering The International Conference on Database Theory and Application pp. 82-89 18  W e bb, G  I  20 07 D i s c o v e r i ng S i g n if ica n t P a t t e r ns  M a c h i n e  Learning 68\(1\. Netherlands: Springer, pp. 1-33  A  G i on i s  H M a nn i l a  T  Mi eli k a i n en  a nd P. T s a p a r a s  2 007  Assessing Data Mining Results via Swap Randomization, ACM Transactions on Knowledge Discovery from Data \(TKDD\ 1 \(3 Article No. 14  G a u r a v  N P   Prabh ak a ran B  200 9 A s s o c i at i on ru le m i ni n g in multiple, multidimensional time series medical data Proceedings of the 2009 IEEE International conference multimedia and expo pp 1716-1719 1464 2010 10th International Conference on Inte lligent Systems Design and Applications 


with the Alignment and NQueens benchmarks Results are similar with both versions Although a deeper analysis will be needed the results suggest two main hypothesis 017 The Intel Compiler does not implement thread switching and thus untied tasks cannot bene\002t from this feature which should avoid imbalances This is particularly evident in the Alignment benchmark which has been reported to scale 017 Task scheduling constraints do not seem to impact signi\002cantly the performance results at most there is a 4 difference between the versions The other applications show a similar behavior D Other opportunities for analysis The Intel Compiler does not implement mechanisms that allow the user choose among different task scheduling policies but other OpenMP compilers e 16 that have such capabilities One interesting study is to 002nd how task scheduling policies and how they can mantain locality across tasks can affect the performance results of the benchmarks of the suite In previous sections we have discussed how implementing a cut-off mechanism can affect application performance but we have not discussed due to space limitations how the different cut-off values i.e at which point in the recursion we cut relate with the creation of parallelism and the overall performance Choosing a low cut-off value can restrict parallelism opportunities but choosing a high cut-off value can saturate the system with a large amount of tasks which have no thread available to execute them The right choice depends many times of the input data set Comparing the application behaviour using different cut-off values or testing runtime features which allow to modify dynamically the cut-off can also be interesting analyses The quality of implementations for different task generation schemes e.g in the SparseLU benchmark which can use a single or multiple generator scheme taskwait constructs or other task related implementation details could also be analyzed with our benchmark suite proposal V C ONCLUSIONS AND F UTURE WORK We have presented BOTS  Barcelona OpenMP Task Suite  built with the double motivation of coping with the great characteristics of the multicore processors and offer a set of benchmarks to evaluate OpenMP tasking We think that BOTS will help implementors and programmers to have a better understanding of the OpenMP tasking model and its performance implications Each of these benchmarks comes also with different versions to test different aspects of the tasking model For example they can be used to evaluate task scheduling alternatives tiedness   Also a number of input sets are provided so that benchmarks can be used as tests or really stress the processors and memory system in your machine It is interesting to note that we have tried to select benchmarks with diverse characteristics In this paper we have highlighted the differences and we have shown their evaluation on an SGI Altix machine with up to 32 processors and we report some of their characteristics per task e.g operations memory writes    Their evaluation also shows that there is plenty of work to do at all levels  architecture compiler runtime system programming model to improve certain benchmarks given that their current scalability is very limited This suite can be used to obtain useful data of the strenghts and weaknesses of an OpenMP implementation that can help developers to improve it Currently we are working to add new benchmarks to the suite to cover more problem domains and scenarios We are as well planning to do a full cross-vendor evaluation to 002nd which is the current state of the OpenMP tasking implementations A CKNOWLEDGMENTS This research was supported by the Spanish Ministry of Science and Innovation contracts no TIN2007-60625 and CSD2007-00050 the European Commission in the context of the SARC project contract no 27648 the HiPEAC Network of Excellence contract no IST-004408 the IBM CAS Program and the Mare Incognito project under the BSC-IBM collaboration agreement R EFERENCES  O ARB OpenMP Applicati on Program Interf ace v  3.0  May 2008  J M Bull Measuring Synchronizati on and Scheduling Ov er heads in OpenMP in First European Workshop on OpenMP  September 1999  LLNL OpenMP Performance Suite Description 2001 A v ailable https://computation.llnl.gov/casc/RTS Report/openmp perf.html  A Dorta C Rodriguez F  de Sande and A Gonzalez The OpenMP Source Code Repository Euromicro Conference on Parallel Distributed and Network-Based Processing  vol 0 pp 244ñ250 2005  C Bienia S K umar  J P  Singh and K Li The P ARSEC Benchmark Suite Characterization and Architectural Implications in Proceedings of the 17th International Conference on Parallel Architectures and Compilation Techniques  2008 pp 72ñ81  H Jin M Frumkin and J Y an The OpenMP Implementation of NAS Parallel Benchmarks and Its Performance NASA Ames Research Center Technical Report NAS-99-011 1999 A v ailable citeseer.ist.psu.edu/408248.html 
130 
130 


 D H Baile y  E  Barszcz J T  Barton D S Bro wning R L Carter D Dagum R A Fatoohi P O Frederickson T A Lasinski R S Schreiber H D Simon V Venkatakrishnan and S K Weeratunga The NAS Parallel Benchmarks The International Journal of Supercomputer Applications  vol 5 no 3 pp 63ñ73 Fall 1991 A v ailable citeseer.nj.nec.com/bailey95nas.html  H Jin and R F  V  der W ijng aart Performance Characteristics of the Multi-zone NAS Parallel Benchmarks J Parallel Distrib Comput  vol 66 no 5 pp 674ñ685 2006  V  Aslot M Domeika R Eigenmann G Gaertner  W  B Jones and B Parady SPEComp A New Benchmark Suite for Measuring Parallel Computer Performance Lecture Notes in Computer Science  vol 2104 pp 1  10 2001  A v ailable citeseer nj.nec.com/aslot01specomp.html  C Bienia S K umar  and K Li  P ARSEC vs SPLASH-2 A Quantitative Comparison of Two Multithreaded Benchmark Suites on Chip-Multiprocessors IEEE International Symposium on Workload Characterization 2008  pp 47ñ56 2008  K K usano S  Satoh and M Sato Performance Ev aluation of the Omni OpenMP Compiler in Prooceedings of the Third International Symposium on High Performance Computing  2000 pp 403ñ414  S Shah G Haab P  Petersen and J Throop Fle xible Control Structures for Parallellism in OpenMP in 1st European Workshop on OpenMP  September 1999  P  C Fischer and R L Probert Ef 002cient Procedures for Using Matrix Algorithms in Proceedings of the 2nd Colloquium on Automata Languages and Programming  SpringerVerlag 1974 pp 413ñ427  M Frigo C E Leiserson and K H Randall The Implementation of the Cilk-5 Multithreaded Language in Proceedings of the ACM SIGPLAN 1998 conference on Programming Language Design and Implementation  1998 pp 212ñ223  E A yguad  e N Copty A Duran J Hoe\003inger Y Lin F Massaioli E Su P Unnikrishnan and G Zhang A Proposal for Task Parallelism in OpenMP in Proceedings of the 3rd International Workshop on OpenMP  Beijing China June 2007  X T eruel X Martorell A Duran R Ferrer  and E A yguad  e Support for OpenMP Tasks in Nanos v4 in CAS Conference 2007  October 2007  E A yguad  e A Duran J Hoe\003inger F Massaioli and X Teruel An Experimental Evaluation of the New OpenMP Tasking Model in Proceedings of the 20th International Workshop on Languages and Compilers for Parallel Computing  October 2007  A Duran J Corbal  an and E Ayguad  e Evaluation of OpenMP Task Scheduling Strategies in Proceedings of the 4th International Workshop on OpenMP  2008  H L v an der Spek E M Bakk er  and H A W ijshof f Char acterizing the performance penalties induced by irregular code using pointer structures and indirection arrays on the intel core 2 architecture in Computing Frontiers 2009  May 2009  M Burtscher  P  Carribault M K ulkarni K Ping ali C Cascaval and C von Praun Lonestar benchmark suite http://iss.ices.utexas.edu/lonestar 2009  B Chamberlain J Feo J Le wis and D Mizell An Application Kernel Matrix for Studying the Productivity of Parallel Programming Languages in W3S Workshop 26th International Conference on Software Engineering  May 2004 pp 37ñ41  M C and A Rogers Softw are Caching and Computation Migration in Olden 1995  G Myers and S Selznick and Z Zhang and W  Miller Progressive Multiple Alignment with Constraints in RECOMB 97 Proceedings of the 002rst annual international conference on Computational molecular biology  New York NY USA 1997 pp 220ñ225  J Coole y and J T uk e y  An Algorithm for the Machine Calculation of Complex Fourier Series Mathematics of Computation  vol 19 pp 297ñ301 1965  S R Das and R M Fujimoto A Performance Study of the Cancelback Protocol for Time Warp SIGSIM Simul Dig  vol 23 no 1 pp 135ñ142 1993  S G Akl and N Santoro Optimal P arallel Mer ging and Sorting Without Memory Con\003icts IEEE Transactions on Computers  vol 36 no 11 pp 1367ñ1369 1987  A Duran J Corbal  an and E Ayguad  e An Adaptive Cut-off for Task Parallelism in Proceedings of the 2008 ACM/IEEE conference on Supercomputing  IEEE Press 2008  J Bal art A Duran M Gonz 036 alez X Martorell E Ayguad  e and J Labarta Nanos Mercurium a Research Compiler for OpenMP in Proceedings of the European Workshop on OpenMP 2004  October 2004 
131 
131 


