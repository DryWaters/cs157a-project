Intelligent Dynamic XML Documents Clustering   Laura Irina Rusu Dept of Comp Sc & Comp Eng LaTrobe University Australia 
 Wenny Rahayu Dept of Comp Sc Comp Eng LaTrobe University Australia 
 David.Taniar@infotech.monash.edu.au    Abstract Clustering as an intelligent technique for mining XML documents has been utilised as an excellent way of grouping the documents by their content or structure. A main step in many distance based XML clustering algorithms is to calculate pair-wise distances between documents; naturally a time-efficient technique requests the pair-wise distances to be determined in a timely manner.  In case of dynamic XML documents, the amount of changes between versions cannot be predicted. Therefore, in case of clustered dynamic XML documents, if changes were little or if they affected only some of the clustered documents, recalculating pair-wise distances every time would be highly redundant. In this paper we propose a time-efficient technique to reassess pairwise distances between clustered dynamic XML documents which change in time, without performing redundant calculations but considering the previously known distances and the set of changes which might have affected the documents versions   1. Introduction  With the spread of XML usage for data representation and exchange between applications [8  it  a l s o ca m e the request for intelligence in manipulating XML documents. XML mining algorithms aim to determine interesting knowledge \(patterns in data or structure association rules etc\ or to help in efficient information retrieval \(via clustering, classification etc From a database perspective, clustering as an intelligent data mining task tries to find dense regions in a data set, using some distance measurement, based on the assumption that data space is not uniformly occupied by data points   Research work has previously shown that the process of clustering XML documents can not just use the traditional clustering techniques. This is because i\ XML comes with a flexible way of storing the information, allowing the document to change depending on specific application requirements and \(ii an XML document combines the actual data with hierarchical relationships information between elements. Therefore, a number of XML-specific clustering techniques have been proposed [5   6    1 4     In an XML clustering approach, the distance between two documents implies the notion of documents similarity XML documents have specific structure and each XML node also carries a semantic meaning \(via its tag or name Therefore an XMLbased clustering solution can be seen as a set of XML documents grouped by their structural  semantic or structural and semantic similarity So far, the issue of clustering XML documents has been approached from two main directions \(detailed examples are given in the \223Related work\224 section a  clustering static XML documents - in this case the documents to be clustered are all known and available in advance, before running the clustering algorithm. The documents do not change therefore the pair-wise distances are calculated only once; the resulting clustering solution is static b  clustering series or streams of XML documents 226 in this case, the documents to be clustered are not known in advance; they become available one by one, and the algorithm recalculates the distance between each incoming new document and the existing clusters With the increased use of XML [9  w e h a v e  identified a third case, that is, when some \(or all\ of the already clustered XML documents change their structure or content in time, in order to reflect the dynamic of the application. Obviously, when the 
lirusu@students.latrobe.edu.au w.rahayu@latrobe.edu.au David Taniar Clayton School of Info. Tech Monash University Australia 
22nd International Conference on Advanced Information Networking and Applications 1550-445X/08 $25.00 © 2008 IEEE DOI 10.1109/AINA.2008.122 449 
22nd International Conference on Advanced Information Networking and Applications 1550-445X/08 $25.00 © 2008 IEEE DOI 10.1109/AINA.2008.122 449 


clustered documents change, the previous clustering composition might become obsolete if changes were so significant that the modified documents were reallocated to different clusters or if new clusters were formed In our previous work, we named this type of documents as dynamic XML documents; they inherently contain the notion of time, whereby at least one element indicates the temporal coverage of the specific version of the document  13   Techniques for incremental or online clustering have been already proposed for metric data, but in our opinion they are not directly applicable for dynamic XML documents. The topic of clustering dynamic multi-versioned\ XML documents has not been thoroughly researched so far: in a clustering solution which contains dynamic XML documents members the new document versions are not available beforehand, nor entirely new documents \(they only differ in a certain degree from their previous versions hence, none of the two types of existing XML-based approaches mentioned above \(clustering XML static or clustering XML series\ can be efficient for dynamic XML documents. This is because any of them would treat the new modified versions as completely new and different XML documents \226 in this case redundant calculations would be performed in order to recalculate the new similarity of each new version with the rest of the clustered documents In this paper we propose a novel and intelligent technique to reassess the new distances between clustered dynamic XML documents, not by running pair-wise full documents comparisons every time when documents change, but by directly assessing the effect of the historical changes on the previously known distances between documents   2. Related work  In this section we discuss some of the existing work in the area of clustering XML documents, stressing the fact that any of the existing work does not deal with efficiently reassessing clusters of dynamic XML documents. Two main directions of research can be noticed, in this regard: \(i Techniques for clustering static XML documents and \(ii Techniques for clustering series of XML documents  In [5  t h e  mo s t ty p ic al s t r u c tu r al c h a r ac te r is t ic s o f  a set of XML documents are subsumed in a \221XML cluster representative\222. The XML documents are seen as trees and the cluster representative is built in three steps: building optimal matching tree, building the merge tree and pruning the merge tree. The optimal matching tree is also called a \221lower-bound tree\222 and it is a tree in which any node deletions leads to a worsening of the total distance between each tree in cluster and its representative. Oppositely, the merge tree, also called \221upper-bound tree\222, is a tree in which a node insertion leads to a worsening of the abovementioned total distance. The authors argue that their proposal is efficient in building query plans on clustered documents, by comparing queries with cluster representatives\222 structures In [6  X M L d o cu m en t s ar e co n s i d e r ed t o b e  rooted, ordered and labelled trees and structural summaries are inferred from them, by nesting and repetition reduction. A \221tree edit distance\222 between each pair of structural summaries is calculated and the clustering phase is based on the \221structural distance\222 between structural summaries Starting from the fact that only 48% from the XML documents on the web are based on a schema [9 t h e  work in p r o po s e s t o m a ke us e  of  bo t h s t r uc t u ra l  and semantic information in schemaless XML noted mPaths\ from the analysed documents and finding similarity between them; each mPath is a three-tuple path sequence, attribute sequence, content sequence A different approach is introduced by w h e r e  each XML document to be clustered is \221broken\222 down into ePaths, which are sequences of nested elements with the most nested one being a simple content element. A two-dimensional bitmap index is built to detect the ePath contained in documents; then, a threedimensional bitmap index \(BitCube\ is built by adding the \221words\222 dimension to the previous two-dimensional index. Three types of operations can be applied on BitCube, that is, \221ePath slice\222, \221word slice\222 and 221document project\222. Also, because the BitCube can be very large and very sparse, a number of approaches are proposed in order to enable easy access to information in BitCube.A technique for clustering series of heterogeneous XML documents \(XCLS\ was proposed in [10   Th e a u th o r s co n s i d er s er i es  s tr eam s  o f X M L  documents and calculate the similarity between each incoming XML document and the existing clusters by using the concept of \223level structure\224. In this way similarity is determined at cluster level rather than pair-wise for individual documents in the clusters As mentioned in the previous section, both types of existing XML clustering techniques \(static and series do not respond well to the issue or clustering dynamic XML documents, because a dynamic XML documents cannot be classified as neither static nor as new document in series 
450 
450 


D 2  D 2 D 1  Property 1 Higher the similarity between two documents, smaller the distance between them Property 1 says that two documents are said to be identical \(that is, have maximum similarity\, when no operations are required to transform one into another; in other words, the distance between documents \(total cost of operations\ is 0 When one or more XML documents inside the clustering solution change \(some of the nodes are updated, deleted or inserted\he distance \(thus the similarity\ between the modified document and the rest of the documents changes as well. The number and type of changes affecting each modified document will certainly influence the new similarity between itself and the other documents in the clustering solution Consequently, after the changes are applied, each modified document can be in one of the following situations: it might be still contained by the cluster which initially contained it, it might be contained by a different cluster, it might form a cluster by itself or with other documents etc.; a new clustering solution composition can only be obtained after determining the new distances between all pairs of XML documents available We show in Figure 1 an overview of the identified problem. As it can be noticed, one straightforward option option A ould be to recalculate, after each set of changes, the distances between the XML documents by doing a full pairwise comparison of them    Clustering solution from XML documents before changes D 3  D 2  D 1     D 1   2 D  D 3  Set of XML documents after some have changed  Option A expensive  
 
D 1 and  D 2 in their tree representation, the distance between them 
212 NN  total number of weighted edges where, in order to obtain single link clusters of level L the edges with weight Lw 
d\(D 1 D 2  is given by the set of edit operations O insert, update, delete} with minimal total cost which can transform one document into the other, that is d\(D 1 D 2  d\(D 1 
002 002 
003 set of changes   Calculate pair-wise structural distances  Structural distances   Reassessed structural distances Clustering solution from XML documents after changes  Recalculate pair-wise structural distances  New structural distances O p tion B \226 our p ro p osal Set of XML documents before chan g es 
Figure 1 Overview of the proposed technique to reassess clustering solution composition   In this paper we propose an intelligent and timeefficient technique for reassessing the distances between clustered dynamic XML documents after they change, not by running full pair-wise comparisons but by calculating the effects of the changes on the previously known distances, that is on the distances before documents have changed  3. Proposed framework  Given C a clustering solution of a set of N XML documents, it can be visually represented as an initially fully connected graph, with 2/\1 
001 have been removed; the remaining connected components give the resulted clusters Dalamagas et al., 2004   If the clustering solution is based on the similarity between the XML documents, the weight of each edge which connects two documents represents the distance between them Definition 1 Given two XML documents 
451 
451 


004  D\222 the cost of delta between them \(noted cost 
This option would be very expensive from the operational point of view, because there is no distinction made between documents affected more or less by the set of changes; hence, in case of: \(i new versions of documents carrying only a small amount of changes or ii\ documents not modified at all, some \(or all\ operations involved in the full comparison of each pair of documents would be unnecessarily repeated The second option option B \226 our proposal s to make use of the already known distances between pairs of XML documents in the clustering composition before the changes and the set of temporal changes, and use them together to reassess the new modified distances. This option has two major advantages  
002 Y is the reversed operation 
003  records the changes of the document from one state to another It consists of a set of basic operations O update insert, delete} which, upon execution on the document in state D will return the document in state D\222  Definition 3 Given a dynamic document with two consecutive versions D and D\222 where D  003  D 
o  for any pair of XML documents, our proposal reassesses the new distance only if at least one of the documents was changed; oppositely option A would do a full comparison and would recalculate the distance even if none of the documents in the pair was modified o  for any pair of XML documents, our proposal acknowledges the fact that the modified documents are not entirely new documents, but versions of \223dynamic\224 ones, therefore there will always be a certain degree of similarity between the new and old versions Our proposal depicted in Figure 1 can be therefore split in two main steps   Step 1 Initial clustering run \(one-off, not repetitive\: \(1a\ run any distance based clustering algorithm for XML documents and determine the clusters; \(1b\ record the matrix of distances between all pairs of XML documents, together with the direction of minimum cost in each case \(see Definition1 The output of Step 1 is called the \223initial clustering solution\224 and forms the base for the first run of Step 2 Step 2 Reassessing clustering solution composition \(this is repeated after each set of changes or whenever an up-to-date clustering solution view is required\: \(2a\ get the set of changes between the initial clustering run and current timestamp; \(2b\ get the latest matrix of distances between pairs of XML documents; \(2c reassess each distance based on: previous distance, direction of minimum cost and set of changes The output of Step 2 is called the \223reassessed clustering solution\224 and forms the base for the next run of the iterative Step 2 Certainly, the most critical phase in the iterative Step 2 is reassessing the distances \(phase 2c\, based on the previous distances and set of changes. We present in the next section our proposed method to achieve this  4. Distance measurement  For the purpose of the technique presented in this paper, the term of XML document also called XMLdoc refers to a well-formed and valid XML document, which has unique identifiers attached to each node note that the method used to assign IDs to nodes is not critical\ and an attached  tree representation T  In case of dynamic \(multi-versioned\ XML documents, each new version is a new XMLDoc  obtained by modifying the previous version; this is done by applying a combination of insert  update  and delete operations to the document version nodes The sum of these operations is known as delta and this term is usually associated with the difference between two consecutive versions of an XML document Definition 2 Given a dynamic XML document in two states D and D\222 where D  
002 D\222 is the total cost of the operations O  update, insert, delete} listed in the delta In Definition 1 \(the distance between two different XML documents\nd Definition 3 \(the cost of delta between two versions of the same XML document the cost of each operation O update insert, delete} depends on the position of the node affected by the operation O  that is, a leaf node would be cheaper to insert \(or update, or delete compared to a node which has one or more levels of children nodes Definition 4 Given two XML documents in two states D and D\222 and given an operation O{insert update, delete} which, upon its application on the document in state D returns the document in state D\222 then the reversed operation  O rev  is the operation which, upon its application would on the document in state D\222 returns the document in state D  For example insert  X is the reversed operation corresponding to operation delete  X and update  X 
004  D\222 a generic XMLdelta document \(noted 
452 
452 


   
corresponding to operation update  Y 
1 D 1 D 1 222    2 D 2 D 2 222  
005 003 003 006 003 
d\222\(D 1 222 D 2  d\(D 1 D 2  D 1 D 1 222  d\(D1,D2 D1,D1\222 In other words the shared set of operations which contributed to the minimum distance between D 1 and D 2 and also to transforming D 1 into new version D 1 222 need to be deducted when calculating the distance between D 1 222 and D 2 as they have equal effect, whereas only the distinct operations need to be counted We give in Figure 2 an example of the situation defined by Definition 5a A B C D E F G  C D E H A Document 1 D  Document 2 D  B A B C D E H G  Version  1 D    d \(D 1 D 2 delete G, delete F, insert H D 2 D 2 222   O i O i rev  where O i are the p operations from d \(D 1 D 2  which have corresponding reversed operations O i rev  in D 2 D 2 222  1 O i O i rev  where O i are q remaining operations from d\(D 1 D 2   after removing repeated operations from 
002 X etc X, Y  and Z are nodes in an XML document We can now define the new distance between two XML documents where at least one of them has changed Definition 5a Given a pair of XML documents D 1 and D 2 within a clustering solution C with d\(D 1 D 2  the distance between them and D 1 D 2  the direction of minimum cost, if a set of changes 002 D 2  the direction of minimum cost, if a set of changes 002 D 2 the direction of minimum cost, if a set of changes 
 p i 1  q i 1 
d 222 D 1 D 2 222  D 1 D 2  d 222 D 1 222 D 2 222  d\(D 1 D 2  1 D 1 D 1 222  d\(D 1 D 2  
003  transformed D 1 into a new version D 1 222  then the new distance d\222 between D 1 222 and D 2 could be defined as follows 006 003 D 1 D 1 222\={delete F insert H d\222\(D 1 222,D 2 delete G  003 transformed D 2 into a new version D 2 222 then the new distance d\222  between D 1 and D 2 222 could be defined as follows 003 003 007  i  003 D 2 D 2 222 insert F, insert G d\222\(D 1 D 2 222\={insert H   003 1  transformed D 1  into a new version D 1 222 and a set of changes 003 2 transformed D 2  into a new version D 2 222  then the new distance  d\222 between D 1 222 and D 2 222 could be defined as follows 003 003 1 which have corresponding reversed operations O i rev in 003 2 D 2 D 2 222 222 1 007  i  
Figure 2. New distance between two XML documents where the left document changes  Definition 5b Given a pair of XML documents D 1  and D 2 within a clustering solution C with d\(D 1 D 2   the distance between them and D 1 Figure 3. New distance between two XML documents where the right document changes Definition 5c Given a pair of XML documents D 1 and D 2 within a clustering solution C, with d\(D 1 D 2  the distance between them and D 1 
005\003 
007  p  In other wor ds, the set of operations which contributed to the minimum distance between D 1  and D 2 and were subsequently reversed during D 2  transformation into D 2 222 need to be deducted when calculating the distance between D 1  and D 2 222 as their combined effect is null, whereas only the distinct unreversed operations need to be counted We give in Figure 3 an example of the situation defined by Definition 5b  A B C D EF G C D E H A Document 1 D  Document 2 D  B  A B C D E H G Version  2 D   F  d \(D 1 D 2 delete G, delete F, insert H 007  q  In other wor ds, when both D 1 and D 2 have changed into versions D 1 222 and respectively D 2 222 the logic from both Definition 5a and Definition 5b is 
453 
453 


254\t 
End if 
d\222\(D 1 222,D 2 222 
3 
22 
 
n 
5 
16 
j i n\222 Phase 1 \226 reassessing distances 1 d\(D i D j  repeat_op_cost repeat_op_cost + 2 cost\(O i  D i D i 222 repeat_op_cost 10 11 D j 222 and D i 222 13 d\(D i D j  D j D j 222 15 reversed_op_cost d\222\(D i D j 222\=d\(D i D j  cost D j 222 21 d\(D i D j  D i D i 222 23. repeat_op_cost reversed_op_cost d\222\(D i 222,D j 222\=d\(D i D j  cost D i D i 222\\cost 31 d\222\(D i 222,D j 222\=d\(D i D j  32 L 
Cluster solution C={C 1 C 2 205C n  where C k D k 1 D k 2 205D k n D k j dynamic XML document members,  1 D i 222 and O i  D i D i 222 reversed_op_cost D j D j 222 D i 222 and D j 222 and 
 If  Next then 
For each 
New cluster solution C\222={C 1 222 C 2 222 205C n 222 1 
0  reversed_op_cost cost\(O i cost\(O i rev   repeat_op_cost + 2 cost\(O i  
 d\(D i D j cost 
D j 222 36 
Reassess_Clusters 
n k cluster level L C, D i  D j  2 0 4 O i  9. d\222\(D i 222,D j  226 reversed_op_cost D j D j 222 D j D j 222 repeat_op_cost-reversed_op_cost 29 D i 222 
8 
applicable; the new distance d 222 D 1 222 D 2 222 222  can be assessed in two steps: first add the costs of d and 
7  
24 
If  If  End if If End if 
 
26 
End if If  For each then For each then  Next 
254\t 254\t 
27 
 
19 
 reversed_op_cost cost\(O i st\(O i rev  
004 004 
  then then  Next For each 
b b b 003 n b b 003 b b 003 b 003 
002 D 2 the direction of minimum cost, if D 1 and D 2 do not change, then the new distance  d\222 is the same with the old distance d that is 
Algorithm Input then  then      then  
Output If        then 
O i  
 D i D j  repeat_op_cost 6 O i  O i rev  O i  18 20 O i  O i  O i rev  28 O i 30 33 D i D j  Phase 2 \226 new structure of level L clusters 34. Build n\(n-1\2 edges graph  35 D i 222,D j 222, D i 222  A B C D E F G  C D E H A Document 1 D  Document 2 D  B A B C D E H G Version  2 D   F A B C D E H G Version  1 D   d \(D 1 D 2 delete G, delete F, insert H 
17 25 
14 
d\222\(D 1 D 2  D 1 D 2   5. Clustering algorithm  The algorithm in Figure 5 makes use of the proposed formulas for recalculating the new distances as defined in Section 4. We use the single link clustering algorithm and stoping-rule C index as implemented in [6  b a s e d o n  4   G iv e n  n XML documents, we form a graph where the weight of each edge represents the distance between two documents. The single link clusters for clustering level L are obtained by removing the edges with weight L Note that our proposal can work with any other distance-based clustering algorithm  _____________________________ 
  If  End if  Next   End if  If If 
003 1  and eliminate the operations which are repeated in both d and 003 1 if any\, and then eliminate from the remaining operations those which are reversed in 003 2  if any We give in Figure 4 an example of this situation when both documents change   007 007 007 007 t 254 n n n 003 t 003 t t n n 003 003 001 003 D 1 D 1 222\= {delete F insert H 003 D 2 D 2 222 insert F insert G d\222\(D 1 222  D 2 222   insert F 
12 
D j 222 
End if 
Figure 4. New distance between two XML documents where both documents change Definition 5d Given a pair of XML documents D 1  and D 2 within a clustering solution C with d\(D 1  D 2  the distance between them and D 1 
    
For each  End if 
454 
454 


D j 222 38 
Return 
Figure 5 Algorithm for reassessing clusters composition for dynamic XML documents  6. Experimental results  To test our proposed method we used XML documents \(20kB and 50kB\xtracted from the   with an average number of levels of 4 Firstly, we clustered the documents to get the initial clusters composition \(Step 1 in framework in Section 3\, using minimum pair-wise distances; at this stage we also stored the distances between documents in the clustering solution together with the set of operations corresponding to each minimum distance. Then, in order to assess the efficiency of Step 2, we applied different percentages of changes to the documents in the clustered solution, in order to obtain new versions The purpose of the tests was to compare, after each set of changes, the time required to reassess the distance between documents using the same method as for the initial clustering \(i.e. full pair-wise comparison of the XML documents\ to the time of reassessing each distance using the method proposed in this paper and formulas in Definitions 5a, 5b and 5c  Figure 6 Test results for 50kB doc \(part 1  We show in Figures 6, 7, 8 and 9 some of the obtained results. They demonstrate clearly that our proposed technique to reassess the distances in dynamic XML clusters is much faster than performing a full pair-wise comparison on all new versions of the clustered documents. This can be explained by our technique: \(i\rforming only a minimum number of calculations and \(b\ reassessing distances only for those pairs of XML documents where at least one of them has changed Figure 8 Test results for 20kB doc \(part 1    Figure 9 Test results for 20kB doc \(part 2   Also, from Figures 6, 7, 8 and 9 it can be noticed that the difference between the full pair-wise and our proposed technique is more evident for higher number of documents modified or for higher percentages of changes applied                  V arious number of medium-sized documents \(50kB affected by 10% changes 0 20 40 60 80 100 51020 number of documents time\(second s    pair-w ise f ull comparison   proposed reassessing technique                50 small-sized documents \(20kB\ affected by various percentages of changes 0 50 100 150 10 20 50 percentage of change time\(second s    pair-w ise f ull comparison   proposed reassessing technique                  20 medium-sized documents \(50kB\ affected by various percentages of changes 0 50 100 150 3 5 10 25 percentage of change time\(second s    pair-w ise f ull comparison   proposed reassessing technique              V ar ious number of small documents \(20kB\ affected by 15% changes 0 10 20 30 40 50 60 51020 number of documents time\(second s    pair-w ise f ull comparison   proposed reassessing technique  
End if 
002 
37 prune edge D i 222 C\222={C 1 222,C 2 222,\205C n\222 222  ______________________________  
 Figure 7 Test results for 50kB doc \(part 2   
39 D i 222,D j 222 40 
 
Next 
455 
455 


 7. Conclusions  In this paper we have proposed an intelligent and efficient technique to reassess the distances between dynamic XML documents when one or all of the initially clustered documents have changed. After the changes, the initial clustering solution might become obsolete - the distances between clustered XML documents might have changed more or less depending on the degree of modifications \(insert update, delete\hich have been applied. Re-running full pair-wise comparisons on the entire set of modified documents is not a viable option, because of the large number of redundant operations involved Our proposed technique allows the user to reassess the pair-wise XML document distances, not by fully comparing each new pair of versions in the clustering solution, but by determining the effect of the temporal changes on the previously known distances between them. This approach is both time and I/O effective, as the number of operations involved in distance reassessing is greatly reduced  References  1  Beringer, J. and H\374llermeier, E., Online clustering of parallel data streams Data and Knowledge Engineering 58\(2\,  2006, 180-204 2  Catania, B. and Maddalena A., A Clustering Approach for XML Linked Documents, Proceedings of the 13th International Workshop on Database and Expert Systems Applications \(DEXA\22202\, IEEE 2002 3  Chen, M.S., Han, J. and Yu, P., Data Mining: An Overview from Database Perspective, IEEE Transactions on Knowledge and Data Engineering vol. 8, 1996, 866-883 4  Cormen, T., Leiserson, C. and Rivest, R Introduction to algorithms, MIT Press, 1990 5  Costa, G., Manco, G., Ortale, R. and Tagarelli, A., A tree-based Approach to Clustering XML documents by Structure, PAKDD 2004, LNAI 3202, 137-148 Springer 2004 6  Dalamagas, T., Cheng, T., Winkel, K.J. and Sellis, T 2004, Clustering XML documents by Structure SETN 2004, LNAI 3025, 112-121, Springer 2004 7  Ester, M., Kriegel, H.P., Sander, J., Wimmer,M. and Xu, X., Incremental Clustering for Mining in a Data Warehousing Environment, Proc.of the 24 th VLDB Conference, New York, USA, 1998 8  Garofalakis, M., Rastogi, R., Seshadri, S. And Shim K., Data Mining and the Web: Past, Present and Future Proceedings of WIDM 99 Kansas, US, ACM 1999 9  Mignet, L., Barbosa, D. and Veltri, P., The XML web : a first study, In Proceedings of the 12 th  International Conference on WWW, 500-510 2003   Nayak, R., Xu, S., XCLS: A Fast and Effective Clustering Algorithm for Heterogeneous XML Documents, In Proceedings of the 10 th Pacific-Asia Conference on Advances in Knowledge Discovery and Data Mining, Singapore, LNCS 3918, 2006   Rusu, L.I., Rahayu, W. and Taniar, D., A methodology for Building XML Data Warehouses International Journal of Data warehousing Mining, 1\(2 67-92, 2005   Rusu, L.I., Rahayu, W. and Taniar D.,  Maintaining Versions of Dynamic XML Documents, In Proceedings of the 6th International Conference on Web Information Systems Engineering, New York NY, USA, November 20-22, 2005, LNCS 3806   Rusu, L.I., Rahayu, W. and Taniar, D., Warehousing Dynamic XML Documents, In Proceedings of the 8 th  International Conference on Data Warehousing and Knowledge Discovery \(DaWaK 2006 LNCS 4081 Springer, 175-184, 2006   Shen, Y. and Wang, B., Clustering Schemaless XML documents, CoopIS / DOA/ODBASE 2003, LNCS 2888, 767-784, Springer 2003   Yoon, J. P., Raghavan, V., Chakilam, V., and Kerschberg, L., BitCube: A Three-Dimensional Bitmap Indexing for XML Documents J. Intel. Inf Syst 17, 2-3 \(Dec. 2001\, 241-254   XML data repository, online at http www.cs.washington.edu / research / projects / xmltk xmldata  
456 
456 


5 Related Work There exists extensive previous work on both the mining of software repositories and on the use of clustering algorithms in software engineering This discussion focuses on the most similar and recent work in the area of software evolution Mining Software Repositories Our technique was partially inspired by the work of Zimmermann et al and Y ing et al 17 on the mining of association rules in change history As described in Section 1 we sought to expand the technique to be able to recommend larger but less precise clusters of elements to guide program navigation Bouktif et al also investigated how to recommend cochanges in software development As opposed to the work cited above Bouktif et al used change patterns instead of association rules Also their approach does not attempt to reconstruct transactions and can consider associated 002les that were changed in different transactions ChangeDistiller is a tool to classify changes in a transaction into 002ne-grained operations e.g addition of a method declaration and determines how strongly the change impacts other source code entities Our approach uses similar repository analysis techniques but is focused on providing task-related information as opposed to an overall assessment of a system's evolution Finally repository mining can also be used to detect aspects in the code In this conte xt aspects are recurring sets of changed elements that exhibit a regular structure Aspects differ from the clusters we detect in the regular structure they exhibit which may not necessarily align with the code that is investigated as part of change tasks Clustering Analysis The classical application of clustering for reverse engineering involves grouping software entities based on an analysis of various relations between pairs of entities of a given version of the system Despite its long and rich history  e xperimentation with this approach continues to this day For example Andreopoulos et al combined static and dynamic information K uhn et al used a te xtual similarity measure as the clustering relation and Christl et al used clustering to assist iterative semi-automated reverse engineering The main dif ferences b e tween most clusteringbased reverse engineering techniques and the subject of our investigation is that the entities we cluster are transactions rather than software entities in a single version of a system For this reason our analysis is based strictly on the evolving parts of the system Both Kothari et al and V an ya et al 15 recently reported on their use of clustering to study the evolution of software systems The idea of using change clusters is the same in both works and ours but the purpose of the work is different Kothari et al use change clusters to uncover the types of changes that happened e.g feature addition maintenance etc during the history of a software system Vanya et al use change clusters which they call evolutionary clusters to guide the partitioning of a system that would increase the likelihood that the parts of the system would evolve independently In contrast we cluster transactions based on overlapping elements not 002les to recommend clusters to support program navigation as opposed to architectural-level assessment of the system Finally Hassan and Holt evaluated on 002ve open source systems the performance of several methods to indicate elements that should be modi\002ed together This study found that using historical co-change information as opposed to using simple static analysis or code layout offered the best results in terms of recall and precision The authors then tried to improve the results using 002ltering heuristics and found that keeping only the most frequently cochanged entities yielded the best results As opposed to our approach the evaluated 002ltering heuristics were only applied on entities recovered using association rules and not using clustering techniques The focus of their study was also more speci\002c as they recommend program elements that were strictly changed  as opposed to recommending elements that might be inspected by developers 6 Conclusion Developers often need to discover code that has been navigated in the past We investigated to what extent we can bene\002t from change clusters to guide program navigation We de\002ned change clusters as groups of elements that were part of transactions or change sets that had elements in common Our analysis of close to 12 years of software change data for a total of seven different open-source systems revealed that less than 12 of the changes we studied could have bene\002ted from change clusters We conclude that further efforts should thus focus on maximizing the quality of the match between the current task and past transactions rather than 002nding many potential matches Our study has already helped us in this goal by providing reliable evidence of the effectiveness of some 002ltering heuristics and useful insights for the development of additional heuristics Acknowledgments The authors thank Emily Hill and Jos  e Correa for their advice on the statistical tests and the anonymous reviewers for their helpful suggestions This work was supported by NSERC 
25 
25 
25 
25 
25 


References  B Andreopoulos A An V  Tzerpos and X W ang Multiple layer clustering of large software systems In Proc 12th Working Conf on Reverse Engineering  pages 7988 2005  S Bouktif Y G Gu  eh  eneuc and G Antoniol Extracting change-patterns from cvs repositories In Proc 13th Working Conf on Reverse Engineering  pages 221230 2006  S Breu and T  Zimmermann Mining aspects from v ersion history In Proc 21st IEEE/ACM Int'l Conf on Automated Software Engineering  pages 221230 2006  A Christl R K oschk e and M.-A Store y  Equipping the re\003exion method with automated clustering In Proc 12th Working Conf on Reverse Engineering  pages 8998 2005  D 020 Cubrani  c G C Murphy J Singer and K S Booth Hipikat A project memory for software development IEEE Transactions on Software Engineering  31\(6 465 2005  B Fluri and H C Gall Classifyi ng change types for qualifying change couplings In Proc 14th IEEE Int'l Conf on Program Comprehension  pages 3545 2006  A E Hassan and R C Holt Replaying de v elopment history to assess the effectiveness of change propagation tools Empirical Software Engineering  11\(3 2006  D H Hutchens and V  R Basili System s tructure analysis Clustering with data bindings IEEE Transactions on Software Engineering  11\(8 1985  D Janzen and K De V older Na vig ating and querying code without getting lost In Proc 2nd Int'l Conf on AspectOriented Software Development  pages 178187 2003  J K ot hari T  Denton A Shok ouf andeh S Mancoridis and A E Hassan Studying the evolution of software systems using change clusters In Proc 14th IEEE Int'l Conf on Program Comprehension  pages 4655 2006  A K uhn S Ducasse and T  G  021rba Enriching reverse engineering with semantic clustering In Proc 12th Working Conf on Reverse Engineering  pages 133142 2005  M P  Robillard T opology analysis of softw are dependencies ACM Transactions on Software Engineering and Methodology  2008 To appear  M P  Robillard and P  Mangg ala Reusing program in v estigation knowledge for code understanding In Proc 16th IEEE Int'l Conf on Program Comprehension  pages 202 211 2008  J Sillito G Murph y  and K De V older Questions programmers ask during software evolution tasks In Proc 14th ACM SIGSOFT Int'l Symposium on the Foundations of Software Engineering  pages 2334 2006  A V an ya L Ho\003and S Klusener  P  v an de Laar and H van Vliet Assessing software archives with evolutionary clusters In Proc 16th IEEE Int'l Conf on Program Comprehension  pages 192201 2008  N W ilde and M C Scully  Softw are reconnaissance Mapping program features to code Software Maintenance Research and Practice  7:4962 1995  A T  Y ing G C Murph y  R Ng and M C Chu-Carroll Predicting source code changes by mining change history IEEE Transactions on Software Engineering  30\(9 586 2004  A Zeller  The future of programming en vironments Integration synergy and assistance In Proceedings of the 29th International Conference on Software Engineering The Future of Software Engineering  pages 316325 2007  T  Zimmermann and P  W eißgerber  Preprocessing C VS data for 002ne-grained analysis In Proc 1st Int'l Workshop on Mining Software Repositories  pages 26 May 2004  T  Zimmermann P  W eißgerber  S Diehl and A Zeller  Mining version histories to guide software changes In Proc 26th ACM/IEEE Int'l Conf on Software Engineering  pages 563572 2004 A Clustering Algorithm This algorithm is not sensitive to whether a given program element exists or not in a given version of a program For example if method m exists in one version it is considered a valid program element even if it is removed in a later version In the rest of this section we use the term program element to refer to the uniquely identifying representation of the element e.g a Java fully-quali\002ed name Let T be a transaction modeled as a set of program elements changed together during the history of a software system Let T be a sequence of transactions In this algorithm a cluster is also modeled as a set of elements 1 Input  T  A sequence of transactions 2 Parameter  M IN O VERLAP  A positive non-zero value indicating the minimum overlap between two transactions in a cluster 3 Var  C  A set of clusters initially empty 4 for all T i 2 T do 5 MaxOverlap  0 6 MaxIndex  000 1 7 for all C j 2 C do 8 if j C j  T i j  MaxOverlap then 9 MaxOverlap  j C j  T i j 10 MaxIndex  j 11 end if 12 end for 13 if MaxIndex   0  MaxOverlap 025 M IN O VERLAP  then 14 C MaxIndex   C MaxIndex  T i  15 else 16 NewCluster  T i 17 C  C  f NewCluster g 18 end if 19 end for 20 return C B Systems Analyzed System home pages last veri\002ed 7 May 2008 Ant ant.apache.org Azureus azureus.sourceforge.net Hibernate www.hibernate.org JDT-Core www.eclipse.org/jdt/core JDT-UI www.eclipse.org/jdt/ui Spring springframework.org Xerces xerces.apache.org 
26 
26 
26 
26 
26 


