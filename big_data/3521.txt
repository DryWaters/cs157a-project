A Distributed and Mobile Data Mining System Frank Wang and Nu Helian Department of Computing London Metropolitan University 166-220 Holloway Road, London N7 SDB United Kingdom E-mail f.wana@londonmet.ac.uk Eke Guo Department of Computing, Imperial College University of London 180 Queen\222s Gate, London SW7 2BZ United Kingdom Hai Jin College of Computing Huazhong University of Science and Technology Wuhan 430074,P. R China   Abstract-Most of the popular data mining algorithms are designed to work for centralized data and they 
often do not pay attention to the resource constraints of distributed and mobile environments In support of the third generation of data mining systems on distributed and massive data we proposed an efficient distributed and mobile algorithm for global association rule mining which does not need to ship all of local data to one site thereby not causing exc\221essive network communication cost The algorithm is implemented in PUSQL for coupling association rule mining with relational database system well-used in organizations and communities The experiments show that this algorithm implemented in PUSQL beats classic Apriori algorithm for large problem sizes by factors ranging from 
2 to more than 20, and this gap grows wider when the volume of transactions further grows up Keywords distributed data mining mobile data mining PUSQL Oracle cursor relational database Heterogeneous Services agent, communication overhead I Introduction With the explosion of the commodity internet and the emergence of wide area high performance networks mining distributed data is becoming recognized as a fundamental scientific challenge The Internet corporate intranets sensor networks and even scientific computing domains support this We are also witnessing increasing demands on 
mobile computing to provide the types of support required by a growing number of mobile workers Such individuals require working as if in the office but in reality they are working from remote location including homes clients\222 premises or simply while en route to remote locations The 223office\224 may accompany a remote worker in the form of laptops palmtops handhelds embedded systems and wearable computers or other Internet access device. With the rapid expansion of cellular wireless and satellite communications it will soon he possible for mobile users to access any data anywhere at any time 
Advanced analysis of distributed data for extracting useful knowledge is the next natural step in the increasingly connected world of ubiquitous distributed and mobile computing 11 Algorithm Most of the popular data mining algorithms are designed to work for centralized data and they often do not pay attention to the resource constraints of distributed and mobile environments In support of the third generation of data mining systems on distributed and massive data we proposed an efficient distributed and mobile for global association rule mining which does not need to 
ship all of data to one site thereby not causing excessive network communication cost In this algorithm the contribution from each transaction is comprehensively taken into account by growing a prefix tree for each transaction and enumerating all subsets of the transaction itemset There is no need at all to store and re-scan the previously-scanned transactions which will be discarded after a single pass[2 The algorithm is implemented in PUSQL for coupling association rule mining with relational database system well-used in organizations and communities In each site attributing to the integrity of the data structure 
designed in this algorithm the locally enumerated itemset counters can be stored in a pair of local relational tables The power of generating ad hoc queries in PUSQL ensures fast access to any desired counter The local absolute support count for each enumerated itemset is first found The global absolute support count for each itemset can then be determined by summing up for each enumerated itemset the local support of that itemset in all the distributed sites In Architecture A distributed data mining system consists of a single 
logical database that is split into a number of fragments as shown in Fig.1 Each fragment is stored on one or more computers under the control of a separate DBMS with the computers connected by a communication network wiredly and wirelessly Each site is capable of independently processing user requests that require access to local data that is each site has some degree of local autonomy and is also capable of processing data stored on other computers in the network 0 0-7803-7840-7/03/$17.00 02003 IEEE 916 


Figure 1 The architecture for a distributed and mobile data mining system In this system the data mining DM algorithm have been encapsulated into SQL Server stored prccedures As shown in Fig.1 with mobile database users have access to corporate data on their laptop PDA or other Internet access device that is required for applications at remote sites Depending on the particular requirements of mobile applications in some cases the user of a mobile device may log on to a corporate database server and work with data there, while in others the user may download data and work with it on a mobile device or upload data captured at the remote site to the corporate database Our preliminary results indicate that OUT PUSQL implementation of our distributed ScanOnce algorithm is much faster than Apriori mining 3 As shown in Figure 1 three desktop computers one laptop computer and one pocket computer were used in the experiments The desktop computers were Intel Pentium machine with Windows 2000 Advanced Server operating system and Oracle9i enterprise edition The desktop computers were connected by the 10 Mbps MAN Network The laptop computer and pocket computer roaming across the North Campus and City Campus of the London Metropolitan University were used as mobile database platforms Both of these computers were equipped with Wireless LAN cards 11 Mbps The laptop 1.1 MHz CPU 512MB RAM was loaded with Oracle9i enterprise edition and Microsoft Access XP whereas the pocket computer Compaq iPAQ Pocket PC H3970 Windows CE 2.0 400 MHz CPU 64 hlB RAM 288MB Flash ROM was loaded with Wireless Database 4.0 KelBran Software  Wueless Database supports a subset of the standard database SQL language This feature allows us to access large databases up to 1GB data remotely and create our own query for distributed data mining with the SQL query wizard as illusQated in Figure 2 IV Experimental Tests The experiments were conducted on a synthetic database generated using the procedure described in 5-6 In this data set the maximum transaction size and average transaction size are set to 20 and 10 respectively The number of transactions in a single site ranges from 200,000 to 5 millions which occupies up to 450 MB space The experiments compared total mining time of distributed mining Move Result versus centralized mining Move Data For completeness we included the mining time on the mobile platform see Fig.1 for reference The total mining time is the time it takes to transfer any data communication build/transfer models and score the validation set back at the control workstation Our preliminary results indicate that OUT PUSQL implementation of our distributed ScanGnce algorithm is much faster than Apriori mining Furthermore distributed ScanOnce scales much better than Apriori This is mainly because the wasteful operations of unnecessarily rescanning those previously-scanned subsets have been avoided by this new algorithm It must be cautioned that error rates for distributed mining might be highly dependant on the organization of the data set and/or other factors More extensive tests are currently under way The experiments show that this Dismbuted ScanOnce algorithm in PUSQL beats classic Apriwi algorithm which requires repeated scans of the databases thereby shipping all of the data to one site and consequently causing excessive network communication overhead for large problem sizes by factors ranging from 2 to more than 20 917 


Acknowledgement The authors thank Mr Kamran Raza Mr Kashif Munir Mr Muhammad Azizur Rahman Mr Kevin Yang Dr Na Helian and Prof Algirdas Pakstas from London Metropolitan University Dr Jian'an Luan from Cambridge University Dr Yongqing Ma from Oxford University for their technical support in experiments Figure 2 The roaming pocket computer was used as mobile database platform References I S Bailey R Grossman H Sivakumar A Turinsky Papyrus a system for data mining over local and wide aea clusters and super-clusters Proceedings of the 1999 ACWEEE conference on Supercomputing CDROM p.63-es November 14-19, 1999 Portland, Oregon, United States 2 F Wang and N Helian Scanning Once a Large Database to Mine Association Rules By Growing A Refix Tree for Each Transaction The International Conference on Information and Knowledge Engineering IKE'03 June 23  26,2003  Las Vegas Nevada USA accepted 3 Agrawal R Imielienski T and Swami A 1993 Mining Association Rules between Sets of Items in Large Databases In Roc Conf on Management of Data New York ACM Press pp 207-216 4 http:/ikelbran.com 5 Agrawal R Imielienski T and Swami A Mining Association Rules between Sets of Items in Large Databases In Roc Conf on Management of Data 207-216 New York ACM Press 1993 6 Agrawal, A.,Mannila H Srikant R Toivonen H and Verkamo A 1996 Discovery of Association Rules In Fayyad et al 1996 307-328 9 18 


3.3 Average number of MI local links The number of MI local links in a route in SCC can be calculated as follows Consider routing from i T to the identity node io TO and let the number of r-cycles of length at least 2 in T be c Let Ci  io  I be one of these r-cycles and let Ri be an execution sequence for Ci Eq 2 Moving between two consecutive lateral links i ib in Ri requires d\(i ib MI local links where lo d\(ia1ib  min\(li  ib1,n  1  li  ibl 7 The total number of MI local links that must be tra versed during the execution of C denoted by MI\(loc Ci is therefore the sum of the distances d\(i ib between all pairs of consecutive lateral links i ib in Ri Lemma 1 The number of MI local links that must be tra versed in a route between any two nodes of SCC is inde pendent of the order chosen to execute the r-cycles existing between those nodes Proof We first show that MI\(loc Ci does not depend on the sequence of lateral links Ri chosen to execute C If io  1 there is only one such sequence Eq 2 If io  1 there are r different possible sequences Eq 3 However due to the cyclic nature of these sequences they all have the same cost MI\(loc Cz Eq 8 By extension, the total number of MI local links in the route MI\(loc must also be an invariant 0 An immediate consequence of Lemma 1 is that the num ber of MI local links between two nodes of SCC can be derived without further considerations about routing As suming of course that routing is accomplished in adherence to Eqs 2 and 3 as is the case with all routing algorithms presented in this paper As an example, consider an r-cycle C  2 6 4 and let n  7 C can be executed with a sequence of lateral links R  2,6,4,2 The number of MI local links required in the execution of this sequence is MI\(loc C  d\(2,6  d\(6,4  d\(4,2  2  2  2  6 Theorem 1 The average number of MI local links that must be traversed in a route in SCC is Proof The average number of local links that must be traversed between two adjacent lateral links is The average number of local links that must be traversed in the execution of an r-cycle Ci  io   I is MI\(lOC,Ci   d\(1oc r  2 if io  1 if io  1 11  d\(1oc  r Over all n possible permutations of n symbols and for each integer T 2 5 r 5 n there is a total of n  l r-cycles that include symbol 1 io  1 and n!/r  n  l r-cycles that do not include symbol 1 io  1 The average number of MI local links over all n permutations is therefore 3.4 Average number of MB local links Recall that MB local links are needed to move between execution sequences of adjacent r-cycles 2 5 r 5 n to move into the first lateral link and to move out of the last lateral link in a route in SCCn Theorem 2 The average number of MB local links that must be traversed in a route in SCC under a random ordering of r-cycles is H,\(n  1  2 n2  3n  2 MB\(loc rand  Proof Over all n possible permutations of n symbols and for each integer r 2 5 r 5 n there is a total of n!/r r-cycles The total number of r-cycles of length at least 2 in the n Dossible Dermutations of n svmbols is. therefore N  x:=2\(n!/rj  n  H  1 I The average number of r-cycles 2 5 r 5 n in a per mutation of n symbols is F  N,/n  H  1 The average number-of MB local links that must be traversed between these r-cycles is MB\(loc mid  T-l doc  n-2 Let il n be the source node and the first lateral link in the route be ik 2 5 ik 5 n The average number of local links that must be traversed between i n and ik T   is d\(in   1 Cy=2 d\(i 2  k1 1W n-1 n-1  I   A  Note that d\(in differs from d\(loc Eq lo since to compute d\(in we must consider the case i  ik Simi larly, the average number of local links that must be tra versed between the last laterallinkin the route and the destination node is d\(out  d\(in Then the average number of MB local links that must be traversed in a route in SCC assuming a random ordering of r-cycles  446 


is MB\(loc rand  d\(in  MB\(loc mid  d\(out The theorem follows 0 As described in Sec 4 a properly designed routing algo rithm can optimize the ordering of the r-cycles and reduce the average number of MB local links further below the value provided by a random ordering of r-cycles \(Eq 12 The average number of MB local links considering that the shortest route between any two nodes of an SCC graph is determined by a minimal routing algorithm is therefore bounded by MB\(doc 5 MB\(loc rand 13 3.5. Average distance in the SCC graph Theorem 3 The average distance of SCCn is bounded by 2 n SCCn n  Hn   4  J LqJ   H  2 14 Proof Follows directly from Eqs 5 6 9 12 and 13 0 4 Routing algorithms in the SCC graph 4.1 Ordering of r-cycles Routing between two nodes is ws and id Td in SCCn is equivalent to routing from is nd to id no where rids  nil  ws TO  123  n and T;\222 is the inverse or reciprocal of permutation Td  1 IO Let P\(t1 t e denote a route from from is s to id Td in SCC  which traverses a sequence of f lateral links R\(l1 I tf  l1    tj The total cost of P\(el H e is given with IP\(t1 Ht,>l  f d\(i,,el t~,tj+l d\(ff  id 15 Depending on the order chosen to execute the r-cycles in Td different routes P\(!l w e are produced As explained in Sec. 3 a common feature to any of these routes is that they all have the same number of lateral links aut and MI local links MI\(loc Finding the shortest route from is w to id ad is therefore a matter of choosing an r-cycle ordering which minimizes the number of MB local links MB\(Zoc A routing algorithm which achieves this goal is given in Subsec 4.4 Non-minimal but simpler routing algorithms are presented in Subsecs 4.2 and 4.3 To illustrate the different cost components in a route and how they are affected by the order chosen to exe cute the r-cycles assume routing from node 3,34125 to node 2,12345 in SCC A route along the sequence R\(2 H 3  2,4,2,3 contains four lateral links four MI local links and three MB local links i.e IP\(2 I 3  4  4  3  11 However if the sequence of lateral links R\(3 H 2  3,2,4,2 is used a route with four lateral links four MI local links and one MB local link results i.e IP\(3 H 2  4  4  1  9 In some cases the number of MB local links in a route from is w to id d can be further reduced by inter leaving rather than executing separately\the r-cycles in rd For example some possible sequences of lateral links from supernode rds  23154  1 2 3 4 5 to supernode TO  12345 in SCC5 are 2 3 4 5 4 2 3 5 4 5 4,5,4,2 31 5,4,5,2,3\\(2,4,5,4,3 and 2,5,4,5,3 The last two of these sequences interleave r-cycles 1 2 3 and 4 5 All of the routing algorithms presented in this paper account for the possibility of interleaving r-cycles 4.2 Random routing algorithm A simple routing algorithm for SCC consists of choos ing a random order to execute the r-cycles in rds Particu larly a possible algorithm that can be used for this purpose is the routing algorithm of the star graph 171 Algorithm 1 Non-deterministic routing in the star graph Repeat until Td  70 1 If the first symbol in xd is 1 then exchange it with any symbol not in its correct position 2 If the first symbol in Tds is z  1 then either exchange it with the symbol at position z or exchange it with any symbol in an r-cycle of length at least two other than the r-cycle containing x Algorithm I requires at most c  m steps of complexity O\(1 each and therefore its complexity is O\(c  m or o\(n since 0 5 c 5 ln/2J and 1 5 m 5 n 4.3 Greedy routing algorithm A simple approach to minimizing the number of MB local links in the route between nodes is ws and id Td consists of using a greedy algorithm Such an algorithm uses the following data structures and variables 0 S  the set of r-cycles of length at least 2 in rids 0 S  a subset of the symbols of Tds such that 1 if 1 il   i!s an r-cycle of rids 2 5 r 5 n then il E S and 1 iz     i,-l  S and 2 if io   ir-l is an r-cycle of Tds 2 5 T 5 n such thatio  i,.-1  1,thenio  i,-l ES 0 ij  an integer varialble initialized to ij  is Algorithm 2 Greedy routing in the SCC graph 1 If Tds  TO then route inside the supernode and exit 2 Identify the r-cycles of length at least 2 that exist in sds and initializes s and ij 447 


Choose a symbol i E S such that d\(ij  i is min imal Let C be the r-cycle that contains symbol i Once i is chosen, make ij  i If Ca has the form 1 i ip    I then make and S  S  i  ip Otherwise make S  S  C and S  S  symbols\(C where symbols\(C denotes a function that returns the set of symbols in r-cycle Ca S,=S,-\(\(li,ip  i,-1 lip  I Repeat Steps 3 and 4 until S  8 The greedy approach used by Alg 2 consists of choosing the r-cycle that has the minimum distance from ij as the next one to be executed If the selected r-cycle Ca includes symbol 1 then only the first lateral link of C is taken wbich allows for an interleaved execution of that r-cycle If C does not include symbol 1 then C is executed completely The complexity of the greedy routing algorithm is O\(cm or O\(n2 since 0 5 c 5 Ln/2J and 0 5 m 5 n The ordering of r-cycles chosen by this algorithm however may not produce a minimal route 4.4 Minimal routing algorithm We now present a minimal routing algorithm which finds the shortest route between a pair of nodes is n and id d in SCC The output of the algorithm con sists of a sequence of lateral links R\(!l H  for which lP\(!l H  is minimal Eq 15 We note that an earlier version of our minimal routing algorithm appeared in lo The algorithm we present here improves that of  101 in two ways 1 it employs more selective heuristics to further con strain the search space generated by the algorithm and 2 it accounts for the possibility of interleaving r-cycles which is not possible with the algorithm in lo The algorithm performs a depth-first search on a weighted tree structure The tree is built by expanding at each step only those r-cycle orderings that seem to result in a min imal number of local links Although the search tree can virtually examine all possible r-cycle orderings, including interleaved r-cycles its size is significantly constrained in our algorithm To guarantee that a minimal route is always found backtracking is used to enable expansion of previ ous r-cycle orderings that seem to be better than the most recently expanded orderings In the following discussion we use the term vertex to refer to an element of the search tree In addition we use the term edge to refer to the logical connection between vertices in the search tree which is usually implemented with pointers or some form of indexing. The following data structures are stored within each vertex wa of the search tree and are used by the algorithm 0 ti a  the label of the node reached so far by the routing algorithm 0 B  a subset of the symbols of n such that 1 if 1 il  is an r-cycle of n 2 5 T 5 n then il E Bi and 1 i2   i,-l  Bi and 2 if il    I is an r-cycle of ri 2 5 T 5 n such that il     i,-l  1 then il   i,-l E Bi The symbols in Bi represent all possible lateral links that can be selected by the routing algorithm while expanding the search tree frop a given vertex wi For convenience we define a function bsymbols to generate B from ni such that  bsymbols\(ni 0 Fa  a subset of the symbols of-/ni such that 1 if 1 il   i,.-l is an r-cycle of T 2 5 T 5 n then i,-l E F and 1 il   i,-2 F and 2 if io   I is an r-cycle of ri 2 5 T 5 n such that io   i,-l  1 then io   i,-l E F The symbols in 3 represent all lateral links that can be possibly selected by the routing algorithm to enter supernode no i.e all possible r-cycle orderings that can be selected from a given vertex wi necessarily end with a lateral link I E F For convenience we define a function fsymbols to generate 3 from A such that F  fsymbols\(n 0 L  the number of local links used so far by the rout ing algorithm in the route from is nd to I  0 Mi  an estimate of the minimum number of local links that may be needed to reach node id TO from node is nd using the route already constructed by the algorithm up to the intermediate node ti n For convenience we define a function dubbed minloc which computes M as follows Mi  minloc L  ti ri id  L  min\(d  b  Ml\(loc Ca  min\(d\(fi id 16 C,\200 where bi E Bi and fi E 3i Note that minloc is computed under the optimistic as sumption that the route from  n to id no selects the best possible lateral links in Bi and F In addi tion the summation term which computes the number of local links needed to execute all r-cycles C E i see Eq 8 assumes that an optimal r-cycle ordering requiring no local links to move from one r-cycle to the next can be found by the routing algorithm e e  an enableidisable bit which indicates whether or not the tree should be expanded from vertex w In addition the tree structure generated by the minimal routing algorithm has the following characteristics 0 The search tree has at most lat  2 levels with lat being given by Eq 4 We number levels from 0 to lat  1, starting from the root level 448 


0 Let vi be the parent of a vertex vi in the search tree Let  li  ai ai Fi Lj  Mi ei  and ti ai l?i,Fi Ll Mi e denote thedatastored in and vi respectively The weight of the edge vi vf corresponds to the number of local links that are re quired to route from  ai to ti n in SCC and is given by d ti Hence L  Li  d\(Li e Note that routing from ti ai to e n also requires one lateral link if 7~i  n and zero lateral links otherwise Since the number of lateral links in a route from is rids to id no can be computed a priori Eq 4 the routing algorithm focuses on accounting for the local links only 0 Vertices located at level lat  1 in the tree have minloc Li  id no id  La Vertices located at level lat have ti xi  e TO with lj being the lateral link used to enter supernode no Bi  Fi  0 and Mi  minloc\(Li e TO id  Li  d\(tf id 0 The backtracking mechanism is triggered by com paring the estimated minimum number of local links Mi stored in the most recently generated child ver tices with a global variable referred to as T This variable is updated whenever a backtracking proce dure occurs meaning that the minimum number of local links that is required in the route from is rids to id no is actually greater than the previous value of T The search becomes more selective as T in creases, which not only limits the width of the search tree, but also makes the backtracking mechanism less likely to be triggered again Given the definitions above the minimal routing algo rithm for the SCC graph follows  Algorithm 3 Minimal routing in the SCC grauh ti,~i  id Bi  Fi  0 and Mi  1 If Tds  no then route inside the supernode and exit 2 Create a root vertex with ti ni  is rids Bi  bSymbdS\(Td Fi  fSY?7IbdS\(7Fd8 Li  0 Mi  minloc\(0 i ads id and ea  ON Also ini tialize T with the value T  minloc\(0 is rids id 3 Generate child vertices for all enabled vertices such that the label f for each child corresponds to exactly one of the symbols stored in the set Bi of each parent vertex Set ea  OFF at each recently expanded parent vertex Also obtain permutation n for each child vertex by swapping the 1st and the C:th symbols of ai and make Bi  bsymbols\(n Fi  fsymbols\(ni Enabled vertices located at level lat of the search tree must be expanded similarly However, they generate a single child with la  id a  ni Bi  0 Fi  0 L  Li  d\(!i id and M  La In any case a child vertex is enabled with e  ON if Mi 5 T Otherwise we set e  OFF L  Li  d\(.ei,e Mi  minloc\(L:,!;,n;,id 4 If a child vertex has e a  id TO and e  ON then a minimal route has been found The optimal sequence of lateral links R\(tl H lj can be obtained in reverse order by backing up towards the root of the tree and listing the value ti stored in each vertex located between the latth and the 1st levels Once R\(tl H e has been obtained, exit the algorithm 5 If none of the enabled child vertices has  n  id no go to Step 3 6 If there are no enabled child vertices do a backtrack ing search in the tree Among all existing child ver tices select those with the smallest value of Mi and set T to this value Also, enable the selected nodes and go to Step 4 The height of the search tree is O\(n since its maximum value is d\(Sn  2  13 n  1  2 A worst-case analysis of the width of the search tree can be done under the following pessimistic assumption: considering that all possible orderings of r-cycles in permutation Tds are exam ined by Alg 3 the lowest level in the search tree would have at most m vertices This is due to the fact that there are at most m possible ways to move the m misplaced symbols in Tds to their correct posil.ions using the minimum number of lateral links given by Eq 4 In practice, the constraints placed on the number of vertices by the heuristics of Alg 3 i.e., the estimated minimum number of local links Mi limit the width of the search tree considerably Simulations car ried out for 4  n  9 revealed that a very small number of vertices is enabled at each step which makes the maximum width of the tree virtually proportional to m Figure 3 illus trates an example of the search tree constructed by Alg 3 The main computations incurred upon creation of a vertex of the search tree refer to IO Fi and Mi Fortunately each of these computations can be accomplished in O 1 time by using the corresponding values ai Fi and Mi that are stored in the parent vertex and taking into account the differences in the r-cycle structures of permutations ni and n The reasoning above results in a worst-case complexity of O\(m!n As explained above such computational require ments were not observed during simulations of the minimal algorithm The potential need for backtracking searches in the tree added to fact that the maximum width of the tree is in practice proportionall to m results in a complexity of O\(mn2 on the average or O\(n3 since 0 5 m 5 n 5 Simulation results The performance of routing algorithms for SCC was evaluated with simulation programs which compute the route of all n  l nodes of the graph to the identity The routing algorithms that were tested are 1 a random routing algorithm that generates all possible routes to the identity with equal probatlility, which is based on Alg 1,2 Alg 2 and 3 Alg 3 Tht simulations were carried out for 3 5 n 5 9 A log of worst-case routes that may result from the random routing algorithm was also made 449 


ti  5 i  1 5 3 2 4 6 Bi  2,4,5 3i  2,3,4 L;=O M;=6 e;=OFF 30 25 2o Dimensionality of the SCC graph n  6 Source node 5 1 5 2 6 Destination node 3 1 2 3 4 5 6 Backtracking threshold used T  6 Optimal sequence of lateral links found 5,4,2,4,3 Number of lateral links in the minimal path 5 Number of local links in the minimal path 6 Total length of the minimal path 11 k  A Average distance 221 222  W Average number of local links e Average number of MI local links Average number of lateral links 222 222 A ai  4 3i  3 t?i  3 ai  0 Figure 3 Example of search tree used for minimal routing in SCC Table 1 and Fig 4 show the simulation results obtained with the minimal routing algorithm Values for lat and MI\(Zoc match exactly the theoretical values provided by Eqs 6 and 9 Also the simulation results obtained for MB\(loc under a minimal routing algorithm are closely bounded by Eq 12 As expected only the average number of MB local links varied among the different routing algorithms that were 9 4   0 Random routing \(average, theoretical I A Random routing \(worst-case z H Random routing \(average, simulation x---x Greedy routing m  D-.-.-a Minimal routing m Y    222 5 222 I 3 4 5 6 7 8 9 n Figure 5 MB\(Zoc vs routing algorithms tested Fig 5 compares simulation results for MB\(loc Note that the results for the random routing algorithm are very close to the theoretical values provided by Eq 12 The model used to derive that equation seems to result in an error proportional to l/n which is negligible considering that Eq 12 is still a close upper bound for MB loc As ex pected, both the greedy and the minimal routing algorithm outperform the random routing algorithm as far as the av 450 


n I31 41 51 61 71 8 I 9 Graph diameter q5\(SCCn Average number of lateral links E Average number of MI local links MI\(loc Average number of MB local links MB\(Zoc I Graph size n  1 e n I 12 I 72 I 480 I 3,600 I 30,240 I 282,240 I 2,903,040 6 8 16 19 1.500 2.583 3.683 4.783 0.667 1.500 3.200 5.000 0.833 1.222 1.925 2.337 1.500 3.000 Average number of local links L Average distance d\(SCC 2.722 5.125 7.337 5.306 8.808 12.121 Table 1 Average distance of SCC graphs under minimal routing 300000 250000 g 200000 3 E L 150000   100000 50000 0 erage number of MB local links is concerned. Also observe that for 3 5 n 5 4 the greedy routing algorithm performs as well as the minimal routing algorithm Besides, our re sults indicate that the performance of these algorithms is quite similar for 5 5 n 5 9 which makes the less complex greedy routing algorithm particularly attractive Average costs of paths produced by the three routing al gorithms are summarized in Table 2 The random routing algorithm has a complexity of O\(n and performs reason ably well on the average Utilization of such an algorithm may however result in variations in the average cost of routes up to the worst-case values shown in Table 2  Minimal routing  andom rout. \(worst case     n 3 Minimal Greedy Random routing rout rout Theor Simul Worst-case 3.000 3.000 3.000 3.084 3.167 I1 I I I I I 4 5 I I I I I 5.306 5.305 5.500 5.514 5.694 8.808 8.812 9.261 9.264 9.775 Table 2 Average costs vs routing algorithms Figure 6 shows distribution curves comparing the three routing algorithms in the case of an SCC graph A point 01 NI in one of these curves indicates that the corre sponding routing algorithm will compute a route of cost DI to the identity for NI nodes in the SCC graph The aver age distribution for the random routing algorithm is shown but the results for that algorithm may actually vary from the minimal to the worst-case distributioncurves due to the non deterministic nature of the algorithm It is also interesting to observe that the greedy routing algorithm provides a dis tribution curve which is close to that of the minimal routing algorithm presenting however a smaller complexity 6 Considerations on wormhole routing 3 In this section we briefly describe how the algorithms presented in the paper cam be combined with wormhole routing 6 which is a popular switching technique used in parallel computers All three algorithms can be used with wormhole routing when implemented as source-based routing algorithms  111 In source-based routing tlhe source node selects the entire path before sending the packet Because the processing delay for the routing algorithm is incurred only at the source node it adds only once to the communication latency and can be viewed as part of the start-up latency Source-based routing however has two disadvantages 1 each packet must carry complete information about its path in the header which increases the packet length and 2 the path cannot be changed while the packet is being routed which precludes incorporating adaptivity into the routing algorithm Distributed routing eliminates the disadvantages of source-based routing by invoking the routing algorithm in each node to which the packet is forwarded ll Thus the decision on whether a packet should be delivered to the local processor or forwarded on an outgoing link is done 451 


locally by the routing circuit of a node Because the routing algorithm is invoked multiple times while a packet is being routed the routing decision must be taken as fast as pos sible From this viewpoint it is important that the routing algorithm can be easily and efficiently rendered in hardware which favors the random routing algorithm over the greedy and minimal routing algorithms Besides being the most complex algorithm discussed in this paper the minimal routing algorithm includes a feature which precludes its distributed implementation in associa tion with wormhole routing namely its backtracking mech anism Distributed versions of the random and greedy al gorithms, however, can be used in combination with worm hole routing A near-minimal distributed routing algorithm which supports wormhole routing can be obtained by re moving the backtracking mechanism from Alg 3 Such an algorithm is likely to have computational complexity and average cost that lie between those of the greedy and the minimal routing algorithm Due to its non-deterministic nature the random routing algorithm also seems to be a good candidate for SCC net works employing distributed adaptive routing  1 I Adap tivity is desirable for example if the routing algorithm must dynamically respond to network conditions such as conges tion and faults Some degree of adaptivity is also possible in the greedy and minimal routing algorithms which in some cases can decide between paths of equal cost 7 Conclusion This paper compared the average cost and the complex ity of three different routing algorithms for the SCC graph We divided routes into three components \(lateral links MI local links and MB local links and showed that only the number of MB local links may be affected by the routing algorithm being considered Exact expressions for the aver age number of lateral links and the average number of MI local links were presented Also an upper bound for the average number of MZ local links was derived considering a random routing algorithm As a result a tight upper bound on the average distance of the SCC graph was obtained Simulation results for a random a greedy and a minimal routing algorithm were presented and compared with theo retical values The complexity of the proposed algorithms is respectively O\(n O\(n2 and O\(n3 where n is the dimensionality of the SCC grap.h The results under mini mal routing produce exact numerical values for the average distance of SCC for 3 5 n 5 9 Results for the greedy algorithm match those of the min imal algorithm for 3 2 n 5 4 The greedy algorithm also performs close to minimality for 5 5 n 5 9 and is an in teresting choice due to its O\(n2 complexity The random routing algorithm has an O\(n complexity and performs fairly well on the average but may introduce additional MB local links in the route under worst-case conditions Finally we discussed how each of the routing algorithms can be used in association with the wormhole routing switch ing technique Directions for future research in this area in clude an evaluation of requirements for deadlock avoidance e.g number of virtual channels References l S B Akers,D. HarelandB Krishnamurthy,\223TheStarGraph An Attractive Altemative to the n-Cube,\224 Proc Int\222l Con Pal Proc 1987 pp 393-400 2 M M Azevedo N Bagherzadeh and S Latifi 223Broadcasting Algorithms for the Star-Connected Cycles Interconnection Network,\224 J Pal Dist Comp 25,209-222 1995 3 M M Azevedo N Bagherzadeh and S Latifi 223Embed ding Meshes in the Star-Connected Cycles Interconnection Network,\224 to appear in Math Mod. and Sci Comp 4 M M Azevedo N Bagherzadeh and S Latifi 223Fault Diameter of the Star-Connected Cycles Interconnection Net work,\224 Proc 28th Annual Hawaii Int\222l Con5 Sys Sci Vol 11 Jan. 3-6 1995 pp 469-478 SI W.-K Chen M F M Stallmann andE E Gehringer 223Hy percube Embedding Heuristics An Evaluation,\224 Int\222l J Pal Prog Vol 18 No 6 1989 pp 505-549 6 W J Dally and C I Seitz 223The Torus Routing Chip,\224 Dist Comp Vol 1 No 4 1986 pp 187-196 7 K Day and A Tripathi,\223A Comparative Study ofTopologica1 Properties of Hypercubes and Star Graphs,\224 IEEE Trans. Pal Dist Sys Vol 5 No 1 Jan. 1994 pp 31-38 8 D E Knuth The Art of Computer Programming Vol I Addison-Wesley 1968 pp 73 pp 176-177 9 S Latifi 223Parallel Dimension Permutations on Star Graph,\224 IFIP Trans A Comp Sei Tech 1993 A23 pp 191-201 lo S Latifi M M Azevedo and N Bagherzadeh 223The Star Connected Cycles A Fixed-Degree Interconnection Net work for Parallel Processing,\224 Proc Int\222l Con5 Pal Proc  1 11 L M Ni and P K McKinley 223A Survey of Wormhole Rout ing Techniques in Direct Routing Techniques,\224 Computer Feb 1993 pp 62-76  121 E P Preparata and J Vuillemin 223The Cube-Connected Cy cles A Versatile Network for Parallel Computation,\224 Comm ACM Vol 24 No 5 May 1981 pp 300-309  131 Y Saad and M H Schultz 223Topological Properties of Hy percubes,\224IEEE Trans Comp Vol 37 No 7 July 1988 pp 14 S Shoari and N Baghenadeh 223computation of the Fast Fourier Transform on the Star-Connected Cycle Network,\224 to appear in Comp  Elec. Engl 1996 15 P Vadapalli and P K Srimani 221\223ho Different Families of Fixed Degree Regular Cayley Networks,\224 Proc Int\222l Phoenix Con Comp Comm Mar 28-31,1995 pp 263-269 1993 Vol 1 pp 91-95 867-872 452 


It can also be added to cell CrossSales.3\(PC, printer one_year,\205 5  Distributed and Incremental Rule Mining There exist two ways to deal with association rules 267  Static that is, to extract a group of rules from a snapshot, or a history, of data and use "as is 267  Dynamic that is, to evolve rules from time to time using newly available data We mine association rules from an e-commerce data warehouse holding transaction data. The data flows in continuously and is processed daily Mining association rules dynamically has the following benefits 267  223Real-time\224 data mining, that is, the rules are drawn from the latest transactions for reflecting the current commercial trends 267  Multilevel knowledge abstraction, which requires summarizing multiple partial results. For example association rules on the month or year basis cannot be concluded from daily mining results. In fact multilevel mining is incremental in nature 267  For scalability, incremental and distributed mining has become a practical choice Figure 3: Distributed rule mining Incremental association rule mining requires combining partial results. It is easy to see that the confidence and support of multiple rules may not be combined directly. This is why we treat them as \223views\224 and only maintain the association cube, the population cube and the base cube that can be updated from each new copy of volume cube. Below, we discuss several cases to show how a GDOS can mine association rules by incorporating the partial results computed at LDOSs 267  The first case is to sum up volume-cubes generated at multiple LDOSs. Let C v,i be the volume-cube generated at LDOS i The volume-cube generated at the GDOS by combining the volume-cubes fed from these LDOSs is 345   n i i v v C C 1  The association rules are then generated at the GDOS from the centralized C v  214  The second case is to mine local rules with distinct bases at participating LDOSs, resulting in a local association cube C a,I a local population cube C p,I  and a local base cube C b,i at each LDOS. At the GDOS, multiple association cubes, population cubes and base cubes sent from the LDOSs are simply combined, resulting in a summarized association cube and a summarized population cube, as 345   n i i a a C C 1   345   n i i p p C C 1  and 345   n i i b b C C 1  The corresponding confidence cube and support cube can then be derived as described earlier. Cross-sale association rules generated from distinct customers belong to this case In general, it is inappropriate to directly combine association cubes that cover areas a 1 205, a k to cover a larger area a In the given example, this is because association cubes record counts of customers that satisfy   customer product merchant time area Doe TV Dept Store 98Q1 California Doe VCR Dept Store 98Q1 California customer product merchant time area Doe VCR Sears 5-Feb-98 San Francisco Joe PC OfficeMax 7-Feb-98 San Francisco customer product merchant time area Doe TV Fry's 3-Jan-98 San Jose Smith Radio Kmart 14-Jan-98 San Jose Association   population      base          confidence      support cube               cube                cube         cube                cube LDOS LDOS GDOS 


the association condition, and the sets of customers contained in a 1 205, a k are not mutually disjoint. This can be seen in the following examples 214  A customer who bought A and B in both San Jose and San Francisco which are covered by different LDOSs , contributes a count to the rule covering each city, but has only one count, not two, for the rule A  336  B covering California 214  A customer \(e.g. Doe in Figure 3\who bought a TV in San Jose, but a VCR in San Francisco, is not countable for the cross-sale association rule TV  336 VCR covering any of these cities, but countable for the rule covering California. This is illustrated in Figure 3 6  Conclusions In order to scale-up association rule mining in ecommerce, we have developed a distributed and cooperative data-warehouse/OLAP infrastructure. This infrastructure allows us to generate association rules with enhanced expressive power, by combining information of discrete commercial activities from different geographic areas, different merchants and over different time periods. In this paper we have introduced scoped association rules  association rules with conjoint items and functional association rules as useful extensions to association rules The proposed infrastructure has been designed and prototyped at HP Labs to support business intelligence applications in e-commerce. Our preliminary results validate the scalability and maintainability of this infrastructure, and the power of the enhanced multilevel and multidimensional association rules. In this paper we did not discuss privacy control in customer profiling However, we did address this issue in our design by incorporating support for the P3P protocol [1 i n  ou r data warehouse. We plan to integrate this framework with a commercial e-commerce system References 1  Sameet Agarwal, Rakesh Agrawal, Prasad Deshpande Ashish Gupta, Jeffrey F. Naughton, Raghu Ramakrishnan, Sunita Sarawagi, "On the Computation of Multidimensional Aggregates", 506-521, Proc. VLDB'96 1996 2  Surajit Chaudhuri and Umesh Dayal, \223An Overview of Data Warehousing and OLAP Technology\224, SIGMOD Record Vol \(26\ No \(1\ 1996 3  Qiming Chen, Umesh Dayal, Meichun Hsu 223 OLAPbased Scalable Profiling of Customer Behavior\224, Proc. Of 1 st International Conference on Data Warehousing and Knowledge Discovery \(DAWAK99\, 1999, Italy 4  Hector Garcia-Molina, Wilburt Labio, Jun Yang Expiring Data in a Warehouse", Proc. VLDB'98, 1998 5  J. Han, S. Chee, and J. Y. Chiang, "Issues for On-Line Analytical Mining of Data Warehouses", SIGMOD'98 Workshop on Research Issues on Data Mining and Knowledge Discovery \(DMKD'98\ , USA, 1998 6  J. Han, "OLAP Mining: An Integration of OLAP with Data Mining", Proc. IFIP Conference on Data Semantics DS-7\, Switzerland, 1997 7  Raymond T. Ng, Laks V.S. Lakshmanan, Jiawei Han Alex Pang, "Exploratory Mining and Pruning Optimizations of Constrained Associations Rules", Proc ACM-SIGMOD'98, 1998 8  Torben Bach Pedersen, Christian S. Jensen Multidimensional Data Modeling for Complex Data Proc. ICDE'99, 1999 9  Sunita Sarawagi, Shiby Thomas, Rakesh Agrawal Integrating Association Rule Mining with Relational Database Systems: Alternatives and Implications", Proc ACM-SIGMOD'98, 1998   Hannu Toivonen, "Sampling Large Databases for Association Rules", 134-145, Proc. VLDB'96, 1996   Dick Tsur, Jeffrey D. Ullman, Serge Abiteboul, Chris Clifton, Rajeev Motwani, Svetlozar Nestorov, Arnon Rosenthal, "Query Flocks: A Generalization of Association-Rule Mining" Proc. ACM-SIGMOD'98 1998   P3P Architecture Working Group, \223General Overview of the P3P Architecture\224, P3P-arch-971022 http://www.w3.org/TR/WD-P3P.arch.html 1997 


Plenary Panel Session 30 XML Databases   Moderator: Michael Carey, IBM Almaden Research Center USA Panelists Adam Bosworth, Microsoft Corporation USA David De Witt University of Wisconsin-Madison, USA Alon Levy University of Washington USA Bruce Lindsay IBM Almaden Research Center USA Jennifer Widom Stanford University USA Demo Session 1 Web Query Optimizer  661 V Zadorozhny L Bright L Raschid T Urhan and M Vidal ReQueSS: Relational Querying of Semi-structured Data  664 R Sunderraman The IDEAL Approach to Internet-Based Negotiation for E-Business  666 J Hammer C Huang Y Huang C Pluempitiwiriyawej M Lee H Li L Wang Y Liu and S Su READY A High Performance Event Notification Service  668 R Gruber B Krishnamurthy, and E Panagos A Multimedia Information Server with Mixed Workload Scheduling  670 G Nerjes DISIMA An Object-Oriented Approach to Developing an Image Database System  672 V Oria T Ozsu P Iglinski B Xu and L Cheng Demo Session 2 The Collaboration Management Infrastructure  677 H Schuster D Baker A Cichocki D Georgakopoulos and M Rusinkiewicz Assisting the Integration of Taxonomic Data The LITCHI Toolkit  679 I Sutherland J Robinson S Brandt A Jones S Embury W Gray R White and F Bisby TheaterLoc: Using Information Integration Technology to Rapidly Build Virtual Applications  681 G. Barish Y.4 Chen D Dipasquo, C Knoblock S Minton I Muslea and C Shahabi Lineage Tracing in a Data Warehousing System  683 Y Cui and J Widom xiii 


The Mentor-Lite Prototype A Light-Weight Workflow Management System  685 J Weissenfels M Gillmann 0 Roth, G Shegalov and W Wonner Location Prediction and Queries for Tracking Moving Objects  687 0 Wolfson B Xu and S Chamberlain Semiorder Database for Complex Activity Recognition in Multi-Sensory Environments  689 S Bhonsle A Gupta S Santini and R Jain Tutorial 1 Web Information Retrieval  693 M Henzinger Tutorial 2 Mobile and Wireless Database Access for Pervasive Computing  694 P Chrysanthis and E Pitoura Tutorial 3 Data Mining with Decision Trees  696 J Gehrke Tutorial 4 Directories Managing Data for Networked Applications  697 D Srivastava Tutorial 5 Indexing High-Dimensional Spaces Database Support for Next Decade\222s Applications  698 S Berchtold and D Keim xiv 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


