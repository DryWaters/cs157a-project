 1 A Hybrid-FPGA System for On-Board Data Processing Targeting the MATMOS FTIR Instrument Dmitriy L. Bekker, Marcin Lukowiak  Muhammad Shaaban   Department of Computer Engineering Rochester Institute of Technology 83 Lomb Memorial Drive Rochester, NY 14623-5603 585-475-2808  585-475-2373   dbekker@alum.rit.edu mxleec@rit.edu   meseec@rit.edu   Jean-Francois L. Blavier  Paula J. Pingree   Jet Propulsion Laboratory California Institute of Technology 4800 Oak Grove Drive Pasadena, CA 91109-8099 818-354-6665  818-354-0587   Jean-Francois.Blavier@jpl.nasa.gov 
Paula.J.Pingree@jpl.nasa.gov   Abstract The MATMOS Fourier Transform Infrared FTIR\ spectrometer is one of three scientific inst ruments on the previously proposed MARVEL mission MATMOS requires computationally intensive floating-point s ignal processing to reduce the amount of data prior to do wnlink With the goal of reducing design time and the size and weight of instrument electronics this paper presen ts an FTIR spectrometry implementation targeting the Xili nx Virtex-4FX hybrid-FPGA and its embedded PowerPC 405  processor We explore different hardware and softwa re optimizations and architectural configurations of t he hybridFPGA system to demonstrate optimal performance in o nboard data processing By including a dedicated flo 
atingpoint unit and dot-product co-processor in the hard ware as well as utilizing optimized single-precision math l ibrary functions and a modified IBM PowerPC performance li brary in the software, we demonstrate a more than 8x redu ction in execution time compared to the non-optimized softwa re only implementation A dual-processor design concept as an enhancement that would further reduce the execution time is also presented 1 2 3  T ABLE OF C ONTENTS  1  I NTRODUCTION  1  2  D ATA C OLLECTION AND P ROCESSING 2  3  FTIR  B ASE S YSTEM 3 
 4  S OFTWARE O PTIMIZATIONS 5  5  H ARDWARE O PTIMIZATIONS 6  6  R ESULTS A NALYSIS 11  7  C ONCLUSIONS AND F UTURE W ORK 12  R EFERENCES  14  B IOGRAPHY  14  1  I NTRODUCTION  With the increasing complexity of today’s NASA scie nce missions, currently available spacecraft flight pro cessors risk becoming overburdened with on-board data processing 
    1  1-4244-1488-1/08/$25.00 ©2008 IEEE  2 IEEEAC paper #1232, Version 1, Updated December 8 2007 3 This paper is a summary of the Masters Thesis Hardware and Software Optimization of Fourier Transform Infrared Spectrom etry on HybridFPGAs D L Bekker 1   c a r r i e d  o u t  a t  t h e  R o c h e s t e r  I n stitute of Technology and continuing the work presented in [2  tasks Furthermore these radiation-hardened proces sors require additional interface boards and are limited  in their computational capabilities Hybrid field-programmab le gate arrays FPGAs offer the versatility of running div erse software applications on state-of-the-art embedded 
processors while taking advantage of reconfigurable  hardware resources within the same chip package T hese tightly coupled Systems-On-a-Chip \(SoC\ can be deve loped with custom architectures and promise breakthrough performance capability At the 2007 IEEE Aerospace Conference we presented a paper titled An FPGA/SoC Approach to On-Board Dat a Processing Enabling New Mars Science with Smart Payloads where we introduced the MATMOS 4 instrument at that time proposed for the 2011 Mars Scout MARVE L 5  mission MARVEL base-lined two RAD750 SBCs to perform the on-board data processing functions for MATMOS at significant utilization of precious on-bo ard resources mass volume etc Following-up on an initial 
evaluation of the Xilinx Virtex-II Pro V2P hybrid FPGA that was determined not to meet MATMOS’s requiremen ts we introduced a demonstration of the then-recentlyreleased Xilinx Virtex-4FX \(V4FX\ hybrid-FPGA for the MATMOS  fast Fourier transform FFT portion of the algorit hm This demonstration proved promising with the use of the V4FX’s new Auxiliary Processor Unit APU controller that tightly couples co-processors built in the FPGA fabric to t he main PowerPC 405 PPC405 core Based on the results for  the FFT we presented a processor concept for MATMOS th at could potentially meet the requirements utilizing a dual-core V4FX FPGA [2   In the past year this research task has focused on  developing a fully functional hybrid-FPGA implement 
ation of the FTIR spectrometry algorithm with emphasis on  reducing the overall execution time by optimizing i n both hardware and software domains The algorithm writt en entirely in FORTRAN is first ported to the PPC405 processor with the help of the FORTRAN-to-C Convert er  f2c and its supporting libraries [3   O n c e  p o r t e d   t h e FTIR spectrometry software is carefully studied in order  to    4 Mars Atmospheric Trace Molecule Spectroscopy \(MATM OS 5 Mars Volcanic Emission and Life \(MARVEL 


 2 identify areas of improvement Profiling tools are used to locate bottlenecks and computationally intensive po rtions of the algorithm Two software optimizations are evaluated   Use of non-ANSI single-precision math functions   Use of IBM Performance Libraries Perflib  The techniques listed above are compatible with bot h the V2P and the V4FX two families of Xilinx’s currentl y available hybrid-FPGAs The first technique require s modification of the FTIR spectrometry code to use s ingleprecision math function calls where acceptable Sin gleprecision arithmetic is performed much faster than doubleprecision thus reducing the overall execution time  The second software optimization uses Perflib a set of libraries that replaces string manipulation functions and sta ndard floating-point emulation with hand optimized routin es written specifically for the PPC405 processor 4   Xilinx’s Embedded Development Kit EDK provides a version o f Perflib compiled for string single and double-precision optimization Additionally this paper describes a build of Perflib  that optimizes only the double-precision floatingpoint functions to complement the single-precision floatingpoint unit \(FPU\ implemented in the FPGA fabric The core focus of the paper however is on hardwar e optimizations their integration with the system a nd compatibility with the software Different system architectures memory configurations and bus frequ encies are evaluated to find the optimal solution. The new soft-core single-precision Xilinx FPU and its integration wit h the APU controller is studied extensively Additionally  a custom HW accelerator that optimizes single-precisi on dotproduct calculations is presented and implemented a longside the FPU thus demonstrating multiple co-processors s haring the same physical hardware interface  a capability  not previously tested by Xilinx The outcome of this research is an 8x reduction in execution time of the FTIR spectrometry algorithm when compar ed to a software-only implementation on the V4FX60 FPGA Only one of two available PPC405 cores is utilized and with minimal changes to the FTIR spectrometry software This is the fastest implementation of the algorithm on an F PGA platform to date Although in its current form whi le incapable of meeting the data processing requiremen ts for MATMOS, future improvements to the software as well as a dual-core design may provide a fully realized implementation This paper begins with a brief overview of the data  processing steps in the MATMOS FTIR algorithm and presents an all software implementation for the emb edded PPC405 processor After profiling this base system  the subsequent sections present incremental results of the aforementioned software and hardware optimizations  A complete analysis of the results is then presented followed by conclusions and recommendations for further work  2  D ATA C OLLECTION AND P ROCESSING  The MATMOS instrument measures the 850-4300 cm 1  region of the infra-red spectrum of sunlight as it shines through the Martian atmosphere Figure 1 This measurement is done at a high 0.02 cm 1 spectral resolution necessary to identify certain trace gases such as CH 4  and N 2 O that might be produced by life or volcanism. MATMO S records roughly 26 spectra per occultation with ea ch containing 172,500 spectral elements There are two  occultations per orbit one for sunrise and one for  sunset Figure 2\. The duration of an occultation is betwe en 78 and 169 seconds, thus requiring that each spectrum be c ollected in 3.0 to 6.5 seconds [2    Fig 1  A conceptual drawing of the MARVEL spacecraft with the MATMOS instrument gathering data through t he Martian atmosphere as it points towards the Sun [2   Fig 2  The spacecraft sees two solar occultations per orb it sunset shown above\ [2   


 3 The spectrum is recorded with a Fourier Transform Spectrometer FTS a Michelson interferometer in w hich the optical path difference of light rays is contin uously varied with moving mirrors Using photovoltaic dete ctors this modulated light is converted to an electric si gnal known as an interferogram The MATMOS FTS utilizes three separate detectors in  the process of collecting occultation spectra An HgCdTe detector is used to collect longer wavelengths 12  m to 5  m and an InSb detector collects shorter wavelengths \(5  m to 2  m  An Ge detector is used to collect the reference laser interferogram used to measure the path diffe rence  internal to the FTS For each orbit the three det ectors produce 659 Mbytes of raw data that must be process ed and compressed prior to downlink The data processing consists of five steps: interfe rogram resampling phase correction FFT spectra averaging  and lossless compression Table 1 Re-sampling convert s the time-domain signal to the path difference domain, r emoving frequency modulation in the process and reducing th e number of points for each solar detector Phase cor rection makes the interferogram symmetrical about the zero path difference ZPD a point where the two moving mirr ors inside the interferometer are at equal distance to the beam splitter This allows the two symmetrical halves of  the interferogram to be averaged together. The spectrum is then computed with an FFT reducing the dynamic range of  the interferogram thus allowing it to be represented wi th fewer data bits Averaging scans taken above the atmosphe re and then performing lossless compression further reduce s the volume of data to be transmitted to Earth Table 1  Reduction in data volume due to on-board data proce ssing Data Processing Step Reduction Factor Data Size \(Mb ytes Raw Interferogram  659.18 Interferogram Re-sampling 1.83 360.21 Phase Correction 2.00 180.10 Fast Fourier Transformation 6.10 29.53 Spectra Averaging 2.00 14.76 Lossless Compression 1.80 8.20 Net Data Reduction 80.37 8.20  3  FTIR  B ASE S YSTEM  The target platform to host all system builds prese nted in this paper is the Xilinx ML410 development board wh ich features the V4FX60 FPGA. This FPGA is in the -11 s peed grade allowing the dual embedded PPC405 cores to op erate at up to 400 MHz when the APU controller is not in use or up to 275 MHz when the APU controller is in use \(as is the case for much of the work presented in this paper 5   This board comes in a standard ATX form factor \(see Figure 3\ with 64 Mbytes of component DDR memory \(32-bit and 256 Mbytes DDR2 DIMM memory 64-bit The DDR memory is capable of running at up to 266 MHz  however the available memory controller IP core operates at  100 MHz  thus delivering PC-1600 performance 1.6 Gbytes/sec\. In the case of DDR2, the controller IP core can interface with a 266 MHz memory module however the module supplied with the board is capable of runnin g at up to 200 MHz  thus delivering PC2-3200 performance 3.2 Gbytes/sec\ [6    Fig 3  The Xilinx ML410 evaluation board comes in an ATX form factor and hosts the V4FX60 FPGA that feat ures two embedded PowerPC405 processors [6   The board also features a SystemACE compact flash controller dual Ethernet PHYs PCI and PCI express  interfaces, VGA interface, USB ports, and much more The SystemACE controller can be used to access data on a compact flash card non-volatile storage and also has the ability to configure the FPGA with hardware bitstre ams and software object codes stored in one of eight config uration locations on the card The starting point for implementing the base system is FTIR source code in FORTRAN and simulated interferograms  provided by NASA Jet Propulsion Laboratory 7   T h e  software contains only the three most time consumin g data processing steps shown in Table 1  interferogram r esampling phase correction and fast Fourier transfo rmation The base system implemented on the ML410 developme nt board must have adequate hardware resources to exe cute the software which must first be ported to the Pow erPC processor Generating a Hardware Platform Using Xilinx Platform Studio XPS and the Base Sys tem Builder BSB in EDK the hardware platform shown i n Figure 4 is generated Some of the main features of this build are 


 4   100 MHz max\ processor local bus \(PLB\ and on-chip peripheral bus OPB clock frequency for highest possible transfer rates on system buses   200 MHz PPC405 processor clock frequency 6    Cache enabled for maximum performance instruction and data, burst and/or cacheline The bussed peripherals include   OPB RS232 UARTLITE for standard input/output \(I/O functionality over a serial null modem link to the host PC \(and HyperTerminal   OPB SystemACE controller for access to the compact flash CF card where the simulated time-domain interferogram is stored non-volatile memory prior  to transfer to main system memory   PLB DDR2 memory controller with interface to external 256 Mbytes DDR2 DIMM to act as main system memory for data processing  Fig. 4 FTIR base system diagram \(main component only Note that local on-chip memory is not used because all software data and text sections are significantly l arger than on-chip memory capacity Configuring Software Prior to converting the FORTRAN source to C source capable of cross-compilation for the FPGA’s embedde d    6 Although the PPC405 core on the V4FX60 -11 speed g rade FPGA can be clocked at up to 400 MHz the use of the APU controller \(in later builds limits this frequency to 275 MHz A 200 MHz processor clock is selected as it is an integer multiple of the bus frequency a nd is easier to work with in terms of the on board digital clock managers \(DC M PPC405 processor the expected output of the FTIR software is obtained from execution on a PC. This i s shown in the form of spectrum graphs in Figure 5 below  a Full spectrum  b A portion of the full spectrum Fig 5  The spectrum produced from simulated interferogram data after executing the FTIR softwar e on a PC [7  Converting FORTRAN to C is a three step process 1  Remove all I/O operations from the FORTRAN source except for simple string printing 2  Run f2c to automatically generate C source 3  Augment the generated C source with a  Proper device initialization b  SystemACE file I/O functions c  PPC405 timing routines \(for benchmarking A detailed description of this process including t he configuration of f2c and its support library libf2c is given in 1   I t  i s  i m p o r t a n t  t o  f o l l o w  t h e  c o n f i g u r a t i o n  steps precisely in order to generate C source capable of proper cross-compilation to the FPGA’s embedded PPC405 processor using the Xilinx supplied GCC compiler \(v ersion 4.1.1 


 5 Checking Processing Results The FTIR spectrometry software configured for execu tion on the ML410 development board with no HW or SW optimizations applied reports the run times shown i n Table 2 below Table 2  Execution times for FTIR base system on ML410 board  PPC405 Freq 200 MHz Interferograms 1 Detectors 1 Software Component Time \(sec Re-sampling 1197.7938 Spectrum \(Phase Correction, FFT 117.4963 TOTAL 1315.2901  Most importantly the spectrum produced by the FTIR  spectrometry software executing on the ML410 develo pment board is indistinguishable from the reference spect rum graphs in Figure 5 Initial Performance Evaluation In order to know what aspects of the FTIR software to optimize and whether to do it in hardware or in sof tware, it is first important to understand where the bottlene cks are in the computation An excellent tool to identify wher e in the software the CPU spends most of its time is the Xil inx profiler in the Software Development Kit SDK Whe n software profiling is enabled a timer is configure d on the PPC405 processor to keep track of the amount of tim e spent in each function called This data is stored in a m emory region specified by the user and can later be downl oaded to the host system i.e the development PC for analy sis Profiling was performed on the FTIR base system wit h the results presented in Figure 6 below  Fig. 6 Profiling results for FTIR base system The graph in Figure 6 lists top ten time consuming functions called in the FTIR spectrometry algorithm. Not surp risingly most functions called take up very minimal CPU time  to execute However two functions stand out far above  the rest together taking up over 45 of the CPU time These two functions are atan and __ieee754_atan2  From their names, it is clear that both come from the math lib rary. After a close inspection of the original FTIR C-source i t was found that all math library functions were being ca lled with double-precision arguments even though the input interferogram is in single-precision Double-precis ion arithmetic is more complex than single-precision ar ithmetic and should be avoided when double-precision is not absolutely necessary For the original FTIR C-sourc e this was the source of the bottleneck and the reason why the atan and __ieee754_atan2 functions were taking up so much CPU time 4  S OFTWARE O PTIMIZATIONS  Non-ANSI Single-precision Math Library Functions Based on the profile data in Figure 6, the followin g doubleprecision math library function calls were changed to their singe-precision \(SP\, non-ANSI counterparts   double acos\( double  float acosf\( float   double cos\( double  float cosf\( float   double sin\( double  float sinf\( float   double atan2 double double    float atan2f float float   double sqrt\( double  float sqrtf\( float   double atan\( double  float atanf\( float This resulted in a significant speedup Table 3 wh ile producing a spectrum that deviated only by 0.000979 5 from the reference spectrum in Figure 5 Table 3  Execution times for system with SP math functions SW Optimizations None base system SP Math Functions  PPC405 Freq 200 MHz 200 MHz  Interferograms 1 1  Detectors 1 1  Software Component Time \(sec Time \(sec Speedup Re-sampling 1197.7938 780.9376 1.53x Spectrum \(Phase Correction, FFT 117.4963 109.9881 1.07x TOTAL 1315.2901 890.9257 1.48x   Fig. 7 Profiling results after SP math functions optimiza tion 


 6 The profiling data Figure 7 shows that the two fu nctions previously taking up over 45 of the CPU time atanf the SP version of atan  and __ieee754_atan2f the SP version of __ieee754_atan2 now only take a little under 33%. New functions have risen to the top of the profile sugg esting that the CPU is now executing a more balanced program IBM PowerPC Performance Library The IBM PowerPC performance libraries  Perflib  is another great optimization that can easily be incor porated into an existing system 4   A b s o l u t e l y  n o  c h a n g e s  to the source are required it is only necessary to link t o these libraries for them to take effect Perflib works by replacing string and floating-point routines provided by the compiler with more efficient hand coded implementations specifically targeting the PPC405 and PPC440 proces sors In EDK Perflib has been pre-compiled and can be linked to the software project by specifying the mppcperflib option at link time This instructs the GCC linker to substit ute IBM performance libraries for standard string and float ing-point routines Perflib significantly reduces the overall execution time Table 4 The reported maximum deviation is s till 0.0009795 Table 4  Execution times for system with SP math and Perflib  SW Optimizations None base system SP Math IBM Perflib  PPC405 Freq 200 MHz 200 MHz  Interferograms 1 1  Detectors 1 1  Software Component Time \(sec Time \(sec Speedup Re-sampling 1197.7938 244.1836 4.91x Spectrum \(Phase Correction, FFT 117.4963 44.4243 2.64x TOTAL 1315.2901 288.6079 4.56x  The profile now has an even greater diversity of fu nctions that take up the most CPU time see Figure 8 The atanf function now takes up only 2.23% of CPU time \(not s hown in graph\ while a new function __mulsf3 takes up the most CPU time, 9.27%. This function is responsible for f loatingpoint multiplication and is one replaced by Perflib   Fig. 8 Profiling results for system with SP math and Perflib  5  H ARDWARE O PTIMIZATIONS  Having optimized the FTIR algorithm in software th e next step is to determine what can be done in the hardwa re to further reduce the execution time. This section des cribes the integration of two co-processors into the hardware  the Xilinx APU floating-point unit and a custom designe d floating-point dot-product co-processor The co-pro cessors were first integrated individually and then configu red to work together in the same system Xilinx APU Floating-point Unit The Xilinx APU-FPU is a fabric co-processor bus FC B bound co-processor that extends the native PPC405 I SA to include support for single-precision floating-point  operations Running at half the CPU frequency it c an achieve a sustained performance of up to 100 MFLOPS  with only modest resource utilization  about 5 on  the V4FX60 FPGA [8   The FPU consists of an FCB interface component, exe cution control and decode logic, a 32-bit register file \(c ontaining 32 registers and the various individual execution un its for floating-point operations As a Xilinx supplied Log iCORE only the top level inputs/outputs of the FPU are vi sible to the developer for interfacing The user has the opt ion of selecting between the “lite” \(no div/sqrt\ and the full” \(with div/sqrt\ configurations [8    Fig. 9 FTIR system with FPU co-processor Inserting the FPU core into an existing PowerPC sys tem is a four step process [8    


 7 1  Configure the PPC405 processor to enable APU controller operation set APU control configuration  register to initial value of 0b1  2  Insert the FCB core and configure it to use process or clock and bus reset 3  Insert the FPU core, select the appropriate configu ration lite or full and configure it to use the half rate clock 4  Connect the FCB to the processor \(master\ and the F PU slave The FPU \(in “full” configuration\ is added to the F TIR base system hardware design following the steps outlined above The diagram in Figure 9 represents this new system  With the FPU in the system all single-precision fl oatingpoint arithmetic is now done in the hardware and th e Xilinx supplied GCC compiler automatically generates hardw are floating-point instructions However for the FTIR software to function properly all precompiled libraries mus t be recompiled with hardware FPU support enabled In particular this applies to libf2c  and Perflib  The recompilation of libf2c is extensively documented in [1    As for Perflib it is not supported by Xilinx to work with the FPU because both overlap in their optimization of s ingleprecision floating-point arithmetic the FPU only h andles single-precision floating-point arithmetic while Perflib  optimizes both singe and double-precision floatingpoint arithmetic\. This creates a conflict, which can be resolved by separating the double-precision optimization routin es provided by Perflib  and relying on the FPU for all singleprecision arithmetic. This provides the best of bot h worlds good double-precision performance through Perflib and excellent single-precision performance though the h ardware FPU String optimization part of the original Perflib  package is not necessary in the case of the FTIR spectrometry algorithm because most time is spent o n floating-point arithmetic Table 5 lists the optimized floating-point routines  provided in the original Perflib package It was determined that only the double-precision routines from Perflib can exist alongside the hardware FPU The conversion routines  did not work properly when deployed in a system with th e FPU present. Thus, the original Perflib makefile was modified to only compile the following routines into the librar y  fadd  fsub  fmul  fdiv  fcmpd  Complete instructions for recompiling Perflib and using it in a system with the FPU are presented in [1   The FTIR system with a hardware FPU single-precisi on math functions and double-precision Perflib optimization demonstrates a significant speedup over previous implementations. As seen in Table 6, this build ach ieves an almost eight-fold reduction in the overall executio n time This comes at no price to the accuracy The maximum  deviation is still reported as 0.0009795 Table 5  Optimized floating-point routines provided by Perflib  Routine Type Description fadd DP add two DP numbers fsub DP subtract two DP numbers fmul DP multiply two DP numbers fdiv DP divide two DP numbers fadds SP add two SP numbers fsubs SP subtract two SP numbers fmuls SP multiply two SP numbers fdivs SP divide two SP numbers dtof conv convert DP to SP ftod conv convert SP to DP dtoi conv convert DP to INT ftoi conv convert SP to INT fcmpd DP compare two DP numbers fcmps SP compare two SP numbers fneg SP/DP negate a SP or DP number itod conv convert INT to DP itof conv convert INT to SP ftoui conv convert SP to unsigned INT dtoui conv convert DP to unsigned INT  Table 6  Execution times for system with APU-FPU, SP math functions, and DP Perflib  SW Optimizations None base system SP Math IBM Perflib \(DP  HW Optimizations None base system APU-FPU 100 MHz  PPC405 Freq 200 MHz 200 MHz  Interferograms 1 1  Detectors 1 1  Software Component Time \(sec Time \(sec Speedup Re-sampling 1197.7938 151.1817 7.92x Spectrum \(Phase Correction, FFT 117.4963 14.3672 8.18x TOTAL 1315.2901 165.5489 7.95x   Fig 10  Profiling results for system with APU-FPU SP math functions, and DP Perflib  The hardware FPU single-precision math functions and double-precision Perflib are general optimizations that can be applied to almost any type of data processing sy stem that requires extensive floating-point arithmetic Once these optimizations are implemented the next step is to look at more application specific ways to reduce the execut ion time For this matter the profiling information is extre mely 


 8 important The profile of the current build is show n in Figure 10 The most time consuming routine here is dotprod_  accounting for almost 10 of CPU time This function is part of the re-sampling step and is tar geted for a hardware implementation, as described in the next s ection Dot-product Hardware Co-processor The dotprod function computes the scalar product of interpolation operators and the input function and is part of the re-sampling step. The computationally intensive portion of the function is shown in the code segment below   for i__ = 1; i__ <= i__1; ++i__ Dot product fin\(kin+1\ with oper\(1,j ret_val  ret_val  fin[i__  kin    o p e r  i _ _    j    oper_dim1    fin[*nop + 1 - i__ + kin    o p e r  i _ _    j r    o p e r _ d i m1      As shown in the code segment above the format of computing the dot product is as follows retval  retval  fin  a   oper  b     fin  c   oper  d   In the notation above the  and  signs inside  the brackets indicate the direction of change i.e inc rementing or decrementing index In this case the dot-produ ct is calculated from both ends of the operator array simultaneously. Since the largest values are typica lly located in the middle of the operator array a higher degre e of precision is achieved by working with these values in the final steps of the computation However this comes  at the price of longer memory latencies as the array acces s is not consecutive One iteration in the loop requires two multiplicati ons an addition and an accumulation all in single-precis ion floating-point format. After studying the APU-FPU l atencies associated with these operations it was determined  that a more efficient solution to computing the dot-produc t can be achieved by building a dedicated dot-product co-pro cessor from individual floating-point operators that are a vailable as part of the Xilinx IP collection This additional f abric coprocessor module FCM communicates with the PPC405  through the APU, sharing the FCB with the FPU. It c onsists of a load/store unit and an arithmetic core The lo ad/store unit facilitates data transfers to and from the FCB while the arithmetic core computes the dot-product \(Figure 11  Communicating with the dot-product core from the so ftware is a matter of issuing FCM load/store instructions that can transfer up 16 bytes of data at a time \(four single precision floats This coincides with the structure of the dotprod  function which operates on four new data points per  iteration Details on setting up FCM quadword trans fers in the software are given in [1    Fig 11  FCM load/store unit interface to FCB and dotproduct co-processor arithmetic core  Fig. 12 Dot-product arithmetic core block diagram The design of the dot-product arithmetic core is sh own in Figure 12 above Two single-precision floating poin t multipliers and two adders are used in the core Th e maximum latency in any one stage is 7 cycles which  corresponds to the best case issue rate of FCM load  instructions 7 The total latency of the core is 22 cycles, after  which the result is produced every seven cycles Th e accumulator in the reduction circuit has its feedba ck signal    7 The FCM load issue rate depends on the current sta te of the CPU pipeline and the availability of load data in cache Lower l atencies for the multipliers and adders can be achieved at the expen se of lowering the frequency In this design, the target frequency is the FCB frequency \(200 MHz  


 9 asynchronously latched This is to ensure data appe ars on the input of the final adder in time for the next a ccumulation Care must be taken when implementing a high frequen cy design with such a latch In particular, the latch delay must be constrained not to exceed one clock cycle  Fig. 13 FTIR system with dot-product co-processor The dot-product core is added to the FTIR base syst em initially without the FPU coprocessor This is done  to first validate proper dot-product core functionality in h ardware before putting it on the FCB with another unit \(i.e the FPU A system diagram of this hardware configuration is shown in Figure 13 above Table 7  Execution times for system with dot-product co-processor, SP math functions, and Perflib  SW Optimizations None base system SP Math IBM Perflib  HW Optimizations None base system Dot-prod 200 MHz  PPC405 Freq 200 MHz 200 MHz  Interferograms 1 1  Detectors 1 1  Software Component Time \(sec Time \(sec Speedup Re-sampling 1197.7938 211.4479 5.66x Spectrum \(Phase Correction, FFT 117.4963 44.4456 2.64x TOTAL 1315.2901 255.8935 5.14x   The GCC compiler is not well suited to work with cu stom hardware that integrates with the processor down at  the instruction level This is quite a nuisance especia lly when compiler optimization is turned on. Such optimizati ons often cause incorrect rearrangement of instructions and o veroptimization of data accesses For this matter cert ain modification are required in the software, some of which are very obscure These necessary modifications are dis cussed in detail in [1   The FTIR system with the dot-product co-processor b uilds successfully meeting all timing constraints and pr oducing accurate results Table 7 This system has a lower  total execution time than the SW-only optimized FTIR buil d with SP math functions and Perflib Table 4\. However, the execution time is higher than on the FTIR system wi th the FPU co-processor FPU system speedup = 7.95x, Table 6 This is because the FPU optimizes all single-precis ion floating-point arithmetic whereas the dot-product c oprocessor only optimizes the dot-product calculatio n Nevertheless the core produces accurate results an d achieves a good speedup over the software FPU / Dot-product Compatibility and Integration With the dot-product core functionality verified, t he FPU is put back into the system Figure 14 This configur ation where the FPU is sharing the FCB with another coprocessor, has never been tested by Xilinx  Fig 14  FTIR system with dot-product and FPU coprocessors There are two issues with the FPU in Xilinx Platfor m Studio 9.1.02i that prevent it from working properly with another co-processor on the FCB The first issue deals with  instruction decoding Both the FCM load/store instr uction and the FPU load/store instruction share the same p rimary op-code 31 The only difference between the two instructions is in the first bit of the extended op code 9   


 10 While debugging with the ChipScope Logic Analyzer c ore it was found that the FPU attempted to decode ordin ary FCM load/store instructions This of course cause d a conflict on the FCB as the load/store core of the d ot-product co-processor also attempted to decode this instruct ion Xilinx quickly fixed this issue and delivered an up dated FPU core that properly ignored FCM load/store instructions 8  The second issue deals with the FCMAPULOADWAIT signal that is part of the FCB interface. This sign al is used to indicate to the APU controller that the FCM is not yet ready to receive the next load data The FPU constantly t oggles this line as part of its internal synchronization l ogic that lets it operate at half the clock rate of the FCB When other cores are present on the FCB toggling the FCMAPULOADWAIT signal interferes with their operation since the FCB is basically a wired-or bus. This was the case with the dot-product co-processor which would not load data correctly with the FPU toggling the FCMAPULOADWAIT signal. According to Xilinx, the FPU only needs to use the FCMAPULOADWAIT  signal under two conditions 1  The APU controller sends the two halves of a double precision load transfer back-to-back, and the FPU c an’t keep up 2  The APU controller flushes an outstanding operation  and then immediately provides load data to the FPU before it has had time to process the flush The first scenario does not apply to this design as  the FPU only supports single-precision floating-point opera tion The second scenario is, according to Xilinx, “unlikely although the probability of it happening depends on the code  being executed. Since the FPU implementation is hidden fr om the developer the only possible but not ideal soluti on to this issue is to disconnect the FCMAPULOADWAIT signal from the FPU Future releases of XPS will most likely fi x this issue at its source Table 8  Execution times for system with dot-product and FPU co-processors, SP math functions, and DP Perflib  SW Optimizations None base system SP Math IBM Perflib  HW Optimizations None base system APU-FPU \(100 MHz Dot-prod \(200 MHz  PPC405 Freq 200 MHz 200 MHz  Interferograms 1 1  Detectors 1 1  Software Component Time \(sec Time \(sec Speedup Re-sampling 1197.7938 149.3297 8.02x Spectrum \(Phase Correction, FFT 117.4963 14.3675 8.18x TOTAL 1315.2901 163.6972 8.03x     8 The updated FPU should be available in future rele ases of XPS The results in Table 8 show only a small improvemen t over the execution times observed with an FPU-only syste m no dot-product co-processor, Table 6\. One explanation for this is a higher than expected overhead in getting the d ata from memory to the dot-product co-processor To confirm this theory a number of similar systems were built and the performance of the dot-product core was compared to  the FPU when working with a smaller data set both from external DDR2 memory and on-chip block ram BRAM memory Perflib  was used in all tests to optimize software performance The CPU frequency was fixed to 200 MHz  The results are summarized in Table 9 below Table 9  Dot-product core testing with smaller data set Mem Type SW sec FPU sec Dot-prod sec Dot-prod Speedup BRAM 0.0065  0.00032 20.26x DDR2 0.0026  0.00042 6.13x BRAM  0.00070 0.00032 2.18x DDR2  0.00082 0.00042 1.94x  A few conclusions can be made from the data above First the dot-product core is about twice the speed of th e FPU when not starved for data.  It is clearly evident t hat working with a smaller more contiguous data set results in  better performance than working with larger less organize d chunks of data, as seen in the FTIR spectrometry al gorithm Additionally, both the FPU and the dot-product co-p rocessor achieve better execution times when the data set is  stored entirely in BRAM The results also indicate that th e performance of the dot-product co-processor is not significantly affected by the addition of the FPU t o the FCB in other words the two co-processors sharing the s ame bus are not slowing each other down Even though the do tproduct core is a valid co-processor, it only impro ves system performance under favorable memory access condition s which is not the case in the FTIR spectrometry algo rithm  Fig 15  Profiling results for system with dot-product and FPU co-processors, SP math functions, and DP Perflib  In the execution time profile Figure 15 the dotprod_ function is shown to consume less CPU time than bef ore With both the FPU and dot-product co-processor the  


 11 dotprod_ function consumes 2.95 of the CPU time compared to the previously observed value of 9.97 Figure 10 However this does not mean the function execu ted faster. In fact, as seen in the results in Table 8 the speedup is negligible compared to an FPU-only system Table  6 The value for dotprod_ function is lower because the profiler does not include helper functions that are  called within the dotprod_ function otherwise the function main would consume 100% of CPU time\. These helper funct ions could include various low level data copy and manip ulation operations. In fact, the profile now shows new func tions that take up significant CPU time that were not visible before for example memcpy  The cumulative contribution of the helper functions to the overall execution time is t he reason why little speedup is seen with the dot-product coprocessor even with the dotprod_ function itself taking up less CPU time 6  R ESULTS A NALYSIS  Table 10 presents the execution times of all system s described in this paper Without a doubt the two s oftware optimizations using single-precision math library and Perflib  and the inclusion of the APU-FPU core together provide impressive speedup across the board That i s because the aforementioned optimizations affect nea rly all portions of the FTIR software improving both singl eprecision SP math functions and APU-FPU as well a s double-precision arithmetic Perflib  The dot-product co-processor core, however, has alm ost no effect on the system performance. This is most like ly due to the noncontiguous pattern of memory access in the d otproduct computation of the FTIR spectrometry algori thm As was shown earlier, smaller more uniformly access ed data sets can achieve nearly 2x speedup over the FPU whe n using the dot-product co-processor Comparing the best performing FTIR system build on the ML410 development board to a V2P based NASA JPL implementation in 7  s h o w s  a n  o v e r a l l  s p e e d u p  o f  1 78x Table 11 The results of the best performing FTIR  build are first scaled to the appropriate number of inter ferograms and detectors to match what was used in the NASA JP L V2P research task. The reported speedup is seen even th ough the CPU on the ML410 system is clocked at a lower frequ ency than on the V2P In Table 12 the execution times of the best perform ing FTIR system are compared to the execution times of the B AE RAD750 SBC evaluated at NASA JPL 7   E v e n  w i t h  hardware and software optimizations the FTIR syste m on the V4FX hybrid-FPGA still lags behind a software-o nly implementation on the RAD750 however the margin i s a lot smaller than anything seen previously Overall  the FPGA system processes the data about 4.5x slower th an the RAD750 This is mostly due to the time spent in the  resampling phase of the FTIR spectrometry algorithm The spectrum computation is actually faster on the FPGA  than on the RAD750 \(1.14x speedup\. Additionally, the FP GA is only utilizing one of its two PPC405 cores A dualcore implementation will narrow the margin even further  Table 10  Execution times for all V4FX FTIR system builds CPU \(MHz FPU \(MHz Dot-prod \(MHz SP Math Perflib Re-sampling \(sec Spectrum \(sec Total \(sec Speedu p 200   n  1197.7938 117.4963 1315.2901 1.00x 200   y  780.9376 109.9881 890.9257 1.48x 200   y standard 244.1836 44.4243 288.6079 4.56x 200 100  y DP-only 151.1817 14.3672 165.5489 7.95x  200  200 y standard 211.4479 44.4456 255.8935 5.14 x 200 100 200 y DP-only 149.3297 14.3675 163.6972 8.0 3x      V2P NASA JPL ML410 Xilinx    RAD750 BAE ML410 Xilinx  SW Optimizations IBM Perflib standard SP Math IBM Perflib   SW Optimizations None SP Math IBM Perflib  HW Optimizations None APU-FPU \(100 MHz Dot-prod \(200 MHz   HW Optimizations Native FPU APU-FPU \(100 MHz Dot-prod \(200 MHz  PPC405 Freq 300 MHz 200 MHz   PPC405 Freq 133.33 MHz 200 MHz  Interferograms 104 scaled to 104   Interferograms 1 04 scaled to 104  Detectors 2 scaled to 2   Detectors 2 scaled to 2  Software Component Time \(min Time \(min Speedup  Software Component Time \(min Time \(min Speedup Re-sampling 780 518 1.51x  Re-sampling 69 518 0.13x  Spectrum \(Phase Correction, FFT 142+90 50 4.64x  Spectrum \(Phase Correction, FFT 42+15 50 1.14x TOTAL 1012 568 1.78x  TOTAL 126 568 0.22x  Table 11  Execution times for best performing FTIR system on ML410 board and comparison to NASA JPL V2P board [7  Table 12  Execution times for best performing FTIR system on ML410 board and comparison to BAE RAD750 SBC [7  


 12 7  C ONCLUSIONS AND F UTURE W ORK  This research task started with an all-FORTRAN implementation of the FTIR spectrometry algorithm converted it to C code, and developed a number of H W/SW systems on the V4FX60 hybrid-FPGA The execution ti me of the all software C implementation of the FTIR spectrometry algorithm was recorded and used for comparison as a base case Two software-based optimizations were applied that reduced the executi on time by more than 4.5x These included modifying the cod e to use all single-precision math library functions no n-ANSI when dealing with single-precision data and utilizi ng the IBM Performance Libraries  Perflib  to improve the speed of all single and double-precision arithmetic The idea of using a DP-only Perflib was introduced and then used in conjunction with the single-precision APU-FPU to fu rther improve system performance The bulk of the research dealt with looking into ha rdwarebased improvements to the FTIR spectrometry system  These included the Xilinx APU-FPU, and a single-pre cision dot-product co-processor The APU-FPU delivered significant speedup for all single-precision floati ng-point operations The dot-product co-processor although ineffective in the FTIR spectrometry system due to poor spatial locality of the data, showed nearly a 2x im provement over the APU-FPU when working with smaller, sequent ially accessed data sets Furthermore it was implemented  as a load/store-based APU-connected FCM thus establishin g a reference for creating similar APU co-processors T he design of a non-system-bused CPU-coupled co-process or is frequently overlooked in design guides yet it is a  very effective way to offload software routines to hardw are implementation The ML410 development board on which all of this w ork was conducted, hosts the V4FX60 hybrid-FPGA contain ing two PPC405 processors This research task focused o n optimizing the performance of the FTIR spectrometry  algorithm on a single PPC405 core, however, the des ign can be extended to utilize both available cores. Figure 16 on the following page shows a dual-core design that can be  implemented on the ML410 board The two PPC405 processors each have dedicated PLB interfaces but s hare a common OPB. On the common OPB, the processors need to negotiate access to the RS232 UART and SystemACE CF  controller. This negotiation can be done through du al-ported shared BRAM accessible by each processor from thei r respective PLB. The ML410 board has two external me mory interfaces that are both utilized in this concept PPC405 CPU0 uses the DDR2 DIMM 256 Mbytes while PPC405 CPU1 utilizes the DDR on-board component memory 64  Mbytes\. Each of the processors has some dedicated on-chip memory OCM connected through OCM interface The instruction side OCM is particularly necessary so e ach processor can store its own boot code in its own on chip memory as booting both processors from external mem ory may not be possible Both processors have their own FPUs connected on dedicated FCB interfaces Since the processing of individual interferograms is a comple tely independent task an up to 2x reduction in executio n time may be possible with a dual-core system However o ne bottleneck that may limit the speedup is negotiatin g access to the shared CF card controller Additional improvement to the overall performance o f the FTIR spectrometry system may be possible by rewriti ng the software in C. The automatic conversion from FORTRA N to C using f2c most likely does not produce optimal code, and it is certainly not appealing to read Some functio ns may also need to be rewritten with an optimized pattern  of data access This can help in cases such as the dot-prod uct coprocessor Further performance improvement may be achieved by trying a different compiler one that is specifical ly targeted for the embedded PPC405 processor A V2P performanc e study done at the NASA Goddard Space Flight Center concluded that using the WindRiver Diab DCC 5.2 com piler provides a 38 performance increase over the GNU-GC C 3.4 compiler The comparison was based on running a  Dhrystone benchmark application on a 400 MHz PPC405 design The GNU-GCC compiler achieved 458 DMIPS while the WindRiver Diab DCC achieved 628 DMIPS as  reported by Xilinx\ [10   Implementing additional hardware co-processors may result in the further reduction of execution time Using t he dotproduct design as a reference the FFT function fo r example can be implemented in the hardware This w ill help in the spectrum computation component of the s oftware processing. It may be necessary to re-arrange the d ata access pattern for optimal co-processor performance to av oid the pitfall seen when deploying the dot-product core Finally, no embedded processing system is complete without an OS. Linux is a good choice and is supported by X ilinx in EDK It is important to first finalize the hardware  design prior to deploying the OS Support for the APU may be lacking in Linux and getting the OS to recognize th e hardware FPU may be a project in itself For the FTIR spectrometry algorithm this research task started the process of moving from an all software system to a mixed HW/SW implementation on the V4FX60 hybridFPGA In the best case a more than 8x speedup was achieved compared to the FTIR base system This implementation, although nearly 2x faster the V2P s ystem at NASA JPL still lags behind the current state-of-th e-art space processor  the BAE RAD750 However the marg in between the two was narrowed down significantly and with further research as suggested above will most lik ely be eliminated altogether Directly benefiting from the  work presented in this paper is a 3-year JPL technology 


 13 development task that will support the MATMOS on-bo ard processing implementation for a future flight i nstrument   Fig. 16 Dual-core concept targeting ML410 development boar d 


 14 R EFERENCES  1  D L Bekker Hardware and Software Optimization of Fourier Transform Infrared Spectrometry on HybridFPGAs  MS Thesis Rochester Institute of Technology Rochester NY August 2007 Available http://hdl.handle.net/1850/4805  2  P J Pingree J.-F L Blavier G C Toon and D  L Bekker An FPGA/SoC Approach to On-Board Data Processing  Enabling New Mars Science with Smart Payloads in IEEE Aerospace Conference 2007  Big Sky MT March 2007 Available http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?isnu mber=4 144550&arnumber=4161501  3  S I Feldman D M Gay M W Maimone and N L Schryer, “A Fortran-to-C Converter,” Computing Scie nce Technical Report 149, AT&T Bell Laboratories, Murra y Hill NJ March 22 1995 Available http://www.netlib.org/f2c/f2c.pdf  4  IBM PowerPC Embedded Processor Performance Libraries tech rep IBM Microelectronics Divisi on Hopewell Junction, NY, December 12 2003 5  Virtex-4 Data Sheet: DC and Switching Characterist ics Datasheet DS302 Xilinx Inc San Jose CA March 27 2007 Available http://www.xilinx.com/bvdocs/publications/ds302.pdf  6  ML410 Embedded Development Platform  Xilinx Inc San Jose CA March 6 2007 Available http://www.xilinx.com/bvdocs/userguides/ug085.pdf  7  G Toon J.-F Blavier M McAuley and A Kiely Advanced On-Board Science Data Processing System for a Mars-orbiting FTIR Spectrometer R&TD Task 01STCR  R.05.023.048 NASA Jet Propulsion Laboratory Pasadena, CA, 2005 8  APU Floating-Point Unit v3.0 product specificati on Xilinx Inc San Jose CA January 26 2007 Availa ble http://www.xilinx.com/bvdocs/ipcenter/data_sheet/ap u_fp u.pdf  9  PowerPC 405 Processor Block Reference Guide Xilinx Inc San Jose CA July 20 2005 Available www.xilinx.com/bvdocs/userguides/ug018.pdf  10  D. Petrick, “Analyzing the Xilinx Virtex-II Pro Pow erPC with the Dhrystone Benchmark Applications,” tech. r ep NASA Goddard Space Flight Center Greenbelt Maryland Available http://klabs.org/DEI/Processor/PowerPC/v2pro_ppc_pe rf ormance_petrick.doc  B IOGRAPHY  Dmitriy Bekker has just completed his Masters Degree in Computer Engineering at the Rochester Institute of Technology in Rochester NY His areas of interest include FPGAs embedded systems digital signal processing and system architecture. He has coop  internship experience working at Brookhaven National Laboratory Syracuse Research Corporation NASA Dryden Flight Research Center, and the Jet Propulsion Laboratory. He recen tly won in the 2006 IEEE Student Design Contest for his pro ject in autonomous vehicle navigation. He is a member of IE EE Dr Lukowiak is an assistant professor in the Computer Engineering Department at Rochester Institute of Technology in Rochester NY His research interests are concentrated in the area of multidisciplinary projects that require modeling and hardware implementations FPGA and ASIC of data processing systems Dr Marcin Lukowi ak obtained his Ph.D in Technical Sciences from the P oznan University of Technology in October 2001 Muhammad Shaaban is an associate professor of computer engineering at the Rochester Institute of Technology His research interests include high performance computing processor microarchitecture heterogeneous and reconfigurable computing Shaaban has a PhD in Computer Engineering from the University of Souther n California. He is a senior member of the IEEE Dr. Blavier first joined the JPLMkIV Team in August 1985 as a contractor from Ball Aerospace He participated in the MkIV campaigns in McMurdo Antarctica groundbased and from Punta Arenas Chile NASA DC-8 In late 1987, he started graduate work with Profs Delbouille and Dubois at the University  of Liège Belgium his research tasks included install ing the 


 15 Fourier transform spectrometers at the Internationa l Scientific Station of the Jungfraujoch Switzerland  for atmospheric measurements and at the Institute of Astrophysics in Liège for laboratory measurements He was hired by JPL in August 1990 as MkIV cognizant engin eer and participated in all the MkIV campaigns since th en \(one DC-8 campaign 19 balloon campaigns Dr J.-F Bla vier obtained his Ph.D in Physics from the University o f Liège in July 1998 Paula Pingree is a Senior Engineer in the Instruments and Science Data Systems Division at JPL She has been involved in the design integration test and operation of several JPL flight projects most recently Deep Impact DI She has worked on the Tunable Laser Spectrometer development for the 2009 Mars Rover and is presently the Electronics CogE for the Juno Mission s Microwave Radiometer She also enjoys research and technology development for Smart Payloads in her s pare time Paula has a Bachelor of Engineering degree i n Electrical Engineering from Stevens Institute of Te chnology in Hoboken, NJ, and an MSEE degree from California State University Northridge.  She is a member of IEEE 


  16  Figure 15. AIRS-AMSRE differences as a function of AIRS error estimate over one day  AIRS has an error estimate of the total water vapor value that it calculates. The diffe rences between AIRS and AMSR-E are shown as a function of this estimate in figure 15 and very little correlation is found 11  R ELEVANT W ORK  Merged A-Train Level 2 Data A merged product that preserves the relationship of observed atmospheric water properties facilitates the hydrological studies by enabling scientists to get directly at the model data without worrying about the logistics of finding, collecting, and coordinating the measured quantities from different instruments. Previously there did not exist a capability to discover and access data from the A-Train\222s multiple instruments as merged multi-parameter data sets Enabling Orchestratable Service Workflows Our distributed service-oriented approach of loosely coupled services also enable s a higher level of reusability and orchestration with other services. Increasing numbers of workflow engines are already supporting Web Services as components/operators, which can then be orchestrated together into higher-level meta/virtual services SciFlo, a Scientific Dataflow Execution Environment, is a workflow engine that already supports assembling reusable SOAP Services, native execu tables, local command-line scripts, and codes into a distributed computing flow \(a graph of operators\8 SciFlo can u tilize o u r g en eric SOAP services as part of a larger coordinated data flow The Taverna Workbench is a free software tool for designing and executing workflows. Like SciFlo, it can orchestrate SOAP-based Web Services as components within a workflow. Taverna provides a visual editor to construct and edit the sequence of services in the workflow We have found that Taverna can dynamically introspect a given WSDL and construct the workflow component interface representing it Giovanni Giovanni, an acronym for the Goddard Earth Sciences Data and Information Services Cent er, or GES DISC, Interactive Online Visualization and Analys is Infrastructure, is a webbased tool to help visualize Earth science data  It  provides a simple and intuitive way to visualize, analyze and access vast amounts of Eart h science remote sensing data without having to download the data. Similar to the services developed here, it addresses the difficulties of traditional data acquisition and analysis methods by moving the complexity to the server-side Giovanni provides multiple in terface instances based on instrument and measurement ty pes. For example, the \223ATrain Along CloudSat Track Inst ance\224 can provide plots of vertical profiles of clouds, temperature, humidity, cloud and aerosol classification across the multiple instruments of the A-Train A distinction between Givanni\222s A-Train data and the data set in this paper is that we are using a formal merged product of the A-Train. We leverage the NEWS effort that is based on error- and resolution-weighted mean of the input data sets, with associated uncertainty estimates. This provides a formal model of the collective A-Train observations rather than the collection of the individual instrument measurements Each of Giovanni\222s multiple interface instances provides a very simple and easy to use web interface. However, we recognized that sometimes scientists want more than the simple interfaces. Some scien tists may want to process Level 3 products using their own trusted code, or may want to perform variations of their own plots. With Giovanni, the individual scientist wanting more custom advanced capabilities must depend on the Giovanni development team Giovanni is based on the web portal paradigm where users visit a web page and use web tools to find and visualize data. Similar to Giovanni, our client APIs also make data acquisition more seamless. However, our services are based on the different paradigm were the power and flexibility of data analysis and processing are shifted back into the scientists own familiar computing environments. We realize that scientists generally want to perform \223exploratory computing\224 where they can sere ndipitously analyze the data using their own familiar and trusted code 


  17 Giovanni 2 was inherently synchronous where processing was bounded to a single http session. Long service running times still require the user to hold the same http session Similar to our asynchronous Web Service we discussed, the upcoming Giovanni 3 will be supporting asynchronous sessions. They will be using a RSS feed to monitor the service request. Version 3 will also be based on a servicesoriented architecture, wher e Giovanni services can be offered as a standard SOAP Web Services. This is similar to our approach, as well as SciFlo\222s services 12  C ONCLUSIONS  To achieve the science research goal of investigating longterm and global-scale trends in climate, water and energy cycle, and weather variability, we enhanced and improved on existing algorithms to work with distributed and heterogeneous data and information systems infrastructure By developing a service-oriented architecture for discovering, accessing, and mani pulating of NEWS merged A-Train data sets, we can strengthen the interconnectedness and reusability of these services across broader range of Earth science investigations The merged NEWS Level 2 data is a formal model containing the voluminous data from the AIRS, AMSR-E MLS, MODIS, and CloudSat instruments. Previously scientists wanting to perform long-term and global-scale studies encompassing simultaneous measured quantities would quickly face a data acce ss hurdle of first finding the data, then manually downloading them, and finally merging the data into a cohesive model\227before starting their analysis. Additionally the voluminous nature of the data particularly because of the MODIS data\each scientist potentially downloading the same data resulting in redundancy of reprocessing on the client sides. Our paradigm pushes more of the commonly repeated processing onto the server side. Moreover, this avoids repeated downloading of the same data among the science users. We can deliver customi zed averaged, subsetted, and summarized data of the merged A-Train observations to the scientists for them to immediately begin their analysis work We recognized that scientists also often want to perform 223exploratory computing\224 where they can freely explore the aspects of the data and run serendipitous exploration in their own familiar environment. We developed client-side distributed APIs in popular analysis environments such as Matlab, IDL, and Python. Our APIs hide the complexity of Web Services and allow the service capabilities to be embedded in the scientists own computing environments By purposely avoiding the \223web portal\224 paradigm and providing the suite of platform specific APIs in each of these language platforms, we enable the scientists to remain within their own familiar environments to select, process and download the data seamlessly into their environment for their own further analysis. Alternative methods involving web portals force the scientists to leave the environment and manually interact with the web portal to search and download the data We can examine not only long-term changes in amplitude of a single variable but also those among multiple variables Our L3Q clustering method was specifically designed to preserve information about the covariability of multiple observations, such as those from the A-Train.  Weather and climate variability is characterized by changes among atmospheric observables, but those changes have been limited by a lack of observations and analytical techniques We are not aware of any multi-parameter analyses to date The full potential of the A-Train climate record will not be realized until the multi-parameter climatology is understood. The work presented is one method of approaching this difficult problem Our service tool addresses several objectives of the NASA Earth science data community including 1\mprove interoperability to facilitate the transparent access and manipulation of heterogeneous and distributed data by science users, 2\ransition and deploy existing Earth science research analysis tools and software using a 223Service Oriented Architecture\224 \(SOA\ to enhance their reuse potential for other science domains and improve overall awareness and access of these tools by a broad community, 3\ increase users\222 ability to customize their discovery, access, deliv ery, manipulation, and preferred format of data and information 12  F UTURE W ORK  On-demand Level 3T Summaries from Level 3Q We plan to develop services for creating custom summaries of the L3Q data into more refined Level 3T summaries L3T\create their own custom Level 3 products on demand from L3Q. The custom Level 3 products are the transformation of L3Q data based on user-specific objectives such as regression and correlation analyses. The cust om production will generate not only the transformed data but also the statistical estimation of the accuracy of the summarized data based on the distribution of L3Q and the quality of L3Q Delegating the Temporal-Spatial Data Querying Currently, our processing layer utilizes existing and legacy processing code that was developed in IDL, Matlab, and C++. Though the original intent was to be able to adapt existing code and wrap as a service, this meant maintaining its original form of accessing the source data for processing Small modifications were made to enable these codes to quickly access the data based on file path and file naming schemes. However, we want to decouple the file accessibility and processing roles 


  18 We plan to shift the file search and accessibility aspect outside of the IDL/Matlab/C++ code thereby treating it more as a processing \223engine\224. SciFlo\222s geoRegionQuery service can be used as a generic temporal and spatial search that returns a list of matching file URLs \(local file paths if the files are located on the same system geoRegionQuery service relies on a populated MySQL databases containing the list of indexed data files. We then also plan to leverage SciFlo\222s data crawler to index our staged merged NEWS Level 2 data products Improving Access to the A-Train Data Collection Currently, the NEWS task collects the various A-Train data products for merging using a mixture of manual downloading via SFTP and automated shell scripts. This semi-manual process can be automated into a serviceoriented architecture that can automatically access and download the various Level 2 instrument data from their respective data archive center. This will be simplified if more data centers support OPeNDAP, which will aid in data access. OPeNDAP will also allow us to selectively only download the measured properties of interest to the NEWS community for hydrology studies. Additionally OpenSearch, an open method using the REST-based service interface to perform searches can be made available to our staged A-Train data. Our various services such as averaging and subsetting can be modified to perform the OpenSearch to determine the location of the corresponding spatially and temporally relevant data to process. This exposed data via OpenSearch can also be made available as a search service for other external entities interested in our data as well Atom Service Casting We may explore Atom Service Casting to advertise our Web Services. Various services can be easily aggregated to create a catalog of services th at are published in RSS/Atom syndication feeds. This allows clients interested in accessing and using our data services to easily discover and find our WSDL URLs. Essentially, Atom Service Casting may be viewed as a more human-friendly approach to UDDI R EFERENCES   NASA and Energy and W a t e r cy cl e St udy NEW S website: http://www.nasa-news.org  R odgers, C  D., and B  J. C onnor \(2003 223Intercomparison of remote sounding instruments\224, J Geophys. Res., 108\(D3 doi:10.1029/2002JD002299  R ead, W G., Z. Shi ppony and W V. Sny d er \(2006 223The clear-sky unpolarized forward model for the EOS Aura microwave limb sounder \(MLS Transactions on Geosciences and Remote Sensing: The EOS Aura Mission, 44, 1367-1379  Schwartz, M. J., A. Lam b ert, G. L. Manney, W  G. Read N. J. Livesey, L. Froidevaux, C. O. Ao, P. F. Bernath, C D. Boone, R. E. Cofield, W. H. Daffer, B. J. Drouin, E. J Fetzer, R. A. Fuller, R. F. Jar not, J. H. Jiang, Y. B. Jiang B. W. Knosp, K. Krueger, J.-L. F. Li, M. G. Mlynczak, S Pawson, J. M. Russell III, M. L. Santee, W. V. Snyder, P C. Stek, R. P. Thurstans, A. M. Tompkins, P. A. Wagner K. A. Walker, J. W. Waters and D. L. Wu \(2008 223Validation of the Aura Microwave Limb Sounder temperature and geopotential height measurements\224, J Geophys. Res., 113, D15, D15S11  Read, W G., A. Lam b ert, J Bacmeister, R. E. Cofield, L E. Christensen, D. T. Cuddy, W. H. Daffer, B. J. Drouin E. Fetzer, L. Froidevaux, R. Fuller, R. Herman, R. F Jarnot, J. H. Jiang, Y. B. Jiang, K. Kelly, B. W. Knosp, L J. Kovalenko, N. J. Livesey, H.-C. Liu1, G. L. Manney H. M. Pickett, H. C. Pumphrey, K. H. Rosenlof, X Sabounchi, M. L. Santee, M. J. Schwartz, W. V. Snyder P. C. Stek, H. Su, L. L. Takacs1, R. P. Thurstans, H Voemel, P. A. Wagner, J. W. Waters, C. R. Webster, E M. Weinstock and D. L. Wu \(2007\icrowave Limb Sounder upper tropospheric and lower stratospheric H2O and relative humidity with respect to ice validation\224 J. Geophys. Res., 112, D24S35 doi:10.1029/2007JD008752  Fetzer, E. J., W  G. Read, D. W a liser, B. H. Kahn, B Tian, H. V\366mel, F. W. Irion, H. Su, A. Eldering, M. de la Torre Juarez, J. Jiang and V. Dang \(2008\omparison of upper tropospheric water vapor observations from the Microwave Limb Sounder and Atmospheric Infrared Sounder\224, J. Geophys. Res., accepted  B.N. Lawrence, R. Drach, B.E. Eaton, J. M. Gregory, S C. Hankin, R.K. Lowry, R.K. Rew, and K. E. Taylo 2006\aintaining and Advancing the CF Standard for Earth System Science Community Data\224. Whitepaper on the Future of CF Governance, Support, and Committees  NEW S Data Inform ation Center \(NDIC http://www.nasa-news.org/ndic 


  19   Schi ndl er, U., Di epenbroek, M 2006 aport a l based on Open Archives Initiative Protocols and Apache Lucene\224, EGU2006. SRef-ID:1607-7962/gra/EGU06-A03716 8] SciFlo, website: https://sci flo.jpl.nasa.gov/SciFloWiki 9 ern a, web s ite: h ttp tav ern a.so u r cefo r g e.n et  Java API for XM L W e b Services \(JAX-W S https://jax-ws.dev.java.net  Di st ri but ed R e source M a nagem e nt Appl i cat i on DRMAA\aa.org  Sun Gri d Engi ne, websi t e   http://gridengine.sunsource.net  W 3 C R ecom m e ndat i on for XM L-bi nary Opt i m i zed Packaging \(XOP\te: http://www.w3.org/TR/xop10  W 3 C R ecom m e ndat i on for SOAP M e ssage Transmission Optimization Mechanism \(MTOM website: http://www.w3.org/TR/soap12-mtom  W 3 C R ecom m e ndat i on for R e source R e present a t i on SOAP Header Block, website http://www.w3.org/TR/soap12-rep 16] OPeNDAP, website: http://opendap.org  Yang, M Q., Lee, H. K., Gal l a gher, J. \(2008 223Accessing HDF5 data via OPeNDAP\224. 24th Conference on IIPS  ISO 8601 t h e Int e rnat i onal St andard for t h e representation of dates and times http://www.w3.org/TR/NOTE-datetime 19] ITT IDL, website http://www.ittvis.com/ProductServices/IDL.aspx 20] Python suds, website: h ttps://fedorahosted.org/suds  The gSOAP Tool ki t for SOAP W e b Servi ces and XM LBased Applications, website http://www.cs.fsu.edu/~engelen/soap.html  C hou, P.A., T. Lookabaugh, and R M Gray 1989 223Entropy-constrained vector quantization\224, IEEE Trans on Acoustics, Speech, and Signal Processing, 37, 31-42  M acQueen, Jam e s B 1967 e m e t hods for classification and analysis of multivariate observations\224 Proc. Fifth Berkeley Symp Mathematical Statistics and Probability, 1, 281-296  C over, Thom as. and Joy A. Thom as, \223El e m e nt s of Information Theory\224, Wiley, New York. 1991  B r averm a n, Am y 2002 om pressi ng m a ssi ve geophysical datasets using vector quantization\224, J Computational and Graphical Statistics, 11, 1, 44-62 26 Brav erm a n  A, E. Fetzer, A. Eld e rin g  S. Nittel an d K Leung \(2003\i-streaming quantization for remotesensing data\224, Journal of Computational and Graphical Statistics, 41, 759-780  Fetzer, E. J., B. H. Lam b rigtsen, A. Eldering, H. H Aumann, and M. T. Chahine, \223Biases in total precipitable water vapor climatologies from Atmospheric Infrared Sounder and Advanced Microwave Scanning Radiometer\224, J. Geophys. Res., 111, D09S16 doi:10.1029/2005JD006598. 2006 28 SciFlo Scien tific Dataflo w  site https://sciflo.jpl.nasa.gov  Gi ovanni websi t e   http://disc.sci.gsfc.nasa.gov techlab/giovanni/index.shtml  NASA Eart h Sci e nce Dat a Sy st em s W o rki ng Groups website http://esdswg.gsfc.nasa.gov/index.html   M i n, Di Yu, C h en, Gong, \223Augm ent i ng t h e OGC W e b Processing Service with Message-based Asynchronous Notification\224, IEEE International Geoscience & Remote Sensing Symposium. 2008 B IOGRAPHY  Hook Hua is a member of the High Capability Computing and Modeling Group at the Jet Propulsion Laboratory. He is the Principle Investigator of the service-oriented work presented in this paper, which is used to study long-term and global-scale atmospheric trends. He is also currently involved on the design and development of Web Services-based distributed workflows of heterogeneous models for Observing System Simulation Experiments OSSE\ to analyze instrument models. Hook was also the lead in the development of an ontology know ledge base and expert system with reasoning to represent the various processing and data aspects of Interferometric Synthetic Aperture Radar processing. Hook has also been involved with Web Services and dynamic language enhancements for the Satellite Orbit Analysis Program \(SOAP\ tool.  His other current work includes technology-portfolio assessment, human-robotic task planning & scheduling optimization, temporal resource scheduling, and analysis He developed the software frameworks used for constrained optimization utilizing graph search, binary integer programming, and genetic algorith ms. Hook received a B.S in Computer Science from the University of California, Los  


  20 Angeles, where he also received a B.S. in Applied Mathematics  Eric Fetzer is a Senior Member of the Technical Staff at the Jet Propulsion Laboratory, Pasadena, California specializing in satellite observations of the atmosphere.  His scientific interests include planetary boundary layer processes, tropical phenomena, upper tropospheric variability, and climatologies of temperature, water vapor and clouds.  His technical interests include analysis of large data sets, and of multi-sensor observations. He has over 20 peer-reviewed publications and given numerous scientific presentations, public lectures and media interviews about climate science. Eric received a B.A. in Physics from the University of California Berkeley, and a Ph.D. in Astrophysical, Planetary and Atmospheric Sciences from the University of Colorado, Boulder   Amy Braverman is a Senior Statistician at the Jet Propulsion Laboratory, California Institute of Technology She holds a B.A. in Economics from Swarthmore College an M.A. in Mathematics from UCLA, and a Ph.D. in Statistics also from UCLA. Prior to her current position in JPL's Science Data Understanding Group, she was a Caltech Post-doctoral Scholar at the Jet Propulsion Laboratory, and a Scientist in the Flight Sciences Experiments Section of the Science Division. Dr Braverman conducts research on information-theoretic methods for the analysis of massive data sets and streams statistical data fusion, high-dimensional data analysis, and statistical analysis for climate model evaluation and diagnosis. She has published in both the statistics and geoscience literature, and is active in both communities She is a member of the Multi-angle Imaging SpectroRadiometer Science Team, and serves as a member of the Atmospheric Infrared Sounder Science Integration Team. Her responsibilities on both missions include designing data reduction algorithms for massive, remote sensing data sets. Dr. Braverman also holds an appointment in the Department of Statistics at UCLA as Adjunct Associate Professor, and is active in UCLA\222s Center for Environmental Statistics. She is member of the Committee on Applied and Theoretical Statistics of the US National Academy of Science. She has refereed for the Journal of the American Statistical Association, the Journal of Computational and Gr aphical Statistics, IEEE Transactions on Geoscience and Remote Sensing, and the Journal of Applied Meteorology and Climatology Seungwon Lee is a senior member of the High Capability Computing and Modeling Group at Jet Propulsion Laboratory. She is conducti ng research on comet gas dynamics, nonlinear dynamics control, climate model parameterization, Earth science data analysis, parallel computing, and advanced numerical algorithms. She received her Ph.D in Physics fr om the Ohio State University and her M.S. and B.S. in Physics from the Seoul National University, Korea  Matthew Henderson is software engineer in the High Capability Computing and Mode ling group at JPL. His current work includes Web Services and Instrument Data Level 2 subsetting. He received a B.S. Computer Science from CSU Pomona, and is currently pursuing M.S Computer Science  Steven J. Lewis is a member of the Information System and Computer Science staff member at the Jet Propulsion Laboratory.  He received a BS in Mathematics from the University of California, Los Angeles in June 2001, and the MS and Ph.D. Degree from Claremont Graduate University in May 2004 and May 2007, respectively.  He worked as a post doctoral fellow at Keck Graduate Institute from June 2007 until he joined JPL in March of 2008.  During his graduate and post doctoral work, his studies focused on applications of Bayesian methods to hidden Markov models with particular interest and application to protein sequencing.  His work at JPL has focused on integrating web services into various programming platforms for the purposes of accessing NASA satellite data, as well as developing object tracking so ftware and contributing to image enhancement and restoration efforts Van Dang is a member of the Science Data Understanding Group at the Jet Propulsion Laboratory. She was responsible for the NEWS Level 2 processing that generated the formal merged Level 2 data from multiple A-Train instruments  Manuel de la Torre is a Physicist from the Universidad Complutense at Madrid \(Spain\. After finishing his Ph.D work at the University of Bayreuth \(Germany\ on pattern formation in turbulent flows and a 7 1/2 year stunt as Ass and Assoc. Prof. at the Escuela T\351cnica Superior de Ingenieros Aeron\341uticos in Madrid \(Spain\, he came to the Jet Propulsion Laboratory on a 1-year Sabatical leave in 1997 wanting to apply fundamental concepts of nonlinear systems and geophysical fluid dynamics to something that might be directly useful to soci ety. He discovered the JPL as a great place to achieve that goal and extende d his stay a bit longer, becoming Technical staff and working on different aspects of remote sensing, validation of satellite instruments, and data analysis of atmospheric processes and climate  


