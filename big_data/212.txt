CodeWeb Data Mining Library Reuse Patterns Amir Michail School of Computer Science and Engineering University of New South Wales Sydney, Australia amichail cse.unsw.edu.au Abstract Developers learn to use a sofnvare library not just from its documentation but also from toy examples and exist ing real-life application code e.g by using grep The CodeWeb tool takes this simple idea firther by a deeper analysis of a large collection of applications to see what characteristic usage of the library is like We demonstrate the 
tool by showing how the KDE core libraries are used in real-life KDE applications Moreover we look at a re cently developedfeature that helps software developersport an application from an old version of a library to a new one 1 Introduction While popular commercial libraries such as MFC are usually well-documented open source or internally devel oped libraries are often not In either case  and particu larly in the latter  developers today learn to use a software library not just from its documentation but also 
from toy ex amples and existing real-life application code e.g by using grep or looking at browse information The CodeWeb tool 4 takes this simple idea further by a deeper analysis of a large collection of applications to see what characteristic usage of the library is like Specifically the tool uses data mining techniques to discover so-called 223Teuse patterns\224 Reuse patterns can be used to guide and check library usage By combining reuse patterns with the library reference which we 
assume exists  at the very least as comments in the code we start to approach the knowledge offered by hand-written tutorials combined with the depth of real-life code examples We demonstrate our approach by showing how the KDE core libraries are used in over 75 real-life KDE applications KDE is a graphical desktop environment for UNIX More over we look at a recently developed feature that helps soft ware developers port an application from an old version 
of a library to a new one Specifically we consider porting KDE applications from version 1 of the KDE core libraries to version 2 2 ReuseTable A reuse table shows the percentage of existing appli cations that use various library classes If a library class has been used by many applications in the past then it is likely to be useful in future applications also  and so it is certainly worth knowing about For example we see from Figure 1 
a that KApplication is used by 97.5 of all KDE 1 applications and 76.8 of KDE 2 applications Consequently we should certainly consider using this class in any new KDE application that we write The reuse table also shows two usage deltas for each li brary class Roughly speaking if a usage delta is a large positive \(negative\number then this indicates that there is a significant increase \(resp decrease in the use of that class in KDE 2 so 
one may consider using resp. no longer us ing\this class when porting an application from KDE 1 to KDE 2 3 ReusePatterns Reuse patterns show characteristic ways in which library classes have been used in existing applications Clicking on the \223Patterns\224 link to the right of KApplication in Fig ure 1 a shows the reuse patterns in Figure 1 b Reuse patterns are basically if/then rules which indicate that appli cation classes that contain the antecedent tend to also con 
tain the consequent For example we see that application classes with KApplication in the code tend to also contain exec and KCmdLineArgs Rules of this form  which are known as association rules  are of extensive interest in the data mining community  13 For each rule four percentages are shown. The first two under V1 and V2 usage indicate the 223strength\224 of the rule 0-7695-1050-7/01 10.00 0 2001 IEEE 827 


QStl.mpIG?&/BlI 96 25 10 17 KQndUneArp C~de/PaUm&l 0.0 488 466 96.25 8.2 0 0 848 86 1 0.0 82 3 0.0 82.3 63.3 68 4 658 0 0 658 848 48 1 68.4 36 7 59 5 0.0 74 7 97.5 468 446 56 7.7 20.7 rsm 9.5 48.0 14.3 1.5 SA 221 5.2 5.0 1608 66 26.4 4.5 108 19.3 5.1 536 12.7 43.1 49 1.7 69 46.2 8.6 c5.m 15.5 19.0 10.3 12.l 60.3 4.6 13.8 17.246 86 24.1 12.1 165.5 13.8 n.m ZhaneDtlral 319 45 542 279 34.1 45 irm 28 475 243 48.3 253 43 246 addAmhw2 48 232 14.5 58 139 32 00 XO 131 156 I1675 K\2212uJkneOpuuw 00 pwseclAm\(I 230 43 182 41 mA 154 11.3 40 3 67 179 WO k\223m 17.5 10 1 ER\223 43 36 rerd\223Enu*\(l 29 148 ir.4 Ira Figure 1 CodeWeb screenshots in KDE 1 and KDE 2 The second two are usage deltas for each reuse pattern analogous to the two in the reuse table For example Figure 1 b clearly shows the usage of new KDE 2 classes such as KCmdLineArgs and KAboutData whenever KApplication is used as is indicated by the large positive usage deltas 4 Related Work Much of the research on tool support for software reuse has focused on component retrieval systems 2 51 How ever, such systems are limited 1 the user may not know what kind of components to look for and 2 even if the user does find the components of interest they may not work to gether to accomplish the desired task  and if they do the component retrieval system doesn\222t tell the user how Closer to our approach is the work done on exemplars 3 and reengineering libraries 6 While the first method ad dresses the same problem we do it requires sophisticated domain analysis by an expert The second method analyses library usage in existing applications in an automated man ner but the method is designed to help developers reengi neer the inheritance hierarchy of a framework rather than help users develop applications using a framework 5 Conclusions and Future Work We have described a tool CodeWeb for data mining li brary reuse patterns Preliminary feedback from KDE de velopers has been encouraging One developer said 223I used to use CVS Web to 221cheat\222 basically find where someone else had done something that I wanted to do Codeweb makes it ea$y to 221cheat\222 which is what design patterns are all about in my opinion.\224 In future work we shall make CodeWeb more problem-oriented so that one can enter a query such as 223double buffering\224 and the tool will 1 search for code related to double buffering perhaps by using CVS comments\and 2 data mine the search results to iden tify characteristic ways in which KDE developers have done double buffering in the past References  11 R Agrawal and R Srikant. Fast algorithms for mining associ ation rules In Proceedings of the 20th Very Large Data Bases Conference pages 487-499 1994 2 W B Frakes and B A Nejmeh Software reuse through in formation retrieval In 20th Hawaii International Conference on System Sciences pages 530-535 JEEE 1987 3 D Gangopadhyay and S Mitra Design by framework com pletion Automated Software Engineering 3:219-237 1996 4 A Michail Data mining library reuse patterns using gener alized association rules In Proceedings of the 22nd Intema tional Conference on Software Engineering 2000 5 R Prieto-Diaz and P Freeman Classifying software for reusability IEEE Sofrware 4\(1 1987 6 G Snelting and E Tip Reengineering class hierarchies using concept analysis In 6th ACM SIGSOFT International Sym posium on the Foundations of Software Engineering pages 99-1 10, 1998 828 


 p2: Person p2: Person   married p1: Person sex = "female sex = "female name = n name = m married ErrorMsg msg = married\(n,m person1 person2 p1: Person testMarried p2: Person p2: Person married p1: Person sex = "female sex = "female testMarried2 p1: Person  Figure 1 Sample rules formulating constraints i.e an activ e constrain t is form ulated F urthermore rules ma y b e used to express ev en t handling and business strategies The left-hand side tests if a certain ev en t or situation o ccurred and the righ t-hand side con tains the corresp onding reaction In terrelation b et w een the ob ject diagrams of a rule The in terrelation b et w een the left and the righ t-hand side of a rule is giv en b yanin tersection of the left and the righ thand side This in tersection is depicted b y a partial mapping from the left to the righ t-hand side This mapping is giv en b y the same ob jects and links on b oth sides i.e ob jects with the same names are mapp ed to eac h other F or the application of a rule this means that ob jects and links o ccuring on the left and on the righ t are preserv ed b y the rule application All ob jects and links o ccuring only in the left-hand side are deleted and all ob jects and links o ccuring only in the righ t-hand side are newly created b y the rule See Figure 1 for sample rules The left rule sho ws an inconsistency test c hec king if t w ow omen are married and prin ts out an error message Please note that the ob jects p1 and p2 as w ell as the link b et w een them are preserv ed b ecause they o ccur on b oth sides A ttributes whic h are just tested but not c hanged only o ccur on the left-hand side The righ t rule sho ws an activ e constrain t as a rule with the same test but the reaction is di\013eren t It deletes the married"-link to solv e this inconsisten t situation In Figure 2 further examples for rules are sho wn where a deriv ed asso ciation and a deriv ed attribute are computed V ariables as attribute v alues The reader ma yha v e noticed that the left rule in Figure 1 con tains t w ov ariables n and m as v alues of the attribute name of p erson p1 and p2 V ariables are depicted b y strings without quotation marks The scop e of suc ha v ariable is the whole rule Considering the left rule in Figure 1 b oth v ariables are used on the righ t-hand side to prin t out the names in the error message V ariables are instan tiated b y concrete v alues when the rule is applied If a v ariable o ccurs more than once in the lefthand side the matc hing v alues ha v e to b e equal In this w a y v ariables are just shortcuts for longer expressions suc h as n for p1.name and some additional condition e.g adding a p erson p3 with name n to the left-hand side w ould yield the additional condition p1.name.equals\(p3.name A ttribute computations Moreo v er it is p ossible to compute a new attribute v alue in the righ t-hand side of a rule F or this purp ose v ariables whic h are in tro duced in the left-hand side ma y b e used Reconsidering the left rule in Figure 1 the error message is 


 p1: Person birthdate = x computeAge p1: Person age = currentdate - x c : Company d : Department p : Person worksForCompany employer worksForDepartment c : Company d : Department p : Person employer worksForDepartment  getWorksForCompany Figure 2 A sample rule for the update of a derived attribute pro duced b y calling a metho d married with t w o argumen ts b eing the v ariables o ccuring on the left-hand side See the righ t rule of Figure 2 for another example of an attribute computation This rule computes the new v alue of a deriv ed attribute Please note that the deriv ed attribute do es not ha v e to o ccur on the left-hand side b ecause its v alue is not needed for testing Deriv ed attributes are indicated b y a leading slash in UML Negativ e application conditions It is often not enough to test the existence of some ob jects and links as it is done b y the left-hand side Instead the non-existence of some structure should lead to some reaction A common constrain t states that ob jects or links should b e created if they are not already there T o indicate the non-existence of an ob ject or link it is dra wn dashed on the left-hand side The 014rst diagram of Figure 3 sho ws a left-hand side of a rule that asks for a p erson without an yc hild Applying a rule with a negativ e application condition means that the p ositiv e part has to b e found but the negativ e extension cannot b e matc hed otherwise the rule is not applied If a rule should b e applied at most once this can b e ac hiev ed b y form ulating the newly created part also as negativ e application condition There are requiremen ts that are not expressable b y a single negativ e application condition but b y more than one Consider e.g the second diagram in Figure 3 whic h con tains t w o negativ e application conditions Eac h one is depicted in a dashed frame Here w elook for a p erson whic h has no c hildren and is not married Com bining b oth conditions in one i.e depicting them in one dashed frame this w ould mean that w e searc h for a p erson whic h has no c hildren or is not married Comparing the com bination of negativ e conditions with that of p ositiv e conditions w e can state that conjunctions of p ositiv e conditions are expressed in one left-hand side of a rule Disjunctions can b e expressed b y form ulating sev eral rules eac h con taining one alternativ e Moreo v er it is p ossible to force that t w o ob jects in a rule should not b e mapp ed to one and the same Consider e.g the third diagram in Figure 3 whic h is a test on di\013eren t p ersons with the same names More adv anced application conditions allo wing also predicate logic form ulae on diagrams can b e found in HW95  A ttribute conditions Often it is not enough to restrict the matc hing structures for a rule but also the matc hing attribute v alues ma y b e restricted b y additional conditions An attribute condition ma ybe an y b o olean expression whic hma y con tain rule v ariables.Moreo v er ob ject roles de\014ned ma y b e used Consider e.g the fourth diagram of Figure 3 whic hma y b e a left-hand side It states that the age of a paren t has to b e greater than that of his or her c hild An attribute condition should b e free of side-e\013ects b ecause it ma ybe ev aluated many times b efore the rule is applied The left rule in 014gure 4 describ es the mo v emen t of a lift one 015o or up only if there is 


 Person age = x child Person age = y x > y Person Person   Person   child married Person   Person   child Person Person name = n name = m n.equals\(m   234 1 Figure 3 Left-hand sides with application conditions floor = y h : HaltRequest l : LiftController floor = x +1 floor = y h : HaltRequest req     req l : LiftController floor = x req moveLiftUp x < y floor = x HaltRequest  x      y  HaltRequest floor = x   l : LiftController floor = y req  floor = x HaltRequest l : LiftController req  addHaltRequest\(int x Figure 4 Sample rules for lift controlling a halting request for an upp er 015o or and there is not a halting request for the curren t 015o or This rule has a negativ e application condition and an attribute condition Here the non-existence of a link together with an ob ject is required if its attribute has a certain v alue Rule parameters Another example for the com bination of a negativ e application condition with an attribute condition is giv en b y the righ t rule in Figure 4 This rule serv es as a kind of w atc h dog If an external ev en t o ccurs that creates a halting request for 015o or x this 015o or n um b er is forw arded to the rule The rule has an input parameter whic h is nothing else than a rule v ariable that is set from outside and not b y matc hing A new halting request for a 015o or x is added to a lift con troller only if there is not already a halting request for this lift con troller at this 015o or This condition is expressed as a negativ e application condition Moreo v er there is an attribute condition stating that the halting request to b e added has to b e for another than the curren t 015o or where the lift is Please note that the rule parameter is used in the negativ e application condition as w ell as in the attribute condition Rule diagrams Rules ma y b e group ed in to rule sets These sets can b e asso ciated to classes pac k ages and comp onen ts A rule diagram sho ws this organization of rules Consider e.g the rule diagram on the left of Figure 5 Here t w o rule sets where eac h rule is indicated b y its name are organized in t w o di\013eren t pac k ages Moreo v er rule computeAge ma y also b e asso ciated to class P erson  depicted in an additional compartmen t b elo w the metho ds Tw o rules in pac k age RegisterOfP ersons are tagged with the prop ert y automatic whic h causes a test of applicabilit y for a rule immediately when a relev an t c hange of a matc hable structure part o ccurs A relev an tc hange means the creation or deletion of an ob ject or link as w ell as a new attribute v alue whic hma y also o ccur in a matc h of the left-hand side of a rule Then the applicabili t y of this rule is tested Rules whic h are triggered b y a time ev en t are tested p erio dically  E.g rule computeAge is triggered once a da y to up date the age if necessary  Note that rule testMarried2 do es not o ccur in the rule diagram b ecause it is mean t as alternativ e to rule testMarried Non-automatic rules e.g the rules in pac k age LiftCon troller ha v eto w ait for an ev en t 


 getWorksForCompany automatic addHaltRequest moveUp carryOutHaltRequest LiftControlling Idle Active sensor input\(n addHaltRequest\(n OpenDoor   Halting CloseDoor Moving do / moveLiftUp door door closed door closed no halt request open open door halt request door closed Update do / carryOutHaltRequest  RegisterOfPersons testMarried computeAge automatic 24 h Figure 5 Sample rule and state diagram triggering rule applications  p2: Person p2: Person married p1: Person sex = "female sex = "female name = n name = m married ErrorMsg msg = married\(n,m testMarried person1 person2 p1: Person 1 3 2    Person sex = "female sex = "female name = "Mary name = "Sally Person sex = "male sex = "male child name = "Peter name = "Harry Person married married married 1 2 3 O Person Figure 6 A sample matching of object diagrams that triggers the test for applicabilit y  Their application has to b e triggered b y an explicit ev en t This ma ybe an ev en t o ccuring in some b eha vior diagram E.g it is meaningful that an external signal ev en t causes a test of applicabili t y for rule addHaltRequest In case of applicabili t y the rule is applied once There ma y b e a call ev en t whic h causes the applicabili t y test for rule mo v eUp Consider the state diagram on the righ t of Figure 5 where rule mo v eLiftUp is called in state Mo ving When the lift stopp ed on some 015o or rule carryOutHaltRequest is triggered to up date the set of halt requests This rule whic h is not explicitly sho wn disconnects a halt request from its lift con troller 3 Rule Seman tics Matc hing of ob ject diagrams The matc hing of a rule's left-hand side L to an ob ject diagram O is a mapping of all the ob jects and links of L on to those of O inaw a y that this mapping is compatible with the source and target relations of the links F urthermore the class names of in terrelated ob jects ha v e to b e the same The attribute v alues of corresp onding ob jects ha v e to b e either equal or a v ariable in L is instan tiated b y the corresp onding v alue in O  See Figure 6 for an example of a matc h of rule testMarried in Figure 1 An ob ject or link of the left ob ject diagram is mapp ed to an ob ject or link in the righ t ob ject diagram if they ha v e equal n um b ers written aside There is no matc hing to p ersons p3 and p4"p ossible since they ha v e a non-matc hing sex But it is p ossible to matc h more than one ob ject of L on one and the same ob ject in O  E.g p erson x and p erson y ma y b e mapp ed to p erson p1 In this case v ariables n 


 LiftController LiftController  HaltRequest floor = x  HaltRequest floor = 6  x      y       req floor = 8 HaltRequest floor = 5 floor = 5 req req req req 1 l : LiftController req l : LiftController floor = y req addHaltRequest\(8 1 floor = x HaltRequest HaltRequest floor = 6 HaltRequest floor = 9 HaltRequest floor = 9 Figure 7 A sample application of the rule in Figure 4 and m are instan tiated b y the same name Mary The link in b et w een can b e mapp ed to the re\015exiv e link in O  This is also an inconsistency whic h can b e disco v ered b y this rule application T o forbid suc h a non-injectiv e matc hing see the third diagram of Figure 3 T o force the matc hing on to t w o di\013eren t ob jects the p erson"-ob jects are connected b y a sp ecial link indicating that these t w o are not allo w ed to b e mapp ed on one This left-hand side lo oks for t w o di\013eren t p ersons with the same name Moreo v er the negativ e application conditions ha v etobec hec k ed This means that there is not an y extension of the mapping found co v ering the additional ob jects and links of the negativ e condition Considering the second diagram in Figure 3 the p ositiv e part of it can matc h with all p ersons in diagram O in Figure 6 The left negativ e application condition is true for p ersons p1 to p3 whereas the righ t condition holds only for p3 Therefore only the matc hing with p erson p3 ful\014lls all conditions Rule application Ha ving matc hed a rule to an ob ject diagram b y mapping the p ositiv e part to a certain subpart of the diagram and c hec king all negativ e application conditions and attribute conditions the rule can b e applied to this diagram This means that new ob jects and links ma y b e created old ones deleted and new v alues ma y b e computed for attributes See e.g the rule application in Figure 7 Here rule addHaltRequest\(8 is applied to an ob ject diagram sho wing t w o halting requests for t w o di\013eren t 015o ors Both requests are link ed to the lift con troller Applying the rule at the giv en matc h with the giv en parameter a halting request for 015o or 8 is added to the lift con troller i.e a HaltRequest"ob ject is created and a req"link is added b et w een the LiftCon troller"-ob jects and this new one The LiftCon troller"-Ob ject to whic h the new halting request is added is indicated b y the matc h and the in terrelation b et w een the ob ject diagrams of the rule There is only one p ossible matc h in this example Consider rule testMarried and its matc hing to ob ject diagram O in Figure 6 whic his giv en in a w a y that p ersons x and y are b oth mapp ed to p erson p1 and the link in bet w een to the re\015exiv e link at this p erson In this case the application of the rule w ould delete this re\015exiv e link Please note that there is some implicit frame condition when applying a rule This means that exactly those actions are p erformed whic h are stated in the rule except for the implicit 


deletion of dangling links Non-determinism Considering again rule testMarried there are t w o p ossible matc hings to ob ject diagram O in Figure 6 the one indicated b yn um b ers in Figure 6 and the matc h to p erson p1 and its re\015exiv e link This means that the rule is applicable t wice There is not an y restriction or priorit y whic h application should b e p erformed 014rst Th us rule application con tains some kind of non-determinism But lo oking closer to these rule applications w e recognize that these applications do not in terfere i.e one application do es not prev en t the other There are t w o inconsisten t situations and b oth ha v e to and can b e solv ed Another kind of non-determinism o ccurs with the selection of the rule to b e applied E.g the adding of a halting request and mo ving the lift one 015o or up Figure 4 are indep enden t of eac h other when p erformed in a situation as depicted in the lo w er left diagram of Figure 7 This means that adding the halting request do es not prev en t the lift from mo ving up and vice v ersa Deleting a halting request for a certain 015o or is not indep enden tofmo ving the lift up to the next 015o or These actions are p ossible in this order but not vice v ersa due to the negativ e application condition for mo ving up One migh t imagine that it quic kly b ecomes di\016cult to detect con\015icting rules for a larger rule set Here the formal seman tics of rule application based on graph transformation helps to analyze the rule set The notion of critical pairs  kno wn from term rewriting  has b een extended to graph transformation Plu93 and can b e used to detect con\015icting rule applications T riggering of a rule application The test for applicabili t y of a rule ma y b e triggered b y implicit and explicit ev en ts An implicit ev en t is the creation or deletion of an ob ject or link or a new attribute v alue If there is a rule whic h matc hes partly with the c hanged ob ject link or attribute and this rule is an automatic one a test for applicabilit y of this rule is triggered The matc h includes negativ e application conditions and attribute conditions If the rule is applicable at a completed matc h whic h includes the c hanged item it is applied once Ev en if afterw ards the rule is still applicable at the same matc h i.e nothing of the matc hed structure c hanged it is not applied an y more See e.g the rules computeAge and getW orksF orCompan y in Figures 2 These rules compute deriv ed attributes and asso ciations but do not c hange the original structure A rep eated application of rule getW orksF orCompan y is not meaningful Also rule testMarried should b e applied only once for one and the same matc htoa v oid cascades of error messages Rule testMarried2 w ould b e applicable only once for a giv en matc h to correct an inconsisten t situation This is ac hiev ed b y requesting the existence of structure whic h is deleted afterw ards Or the other w a y around negativ e application conditions request the non-existence of that structure whic h should b e added The application of one rule ma y trigger further rule applications if the rule is more than a test i.e c hanges some structure Rule computeAge is triggered p erio dicall y once a da y  i.e b y a time ev en t 4 Conclusion and Related W ork T o supp ort the mo deling of system dynamics in a declarativ est yle this con tribution sho ws ho w visual rules can b e added to an ob ject-orien ted mo deling tec hnique Rules can b e adv an tageously used to describ e e.g in tegrit y constrain ts Other than in it 


esp ecially supp orts the form ulation of activ e constrain ts on the data mo del Rules pro vide a useful lev el of abstraction allo wing the designer to fo cus on imp ortan t b eha vior The inheren t trigger concept for rules reliev es the designer from the task to explicitly con trol the constrain tc hec k Moreo v er rules can b e used to mo del ev en t handling to deriv ed new attribute v alues and asso ciations and to mo del strategies in business and engineering Esp ecially for this last asp ect it is p opular to use rules Consider e.g whic h roughly explain the business rule approac h Rules are also v ery common in the activ e database comm unit y  Similar to rule concepts in this area also our rules follo w the ev en t-condition-action paradigm But unlik e those approac hes our rules do not need explicit trigger ev en ts but ma y b e triggered automatically in resp onse of a relev an tc hange Moreo v er our rule concept supp orts constrain ts and actions on sev eral in terrelated ob jects whic h is not done in man y activ e database systems Because of its underlying formal seman tics on the basis of graph transformation this rule concept supp orts the analysis of a designed rule set concerning e.g con\015icts dep endencies and further prop erties As already men tioned ab o v e a notion of critical pairs  kno wn from term rewriting  has b een extended to graph transformation Plu93 can b e used to detect con\015icting rule applications Logical form ulas ma y b e used to ensure additional prop erties of the rule set e.g to ensure that a certain ob ject is created only if another is existing If a rule set do es not ensure the v alidit y of a certain set of form ulas the rule set is automatically corrected HW95  Visual editing of graph rules and their application are supp orted b y the graph transformation mac hine A GG whic h is implemen ted in Ja v a The visual la y out of the rules is v ery similar to that one used in this con tribution and th us to UML As a next step w ein tend to extend A GG b y analysis to ols as indicated ab o v e T o incorp orate rules in to existing OO-mo deling tec hniques A GG ma ybe in tegrated in to corresp onding mo deling to ols In JZ98  rules are em b edded in to so-called story 015o w diagrams whic h are also mean t to complemen t existing ob ject-orien ted mo deling tec hniques The em b edded rules describ e basic data op erations whic h are con trolled b y the surrounding story b oard i.e all rule applications ha v e to b e explicitly triggered b y con trol 015o w T urning from mo deling to programming there are sev eral approac hes to incorp orate rules in to ob ject-orien ted programming languages Most of the approac hes are based on concepts of the rule-based language OPS5 CW88  There are approac hes lik e Rete  where rules are added to C Also R LPSM97  incorp orates rules in to C Here the kind of rules are not general but restricted to so-called path-based rules A path-based rule con tains paths from a this'-ob ject only  i.e eac h rule is form ulated within the lo cal view of an ob ject The rule concepts of these in tegrations di\013er more or less from the one presen ted in this con tribution Ac kno wledgmen ts Man y thanks to Mic hael Rudolf for giving sev eral v aluable commen ts on a draft v ersion of this pap er References BK97 M Barnes and D Kelly  Pla y By The Rules Byte Magazin  June 1997 


Bo G Bo o c h Obje ct-Oriente dA nalysis and Design with Applic ations  Benjamin Cummings 1994 CMR   A Corradini U Mon tanari F Rossi H Ehrig R Hec k el and M L\177 ow e Algebraic Approac hes to Graph T ransformation P art I Basic Concepts and Double Pushout Approac h In CW88 T A Co op er and N W ogrin R ule-Base dPr o gr amming with OPS5  Morgan Kaufmann San Mateo California 1988 Hal98 The Haley En terprise Seamless In tegration of Rules and Ob jects Using the Rete Algorithm and C http://www.haley.com  1998 HW95 R Hec k el and A W agner Ensuring Consistency of Conditional Graph Grammars  A constructiv e Approac h Pr o c of SEGRA GRA'95 Gr aph R ewriting and Computation Ele ctr onic Notes of TCS  2 1995 http://www.elsevier.nl/lo cate/entcs/volume2.html  JZ98 J.-H Jahnk e and A Z 177 undorf Sp eci\014cation and Implemen tation of a Distributed Planning and Information System for Courses based on Story Driv en Mo delling In Pr o c of the 9th Int Workshop on softwar eSp e ci\014c ation and Design IseShima Jap an  pages 77{86 IEEE Computer So ciet y  1998 Ken97 S Ken t Constrain t Diagrams Visualising In v arian ts in Ob ject Orien ted Mo dels In Pr o c e e dings of OOPSLA'97 A CM Press 1997 LM95 M L\177 ow e and J M 177 uller Critical Pair Analysis in Single-Pushout Graph Rewriting In G V F eruglio and F R Llompart eds Pr o c Col lo quium on Gr aph T r ansformation and its Applic ation in Computer Scienc e T ec hnical Rep ort B19 Univ ersitat de les Illes Balears 1995 LPSM97 D Litman P F.P atel-Sc hneider and A Mishra Mo deling Dynamic Collections of In terdep enden t Ob jects Using P ath-Based Rules In Pr o c of the 1997 A CM-SIGPLAN Confer enc e on Obje ct-Oriente dPr o gr amming Systems L anguages and Applic ations  1997 Plu93 D Plump Hyp ergraph Rewriting Critical Pairs and Undecidabili t y of Con\015uence In M Sleep M Plasmeijer and M C v an Eek elen eds Term Gr aph R ewriting  pages 201{214 Wiley  1993 RBP  91 J Rum baugh M Blaha W Premerlani E Eddy  and W Lorenson Obje ctOriente dMo deling and Design  Pren tice Hall In ternational 1991 Roz97 G Rozen b erg ed Handb o ok of Gr aph Gr ammars and Computing by Gr aph Tr ansformations V olume 1 F oundations W orld Scien ti\014c 1997 Roz99 G Rozen b erg ed Handb o ok of Gr aph Gr ammars and Computing by Gr aph T r ansformations V olume 2 Applic ations L anguages and T o ols W orld Scienti\014c 1999 to app ear TER99 G T aen tzer C Ermel and M Rudolf A GG-Approac h Language and T ool En vironmen t In Roz99  see also http://tfs.cs.tu-b erlin.de/agg  UML97 Rational Soft w are Co op eration Uni\014ed Mo deling Language a v ailable via http://www.rational.com  1997 


It can also be added to cell CrossSales.3\(PC, printer one_year,\205 5  Distributed and Incremental Rule Mining There exist two ways to deal with association rules 267  Static that is, to extract a group of rules from a snapshot, or a history, of data and use "as is 267  Dynamic that is, to evolve rules from time to time using newly available data We mine association rules from an e-commerce data warehouse holding transaction data. The data flows in continuously and is processed daily Mining association rules dynamically has the following benefits 267  223Real-time\224 data mining, that is, the rules are drawn from the latest transactions for reflecting the current commercial trends 267  Multilevel knowledge abstraction, which requires summarizing multiple partial results. For example association rules on the month or year basis cannot be concluded from daily mining results. In fact multilevel mining is incremental in nature 267  For scalability, incremental and distributed mining has become a practical choice Figure 3: Distributed rule mining Incremental association rule mining requires combining partial results. It is easy to see that the confidence and support of multiple rules may not be combined directly. This is why we treat them as \223views\224 and only maintain the association cube, the population cube and the base cube that can be updated from each new copy of volume cube. Below, we discuss several cases to show how a GDOS can mine association rules by incorporating the partial results computed at LDOSs 267  The first case is to sum up volume-cubes generated at multiple LDOSs. Let C v,i be the volume-cube generated at LDOS i The volume-cube generated at the GDOS by combining the volume-cubes fed from these LDOSs is 345   n i i v v C C 1  The association rules are then generated at the GDOS from the centralized C v  214  The second case is to mine local rules with distinct bases at participating LDOSs, resulting in a local association cube C a,I a local population cube C p,I  and a local base cube C b,i at each LDOS. At the GDOS, multiple association cubes, population cubes and base cubes sent from the LDOSs are simply combined, resulting in a summarized association cube and a summarized population cube, as 345   n i i a a C C 1   345   n i i p p C C 1  and 345   n i i b b C C 1  The corresponding confidence cube and support cube can then be derived as described earlier. Cross-sale association rules generated from distinct customers belong to this case In general, it is inappropriate to directly combine association cubes that cover areas a 1 205, a k to cover a larger area a In the given example, this is because association cubes record counts of customers that satisfy   customer product merchant time area Doe TV Dept Store 98Q1 California Doe VCR Dept Store 98Q1 California customer product merchant time area Doe VCR Sears 5-Feb-98 San Francisco Joe PC OfficeMax 7-Feb-98 San Francisco customer product merchant time area Doe TV Fry's 3-Jan-98 San Jose Smith Radio Kmart 14-Jan-98 San Jose Association   population      base          confidence      support cube               cube                cube         cube                cube LDOS LDOS GDOS 


the association condition, and the sets of customers contained in a 1 205, a k are not mutually disjoint. This can be seen in the following examples 214  A customer who bought A and B in both San Jose and San Francisco which are covered by different LDOSs , contributes a count to the rule covering each city, but has only one count, not two, for the rule A  336  B covering California 214  A customer \(e.g. Doe in Figure 3\who bought a TV in San Jose, but a VCR in San Francisco, is not countable for the cross-sale association rule TV  336 VCR covering any of these cities, but countable for the rule covering California. This is illustrated in Figure 3 6  Conclusions In order to scale-up association rule mining in ecommerce, we have developed a distributed and cooperative data-warehouse/OLAP infrastructure. This infrastructure allows us to generate association rules with enhanced expressive power, by combining information of discrete commercial activities from different geographic areas, different merchants and over different time periods. In this paper we have introduced scoped association rules  association rules with conjoint items and functional association rules as useful extensions to association rules The proposed infrastructure has been designed and prototyped at HP Labs to support business intelligence applications in e-commerce. Our preliminary results validate the scalability and maintainability of this infrastructure, and the power of the enhanced multilevel and multidimensional association rules. In this paper we did not discuss privacy control in customer profiling However, we did address this issue in our design by incorporating support for the P3P protocol [1 i n  ou r data warehouse. We plan to integrate this framework with a commercial e-commerce system References 1  Sameet Agarwal, Rakesh Agrawal, Prasad Deshpande Ashish Gupta, Jeffrey F. Naughton, Raghu Ramakrishnan, Sunita Sarawagi, "On the Computation of Multidimensional Aggregates", 506-521, Proc. VLDB'96 1996 2  Surajit Chaudhuri and Umesh Dayal, \223An Overview of Data Warehousing and OLAP Technology\224, SIGMOD Record Vol \(26\ No \(1\ 1996 3  Qiming Chen, Umesh Dayal, Meichun Hsu 223 OLAPbased Scalable Profiling of Customer Behavior\224, Proc. Of 1 st International Conference on Data Warehousing and Knowledge Discovery \(DAWAK99\, 1999, Italy 4  Hector Garcia-Molina, Wilburt Labio, Jun Yang Expiring Data in a Warehouse", Proc. VLDB'98, 1998 5  J. Han, S. Chee, and J. Y. Chiang, "Issues for On-Line Analytical Mining of Data Warehouses", SIGMOD'98 Workshop on Research Issues on Data Mining and Knowledge Discovery \(DMKD'98\ , USA, 1998 6  J. Han, "OLAP Mining: An Integration of OLAP with Data Mining", Proc. IFIP Conference on Data Semantics DS-7\, Switzerland, 1997 7  Raymond T. Ng, Laks V.S. Lakshmanan, Jiawei Han Alex Pang, "Exploratory Mining and Pruning Optimizations of Constrained Associations Rules", Proc ACM-SIGMOD'98, 1998 8  Torben Bach Pedersen, Christian S. Jensen Multidimensional Data Modeling for Complex Data Proc. ICDE'99, 1999 9  Sunita Sarawagi, Shiby Thomas, Rakesh Agrawal Integrating Association Rule Mining with Relational Database Systems: Alternatives and Implications", Proc ACM-SIGMOD'98, 1998   Hannu Toivonen, "Sampling Large Databases for Association Rules", 134-145, Proc. VLDB'96, 1996   Dick Tsur, Jeffrey D. Ullman, Serge Abiteboul, Chris Clifton, Rajeev Motwani, Svetlozar Nestorov, Arnon Rosenthal, "Query Flocks: A Generalization of Association-Rule Mining" Proc. ACM-SIGMOD'98 1998   P3P Architecture Working Group, \223General Overview of the P3P Architecture\224, P3P-arch-971022 http://www.w3.org/TR/WD-P3P.arch.html 1997 


Plenary Panel Session 30 XML Databases   Moderator: Michael Carey, IBM Almaden Research Center USA Panelists Adam Bosworth, Microsoft Corporation USA David De Witt University of Wisconsin-Madison, USA Alon Levy University of Washington USA Bruce Lindsay IBM Almaden Research Center USA Jennifer Widom Stanford University USA Demo Session 1 Web Query Optimizer  661 V Zadorozhny L Bright L Raschid T Urhan and M Vidal ReQueSS: Relational Querying of Semi-structured Data  664 R Sunderraman The IDEAL Approach to Internet-Based Negotiation for E-Business  666 J Hammer C Huang Y Huang C Pluempitiwiriyawej M Lee H Li L Wang Y Liu and S Su READY A High Performance Event Notification Service  668 R Gruber B Krishnamurthy, and E Panagos A Multimedia Information Server with Mixed Workload Scheduling  670 G Nerjes DISIMA An Object-Oriented Approach to Developing an Image Database System  672 V Oria T Ozsu P Iglinski B Xu and L Cheng Demo Session 2 The Collaboration Management Infrastructure  677 H Schuster D Baker A Cichocki D Georgakopoulos and M Rusinkiewicz Assisting the Integration of Taxonomic Data The LITCHI Toolkit  679 I Sutherland J Robinson S Brandt A Jones S Embury W Gray R White and F Bisby TheaterLoc: Using Information Integration Technology to Rapidly Build Virtual Applications  681 G. Barish Y.4 Chen D Dipasquo, C Knoblock S Minton I Muslea and C Shahabi Lineage Tracing in a Data Warehousing System  683 Y Cui and J Widom xiii 


The Mentor-Lite Prototype A Light-Weight Workflow Management System  685 J Weissenfels M Gillmann 0 Roth, G Shegalov and W Wonner Location Prediction and Queries for Tracking Moving Objects  687 0 Wolfson B Xu and S Chamberlain Semiorder Database for Complex Activity Recognition in Multi-Sensory Environments  689 S Bhonsle A Gupta S Santini and R Jain Tutorial 1 Web Information Retrieval  693 M Henzinger Tutorial 2 Mobile and Wireless Database Access for Pervasive Computing  694 P Chrysanthis and E Pitoura Tutorial 3 Data Mining with Decision Trees  696 J Gehrke Tutorial 4 Directories Managing Data for Networked Applications  697 D Srivastava Tutorial 5 Indexing High-Dimensional Spaces Database Support for Next Decade\222s Applications  698 S Berchtold and D Keim xiv 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


