Privacy Preserving Decision Tree Learning Over Vertically Partitioned Data   Weiwei Fang Information Engineering School, University of Science and Technology Beijing  Computer Center, Beijing Information Science and Technology University Beijing, China  Liveinbetter@163.com Bingru Yang Information Engineering School University of Science and Technology Beijing  Beijing, China     Abstract Data mining over multiple data sources has become an important practical problem with applications in different areas Although the data sources are willing to mine the union of their data, they don’t want to reveal any sensitive and private information to other sources due to competition or legal concerns. In this paper, we consider a scenario where data are vertically partitioned over more than two parties. We focus on the classification problem, and present a novel privacy preserving decision tree learning method. Theoretical analysis and experiment results show that this method can provide good capability of privacy preserving, accuracy and efficiency Keywords Privacy Preserving; Data Mining; Decision Tree Vertically Partitioned I   I NTRODUCTION  In present, great advances in networking and databases technologies enable data to be distributed across multi parties and collected for sharing information. Distributed data mining such as association rule mining and decision tree learning are widely used by global enterprises to obtain accurate market underlying information for their business decision. Although different enterprises are willing to collaborate with each other to data mine on the union of their data, due to legal constraints or competition among enterprises, they don’t want to reveal their sensitive and private information to others during the data mining process. Privacy preserving data mining \(PPDM\ has emerged to address this problem, and become a challenging research area in the field of data mining \(DM\ and knowledge discovery \(KD\. The main goal of PPDM is to mine pattern or rules accurately without revealing any other private information [1  The method of PPDM depend on the data mining task \(i.e association rule, classification, clustering, etc.\d the data sources distribution manner \(i.e centralize where all transactions are stored in only one party horizontally where every involving party has only a subset of transaction records but every record contains all attributes vertically where every involving party has the same numbers of transaction records but every record contains partial attributes\ this paper, we particularly focus on applying PPDM method on the decision tree learning over vertically partitioned data The rest of the paper is organized as follows. In the next section, we will introduce the related work in PPDM and the contribution we did. In section 3, we provide some background of distributed decision tree learning and some secure multiparty computation. In section 4, we present our work of how to build a distributed decision tree, which doesn’t reveal privacy during the stages of building and classification Section 5 show the experimental result and privacy analysis Conclusion is given at the last section II  R ELATED WORK  Generally speaking, there are two approaches in privacy preserving data mining. One is using randomization techniques 2,3  t h a t i s ad di ng “no i s e to t h e d a ta b e for e  t h e da ta mining process, and using techniques that mitigate impact of the noise from the data mining results, however, recently there has been much debate about this kind of method, e.g., accuracy loss of mining results as altering the original data, inference problem can be derived from the reconstruction model, etc The other approach is using secure multiparty computation SMC\techniques, such as secure sum, secure set union, secure size of intersection and scalar product, etc. In [6  C l if ton h a s  proposed to apply secure scalar product methods on association rules over horizontally and vertically partitioned data respectively. In [7 V a i d y a pr o p o s e d al g o r i t h m s on  bu i l d i n g  decision tree, however, the tree on each party doesn’t contain any information that belongs to other party, the drawback of this method is that the resulting class can be altered by a malicious party The contributions in this paper are as follows: 1, Method proposed in this paper can preserve privacy not only in the stage of building tree, but also in the classification stage; 2 This method can be applied on more than two parties Supported by the Natural Science Foundation of China under Grant No 69835001, Beijing Information Science and Technology University Foundation 2008 
2008 International Conference on Computer Science and Software Engineering 978-0-7695-3336-0/08 $25.00 © 2008 IEEE DOI 10.1109/CSSE.2008.731 1049 
2008 International Conference on Computer Science and Software Engineering 978-0-7695-3336-0/08 $25.00 © 2008 IEEE DOI 10.1109/CSSE.2008.731 1049 


III  B ACKGROUND  A  Decision Tree Learning A decision-tree is a flow-chart-like tree structure, where each internal node denotes a test on an attribute, each branch represents an outcome of the test, and leaf nodes represent classes or class distributions. Generally speaking, the basic algorithm for decision-tree induction is a greedy algorithm that constructs decision trees in a top-down recursive divide-andconquer manner. The presentation here is rather simplistic and very brief and we refer readers to Ref. [1 n  i n d ept h  treatment of the subject Obviously, the key of decision-tree induction is selecting the attribute that will best separate the samples into individual classes, for it plays an importance in not only the effectiveness of induction, but also the quality of mining rules. In this paper we propose a privacy preserving distributed decision tree learning method based on ID  w h i c h i s  ap pl i e d i n m i n i ng concentrative database and uses information entropy to choose the best prediction attribute B  secure multiparty computation Secure multiparty computation \(SMC\ is the problem of evaluating a function of two or more parties’ secret inputs, such that each party finally hold a share of the function output and no more else is revealed, except what is implied by the party’s own inputs and outputs. SMC problem was firstly introduced by Yao and extend by Goldreich and others. These works use a similar methodology: the function f to be computed is represented as a Boolean circuit, and then the parties run a protocol for every gate in the circuit. Every participant gets shares of the input wires and the output wires for every gate Since determining which share goes to which party is done randomly, a party’s own share tells it nothing. Upon completion, the parties exchange their shares, enabling each to compute the final result In this paper, we proposed a PPDM method by applying PCIWL \(Protocol for Comparing Information Without Leaking\ and MNP \(Mix Network Protocol\, both of which belong to issues of SMC technology. We encourage readers who want deep understanding of the above two techniques to start with Ref. [8 IV  P RIVACY P RESERVING D ISTRIBUTED D ECISION T REE L EARNING  In this paper we address the issue of privacy preserving distributed decision-tree mining. Specifically, we consider a scenario in which two or more parties owning confidential databases wish to run a data-mining algorithm on the union of their databases, without revealing any original information Our work is motivated by the need to both protect privileged information and enable its use for research or other purposes Privacy preserving can mean many things [5   Pro t ec t i n g  specific individual values, breaking the link between values and the individual they apply to, protecting source, etc. This paper aims for a high standard of privacy: Not only individual entities are protected, but to the extent feasible even the schema attributes and possible attribute values\re protected from disclosure A  Tree building Let R be the set of condition attributes and C be the class attribute, we make assumptions that the database is vertically partitioned between k parties; each party P i only knows its own attributes R i transaction ID and attribute C are known to all parties We take an example, as figure 1 shows, the class attribute is play which is determined by four condition attributes, such as outlook, temp possessed by Alice and humidity, windy  possessed by Bobby   a\Training set in Alice   b\Training set in Bobby Figure1  Training set   If we use the traditional ID3 algorithm to mine on the union of datasets, we can obtain the public decision tree shown in figure 2, while each party’s private information are all revealed  
1050 
1050 


 Figure 2    Public decision tree   In order to preserve each party’s private data, we introduce two new notions. One is Privacy-Preserving Decision Tree, as figure 3 shows, which is stored at the miner site. The semihonest miner only knows the basic structure of the tree, \(e.g the number of the branches at each node, the depth of each subtree\ and which site is responsible for the decision made at each node \(i.e., only know which site possesses the attribute to make decision at the node, while without the knowledge of which attribute it is and what attribute values it has\; the other is Constrain Set, e.g. {AR1, BR1}, it means that this path which is form the root node to the present node \(the node with the value of BR1\ has determined by those attributes in the Constrain Set. When beginning to build tree, all parties will send the numbers of local attribute to miner, and the Constrain Set is initialized as {}, as Constrain Set of the present node becomes full, i.e. {AR1, BR1, AR2, BR2}, it means R is empty 1 t h e ne xt n o de sh o u l d be  l e a f n o de w h i c h w i t h t h e c l ass attribute value c assigned to most transactions with the certain transaction IDs  Figure 3 Privacy-preserving decision tree  Now we’ll describe how it can be built and used to classify testing sets. When the miner creates a root node, it sends signal to all parties. Each party obtains the local best prediction attribute Ri by information gain measurement, then sends the attribute serial number Ri and information entropy to the miner by PCIWL \(Protocol for Comparing Information Without Leaking\, which ensures that no original information would be revealed at miner site or any other parties. The miner applies PCIWL to get the maximum as the global best prediction attribution, while he doesn’t know the which attribute it is and what attribute values it has, he just has the knowledge that which site possesses that attribute and its’ serial number, e.g., as it is shown in figure 3, the minor creates a root node AR1, which means Alice has the information at that node and the first attribute possessed by Alice is the best prediction attribution. At the same time, the minor set {AR1} as Constraint Set of the present node When creating the next node, whether it’s a leaf or internal node, the process is as following: Firstly, the miner sends token signal to the target party, which has possesses the best prediction attribute of previous node. Secondly, the target party receives token message, if the token signal is 0, which means Constraint Set is full, it only needs to compute the class attribute value c assigned to most transactions with the certain IDs, and send c to miner site; if the token signal is 1, which means that R isn’t empty, it firstly needs to judge if all the transactions with the certain IDs have the same class attribute c, if so, then sends c to miner site; otherwise works out the intersection of transactions used previously and transactions with best prediction attribute value, and sends IDs to other parties by MNP \(Mix Network Protocol\ by which it guarantees that the communication process is anonymous Thirdly, all parties compute information entropy of the local attribute corresponding to the certain IDs, and send the information entropy to the miner site by PCIWL. Finally, if the minor only receives attribute c from token party, it creates a leaf node with the value of c; if the miner receives information entropy form all parties, it chooses the maximum as the best prediction attribute, adds the attribute tag to Constant Set, and sends token to the next target party, which possesses the best prediction attribute of the present node B  Privacy-preserving algorithm Assume that there are three parties named A, B and C  which respectively has r a  r b and r c condition attributes, and wants to collaboratively mining decision-tree. As the main idea we presented above, the algorithms, which comprise three parts, are as follows Local mining algorithm \(performed by parties with token Input Local training samples, token  Output Sending class attribute distribution to miner site, or sending IDs to other parties and information entropy to miner  1  If token=0, computes the class attribute value c  assigned to most transactions with the certain IDs, and sends c to miner site 2  If token=1, judges if all the transactions with the certain IDs have the same class attribute c if so, sends c to miner site 3  If not, works out the intersection of transactions used previously and transactions with best prediction attribute value, sends IDs to other parties by MNP, and do step 4 4  Computes information entropy and sends it to the miner site by PCIWL Local mining algorithm \(performed by parties without token  Input Local training samples, transaction IDs Output Sending information entropy to miner 1  Receives transaction IDs form the token party, then computes intersection of IDs received and IDs used previously 2  Computes information entropy corresponding to the certain IDs, and sends it to the miner site by PCIWL 
1051 
1051 


Miner site algorithm \(performed by miner Input Class attribute distribution from token party, or information entropy from all parties  Output Creating node, updating Constraint Set, sending token signal to target party  1  If the receiving message is class attribute c from token party, creates a leaf node with the value c  2  If the receiving message is information entropy from all parties, applies PCIWL to obtain maximum, and do step 3 3  Creates an internal node with the value of target party’s name and serial number of the best prediction attribute, adds the attribute to Constraint Set, and do step 4 4  If Constraint Set is full, sends token=0 to the target party; otherwise sends token=1 V  E XPERIMENT R ESULT  The experiment was conducted with Pentium IV3.2 GHz PC with 2GB memory on the Linux platform, and all algorithms were implemented in C/C++. We used the anonymous Web usage data of the Microsoft web site, which was created by sampling and processing the www.microsoft.com logs and donated to the Machine Learning Data Repository stored at University of California at Irvine Web Site We designed two sets of experiments. The first set is used to show that mining quality between non-privacy preserving approach and privacy-preserving approach in distributed decision-tree mining; the second set is used to show that privacy quality of privacy-preserving approach  Figure 4 Mining quality comparison   Figure 4 shows that compared with traditional non-privacy preserving approach, percentage of rules mined by privacypreserving approach is at least 85%, and Figure 5 presents the privacy-preserving percentage is at least 82%. Experimental results show that the privacy-preserving approach we proposed can provide good capability of privacy quality without sacrificing accuracy Form the viewpoint of theoretical analysis, when building tree, the control is passing from site to site, except token party has the knowledge of best prediction attribute of the present node, other party even the miner doesn’t know any relevant information. When classifying, the miner only knows the path of classifying process, i.e., which site handles the classifying in every step, while the information of which attribute is used to classify and values of transaction records in every party is protected. Based on theoretical analysis and experimental results, we can conclude that this method proposed in the paper is effective   Figure 5 Privacy quality  001\016  C ONCLUSION  In this paper, we presented a privacy-preserving distributed decision-tree mining algorithm, which is based on idea of privacy-preserving decision tree and passing control from site to site. Our experimental results show that it has good capability of privacy preserving, accuracy and efficiency For future research, we will investigate the possibility of developing more effective and efficient algorithms. We also plan to extend our research to other tasks of data mining, like clustering and association rule, etc R EFERENCES   1  JIAWEI HAN, KAMBR M. Data mining concepts and techniques [M  Beijing: Higher Education Press, 2001. 232 - 233 2  Rizvi S J, Haritsa J R. Maintaining data privacy in association rule mining [A  I n Proc eed i n gs of t h e 2 8 th I n t e rn a t i ona l C o n f eren c e on Very Large Databases. Hong Kong, 2002: 682 - 693 3  Agrawal R, Srikant R. Privacy - preserving data mining [A   Proceedings of the 2000 ACM SIGMOD international conference on Management of data. United States, 2000:439 - 450 4  Verykios V, Bertino E. State-of-the-art in Privacy preserving Data Mining,SIGMOD, 2004,33 \(1 5  Cliffton C, Kantarcioglu M, Vaidya J. Tools for privacy preserving distributed data mining [J C M SI G K D D E x pl o r atio ns N e w s l e tte r  2004 ,4 \(2\ :28 - 34 6  M.Kantarcioglous and C. Clifton. Privacy preserving distributed mining of association rules on horizontally partitioned data, ACM SIGMOD Workshop on Research Issues in Data Mining and Knowledge Discovery \(2002\, 24-31 7  J.Shrikant Vaidya, Privacy preserving data mining over vertically partitioned data, PH.D Thesis of Purdue University, August 2004, 28-34 8  Pinkas B. Cryptographic techniques for privacy-preserving data mining J  A C M S I GK DD E xp l ora t i on s New s let t e r 2 00 6 ,4 2  1 2 - 19   
1052 
1052 


4 Itemsets and Decision Trees So far we have discussed how to transmit binary data by using decision trees In this section we present how to selec t the itemsets representing the dependencies implied by the decision trees We will use this link in Section 5 A similar link between itemsets and decision trees is explored in 27 although our setup and goals are different Given a leaf L  the dependency of the item a t is captured in the coding table of L  Hence we are interested in 002nding itemsets that carry the same information That is itemsets from which we can compute the coding table To derive the codes for the leaf L it is suf\002cient to compute the probability q D  a t  1 j L   q D  a t  1  L  q D  L   1 Our goal is to express the probabilities on the right side of the equation using itemsets In order to do that let P be the path from L to its root Let pos  L  be the items along the path P which are tested positive Similarly let neg  L  be the attributes which are tested negative Using the inclusion-exclusion principle we see that q D  L   q D  pos  L   1  neg  L   0  X V 022 neg  L   000 1 j V j f r  pos  L   V   2 We compute q D  a t  1  L  in a similar fashion Let us de\002ne sets  L  for a given leaf L to be sets  L   f V  pos  L  j V 022 neg  L  g  f V  pos  L   f a t g j V 022 neg  L  g  Combining Eqs 1–2 we see that the collection sets  L  satis\002es our goal Proposition 6 The coding table associated with the leaf L can be computed from the frequencies of sets  L   Example 7 Let L 1  L 2  and L 3 be the leaves from left to right of T 4 in Figure 1\(d Then the corresponding families of itemsets are sets  L 1   f a ac g  sets  L 2   f b ab bc abc g  and sets  L 3   f  a b ab c ac bc abc g  We can easily see that the family sets  L  is essentially the smallest family of itemsets from which the coding table can be derived uniquely Proposition 8 Let G 6  sets  L  be a family of itemsets Then there are two data sets say D 1 and D 2  for which q D 1  a t  1 j L  6  q D 2  a t  1 j L  but f r  G  D 1   f r  G  D 2   Given a tree T we de\002ne sets  T  to be sets  T   S L 2 lvs  T  sets  L   We also de\002ne sets  T   S i sets  T i  where T  f T 1      T K g is a decision tree model 5 Choosing Good Itemsets The connection between itemsets and decision trees made in the previous section allows us to consider an orthogonal approach to identify good itemsets Informally our goal is to construct decision trees from a family of itemsets F  selecting the subset from F that provides the best compression of the data More formally our new approach is as follows given a downward closed family of itemsets F  we build a decision tree model T  f T 1      T K g providing a good compression of the data with sets  T  022 F  Before we can describe our main algorithm we need to introduce some further notation Firstly given two trees T p and T n not using attribute c  we de\002ne J OIN T REE  c T p  T n  to be the join tree with c as the root node T p as the positive branch of c  and T n as the negative branch of c  Secondly to de\002ne our search algorithm we need to 002nd the best tree bt  a t  S F   arg min T f c  T  j t  T   a t  src  T  022 S sets  T  022 F g  that is bt  a t  S F   returns the best tree for a t for which the related sets are in F and only splits on attributes in S  To compute the optimal tree bt  a t  S F   we use the exhaustive method presented originally in 27  g i v e n i n A l gorithm 2 The algorithm is straightforward it tests each valid item as the root and recurses itself on both branches Algorithm 2 G ENERATE algorithm for calculating bt  a t  S F   that is the best tree T for a t using only S as source and having sets  T  022 F  1 B  S   S F   2 C  T RIVIAL T REE  a t   3 for b 2 B do 4 G  f X 000 b j b 2 X 2 F g  5  D p  D n   S PLIT  D b   6 T p  G ENERATE  a t  G  S D p   7 T n  G ENERATE  a t  G  S D n   8 C  C  J OIN T REE  b T p  T n   9 end for 10 return arg min T f c  T  j T 2 Cg  We can now describe the actual algorithm for constructing decision tree models with a low cost Our method automatically discovers the order in which the attributes can be transmitted most succinct For this it needs to 002nd sets of attributes S i for each attribute a i such that these should be encoded before a i  The collection S  f S 1      S K g should de\002ne an acyclic graph and the actual trees are bt  a i  S i  F   We use c  S  as a shorthand for the total complexity P i c  bt  a i  S i  F  of the best model built from S  
592 
592 


We construct the set S iteratively At the beginning of the algorithm we have S i   and we increase the sets S i one attribute at a time We allow ourselves to mark the attributes The idea is that once the attribute a i is marked then we are not allowed to augment S i any longer At the beginning none of the nodes are marked To describe a single step in the algorithm we consider a graph H   v 0      v K   where v 1      v K represent the attributes and v 0 is a special auxiliary node We start by adding edges  v i  v 0  having the weight c  bt  a i  S i  F   thus the cost of the best tree possible from F using only the attributes in S i  Then for each unmarked node v i we 002nd out what other extra attribute will help most to encode it succinct To do this we add the edge  v i  v j  for each v j with the weight c  bt  a i  S i  f a j g  F   Now let U be the minimum directed spanning tree of H having v 0 as the sink Consider an unmarked node v i such that  v i  v 0  2 E  U   That node is now the best choice to be 002xed as it helps to encode the data best We therefore mark attribute a i and add a i to each S j for each ancestor v j of v i in U  This process is repeated until all attributes are marked The details of t he algorithm are given in Algorithm 3 Algorithm 3 The algorithm S ET P ACK constructs a decision tree model T given a family of itemsets F such that sets  T  022 F  Returns a DAG a family S   S 1      S K  of sets of attributes The trees are T i  bt  a i  S i  F   1 S   S 1      S K             2 r   r 1      r K    false      false   3 V  f v 0      v K g  4 while there exists r i  false do 5 E    6 for i  1      K do 7 E  E   v i  v 0   8 w  v i  v 0   c  bt  a i  S i  F   9 if r i  false then 10 for j  1      K do 11 T  bt  a i  S i  f a j g  F   12 if c  T  024 w  v i  v 0  then 13 E  E   v i  v j   w  v i  v j   c  T   14 end if 15 end for 16 end if 17 end for 18 U  dmst  V E  f Directed Min Spanning Tree g 19 for  v i  v 0  2 E  U  and r i  false do 20 r i  true  21 for v j is a parent of v i in U do 22 S j  S j  a i  23 end for 24 end for 25 end while 26 return S  The marking of the attributes guarantees that there can be no cycles in S  In fact the marking order also tells us a valid order for transmitting the attributes Further as at least one attribute is marked at each step this guarantees that th e algorithm terminates in K steps Let S be the collection of sources The following proposition tells us that the augmentation performed by S ET P ACK does not compromise the optimality of collections next to S  Proposition 9 Assume the collection of sources S  f S 1      S K g  Let O  f O 1      O K g be the collection of sources such that S i 022 O i and j O i j 024 j S i j  1  Let S 0 be the collection that Algorithm 3 produces from S in a single step Then there is a collection S 003 such that S 0 i 022 S 003 i and that c  S 003  024 c  O   Proof Let G be the graph constructed by Algorithm 3 for the collection S  Construct the following graph W  For each O i such that O i  S i add the edge  v i  v 0   For each O i 6  S i add the edge  v i  v j   where f a j g  O i 000 S i  But W is a directed spanning tree of G  Let U be the directed minimum spanning tree returned by the algorithm Let S 003 i  S 0 i if  v i  v 0  2 E  U  and S 003 i  S 0 i  f a j g if  v i  v j  2 E  U   Note that S 003 de\002nes a valid model and because U is optimal we must have c  S 003  024 c  O   Corollary 10 Assume that F is a family of itemsets having 2 items at maximum The algorithm S ET P ACK returns the optimal tree model Let us consider the complexity of the algorithms The algorithm S ET P ACK runs in a polynomial time By using dynamic programming we can show that G ENERATE runs in O  j F j 2  time We also tested a faster variant of the algorithm in which the exhaustive search in G ENERATE is replaced by the greedy approach similar to the ID3 algorithm We call this variant S ET P ACK G REEDY  6 Related Work Finding interesting itemsets is a major research theme in data mining To this end many measures have been suggested over time A classic measure for ranking itemsets is frequency for which there exist ef\002cient search algorithms 2 15  O t h e r m e a s u r e s i n v o l v e c o m p a r i n g h o w much an itemset deviates from the independence assumption 1,3,4,11  I n y e t o t h e r a p p r o a c h e s m o r e 003 e x i b l e m o d els are used such as Bayes networks 17 18  M a x i m u m Entropy estimates 24 31  R e l a t e d a r e a l s o l o w e n t r o p y sets itemsets for which the entropy of the data is low 16  Many of these approaches suffer from the fact that they require a user-de\002ned threshold and further that at low thresholds extremely many itemsets are returned many of which convey the same information To address the latter 
593 
593 


problem we can use closed 28 o r n o n d e r i v a b l e  6  i t e m sets that provide a concise representation of the original itemsets However these methods deteriorate even under small amounts of noise Alternative to these approaches of describing the pattern set there are methods that instead pick groups of itemsets that describe the data well As such we are not the 002rst to embrace the compression approach to data mining 12  R e cently Siebes et al 30 i n t r o d u c e d t h e M D L b a s e d K RIMP algorithm to battle the frequent itemset explosion at low support thresholds It returns small subsets of itemsets th at together capture the distribution of the data well These code tables have been successfully applied in classi\002cation 22  m e a s u r i n g t h e d i s s i m i l a r i t y o f d a t a  3 3   a n d d a t a generation 34  W h i l e t h e s e a p p l i c a t i o n s s h o w s t h e p r a c ticality of the approach K RIMP can only describe the patterns between the items that are present in the dataset On the other hand we consider the 0 s and the 1 s in the data symmetrically and hence we are able to provide more detailed descriptions of the data including patterns betwee n the presence and absence of items More different from our methods are the lossy data description approaches These strive to describe just part of the data and as such may overlook important interactions Summarization 7 i s a c o m p r e s s i o n a p p r o a c h t h a t i d e n t i 002 e s a group of itemsets such that each transaction is summarized by one set with as little loss of information as possible Yet different are pattern teams 20  w h i c h a r e g r o u p s o f m o s t informative lengthk itemsets 19  s e l e c t e d t h r o u g h a n e x ternal interestingness measure As this approach is computationally intensive the number of team members is typically  10  Bringmann et al 5 p r o p o s e d a s i m i l a r s e l e c tion method that can consider larger pattern sets However it also requires the user to choose a quality measure to which the pattern set has to be optimized unlike our parameterfree and lossless method Alternatively we can view the approach in this paper as building a global model for data and then selecting the itemsets that describe the model This approach then allows us to use MDL as a model selection technique In a related work 32 t h e a u t h o r s b u i l d d e c o m p o s a b l e m o d e l s i n o r d e r to select a small family of itemsets that model the data well The decision trees returned by our methods and particularly the DAG that they form have a passing resemblance to Bayes networks 9  H o w e v e r  a s b o t h t h e m o d e l c o n struction and complexity weighing differ strongly so do th e outcomes To be more precise in our case the distributions p  x par  x  are modeled and weighted via decision trees whereas in the Bayes network setup any distribution is weighted equally Furthermore we use the correspondence between the itemsets and the decision trees to output local patterns as opposed to Bayes networks which are traditionally used as global models 7 Experiments This section contains the results of the empirical evaluation of our methods using toy and real datasets 7.1 Datasets For the experimental validation of the two packing strategies we use a group of datasets with strongly differing stati stics From the LUCS/KDD repository 8 w e t o o k a n u m b e r of often used databases to allow for comparison to other methods To test our methods on real data we used the Mammals presence database and the Helsinki CS-courses dataset The latter contains the enrollment records of students taking courses at the Department of Computer Science of the University of Helsinki The mammals dataset consists of the absence/presence of European mammals 25 in geographical areas of 50x50 kilometers 1 The details of these datasets are provided in Table 1 Table 1 Statistics of the datasets used in the experiments Dataset j D j K  of 1's anneal 898 71 20.1 breast 699 16 62.4 courses 3506 98 4.6 mammals 2183 40 46.9 mushroom 8124 119 19.3 nursery 12960 32 28.1 pageblocks 5473 44 25.0 tic–tac–toe 958 29 34.5 7.2 Experiments with Toy Datasets To evaluate whether our method correctly identi\002es in\dependencies we start our experimentation using two arti\002cial datasets of 2000 transactions and 10 items For both databases the data is generated per transaction and the presence of the 002rst item is based on a fair coin toss For the 002rst database the other items are similarly generated However for the second database the presence of an item is 90 dependent on the previous item As such both datasets have item densities of about 50 If we apply G REEDY P ACK  our greedy decision tree building method to these datasets we see that it is unable to compress the independent database at all Opposing the dependently generated dataset can be compressed into only 1 The full version of the dataset is available for research pur poses upon request http://www.european-mammals.org  
594 
594 


Table 2 Compression number of trees and numbers of extract ed itemsets for the greedy algorithm G REEDY P ACK K RIMP Dataset c  T b  bits c  T  bits c  T  c  T b    trees  sets min–sup  sets  bits ratio  anneal 23104 12342 53.4 71 1203 1 102 22154 34.6 breast 8099 2998 37.0 16 17 1 30 4613 16.9 courses 76326 61685 80.8 98 1230 2 148 71019 79.3 mammals 78044 50068 64.2 40 845 200 254 90192 42.3 mushroom 442062 115347 26.1 119 999 1 424 231877 20.9 nursery 337477 180803 53.6 32 3409 1 260 258898 45.5 pageblocks 15280 7611 49.8 44 219 1 53 10911 5.0 tic–tac–toe 25123 14137 56.3 29 619 1 162 28812 62.3 50 of the original number of bits Inspection of the resulting itemsets show that the resulting model correctly de scribes the dependencies in detail The resulting 19 itemsets are f a 1      a 10  a 1 a 2      a 9 a 10 g  7.3 The Greedy Method Recall that our goal is to 002nd high quality descriptions of the data Following the MDL principle the quality of the found descriptions can objectively be measured by the compression of the data We present the compressed sizes for G REEDY P ACK in Table 2 The encoding costs c  T  include the size of the encoded data and the decision trees The initial costs as denoted by c  T b   are those of encoding the data using na¨\021ve single-node T RIVIAL T REE s Each of these experiments required 1–10 seconds runtime with an exception of 60 s for mushroom  From Table 2 we see that all models returned by G REEDY P ACK strongly reduce the number of bits required to describe the data this implicitly shows that good models are returned The quality can be gauged by taking the compression ratios into account In general our greedy method reduces the number of bits to only half of what the independent model requires As two speci\002c examples of the found dependencies in the courses dataset the course Data Mining was packed using Machine Learning  Software Engineering  Information Retrieval Methods and Data Warehouses  Likewise AI and Machine Learning were used to pack the Robotics course Like discussed above our approach and the K RIMP 30 algorithm have stark differences in what part of the data is considered However as both methods use compression and result good itemsets it is insightful to compare the algorithms For the latter we here allow it to compress as well as possible and thus consider candidates up to as low min-sup thresholds as feasible Let us compare between the outcomes of either method For K RIMP these are itemsets for ours it is the combination of the decision trees and the related itemsets We see that K RIMP typically returns fewer itemsets than G REEDY P ACK  However our method returns itemsets that describe interactions between both present and absent items Next we observed that especially the initial K RIMP compression requires many more bits than ours and as such K RIMP attains better compression ratios However if we disregard the ratios and look at the raw number of bits the two methods require we see that K RIMP generally requires twice as many bits to describe only the 1's in the data than G REEDY P ACK does to represent all of the data 7.4 Validation through Classi\014cation To further assess the quality of our models we use a simple classi\002cation scheme 22  F i r s t  w e s p l i t t h e t r a i n i n g database into separate class-databases We pack each of these Next the class labels of the unseen transactions wer e assigned according to the model that compressed it best We ran these experiments for three databases viz mushroom  breast and anneal  A random 90 of the data was used to train the models leaving 10 to test the accuracy on The accuracy scores we noted resp 100 98.0 and 93.4 are fully comparable to and for the second even better than the classi\002ers considered in 22  7.5 Choosing Good Itemsets In this subsection we evaluate S ET P ACK  our itemset selection algorithm Recall that this algorithm selects item sets such that they allow for building succinct encoding decision trees The difference with G REEDY P ACK is that in this setup the resulting itemsets should be a subset of a given candidate family Here we consider frequent itemsets as candidates We set the support threshold such that the experiments with S ET P ACK were 002nished within 1 2 2 hours with an exception of 23 hours for considering the 
595 
595 


Table 3 Compressed sizes and number of extracted itemsets f or the itemset selection algorithms Candidate Itemsets S ET P ACK S ET P ACK G REEDY K RIMP Dataset min-sup  sets c  T  c  T  c  T b    sets c  T  c  T  c  T b    sets  bits  sets anneal 175 8837 20777 89.9 103 20781 89.9 69 31196 53 breast 1 9920 5175 63.7 42 5172 63.9 49 4613 30 courses 55 5030 64835 84.9 268 64937 85.1 262 73287 93 mammals 700 7169 65091 83.4 427 65622 84.1 382 124737 125 mushroom 1000 123277 313428 70.9 636 262942 59.5 1225 474240 140 nursery 50 25777 314081 93.0 276 314295 93.1 218 265064 225 pageblocks 1 63599 11961 78.3 92 11967 78.3 95 10911 53 tic–tac–toe 7 34019 23118 92.0 620 23616 94.0 277 28957 159 large candidate family for mushroom  For comparison we use the same candidates for K RIMP  We also compare to S ET P ACK G REEDY  which required 1–12 minutes 7 minutes typically with an exception of 2 1 2 hours for mushroom  Comparing the results of this experiment Table 3 with the results of G REEDY P ACK in the previous experiment we see that the selection process is more strict now even fewer itemsets are regarded as interesting enough Large candidate collections are strongly reduced in number up to three orders of magnitude On the other hand the compression ratios are still very good The reason that G REEDY P ACK produces smaller compression ratios is because it is allowe d to consider any itemset Further the fact alone that even with this very strict selection the compression ratios are generally well below 90 show that these few sets are indeed of high importance to describing the major interactions in the data If we compare the number of selected sets to K RIMP  we see that our method returns in the same order as many itemsets These descriptions require far less bits than tho se found by K RIMP  As such ours are a better approximation of the Kolmogorov complexity of the data Between S ET P ACK and S ET P ACK G REEDY the outcomes are very much alike this goes for both the obtained compression as well as the number of returned itemsets However the greedy search of S ET P ACK G REEDY allows for much shorter running times 8 Discussion The experimentation on our methods validates the quality of the returned models The models correctly detect dependencies in the data while ignoring independencies Only a small number of itemsets is returned which are shown to provide strong compression of the data By the MDL principle we then know these describes all important regularities in the data distribution in detail ef\002ciently and witho ut redundancy This claim is further supported by the high classi\002cation accuracies our models achieve The G REEDY P ACK algorithm generally uses more itemsets and obtains better packing ratios than S ET P ACK  While G REEDY P ACK is allowed to use any itemset S ET P ACK may only use frequent itemsets This suggests that we may able to achieve better ratios if we use different candidates  for example low-entropy sets 16  The running times of the experiments reported in this work range from seconds to hours and depend mainly on the number of attributes and rows of the datasets The exhaustive version S ET P ACK may be slow on very large candidate sets however the greedy version S ET P ACK G REEDY can even handle such families well Considering that our curren t implementation is rather na¨\021ve and the fact that both methods are easily parallelized both G REEDY P ACK and S ET P ACK G REEDY are suited for the analysis of large databases The main outcomes of our models are the itemsets that identify the encoding paths However the decision trees from which these sets are extracted can also be regarded as interesting as these provide an easily interpretable view o n the major interactions in the data Further just consideri ng the attributes used in such a tree as an itemset also allows for simple inspection of the main associations In this work we employ the MDL criterion to identify the optimal model Alternatively one could consider using either BIC or AIC both of which can easily be applied to judge between our decision tree-based models 9 Conclusions In this paper we presented two methods that 002nd compact sets of high quality itemsets Both methods employ compression to select the group of patterns that describe all interactions in the data best That is the data is considere d symmetric and thus both the 0s and 1s are taken into account in these descriptions Experimentation with our methods 
596 
596 


showed that high quality models are returned Their compact size typically tens to thousands of itemsets allow fo r easy further analysis of the found interactions References 1 C  C  A g g a r w a l a n d P  S  Y u  A n e w f r a m e w o r k f o r itemset generation In Proceedings of the ACM SIGACTSIGMOD-SIGART symposium on Principles of Database Systems PODS  pages 18–24 ACM Press 1998 2 R  A g r a w a l  H  M a n n i l a  R  S r i k a n t  H  T o i v o n e n  a n d A  I  Verkamo Fast discovery of association rules In Advances in Knowledge Discovery and Data Mining  pages 307–328 AAAI 1996 3 S  B r i n  R  M o t w a n i  a n d C  S i l v e r s t e i n  B e y o n d m a r k e t baskets Generalizing association rules to correlations In ACM SIGMOD International Conference on Management of Data  pages 265–276 ACM Press 1997 4 S  B r i n  R  M o t w a n i  J  D  U l l m a n  a n d S  T s u r  D y n a m i c itemset counting and implication rules for market basket data In ACM SIGMOD International Conference on Management of Data  pages 255–264 1997 5 B  B r i n g m a n n a n d A  Z i m m e r m a n n  T h e c h o s e n f e w  O n identifying valuable patterns In IEEE International Conference on Data Mining ICDM  pages 63–72 2007 6 T  C a l d e r s a n d B  G o e t h a l s  M i n i n g a l l n o n d e r i v a b l e f r e quent itemsets In Proceedings of the 6th European Conference on Machine Learning and Principles and Practice of Knowledge Discovery in Databases  pages 74–85 2002 7 V  C h a n d o l a a n d V  K u m a r  S u m m a r i z a t i o n c o m p r e s s i n g data into an informative representation In Proceedings of the IEEE Conference on Data Mining  pages 98–105 2005 8 F  C o e n e n  T h e L U C S K D D d i s c r e t i s e d  n o r m a l i s e d A R M and CARM data library 2003 9 G  F  C o o p e r a n d E  H e r s k o v i t s  A B a y e s i a n m e t h o d f o r the induction of probabilistic networks from data Machine Learning  9:309–347 1992 10 T  C o v e r a n d J  T h o m a s  Elements of Information Theory 2nd ed John Wiley and Sons 2006 11 W  D u M o u c h e l a n d D  P r e g i b o n  E m p i r i c a l b a y e s s c r e e n i n g for multi-item associations In ACM SIGKDD Conference on Knowledge Discovery and Data Mining  pages 67–76 2001 12 C  F a l o u t s o s a n d V  M e g a l o o i k o n o m o u  O n d a t a m i n i n g  compression and kolmogorov complexity In Data Mining and Knowledge Discovery  volume 15 pages 3–20 Springer 2007 13 P  D  G r  u n w a l d  The Minimum Description Length Principle  MIT Press 2007 14 J  H a n  H  C h e n g  D  X i n  a n d X  Y a n  F r e q u e n t p a t t e r n mining Current status and future directions In Data Mining and Knowledge Discovery  volume 15 Springer 2007 15 J  H a n a n d J  P e i  M i n i n g f r e q u e n t p a t t e r n s b y p a t t e r n growth methodology and implications SIGKDD Explorations Newsletter  2\(2\:14–20 2000 16 H  H e i k i n h e i m o  E  H i n k k a n e n  H  M a n n i l a  T  M i e l i k  a i nen and J K Sepp¨anen Finding low-entropy sets and trees from binary data In ACM SIGKDD Conference on Knowledge Discovery and Data Mining  pages 350–359 2007 17 S  J a r o s z e w i c z a n d T  S c h e f f e r  F a s t d i s c o v e r y o f u n e x p ected patterns in data relative to a bayesian network In ACM SIGKDD Conference on Knowledge Discovery and Data Mining  pages 118–127 2005 18 S  J a r o s z e w i c z a n d D  A  S i m o v i c i  I n t e r e s t i n g n e s s o f frequent itemsets using bayesian networks as background knowledge In ACM SIGKDD Conference on Knowledge Discovery and Data Mining  pages 178–186 2004 19 A  J  K n o b b e a n d E  K  Y  H o  M a x i m a l l y i n f o r m a t i v e k itemsets and their ef\002cient discovery In ACM SIGKDD Conference on Knowledge Discovery and Data Mining  pages 237–244 2006 20 A  J  K n o b b e a n d E  K  Y  H o  P a t t e r n t e a m s  I n Proceedings of the 10th European Conference on Machine Learning and Principles and Practice of Knowledge Discovery in Databases  pages 577–584 2006 21 P  K o n t k a n e n a n d P  M y l l y m  a k i  A l i n e a r t i m e a l g o r i t h m for computing the multinomial stochastic complexity Information Processing Letters  103\(6\:227–233 2007 22 M  v a n L e e u w e n  J  V r e e k e n  a n d A  S i e b e s  C o m p r e s s i o n picks the item sets that matter In Proceedings of the 10th European Conference on Machine Learning and Principles and Practice of Knowledge Discovery in Databases  pages 585–592 2006 23 M  L i a n d P  V i t  a n y i  An Introduction to Kolmogorov Complexity and its Applications  Springer-Verlag 1993 24 R  M e o  T h e o r y o f d e p e n d e n c e v a l u e s  ACM Trans Database Syst  25\(3\:380–406 2000 25 A  J  M i t c h e l l J o n e s  G  A m o r i  W  B o g d a n o w i c z  B Krystufek P J H Reijnders F Spitzenberger M Stubb e J B M Thissen V Vohralik and J Zima The Atlas of European Mammals  Academic Press 1999 26 K  V  S  M u r t h y  On growing better decision trees from data  PhD thesis Johns Hopkins Univ Baltimore 1996 27 S  N i j s s e n a n d  E Fromont Mining optimal decision trees from itemset lattices In ACM SIGKDD Conference on Knowledge Discovery and Data Mining  pages 530–539 2007 28 N  P a s q u i e r  Y  B a s t i d e  R  T a o u i l  a n d L  L a k h a l  D i s c o vering frequent closed itemsets for association rules Lecture Notes in Computer Science  1540:398–416 1999 29 J  R i s s a n e n  F i s h e r i n f o r m a t i o n a n d s t o c h a s t i c c o m p l e xity IEEE Transactions on Information Theory  42\(1\:40–47 1996 30 A  S i e b e s  J  V r e e k e n  a n d M  v a n L e e u w e n  I t e m s e t s t h a t compress In Proceedings of the SIAM Conference on Data Mining  pages 393–404 2006 31 N  T a t t i  M a x i m u m e n t r o p y b a s e d s i g n i 002 c a n c e o f i t e m s e t s Knowledge and Information Systems KAIS  2008 Accepted for publication 32 N  T a t t i a n d H  H e i k i n h e i m o  D e c o m p o s a b l e f a m i l i e s o f itemsets In Proceedings of the 12th European Conference on Machine Learning and Principles and Practice of Knowledge Discovery in Databases  2008 33 J  V r e e k e n  M  v a n L e e u w e n  a n d A  S i e b e s  C h a r a c t e r i s i ng the difference In ACM SIGKDD Conference on Knowledge Discovery and Data Mining  pages 765–774 2007 34 J  V r e e k e n  M  v a n L e e u w e n  a n d A  S i e b e s  P r e s e r v i n g privacy through data generation In Proceedings of the IEEE Conference on Data Mining  pages 685–690 2007 
597 
597 


