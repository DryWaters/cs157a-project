A new approach for detecting anonymity of patterns Zhihui Wang Wei Wang Baile Shi Department of Computing and Information Technology Fudan University Shanghai 200433 China  zhhwang weiwang1 bshi  fudan.edu.cn Abstract Information sharing becomes more frequently and easily than before However it also brings serious threats towards individualís privacy It is no doubt that sharing personal data can cause privacy breaches Moreover sharing the knowledge discovered by data mining may also pose threats to personal privacy In this paper we consider the anonymity of patterns derived from the result of frequent itemset mining A new projection-based approach for detecting anonymity of patterns is presented We prove that the approach can detect all the maximal inference channels for nonk anonymous patterns The experimental results show that our approach is more ef\036cient than previous work especially when the number of closed frequent itemsets in the mining result is close to or larger than the number of transactions in a database 1 Introduction Data mining can help to discover useful knowledge from large amount of data In many applications we need to share the discovered knowledge by data mining with others Generally people believe that the output of data mining represents a statistical result over a large population and it will not violate personal privacy However the recent research result shows that the result of data mining may still pose threats to personal privacy because an attacker can derive from the result of data mining some knowledge with respect to a very small group of individuals  T aking frequent itemset mining 1 8  as an example Given a transaction database D  where each transaction in D corresponds to a person and items in the transactions corresponds to the personís characteristics e.g the medical examination results Suppose that after performing frequent itemset mining on D twofrequent itemsets S 1  ab and S 2  abc are discovered where sup D  ab 1 and sup D  abc 0  Then an attacker can easily derive by inclusion-exclusion principle  that the support of pattern a 001 b 001 c is 1  This means that there is exactly one person having characteristics both a and b  but not c  By linking the pattern with data from other sources the attacker may identify a speci\036c individual with such characteristics accurately Therefore sharing the above result of frequent itemset mining will cause threats to anonymity For tackling such threats Atzori etc 2 shifted the concept of k anonymity 12 from data t o the result of data mining and proposed the concept of k anonymous pattern That is the result of data mining is k anonymous if no pattern derived from the mining result can be related to a group with cardinality less than k  In this paper we extend the work in 2 and address the problem of detecting anonymity of patterns The scenario that we consider is under frequent itemset mining Given a minimum support threshold 001  the result of frequent itemset mining is the collection of all the itemsets whose supports are larger than 001  Frequent itemset mining are very useful in many areas e.g association rule discovery feature extraction classi\036cation and clustering Gi v e n t he result of frequent itemset mining and an anonymity threshold k  k 002 N   the problem of detecting anonymity of patterns is to discover the collection of all the maximal inference channels for nonk anonymous patterns We have presented a novel projection-based approach and shown that it can discover all the maximal inference channels for nonk anonymous patterns The experimental results have shown that our approach is more ef\036cient than previous work especially when the number of closed frequent itemsets in the mining result is close to or larger than the number of transactions in a database The rest of this paper is organized as follows In the next section we review the related work in literature In Section 3 we brief the related notations and concepts and de\036ne our problem of detecting anonymity of pattern before sharing the result of frequent itemset mining In Section 4 we present a projection-based approach for detecting maximal inference channels and show that our approach can 
The Ninth International Conference on Web-Age Information Management 978-0-7695-3185-4/08 $25.00 © 2008 IEEE DOI 10.1109/WAIM.2008.81 339 
The Ninth International Conference on Web-Age Information Management 978-0-7695-3185-4/08 $25.00 © 2008 IEEE DOI 10.1109/WAIM.2008.81 333 


exactly discover all the maximal inference channels We evaluate the performance of our approach in Section 5 Finally we conclude our work in Section 6 2 Related work The concept of k anonymity was 036rst proposed in 12  which a imed to eliminate t he threats t o i ndi vidual s anonymity arising in data sharing Because of the existence of some quasi-identi\036ers the original database has to be transformed before sharing such that there are at least k tuples with a same quasi-identi\036er value Many efforts have been focused on this direction 5 6 10 1 T he dif f erence between their work and ours is that what we consider are the threats to anonymity arising in knowledge sharing that is sharing the result of data mining Although the result will not pose threats to individualís anonymity by mining on a k anonymized database such result may not be interesting due to the information loss caused by k anonymization  Atzori etc 2 shifted t he concept of k anonymity from data to the result of data mining and proposed the concept of k anonymous pattern Especially they considered that given the result of frequent itemset mining for sharing and an anonymity threshold k  k 002 N   if it can be inferred from the mining result that there exists a pattern p  and the support of p is less than k  then sharing the mining result may pose threats to individualís anonymity We extend their work by presenting a new projection-based approach for detecting all the maximal inference channels for nonk anonymous patterns There are also other work to address privacy preservation when sharing the result of data mining 11 15 They assumed that some of the discovered itemsets or patterns themselves are known to be private in advance then transformed the mining result such that those private knowledge is hidden before sharing The scenario we considered is completely different from their studies We consider that sharing the result of frequent itemset mining may pose threats to anonymity which may not be known without detection in advance 3 Problem statement 3.1 Basic concepts and notations For facilitating our discussion we 036rst introduce some basic concepts and notations Let I   x 1 x 2   x n  be a set of literals called items A transaction T is a subset of I  i.e T 002 2 I  and a transaction database D is a set of transactions An itemset S is a set of items from I  i.e S 003I  If there are l items in S  we say that the length of S is l  denoted by  S   l  For brevity sometimes we write an itemset S   x j x j 1 x k  in the form of S  x j x j 1 x k  Particularly we use the symbol  to represent an empty itemset whose length is 0  Notice that the empty itemset is a subset of any itemset Deﬁnition 1 A transaction T contains itemset S iff S 003 T  In a transaction database D the support or support count  sometimes called in literature of itemset S is the number of transactions in D that contain S  denoted by sup D  S   Deﬁnition 2 Given transaction database D and minimum support threshold 001  001 002 N   we say that S is a 001 frequent itemset of D if sup D  S  004 001 in D  Particularly if  S  1  we also say that S is a 001 frequent item  T id T 1 abcd 2 bcef 3 abc 4 cdef 5 bef 6 acd 7 bcdf 8 abcdef 9 bcdef 10 abcde Figure 1 An example of transaction database Length Frequent Itemsets 0    10 1  a 5   b 8   c 9   d 7   e 6   f 6 2  ad 4   ab 4   ac 5   ef 5   df  4   bf 5   cf 5   de 4   be 5   ce 5   bd 5   cd 7   bc 7 3  abc 4   acd 4   bef 4   cef 4   cdf 4   bcf 4   cde 4   bce 4   bcd 5 Figure 2 An example of the result of frequent itemset mining  001 4  For brevity we sometimes call 001 frequent itemset frequent itemset  and 001 frequent item frequent item if the context is clear Given a transaction database D  and minimum support threshold 001  the task of frequent itemset mining is to 036nd the collection of all 001 frequent itemsets with their supports in D  There are many typical approaches for frequent itemset mining e.g Apriori FP-gro w th 8 etc W e denote the result of frequent itemset mining with F  D 001  or F in short if the context is clear where F  D 001    S sup D  S   sup D  S  004 001   
340 
334 


Example 1 A transaction database D is given in Figure 1 Let minimum support threshold 001 4  Figure 2 shows all 001 frequent itemsets in D  where for example  abc 4 means sup D  abc   and the length of itemset abc is 3 Notice that the support of empty itemset  is actually the number of transactions in the database Deﬁnition 3 A frequent itemset S 002F  D 001  is said to be a closed frequent itemset iff 001 S 001 002F  D 001  such that S 005 S 001 and sup D  S 001  sup D  S   Given a database D  and minimum support threshold 001  the collection of all the closed frequent itemsets is denoted by C  D 001   There exist approaches e.g CLOSET etc that can mine directly the collection of all the closed frequent itemsets on a database Deﬁnition 4 A frequent itemset S 002F  D 001  is said to be an maximal frequent itemset iff 001 S 001 002F  D 001  such that S 005 S 001  Given a database D  and minimum support threshold 001  the collection of all the maximal frequent itemsets is denoted by M  D 001   There exist approaches e.g MAFIA  e tc that can mine directly the collection o f all the maximal frequent itemsets on a database Following the notation of  w e n o w brief t he de\036nitions related to 001 vulnerable pattern as follows Deﬁnition 5 Given transaction database D  and minimum support threshold 001 a general pattern is a propositional sentence where variables are items and logical connectives are AND 001  OR 006  and NOT   Without loss of generality a general pattern p can be converted equivalently into its disjunctive normal form p  p 1 006  006 p w  If for each p i 1 007 i 007 w   the itemset formed by all the items in p i is a 001 frequent itemset then we say that p is a 001 vulnerable pattern  The domain of all possible 001 vulnerable patterns is denoted by P at  D 001   Example 2 Given the result of frequent itemset mining in Figure 2  a 001 b  006  a 001 c  is a 001 vulnerable pattern because both ab and ac are 001 frequent itemsets We can see that a 001 frequent itemset is a special form of 001 vulnerable pattern That is it is a 001 vulnerable pattern built only by the logical connective AND 001  For example frequent itemset abc in Figure 2 can be expressed in the form of a 001 b 001 c  As in we will focus our discussion on the 001 vulnerable pattern in this paper For brevity we sometimes call 001 vulnerable pattern pattern if the context is clear Deﬁnition 6 Given a pattern p and a transaction T for each item x 002 p if x 002 T  we substitute x with true  otherwise with false  If the value of p is true under such substitution we say that T can satisfy p  denoted by p  T   otherwise we say that T cannot satisfy p  denoted by  p  T   Deﬁnition 7 Given a transaction database D  the support of pattern p in D is the number of transactions in D that can satisfy p  denoted by sup D  p   T  T 002D\001 p  T    Example 3 Given pattern p  b 001 c 001 f  transactions T 1 T 3 T 10 in Figure 1 can satisfy pattern p  and sup D  p   3.2 The problem Before getting into the details of our problem we 036rst brief the result related to anonymity of patterns in  Deﬁnition 8 Given a transaction database D and an anonymity threshold k  a pattern p is said to be a k anonymous pattern in D iff sup D  p  004 k or sup D  p   Deﬁnition 9 Given anonymity threshold k  and C 003 F  D 001   if it can be derived from C that 010 p 002P at  D 001  0 sup D  p  k  then C is an inference channel of nonk anonymous pattern p  denoted by C  0 sup D  p  k  Example 4 Given the result of frequent itemset mining F  D 001  shown in Figure 2 and anonymity threshold k  3 theset   bcd 5   bc 7  constitutes an inference channel of pattern b 001 c 001 d  because it can be derived from the set that 0 sup D  b 001 c 001 d   3  Atzori etc  sho ws t hat g i v en anon ymity threshold k  and two frequent itemsets X   a 1   a u   Y   a 1   a u b 1   b v  in F  D 001  notice that X 003 Y  and  Y  X   b 1   b v   let p  a 1 001∑∑∑\001 a u 001 b 1 001 001 b v if 0 sup D  p  k  then   S sup D  S   X 003 S 003 Y  forms an inference channel of pattern p  Such an inference channel is denoted by  C Y X f Y X   where C Y X    S sup D  S   X 003 S 003 Y   and f Y X  sup D  p  The collection of all C Y X in F  D 001  with the corresponding f Y X is denoted by C h  k D 001   Deﬁnition 10 Given  C Y X f Y X  002C h  k D 001  if 001  C L H f L H  002C h  k D 001  such that X 003 H and  Y  X  003  L  H   then C Y X is an maximal inference channel  The collection of all the maximal inference channels is denoted by MC h  k D 001   It has been showed in t hat if 001 C 002MC h  k D 001  i.e MC h  k D 001  011  then 012 p 002P at  D 001  is k anonymous This means if all the maximal inference channels in MC h  k D 001  are blocked consequently no pattern in P at  D 001  can be derived nonk anonymous Therefore given the result F  D 001  of frequent itemset mining how to correctly and ef\036ciently detect the collection MC h  k D 001  of all the maximal inference channels is a key component for eliminating threats to anonymity In this paper we focus on the problem of detecting anonymity of patterns That is detecting all the maximal 
341 
335 


inference channels for a given anonymity threshold More formally our problem can be stated as follows given a transaction database D theresult F  D 001  of frequent itemset mining and an anonymity threshold k  our problem consists in detecting the collection MC h  k D 001  of all the maximal inference channels which may be used by an attacker to derive nonk anonymous patterns in P at  D 001   Here 001 and k are two parameters de\036ned by the data owner The former is for frequent itemset mining while the latter is for anonymity control We assume 001>k Thisis consistent with the practice Generally speaking the minimum support threshold 001 is at least in the order of hundreds for frequent itemset mining while the threshold k in the order of tens will be enough to preserve anonymity 4 Detecting maximal inference channels of threats to anonymity The previous work 2 3 detected maximal i nference channels by calculating the supports of patterns based on Theorem 1 below We call them the calculation-based approaches The proof of Theorem 1 was given in  Theorem 1 Given a pattern p  a 1 001∑∑∑\001 a u 001 b 1 001∑∑∑\001  b v in D  then sup D  p  001 X 002 S 002 Y   1  S  X  sup D  S   where X   a 1   a u   Y   a 1   a u b 1   b v   and  S  X    s i  s i 002 S 001 s i 013 002 X   Especially an optimized calculation-based approach Algorithm 2 in denoted by OICD in this paper computes sup D  p  for all Y 002M  D 001   and X 002C  D 001  001 X 003 Y If 0 sup D  p  k  then  C Y X sup D  p  is an maximal inference channel The time complexity of OICD is O  mc 2  lm  lc    where m is the number of maximal frequent itemsets lm is the average length of maximal frequent itemsets and c the number of closed frequent itemsets lc the average length of closed frequent itemsets Next we will present a novel projection-based approach for detecting maximal inference channels 4.1 The projection-based approach Before getting into the details of our approach we 036rst give the de\036nition of projection on transaction and database Deﬁnition 11 Given an itemset S and a transaction T the projection of T based on S is denoted by 001 S  T   x  x 002 S 001 x 002 T   For brevity we call 001 S  T  the projected transaction if the context is clear Example 5 Given an itemset S  bcd  and a transaction T   b c e f   then 001 S  T   b c   Deﬁnition 12 Given an itemset S  a transaction database D  the projection of D based on S is denoted by 001 S  D   001 S  T   T 002D  For brevity we call 001 S  D  the projected database if the context is clear Algorithm PMICD Input F  D 001   D  k Output MC h  k D 001  Method M  D 001     S sup D  S  002F  D 001   S is maximal   MC h  k D 001  011  for each  M sup D  M  002M  D 001  do begin D 001  001 M  D   sort transactions of D 001 in lexicographic order ct 1 n 1 for i 2 to D 001  do begin if T 001 n  T 001 i then ct   T 001 n T 001 i 002D 001  else begin if ct  k then add  C M T 001 n ct  into MC h  k D 001   ct 1 n  i  end end end Figure 3 Projection-based maximal inference channel detector PMICD Our approach for detecting maximal inference channels is called PMICD Projection-based Maximal Inference Channel Detector Its details are given in Figure 3 The main idea is as follows for each maximal frequent itemset M 002M  D 001   PMICD 036rst computes the projected database D 001 based on M  Then it sorts the transactions of the projected database D 001 in lexicographic order The sorting operation clusters the transactions with same values in D 001  and will facilitate the later operations At the following steps PMICD scans the projected database D 001 once During scanning it counts the number of appearances of current transaction T 001 n in D 001  If the number of appearances of T 001 n in D 001 is less than anonymity threshold k but larger than 0  then it means that the set of itemsets C M T 001 n   S  T 001 n 003 S 003 M  forms an maximal inference channel Therefore  C M T 001 n ct  is added into M ch  k D 001   where ct is the number of appearances of transaction T 001 n in D 001  The above procedure is repeated until all the maximal frequent itemsets in M  D 001  have been considered Suppose the number of maximal frequent itemsets is m  and the number of transactions in database D is n  then for each maximal frequent itemset M  the time of computing the projected database D 001 based on M is O  n  because it needs one scan of D  the time of sorting the transactions in D 001 is O  n log n   if a quick-sort is used the following steps of PMICD scans D 001 once to discover the set of maximal inference channels like C M T 001 n  and thus the time spent at 
342 
336 


these steps is O  n   In summary the total time of PMICD is O  mn log n   T 001 id T 001 001 S  T  T id 1 b 5 2 bc 2 3 bc 3 4 bcd 1 5 bcd 7 6 bcd 8 7 bcd 9 8 bcd 10 9 cd 4 10 cd 6 Figure 4 An example of the projected transaction database after being sorted in lexicographic order Example 6 Given transaction database D in Figure 1 and minimum threshold 001 4  we can know that S  bcd is an maximal frequent itemset Figure 4 gives the transactions in 001 S  D  after being sorted in lexicographic order where the last column is the T id of a projected transaction in original database D  Suppose anonymity threshold k 3  the set of maximal inference channels with respect to S is   C bcd b  1   C bcd bc  2   C bcd cd  2   4.2 Correctness and completeness of the projection-based approach Lemma 1 If C Y X is an inference channel detected by PMICD then Y is an maximal frequent itemset According to the procedure of PMICD obviously we can know that Lemma 1 is true Theorem 2 Any inference channel detected by PMICD is an maximal inference channel Proof By contradiction Suppose the inference channel C Y X detected by PMICD is not maximal Then there exists an inference channel C L H  C L H 013  C Y X  such that 0  f L H k  where X 003 H and  Y  X  003  L  H   That means Y 005 L  which con\037icts with the fact that Y is an maximal frequent itemset by Lemma 1 Lemma 2 If C Y X is an maximal inference channel then Y is an maximal frequent itemset The correctness of Lemma 2 was shown in  Theorem 3 Given database D  the collection of all the maximal frequent itemsets M  D 001   and anonymity threshold k  PMICD can detect all the maximal inference channels Proof Without loss of generality assume C Y X 002 MC h  k D 001   where X   a 1   a u   and Y   a 1   a u b 1   b v   Since C Y X 002MC h  k D 001  we can derive that the pattern p  a 1 001∑∑∑\001 a u 001 b 1 001 b v is nonk anonymous This means the number of transactions in 001 Y  D  exactly containing itemset  a 1   a u  is larger than 0 but less than k  From Lemma 2 we know that Y is an maximal frequent itemset Because PMICD computes 001 M  D  for each maximal frequent itemset M  and adds all  C M T 001 n ct  into MC h  k D 001   where 0 ct   T 001  T 001  T 001 n 001 T 001 002 001 M  D   k  we know that C Y X can be detected by PMICD Therefore PMICD can detect all the maximal inference channels 5 Experiments In this section we evaluate the performance of our approach PMICD and compare it with the approach proposed in previous work Algorithm 2 in denoted by OICD in this paper In our experiments both PMICD and OICD are implemented with C 5.1 Experimental settings We use two real datasets MUSHROOM and CHESS from the FIMI repository http://\036mi.cs.helsinki.\036/data In MUSHROOM there are 119 items 8124 transactions and the average length of transactions is 23 In CHESS there are 75 items 3196 transactions and the average length of transactions is 37 The methodology of our experiments is as follows Given minimum support threshold 001  we 036rst perform frequent itemset mining on the test datasets by Apriori Then we detect the collection of maximal inference channels for nonk anonymous patterns with PMICD and OICD respectively We plot each result in the following 036gures with an average over the results of 10 trials Besides in the results we do not include the time for computing maximal frequent itemsets and closed frequent itemsets from the result of frequent itemset mining in OICD and also do not include the time for computing maximal frequent itemsets from the result of frequent itemset mining in PMICD since for a given minimum support threshold there exist approaches that can mine directly closed frequent itemsets e.g CLOSET e tc maximal f requent itemsets e.g MAFIA  e tc on a database All our experiments are performed on a 2.8GHz Intel Pentium IV PC with 512MB main memory running Microsoft Window XP operating system 
343 
337 


10 15 20 25 0 50 100 150 200 250 300 350 400 450 500 001 N  Time \(second MUSHROOM OICD PMICD Figure 5 Time for detecting maximal inference channels 75 80 85 90 0 50 100 150 200 250 300 350 400 001 N  Time \(second CHESS OICD PMICD Figure 6 Time for detecting maximal inference channels 5.2 The e\001ect of minimum support threshold In the 036rst set of experiments we 036rst vary the value of minimum support threshold 001 to get different sets of 001 frequent itemsets Then we 036x the anonymity threshold k 30  and run PMICD and OICD on the mining results respectively The time for detecting all the maximal inference channels in MUSHROOM and CHESS is given in Figure 5 and Figure 6 respectively In the 036gures the x axis is 001/N  where N is the number of transactions in database\(notice that the number of transactions in a database is 036xed in our experiments and the y axis is the time measured in seconds It can been seen that when 001 is small PMICD is much faster than OICD The reason is that when 001 becomes small the number of closed frequent itemsets increases dramatically Especially when 001/N  10 for MUSHROOM the number of closed frequent itemsets is 4885 which is close to the number of transactions in MUSHROOM and when 001/N  75 for CHESS the number of closed frequent itemsets is 11525 which is even much larger than the number of transactions in CHESS Since OICD is a calculationbased approach it need scan the set of closed frequent itemsets for each maximal frequent itemsets and calculates the supports of patterns based on Theorem 1 Therefore the execution time of OICD will increase dramatically when 001 becomes small 10 15 20 25 0 500 1000 1500 2000 2500 3000 001 N  Number of Maximal Inference Channels MUSHROOM Figure 7 Number of maximal inference channels vs minimum support threshold 001 75 80 85 90 0 1000 2000 3000 4000 5000 6000 7000 8000 001 N  Number of Maximal Inference Channels CHESS Figure 8 Number of maximal inference channels vs minimum support threshold 001 Figure 7 and Figure 8 show the number of maximal inference channels in MUSHROOM and CHESS respectively when we vary the value of minimal support threshold 001 Because in all these experiments the maximal inference channels discovered by PMICD are the same as those by OICD which also demonstrates the correctness and completeness of PMICD We only plot the result of PMICD 
344 
338 


Obviously in both 036gures the number of maximal inference channels is reduced when the value of 001 is increased The underlying reason is that increasing the value of 001 reduces the number of 001 frequent itemsets For example when 001/N increases from 10 to 25 in Figure 7 the number of 001 frequent itemsets shrinks from 574431 to 5545 This means that the amount of information exposed to attackers is reduced Consequently the number of maximal inference channels is also reduced 5.3 The e\001ect of anonymity threshold 10 15 20 25 30 35 40 45 50 0 5 10 15 20 25 30 k Time \(second MUSHROOM OICD PMICD Figure 9 Time for detecting maximal inference channels 10 15 20 25 30 35 40 45 50 0 5 10 15 20 25 30 35 40 45 50 k Time \(second CHESS OICD PMICD Figure 10 Time for detecting maximal inference channels In the second set of experiments we 036rst 036x the value of minimum support threshold 001 to perform frequent itemset mining on the datasets Then we run PMICD and OICD on the mining results with different values of anonymity threshold k  respectively The time for detecting all the maximal inference channels in MUSHROOM is shown in Figure 9 where we 036x 001/N  15  the number of closed frequent itemsets is 2261 and the number of maximal frequent itemsets is 321 We can see that the execution time of both PMICD and OICD is almost unchanged when varying the value of anonymity threshold k  The reason is that in both PMICD and OICD the anonymity threshold k only acts as a condition for judging if a set of frequent items forms an maximal inference channel or not it does not affect the execution time of both approaches In Figure 10 we mine CHESS with 001/N  80  There are 5083 closed frequent itemsets and 226 maximal frequent itemsets in the mining result When detecting maximal inference channels under different values of anonymity threshold k  we 036nd the same phenomenon as that in Figure 9 That is the execution time of both PMICD and OICD is almost unchanged We also observe that PMICD is more ef\036cient than OICD in both Figure 9 and Figure 10 The reason is again that the number of closed frequent itemsets is close to or even larger than the number of transactions in MUSHROOM or CHESS 10 15 20 25 30 35 40 45 50 0 200 400 600 800 1000 1200 1400 1600 1800 2000 k Number of Maximal Inference Channels MUSHROOM Figure 11 Number of maximal inference channels vs anonymity threshold k In Figure 11 and Figure 12 we plot the number of maximal inference channels when varying the value of anonymity threshold k  Because in all these experiments the maximal inference channels discovered by PMICD are the same as those by OICD which again demonstrates the correctness and completeness of PMICD We only plot the result of PMICD The results in Figure 11 and Figure 12 show that the number of maximal inference channels increases for both MUSHROOM and CHESS when we enlarge the value of anonymity threshold k  This phenomenon is easily understood from the de\036nition of inference channel When enlarging the value of k  the number of pattern p 002P  D 001  s.t 0 sup D  p  k are increased Consequently the 
345 
339 


10 15 20 25 30 35 40 45 50 0 500 1000 1500 2000 2500 3000 3500 4000 k Number of Maximal Inference Channels CHESS Figure 12 Number of maximal inference channels vs anonymity threshold k number of maximal inference channels will also increase 6 Conclusions Sharing the knowledge discovered by data mining without discrimination may pose threats to individualís anonymity In this paper we present a new projectionbased approach for detecting the anonymity of patterns before sharing the result of frequent itemset mining In our approach maximal inference channels are detected by projecting the original database based on each maximal frequent itemset without the actual calculation on the supports of frequent itemsets We prove that our approach can discover the collection of all the maximal inference channels for nonk anonymous patterns The experimental results show that our projection-based approach is more ef\036cient than previous work especially when the number of closed frequent itemsets in the mining result is close to or larger than the number of transactions in a database For future research we will investigate the possibility of developing more effective and ef\036cient approaches for detecting anonymity of patterns and we will also extend our research to other forms of knowledge representation Acknowledgment This research was partly supported by the Shanghai Leading Academic Discipline Project No B114 the National Natural Science Foundation of China No 60673133 the National Grand Fundamental Research 973 Program of China No 2005CB321905 We would like to thank the anonymous reviewers for their helpful comments References  R  A gra w al and R  S rikant F ast a lgorithms for m ining a ssociation rules in large databases In VLDB  pages 487ñ499 Santiago Chile 1994  M  A tzori F  Bonchi F  G iannotti and D  P edreschi k anonymous patterns In PKDD  pages 10ñ21 Porto Portugal 2005  M  A tzori F  Bonchi F  G iannotti and D  P edreschi Anonymity preserving pattern discovery VLDB J  accepted for publication 2008  D  B urdick M  C alimlim J  F lannick J  Gehrk e and T  Y iu MAFIA A maximal frequent itemset algorithm IEEE Trans Knowl Data Eng  17\(11 2005  J W  Byun A Kamra E  B ertino and N  L i Ef 036cient k anonymization using clustering techniques In DASFAA  pages 188ñ200 Bangkok Thailand 2007  B  C  M  F ung K W a ng and P  S  Y u T op-do wn specialization for information and privacy preservation In ICDE  pages 205ñ216 Tokyo Japan 2005  J  Han and M  Kamber  Data Mining Concept and Techniques  Morgan Kaufmann Publishers San Francisco 2000  J  Han J  P ei a nd Y  Y i n Mining frequent patterns w ithout candidate generation In SIGMOD Conference  pages 1ñ12 Dallas Texas USA 2000  D  K nuth Fundamental Algorithms  Addison-Wesley Reading Massachusetts 1997  K LeFe vre D J DeW itt and R  R amakrishnan Mondrian multidimensional k-anonymity In ICDE  Atlanta GA USA 2006  S R M Oli v eira O  R  Z a  031ane and Y Saygin Secure association rule sharing In PAKDD  pages 74ñ85 Sydney Australia 2004  P  Samarati Protecting r espondents identities in m icrodata release IEEE Trans Knowl Data Eng  13\(6 2001  L Sweene y  k-anon ymity A model f or protecting privacy International Journal of Uncertainty Fuzziness and Knowledge-Based Systems  10\(5 2002  J W a ng J Han a nd J Pei CLOSET s earching f or the best strategies for mining frequent closed itemsets In KDD  pages 236ñ245 Washington DC USA 2003  Z W a ng W  W a ng and B  S hi B locking i nference channels in frequent pattern sharing In ICDE  pages 1425ñ1429 Istanbul Turkey 2007  Z W a ng W  W a ng B Shi and S  H  B oe y  Pri v ac ypreserving frequent pattern sharing In DASFAA  pages 225 236 Bangkok Thailand 2007  J Xu W  W ang J Pei X W a ng B Shi and A  W C Fu Utility-based anonymization using local recoding In KDD  pages 785ñ790 Philadelphia PA USA 2006 
346 
340 


applying optimization 2\(line 3.1 and 3.1.1 If Y is NULL and support of X is  S then any itemset which is a superset of IS has support  Sin W 002  therefore pop item from IS and continue to examine next itemset\(line 3.1.2 Similar is the case for line 4 If sum of support of X and Y\(i.e support of IS in W 002  is 002 S then we need to examine if their intersection say Z is a new CFI\(line 5 If Z contains done-set items then it should have been already examined earlier according to optimization 5 so all intersections of closures of supersets of IS contains done-set items Therefore pop item from IS and continue\(line 5.1 If Z is a subset of Y then Z is nonclosed in W/d-block but is closed in W 002 due to addition of d 002 block therefore add it as a new CFI to set CFI 002 and prune common todo-set items by dynamic reordering\(line 5.2 Suppose if Z  Y and support of Y is  S in W/d-block then Y\(already closed becomes frequent in W 002 due to addition of d 002 block therefore add it as a new CFI to set CFI 002 and prune common todo-set items by dynamic reordering\(line 5.3 If support of Y is 002 S in W/d-block then it is already present in LDIUW tree therefore just update itís support by support of IS in d 002 block and prune common todo-set items by dynamic reordering\(line 5.4 Line 6 constructs ISís conditional FP-tree F new w.r.t minimum support:=1 to explore further itemsets based on dynamic reordering and recursively calls the procedure Stream-Close on F new  Finally in line 6 of BEGIN block it merges CFIís of CFI 002 and LDIUW tree to output the set of CFI 002 in W 002  Lemma 8 An itemset is a CFI in W 002 iff Stream-Close says Proof An itemset D is found as a CFI by Stream-Close when 1 D is frequent 2 there is no item which appears in every transaction in D-conditional database and 3 D is not a proper subset of any CFI already found To assert correctness of the lemma we show that there is no frequent closed itemset E which can be found later such that D is a subset of E Suppose we can 036nd such an itemset E then ED 011  0 must happen in every transaction of the D-conditional database This leads to a con\037ict with the fact that there is no item appearing in every transaction in the D-conditional database Thus we have the lemma The correctness of the algorithm has been reasoned stepby-step It generates the complete set of CFIís in W 002 as shown in above lemmas 4 Empirical results We compare our algorithm with Moment w hich is the state-of-the-art algorithm to mine frequent closed item0 0.01 0.02 0.03 0.04 0.05 0.5 3 5.5 8 10.5 13 15.5 18 20.5  The Minimum Support Running time in Seconds   Moment Stream\025Close  Figure 7 Performance comparisons of Moment and Stream-close 0 0.01 0.02 0.03 0.04 0.05 0.4 0.9 1.4 1.9 2.4 2.9  The Minimum Support Memory usage in number of itemsets   Moment Stream\025Close  Figure 8 Memory usage results of Moment and Stream-close The order of number of itemsets is 10 7  sets in data streams For performance evaluation the synthetic dataset T10.I6.D100K is used The dataset is generated by the same procedure as described in where t he three numbers o f each dataset denote the average transaction size T the average maximal potential frequent itemset size I and the total number of transactions D respectively In our experiments the transactions of T10.I6.D100K dataset are looked up incrementally in blocks in sequence to simulate the environment of an online data stream In our experiments we keep sliding width parameter d  10 for Stream-Close window width:=1,00,000 for both Stream-Close and Moment and perform experiments over 100 sliding windows for Moment and 10 sliding windows for Stream-Close\(since dí:=10 and take the average processing time for every 10 transactions processed under different minimum supports for T10.I6.D100K data set as shown in 036gure 7 We can see from 036gure 7 that Stream-Close runs much faster than Moment when the support threshold is relatively low because the number of boundary nodes stored in the data structure of Moment increases when the support threshold decreases as the number of nodes to be processed 
524 
524 


and checked for node property increase execution time is increased When the support threshold is relatively high these two algorithms have comparable running time Moment runs a little bit faster than Stream-Close as the threshold increases This is because as the threshold is increased the number of the boundary nodes in Moment decreases while Stream-Close processes the same number of closed itemsets independent of support information This is advantageous when users have different speci\036ed support thresholds in their online queries Regarding memory usage Stream-Close maintains only CFIís in LDIU-tree but whereas for Moment when the user de\036ned support threshold is small the number of nodes it maintains in the memory increases dramatically which consists of all the infrequent gateway nodes unpromising gateway nodes intermediate nodes and closed nodes as shown in 036gure 8 We performed all our experiments on 2 GB RAM 1.8 GHz AMD machine Our performance study shows that Stream-Close is very ef\036cient and the optimization techniques proposed in this paper are effective in improving the algorithm ef\036ciency 5 Conclusions In this paper we investigated the issues for cumulative mining of CFIís in high speed data streams and addressed the inef\036ciency problem of mining the new window from scratch,sliding window by one transaction and also the problem associated with closedness checking of candidate itemsets in newly arrived block We proposed an algorithm Stream-Close by exploring several novel techniques to increase ef\036ciency and scalability It is a promising algorithm to mine CFIís over high speed data streams In the future we plan to explore how to mine compressed top-k itemsets in datastreams and also how to adaptively vary sliding width according to speed of the data streams Also we plan to perform experiments on different datasets 6 Acknowledgements We thank Dr Yun Chi at the University of California for providing us the Moment algorithm source code References  J  Pei J  Han and R Mao Closet An e f 036cient algorithm for mining frequent closed itemsets ACM SIGMOD International Workshop on Data Mining and Knowledge Discovery May 2000  J  Pei J  Han and J W ang Closet Searching for the best strategies for mining frequent closed itemsets ACM SIGKDD Intíl Conf on Knowledge Discovery and Data Mining August 2003  M  J  Z aki and C J Hsiao Charm An ef 036cient algorithm for closed itemsets mining SIAM Intíl Conf on Data Mining April 2002  C  L ucchese S Orlando and R Pere go F a st and memory ef\036cient mining of frequent closed itemsets Knowledge and Data Engineering IEEE Transactions January 2006  J  H  Chang W  S Lee A Zhou Finding recent frequent itemsets adaptively over online data streams ACM SIGKDD Intíl Conf on Knowledge Discovery and Data Mining August 2003  S H L i S Lee and M Shan An ef 036cient algorithm for mining frequent itemsets over the entire history of data streams Intíl Workshop on Knowledge Discovery in Data Streams Sept 2004  G S  M anku R Motw ani Approximate frequenc y counts over data streams Intíl Conf on Very Large Databases 2002  J  H  Chang W  S Lee A s liding w indo w m ethod for 036nding recently frequent itemsets over online data streams Journal of Information Science and Engineering July 2004  C  Giannella J  Han J Pei X Y an P  S Y u  Mining frequent patterns in data streams at multiple time granularities Data Mining Next Generation Challenges and Future Directions AAAI/MIT 2003  C Lin D Chiu Y  W u A L P  Chen Mining frequent itemsets from data streams with a time-sensitive sliding window SIAM Intíl Conf on Data Mining April 2005  Y  Chi H W ang  P  S  Y u  R R Muntz Moment Maintaining closed frequent itemsets over a stream sliding window Intíl Conf on Data Mining November 2004  Nan J iang Le Gruenw ald CFI-Stream M ining Closed Frequent Itemsets in Data Streams KDD August 2006  Dong Xin Jia wei Han Xifeng Y a n and Hong Cheng On Compressing Frequent Patterns Knowledge and Data Engineering Special issue on Intelligent Data Mining 60\(1 5-29 2007  R Agra w a l R Srikant F ast a lgorithms for m ining association rules Intíl Conf on Very Large Databases September 1994  P  V a ltchef R  M issaoui and R Godin A F ramework for Incremental Generation of Frequent Closed ItemSets Proceedings of the 2nd SIAM Workshop on Data Mining Arlington VA April 2002  A v ailable a t h ttp://cl w eb csa.iisc.ernet.in/srirang a 
525 
525 


