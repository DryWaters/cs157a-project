Finding Good Itemsets by Packing Data Nikolaj Tatti HIIT Department of Information and Computer Science Helsinki University of Technology ntatti@cc.hut.\002 Jilles Vreeken Department of Computer Science Universiteit Utrecht jillesv@cs.uu.nl Abstract The problem of selecting small groups of itemsets that represent the data well has recently gained a lot of attention We approach the problem by searching for the itemsets that compress the data ef\002ciently As a compression technique we use decision trees combined with a re\002ned version of MDL More formally assuming that the items are ordered we create a decision tree for each item that may only depend on the previous items Our approach allows us to 002nd complex interactions between the attributes not just co-occurrences of 1s Further we present a link between the itemsets and the decision trees and use this link to export the itemsets from the decision trees In this paper we present two algorithms The 002rst one is a simple greedy approach that builds a family of itemsets directly from data  The second one given a collection of candidate itemsets se lects a small subset of these itemsets Our experiments show that these approaches result in compact and high quality descriptions of the data 1 Introduction One of the major topics in data mining research is the discovery of interesting patterns in data From the introdu ction of frequent itemset mining and association rules 2  the pattern explosion was acknowledged at high frequency thresholds only common knowledge is revealed while at low thresholds prohibitively many patterns are returned Part of this problem can be solved by reducing these collections either lossless or lossy however even then the resulting collections are often so large that they cannot be an alyzed by hand or even machine Recently it was therefore argued 14 t h a t w h i l e t h e e f 002 c i e n c y o f t h e s e a r c h p r o c e s s has received ample attention there still exists a strong ne ed for pattern mining approaches that deliver compact yet hig h quality collections of patterns see Section 6 for a more detailed discussion Our goal is to identify the family of itemsets that form the best description of the data Recent proposals to this end all consider just part of the data by ei ther only considering co-occurrences 30 o r b e i n g l o s s y i n nature 5 7 20  I n t h i s p a p e r  w e p r e s e n t t w o m e t h o d s t h a t do describe all interactions in the data Although differen t in approach both methods return small families of itemsets  which are selected to provide high-quality lossless descri ptions of the data in terms of local patterns Importantly ou r parameterless methods regard the data symmetrically That is we consider not just the 1s in the data but also the 0s Therefore we are able to 002nd patterns that describe all interactions between items in the data not just co-occurrences As a measure of quality for the collection of itemsets we employ the practical variant of Kolmogorov Complexity 23  t h e M i n i m u m D e s c r i p t i o n L e n g t h  M D L  p r i n c i ple 13  T h i s p r i n c i p l e i m p l i e s t h a t w e s h o u l d d o i n d u c t i o n through compression It states that the best model is the model that provides the best compression of the data it is the model that captures best the regularities of the data wi th as little redundancy as possible The main idea of our approach is to use decision trees to determine the shortest possible encoding of an attribute  by using the values of already transmitted attributes For example let us assume two binary attributes A and B  Now say that for 90 of the time when the attribute A has a value of 1  the attribute B has a value of 0  If this situation occurs frequently we recognize this dependency and include the item A in the tree deciding how to encode B  Using such trees allows us to 002nd complex interactions between the items while at the same time MDL provides us with a parameter-free framework for removing fake interactions that are due to the noise in the data The main outcome of our methods is not the decision trees but the group of itemsets that form their paths these are the impor 
2008 Eighth IEEE International Conference on Data Mining 1550-4786/08 $25.00 © 2008 IEEE DOI 10.1109/ICDM.2008.39 588 
2008 Eighth IEEE International Conference on Data Mining 1550-4786/08 $25.00 © 2008 IEEE DOI 10.1109/ICDM.2008.39 588 


tant patterns in the data since they capture the dependencie s between the attributes implied by the decision trees The two algorithms we introduce to this end are orthogonal in approach Our 002rst method builds the encoding decision trees directly from the data it greedily introduces sp lits until no split can help to compress the data further Just as naturally as we can extract itemsets from these trees we can consider the trees that can be built from a collection of item sets That link is exploited by our second method which tries to select the best itemsets from a larger collection Experimental evaluation shows that both methods return small collections of itemsets that provide high quality dat a descriptions These sets allow for very short encoding of the data which inherently shows that the most important patterns in the data are captured As the number of itemsets are small we can easily expose the resulting itemsets to further analysis either by hand or by machine The rest of this paper is as follows After the covering preliminaries in Section 2 we discuss how to use decision trees to optimally encode the data succinct in Section 3 Next in Section 4 we explain the connection between decision trees and itemsets Section 5 introduces our method with which good itemsets can be selected by weighing these through our decision tree encoding Related work is discussed in Section 6 after which we present the experiments on our methods in Section 7 We round up with discussion and conclusions in Sections 8 and 9 2 Preliminaries and Notation In this section we introduce preliminaries and notations used in subsequent sections A binary dataset D is a collection of j D j transactions  binary vectors of length K  The i th element of a random transaction is represented by an attribute a i  a Bernoulli random variable We denote the collection of all the attributes by A  f a 1      a K g  An itemset X  f x 1      x L g 022 A is a subset of attributes We will often use the dense notatio n X  x 1 001 001 001 x L  Given an itemset X and a binary vector v of length L  we use the notation p  X  v  to express the probability of p  x 1  v 1      x L  v L   If v contains only 1s then we will use the notation p  X  1  if v contains only 0s then we will use the notation p  X  0  Given a binary dataset D we de\002ne q D to be an empirical distribution  q D  A  v   jf t 2 D j t  v gj  j D j  We de\002ne the frequency of an itemset X to be f r  X   q D  X  1  In the paper we use the common convention 0 log 0  0  All logarithms in the paper are of base 2  In the subsequent sections we will need some knowledge of graphs All the graphs in the paper are directed Given a graph G we denote by V  G  the set of vertices and by E  G  the edges of G  A directed graph is said to be acyclic DAG if there is no cycle in the graph A directed graph is said to be directed spanning tree if each node except one special node has exactly one outgoing edge The special node has no outgoing edge and is called sink  3 Packing Binary Data with Decision Trees In this section we present our model for packing the data and a greedy algorithm for searching good models 3.1 The De\014nition of the Model Our goal in this section is to de\002ne a model that is used to transmit a binary dataset D from a transmitter to a receiver We do this by transmitting one transaction at the time the order of which does not matter Within a single transaction we transmit the items one at the time Assume that we are transmitting an attribute a t  As the attribute may have two values we need to have two codes to indicate its value We de\002ne the table in which these two codes are stored to be a coding table  Obviously the codes need to be optimal that is as short as possible From information theory 10  w e h a v e t h e o p t i m a l S h a n n o n c o d e s o f length 000 log p  x   Here the optimal code lengths are thus 000 log q D  a t  1 and 000 log q D  a t  0  We need to transmit the attribute j D j times The cost of these transmissions is 000j D j X v  f 0  1 g q D  a t  v  log q D  a t  v   This is the simplest case of encoding a t  Note that we are not interested in the actual codes but only in their lengths  they allow us to determine the complexity of a model A more complex and more interesting approach to encode a t succinct is to have several coding tables from which the transmitter chooses one for transmission Choosing the coding table is done via a decision tree that branches on the values of other attributes in the same transaction That is we have a decision tree used for encoding a t in which each leaf node is associated with a different coding table of a t  The leaf is selected by testing the values of other attribute s within the same transaction Example 1 Assume that we have three attributes a  b  and c and consider the trees given in Figure 1 In Figure 1\(a we have the simplest tree a simple coding table with no dependencies at all A more complex tree is given in Figure 1\(b where the transmitter chooses from two coding table for a based on the value of c  Similarly in Figure 1\(d we have 
589 
589 


p\(a = 1 p\(a = 0 a T 1  Trivial tree encoding a p\(a = 1 p\(a = 0 p\(a = 1 p\(a = 0 c 1 0 b T 2  Alternative tree for a p\(b = 1 p\(b = 0 p\(b = 1 p\(b = 0 a 1 0 c T 3  Tree for b p\(c = 1 p\(c = 0 p\(c = 1 p\(c = 0 p\(c = 1 p\(c = 0 a 1 b 0 1 0 d T 4  Tree for c Figure 1 Toy decision trees three different coding tables for c  The choice of the coding table in this case is based on the values of a and b  Let us introduce some notation Let T be a tree encoding a t  We use the notation t  T   a t  We set src  T  to be the set of all items used in T for choosing the coding table Example 2 For the tree T 3 in Figure 1\(c we have t  T 3   b and src  T 3   f a g and for T 4 in Figure 1\(d we have t  T 4  and src  T 4   f a b g  To de\002ne the cost of transmitting a t we 002rst de\002ne lvs  T  to be the set of all leaves in T  Let L 2 lvs  T  be a leaf and q D  L  be the probability of L being chosen Further q D  a t  v j L  is the probability of a t  v given that L is chosen We now know that the optimal cost denoted by c D  T   is 000j D j X L 2 lvs  T  X v  f 0  1 g q D  a t  v L  log q D  a t  v j L   Example 3 The number of bits needed by T 1 in Figure 1\(a to transmit a in a random transaction is 000 0  5 log 0  5 000 0  5 log 0  5  1  Similarly if we assume that q D  a  1  q D  a  0  0  5  the number of bits needed by T 3 to transmit c in a random transaction is 0  5  000 0  3 log 0  3 000 0  7 log 0  7  0  5  000 0  1 log 0  1 000 0  9 log 0  9  0  62  In order for the receiver to decode the attribute a t he must know what coding table was used Thus he must be able to use the same decision tree that the transmitter used for encoding a t  To ensure this the transmitter must know src  T  when decoding a t  So the attributes must have an order in which they are sent and the decision trees may only use the attributes that have already been transmitted The aforementioned requirement is easily characterized by the following construction Let G be a directed graph with K nodes each node corresponding to an attribute The graph G contains all the edges of form  a t  a s  where a s 2 src  T   where T is the tree encoding a t  We call G the dependency graph  It is easy to see that there exists an order of the attributes if and only if G is an acyclic graph DAG If G constructed from a set of trees T  f T 1      T K g is indeed DAG we call the set T a decision tree model  Example 4 Consider a graph given in Figure 2\(a constructed from the trees T 2  T 3  and T 4 Figure 1 We cannot use this combination of trees for encoding since there is a cycle in the graph On the other hand if we use trees T 1  T 3  and T 4  then the resulting graph given in Figure 2\(b is acyclic and thus these trees can be used for the transmission c a b a Dependency graph with cycles c a b b Dependency acyclic graph Figure 2 Dependency graphs constructed from the trees given in Figure 1 3.2 Encoding the Data In order for the receiver to be able to decode the attributes he must know both the coding tables and the trees Hence we need to transmit both of these First we cover how the coding tables the leafs of the decision trees are transmitted To transmit the coding tables we use the concept of Re\002ned MDL 13  R e 002 n e d M D L i s a n i m p r o v e d v e r s i o n o f the more traditional two-part MDL sometimes referred to as the crude MDL The basic idea of the re\002ned variant is that instead of transmitting the coding tables the transmi tter and the receiver use so called universal codes Universa l codes are the cornerstone of Re\002ned MDL As these are codes can be derived without any further shared information this allows for a good weighing of the actual complexity of the data and model with virtually no overhead While the practicality of applying such codes depends on the type of the model our decision trees are particularly well-suit ed 
590 
590 


These universal codes provide a cost called the complexity of the model This cost can be calculated as follows let L be a leaf in the decision tree i.e coding table and M be the number of transactions for which L is used Then the complexity of this leaf denoted by c MDL  L   is c MDL  L   log M X k 0 022 M k 023 022 k M 023 k 022 M 000 k M 023 M 000 k  In general there is no known closed formula for the complexity of the model Hence estimates are usually employed 29  H o w e v e r  f o r o u r t r e e m o d e l s w e c a n a p p l y an existing linear-time algorithm that solves the complexi ty for multinomial models 21  W e s h o u l d a l s o p o i n t o u t t h a t the Re\002ned MDL is asymptotically equivalent to Bayes Information Criteria BIC if the number of transactions goes to in\002nity and the number of free parameters stays 002xed However for moderate numbers of transactions there may be signi\002cant differences 13  Now that the coding tables can be transmitted we need to know how to transmit the actual tree T  To encode the tree we simply transmit the nodes of the tree in a sequence We use one bit to indicate whether the node is a leaf or an intermediate node N 2 intr  T   For an intermediate node we additionally use log K bits where K is the number of attributes in D  to indicate the item that is used for the split The combined cost of a tree T  denoted by c  T   is c  T   X N 2 intr  T  000 1  log K 001  c D  T   X L 2 lvs  T  000 1  c MDL  L  001  that is the cost c  T  is the number of bits needed to transmit the tree and the attribute a t in each transaction of D  Example 5 Assume that we have a dataset with 100 transactions and 3 items Assume also that q D  a  0  q D  a  1  0  5  We know that the complexity of the leaves in this case is c MDL  L   3  25  The cost of the tree T 3 Figure 1\(c is c  T 3  1  log 3  1  3  25  50  000 0  3 log 0  3 000 0  7 log 0  7  1  3  25  50  000 0  1 log 0  1 000 0  9 log 0  9 69  8  Given a decision tree model T  f T 1      T K g we de\002ne the cost c  T   P i c  T i   The cost c  T  is the number of bits needed to transmit the trees one for each attribute and the complete dataset D  We should point out that for data with many items the term log K grows and hence the threshold increases for selecting an attribute into any decision tree This is an inter esting behavior as due to the 002nite number of transactions for datasets with many items there is an increased probability that two items will correlate even though they are independent according to the generative distribution 3.3 Greedy Algorithm Our goal is to 002nd the decision tree model with the lowest complexity cost However since many problems related to the decision trees are NP complete 26 w e w i l l r e s o r t t o a greedy heuristic to approximate the decision tree model T with the lowest c  T   It is based on the ID3 algorithm To fully introduce the algorithm we need some notation By T RIVIAL T REE  a t  we mean the simplest tree packing a t without any other attributes see Figure 1\(a Given a tree T  a leaf L 2 lvs  T   and an item c not occurring in the path from L to the root of T  we de\002ne S PLIT T REE  T L c  to be a new tree where L is replaced by a non-leaf node testing the value of c and having two leaves as the branches The algorithm G REEDY P ACK starts with a tree model consisting only of trivial trees The algorithm 002nds the tre e which saves the most bits by splitting To ensure that the decision tree model is valid G REEDY P ACK builds a dependency graph G describing the dependencies of the trees and makes sure that G is acyclic The algorithm terminates when no further split can be made that saves any bits Algorithm 1 G REEDY P ACK algorithm constructs a decision tree model T  f T 1      T K g from a binary data D  1 V  f v 1      v K g  E    2 G   V E   3 T i  T RIVIAL T REE  a i   for i  1      K  4 while there are changes do 5 for i  1      K do 6 O i  T i  7 for L 2 lvs  T i   j  1      K do 8 if E   v i  v j  is acyclic and a j  2 path  L  then 9 U  S PLIT T REE  T i  L a j   10 if c  U   c  O i  then 11 O i  U  s i  j  12 end if 13 end if 14 end for 15 end for 16 k  arg min i f c  O i  000 c  T i  g  17 if c  O k   c  T k  then 18 T k  O k  19 E  E   v k  v s k   20 end if 21 end while 22 return f T 1      T K g  
591 
591 


4 Itemsets and Decision Trees So far we have discussed how to transmit binary data by using decision trees In this section we present how to selec t the itemsets representing the dependencies implied by the decision trees We will use this link in Section 5 A similar link between itemsets and decision trees is explored in 27 although our setup and goals are different Given a leaf L  the dependency of the item a t is captured in the coding table of L  Hence we are interested in 002nding itemsets that carry the same information That is itemsets from which we can compute the coding table To derive the codes for the leaf L it is suf\002cient to compute the probability q D  a t  1 j L   q D  a t  1  L  q D  L   1 Our goal is to express the probabilities on the right side of the equation using itemsets In order to do that let P be the path from L to its root Let pos  L  be the items along the path P which are tested positive Similarly let neg  L  be the attributes which are tested negative Using the inclusion-exclusion principle we see that q D  L   q D  pos  L   1  neg  L   0  X V 022 neg  L   000 1 j V j f r  pos  L   V   2 We compute q D  a t  1  L  in a similar fashion Let us de\002ne sets  L  for a given leaf L to be sets  L   f V  pos  L  j V 022 neg  L  g  f V  pos  L   f a t g j V 022 neg  L  g  Combining Eqs 12 we see that the collection sets  L  satis\002es our goal Proposition 6 The coding table associated with the leaf L can be computed from the frequencies of sets  L   Example 7 Let L 1  L 2  and L 3 be the leaves from left to right of T 4 in Figure 1\(d Then the corresponding families of itemsets are sets  L 1   f a ac g  sets  L 2   f b ab bc abc g  and sets  L 3   f  a b ab c ac bc abc g  We can easily see that the family sets  L  is essentially the smallest family of itemsets from which the coding table can be derived uniquely Proposition 8 Let G 6  sets  L  be a family of itemsets Then there are two data sets say D 1 and D 2  for which q D 1  a t  1 j L  6  q D 2  a t  1 j L  but f r  G  D 1   f r  G  D 2   Given a tree T we de\002ne sets  T  to be sets  T   S L 2 lvs  T  sets  L   We also de\002ne sets  T   S i sets  T i  where T  f T 1      T K g is a decision tree model 5 Choosing Good Itemsets The connection between itemsets and decision trees made in the previous section allows us to consider an orthogonal approach to identify good itemsets Informally our goal is to construct decision trees from a family of itemsets F  selecting the subset from F that provides the best compression of the data More formally our new approach is as follows given a downward closed family of itemsets F  we build a decision tree model T  f T 1      T K g providing a good compression of the data with sets  T  022 F  Before we can describe our main algorithm we need to introduce some further notation Firstly given two trees T p and T n not using attribute c  we de\002ne J OIN T REE  c T p  T n  to be the join tree with c as the root node T p as the positive branch of c  and T n as the negative branch of c  Secondly to de\002ne our search algorithm we need to 002nd the best tree bt  a t  S F   arg min T f c  T  j t  T   a t  src  T  022 S sets  T  022 F g  that is bt  a t  S F   returns the best tree for a t for which the related sets are in F and only splits on attributes in S  To compute the optimal tree bt  a t  S F   we use the exhaustive method presented originally in 27  g i v e n i n A l gorithm 2 The algorithm is straightforward it tests each valid item as the root and recurses itself on both branches Algorithm 2 G ENERATE algorithm for calculating bt  a t  S F   that is the best tree T for a t using only S as source and having sets  T  022 F  1 B  S   S F   2 C  T RIVIAL T REE  a t   3 for b 2 B do 4 G  f X 000 b j b 2 X 2 F g  5  D p  D n   S PLIT  D b   6 T p  G ENERATE  a t  G  S D p   7 T n  G ENERATE  a t  G  S D n   8 C  C  J OIN T REE  b T p  T n   9 end for 10 return arg min T f c  T  j T 2 Cg  We can now describe the actual algorithm for constructing decision tree models with a low cost Our method automatically discovers the order in which the attributes can be transmitted most succinct For this it needs to 002nd sets of attributes S i for each attribute a i such that these should be encoded before a i  The collection S  f S 1      S K g should de\002ne an acyclic graph and the actual trees are bt  a i  S i  F   We use c  S  as a shorthand for the total complexity P i c  bt  a i  S i  F  of the best model built from S  
592 
592 


We construct the set S iteratively At the beginning of the algorithm we have S i   and we increase the sets S i one attribute at a time We allow ourselves to mark the attributes The idea is that once the attribute a i is marked then we are not allowed to augment S i any longer At the beginning none of the nodes are marked To describe a single step in the algorithm we consider a graph H   v 0      v K   where v 1      v K represent the attributes and v 0 is a special auxiliary node We start by adding edges  v i  v 0  having the weight c  bt  a i  S i  F   thus the cost of the best tree possible from F using only the attributes in S i  Then for each unmarked node v i we 002nd out what other extra attribute will help most to encode it succinct To do this we add the edge  v i  v j  for each v j with the weight c  bt  a i  S i  f a j g  F   Now let U be the minimum directed spanning tree of H having v 0 as the sink Consider an unmarked node v i such that  v i  v 0  2 E  U   That node is now the best choice to be 002xed as it helps to encode the data best We therefore mark attribute a i and add a i to each S j for each ancestor v j of v i in U  This process is repeated until all attributes are marked The details of t he algorithm are given in Algorithm 3 Algorithm 3 The algorithm S ET P ACK constructs a decision tree model T given a family of itemsets F such that sets  T  022 F  Returns a DAG a family S   S 1      S K  of sets of attributes The trees are T i  bt  a i  S i  F   1 S   S 1      S K             2 r   r 1      r K    false      false   3 V  f v 0      v K g  4 while there exists r i  false do 5 E    6 for i  1      K do 7 E  E   v i  v 0   8 w  v i  v 0   c  bt  a i  S i  F   9 if r i  false then 10 for j  1      K do 11 T  bt  a i  S i  f a j g  F   12 if c  T  024 w  v i  v 0  then 13 E  E   v i  v j   w  v i  v j   c  T   14 end if 15 end for 16 end if 17 end for 18 U  dmst  V E  f Directed Min Spanning Tree g 19 for  v i  v 0  2 E  U  and r i  false do 20 r i  true  21 for v j is a parent of v i in U do 22 S j  S j  a i  23 end for 24 end for 25 end while 26 return S  The marking of the attributes guarantees that there can be no cycles in S  In fact the marking order also tells us a valid order for transmitting the attributes Further as at least one attribute is marked at each step this guarantees that th e algorithm terminates in K steps Let S be the collection of sources The following proposition tells us that the augmentation performed by S ET P ACK does not compromise the optimality of collections next to S  Proposition 9 Assume the collection of sources S  f S 1      S K g  Let O  f O 1      O K g be the collection of sources such that S i 022 O i and j O i j 024 j S i j  1  Let S 0 be the collection that Algorithm 3 produces from S in a single step Then there is a collection S 003 such that S 0 i 022 S 003 i and that c  S 003  024 c  O   Proof Let G be the graph constructed by Algorithm 3 for the collection S  Construct the following graph W  For each O i such that O i  S i add the edge  v i  v 0   For each O i 6  S i add the edge  v i  v j   where f a j g  O i 000 S i  But W is a directed spanning tree of G  Let U be the directed minimum spanning tree returned by the algorithm Let S 003 i  S 0 i if  v i  v 0  2 E  U  and S 003 i  S 0 i  f a j g if  v i  v j  2 E  U   Note that S 003 de\002nes a valid model and because U is optimal we must have c  S 003  024 c  O   Corollary 10 Assume that F is a family of itemsets having 2 items at maximum The algorithm S ET P ACK returns the optimal tree model Let us consider the complexity of the algorithms The algorithm S ET P ACK runs in a polynomial time By using dynamic programming we can show that G ENERATE runs in O  j F j 2  time We also tested a faster variant of the algorithm in which the exhaustive search in G ENERATE is replaced by the greedy approach similar to the ID3 algorithm We call this variant S ET P ACK G REEDY  6 Related Work Finding interesting itemsets is a major research theme in data mining To this end many measures have been suggested over time A classic measure for ranking itemsets is frequency for which there exist ef\002cient search algorithms 2 15  O t h e r m e a s u r e s i n v o l v e c o m p a r i n g h o w much an itemset deviates from the independence assumption 1,3,4,11  I n y e t o t h e r a p p r o a c h e s m o r e 003 e x i b l e m o d els are used such as Bayes networks 17 18  M a x i m u m Entropy estimates 24 31  R e l a t e d a r e a l s o l o w e n t r o p y sets itemsets for which the entropy of the data is low 16  Many of these approaches suffer from the fact that they require a user-de\002ned threshold and further that at low thresholds extremely many itemsets are returned many of which convey the same information To address the latter 
593 
593 


problem we can use closed 28 o r n o n d e r i v a b l e  6  i t e m sets that provide a concise representation of the original itemsets However these methods deteriorate even under small amounts of noise Alternative to these approaches of describing the pattern set there are methods that instead pick groups of itemsets that describe the data well As such we are not the 002rst to embrace the compression approach to data mining 12  R e cently Siebes et al 30 i n t r o d u c e d t h e M D L b a s e d K RIMP algorithm to battle the frequent itemset explosion at low support thresholds It returns small subsets of itemsets th at together capture the distribution of the data well These code tables have been successfully applied in classi\002cation 22  m e a s u r i n g t h e d i s s i m i l a r i t y o f d a t a  3 3   a n d d a t a generation 34  W h i l e t h e s e a p p l i c a t i o n s s h o w s t h e p r a c ticality of the approach K RIMP can only describe the patterns between the items that are present in the dataset On the other hand we consider the 0 s and the 1 s in the data symmetrically and hence we are able to provide more detailed descriptions of the data including patterns betwee n the presence and absence of items More different from our methods are the lossy data description approaches These strive to describe just part of the data and as such may overlook important interactions Summarization 7 i s a c o m p r e s s i o n a p p r o a c h t h a t i d e n t i 002 e s a group of itemsets such that each transaction is summarized by one set with as little loss of information as possible Yet different are pattern teams 20  w h i c h a r e g r o u p s o f m o s t informative lengthk itemsets 19  s e l e c t e d t h r o u g h a n e x ternal interestingness measure As this approach is computationally intensive the number of team members is typically  10  Bringmann et al 5 p r o p o s e d a s i m i l a r s e l e c tion method that can consider larger pattern sets However it also requires the user to choose a quality measure to which the pattern set has to be optimized unlike our parameterfree and lossless method Alternatively we can view the approach in this paper as building a global model for data and then selecting the itemsets that describe the model This approach then allows us to use MDL as a model selection technique In a related work 32 t h e a u t h o r s b u i l d d e c o m p o s a b l e m o d e l s i n o r d e r to select a small family of itemsets that model the data well The decision trees returned by our methods and particularly the DAG that they form have a passing resemblance to Bayes networks 9  H o w e v e r  a s b o t h t h e m o d e l c o n struction and complexity weighing differ strongly so do th e outcomes To be more precise in our case the distributions p  x par  x  are modeled and weighted via decision trees whereas in the Bayes network setup any distribution is weighted equally Furthermore we use the correspondence between the itemsets and the decision trees to output local patterns as opposed to Bayes networks which are traditionally used as global models 7 Experiments This section contains the results of the empirical evaluation of our methods using toy and real datasets 7.1 Datasets For the experimental validation of the two packing strategies we use a group of datasets with strongly differing stati stics From the LUCS/KDD repository 8 w e t o o k a n u m b e r of often used databases to allow for comparison to other methods To test our methods on real data we used the Mammals presence database and the Helsinki CS-courses dataset The latter contains the enrollment records of students taking courses at the Department of Computer Science of the University of Helsinki The mammals dataset consists of the absence/presence of European mammals 25 in geographical areas of 50x50 kilometers 1 The details of these datasets are provided in Table 1 Table 1 Statistics of the datasets used in the experiments Dataset j D j K  of 1's anneal 898 71 20.1 breast 699 16 62.4 courses 3506 98 4.6 mammals 2183 40 46.9 mushroom 8124 119 19.3 nursery 12960 32 28.1 pageblocks 5473 44 25.0 tictactoe 958 29 34.5 7.2 Experiments with Toy Datasets To evaluate whether our method correctly identi\002es in\dependencies we start our experimentation using two arti\002cial datasets of 2000 transactions and 10 items For both databases the data is generated per transaction and the presence of the 002rst item is based on a fair coin toss For the 002rst database the other items are similarly generated However for the second database the presence of an item is 90 dependent on the previous item As such both datasets have item densities of about 50 If we apply G REEDY P ACK  our greedy decision tree building method to these datasets we see that it is unable to compress the independent database at all Opposing the dependently generated dataset can be compressed into only 1 The full version of the dataset is available for research pur poses upon request http://www.european-mammals.org  
594 
594 


Table 2 Compression number of trees and numbers of extract ed itemsets for the greedy algorithm G REEDY P ACK K RIMP Dataset c  T b  bits c  T  bits c  T  c  T b    trees  sets minsup  sets  bits ratio  anneal 23104 12342 53.4 71 1203 1 102 22154 34.6 breast 8099 2998 37.0 16 17 1 30 4613 16.9 courses 76326 61685 80.8 98 1230 2 148 71019 79.3 mammals 78044 50068 64.2 40 845 200 254 90192 42.3 mushroom 442062 115347 26.1 119 999 1 424 231877 20.9 nursery 337477 180803 53.6 32 3409 1 260 258898 45.5 pageblocks 15280 7611 49.8 44 219 1 53 10911 5.0 tictactoe 25123 14137 56.3 29 619 1 162 28812 62.3 50 of the original number of bits Inspection of the resulting itemsets show that the resulting model correctly de scribes the dependencies in detail The resulting 19 itemsets are f a 1      a 10  a 1 a 2      a 9 a 10 g  7.3 The Greedy Method Recall that our goal is to 002nd high quality descriptions of the data Following the MDL principle the quality of the found descriptions can objectively be measured by the compression of the data We present the compressed sizes for G REEDY P ACK in Table 2 The encoding costs c  T  include the size of the encoded data and the decision trees The initial costs as denoted by c  T b   are those of encoding the data using na¨\021ve single-node T RIVIAL T REE s Each of these experiments required 110 seconds runtime with an exception of 60 s for mushroom  From Table 2 we see that all models returned by G REEDY P ACK strongly reduce the number of bits required to describe the data this implicitly shows that good models are returned The quality can be gauged by taking the compression ratios into account In general our greedy method reduces the number of bits to only half of what the independent model requires As two speci\002c examples of the found dependencies in the courses dataset the course Data Mining was packed using Machine Learning  Software Engineering  Information Retrieval Methods and Data Warehouses  Likewise AI and Machine Learning were used to pack the Robotics course Like discussed above our approach and the K RIMP 30 algorithm have stark differences in what part of the data is considered However as both methods use compression and result good itemsets it is insightful to compare the algorithms For the latter we here allow it to compress as well as possible and thus consider candidates up to as low min-sup thresholds as feasible Let us compare between the outcomes of either method For K RIMP these are itemsets for ours it is the combination of the decision trees and the related itemsets We see that K RIMP typically returns fewer itemsets than G REEDY P ACK  However our method returns itemsets that describe interactions between both present and absent items Next we observed that especially the initial K RIMP compression requires many more bits than ours and as such K RIMP attains better compression ratios However if we disregard the ratios and look at the raw number of bits the two methods require we see that K RIMP generally requires twice as many bits to describe only the 1's in the data than G REEDY P ACK does to represent all of the data 7.4 Validation through Classi\014cation To further assess the quality of our models we use a simple classi\002cation scheme 22  F i r s t  w e s p l i t t h e t r a i n i n g database into separate class-databases We pack each of these Next the class labels of the unseen transactions wer e assigned according to the model that compressed it best We ran these experiments for three databases viz mushroom  breast and anneal  A random 90 of the data was used to train the models leaving 10 to test the accuracy on The accuracy scores we noted resp 100 98.0 and 93.4 are fully comparable to and for the second even better than the classi\002ers considered in 22  7.5 Choosing Good Itemsets In this subsection we evaluate S ET P ACK  our itemset selection algorithm Recall that this algorithm selects item sets such that they allow for building succinct encoding decision trees The difference with G REEDY P ACK is that in this setup the resulting itemsets should be a subset of a given candidate family Here we consider frequent itemsets as candidates We set the support threshold such that the experiments with S ET P ACK were 002nished within 1 2 2 hours with an exception of 23 hours for considering the 
595 
595 


Table 3 Compressed sizes and number of extracted itemsets f or the itemset selection algorithms Candidate Itemsets S ET P ACK S ET P ACK G REEDY K RIMP Dataset min-sup  sets c  T  c  T  c  T b    sets c  T  c  T  c  T b    sets  bits  sets anneal 175 8837 20777 89.9 103 20781 89.9 69 31196 53 breast 1 9920 5175 63.7 42 5172 63.9 49 4613 30 courses 55 5030 64835 84.9 268 64937 85.1 262 73287 93 mammals 700 7169 65091 83.4 427 65622 84.1 382 124737 125 mushroom 1000 123277 313428 70.9 636 262942 59.5 1225 474240 140 nursery 50 25777 314081 93.0 276 314295 93.1 218 265064 225 pageblocks 1 63599 11961 78.3 92 11967 78.3 95 10911 53 tictactoe 7 34019 23118 92.0 620 23616 94.0 277 28957 159 large candidate family for mushroom  For comparison we use the same candidates for K RIMP  We also compare to S ET P ACK G REEDY  which required 112 minutes 7 minutes typically with an exception of 2 1 2 hours for mushroom  Comparing the results of this experiment Table 3 with the results of G REEDY P ACK in the previous experiment we see that the selection process is more strict now even fewer itemsets are regarded as interesting enough Large candidate collections are strongly reduced in number up to three orders of magnitude On the other hand the compression ratios are still very good The reason that G REEDY P ACK produces smaller compression ratios is because it is allowe d to consider any itemset Further the fact alone that even with this very strict selection the compression ratios are generally well below 90 show that these few sets are indeed of high importance to describing the major interactions in the data If we compare the number of selected sets to K RIMP  we see that our method returns in the same order as many itemsets These descriptions require far less bits than tho se found by K RIMP  As such ours are a better approximation of the Kolmogorov complexity of the data Between S ET P ACK and S ET P ACK G REEDY the outcomes are very much alike this goes for both the obtained compression as well as the number of returned itemsets However the greedy search of S ET P ACK G REEDY allows for much shorter running times 8 Discussion The experimentation on our methods validates the quality of the returned models The models correctly detect dependencies in the data while ignoring independencies Only a small number of itemsets is returned which are shown to provide strong compression of the data By the MDL principle we then know these describes all important regularities in the data distribution in detail ef\002ciently and witho ut redundancy This claim is further supported by the high classi\002cation accuracies our models achieve The G REEDY P ACK algorithm generally uses more itemsets and obtains better packing ratios than S ET P ACK  While G REEDY P ACK is allowed to use any itemset S ET P ACK may only use frequent itemsets This suggests that we may able to achieve better ratios if we use different candidates  for example low-entropy sets 16  The running times of the experiments reported in this work range from seconds to hours and depend mainly on the number of attributes and rows of the datasets The exhaustive version S ET P ACK may be slow on very large candidate sets however the greedy version S ET P ACK G REEDY can even handle such families well Considering that our curren t implementation is rather na¨\021ve and the fact that both methods are easily parallelized both G REEDY P ACK and S ET P ACK G REEDY are suited for the analysis of large databases The main outcomes of our models are the itemsets that identify the encoding paths However the decision trees from which these sets are extracted can also be regarded as interesting as these provide an easily interpretable view o n the major interactions in the data Further just consideri ng the attributes used in such a tree as an itemset also allows for simple inspection of the main associations In this work we employ the MDL criterion to identify the optimal model Alternatively one could consider using either BIC or AIC both of which can easily be applied to judge between our decision tree-based models 9 Conclusions In this paper we presented two methods that 002nd compact sets of high quality itemsets Both methods employ compression to select the group of patterns that describe all interactions in the data best That is the data is considere d symmetric and thus both the 0s and 1s are taken into account in these descriptions Experimentation with our methods 
596 
596 


showed that high quality models are returned Their compact size typically tens to thousands of itemsets allow fo r easy further analysis of the found interactions References 1 C  C  A g g a r w a l a n d P  S  Y u  A n e w f r a m e w o r k f o r itemset generation In Proceedings of the ACM SIGACTSIGMOD-SIGART symposium on Principles of Database Systems PODS  pages 1824 ACM Press 1998 2 R  A g r a w a l  H  M a n n i l a  R  S r i k a n t  H  T o i v o n e n  a n d A  I  Verkamo Fast discovery of association rules In Advances in Knowledge Discovery and Data Mining  pages 307328 AAAI 1996 3 S  B r i n  R  M o t w a n i  a n d C  S i l v e r s t e i n  B e y o n d m a r k e t baskets Generalizing association rules to correlations In ACM SIGMOD International Conference on Management of Data  pages 265276 ACM Press 1997 4 S  B r i n  R  M o t w a n i  J  D  U l l m a n  a n d S  T s u r  D y n a m i c itemset counting and implication rules for market basket data In ACM SIGMOD International Conference on Management of Data  pages 255264 1997 5 B  B r i n g m a n n a n d A  Z i m m e r m a n n  T h e c h o s e n f e w  O n identifying valuable patterns In IEEE International Conference on Data Mining ICDM  pages 6372 2007 6 T  C a l d e r s a n d B  G o e t h a l s  M i n i n g a l l n o n d e r i v a b l e f r e quent itemsets In Proceedings of the 6th European Conference on Machine Learning and Principles and Practice of Knowledge Discovery in Databases  pages 7485 2002 7 V  C h a n d o l a a n d V  K u m a r  S u m m a r i z a t i o n c o m p r e s s i n g data into an informative representation In Proceedings of the IEEE Conference on Data Mining  pages 98105 2005 8 F  C o e n e n  T h e L U C S K D D d i s c r e t i s e d  n o r m a l i s e d A R M and CARM data library 2003 9 G  F  C o o p e r a n d E  H e r s k o v i t s  A B a y e s i a n m e t h o d f o r the induction of probabilistic networks from data Machine Learning  9:309347 1992 10 T  C o v e r a n d J  T h o m a s  Elements of Information Theory 2nd ed John Wiley and Sons 2006 11 W  D u M o u c h e l a n d D  P r e g i b o n  E m p i r i c a l b a y e s s c r e e n i n g for multi-item associations In ACM SIGKDD Conference on Knowledge Discovery and Data Mining  pages 6776 2001 12 C  F a l o u t s o s a n d V  M e g a l o o i k o n o m o u  O n d a t a m i n i n g  compression and kolmogorov complexity In Data Mining and Knowledge Discovery  volume 15 pages 320 Springer 2007 13 P  D  G r  u n w a l d  The Minimum Description Length Principle  MIT Press 2007 14 J  H a n  H  C h e n g  D  X i n  a n d X  Y a n  F r e q u e n t p a t t e r n mining Current status and future directions In Data Mining and Knowledge Discovery  volume 15 Springer 2007 15 J  H a n a n d J  P e i  M i n i n g f r e q u e n t p a t t e r n s b y p a t t e r n growth methodology and implications SIGKDD Explorations Newsletter  2\(2\:1420 2000 16 H  H e i k i n h e i m o  E  H i n k k a n e n  H  M a n n i l a  T  M i e l i k  a i nen and J K Sepp¨anen Finding low-entropy sets and trees from binary data In ACM SIGKDD Conference on Knowledge Discovery and Data Mining  pages 350359 2007 17 S  J a r o s z e w i c z a n d T  S c h e f f e r  F a s t d i s c o v e r y o f u n e x p ected patterns in data relative to a bayesian network In ACM SIGKDD Conference on Knowledge Discovery and Data Mining  pages 118127 2005 18 S  J a r o s z e w i c z a n d D  A  S i m o v i c i  I n t e r e s t i n g n e s s o f frequent itemsets using bayesian networks as background knowledge In ACM SIGKDD Conference on Knowledge Discovery and Data Mining  pages 178186 2004 19 A  J  K n o b b e a n d E  K  Y  H o  M a x i m a l l y i n f o r m a t i v e k itemsets and their ef\002cient discovery In ACM SIGKDD Conference on Knowledge Discovery and Data Mining  pages 237244 2006 20 A  J  K n o b b e a n d E  K  Y  H o  P a t t e r n t e a m s  I n Proceedings of the 10th European Conference on Machine Learning and Principles and Practice of Knowledge Discovery in Databases  pages 577584 2006 21 P  K o n t k a n e n a n d P  M y l l y m  a k i  A l i n e a r t i m e a l g o r i t h m for computing the multinomial stochastic complexity Information Processing Letters  103\(6\:227233 2007 22 M  v a n L e e u w e n  J  V r e e k e n  a n d A  S i e b e s  C o m p r e s s i o n picks the item sets that matter In Proceedings of the 10th European Conference on Machine Learning and Principles and Practice of Knowledge Discovery in Databases  pages 585592 2006 23 M  L i a n d P  V i t  a n y i  An Introduction to Kolmogorov Complexity and its Applications  Springer-Verlag 1993 24 R  M e o  T h e o r y o f d e p e n d e n c e v a l u e s  ACM Trans Database Syst  25\(3\:380406 2000 25 A  J  M i t c h e l l J o n e s  G  A m o r i  W  B o g d a n o w i c z  B Krystufek P J H Reijnders F Spitzenberger M Stubb e J B M Thissen V Vohralik and J Zima The Atlas of European Mammals  Academic Press 1999 26 K  V  S  M u r t h y  On growing better decision trees from data  PhD thesis Johns Hopkins Univ Baltimore 1996 27 S  N i j s s e n a n d  E Fromont Mining optimal decision trees from itemset lattices In ACM SIGKDD Conference on Knowledge Discovery and Data Mining  pages 530539 2007 28 N  P a s q u i e r  Y  B a s t i d e  R  T a o u i l  a n d L  L a k h a l  D i s c o vering frequent closed itemsets for association rules Lecture Notes in Computer Science  1540:398416 1999 29 J  R i s s a n e n  F i s h e r i n f o r m a t i o n a n d s t o c h a s t i c c o m p l e xity IEEE Transactions on Information Theory  42\(1\:4047 1996 30 A  S i e b e s  J  V r e e k e n  a n d M  v a n L e e u w e n  I t e m s e t s t h a t compress In Proceedings of the SIAM Conference on Data Mining  pages 393404 2006 31 N  T a t t i  M a x i m u m e n t r o p y b a s e d s i g n i 002 c a n c e o f i t e m s e t s Knowledge and Information Systems KAIS  2008 Accepted for publication 32 N  T a t t i a n d H  H e i k i n h e i m o  D e c o m p o s a b l e f a m i l i e s o f itemsets In Proceedings of the 12th European Conference on Machine Learning and Principles and Practice of Knowledge Discovery in Databases  2008 33 J  V r e e k e n  M  v a n L e e u w e n  a n d A  S i e b e s  C h a r a c t e r i s i ng the difference In ACM SIGKDD Conference on Knowledge Discovery and Data Mining  pages 765774 2007 34 J  V r e e k e n  M  v a n L e e u w e n  a n d A  S i e b e s  P r e s e r v i n g privacy through data generation In Proceedings of the IEEE Conference on Data Mining  pages 685690 2007 
597 
597 


