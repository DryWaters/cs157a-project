Parallel Data Mining r Association Rules on Shared-memory Multi-processors 000 M J Zaki M Ogihara S Parthasarathy and W Li f zaki,ogihara,srini,wei g cs.rochester.edu July 1996 Abstract Data mining is an emerging research area whose goal is to extract signi\336cant patterns or interesting rules from databases l inference from large volumes of routine business data can provide valuable information to businesses such as customer buying patterns shelving criterion in supermarkets and stock trends Many algorithms have been proposed for data mining of association rules r research so far has mainly focused on sequential algorithms In this paper we present parallel algorithms for data mining of association rules and study the degree of parallelism synchronization and data locality issues on the SGI Power Challenge shared-memory multi-processor We further present a set of optimizations for the sequential and parallel algorithms Experiments show that a signi\336cant improvement of performance is d using our proposed optimizations We also d good speed-up for the parallel algorithm t we observe a need for parallel I/O techniques for further performance gains Keywords Data Mining Association Rules Load Balancing Hash Tree Balancing Hashing Shared-Memory Multi-processor 000 This work was supported in part by an NSF Research Initiation Award CCR-9409120 and ARPA contract F19628-94-C-0057 1 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


1 Introduction With large volumes of routine business data having been collected business organizations are increasingly turning to the extraction of useful information from such databases Such l inference processes may provide information on customer buying patterns shelving criterion in supermarkets stock trends etc Data mining is an emerging research area whose goal is to extract signi\336cant patterns or interesting rules from such databases Data mining is in fact a broad area which combines research in machine learning statistics and databases It can be broadly classi\336ed into these categories Classi\336cation Clustering 320 336nding rules that partition the database into 336nite disjoint and previously known unknown classes Sequences 320 extracting commonly occurring sequences in ordered data and Associations a form of summarization 320 336nd the set of most commonly occurring groupings of items In this paper we will concentrate on data mining for association rules Application domains for association rules range from decision support to telecommunications alarm diagnosis and prediction The prototypical application is the analysis of sales data The problem of mining association rules r basket data was introduced in 2 It can be formally stated as Let I 000 f i 1 000i 2 000 000\000\000 000i m g be a set of m distinct attributes also called items  Each transaction T in the database D of transactions has a unique identi\336er and contains a set of items such that T 001I An association rule is an expression A 002 B  where A\000 B 003I  are sets of items called itemsets  and A 004 B 000 005  Each itemset is said to have a support s if s of the transactions in D contain the itemset The association rule is said to have con\336dence c if c  of the transactions that contain A also contain B  i.e c 000 suppor t 001 A 006 B 002 001suppor t 001 A 002  i.e the conditional probability that transactions contain the itemset B  n that they contain itemset A  Data mining of association rules from such databases consists of 336nding the set of all such rules which meet the user-speci\336ed minimum con\336dence and support values The data mining task for association rules can be broken into two steps The 336rst step consists of 336nding all large itemsets  The second step consists of forming implication rules with a user speci\336ed conf idence among the large itemsets found in the 336rst step Since this step is not compute intensive 5 henceforth we will focus only on the 336rst step The general structure of most algorithms for mining associations is that during the initial pass r the database the support for all single items 1-itemsets is counted The large 1-itemsets are used to generate candidate 2-itemsets The database is scanned again to obtain occurrence counts for the candidates and the large 2-itemsets are selected for the next pass This iterative process is repeated for k 000 3 000 4 000 000\000\000 000 until there are no more large k itemsets to be found 1.1 Related Work Many algorithms for 336nding large itemsets have been proposed in e literature since the introduction of this problem in AIS algorithm In a pass minimization approach was presented which uses the idea that if an itemset belongs to the set of large 001 k 003 e 002 itemsets then it must contain 000 k 000 e k 001 k itemsets The Apriori algorithm 5 also uses the property that an y subset of a lar ge itemset must itself be lar ge These algorithms had performance superior to AIS and are also polynomial The DHP algorithm uses a hash table in pass k to do ef\336cient pruning of 001 k 003 1 002 itemsets The Partition algorithm minimizes 2 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


I/O by scanning the database only twice In the 336rst pass it generates the set of all potentially large itemsets and in the second pass the support for all these is measured The above algorithms are all specialized black-box techniques which do not use any database operations Algorithms using only general-purpose DBMS systems and relational algebra operations have also been proposed 7 The work closest to this from the machine learning literature is the KID3 algorithm presented in 12 The main problem with their approach is that it may take e xponential time in the worst case as opposed to the polynomial time algorithms presented in the above papers There has been very limited work in parallel implementations of association algorithms In 11 a parallel implementation of the DHP algorithm 10  i s presented Ho we v e r only simulation results on a shared-nothing or distributed-memory machine like IBM SP2 were presented Parallel implementations of the Apriori algorithm on the IBM SP2 were presented in 4 There has been no study on shared-everything or shared-memory machines to-date 1.2 Contribution In this paper we present parallel implementations of the Apriori algorithm on the SGI Power Challenge shared-memory multi-processor We study the degree of parallelism synchronization and data locality issues in parallelizing data mining applications for such architectures We also present a set of optimizations for the sequential Apriori algorithm and for the parallel algorithms as well The rest of the paper is organized as follows In the next section we brie\337y describe the Apriori algorithm Section 3 presents a discussion of the parallelization issues for each of the steps in the algorithm while section 4 presents some effective optimizations for mining association rules Section 5 presents our experimental results for the different optimization and the parallel performance Finally we conclude in section 6 2 The Apriori Algorithm The naive method of 336nding large itemsets would be to generate all the 2 m subsets of the universe of m items count their support by scanning the database and output those meeting minimum support criterion It is not hard to see that the naive method exhibits complexity exponential in m  and is quite impractical Apriori follows the basic iterative structure discussed earlier r the key observation used is that any subset of a large itemset must also be large During each iteration of the algorithm only candidates found to be large in the previous iteration are used to generate a ew candidate set to be counted during the current iteration A pruning step eliminates any candidate which has a small subset The algorithm terminates at step t  f there are no large t itemsets The general structure of the algorithm is n n 336gure 1 and a brief discussion of each step is n below for details on its performance characteristics we refer the reader to In the 336gure L k denotes the set of large k itemsets and C k the set of candidate k itemsets In candidate itemsets generation the candidates C k for the k th pass are generated by joining L k 000 1 with itself which can be expressed as C k 000 f x j x 001 1 k 000 2 002\000 A 001 1 k 000 2 002\000 B 001 1 k 000 2 002 000x 001 k 000 1 002\000 A 001 k 000 1 002 000 x 001 k 002\000 B 001 k 000 1 002 000A 001 k 000 1 002 001B 001 k 000 1 002 000 where A\000 B 001 L k 000 1 g 3 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


L 1 000 f large 1-itemsets g  for  k 000 2 L k 000 1 000 000 001  k 001\001  Candidate Itemsets generation C k  Set of New Candidates Support Counting for all transactions t 002D for all k subsets s of t if  s 002 C k  s\000count 001\001  Large Itemsets generation L k 000 f c 002 C k j c\000count 003 minimum support g  Set of all large itemsets  S k L k  Figure 1 The Apriori Algorithm where x 002 a  b 003 denotes items at index a through b in itemset x  Before inserting x into C k  e test whether all 004 k 004 1 005 subsets of x are large This pruning step eliminates any itemset at least one of whose subsets is not large The candidates are stored in a hash tree to facilitate fast support counting An internal node of the hash tree at depth d contains a hash table whose cells point to nodes at depth d 001 1 The size of the hash table also called the fan-out  s denoted as F  All the itemsets are stored in the leaves To insert an itemset in C k  e start at the root and at depth d we hash on the d th item in the itemset until we reach a leaf If the number of itemsets in that leaf exceeds a threshold value that node is converted into an internal node We would generally like the fan-out to be large and the threshold to be small to facilitate fast support counting The maximum depth of the tree in iteration k is k  To count the support of candidate k itemsets for each transaction T in the database we form all k subsets of T in lexicographical order This is done by starting at the root and hashing on items 0 through 004 n 004 k 001 1 005 of the transaction If we reach depth d by hashing on item i then we hash on items i through 004 n 004 k 001 1 005\001 d  This is done recursively until we reach a leaf At this point we increment the count of all itemsets in the leaf that are contained in the transaction note this is the reason for having a small threshold value r large itemsets generation each itemset in C k with minimum support is inserted into L k a sorted linked-list denoting the large k itemsets L k is used in generating the candidates in the next iteration 3 Parallel Data Mining Design Issues In this section we present the design issues in parallel data mining for association rules on shared memory architectures We separately look at the two main steps 320 candidate generation and support counting In our algorithm large itemsets generation is embedded in the support counting wherein as soon as a candidate has reached the minimum support it is added to the large set 4 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


3.1 Candidate Itemsets Generation 3.1.1 Optimized Join and Pruning Recall that in iteration k  C k is generated by joining L k 000 1 with itself The naive way of doing the join is to look at all 000 j L k 000 1 j 2 001 combinations r since L k 000 1 is lexicographically sorted we can partition the itemsets in L k 000 1 into equivalence classes S 0 000\001\001\001\000S n  based on their common k 000 2 pre\336xes class identi\336er k itemsets are formed only from items within a class by taking all 000 j S i j 2 001 item pairs and pre\336xing them with the class identi\336er n general we have to consider P n i 000 0 000 j S i j 2 001 combinations instead of 000 j L k 000 1 j 2 001 combinations While pruning a candidate we have to check if all k of its 000 k 000 1 001 subsets are large Since the candidate is formed by an item pair from the same class we need only check for the remaining k 000 2 subsets Furthermore assuming all S i are lexicographically sorted these k 000 2 subsets must come from classes greater than the current class Thus to generate a candidate there must be at least k 000 2 equivalence classes after a n class In other words we need consider only the 336rst n 000 000 k 000 2 001 equivalence classes Adaptive Hash Table Size  F  Having equivalence classes also allows us to accurately adapt the hash table size F for each iteration r iteration k  and for a n threshold value T  i.e the maximum number of k itemsets per leaf the total k itemsets that can be inserted into the tree is n y the expression TF k  Since we can insert up to P n i 000 0 000 j S i j 2 001 itemsets we get the expression TF k 001 P n i 000 0 000 j S i j 2 001  This can be solved to obtain F\001 002 003 P n i 000 0 000 j S i j 2 001 T 004 A 1 000k 3.1.2 Computation Balancing Let the number of processors P 002 3 k 002 2 and L 1 002 f 0 000 1 000 2 000 3 000 4 000 5 000 6 000 7 000 8 000 9 g  There is only 1 resulting equivalence class since the k 000 2 002 0 length common pre\336x is null The number of 2-itemsets generated by an itemset called the work load due to itemset i  is given as w i 002 n 000 i 000 1 for i 002 0 000\001\001\001\000n 000 1 r example itemset 0 contributes nine 2-itemsets f 01 000 02 000 03 000 04 000 05 000 06 000 07 000 08 000 09 g  There are different ways of partitioning this class among P processors Block partitioning  A simple block partition generates the assignment A 0 002 f 0 000 1 000 2 g  A 1 002 f 3 000 4 000 5 g and A 2 002 f 6 000 7 000 8 000 9 g  where A p denotes the itemsets assigned to processor p  The resulting workload per processor is W 0 002 9 003 8 003 7 002 24 W 1 002 6 003 5 003 4 002 15 and W 2 002 3 003 2 003 1 002 6 where W p 002 P i 001A p w i  We can clearly see that this method suffers from a load imbalance problem Interleaved partitioning  A better way is to do an d partition which results in the assignment A 0 002 0 000 3 000 6 000 9 A 1 002 1 000 4 000 7 and A 2 002 2 000 5 000 8 The work load is now n s 5 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


W 0 000 9 001 6 001 3 000 18 W 1 000 8 001 5 001 2 000 15 and W 2 000 7 001 4 001 1 000 12 The load imbalance is much smaller r t s still present Bitonic Partitioning Single Equivalence Class In 6 w e propose a n e w partitioning scheme called bitonic partitioning  for load balancing that can be applied to the problem here as well This scheme is based on the observation that the sum of the workload due to itemsets i and 002 2 P\000 i 000 1 003 is a constant w i 001 w 2 P\000 i 000 1 000 n 000 i 000 1 001\002 n 000 002 2 P\000 i 000 1 003 000 1 003\000 2 n 000 2 P t 000 1 We can therefore assign itemsets i and 002 n 000 i 000 1 003 as one unit with uniform work 2 n 000 2 P t 000 1 If n mod 2 P 000 0 then perfect balancing results The case n mod 2 P 001 000 0 s handled as described in The 336nal assignment is n s A 0 000 f 0 000 5 000 6 g  A 1 000 f 1 000 4 000 7 g  and A 2 000 f 2 000 3 000 8 000 9 g  with corresponding workload n s W 0 000 9 001 4 001 3 000 16 W 1 000 8 001 5 001 2 000 15 and W 2 000 7 001 6 001 1 000 14 This partition scheme is better than the d scheme and results in almost no imbalance Bitonic Partitioning Multiple Equivalence Classes Above we presented the simple case of C 1  where we only had a single equivalence class In general we may have multiple equivalence classes Observe that the bitonic scheme presented above is a greedy algorithm i.e we sort all the w i the work load due to itemset i  extract the itemset with maximum w i  and assign it to processor 0 Each time we extract the maximum of the remaining itemsets and assign it to the least loaded processor This greedy strategy generalizes to the multiple equivalence class as well 14 the major difference being work loads in different classes may not be distinct 3.1.3 Adaptive Parallelism Let n be the total number of items in the database Then there are potentially 000 n k 001 large k itemsets that we would have to count during iteration k  r in practice the number is usually much smaller as is indicated by our experimental results We found that support counting dominated the execution time to the tune of around 85 of the total computation time for the databases we considered in Section 5 On the other hand for iterations with a large number of k itemsets there was suf\336cient work in the candidate generation phase This suggests a need for some form of dynamic or adaptive parallelization based on the number of large k itemsets If there aren\325t a suf\336cient number of large itemsets then it is better not to parallelize the candidate generation 3.1.4 Parallel Hash Tree Formation We could choose to build the candidate hash tree in parallel or we could let the candidates be temporarily inserted in local lists or hash trees This would have to be followed by a step to construct the global hash tree In our implementation we build the tree in parallel We associate a lock with each leaf node in the hash tree When processor i wants to insert a candidate itemset into the hash tree it starts at the root node and hashes on successive items in the itemsets until it reaches a leaf node At this point it 6 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


acquires a lock on this leaf node for mutual exclusion while inserting the itemset r if we exceed the threshold of the leaf we convert the leaf into an internal node with the lock still set This implies that we also have to provide a lock for all the internal nodes and the processors will have to check if any node is acquired along its downward path from the root This complication only arises at the interface of the s and internal nodes With this locking mechanism each process can insert the itemsets in different parts of the hash tree in parallel r since we start with a hash tree with the root as a leaf there can be a lot of initial contention to acquire the lock at the root r we did not 336nd this to be a signi\336cant factor on 12 processors 3.2 Support Counting r this phase we could either split the database logically among the processors with a common hash tree or split the hash tree with each processor traversing the entire database We will look at each case below 3.2.1 Partitioned vs Common Candidate Hash Tree One approach in parallelizing the support counting step is to split the hash tree among the processors The decisions for computation balancing directly in\337uence the effectiveness of this approach since each processor should ideally have the same number of itemsets in its local portion of the hash tree Another approach is to keep a single common hash tree among all the processors There are several ways of incrementing the count of itemsets in the common candidate hash tree Counter per Itemset Let us assume that each itemset in the candidate hash tree has a single count 336eld associated with it Since the counts are common more than one processor may try to access the count 336eld and increment it We thus need a locking mechanism to provide mutual exclusion among the processors while incrementing the count This approach may cause contention and degrade the performance r since we are using only 12 processors and the sharing is very 336ne-grained at the itemset level we found this approach to be the better than using private or separate counters 1  3.2.2 Partitioned vs Common Database We could either choose to logically partition the database among the processors or each processor can choose to traverse the entire database for incrementing the candidate support counts Balanced Database Partitioning In our implementation we partition the database in a blocked fashion among all the processors r this strategy may not result in balanced work per processor This is because the work load is a function of the length of the transactions If l t is the length of the transaction t  then during iteration k of the algorithm we have to test whether all the 1 r all the databases we looked at on our system the overhead of contention was within 4 which leads us to conclude that contention is not a big problem Other mechanisms like separate counters to eliminate locking and local counters to eliminate false sharing were studied t not shown to be bene\336cial 14 7 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


000 l t k 001 subsets of the transaction are contained in C k  Clearly the complexity of the work load for a transaction is n s O 000 min 000 l t k 000l t l t 000 k 001\001  i.e it is polynomial in the transaction length This also implies that a static partitioning won\325t work r we could devise static heuristics to approximate a balanced partition r example one static heuristic is to estimate the maximum number of iterations we expect say T  We could then partition the database based on the mean estimated work load for each transaction r all iterations n s 000 P T k 000 1 000 l i k 001 001 001T  Another approach is to re-partition the database in each iteration In this case it is important to respect the locality of the partition by moving transactions only when it is absolutely necessary We plan to investigate different partitioning schemes as part of future work 3.3 Parallel Data Mining Algorithms Based on the discussion in the previous section we consider the following algorithms for mining association rules in parallel 000 Common Candidate Partitioned Database CCPD This algorithm uses a common candidate hash tree across all processors while the database is logically split among them The hash tree is built in parallel see section 3.1.4 Each processor then traverses its local database and counts the support see section 3.2.1 for each itemset Finally the master process selects the large itemsets 000 Partitioned Candidate Common Database PCCD This has a partitioned candidate hash tree t a common database In this approach we construct a local candidate hash tree per processor Each processor then traverses the entire database and counts support for itemsets only in its local tree Finally the master process performs the reduction and selects the large itemsets for the next iteration Note that the common candidate common database\(CCCD approach results in duplicated work while the partitioned candidate partitioned database PCPD approach is more or less equivalent to CCPD r this reason we did not implement these parallelizations 4 Optimizations In this section we present some optimizations to the association rule algorithm These optimizations are bene\336cial for both sequential and parallel implementation 4.1 Hash Tree Balancing Although the computation balancing approach results in balanced work load it does not guarantee that the resulting hash tree is balanced Balancing C 2 No Pruning  We\325ll begin by a discussion of tree balancing for C 2  since there is no pruning step in this case We can balance the hash tree by using the bitonic partitioning scheme described  We simply replace P  the number of processors with the fan-out F for 8 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


the hash table We label the n large 1-itemsets from 0 o n 000 1 n exicographical order and use P 000 F to derive the assignments A 0 000 001\001\001 000 A F\000 1 for each processor Each A i is treated as an equivalence class The hash function is based on these equivalence classes which is simply n as h 001 i 002\000 A i  for i 000 0 000 001\001\001 000 F  The equivalence classes are implemented via an indirection vector of length n  For example let L 1 000 f A\000 D 000 E 000 G\000 K 000 M 000 N 000 S\000 T 000 Z g  We 336rst label these as f 0 000 1 000 2 000 3 000 4 000 5 000 6 000 7 000 8 000 9 g  Assume that the fan-out F 000 3 We thus obtain the 3 equivalence classes A 0 000 f 0 000 5 000 6 g  A 1 000 f 1 000 4 000 7 g  and A 2 000 f 2 000 3 000 8 000 9 g  and the indirection vector is shown in table 1 Furthermore this hash function is applied at all levels of the hash tree Clearly this scheme results in a balanced hash tree as compared to the simple g 001 i 002\000 i mod F hash function which corresponds to the d partitioning scheme from section 3.1.1 Label 0 1 2 3 4 5 6 7 8 9 Hash Value 0 1 2 2 1 0 0 1 2 2 Table 1 Indirection Vector Balancing C k 001 k\001 2 002  Although items can be pruned for iteration k 002 3 we use the same bitonic partitioning scheme for C 3 and beyond Below e show that n n this general case bitonic hash function is very good as compared to the d scheme Theorem 1 below establishes an upper and lower bound on the number of itemsets per leaf for the bitonic scheme Theorem 1 Let k 002 1 denote the iteration number I 000 f 0 000 002\002\002\000 d 000 1 g the set of items F the fan-out of the hash table T 000 f 0 000 002\002\002\000 F\000 1 g the set of equivalence classes modulo F  T 000 T k the total number of leaves in C k  and G the family of all size k ordered subsets of I  i.e the set of all k itemsets that can be constructed from items in I  Suppose d 2 F is an integer and d 2 F 000 F\002 k  De\336ne the bitonic hash function h  I\003 T by h 001 i 002\000 i mod F if 0 004 001 i mod 2 F 002 003 F and 2 F\000 1 000 001 i mod 2 F 002 otherwise and the mapping H  G 003 T from k itemsets to the leaves of C k by H 001 a 1 002\002\002\000 a k 002 000 001 h 001 a 1 002 000\002\002\002\000h 001 a k 002\002  Then for every leaf B 000\001 b 1 000\002\002\002\000b k 002 005T  the ratio of the number of k itemsets in the leaf  k H 000 1 001 B 002 k  o the average number of itemsets per leaf  kG k 004 kT k  s bounded above and below by the expression e 000 k 2 d\000 F 004 k H 000 1 001 B 002 k kG k 004 kT k 004 e k 2 d\000 F 002 A proof of the above theorem can be found in W e also obtain the same lo wer and upper bound for the d hash function also r the two functions behave differently Note that the average number of k itemsets per leaf kG k 004 kT k is 000 2 w F k 001 004 F k 006 000 2 w 001 k k   Let 005 001 w 002 denote this polynomial We say that a leaf has a capacity close to the average if its capacity which is a polynomial in w of degree at most k  s f the form 000 2 w 001 k k  003 006 001 w 002  with 006 001 w 002 being a polynomial of degree at most k 000 2 9 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


r the bitonic hash function a leaf speci\336ed by the hash values 000 a 1 000\000\000\001 a k 001 has capacity close to 002 000 w 001 if and only if a i 000 002 a i 000 1 for all i 1 001 i 001 k 002 1 Thus there are F 000 F\002 1 001 k 000 1 such leaves and so 000 1 002F 000 1 001 k 000 1 fraction of the s ave capacity close to 002 000 w 001  Note also that clearly 000 1 002F 000 1 001 k 000 1 approaches 1 On the other hand for the d hash function a leaf speci\336ed by 000 a 1 000\000\000\001 a k 001 has capacity close to 002 000 w 001 if and only if a i 000 002 a i 000 1 for all i  and the number of i such that a i 003a i 000 1 is equal to 000 k 002 1 001 004 2 So there is no such leaf if k is even r odd k 003 3 the ratio of the 322good\323 s decreases as k increases achieving a maximum of 2 004 3 when k 002 3 Thus at most 2 004 3 f the s achieve the average From the above discussion it is clear that while both the simple and bitonic hash function have the same maximum and minimum bounds the distribution of the number of itemsets per leaf is quite different While a signi\336cant portion of the s are close to the average for the bitonic case only a ew are close in the simple hash function case 4.2 Short-circuited Subset Checking  Candidate Hash Tree \(C 3 Hash Function: h\(i DEPTH 0 DEPTH 1 DEPTH 2 01 35 7101113 12986 24 LEAVES ABE ADE CDE A,C,EB,D B,D B,D B,D B,D B,D B,DA,C,E A,C,E A,C,E A,C,E A,C,E A,C,E ABD ACD ACEBCEBCDBDE ABC Figure 2 Candidate Hash Tree  C 3  Recall that while counting the support once we reach a leaf node we check whether all the itemsets in the leaf are contained in the transaction This node is then marked as VISITED to avoid processing it more than once for the same transaction A further optimization is to associate a VISITED 337ag with each node in the hash tree We mark an internal node as VISITED the 336rst time we touch it This enables us to preempt the search as soon as possible We would 10 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


expect this optimization to be of greatest bene\336t when the transaction sizes are large r example if our transaction is T 000 f A\000 B 000 C\000 D\000 E g  k 000 3 fan-out 000 2 then all the 3-subsets of T are f ABC,ABD,ABE,ACD,ACE,ADE,BCD,BCE,BDE,CDE g  Figure 2 shows the candidate hash tree C 3  We ave to increment the support of every subset of T contained in C 3  We egin with the subset AB C  and hash to node 11 and process all the itemsets In this downward path from the root we mark nodes 1 4 and 11 as visited We then process subset AD B  and mark node 10 Now consider the subset CDE  We see in this case that node 1 has already been marked and we can preempt the processing at this very stage This approach can r consume a lot of memory r a n fan-out F  for iteration k  e need additional memory of size F k to store the 337ags In the parallel implementation we have to keep a VISITED 336eld for each processor bringing the memory requirement to P\000F k  This can still get very large especially with increasing number of processors In we sho w a mechanism by which further reduces the memory requirement to only k 000F  The approach in the parallel setting yields a total requirement of k 000F 000P  5 Experimental Evaluation Database T I D Total Size T5.I2.D100K 5 2 100,000 2.6MB T10.I4.D100K 10 4 100,000 4.3MB T15.I4.D100K 15 4 100,000 6.2MB T20.I6.D100K 20 6 100,000 7.9MB T10.I6.D400K 10 6 400,000 17.1MB T10.I6.D800K 10 6 800,000 34.6MB T10.I6.D1600K 10 6 1,600,000 69.8MB Table 2 Database properties 5.1 Experimental Setup All the experiments were performed on a 12-node SGI Power Challenge shared-memory multiprocessor Each node is a MIPS processor running at 100MHz There\325s a total of 256MB of main memory The primary cache size is 16 KB 64 bytes cache line size with different instruction and data caches while the secondary cache is 1 B 128 bytes cache line size The databases are stored on an attached 2GB disk All processors run IRIX 5.3 and data is obtained from the disk via an NFS 336le server We used different synthetic databases with size ranging form 3MB to 70MB 2  and are generated using the procedure described in These databases mimic the transactions in a retailing en vironment Each transaction has a unique ID followed by a list of items bought in that transaction The 2 While results in this section are only shown for memory resident databases the concepts and optimization are equally applicable for non memory resident databases In non memory resident programs I/O becomes an important problem Solutions to the I/O problem can be applied in combination with the schemes presented in this paper These solutions are part of future research 11 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


  0 500 1000 1500 2000 2500 0 2 4 6 8 10 12 Number of Large Itemsets Iterations Large Itemset at Support = 0.5 222T5.I2.D100K\222  222T10.I4.D100K\222   222T15.I4.D100K\222   222T20.I6.D100K\222   222T10.I6.D400K\222   222T10.I6.D800K\222   222T10.I6.D1600K\222  Figure 3 Large Itemsets per Iteration data-mining provides information about the set of items generally bought together Table 2 shows the databases used and their properties The number of transactions is denoted as jD j  average transaction size as j T j  and the average maximal potentially large itemset size as j I j  The number of maximal potentially large itemsets j L j 000 2000 and the number of items N 000 1000 We refer the reader to for more detail on the database generation All the e xperiments were performed with a minimum support value of 0.5 and a leaf threshold of 2 i.e max of 2 itemsets per leaf We note that the  improvements shown in all the experiments except where indicated do not take into account initial database reading time since we speci\336cally wanted to measure the effects of the optimizations on the computation Figure 3 shows the number of iterations and the number of large itemsets found for different databases In the following sections all the results are reported for the CCPD parallelization We do not present any results for the PCCD approach since it performs very poorly and results in a speed-down on more than one processor 3  5.2 Aggregate Parallel Performance Table 3 s actual running times for the unoptimized sequential and a naive parallelization of the base algorithm Apriori for 2,4 and 8 processors without any f the techniques descibed in sections 3 and 4 In this section all the graphs showing  improvements are with respect to the data for one processor in table 3 Figure 4 presents the speedups obtained on different databases and different processors for the CCPD parallelization The results presented on CCPD use all the optimization discussed 3 Recall that in the PCCD approach every processor has to read the entire database during each iteration The resulting I/O costs on our system were too prohibitive for this method to be  12 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


Database 1 proc 2 procs 4 procs 8 procs T5.I2.D100K 20 17 12 10 T10.I4.D100K 96 70 51 39 T15.I4.D100K 236 168 111 78 T20.I6.D100K 513 360 238 166 T10.I6.D400K 372 261 165 105 T10.I6.D800K 637 435 267 163 T10.I6.D1600K 1272 860 529 307 Table 3 Naive Parallelization of Apriori seconds   0 2 4 6 8 10 12 0 2 4 6 8 10 12 Speedup Number of Processors CCPD Ideal  T5.I2.D100K.t2   T10.I4.D100K.t2   T15.I4.D100K.t2   T20.I6.D100K.t2   T10.I6.D400K.t2   T10.I6.D800K.t2   T10.I6.D1600K.t2    0 2 4 6 8 10 12 0 2 4 6 8 10 12 Speedup Number of Processors CCPD : With Reading Time Ideal  T5.I2.D100K.t2   T10.I4.D100K.t2   T15.I4.D100K.t2   T20.I6.D100K.t2   T10.I6.D400K.t2   T10.I6.D800K.t2   T10.I6.D1600K.t2  Figure 4 CCPD Speed-up a without reading time b with reading time 13 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


Reading  f Total Time Database Time P 000 1 P 000 2 P 000 4 P 000 8 P 000 12 T5.I2.D100K 9.1s 39.9 43.8 52.6 56.8 59.0 T10.I4.D100K 13.7s 15.6 22.2 29.3 36.6 39.8 T15.I4.D100K 18.9s 8.9 14.0 21.6 29.2 32.8 T20.I6.D100K 24.1s 4.9 8.1 12.8 18.6 22.4 T10.I6.D400K 55.2s 16.8 24.7 36.4 48.0 53.8 T10.I6.D800K 109.0s 19.0 29.8 43.0 56.0 62.9 T10.I6.D1600K 222.0s 19.4 28.6 44.9 59.4 66.4 Table 4 Database Reading Time in section 4 320 computation balancing hash tree balancing and short-circuited subset checking The 336gure on the left presents the speed-up without taking the initial database reading time into account We observe that as the number of transactions increase we get increasing speed-up with a speed-up of more than 8 n 2 processors for the largest database T10.I6.D1600K with 1.6 million transactions r if we were to account for the database reading time then we get speed-up of only 4 n 2 processors The lack of linear speedup can be attributed to false and true sharing for the heap nodes when updating the subset counts and to some extent during the heap generation phase Furthermore since variable length transactions are allowed and the data is distributed along transaction boundaries the workload is not be uniformly balanced Other factors like s contention and i/o contention further reduce the speedup Table 4 shows the total time spent reading the database and the percentage of total time this constitutes on different number of processors The results indicate that on 12 processors up to 60 of the time can be spent just on I/O This suggest a great need for parallel I/O techniques for effective parallelization of data mining applications since by its very nature data mining algorithms must operate on large amounts of data 5.3 Computation and Hash Tree Balancing Figure 5 shows the improvement in the performance obtained by applying the computation balancing optimization discussed in section 3.1.2 and the hash tree balancing optimization described in section 4.1 The 336gure shows the  improvement r a run on the same number of processors without any optimizations see Table 3 Results are presented for different databases and on different number of processors We 336rst consider only the computation balancing optimization COMP using the multiple equivalence classes algorithm As expected this doesn\325t improve the execution time for the uni-processor case as there is nothing to balance r it is very effective on multiple processors We get an improvement of around 20 on 8 processors The second column for all processors shows the bene\336t of just balancing the hash tree TREE using our bitonic hashing the unoptimized version uses the simple mod d hash function Hash tree balancing by itself is an extremely effective optimization It s the performance by about 30 n n uni-processors On smaller databases and 8 processors r t s not as 14 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


