Efficiently Mining Closed Frequent Patterns with Weight Constraint from Directed Graph Traversals Using Weighted FP-tree Approach 000\015   Runian GENG 1, 2 Xiangjun DONG 2 Xingye ZHANG 1 Wenbo XU 1 1 School of Information Technology  Jiangnan University 2 School of Information Science and Technology  Shandong Institute of Light Industry gengrnn@163.com; d-xj@163.com; zxy1995@163.com; xwb_sytu@hotmail.com   Abstract 000\003   In this paper, a transformable model of EWDG \(EdgeWeighted Directed Graph\ and VWDG \(Vertex-Weighted Directed Graph\ is proposed to resolve the problem of weighted traversal patterns mining. Based on the model an effective algorithm called GTCWFPMiner \(Graph Traversals-based Closed Weighted Frequent Patterns Miner\ is presented. The algorithm exploits a d ivide-andconquer paradigm with a pattern growth method to mine closed frequent patterns with weight constraint from the traversals on directed graph. It incorporates the closure property with weight constrains to reduce effectively search space and extracts succinct and lossless patterns from graph traversal TDB. Experimental results of synthetic data show that the algorithm is an efficient and scalable algorithm for mining closed weighted frequent patterns based on graph traversals  1. Introduction  Data mining on graph traversals has been an active research field during recent years. Graph and traversal on it are widely used to model several classes of data in real world. One example for this is WWW. The structure of Web can be modeled as a graph in which the vertices represent Web pages, and the e dges represent hyperlinks between the pages. User’s navigation on the Web site can be modeled as traversals on the graph. Capturing user access patterns in such environments is referred to as mining traversal patterns [1 itio n a l m o d e l o f  trav ersal p a ttern s mining hardly considered weighted traversals on the   2 To refl ect i m port a nce di fference of W e b sites, we can assign a weight to each site  Frequent pattern mining has been extensivel y studied in the last years   4 Unfort unat e l y i t has a poor perform ance when t h e support threshold is low and the pattern space is dense because of generating a huge number of patterns. Fre  000\003  000\015 This work was supported in part by the Natural Science Fund of Shandong Province \(No.Y2007G25\, the Ex cellent Young Scientist Foundation of Shandong Province, China \(No.2006BS01017\ and the Scientific Research Development Project of Shandong Provincial Education Department, China \(No. J06N06  quent closed itemsets provide a compact yet lossless representation of the frequent itemsets In this paper, we extended previous works by attaching weights to the traversals a nd introduced a new effective scalable algorithm called GTCWFPMiner to discover closed frequent patterns from we ighed traversals on graph To our knowledge, ours is the first work to considering closed patterns mining from directed graph with weight constraints The rest of this paper is organized as follows. Section 2 reviews previous related works. The related definitions and model of problem are given in Section 3. Section 4 proposes the algorithm called GTCWFPMiner Empirical research and the performance analysis of algorithm are reported in Section 5. Finally, Section 6 gives the conclusion as well as future research works  2. Related works  The main stream of data mining related to our work can be divided into three cate gories, i.e. the traversal pattern mining, the closed frequent pattern mining and the weight\raint based pattern mining. For the traversal pattern mining, there  2 whi c h only deal with the mining of un-weighted traversal patterns. In the last several years, extensive studies have proposed fast algorithms for mining closed frequent itemsets  7 11   For the weighted mining, most of previous works are related to the mining of association rules and frequent itemset 9  8 Al t hough t h e above works take the notion of weight into account as examined in this paper, they only concerned on the mining from items, but not from traversals  3. Problem statement  3.1. Definitions of mining traversal pattern  Definition 1 Weighed Directed Graph  A WDG   W eighted D irected G raph\es as G is a finite set of vertices and edges, in which each edge joins one ordered pair of vertices, and each vertex or edge is associated with a weight value 
2008 ISECS International Colloquium on Computing, Communication, Control, and Management 978-0-7695-3290-5/08 $25.00 © 2008 IEEE DOI 10.1109/CCCM.2008.393 404 
2008 ISECS International Colloquium on Computing, Communication, Control, and Management 978-0-7695-3290-5/08 $25.00 © 2008 IEEE DOI 10.1109/CCCM.2008.393 404 
2008 ISECS International Colloquium on Computing, Communication, Control, and Management 978-0-7695-3290-5/08 $25.00 © 2008 IEEE DOI 10.1109/CCCM.2008.393 399 


From Definition 1, we know that there should be two kinds of WDG s. One is VWDG  V ertexWDG  signs weights to each vertex in the graph, and the other is  EWDG  E dgeWDG each edge For example, Fig.1 \(a VWDG which has 6 vertices and 8 edges. The two WDG cases can be reduced to one case referring to Section 3.2\scuss the problem based on VWDG  Definition 2 Traversal on Graph\traversal on graph is a sequence of consecutive vertices along a sequence of edges on a G Clearly, a traversal can be regarded as a pattern. To easily consider  we may assume that every traversal has no repeated vertices. The length of a traversal is the number of vertices in it. A traversal database T is a set of traversals. Since there are two WD Gs, then it must exit that there are two types of traversals-traversals on VWDG and traversals on EWDG b\ively describe them, and \(c\bination of two cases Definition  3  Subtraversal  A subtraversal is any subsequence of consecutive ve rtices in a traversal Definition 4 Support count & support\. The support count of a pattern P  sup_count  P s the number of traversals containing the pattern. The support of a pattern P  support  P s the fraction of traversals containing the pattern P denoted as T is the number of traversals 000\013\000\014 000\013\000\014 sup_count P support P  T 000\001\000\017 000\001  1 Definition 5 Frequent closed traversal pattern\An traversal pattern Y is a frequent closed traversal pattern if it is frequent and there exists no proper superset Y  000  Y  such that support Y  Y  Definition 6 Weighted Pattern\A weighted pattern is a set of items each which has a weight Definition 7 Weight of Pattern\ght of pattern is an average value of weights of all items in it Given a weighted pattern P=<p 1 p 2 p k  the weight of each item in P denoted as w  p i    i=1,2,…,k en the weight of P is represented as follows 000\013\000\014 000\013\000\014 1 k i i wp Weight P  P  000 000 000   2 Definition 8 Weighted Support\. The weighted support of a pattern P, called wsupport P  000\013\000\014 000\013\000\014 000\013\000\014   wsupport P Weight P support P 000 3 A P is said to be weighted frequent when its weighted support is no less than a given minimum weighted support threshold called wminsup i.e 000\013 000\014 wsupport P min w sup  000t  4  However, the weight constraint is neither the antimonotone nor the monotone constraint. So we cannot directly use the anti-monotone property to prune weighted infrequent patterns  3.2. Model of transforming EWDG into VWDG   Essentially, two WDG cases can be reduced to one case. Here we reduce the two cases to one case VWDG  Figure 3 describes this change method: Fig. 3\(a\\(c\and e EWDG h VWDG s. In d\he nodes named bd  de  ec and bc  respectively represents the corresponding nodes with directed edges named B,D  D,E  E,C and B,C in c\3\(e h\ describe how to change EWDG into VWDG Each edge’s direction in new birth VWDG is gotten as follows, e.g., for node  de in\(h\because its corresponding field in \(e by two directed edges named B,D i.e. indegree  E,C i.e. outdegree\so there are two edges named  bd  001  de and de  001  ec in \(h direction are similar to the above. By the above change method, we can transform EWDG into VWDG In practice c\ay represent subnet of any size under the Web environments  3.3. Revised weighted support  Can we use anti-monotone property to weighted frequent pattern mining? The answer is ‘yes’. We know that the weights of items on graph containing n nodes , denoted as w i  i=1,2,…,n ust satisfy: min W  000d  w i  000d  max W  W  w 1  w 2  w n To let weighted patterns satisfy the anti-monotone property \(i.e., if wsupport  P  000d  minwsup  000  wsupport  P  000d minwsup P 000 P  we revise w  p i wo following representations 000\013 000\014 000\013 000\014 i wp=minW 5 or 000\013 000\014 000\013 000\014 i wp=maxW 6 Thus, the anti-monotone property can be used in mining weighted frequent patterns since w support  P  000d  w support  P f we adopt \(5\we could prune some patterns which should have been weighted frequent     TID Traversal 1 <A,B 2  B  C  E  F  3 <A,C 4 B,C,E 5  A  6 A,C,E,D 
405 
405 
400 


to lead to incorrect mining results. Avoiding this flaw, we adopt \(6\o compute revised weight of the pattern. Note that, the weight support value computed by this is only an approximate value, therefore, in final step, we should check if the pattern is really weighted frequent pattern with his real weight value, by the condition, i.e 000\013\000\014 000\013\000\014 000\013\000\014 1 k i i wp s upport P minwsup k 000 000t 000   3.4  Order of joining the closure and constraint  There are two ways to joining the closure and constrains with frequent patterns mini    001\011  000\013\000\014 000\013\000\014 000\013\000\014 000\013\000\014 DD am D Cl FTh sup X min sup FTh C 000t 000\037 7  001\012  000\013\000\014 000\013\000\014 000\013\000\014 000\013\000\014 DD am Cl FTh sup X min sup C 000t\000 8 There C am  is an anti-monotone constraint, as to weight constraint, it is revised weight constraints. In frequent 001\011 patterns are first tested whet her the patterns are closed frequent patterns, and then for the closed patterns weighted constraints are applied to discover weighted closed frequent patterns is one the way round: the 001\012 weight constraint is first mined and then the closures of the weighted frequent patterns are computed. From   we already know only way 001\012 not can lead to information loss, so we adapt way 001\012 in our problem  4. Mining closed frequent patterns from WDG traversals using FP-trees  4.1. Weighted FP-tree construction   FP-tree is a compact representation of all relevant frequency information in a database    To get a hi gh performance, we  adopt a weighted FP-tree as a compression technique based on pattern growth method. Each node in the weighted FP-tree has four fields: ‘item-name sup_count’ ‘weight’ and ‘node-link  Additionally, for each weighted FP-tree, there is a header table which has there fields: ‘item-id’, ‘support’ and a ‘headpointer’ to the first node in the FP-tree with the item-id. Initially, in our approach, a weighted FP-tree has only a root node The weighted FP-trees in our algorithm are constructed as shown as Fig. 4. Through this way, compressed data from the original TDB is stored in the FPtree. For the transaction database shown in Fig.1 with support threshold minwsup 1.5 \(max W g. 5 presents the corresponding global weighted FP-tree and a header table  4.2. Search space pruning techniques and necessary  checkings in GTCWFPMiner  In our approach Item_merging and sub-itemset pruning   However, i t  onl y  generat e s approxi m a t e  weighted frequent patters and can not assure that they are real closed weighted frequent patterns on directed graph G we must carry out subset-checking to newly found weighted patterns. In our algorithm, we use RP \(Result Pattern\r t o st ore so far found cl osed wei ght ed frequent patterns. In addition because our all works are all based on graph traversals, we must check if the result mined patterns are included in G and if the order of \(node item in result mined patterns is corrected order referring to G  In summary, through the process of mining, we use the item_merging and sub-itemset pruning methods to prune search space. In addition, we must do four ordered necessary checkings: \(1 act the candidate weighted frequent patterns P from FP-tree, by checking if wsurpport  P  support  P  000\015 max W  000t minwsup 2 tract real WFPs from newly found candidate weighted frequent pattern, those whose real wsupport 000t minwsup are remained, the others are removed. \(3 real WFPs,  to check if they are included in the path of directed graph G The patterns, which are included in the path of G but the order of items in it is not correct, must be revised the correct order referring to the path on G  and then be inserted into RP-tr ee. \(4\FPs generated in \(3\pare them with already generated closed weighted patterns in RP-tree to check if it satisfies closure property. The WFP,  which is not the subpattern of a certain pattern, whose support is equal to it, existing in the global RP-tree will be inserted into the RP-tree  4.3. Bottom up traversal of weighted FP-tree with divide-and-conquer paradigm    A4 000x C4 000x B3 000x E3 000x D1 000x F1 000x         
406 
406 
401 


With the global weighted FP-tree GTCWFPMiner  mines closed weighted frequent patterns by adapting the divide-and- conquer approach. For the traversal transac minwsup=1.5 ivides mining the FP-tree into mining smaller FP-trees with bottom up traversal of the FP-tree, and mines first \(1 the patterns containing item ‘F’ and then \(2\he patterns including ‘D’ but not ‘F’,…, and finally the patterns containing item ‘A’. Fig. 6 is the conditional FP-tree of each node in head table. Using item_merging  sub-itemset pruning techniques and 4 necessary ordered checkings described above, we can get the final closed weighted frequent patterns of each node in f_list It is shown in Fig 7\(a\Due to the space limitation, here we do not give the detail of mining process  4.4 GTCWFPMiner algorithm  GTCWFPMiner algorithm is given in Fig. 8. Figure 9 gives the procedure GTCWFPM  T, Close, RP-tree  in it the RP-tree is used to store so far found closed weighted frequent patterns. For the traversal transactions in Fig. 1 after mining, the set of real closed weighted frequent patterns is: {<F>:1, <C,E>:3,<B C,E>:2, <B>:3, <C>:4 A,C>:2}, and the result pattern tree is shown as  Fig 7\(b\here the node x:l:c means that the node is for item  x its level is l the length of path from this node to the root node\hat its up-to-date sup_count is c   5. Experimental evaluation  We explore our experimental results on the performance of GTCWFPMiner in comparison with FPclose. Because there are not real datasets about WDG currently, we test the algorithm performance using synthetic dataset We used C++ language and Microsoft SQL Server 2000 database to generate simulation of WDG and the traversals no it. We implemented our algorithm with C++ language, running under Microsoft VC++ 6.0. The experiments were performed on Pentium IV PC at 2.93 GHz and 768MB RAM with Windows XP Professional operating system. All the reported runtimes are in seconds  5.1. Generate synthetic dataset  During the experiment, the WDG is generated mainly according to following parameters: number of vertices and max number of edges per vertex. And then, we assigned random weight to each ve rtex of the graph. To easily compare algorithm’s performance, we generated 8 sets of traversal database with the same set of weights, in each of which the maximum length of traversals varies from 5 to 10. The distribution of weight is shown as Fig.10. All experimental results are aver age of 8 sets of synthetic data. The detail of experimental parameters is in table 1 Table 1 Experimental parameters parameters Meaning of parameters Value in exp V n  E max  w  Min-sup   T  num_TSet Max_L  Number of nodes Max number of edges per vertex Weight of vertex User-specified support threshold Number of traversals per set Number of traversal set Max length of pattern per traversal set 100 to 500 1 000 E max 000 4 0< w 000  1 10% ~ 30 4 k to 12 k  8 5,6,7,8,9,10  5.2 Evaluation of algorithm performance  C1 000x B1 000x E1 000x    A1 000x C1 000x E1 000x    C3 000x B2 000x A1 000x       C2 000x A1 000x A2 000x  Suffix node in f-list Result patterns F <F>:1  D 000  E C,E>:3  B,C,E>:2  B <B>:3  C C>:4 A,C>:2  A 000   A 000x C 000x B 000x E 000x D 000x F 000x         Fig. 9 Procedure GTCWFPM 000\035 1 T a FP-tree  2 Close  the result set ofet of real closed weighted frequent patterns 1 T only contains a single path B  2  the single path B mine all \(approximate\FPs set AWF 3   015 P AWF   4   000 i=1 P  weight p i  P  000\015 support P  minwsup   5   015 P PATH G PATH G ph G 6  LRWFP  LRWFP 0138 P LRWFP is the set of local real WFPs 7   end of ‘if’ in line 4 8   end of ‘for’ in line 3 9  for  015 P LRWFP   1 0  if not Closed 000\020 subset-checking P,RP-tree   1 1  Close  Close 0138 P  12:        insert P into RP-tree   end of ‘if’ in line 10 1 3   end of ‘for’ in line 9 1 4   end of ‘if’ in line 1 1 5  else  1 6   015 f-list in T header  from bottom-up 17:    initialize LRWFP set Y  T.base 0138  i  1 8  max W  000\015 support Y  minwsup   19  000 i=1 Y  weight y i  Y  000\015 support Y  minwsup   20   Y PATH G  LRWFP  LRWFP 0138 Y  21   end of ‘if’ in line 19 2 2  end of ‘if’ in line 18 23  for  015 P LRWFP   24  if not Closed 000\020 subset-checking P,RP-tree   25  Close  Close 0138 P  26 insert P into RP-tree   end of ‘if’ in line 24 2 7  end of ‘for’ in line 23 28 Gen 000\020 conditionalDB i generate i s conditional database 2 9:     Gen-FP-tree Y generate the FP-tree of Y 30 call GTCWFPM FP-tree Y Close,RP-tree 31   end of ‘for’ in line 16 3 2  end of ‘else’ in line 15 33  output RP-tree and Close 002 Procedure GTCWFPM  T, Close, RP-tree  
407 
407 
402 


We made a set of comparing experiments between FPclose and GTCWFPMiner among min-sup number of patterns Max_L and execution time et. al. The difference between GTCWFPMiner and FPclose  results from weight constraints Figure 11 shows the trend of the execution time of GTCWFPMiner and FPclose with respect to different specified minimum support threshold min-sup based on Max_L=7 As shown in figure, as min-sup decreasing the average execution time increases. When the min-sup is lowered, the performance diffe rence becomes larger. In all case of min-sup  GTCWFPMiner outperforms algorithm FPclose. This is because GTCWFPMiner carries out the closed frequent pattern mining with weight constraints and can reduced effectively search space, but FPclose do the closed frequent pattern mining without weight constraints, its search space is larger than algorithm GTCWFPMiner Figure 12 shows the trend of the number of patterns & runtime w.r.t Max_L As shown in Fig 12\(a GTCWFPMiner generates fewer patterns than FPclose. The difference of the number of patterns between two algorithms becomes smaller as the Max_L increases. In Fig. 12\(b GTCWFPMiner is faster than FPclose. The performance difference becomes larger when Max_L becomes longer. Figure 13 shows GTCWFPMiner has much better scale-up properties than FPclose for the numbers of nodes & traversal transactions  min-sup 15%\n the figure 13\(a\although itself runtime also increases GTCWFPMiner runs faster than FPclose as the number nodes increases. In figure 13\(b GTCWFPMiner also has a better scalability in terns of number of traversal transactions and runs faster than FPclose. Our own experimental evaluation \(not presented in this paper\that WTMaxMiner is equally effective for other value of Max_L and min-sup as well  6. Conclusions and future works  This paper explores the problem of discovering closed frequent patterns from traversals on WDG A transformable model between EWDG and VWDG is proposed Based on the model, we present the mining algorithm named GTCWFPMiner This algorithm exploits a divideand-conquer approach in a bottom-up pattern-growth manner and incorporates the closure property with weight constrains to reduce effectiv ely search space and extracts succinct and lossless patterns from graph traversal TDB Experimental results show the algorithm is an effective and scalable algorithm for CWFP based on graph traversals. How to scale the model and algorithm proposed in this paper to a larger scale, e.g., Web-size scale and other large relation models etc.; can we deeply optimize the algorithm, and how to efficiently put it into practice are still be worthy doing further exploring for researches  7. References  1 M S  Che n   J S Pa rk a nd P S. Yu, “Efficient data mining for path traversal patterns IEEE Trans. on Knowledge and Data Engineering IEEE CS, Los Alamitos, CA, USA, 1998, pp. 209–221  A. Nanopoulos, Y. Manolopoul os, “Mining patterns from graph traversals Data & Knowledge Engineering Elsevier Science, Netherlands, 2001, pp. 243–266  R. Agrawal, R. Srikant F ast algorithm s for m i ning association rules Proceedings of the 20th Int'l Conference  of VLDB  Morgan Kaufmann, San Fr ancisco, USA, 1994   J. Han, J. Pei and Y. Yin Mining frequent patterns without candidate generation Proceedings of SIGMOD’00 ACM, NY USA, 2000   F. Bonchi, C. Lunnhese, “O n closed constrained frequent pattern mining Proceedings of ICDM’04 IEEE Computer Society, Los Alamitos, CA, USA, 2004  M  J Za ki C J Hsia o  Charm: an efficient algorithm for closed itemsets mining Proceedings of SIAM’02 Arlington USA, 2002  Wa ng J Pe i a nd J. Han, , “Closet+: searching for the best strategies for mining fre quent closed itemsets Proceeding of SIGKDD’03 ACM, NY. USA, 2003  Yun J J Le ggett, “WLPMiner: weighted frequent pattern mining with length-decreasing support constraints Proceedings of  PAKDD‘05 Springer, Berlin/Heidelberg, 2005  W. Wang, J. Yang and P S. Yu, “Efficient mining of Weighted Association Rules \(WAR Proceedings of SIGKDD’00 ACM, NY. USA, 2000  C.H. Cai, A.W.C. Fu and C.H. Cheng et. al., “Mining association rules with weighted items Proceedings of IDEAS’98  IEEE Computer Society, Washington, DC, USA,1998  G. Grahne, J. Zhu Fas t algorithms for frequent itemset mining using FP-trees”, IEEE Tr ansactions on Knowledge and Data Engineering, IEEE Computer Society, Los Alamitos, CA USA,2005,pp.1347–1362 5 6 7 8 9 10 0 10 20 30 40 50 60 70 80  Max length of traversal patterns Numbers of patterns   minimum support=15 FPclose  GTCWFPMiner 5 6 7 8 9 10 0 10 20 30 40 50 60 70  Average execution time\(sec Max length of traversal patterns   minimum=15 FPclose  GTCWFPMiner 10 15 20 25 30 10 15 20 25 30 35 40 45 50  Specified minmum support threshold Average execution time\(sec   Max-L=7 |T|=10,000 FPclose  GTCWFPMiner 100 200 300 400 500 0 10 20 30 40 50 60 70  Number of vertices Average execution time\(sec   Max-L=7,|T|=10,000,minimumsup=15 FPclose  GTCWFPMiner 4 6 8 10 12 0 5 10 15 20 25 30 35 40 45 50  Number of transactions Average execution time\(sec   Max-L=7,minimumsup=15 FPclose  GTCWFPMiner 0 0.2 0.4 0.6 0.8 1 0 5 10 15 20 25 30 Weight Frequency   Frequency 
408 
408 
403 


 Very few ows are high throughput Most ows are short lived Almost all ows are mice  Most ows have an average packet size medium Most ows are packet mice Almost all bulk ows are medium throughput Almost all bulk TCP ows are short-lived  Fig 5 Simple on-line linguistic summary of the CRAWDAD-Fall03 NetFlow collection truth values between brackets of rules to analyze In particular we disregarded those rules with a low support or with a low condence truth value Many interesting rules were found for the NetFlow records analyzed We list as examples a selection of them  Most DNS request ows occur both during the day and at night are mice and short lived with condence 0.970 in the WIDE-F-1-Aug collection  Most ows at night are mice with condence 0.890 and Most ows during the day are mice with condence 0.998 in the CAIDA-OC48-0-Apr collection  Most SSH trafc occurs during the day and consists of short lived mice ows with condence 0.892 in the CRAWDAD-Fall03 collection Linguistic summaries provide a novel method to describe qualitative relations in NetFlow collections using natural language Thus by using association rules mining to nd relevant summaries we have a suitable method for addressing a problem related to ow analysis nding invariants in trafc what is known as one the major goals of Internet Science VI C ONCLUSIONS We have addressed network trafc analysis at the ow level from the perspective of linguistic summaries Two approaches for summarizing NetFlow collections have been developed 1 on-line summarization via a predened and congurable set of potential interesting protoforms and 2 discovery of hidden relevant summaries by means of association rules mining A tool that implements both approaches has been developed Experimental results for a set of benchmark NetFlow collections conrm linguistic summaries as an alternative look into network ow statistics useful for both network users and practitioners The method presented is a novel technique to generate simple and human-interpretable reports but also provides a promising technique for nding invariants in network trafc and advancing Internet Science This can be seen as a rst step towards natural language based knowledge discovery for Internet Science A CKNOWLEDGEMENT We acknowledge the MAWI Working Group from the Wide Integrated Distributed Environment WIDE project for k indly p ro viding their  o w collections and support We are also indebted to the Cooperative Association for Internet Data Analysis CAIDA for providing their OC48 data collection  Support f or CAID A  s O C48 Traces Dataset is provided by the National Science Foundation the US Department of Homeland Security DARPA Digital Envoy and CAIDA Members We used the Dartmouth/campus data set from t he Community Resource for Archiving Wireless Data CRAWDAD Our work has beneted from the use of measurement data collected on the Abilene network as part of the Abilene Observatory Project http://abilene.internet2.edu/observatory R EFERENCES  C ooperati v e Association f or Internet D ata Analysis CAID A V i sualization Tools http://www.caida.org/tools/visualization  J  S ommers P  B arford a nd W  W illinger  SPLA T  A V i sualization Tool for Mining Internet Measurements in 7 t h Passive and Ac t ive Ne t work Measuremen t Workshop  Mar 2006 pp 31–40  C  E stan S  S a v age and G  V ar guese  Automatically Inferring P a tterns of Resource Consumption in Network Trafc in SI G C OMM 200 3  Karlsruhe Germany Aug 2003 pp 137–148  R  R  Y ager   A N e w Approach to the S ummarization o f D ata  I n f orma t ion S ciences  vol 28 pp 69–86 1982   Database D isco v e ry Using F uzzy Sets  I n t erna t ional Journal o fI n t elligen tSy s t ems  vol 11 1996  J  K acprzyk and R  R  Y ager   Linguistic Summaries of Data Using Fuzzy Logic I n t erna t ional Journal o f General Sy s t ems  vol 30 no 2 pp 133–1504 Jan 2001  J  K acprzyk and S  Z adro  zny Linguistic database summaries and their protoforms Towards natural language based knowledge discovery tools I n f orma t ion S ciences  vol 173 no 4 Mar 2005   Cisco I OS NetFlo w  h ttp://www cisco.com/en/US/products/ps6601 products ios protocol group home.html Nov 2007  B  C laise e t al  Specication of the IPFIX Protocol for the Exchange of IP Trafc Flow Information Internet Engineering Task Force IPFIX Working Group Revision 26 Sep 2007 Internet Draft  S Shaluno v a nd B T eitelbaum TCP Use a nd Performance on Internet2 in A C M SI G C OMM I n t erne t Measuremen t Workshop San Francisco USA 2001  L A Zadeh A Computational A pproach to Fuzzy Quantiers i n Natural Languages C ompu t ers and Ma t hema t ics wi t h Applica t ions  vol 9 pp 149–184 1983  R R Y a ger   O n O rdered W eighted A v eraging O perators in Multicriteria Decision Making IEEE Transac t ions on Sy s t ems Man and Cy berne t ics  vol 18 pp 183–190  1988  L A Zadeh  A P rototype-Centered Approach to Adding Deduction Capability to Search Engines-the Concept of Protoform in F irs t I n t erna t ional IEEE Sy mposium on I n t elligen tSy s t ems vol.1,Sep 2002 pp 2–3   The concept o f a linguistic v a riable and its application t o approximate reasoning I n f orma t ion S ciences  vol 8 no 3 pp 199 249 1975  A Broido Y  Hyun R Gao and k c claf fy   Their Share Di v e rsity and Disparity in IP Trafc in 5 t h Passive and Ac t ive Measuremen t Workshop  PAM   Antibes Juan-Les-Pins France 2004 pp 113–125  M Delgado N Mar  n D S  anchez and M.-A Vila Fuzzy Association Rules General Model and Applications IEEE Transac t ions on F u zzy Sy s t ems  vol 11 no 2 pp 214–225 Apr 2003  J Kacprzyk and S  Zadro  zny Linguistic Summarization of Data Sets Using Association Rules in IEEE I n t erna t ional C on f erence on F u zzy Sy s t ems FUZZ IEEE  St Louis USA May 2003 pp 702  707  R Agra w al H Mannila R Srikant H T o i v onen and A  V erkamo Advances in Knowledge Discover y and Da t a Mining  American Association for Articial Intelligence 1996 Fast Discovery of Association Rules pp 307–328  M Fullmer e t al  ow-tools http://www.splintered.net/sw/owtools Nov 2007  W i dely Inte grated Distrib u ted En vironment  WIDE P roject MAWI Working Group Packet traces from wide backbone http://tracer.csl.sony.co.jp/mawi 2006  CAID A O C48 T race Project CAID A OC48 T r aces 200304-24 collection http://imdc.datcat.org/collection/1-0018N=CAIDA+OC48+Traces  D K o tz T  Henderson and I  A byzo v   CRA WD AD data set dartmouth/campus v 2007-02-08 Downloaded from http://crawdad.cs.dartmouth.edu/dartmouth/campus Feb 2007 624 2008 IEEE I n t erna t ional C on f erence on F u zzy Sy s t ems FUZZ 2008 


Since the attribute determination algorithm has determined that the attribute Sno in Table 0, the attribute Cno in Table 1, and the attributes <Sno Cno> in Table 2 embrace the double-connective association rule student\(Sno 010 1 course\(Cno 010 2 study\(Sno, Cno\he connective determination algorithm make the relational matrix shown in Fig. 4 according to the binary relationship table of Table 2   C1 C2 C3 C4 S1   T  T  F  F S2   T  F  T  F S3   T  F  F  F S4   F  T  F  F S5   T  F  F  T   Fig. 4 The relational matrix made from Table 2  Fig. 4 is made like this: Table 2 has the tuple S1, C1>, then at the cross of the row S1 and the column C1, a T is filled; Table 2 does not have tuple S1, C3>, then at the cross of the row S1 and the column C3, a F is filled Suppose the cardinality of student\(Sno\s M, in this example 5, i.e. S1 to S5; the cardinality of course\(Cno\n this example 4, i.e. C1 to C4 The algorithms for DCAR1 through DCAR6 are as follows The algorithm for DCAR1 If in Fig. 4 there is M*cf 1 rows, N*cf 2 columns submatrix, in which all elements are Ts, then DCAR1 holds The algorithm for DCAR2 If in Fig. 4 there is at least one column, in which there are at least M*cf 1 Ts, then DCAR2 holds The algorithm for DCAR3 If in Fig. 4 at least M*cf 1 rows have Ts, then DCAR3 holds The algorithm for DCAR4 If in Fig. 4 there is at least one row, in which there are at least N*cf 2 Ts, then DCAR4 holds The algorithm for DCAR5 If in Fig. 4 at least N*cf 2 columns have Ts, then DCAR5 holds The algorithm for DCAR6    DCAR6   DCAR3  DCAR5     DCAR2  DCAR4   DCAR1 Fig. 5 The complement lattice formed by DCAR1 through DCAR6 
277 
277 


000\003 000\\000L\000J\000\021\000\031\000\003\000\003\000&\000R\000Q\000Q\000H\000F\000W\000L\000Y\000H\000\003\000G\000H\000W\000H\000U\000P\000L\000Q\000D\000W\000L\000R\000Q\000\003\000D\000O\000J\000R\000U\000L\000W\000K\000P\000\003 Start Call DCAR1 000D\000O\000J\000R\000U\000L\000W\000K\000P  DCAR1 holds 002  Call DCAR2 000D\000O\000J\000R\000U\000L\000W\000K\000P  Output DCAR1,2,3,4,5,6 End DCAR2 holds 002  Output DCAR2,3,6 Call DCAR3 000D\000O\000J\000R\000U\000L\000W\000K\000P  DCAR3 holds 002  Output DCAR3,6 Call DCAR4 000D\000O\000J\000R\000U\000L\000W\000K\000P  DCAR4 holds 002  Call DCAR5 000D\000O\000J\000R\000U\000L\000W\000K\000P  Output DCAR4,5,6 End DCAR5 holds 002  Call DCAR6 000D\000O\000J\000R\000U\000L\000W\000K\000P  Output DCAR5,6 End DCAR6 holds 002  Output DCAR6 End Error Y N N Y Y N N Y Y N N Y 
278 
278 


If in Fig. 4 there is at least one T, then DCAR6 holds DCAR1 through DCAR6 forms a complement lattice shown in Fig. 5 In Fig. 5, the lower rule implies the upper rule That is, if DCARj is reachable from DCARi via an ascending path, and DCARi holds, then DCARj holds Because DCAR1 through DCAR6 satisfies Fig 5, their algorithms can be merged into one algorithm called connective determination algorithm, shown in Fig. 6 Suppose cf 1 80%, cf 2 75%. In Fig. 4, for the column of C1, there are M*cf 1 5*80%=4 elements whose values are T \(namely, S1, S2, S3, S5 Therefore, DCAR2: course\(Cno 004 1  student\(Sno 003 1  study\(Sno, Cno\olds. From Fig. 5, we know that DCAR3 and DCAR6 also hold. In Fig. 4, there are at least N*cf 2 4*75%=3 columns which have value T \(namely, in the column of C1 there is S1, in the column of C2 there is S1, in the column of C3 there is S2, in the column of C4 there is S5 therefore DCAR5: course\(Cno 003 1  student\(Sno 004 1  study\(Sno, Cno  VI. CONCLUDING REMARKS 1\ Double-connective association rule mining is different from single-connective association rule mining. The former mines the association among the primary keys of the two entity tables and the primary key of the binary relationship table. The latter mines the association between frequent item sets 2\. 4 is different from data cubes in data warehouses. The elements in Fig. 4 are T or F. The elements in the data cubes are data 3\The differences between double-connective association rule and database query are that, first, the query information in databases are predeterminate while the information to be mined by double-connective association rule is not predeterminate, it is implied. Secondly, database query needs to write SQL statements, while double-connective association rule mining is automatic. Thirdly, the information obtained by database query is quantitative, while the information obtained by double-connective association rule mining is qualitative such as “for many”, “there are some  REFERENCES 1 Ji a w ei H a n   M i ch eli n e K a m b er   D a t a  M i n i n g C onc ep t s  a nd Techniques, Higher Education Press, Beijing, 2001, Morgan Kaufmann Publishers, 2000 2 A  G  Ha m i lt on  L o gi c for M a th em a t i c ia ns R evi s ed E d i t i o n   Cambridge University Press, 1988, Tsinghua University Press Beijing, 2003 3 X unw e i Z h o u   Br ie f I ntr o du c t io n  to  Mu t u al l y I nve r s is tic Logic”, 1999 European Summer Meeting of the Association for Symbolic Logic, Utrecht, The Netherlands, August 1-6 1999 4 u n w ei Zh ou F i r s t leve l exp l i c i t m u lt ip le i ndu ct i v e composition”, 2005 Spring Meeting of the Association for Symbolic Logic, The Westin St. Francis Hotel, San Francisco CA. USA, March 25-26, 2005 5 A b rah a m S i lb ers c ha t z  Hen r y  F  Kort h  S S u da rs ha n Dat a b a s e  System Concepts \(Fourth Edition\, Higher Education Press Beijing, 2002, McGraw-Hill Companies, 2002  
279 
279 


support pruning gene expression classifier with an accurate and compact fuzzy rule base for microarray data analysis Biosystems vol 85 computationally challenging As training set sizes increase it is likely that these difficulties will also increase VI RELATED WORK While operating on a microarray dataset current CAR 1 2 3 4 and other pattern/rule 20 21 mining algorithms perform a pruned and/or compacted exponential search over either the space of gene subsets or the space of sample subsets Hence they are generally quite computationally expensive for datasets containing many training samples or genes as the case may be BSTC is explicitly related to CAR-based classifiers but requires no expensive CAR mining BSTC is also related to decision tree-based classifiers such as random forest 19 and C4.5 family 9 methods It is possible to represent any consistent set of boolean association rules as a decision tree and vice versa However it is generally unclear how the trees generated by current tree-based classifiers are related to high confidence/support CARs which are known to be particularly useful for microarray data 1 2 6 7 11 BSTC is explicitly related to and motivated by CAR-based methods To the best of our knowledge there is no previous work on mining/classifying with BARs of the form we consider here Perhaps the work closest to utilizing 100 BARs is the TOPRULES 22 miner TOP-RULES utilizes a data partitioning technique to compactly report itemlgene subsets which are unique to each class set Ci Hence TOP-RULES discovers all 100 confident CARs in a dataset However the method must utilize an emerging pattern mining algorithm such as MBD-LLBORDER 23 and so generally isn't polynomial time Also related to our BAR-based techniques are recent methods which mine gene expression training data for sets of fuzzy rules 24 25 Once obtained fuzzy rules can be used for classification in a manner analogous to CARs However the resulting fuzzy classifiers don't appear to be as accurate as standard classification methods such as SVM 25 VII CONCLUSIONS AND FUTURE WORK To address the computational difficulties involved with preclassification CAR mining see Tables IV and VI we developed a novel method which considers a larger subset of CAR-related boolean association rules BARs These rules can be compactly captured in a Boolean Structure Table BST which can then be used to produce a BST classifier called BSTC Comparison to the current leading CAR classifier RCBT on several benchmark microarray datasets shows that BSTC is competitive with RCBT's accuracy while avoiding the exponential costs incurred by CAR mining see Section VB Hence BSTC extends generalized CAR based methods to larger datasets then previously practical Furthermore unlike other association rule-based classifiers BSTC easily generalizes to multi-class gene expression datasets BSTC's worst case per-query classification time is worse then CAR-based methods after all exponential time CAR mining is completed O SlS CGl versus O Si CGi As future work we plan on investigating techniques to decrease this cost by carefully culling BST exclusion lists ACKNOWLEDGM[ENTS We thank Anthony K.H Tung and Xin Xu for sending us their discretized microarray data files and Top-k/RCBT executables This research was supported in part by NSF grant DMS-0510203 NIH grant I-U54-DA021519-OlAf and by the Michigan Technology Tri-Corridor grant GR687 Any opinions findings and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the funding agencies REFERENCES 1 G Cong K L Tan A K H Tung and X Xu Mining top-k covering rule Mining SDM 2002 5 R Agrawal T Imielinski and A Swami Mining associations between sets of items Y Ma Integrating classification and association rule mining KDD 1998 11 T McIntosh and S Chawla On discovery of maximal confident rules without pp 43-52 1999 24 S Vinterbo E Kim and L Ohno-Machado Small fuzzy and interpretable pp 165-176 2006 1071 pp 207-216 1993 6 G Dong pp 273-297 t995 9 pp 5-32 2001 20 W Li J R Quinlan Bagging boosting and c4.5 AAAI vol 1 V Vapnik Support-vector networks the best strategies for mining frequent closed itemsets KDD 2003 4 M Zaki and C Hsiao Charm L Wong Identifying good diagnostic genes or gene expression data SIGMOD 2005 2 G Cong A K H Tung X Xu F Pan and J Yang Farmer Finding interesting rule gene expression data by using the gene expression based classifiers BioiiiJcrmatics vol 21 l and Inrelligent Systenis IFIS 1993 16 Available at http://sdmc.i2r.a-star.edu.sg/rp 17 The dprep package http:/cran r-project org/doclpackages dprep pdfI 18 C Chang and C Lin Libsvm a library for support vector machines 2007 Online Available www.csie.ntu.edu.tw cjlin/papers/libsvm.pdf 19 L Breiimnan Random forests Maclh Learn vol 45 no 1 M Chen and H L Huang Interpretable X Zhang 7 J Li and pp 725-734 2002 8 C Cortes and Mac hine Learming vol 20 no 3 in microarray data SIGKDD Worikshop on Dtra Mining in Bioinfrrnatics BIOKDD 2005 12 R Agrawal and R Srikant Fast algorithms for mining association rules VLDB pp 1964-1970 2005 25 L Wong and J Li Caep Classification by aggregating emerging patterns Proc 2nd Iat Coif Discovery Scieice DS 1999 gene groups from pp 487-499 t994 13 Available ot http://www-personal umich edu/o markiwen 14 R Motwani and P Raghavan Randomized Algoriitlms Caim-bridge University Press 1995 15 S Sudarsky Fuzzy satisfiability Intl Conf on Industrial Fuzzy Contri J Han and J Pei Cmar Accurate and efficient classification based on multiple class-association rules ICDM 2001 21 F Rioult J F Boulicaut B Cremilleux and J Besson Using groups for groups in microarray datasets SIGMOD 2004 3 concept of emerging patterns BioinformJotics vol 18 transposition for pattern discovery from microarray data DMKD pp 73-79 2003 22 J Li X Zhang G Dong K Ramamohanarao and Q Sun Efficient mining of high confidence association rules without S Y Ho C H Hsieh H pp 725-730 1996 10 B Liu W Hsu and support thresholds Principles f Drata Mining aind Knowledge Discovery PKDD pp 406 411 1999 23 G Dong and J Li Efficient mining of emerging patterns discovering trends and differences KDD J Wang J Han and J Pei Closet Searching for An efficient algorithm for closed association rule mining Proc oJ the 2nd SIAM Int Con on Data in large databases SIGMOD 


