Open Source RTOS Implementation for On-Board Computer 050OBC\051 in STUDSAT-2 Bheema Rajulu Project STUDSAT Nitte Meenakshi Institute of Tech Bangalore 560064 India bheemarajulu90@gmail.com Sankar Dasiga Project STUDSAT Nitte Meenakshi Institute of Tech Bangalore 560064 India dasiga@hotmail.com Naveen R Iyer Project STUDSAT M S Ramaiah Institute of Tech Bangalore 560054 India iyernaveenr@gmail.com Abstract\227 STUDSAT-1 is the 002rst pico-satellite developed in India by the undergraduate students from seven engineering colleges across South India After the successful launch of STUDSAT-1 on 12th July 2010 the team is developing STUDSAT-2 which is India's 002rst twin satellite mission STUDSAT-2 is undertaken by the undergraduate students from seven engineering colleges from the State of Karnataka India STUDSAT-2 consists of two Nano Satellites each having the dimension of 30 x 30 x 20 cm cube and weighing less than 10 kg Each satellite has two payloads one is the CMOS Camera with a resolution of 80 m and other is the ISL facility The satellites are in along-the-track constellation architecture with the Master Satellite sending position data of the 002rst image location on orbit and velocity of master satellite from GPS module to the Slave satellite via ISL for improving temporal resolution On-board computer is the brain of a satellite whose operating system is designed to operate in resource constrained environments and is often tailored to the speci\002c needs of its host system while a real time operating system ensures that interrupts and other time critical tasks are processed when required In order to maximize the accessibility the operating system must be inexpensive and readily available which demands an open-source OS Implementation of a Real-Time Operating System 050RTOS\051 provides several priority levels for tasks execution FreeRTOS ful\002lls the requirements by having real-time capabilities full availability of the source code functional development environment crossplatform support and community support After an extensive literature survey the ARM microcontroller with low power and high performance capability STM32 ARM Cortex-M4 with 168 MHz CPU having 210 DMIPS is chosen as the main controller that supports FreeRTOS that can run on ARM CortexM cores The On-Board Computer controls and coordinates the tasks of all other subsystems of the satellite The different tasks executed by these subsystems have multi-threading and preemptive multitasking characteristics A real-time operating system FreeRTOS uses advanced task scheduling techniques and a preemptive kernel which allows multi-threading of processes to occur This paper presents the technical justication for using FreeRTOS in STUDSAT-2 It presents implementation of FreeRTOS on STM32Cortex M4 controller which will increase the functional integration and performance of small satellite that simpli\002es software development enables code modularity and results in maintainable and expandable high-performance that will reduce the effort required to develop software for STUDSAT-2A/2B Mission Index TermsSTUDSAT-2 Satellite RTOS Inter-Satellite Link 050ISL\051 Twin Satellite Mission OnBoard Computer 050OBC\051 T ABLE OF C ONTENTS 1 I NTRODUCTION                                   1 2 O N B OARD C OMPUTER                          2 3 H ARDWARE S ELECTION                          3 4 S OFTWARE                                        4  978-1-4799-1622-1/14 31  00 c 015 2014 IEEE 5 I NITIALIZATION OF OBC  D EVICE S TARTUP  8 6 S OFTWARE T ESTING  S IMULATION            8 7 C ONCLUSION  S COPE FOR F UTURE            11 A CKNOWLEDGMENTS                            11 R EFERENCES                                     13 B IOGRAPHY                                      13 1 I NTRODUCTION Real-time systems are omnipresent in almost every application Some of the examples include industrial plant control missile guidance computer on-board an aircraft path planning task of a robot etc Nowadays all systems are designed for real-time response to stimuli A real-time system is subject to operational deadlines to respond to events A Real-time operating system 050RTOS\051 is an operating system which is used to write good embedded software for complex systems in order to ensure the application meets its processing deadlines Typically deeply embedded real-time applications include a mix of both hard and soft real-time requirements Soft real-time requirements are those that state a time deadline which when breached does not render the system useless whereas hard real-time requirements are those that state a time deadline which when breached results in absolute system failure In this paper we elucidate the technical justi\002cation for using FreeRTOS in STUDSAT-2 We present the implementation of FreeRTOS on STM32Cortex M4 controller to increase the functional integration and overall performance of the small satellite Utilization of FreeRTOS simpli\002es software development enables code modularity and results in maintainable and expandable high-performance that will reduce the effort required to develop software for STUDSAT-2A/2B Mission The rest of the paper is organized as follows Section 2 reviews the general OBC system design and its objectives requirements and functions Section 3 explains the OBCs hardware selection which includes the OBC Bus and Memory Section 4 discusses the OBCs software which includes the signi\002cance of a RTOS for STUDSAT-2 and the implementation of FreeRTOS for the OBC Section 5 describes the initialization of the OBC system with the help of 003ow charts which are self explanatory Section 6 is the concluding note which also discusses the scope for future Real-time software architecture and its implementation on a small satellite platform were explored and also its pros and cons were discussed in Utilization of Atmel AT91SAM7SE-256 controller as the OBC for Nano/Pico satellite applications was studied Implementation of FreeRTOS on S3C44B0 processor was studied The con1 


Figure 1  Overall OBC System cept of hierarchical scheduling using FreeRTOS was studied  The implementation of Stream Control T ransmission Protocol 050SCTP\051 in RTEMS an open source RTOS for data communication over satellite networks was proposed in Design of a system for handling high speed image data from satellite and advanced image compression techniques was explained in A no v el algorithm for GPS data acquisition data processing and implementation for robot navigation was proposed in 2 O N B OARD C OMPUTER The On Board Computer 050OBC\051 for STUDSAT-2 is ARM based CortexM4 microcontroller with DSP and FPU instructions combined to 168 MHz performance The performance and the features of the chosen processor are based on functional operational and interface requirements  protocols The overall system architecture and requirements of the subsystems is accomplished by the open-source realtime operating system 050RTOS\051 which support various types of peripheral interfaces telemetry storage and data processing The block diagram shown in Figure 1 illustrates the various peripherals used for the project and the general system design The various peripherals for the C&DH system consist of a set of memories a microcontroller supervisor IC and temperature sensors at various locations of the satellite A Read/Write Non-Volatile Radiation Resistant Memory is used for storing the telemetry data And for storing the images from the CMOS image sensor a fast and lard read/write memory is used The controller will be supervised by a watchdog timer to catch runaway programs by resetting the controller The I/O Board provides serial peripheral interface 050SPI\051 I2C USART ADC etc to communicate with sub-modules of other sub-systems Objectives The Command and Data Handling 050C&DH\051 System is the brain of the satellite Its functions are 017 To develop a working hardware prototype of the STUDSAT OBC subsystem 017 To perform the house keeping functions which includes logging the telemetry data in the memory periodically 017 To detect and correct faults 017 To implement the higher layers of the communication protocol 017 To interface with the electrical and ground support equipment the launcher the ground segment with the other two spacecraft in the constellation for telemetry possibly received over the Inter-Spacecraft Links Requirements OBC requirements are derived from mission requirements and are de\002ned at system level requirements OBC System requirements can be subdivided into three different groups 017 Functional Requirements Tasks subsystem control task scheduling data processing communication subsystem and component level data storage etc 017 Operational Requirements Operations modes 050states\051 power modes autonomy failure detection isolation and recovery 050FDIR\051 etc.\051 017 Interface Requirements and protocols Compatibility with hardware and software interfaces standards and protocols Functions of OBC The tasks that are performed by the OBC can be listed as follows 017 Stabilize the satellite in the orbit 017 Establish a communication link with ground station 017 Monitor the health of the satellite 017 To capture images of the earth 017 To send the image to the ground station 017 To communicate with the other satellite through InterSatellite Link 2 


3 H ARDWARE S ELECTION ARM CORTEX-M4F-based STM32F407VGT6 is used as main processor for device monitoring status maintenance and interfacing with other peripherals The Cortex-M4 processor has a wide variety of highly ef\002cient signal processing features applicable to digital signal control markets and features necessary for the OBC More information of STM32F4 Discovery board can be inferred from the data sheet Figure 2 shows an example of a 002gure spanning a single column Figure 2  STM32F4DISCOVERY The project utilizes STM32F4 Discovery board as its onboard computer A snapshot of the board is as shown in the above 002gure The OBC hardware has been designed with all possible interfaces and control circuitry with STM32F4 Discovery board OBC Bus One Wire Interface Board\227 This board allows the onboard computer to act as the 1-wire bus master to control the devices connected to the bus This board also contains a mounted thermal sensor for monitoring the temperature of the box containing the onboard computer as well as several additional circuit boards Magnetic Coil Control Board\227 This board provides the onboard computer with a GPIO connection to control the magnetic coils for attitude adjustments Reaction Wheels Control Board 050PWM\051\227 This board provides access for the data bus to the heaters and reaction wheels Magnetometer Interface Board 050USART\051\227 This board provides the serial conversion of magnetic 002eld in xyz coordinates to allow the onboard computer to take readings over the data bus from the magnetometer GPS Interface Board 050USART\051\227 This board converts the LVTTL signal from the GPS unit to an RS-232 signal for connection to the onboard computer Communication 050SPI/USART\051\227 The communication system with transmitter and receiver for the radio frequency communication link and provides an SPI data link to the onboard computer Electronic Power Board 050I2C\051\227 This board handles the voltage regulation for the different subsystems Payload CMOS camera 050DCMI\051\227 Provided 10 bit parallel data bus with SDA and SCL data bus for storing image and reading image data from payload memory Inter-satellite Board 050USART\051\227 This board is designed to mount the ISL S-Band transceivers on and connects to the computer via a USART data link Memory General Requirements\227 The general requirements of both the program and data memories are as follows 017 Low power consumption 017 Non-volatile so that data is not lost in the event of a power failure 017 Serial bus interface to minimize space of bus on PCB and failure rate 017 The maximum number of write cycles expected is assumed to about 11,000 This is based on the satellite passing the NASTRAC ground station six times a day for the mission lifetime of 002ve years with each pass initiating a write cycle Obviously the memory should be able to write/erase more times than this Program Memory Requirements\227 The microcontroller has its own non-volatile program memory However on most devices this is small limiting the size of the program and thus range of tasks the microcontroller can run In order to increase the 003exibility of the mission external program memory will be used There is no upper limit to the required program memory size During the mission it is expected to have the ability to upload new programs to the spacecraft Thus it is essential to use fast writing non-volatile secure memory for the external program memory Three types memories EEPROM Flash and SRAM chosen because this computer will operate in atmosphere where radiation sometimes leads to bit-\003ips in temporary memory 050Flash\051 which results in unpredictable software errors A programmable safety timer called a watchdog timer resets the processor if bit-\003ip occurs and the processor reloads the boot-software from EEPROM 05024LC02 050EEPROM\051\051 to Flash It is essential that the boot-software always works correctly and therefore must be stored in a memory where bit-\003ips do not occur  The Flash memory is used to store the main operating software and other subroutines and a copy of this software will also be stored in EEPROM 050permanent memory\051 The 512K SRAM temporary memory will be used to run the software and subroutines and also as a place to store the measured values from the payload sensors Data Memory Requirements 050AT45DB161D\051\227 For the initial payload 500 Kbytes is needed to store one photo taken by the camera The transmitter transmits at 9.6Kbits/s and in the STUDSAT-2 low orbit the maximum time it will be able to transmit data to the ground station will be around ten minutes This means the maximum data that can be transmitted in one pass is 720 Kbytes However in practice it will typically be about half of this As one photo takes 500 Kbytes that means that in one pass over the ground station either one photo of around 500 Kbytes or 500 Kbytes of telemetry data can be transmitted but not at the same time Thus some orbits will store only a photo while other orbits will store only telemetry data at the discretion of the ground station operator 3 


Figure 3  Peripheral Interfacing 4 S OFTWARE Figure 3 shows the STM32 M4 interfaced with various pheripherals like Camera Magnetometer Gyros ISL Module 2.4GHz Power System and Beacon Module for checking the overall software functionality 050using FreeRTOS as operating system\051 Requirement of Real-Time Operating System When STUDSAT-1 was developed the idea of utilizing a realtime operating system did not strike us However after its launch we did come to realize how utilization of a RTOS could have signi\002cantly reduced the complexity of the code and saved a lot of time Exploring the prospects of using a RTOS for Project STUDSAT-2 led to the following advantages 017 Code Complexity Utilization of RTOS leads to a significant reduction of the complexity of the code By allowing the project to be decomposed into independent threads or processes and using OS services such as message queues mutexes semaphores event 003ags etc to communicate and synchronize the project becomes more manageable 017 Time critical nature of the system As discussed in the introduction section of this paper the need to meet hard realtime deadlines is another major issue where RTOS could help With a priority-based pre-emptive RTOS the scheduler can help ensure deadlines are met 017 Testing Testing of individual functions becomes easier when these functions are split into a number of tasks so that each task can be separately tested and veri\002ed Task interfaces can be exercised without the need to add instrumentation that may have changed the behaviour of the module under test 017 Code reuse Tasks facilitate code resue within a project thereby saving time in rewriting huge chunks of code again and again.Greater modularity and less module interdependencies facilitates code reuse across projects 017 Etcetera Above are just few of the points which justify the use of RTOS for the project A thorough study of the capabilities of a RTOS led to more such advantages of using a RTOS for the project In order to implement all the functions required by the OBC a real-time operating system is used A real time operating system 050RTOS\051 is basically a task-scheduling program that responds to events such as interrupts in real time i.e a few milliseconds at most A good RTOS will hide the complexity of the underlying hardware from the tasks running making tasks easier to develop An RTOS provides the following services to the tasks running 017 Decides which task to run next 017 Ensures that a task does not take up resources for too long delaying other tasks 017 Handles hardware interrupts for tasks and calls the appropriate task that is waiting for the interrupt 017 Passes messages between tasks so they can communicate with each other An important feature of the RTOS is multitasking This allows several tasks to run as though they are running in parallel Obviously this is impossible on most processors and what actually happens is the tasks are allowed to run for short periods before switching to the next task All important registers and data are saved between each task switch so 4 


that the task may resume in exactly the same state it was before the switch next time it is called More details on how multitasking and other such features can be implemented using FreeRTOS is discussed in the sections below Comparison  Feasibility Studies One of the major requirements of Project STUDSAT-2 was an open-source RTOS 050mainly for economic feasibility\051 Also when an open-source RTOS could do the job and share the same capabilities as that of a non-open-source RTOS then there is no need to incur additional costs Following are the major aspects of a RTOS we looked at for carrying out comparison studies 017 Features Basic features of a RTOS include tasks task scheduling queues semaphores memory management etc Although there are several more features the said features constitute a minimum requirement 017 Size Memory constraint is a big issue while considering using a RTOS The microcontroller chosen for the project 050STM32F4VGT6\051 required a small RTOS 017 Performance One of the major requirements include that the RTOS take minimal time to boot Memory allocation mechanism gives a clearer picture of the performance of the RTOS in the chosen hardware 017 Documentation  Support Any RTOS has to have good documentation and technical support so that critical issues can be easily and professionally addressed 017 Cost  Licensing Model What kind of license does the RTOS offer Is it open-source The de\002nition of opensource may not be uniform across all vendors of RTOS It is important to check what features are available as open source that is how much of the RTOS is truly open-source These are few of the questions that need to be answered Since there are several RTOSes in the market which are open source it may not be possible to test each and every available open-source RTOS on the hardware due to time constraints However a comparison study is really important for the project Comparison studies require brainstorming sessions The 002rst step for comparison studies would be to lookup for the list of available open-source RTOSes And then look up for comparison studies already performed and made available online Based on the online reviews of several open-source RTOSes a select few can be rounded off Then theoretical studies over each of these RTOSes could lead to rounding off to an even smaller number of RTOSes which makes it viable to test each of these on the hardware Nevertheless it is upto the user to test and verify each of the open source RTOSes available for a speci\002c application Keeping the above points in mind we 002nalised on FreeRTOS FreeRTOS is a good choice if the user is looking for a small OS 050for microcontroller-based applications\051 Having tested quite a few like ChibiOS/RT 050which lacked good documentation\051 uCOS-II 050which lacked a robust multitasking feature 050set by assigning same priority to several tasks in FreeRTOS\051\051 etc we were convinced that FreeRTOS provides us with all that is required for our project RTOSes keep getting updated with the latest features and thereby there may or may not be a best choice for the application The section below discribes why we chose FreeRTOS over other RTOSes Why FreeRTOS Functionally most small RTOSes do basically the same thing So differentiation comes from non-functional attributes like quality control IP infringement protection design choices 050at which point do you trade off size speed portability etc.\051 ecosystem user base if there are options for commercial support should any legal team ever need it etc A good comparison of various open-source RTOS for STM32 and Cortex-M3 MCUs 050which is applicable for Cortex-M4 MCUs like STM32F407VGT6 also\051 can be found in Features\227 FreeRTOS has all the necessary features a RTOS generally has and is therefore suitable for the project All of the features are also easy to implement Size\227 This depends on the compiler architecture and RTOS kernel con\002guration FreeRTOS is a relatively small application The minimum core of FreeRTOS is only three source 050.c\051 002les and a handful of header 002les totalling just under 9000 lines of code including comments and blank lines FreeRTOS running on an AVR has a footprint 050the amount of ROM used\051 of approximately 4.4 kilobytes RTLinux 050 RTOS microkernel that runs the entire Linux operating system 051 on the other hand is relatively scalable The Linux kernel can be stripped of functionality which is not needed But even given that the footprint is generally measured in megabytes 050or in some rare cases hundreds of kilobytes\051 Similarly QNX is another RTOS which seemed viable but is a 224heavier\224 RTOS compared to FreeRTOS A typical application takes 5 to 10 kilobytes of ROM space STM32F407VGT6 has upto 1 Mbyte of 003ash memory and upto 192+4 Kbyte of SRAM including 64 Kbyte of CCM 050core coupled memory\051 data RAM which makes it suitable for any FreeRTOS-based application More details on the amount of RAM and ROM utilization of FreeRTOS can be found in Performance\227 Time taken for booting is one of the major issues that is to be taken into consideration while judging the performance of any RTOS A detailed description of the each of the processes that are executed while booting and its timing in FreeRTOS can be found in Ag ain the performance depends on how ef\002ciently the code is written and the hardware on which the RTOS is used Although few of the small open-source RTOSes 050like ChibiOS/RT\051 may closely compete with FreeRTOS in performance other aspects like documentation  support features etc make FreeRTOS a more attractive choice Documentation  Support\227 FreeRTOS is a truly cross platform defacto standard It supports 34 architectures 050that is architectures not devices\051 and 18 tool chains till date Even the time investment required can be lower than with commercial solutions Availability of documentation for several microcontroller architectures swift technical support and massive user base makes FreeRTOS a good choice and reins it supreme when compared to ChibiOS/RT Also since FreeRTOS has a massive user base the solutions to most of the common technical problems are available readily online Cost  Licensing\227 License details of FreeRTOS can be found in FreeR T OS is moderated open source which means that when FreeRTOS is downloaded the code is truly free and open source to the user However contributions back to FreeRTOS are made publicly available while simultane5 


ously kept separate from the of\002cial code This allows the FreeRTOS project to strictly control the quality of the code ensuring a robust product It also provides assurance to end users that their open source choice has no unintentional or unknown IP contamination The business model allows users the freedom to access use evaluate distribute etc the code completely free of charge However they have the security of knowing there is a third party infrastructure there should they ever need commercial licensing or support contracts QNX RTOS is not open-source and therefore can be used only for a limited time period The project duration is long and therefore limited time period softwares are not feasible for the project Micrium's uCOS is another example of a RTOS which competes closely with FreeRTOS Although uCOS is known for its high reliability 050even more than FreeRTOS as it has been used in several space research projects\051 it is not open-source Another speciality of FreeRTOS includes code quality which can be quanti\002ed in a number of ways Independent analysis of the code has proven its robustness and quality FreeRTOS is professional grade and robust yet still free Users can have the con\002dence in knowing that SafeRTOS which originated from FreeRTOS has been independently certi\002ed by TUV SUD for use in safety critical systems These are all the points where FreeRTOS scores extremely highly The design choice is subjective of course and different solutions are best suited to different applications so there is no 224best\224 and no 224right or wrong\224 for that category FreeRTOS has become the de facto standard for microcontrollers and comes top in class in the EE times embedded market surveys for most used and most considered for next project shows independently that the model works extremely well Implementation of FreeRTOS FreeRTOS software download consists of demo source and license 002les Demo 002le consists of example projects for a variety of boards For OBC either one of these sample projects can be modi\002ed or a project can be created from the scratch using a project management software Instead of modifying an existing demo 050which makes use of IAR Embedded Workbench software\051 we chose to create a project from the scratch as it allows us to use any software we choose to integrate with FreeRTOS We chose uVision Keil for the OBC Creating a project from the scratch allows us to organize/group all the 002les and also allows us to add or delete 002les as per our requirement On the other hand a pre-con\002gured demo includes even those 002les which are not required for the OBC Firstly we listed out the tasks required by the OBC Table 1 illustrates the list of tasks devised for the system There are three types of tasks based on the timing in this software architecture 017 Periodic Task This task must take action on a regular basis 017 Periodic Update Task This task will collect data and place it in a global memory area for use by other tasks on regular basis 017 Aperiodic Task This task will run as a result of some external command respond such as from the ground The tasks are assigned a priority based on criticality of the Table 1  Task Interface   Task  Task Name  Timing    Task Manager   Continuous    Camera  tCamera  Periodic Update    GPS  tGPS  Periodic Update    Attitude  tAttDetr  Periodic   Determination      Inter-Satellite  tISL  Periodic   Communication      STUDSAT  tBeacon  Periodic   Beacon      Power  tPower  Periodic    Mode Manager  tModeMgr  Periodic    Mission Timeline  tMTM  Aperiodic   Manager      Uplink  tUplink  Aperiodic   Communication      Downlink  tDownlink  Aperiodic   Communication     task and execution time Each task will have a message queue assigned to it and will block on the message queue with a timeout equal to its period If the task is aperiodic it will have an in\002nite timeout Using this mechanism there are two ways to activate a sleeping task send a message to its message queue which will be processed immediately 050as long as another higher priority task isnt already active\051 or wait for the timeout period to expire 050assuming the task is periodic\051 The task manager is the FreeRTOS real-time operating system 050RTOS\051 The task manager is responsible for context switching between active tasks based on their priority 017 Camera 050tCamera\051  This task is responsible for capturing image and serve buffer to compress on board image using JPEG2000 algorithm Following threads run in the Camera Task 050tCamera\051  Cam_GetStatus\050\051 Cam_set_mode\050\051 Cam_TakePicture\050\051 Cam_Jpeg_Compress\050\051 Cam_Transmit_Image_to_Buffer\050\051 Cam_Rec_Image_from_Buffer\050\051 Cam_LowPower\050\051 Cam_PowerOK\050\051 Cam_telemetry.\050\051 Cam_PictureData\050\051  017 Intersatellite Link 050tISL\051 This task is responsible for communication with the other satellite through Inter-Satellite Link 0502.4Ghz\051 and establish communication between two satellites The communication would be master salve con\002guration OBC will determine when the data needs to be gathered for the telemetry buffer and when to communicate with the slave satellite Following Threads run in Intersatellite Link 050tISL\051  ISL_GetStatus\050\051 ISL_Get_TelemBuffer\050\051 ISL_Get_IMIBuffer\050\051 ISL_Get_ImageData\050\051 ISL_Send_Cross Send\050\051 ISL_GetResponse\050\051 ISL_Get_Cross_GPS\050\051 ISL_End_Link\050\051  6 


Figure 4  Flowchart illustrating initialization of OBC and device startup 7 


017 Communication Tasks Communication tasks can be classi\002ed as Uplink Task and Downlink Task These tasks are responsible for establishing a communication link with ground station for both uplink and downlink communication Uplink Communication 050tUplink\051 This task is responsible for receiving commands from ground station and parsing the data to execute suitable actions in the satellite Downlink Communication 050tDownlink\051 This task is responsible for sending telemetry data and payload data that is requested by ground station The message should be formatted in AX.25 protocol for decoding message in ground station The OBC  Comm  Downlink performs the task of forming packets of the information to be sent  OBC_Comm_Downlink\050\051 OBC_Uplink\050\051 Com_GetStatus Com_RxNewSoftware Com_PictureData Com_RxSyncData Com_LOGData Com_RxCommand Com_TxSyncData Com_RxDtmf_Command Com_LowPower Com_RxSetDebugOut Com_PowerOK Com_RxTransmit_Image Com_RxNewFlightPlan Com_RxNewAcsParam Com_RxKeplerElements Com_COMStatus Com_RxTimeSync  017 Beacon Task 050tBeacon\051 The satellite will send beacon signals to the ground station The Beacon signal contains information like the satellite ID This information is in the form of packets which are formed according to the AX.25 protocol 017 Power 050tPower\051 This task is responsible for handling all power related tasks on the OBC These tasks include software overcurrent protection and power switch control with data 003ow control command for Regulator Current and Voltage bus Following threads run in Power 050tPower\051  Power_GetStatus\050\051 Power_SetBootMode\050\051 Power_SystemReset 050\051 Power_TurnOnSubsytem\050\051 Power_TurnOffSubsytem 050\051 Power_reset_theDog\050\051 Power_BasicBeaconOff\050\051 Power_telemetry\050\051 Power_ErrorShutDown\050\051 Power_PCUPowerOK\050\051 Power_PCULowPower\050\051  017 Attitude Determination 050tAttDetr\051 This task is responsible for updating Keplerian elements performing mathematical calculations and provide actuation and determination Data acquisition of magnetometer XYZ position gyro XYZ position sun vector orbit propagation and error detection Following Threads run in Attitude Determination 050tAttDetr\051  ADCS_GetStatus ADCS_Telemetry ADCS_UpdateKeplerElements ADCS_navigation_guidance ADCS_SunData ADCS_SwitchADCSMode ADCS_Lowpower ADCS_PowerOk ADCS_TimeSynchronized  017 Mode Manager 050tModeMng\051 This task is responsible for maintaining the mode state of the satellite The mode manager will determine the state based the request and conditions received from the OBC which are associated with different subsystems like EPS COMM ADCS and thermal systems  017 Mission Timeline Manager 050tMTM\051 This task is responsible for managing the timeline for future events 5 I NITIALIZATION OF OBC  D EVICE S TARTUP The data ow shown in gure 4 describes the initialization of OBC and device startup required to send telemetry data from the sensors to communication module All the communication between tasks occur using message queues The ight software is implemented with FreeRTOS for operation of command and data handling Satellite Modes of Operation The ight software is implemented with three distinct spacecraft modes  Safe Mode  Ideal Mode Normal Mode Apart from the normal operation of the satellite the following operating modes are de\002ned for the extended convenience  optimum functioning of the satellite and for power saving functions Start-up Mode\227 This will be a one-time operational mode which will be active only after a few hours after the launch of the Satellite into the orbit Safe Mode 050Low power\051 227 In this mode only the essential modules are powered ON and only the Housekeeping  Maintenance functions are done in this mode Emergency Mode\227 The satellite is put under emergency mode during Extreme operating conditions caused due to either partial module failure or low power availability In this mode only the Power system and the Beacon is kept on and rest of the modules are suspended until the errors are recti\002ed or the normal operating conditions are restored Communication Priority Mode\227 In this mode the priority of operation is given to the Communication modules all other modules are put under minimal operative mode so that maximum power is provided to the Communication module for the duration in which the satellite happens to be in the Cone of Window Payload Priority Mode\227 In this mode maximum CPU usage and power is given to the payload requirements to ensure smooth and uninterrupted payload mission The satellite will operate in this mode during the exclusive payload operation Debug Mode\227 This mode is mostly activated along with the Emergency mode or Safe mode This mode is activated during the maintenance operation where the Runtime software errors can be debugged by up-command 6 S OFTWARE T ESTING  S IMULATION The softwares used for OBC are as follows 017 RTOS The OBC makes use of FreeRTOS It is GPL Licensed operating system that targets microcontroller It supports various degrees of multitasking ranging from a preemptive scheduler  co-operative multitasking to coroutines 017 Compiler and Debugger The Vision IDE from Keil combines project management make facilities source code editing program debugging and complete simulation in one 8 


powerful environment which makes it suitable for the project The ST-LINK/V2 tool can be easily used for JTAG and SWD interface debugging and programming Testing A code was written and executed on STM32F4DISCOVERY board to test few task management features of FreeRTOS The total 003ash footprint came upto approximately 11 Kbyte which includes FreeRTOS code application code and library code Few code snippets are listed below that show different task management features of FreeRTOS The syntax for creating a task using FreeRTOS is shown below Detailed explanation can be referred from text books on FreeRTOS  portBASE_TYPE xTaskCreate\050 pdTASK_CODE pvTaskCode const  signed  char  const  pcName unsigned  short  usStackDepth void  pvParameters unsigned  portBASE_TYPE uxPriority xTaskHandle  pxCreatedTask 051  Following is a code snippet which shows simple task creation using FreeRTOS  void  emptyTask\050 void  pvParameters\051  char  pcTaskName    Empty  Task  is running 134 n     To  display  which task  is  running for 050;;\051   Infinite  loop  USART_puts\050USART1 pcTaskName\051  For  printing  on  a  terminal software  through  USART1 Delay\050\051   int  main\050  void  051  init_USART1\0509600\051    initialize USART1    9600  baud USART_puts\050USART1   USART Initialization  complete  134 r 134 n  051  Task  Creation xTaskCreate\050emptyTask 050  signed  char  051   EmptyTask   240 NULL EmptyTaskPriority NULL\051  Execute  the  task vTaskStartScheduler\050\051   This  should never  return    Will  only  get  here  if  there  was insufficient  memory  to  create   the  idle  task  return  0   The output looks like the following  USART Initialization complete  Empty Task is running Empty Task is running Empty Task is running  Following is a code snippet which shows multitasking using FreeRTOS  void  tUplink 050 void  pvParameters\051    Variable  declarations  and  other initializations   const  char  pcTaskName  134r\134ntUlink task running\134r\134n uint8_t i=0      for 050  051   Print  out  the  name  of  this task    USART_puts\050USART1 pcTaskName\051   tUplink  code     void  tDownlink 050 void  pvParameters\051    Variable  declarations  and  other initializations   const  char  pcTaskName  134r\134ntDlink task running\134r\134n uint8_t i=0      for 050  051   Print  out  the  name  of  this task    USART_puts\050USART1 pcTaskName\051   tDownlink  code     int  main\050  void  051  init_USART1\0509600\051    initialize USART1    9600  baud USART_puts\050USART1   USART Initialization  complete  134 r 134 n  051  Task  Creation xTaskCreate\050 tUplink   tUplink   configMINIMAL_STACK_SIZE NULL 1 hUplink 051   Note  that  the priority  for  both  the  tasks  are set  the  same  050 whisi  is  1\051 xTaskCreate\050 tDownlink   tDownlink   configMINIMAL_STACK_SIZE NULL 1 hDownlink 051   This  means  that  on execution   both  tasks  will  be running  alternately  which  makes  it look  like  its  running simultaneously  Similarly   any  number  of  tasks  can be  set  the  same  priority  for multitasking  Execute  the  task vTaskStartScheduler\050\051    This  should never  return    Will  only  get  here  if  there  was insufficient  memory  to  create   the  idle  task  return  0   The output looks like the following  USART Initialization complete  tUlink task running 9 


tDlink task running tUlink task running tDlink task running tUlink task running tDlink task running  Following is a code snippet which shows dynamic priority scheduling using FreeRTOS An initial priority for the task is assigned by the uxPriority parameter of the xTaskCreate\050\051 API function The priority can be changed by using the vTaskPrioritySet\050\051 API function The maximum number of priorities can be set by de\002ning a compile time con\002guration constant in the con\002gMAX  PRIORITIES within FreeRTOSCon\002g.h header 002le Higher the con\002gMAX  PRIORITIES value the more RAM the kernel will consume  void  sampleTask1\050 void  pvParameters\051  const  char  pcTaskName    sampleTask1 is  running 134 n   unsigned  portBASE_TYPE uxPriority uxPriority  uxTaskPriorityGet\050NULL\051 for 050;;\051  Delay\050\051 USART_puts\050USART1 pcTaskName\051 USART_puts\050USART1   About  to raise  the  sampleTask2 priority 134 n  051 vTaskPrioritySet\050xTask2Handle 050uxPriority+1\051\051   void  sampleTask2\050 void  pvParameters\051  const  char  pcTaskName    sampleTask2 is  running 134 n   unsigned  portBASE_TYPE uxPriority uxPriority  uxTaskPriorityGet\050NULL\051 for 050;;\051  Delay\050\051 USART_puts\050USART1 pcTaskName\051 USART_puts\050USART1   About  to lower  the  sampleTask2 priority 134 n  051 vTaskPrioritySet\050NULL 050uxPriority-2\051\051   int  main\050  void  051  init_USART1\0509600\051    initialize USART1    9600  baud USART_puts\050USART1   USART Initialization  complete  134 r 134 n  051  Task  Creation xTaskCreate\050sampleTask1 050 signed  char  051  sampleTask1   240 NULL sampleTask1Priority NULL\051 xTaskCreate\050sampleTask2 050 signed  char  051  sampleTask2   240 NULL sampleTask2Priority xTask2Handle\051  Execute  the  task vTaskStartScheduler\050\051    This  should never  return    Will  only  get  here  if  there  was insufficient  memory  to  create   the  idle  task  return  0   The output looks like the following  USART Initialization complete  sampleTask1 is running About to raise the sampleTask2 priority sampleTask2 is running About to lower the sampleTask2 priority sampleTask1 is running About to raise the sampleTask2 priority sampleTask2 is running About to lower the sampleTask2 priority  Following is a code snippet which shows task periodicity using FreeRTOS  void  emptyTask\050 void  pvParameters\051  char  pcTaskName    Empty  Task  is running 134 n     To  display  which task  is  running for 050;;\051  USART_puts\050USART1 pcTaskName\051  For  printing  on  a  terminal software  through  USART1 Delay\050\051   void  periodicTask 050 void  pvParameters\051  const  char  pcTaskName    Periodic Task  is  running 134 n   portTickType xLastWakeTime xLastWakeTime  xTaskGetTickCount\050\051  Lets  say  the  mode  of  execution  is  as per  the  number  of  executions   that is   after  a  said  number  of executions  the  periodic  task  will execute x  050number_of_executions  y\051  number_of_executions 3  The  code  can  also  be  modified  to execute  a  periodic  task  after  a said  time  rather  than  the  number of  executions for 050;;\051  Delay\050\051 USART_puts\050USART1 pcTaskName 051 vTaskDelayUntil\050 xLastWakeTime 050x/portTICK_RATE_MS\051\051 Delay\050\051   int  main\050  void  051  init_USART1\0509600\051    initialize USART1    9600  baud USART_puts\050USART1   USART Initialization  complete  134 r 134 n  051  Task  Creation xTaskCreate\050emptyTask 050  signed  char  051   EmptyTask   240 NULL 1 NULL\051 10 


xTaskCreate\050periodicTask 050 signed  char  051  PeriodicTask   240 NULL 2 NULL\051   Note  that  the periodic  task  has  a  higher priority  Execute  the  task vTaskStartScheduler\050\051    This  should never  return    Will  only  get  here  if  there  was insufficient  memory  to  create   the  idle  task  return  0   The output looks like the following  USART Initialization complete  Empty Task is running Empty Task is running Empty Task is running Periodic Task is running Empty Task is running Empty Task is running Empty Task is running Periodic Task is running Empty Task is running  It is worth mentioning that as a subset of the not running state the aperiodic tasks are in the blocked state that is these tasks are waiting for an event to occur and the periodic update tasks are in the ready state that is they are in the not running state but are ready to run Software Test Logging Each module should have a minimum of two testing logs on 002le after completion Due to the nature of software development and debugging 050code compile test repeat etc\051 the testing logs will act as a debugging completed log which shows that the software is completed and ready to be integrated into the system Full software system tests will only begin once initial versions of modules are completed and the full system can be assembled as a functional software package The system test will attempt to check every possible system state and execution path This will ensure that the individual modules do not cause functionality problems with each other or that there are multiple modules attempting to use the same resource at the same time Error Checking Error checking in the hardware can help to eliminate additional software However commercial-off-the-shelf 050COTS\051 products that utilize hardware solutions are cost prohibitive for this project A single processor board for both satellites is utilized because of the higher power requirements of a multiprocessor plan Onboard error checking systems are adequate for our need Software redundant storage system has been designed and tested for the computers The system consists of a read write and validate module that implements a threecopy data storage system to 002x any errors that may occur during storage This system has been found to be error free and functions properly on a Compact Flash memory device 7 C ONCLUSION  S COPE FOR F UTURE The overall system architecture and requirements of the subsystems is accomplished by the open-source real-time operating system 050FreeRTOS\051 which supports various types of peripheral interfaces telemetry storage and data processing FreeRTOS was chosen for the project after performing several comparison and feasibility studies which have been discussed in the earlier sections The only drawback of FreeRTOS is that tasks are designed to enter in in\002nite loops Satellite function tasks should not be in in\002nite loop The tasks should function in the speci\002ed conditions without going into in\002nite loops To overcome this issue implementation of special techniques to avoid in\002nite loops is required Currently we are working on implementation of certain techniques described in to avoid in\002nite loops This would help to modify the existing FreeRTOS code for STUDSAT-2 Results Figure 6 shows the image data received from the hardware setup shown 002gure 5 Camera is interfaced with STM32 and commanded to take picture using UHF communication module The image stored is sent via 2.4 GHz ISL module The hex values received for the ISL module is converted to JPEG Image format to display in PC and this experiment carried out to prove the concept of transmitting image from one satellite to other satellite via ISL The results shows the decoded beacon signal received from the overall satellite subsystems interface as seen in 002gure 5 The data is received by NASTRAC 050Nitte Amateur Satellite Tracking Center\051 using MiXW 050a software TNC program\051 A CKNOWLEDGMENTS The authors sincerely thank Dr M Annadurai Chairmen SRC for Small Satellite ISRO and Shri Amereshwar Knened Project Director Small Satellite Project and all the scientists across various centers of ISRO and ISRO Satellite Centre 050ISAC\051 for their motivation and having provided the authors with all the technical and non-technical support The authors extend their sincere gratitude to Dr Jharna Majumdar Prof CSE and Dean 050R&D\051 of the Nitte Meenakshi Institute of Technology the Chief Project Coordinator of the Project STUDSAT for guiding the STUDSAT Team and playing a key role in initiating the Project STUDSAT-2 The authors render special thanks to Mr Loganathan M Director Space Program Nitte Meenakshi Institute of Technology for his support and guidance The authors are grateful to Visvesvaraya Technological University 050VTU\051 Belgaum for their Monetary support The authors thank the Management of Nitte Meenakshi Institute of Technology the lead college of the STUDSAT project for their wholehearted support for the project The authors thank Prof N.R Shetty Visionary Advisor Nitte Meenakshi Institute of Technology and Dr H.C Nagaraj Principal NMIT for providing excellent infrastructure in the college for the execution of the project and the encouragement given to the team The authors thank the Principals and the managements of the 6 consortium colleges for their support The authors also thank Richard Barry the author of FreeRTOS and Real Time Engineers Ltd for technical support 11 


Figure 5  Complete hardware test setup Figure 6  Image Received from the interface Figure 7  Beacon Received from UHF Beacon Board 12 


R EFERENCES   Caitlyn M Cooke Implementation of a Real-Time Operating System on a small Satellite Platform in Space Grant Undergraduate Research Symposium Colorado Space Grant Consortium Boulder CO 80309   Nishchay Mhatre Mohit Karve Gautam Akiwate Shravan Aras Mr Sanjeev Krishnan Varad Deshmukh Rahul Bedarkar A MODULAR GENERIC LOW-COST ON-BOARD COMPUTER SYSTEM FOR NANO/PICO SATELLITE APPLICATIONS 62nd International Astronautical Congress 2011 vol.,no.,pp IAC-11,E2,3,5,x10570 2011   Shancao Niu Jing Zhang Bin Wang Xiaodong Fu 224Analysis and Implementation of Migrating Real-Time Embedded Operating System FreeRTOS Kernel Based on S3C44B0 Processor,\224 Information Science and Engineering 050ISISE\051 2012 International Symposium on  vol no pp.430,433 14-16 Dec 2012   Ra\002a Inam Jukka Mki-Turja Mikael Sjdin Moris Behnam Hard Real-time Support for Hierarchical Scheduling in FreeRTOS*,7th annual workshop on Operating Systems Platforms for Embedded Real-Time Applications 050OSPERT 11\051 p 51-60 Porto Portugal   Rahman M.S Atiquzzaman M Ivancic W Eddy W Stewart D 224Implementation of SCTP in an open source Real-Time Operating System,\224 Military Communications Conference 2008 MILCOM 2008 IEEE  vol no pp.1,7 16-19 Nov 2008   Sarma T.C Srinivas C.V 224Design and Implementation of High Bit Rate Satellite Image Data Ingest and Processing System,\224 Signal Processing Communications and Networking 2007 ICSCN 07 International Conference on  vol no pp.149,152 22-24 Feb 2007   Sethu Selvi S Iyer N.R Sandeep G.S.P 224A facile approach to GPS navigation in unmanned ground vehicles,\224 Advances in Technology and Engineering 050ICATE\051 2013 International Conference on  vol no pp.1,6 23-25 Jan 2013   DTUsat On Board Computer 050OBC\051 System DTUsat http://etd.dtu.dk/thesis/200728/imm5238.pdf   Open source Real time Operating Systems for the STM32 and Cortex m3 MCu's https://sites.google.com/site/stm32discovery/stm32resources-and-links/open-source-real-time-operatingsystems-for-the-stm32-and-cortex-m3-mpus   Why Use FreeRTOS http://www.freertos.org/FAQWhat.html#WhyUseRTOS   FreeRTOS FAQ Memory Usage Boot Times  Context Switch Times http://www.freertos.org/FAQMem.html   FreeRTOS License Details http://www.freertos.org/a00114.html   A NEW DESIGN APPROACH OF SOFTWARE ARCHITECTURE FOR AN AUTONOMOUS OBSERVATION SATELLITE Jkrorne Gout Sara Fleury LAASCNRS   Command and Data Handling Subsystem Design for the Ionospheric Observation Nanosatellite Formation 050IONF\051 John D Jensen Utah State University Dr Charles M Swenson 050Advisor\051 Utah State University   USU Software Document AOE   Ion-F Software Architecture AOE   Super Simple Tasker 050SST\051 by Micro Samek and Robert Word in Embedded System Design 2006 B IOGRAPHY  Bheema Rajulu working as Research Scholar for Student Small Satellite Project Project STUDSAT-2 received a B.E in Electical and Electronic Engineering from Nitte Meenakshi Institute of Technology under Visweswaraya Technological University Belgaum India in July 2011 He was the core team member of the Project-STUDSAT-1 India's 002rst Pico satellite which was successfully 003own into the orbit on July 12th 2010 by PSLV Now he is leading Project STUDSAT-2 India's 002rst Twin Satellite Mission aiming to prove Inter-Satellite Communication He is the Co-author of several papers out of which one has won the ESSTA 050Emerging Scenarios in Space Technology\224\051 Best paper Award Sankar Dasiga has obtained his Bachelors Degree in ECE from Bangalore University in 1984 and Masters Degree in Electronics and Instrumentation from REC Warangal in 1988 He has 22Years experience in Embedded Systems and Semiconductor Industry His industry experience includes working in Macmet Siemens Philips Wipro CISCO and NXP He is currently working as a Professor in Department of ECE Nitte Meenakshi Institute of Technology Bangalore from 2010 He is a Deputy Project Co-ordinator for Project STUDSAT-2 Naveen Rajaraman Iyer is a 002nal year undergraduate student pursuing Bachelor of Engineering in Instrumentation Technology in M S Ramaiah Institute of Technology Bangalore India He is a robotics enthusiast who has worked on a variety of projects conducted workshops on robotics and has also represented his institute in one of the worlds most prestigious robotics competitions 050IGVC 2012\051 Additionally he has coauthored a paper titled A facile approach to GPS navigation in unmanned ground vehicles which was published in an IEEE conference International Conference on Advances in Technology and Engineering 050ICATE 2013\051 He is currently working on research projects in Centre for Cryogenic Technology 050CCT\051 and Department of Electronic Systems Engineering 050DESE\051 Indian Institute of Science 050IISc\051 Bangalore India 13 


  14    7  Op t i c a l  De p t h  p e a k r so l  p ro f i l e  f o r M a rs Y e a rs 2 6  t h ro u g h  2 7   2 0 0 3    2005   c om pr i s e d of  v i e  ME R  c a m e r a  d a t a  a n d  s c a l e d  T E S  a n d  T H E MI S  z o n a l l y av e r age d i nf r ar e d dat a  i n t he  I nSi ght  l at i t ude  band  2S t o 5N    Th i s  i s  a  r e l a t i v e l y  q u i e s c e n t  y e a r   w i t h  r e g i o n a l  s t o r m s   c e n t e r e d  n e a r  s o l s  1 5 0   5 2 0   a n d  6 7 0      Fi g   A  8  Op t i c a l  De p t h  ak r so l  p ro f i l e  f o r M a rs Y e a rs 2 7  t h ro u g h  2 8   2 0 0 5    2007   c om pr i s e d of  v i s i bl e fr e q u e n c y  ME R  c a m e r a  d a t a  a n d  s c a l e d  T H E MI S  z o n a l l y av e r age d i nf r ar e d dat a  i n t he  I nSi ght  l at i t ude  band  2S t o 5N    T hi s  i s  a qui e s c e nt  y e ar   w i t h r e gi onal  s t or m s   t he  2 007 m aj or  s t or m  ar i s e s  af t e r  I nSi ght  E O M     Fi g   A  9  Op t i c a l  De p t h  p e a k r so l  p ro f i l e  f o r M a rs Y e a rs 2 8  t h ro u g h  2 9   2 0 0 7    2009   c om pr i s e d of  v i s i bl e fr e q u e n c y  ME R  c a m e r a  d a t a  a n d  s c a l e d  T H E MI S  z o n a l l y av e r age d i nf r ar e d dat a  i n t he  I nSi ght  l at i t ude  b and  2S t o 5N     I nSi ght  la n d s  a b o u t 5 0  s o ls  b e fo r e  th e  2 0 0 7  s to r m  r is e s  u p   ta u  r e m a in s  a b o v e  2  u n til s o l 1 2 0   A fte r  th a t th e  y e a r  is  r e la tiv e ly  qui e s c e nt   w i t h t w o r e gi onal  s t or m s   c e nt e r e d on s ol  525 and s ol  680                                                0     1 2 3 1 4      5      6 7     7  8   9  1    1         1           1  2 3  4                                              0  1   2 3   4 5 6  7 8 5  9 0 7             6       8      1  2 3  4                                                0     1 2 3 1 4      5      6 7     7   8  9   1         1 9         1  2 3  4     


  15    10  Op t i c a l  De p t h  ak r so l  p ro f i l e  f o r M a rs Y e a rs 2 9  t h ro u g h  3 0   2 0 0 9    2011   c om pr i s e d of  v i s i bl e fr e q u e n c y  ME R  c a m e r a  d a t a   T h i s  i s  a  r e l a t i v e l y  q u i e s c e n t  y e a r   w i t h  t w o  n o t a b l e   b r i e f  r e g i o n a l  s t o r m s   c e n t e r e d  n e a r  s o l s  1 0  a n d  170  t hat  c oul d c hal l e nge  de pl oy m e nt  an d e ar l y  ope r at i ons     Fi g   A  11  Op t i c a l  De p t h  p e a k r so l  p ro f i l e  f o r M a rs Y e a rs 2 9  t h ro u g h  3 0   2 0 0 9      co m p r i s ed  o f  vi s i b l e fr e q u e n c y  ME R   O p p o r t u n i t y  r o v e r  o n l y   c a m e r a  d a t a   T h i s  i s  a  r e m a r k a b l y  q u i e s c e n t  y e a r   w i t h  n o  o c c u r r e n c e s  o f  o p t i c a l  d e p t h  ri si n g  a b o v e  1  5                                               0     1 2 3 4 5      6      7 8     8    9   1 5   1 5 5 2      1 4          1  2 3  4                                                0     1 2 3 1 4      5      6 7     7   8 9      2 4 4       1 4        1  2 3  4     


  16  A X   Fi g u r e  A 1   Il l u st r a t i o n  o f  ART E M I S  P 1   a  k  a   T H E M I S  B   lu n a r a p p r o a c h  2  e   in E a r t h C e n t e r e d I n e r t ia l E C I  J 2 0 0 0  c o o r d i n a te s   T h e  g r i d  r e p r e s e n ts  th e  e q u a to r i a l  p l a n e    A 2    ART E M I S  P 1  l u n a r  f l y b y   1   k fl i p   a n d  l u n a r  fl y b y   2  i n  E C I  c o o r d i n a te s   


  17   A 3   ART E M I S  P 1  lu n a r  f ly b y   1  b a c k fl i p   a n d  l u n a r  fl y b y   2  i n  m o r e  d e ta i l  i n  E C I  c o o r d i n a te s    we r e  e x e c u t e d  t o  a c c u r a t e l y  t a r g e t  t h e  B pl a ne s  o f  t he  dua l  l una r  f l y by  s c e na r i o   T r a c ki ng  c o v e r a g e  dur i ng  t he  ba c k fl i p  w a s  c r i ti c a l  to  m o n i to r  th e  s e c o n d  fl y b y   W i th  th e  s p a c e c r a ft a n te n n a  m o u n te d  o n  th e  s o u th e r n  s i d e  o f th e  sp a c e c r a f t  b o d y   c o mmu n i c a t i o n s  c o v e r a g e w i t h  t h e D S N  3 4 m s t a t i o n s  h a d  t o  b e  ca ref u l l y  a n a l y zed     Fi g u r e  A 4   ART E M I S  P 1  f i n a l  E a r t h  o r b i t s   t r a n s lu n a r t r a j e c t o r y w it h t w o d e e p  sp a c e  e x c u r si o n s   Ea r t h  f l y b y   an d  f i r s t  r e vol u t i on  of  E M  L 2  lib r a t io n   or b i t  i n  E C I  co o rd i n a t es   


  18   A 5   ART E M I S  P 1  E M  L 2  an d  E M  L 1  lib r a t io n p o in t o r b it s w it h E M L 2  to  E M  L 1  tr a n s fe r   in s e r t io n i nt o  a  r e tr o g r a d e  l u n a r  o r b i t i n  r o ta ti n g  co o rd i n a t es V ie w o f t h e E a r t h Mo o n  p l a n e  f r o m  a b o v e    A 6    ART E M I S  P 1  c o m p l e t e  tr a je c to r y  fr o m  E a r th  d e p a r tu r e  to  l u n a r  o r b i ts  in E C I c o o r d in a t e s   


  19   A 7    ART E M I S  P 2   a  k  a   T H E M I S  C  E a r t h  d e p a r t u r e  w i t h   la s t E a r t h o r b it a n d lu n a r f ly b y in E C I  co o rd i n a t es   Th e  t a b l e s  o n  ft  in d ic a t e a v a ila b ilit y o f  co m m u n i ca t i o n s  l i n k s  w i t h  s u p p o rt i n g  n et w o rk  a s s et s    Fi g u r e  A 8       lib r a t io n p o in t o b it s in  EC I  c o o r d i n a t e s   


  20   A 9   ART E M I S  P 2  c o m p l e t e  t r a j e c t o r y  f r o m  E a r t h  d e p a r t u r e  t o  l u n a r  o r b i t s  in E C I c o o r d in a t e s   A 1 S u m m a r y o f  ART E M I S  M a n e u v e r s  a n d  F u e l  B u d g e t s   Mi s s i o n  P h a s e  Pr o b e  P1   P2    Mi s s i o n  P h a s e   e  at  B eg i n  o f  e  g  l  Ex p e n d e d  b y  En d  o f  Ph a s e  g  To t a l    Ac h i e v e d   e  s    Mi s s i o n  P h a s e   e  at  B eg i n  o f  e  g  l  Ex p e n d e d  b y  En d  o f  Ph a s e  g  To t a l    Ac h i e v e d   e  s  Ea r t h  O r b i t    5    2    4   553  514  436    27  1    SD M  1   2  140  135  477  s r  1    8  039  433  567    3  TC M  2   5  005  372  672  Li b r a t i o n  Po i n t  t    36  606  351  688    31  633  188  486  Lu n a r  O r b i t  1    2  I  PR M  1   5    4  255  427  629    2  LTI  TC M  1  I  PR M  1   5  M  1  4  1    2  445  394  215  Cu r r e n t  S t a t u s    8 28        051        T  At t i t u d e  P r e c e s s i o n  M a n e u v e r  M  Or b i t  R a i s e  M a n e u v e r   M  De e p  S p a c e  M a n e u v e r  M  Pe r i o d  R e d u c t i o n  M a n e u v e r   FTM  Fl y b y  Ta r g e t i n g  M a n e u v e r  M   De f l e c t i o n  M a n e u v e r   I  Lu n a r  O r b i t  I n s e r t i o n  M a n e u v e r  M  St a t i o n k e e p i n g  M a n e u v e r   LTI  Lu n a r  Tr a n s f e r  I n i t i a t i o n  M a n e u v e r  N  Sp i n  R a t e  C o n t r o l  M a n e u v e r   M  Or b i t  M a i n t e n a n c e  M a n e u v e r  M  Tr a j e c t o r y  C o r r e c t i o n  M a n e u v e r   












































     2 8    b 4      1 8             1 2     1  8 2  


1 9    8      2 1       1     2    8    2 3\f        


     8 D 4 9  F  \b 1 8 #J 9 1     2 1   2 #-@ 1   2 9  E 1   1   2 9      6  


    8  8   1  D 1         1 F  \b0         2 D    F  \b 1 8  9  


  1 9  1   E 1  2 9     1 1 F  \b       1    18   F   1    1 #-$+  \b  2 2  


1 D     1 #-$+.B- 0/:% .0             9 1      18    1 6     1 2  1  1  


1   6      2    1 2 E 8 D 1      1 2   1   1 #-4  #-@E     2  1  1  1       


 8     1          2 F    6   F  2   8    2 C<CC/C N\bO 5      


CD    b$44NO F P Q 6   2 b$$$ ,=\b\bA  A N,O 2 C C  b$$4N  92 2   f  9-\b$$4 B N?O  !-    91  2 1 HH111-18-N+O    -1 :3%   2     0-4 


     b N4O 2   2- \f  C b$@$ \b# >\b\b$3\b$N@O  f :.% 9 /9 \f    1  6  f 2  4   A254 


Advantages of Our M ethod Advantages of Our M ethod Exploit the memory v ertical data format utilizes slidin g windows to g form a much larger database to analyze  Flexibility in Choosing what to choose  Choosing what to choose to build the rules Computational and memory efficiency We have a team working only on this aspect 45 Associative IDS for NextGen Frameworks Dr S Dua LA Tech 45 


Preliminary Results Intra transaction Relations Data rate simulator NH-134 Mb HOP PATH update \(Y/N Inference 11.5 Y Y 2 0.120 N N      Y   n 0.345 N NH134 Y/N   Inf 1 0.150 N N 2 0 120 Y N Inter transaction Relations 2 0  120 Y N       5 5.55 0.456 Y Relations  n 0.345 N N Nmap on DMRL nmap.org 


Anticipated Outcome Anticipated Outcome Develop algorithm capable of learning from a given heterogeneous diverse Develop algorithm capable of learning from a given heterogeneous diverse data ff Dynamic algorithmic f ramework designed to shi f t modalities and sampling rates based on complex logic Flexibility of integration into the Snort intrusion detection system 47 Associative IDS for NextGen Frameworks Dr S Dua LA Tech 47 


References References Aircraft Cockpit Image courtesy USAF http://www.faa.gov htt p   www.faa g ov  air traffic  technolo gy  p g  _ gy  Acharya R Dua S Du X Sree V Chua C K Automated Diagnosis of Glaucoma Using Texture and Higher Order Spectra Features To appear in IEEE Transactions on Information Technology in Biomedicine  Du X Dua S 2011 Cancer Prognosis Using Support Vector Regression in Imaging  Modality World Journal of Clinical Oncology 2  1   44 49 Du X Dua S 2010 Salient Frame Extraction Using Support Vector Regression and Motion Features pp 5 Proc of the National Aerospace and Electronics Conference July 14 16 2010 D M P D S 2010 Di i i ti Ft d Cl ifi ti Mthd f D essaue r  M  P  D ua S  2010  Di scr i m i na ti ve F ea t ures an d Cl ass ifi ca ti on M e th o d s f or Accurate Classification 1st ed vol 7704 pp 14 Bellingham WA Proceedings of SPIE Dessauer M P Dua S 2010 Low Resolution Vehicle Tracking using Dense and Reduced Local Gradient Features Maps 1st ed vol 7694 pp 8 Bellingham WA Proceedings of SPIE SPIE 


Acknowledgements Acknowledgements Fundin g A g encies  US 4 1 Million direct fundin g g g 4 g LA BoR NIH NSF AFRL AFOSR and NASA Research Team Samuel Kasimalla Brandy McKnight Dr Pradeep Chowriappa Connor Johnson Vasanth Nair Mihir Chowriappa  Connor Johnson  Vasanth Nair  Mihir Karnik Mohit Jain and Swadheen Songmen Associative IDS for NextGen Frameworks Dr S Dua LA Tech 49 All the respective Logos belong to their owners 


Rf d Rdi R e f erence d R ea di ngs Copyright of cover pages held by respective publishers 


Thank You Questions Thank You  Questions Dr Sumeet Dua E mail sdua@latech.edu Web http://dmrl.latech.edu Associative IDS for NextGen Frameworks Frameworks Dr S Dua LA Tech 51 Image Source roadtrafficsigns.com 


