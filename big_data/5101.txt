Favorable Support Threshold Recomm endation for Multidimensional Association Mining Using User Preference Ontology   1 Chin-Ang Wu Wen-Yang Lin Chang-Long Jiang Chuan-Chun Wu Dept. of Information Management, I-Shou University, Taiwan cwu@csu.edu.tw  Dept. of Comp. Sci and Info. Eng National University of Kaohsiung, Taiwan wylin@nuk.edu.tw  Dept. of Elec. Eng National University of Kaohsiung, Taiwan m0955107@mail.nuk edu.tw  D ept. of Information Management, I-Shou University, Taiwan  miswucc@isu.edu.tw         
 1  Chin-Ang Wu is also a lecturer in Cheng Shiu University, Niaosong Township, Kaohsiung County 833 hsiung County  Abstract  The classical algorithms for mining association rule require the user to specify a support threshold to determine if an itemset is frequent or not Unfortunately, the setting of support threshold is subjective without clear standard and has great influence on the mining results. In this paper we propose an intelligent minimum support suggestion framework with the help of the user preference ontology. The user preference ontology maintains the 
frequently used mining queries extracted from the mining log. The system finds the most similar queries to the user’s mining intension, aggregates them and obtains the favorable support range for the user to refer. In this paper we describe briefly the construction of the user preference ontology and focus on the methodology for query similarity comparison  1. Introduction  The Apriori algorithm for mining frequent itemset of association rules is first introduced by Agrawal and Srikant [2 an in f l u e n tia l alg o rit h m t h at i s b a sed  
on the property that non-empty subsets of the frequent itemsets are also frequent. Whether an itemset is frequent depends on the user-specified minimum support  In general, an association mining finds the frequent itemsets that satisfy the minimum support first then the association rules are derived based on the frequent itemsets that satisfy the minimum confidence Suppose that A and B are sets of items and A    B    
An association rule has the form A   B with support and confidence. The support is the possibility of the transactions that contain the itemset A  B which is P  A  B The confidence is the possibility of the transactions that contain A also contain B which is P  B  A  The challenge is that the settings of minimum support and minimum confidence have no clear-cut standard. Different minimum support settings will 
discover different numbers of frequent itemsets, hence influence the rules mined. If the minimum support is set too low, numerous frequent itemsets will be discovered, thus also numerous rules are generated and leave the users challenges in order to recognize the real useful knowledge. If minimum support is set too high very few frequent itemsets can be found, thus some useful knowledge might be left out. Thus reasonable settings of minimum support and minimum confidence are important in order to find useful knowledge. Users 
try the settings of minimum support and minimum confidence to and fro to converge on a favorable set when they are satisfied. Fayya des c ribed data mining as a repetitive sequence of searching processes which implies that the efficiency of mining process depends much on the proper setting of a mining query which includes the settings of the minimum support and confidence When the association rule mining is first introduced it implied typically on the retailer’s basket data, that is it focuses on the purchase analysis which discovers the 
associations among solely the product dimension Later in   11 m u l t i d i m ens i on al as s o ciation mining from data cube or multi-dimensional data warehouse has been proposed. Multiple dimensions are allowed and the users can specify more precisely the target data for mining via setting the data granularity with optional filtering condition. Thus the query for a multidimensional association mining is robotic that the rules mined tend to be closer to what the user wants 


Yet, it is a challenge for an inexperienced user to formulate an effective query, especially on the settings of reasonable thresholds In this paper, we propose an intelligent suggestion framework of the minimum support with the help of the user preference ontology when the user is formulating a query for multidimensional association mining. The user preference ontology maintains the frequently used queries extracted from the mining log It presents assorted users mining experiences hence benefits the users, especially inexperienced ones, by providing them with useful information. Through computing the similarity between the user-specified query and the queries in the user preference ontology the system finds the most similar queries to the user’s mining intension. Support thresholds from those queries are being computed and the favorable minimum support can be derived and provided to the user. Originally the setting of the support threshold in the association rule mining is subject to the individual user’s subjectivity. In this way, the user’s subjectivity shall include extra knowledge of abundant other users experiences. The try-and-error process can be improved while formulating a mining query. The mining results are more effective and easier to be closer to the user’s need The rest of this paper is organized as follows Section 2 introduces the multidimensional association mining. Section 3 presents the architecture of the user preference ontology. Section 4 describes the proposed intelligent suggestion framework. Section 5 summarizes related work and section 6 provides the conclusions and future work  2. Multidimensional association mining  A multidimensional association rule is an association rule that involves one or more dimensions attributes\he mining meta-pattern of a multidimensional association mining query is defined as follows MP  t G  t M    wc  ms  mc  where t G  t M  wc  ms and mc are components of a query described below t G   the set of transaction ID \(data granularity t M   the set of interested mining attributes wc   the optional “where” condition\(s ms  the minimum support and mc  the minimum confidence Following is an example query of a multidimensional association mining t M  ProdName  Age t G  CustID  Date  wc  Country  Japan  ms 65 mc 86 It shows the user’s mining intension that he/she wants to learn the associations between customers of different age levels and daily purchase of products in Japan with minimum support 65% and minimum confidence 86%. The target mining data set is as shown in Table 1. The transaction IDs t G CustID, Date and the interested mining attributes t M Age ProdName Table 1  The target mining data set tid t G  t M   CustID Date Age *ProdName 1 C001 2009-02-01 20-30 B, E 2 C002 2009-02-03 40-50 A, B, C,E 3 C002 2009-02-10 40-50 A,C,D 4 C003 2009-02-05 30-40 B,C,E 5 C004 2009-02-09 40-50 B,E 6 C004 2009-02-15 40-50 A, E A: IBM60GB   B: IBM TP  C: RAM 512MB D: Ink Cartridge   E: Hard Disk  A multidimensional association mining is initiated by the user’s formulation of a query. The action of the mining engine is triggered when it receives the submission of the user defined query.  When the user receives the mining results, he or she determines subjectively whether the results are acceptable. If it is negative, the mining query will be adjusted and the process will be re-run again until the user achieves the acceptable results  3. The user preference ontology  In the proposed framework, we assume that for each successful mining process by assorted users especially by the experienced users, the mining query is recorded in the mining log. The mining log is too tedious to be utilized in the mechanism we are proposing. It will increase the calculation cost while trying to retrieve queries from the user preference ontology that are similar to the user specified one Thus distillation for representative queries from the mining log is necessary. The user preference ontology contains the representatives of frequently used queries in the mining log. The query distillation process involves the following steps as shown in Figure 1 1 Find the query patterns of the meta rule format t G   t M  which indicates that the t G and t M tend to be used together under certain threshold 2 Cluster the close related query patterns in step 1 and derive a surrogate query patterns 


3 Find the “where” attribute patterns of the meta rule format t G  t M   wca from the mining log with the surrogate query patterns in step 2. This indicates that the surrogate query patterns and the attributes of the “where” condition wca ely to be used together, under certain threshold 4. Cluster the “where” conditions in the mining log that have the “where” attribute patterns in step 3 and derive a surrogate “where” conditions 5. Generate the surrogate queries by combining the surrogate query patterns and the surrogate “where condition wc  6. Calculate the minimum support and minimum confidence for the surrogate queries by averaging the original queries that are related to the surrogate queries  Figure 1. The distillation process  The rules discovered by a surrogate query will include the rules that are discovered by the queries covered by the surrogate query. The surrogate queries are structured and stored in the user preference ontology as shown in Figure 2. The attribute index provides fast access to t G and t M by connecting the attribute to the corresponding t G and t M A surrogate query is presented as a path in the user preference ontology. The user preference ontology is structured with hierarchies in t G   t M   wc It collects surrogate queries that are relatively used often before. The user preference ontology will be re-built automatically while the mining log is growing over a certain threshold  4. The intelligent recommendation of minimum support  This section presents the intelligent suggestion mechanism for minimum support. First we will introduce the mining system framework and second the details of the mechanism for the minimum support suggestion will be provided   Figure 2. The user preference ontology  4.1. The intelligent suggestion framework  The intelligent suggestion framework with the user preference ontology is shown in Figure 3. A multidimensional association mining of data warehouse starts from the query formulation by a user The mining engine runs the query the user has defined and the resulting rules are sent back to the users. The successful queries are maintained in the mining log The user preference ontology is generated from the mining log by performing the distillation process as described in the previous section. The minimum support suggestion module is responsible for providing a favorable minimum support range to the user interactively while a user is formulating a query. It computes the similarities between the user specified query and the surrogate queries in the user preference ontology and recommends a reasonable support range to the users  Figure 3. The intelligent suggestion framework for minimum support  4.2. Minimum support suggestion   Minimum Support Suggestion Query Formulation Data Cube Data Mar t Data Mart Data Warehouse    User  Mining Engine   User Preference Ontology  Mining Log   Distillation   CustID Date Gender Education ProdName Salesman  60  90 CustID Date ProdName Gender attribute index Education r   CustID Category  City=”Taipei 60  85  45  80 ProdName Education     t G   t M   wc   ms,mc   User Preference Ontolo gy  Mining Log     Surrogate query Support & confidence calculation Query pattern where” attribute pattern Surrogate query pattern Surrogate “where condition where” condition  


Our strategy for suggesting a reasonable range of minimum support is taking the experience value from the user preference ontology, which contains the experienced users’ intelligence. The similarity checking of two queries is essential in order to obtain the favorable minimum support range from the user preference ontology. Specifically, the t G  t M  and/or wc  formulated by a user, will be checked against the queries in the user preference ontology for similarity The matching degree of t G  t M and wc are computed in different ways respectively and aggregated thereafter to obtain the degree of query similarity. Then the range of minimum support to suggest to the users is derived from the top N queries that are similar to the t G  t M and/or wc of the user formulated query. The computational details are described in the following  4.2.1. Matching  transaction ID t G  Let G a be the t G  formulated by users and G b be the t G  from the user preference ontology, respectively. Suppose G a   g a 1  g a 2  g ai and G b  g b 1  g b 2  g bj  dist  g ax d dist  g bw enote the domain cardinality of attribute g ax  and g bw  respectively, where 1   x    i 1   w    j The computation of the matching weight T G of each g ax and g bw in G a  and G b is defined as follows T G  g ax  g bw   otherwise g dist g dist g dist g dist ip relationsh  al hierarchic  no  have  g   g  If bw ax bw ax bw ax     max     min 0  The similarity of G a and G b  match G  G a G b  computed as follows  match G  G a G b  b a i x j w bw ax G G G g g T   11     For example, let G a   Cust_ID, Date  G b  Cust_ID, Month  Date and Month has hierarchical relationship   dist  Cust_ID  dist  Date and dist  Month 12 Thus match G  Cust_ID, Date  Cust_ID, Month  computed as follows 2 2  12  365 max  12  365 min 0 0  450  450 max  450  450 min      4.2.2. Matching intereste d mining attributes t M  Let M a and M b be the t M formulated by a user and t M  from the user preference ontology, respectively Suppose M a   m a 1  m a 2  m ai and M b  m b 1  m b 2  m bj The similarity of M a  and M b  is defined as follows match M  M a  M b  b a b a M M M M    For example, let M a   ProdName, Education and M b  ProdName, City, Age  Then match M  ProdName, Education  ProdName City, Age  4 1                  Age City odName Pr Education odName Pr Age City odName Pr Education odName Pr  4.2.3. Matching “where” condition wc  The format of a “where” condition is Where  conditional expression      conditional expression    conditional expression  The format of a conditional expression is  Attribute Name  Op  Value  where Op         is the relational operator For example Where  Country  Italy  Sex  Female  It confines the data to Italian female. From the content of the “where” condition, two similarity matches have to be considered. First is the attribute matching and second is the value matching 1  Attribute matching The attribute match of a where” condition is computed in the same way as the matching of the interested mining attribute. Suppose WA a is the set of attribute\(s\in the wc formulated by users and WA b is the set of attribute\(s\ the wc from the user preference ontology respectively. Suppose WA a   wa a 1  wa a 2  wa ai and WA b  wa b 1  wa b 2  wa bj The similarity of WA a and WA b is defined as follows match WA  WA a  WA b  b a b a WA WA WA WA    2  Value matching Let W a be the wc formulated by the user and W b be the wc from the user preference ontology. Suppose W a   wc a 1  wc a 2  wc ai and W b   wc b 1  wc b 2  wc bj where wc ax  wa ax Op ax v ax and wc bz  wa bz Op bz v bz 1   x    i 1   z    j. wa ax  is the 


attribute Op ax  is the relational operator while v ax and v bz denote the value of the conditional expression  To compute V the matching degree of the values in conditional expressions, we consider the following cases case 1 wc ax  wc bz  V 1 case 2 wa ax    wa bz  V 0 case 3 wa ax  wa bz and Op a x   Op bz or v a x  v bz  V   CV  The computation of CV the complex conditional  value is defined as follows CV  wc ax  wc bz        0   ax wa dist  dist  wa ax otes the counts of distinct values within wa ax The numerator is the overlapping degree of the  values in the conditional expressions between wc ax  and wc bz    max bz bz ax ax v Op v Op      min bz bz ax ax v Op v Op   The values of and depend on the relational operators. The sequence of relational operators are not important, thus their cardinalities are as shown in Table 2  Table 2 shows all cases of and while wa ax  wa bz  Table 2. All cases of and  Op1  Op2        min v le v le      dist  wa ax ax v ge v ge   0 0     dist  wa ax 2 0    0 0    1   if v eq  v ge  0   if v e q  v  g e  0     v ge 1  if v ne  v ge  v g e if v ne  v g e  v ge     1   if v eq  v le  0   if v e q  v l e  0     v le  if v ne  v le  v l e 1   if v ne  v l e  0     v le  v  ge  if v le  v ge  0       otherwise 0 subscript notation of v   le  ge, = eq  ne  v with an notation in the subscript denotes the  value of a conditional expression that has the corresponding operator The matching degree of the conditional values is defined as follows match W  W a  W b        11 bz ax WA i x j z bz ax wa wa match wc wc V   For example, let W a  Age 60-70 W b  Age 20-30 Salary 50000 Suppose Age has 10 distinct range values. Then match W  W a  W b  5  0 0 4  0    4.2.4. Aggregating query similarity and suggesting the minimum support range Let Q a  Q b be the user defined query and the queries in the user preference ontolog respectively. Suppose the t G  t M and wc of Q a  and Q b are as follows Q a  t G  G a  t M  M a  wc  W a  Q b  t G  G b  t M  M b  wc  W b  The overall query similarity between Q a  Q b is defined as follows QSimilarity  Q a  Q b  match G  G a G b    match M  M a  M b    match W  W a  W b  Through the similarity comparison of these queries the top N similar queries from the user preference ontology are obtained. The final range of minimum support to be offered to the user is computed by the following steps 1 Sort supports of the top N queries 2. Average the smaller half of the N queries as the lower bound 3. Average the bigger half of the N queries as the upper bound 4 Validate the lower bound with the smallest possible value which is 1 n where n is the count of the transactions after grouping. If the lower bound is beyond the smallest possible value, the smallest possible value becomes the lower bound 5 Validate the upper bound with the largest possible value which is the maximum frequency among all the one-itemsets. If the upper bound is beyond the maximum possible support, the maximum possible support becomes the upper b ound The result will be the favorable range of minimum support that is closer to the user’s mining intention The system provides the information to the user interactively while he or she is formulating a query This helps the user adjust the support threshold toward 


obtaining better mining results. The support threshold setting is not all subjective since it also refers to the knowledge of assorted users mining experiences in the user preference ontology. The efficiency of try-anderror process can be improved while the user is formulating a mining query. The mining results are more effective and easier to get closer to the user’s need  4. Related work  Many studies have been devoted to association rule mining i n ce it w a s firs t i n trodu ced b y  Ag ra w a l et  al t h ei r propos al t h e u s er s peci f i ed m i n i m u m support was required to recognize the patterns as interesting. Many other researches on the interestingness measure are conducted. The major purpose is to provide the users with a better measurement for obtaining really useful knowledge. In  d 9 v a rieties of  m eas u r es h a v e been prov ided and discussed. Len collected m a n y  measures with their properties and using a multicriteria aid to suggest good measures that are suitable to the user specified requirements. On providing the users with a better measurement, Zhang  provided a polynomial strategy to map the userspecified fuzzy support threshold to an actual minimum support. Liu et al opos ed a f u zz y  matching technique incorporated with a set of userspecified patterns \(user feedback\elp the user identify those interesting ones. Our approach for providing a user with a favorable support threshold is through extra knowledge reside in the user preference ontology, which collects the information from previous user’s mining experience  5. Conclusions  To provide the user with a robotic support threshold setting for the Apriori algorithm used in multidimensional association mining, we propose in this paper an intelligent minimum support suggesting system framework that integrated with the user preference ontology. We describe the construction and utilization of the user preference ontology which maintains the frequently used queries in the mining log The methodology for query similarity comparison is presented in details. By using this methodology, the system finds the most similar queries in the user preference ontology to the user-specified query aggregates them and obtains the favorable support range for the user to refer. With our proposed method the setting of support threshold for Apriori algorithm is not all subjective but also includes extra knowledge from other users’ experiences. This improves the efficiency of user’s query formulation process and the result rules or the mining tend to be closer to user’s requirement  References  1  R. Agrawal, T. Imielinski, and A. Swami, “Mining association rules between sets of items in large databases,” in Proceedings of the ACM-SIGMOD International Conference on Management of Data pp 207-216, 1993 2  R. Agrawal and R. Srikant, “Fast algorithm for mining association rules”, in Proceedings of International Conference of Very Large Databases pp. 487-499 1994 3  U. Fayyad, P.S. Gregory, and S. Padhraic, “The KDD process for extracting useful knowledge from volumes of data Communications of the ACM Vol. 39, No. 11 pp. 27–34, 1996 4  J. Han and M. Kamber Data Mining  Concepts and Techniques   Morgan Kaufmann, 2001 5  J. Han, L.V.S. Lakshmanan, and R.T. Ng, “Constraintbased, multi-dimensional data mining IEEE Computer Vol. 32, No. 8, pp. 46-50, 1999 6  M. Kamber, J. Han, and J.Y. Chiang, “Metarule-guided mining of multidimensional association rules using data cubes,” in Proceedings of SIGKDD Conference on Knowledge Discovery and Data Mining pp. 207-210 1997 7  P. Lenca, P. Meyer, B. Vaillant, S. Lallich, “On selecting interestingness meas ures for association rules User oriented description and multiple criteria decision aid European Journal of Operational Research Vol 184, No. 2, pp. 610-626, 2008 8  B. Liu, W. Hsu, L.F. Mun, and H.Y. Lee, “Finding interesting patterns usin g user expectations IEEE Trans. Knowledge and Data Engineering Vol. 11, No 9, pp. 817-831, 1999 9  P. Tan, V. Kumar, and J. Srivastava, “Selecting the right interestingness measure for association patterns in Proceedings of ACM SIGKDD Conference on Knowledge Discovery and Data Mining pp. 32–41 2002 10  S. Zhang, X. Wu, C. Zhang, and J. Lu, “Computing the minimum-support for mining frequent patterns Knowledge and Information Systems Vol. 15, No. 2 pp. 233-257, 2008 11  H. Zhu, On-line Analytical Mining of Association Rules, Master Thesis, SIMON FRASER University 1998 


preMinsup Fig 3 Experimental results runtimes All experiments were run in a time-sharing environment in an 800 MHz machine The reported 336gures are based on the average of multiple runs Runtime includes CPU and I/Os it includes the time for both tree construction and frequent itemset mining steps We evaluated different aspects of the proposed algorithms which were implemented in C First we compared the performance of the three proposed algorithms using four different constraints one from each type of the above constraints Experimental results showed that the runtimes for both UF-streaming 100   150   200   250   10   20   30   40   50   60   70   80   90  Selectivity \(i.e., percentage of items selected CUF-streaming \(w=5 batches, each with 1M transactions Type IV constraint C4  Type II constraint C2                      Type III constraint C3                      Type I constraint C1                                 100   150   200   250   300   350   400   450   10   20   30   40   50   60   70   80   90  Selectivity \(i.e., percentage of items selected CUF-streaming \(w=50 batches, each with 1M transactions Type IV constraint C4  Type II constraint C2                      Type III constraint C3                      Type I constraint C1                                 50   55   60   65   70   75   80   85   90   0.002   0.003   0.004   0.005  preMinsup \(in percentage Runtime vs. existential probability & preMinsup Items take on an average number of existential probability values                      005 005    t t 327 327 005 items All 322extensions\323 of valid items were valid Due to the item ordering the algorithm stopped checking constraints whenever it detected the 336rst invalid items However for on the mining results For example using 0.8 C C C C C C C C C C w w C C w 0.9 preMinsup  90 of the mined constrained 322frequent\323 itemsets were truly frequent When and UF-streaming Asitexplored properties of these four constraints and pushed the constraints inside the mining process CUF-streaming required shorter runtimes than the other two algorithms As shown in Fig 3\(a the runtimes for handling all four types of constraints increased when the selectivity increased Among them a Runtime vs selectivity  a Type I constraint incurred the lowest runtime among the four types of constraints because CUF-streaming formed fewer 322extensions\323 as they consisted of only valid items Again due to the item ordering the algorithm stopped checking constraints whenever it detected the 336rst valid items Next we repeated the above experiment with a different the window size was low say 10 only a few small UF-trees were constructed and mined as the algorithm only 322extended\323 valid items and a shorter runtime 50 c Runtime vs  and the convertible monotonicity of  the monotonicity of  the convertible anti-monotonicity of 110 sec cf 160 sec in Fig 3\(a was required As another example for 5 batches when  the algorithm applied constraint checking on projected DBs for valid items as well as their 322extensions\323 because not all 322extensions\323 of valid items were valid  the algorithm 322extended\323  many bigger UF-trees were constructed and mined as the algorithm formed projected DBs for both valid as well as invalid domain items which took or having more batches in the sliding window had the bene\336ts of increasing the chance of not pruning relevant expected support information for truly frequent itemsets Moreover as shown in Fig 3\(c when increased fewer itemsets had expected support performed constraint checking as an intermediate step prior to storing the 322frequent\323 itemsets into the UF-stream structure In contrast CUF-streaming was more interesting as it runtimes depended on the type of constraints as well as the constraint selectivity Speci\336cally the algorithm explored the anti-monotonicity of a Type II constraint and a Type III constraint incurred the next two highest runtimes For  and thus shorter runtimes were required The 336gure also showed the effect of the distribution of item existential probability When items took on a few unique existential probability values the UF-tree b ecame smaller Thus times for both UF-tree construction and mining became shorter In addition we also measured the number of nodes in each UF-tree The experimental results showed that the total number of nodes in a UF-tree was no more than the total number of items with their existential probability in all transactions in the current batch of uncertain data stream Furthermore we measured the number of nodes in the UF-stream structure as well As UF-streaming   126 400 sec cf 230 sec in Fig 3\(a As all three algorithms are approximate algorithms we evaluated the effect of  95 of the mined constrained 322frequent\323 itemsets were truly frequent However lowering 5 b Runtime vs selectivity  were constant regardless of the constraint selectivity because these two algorithms did not explore property nor did they push the constraints inside the mining process Speci\336cally UF-streaming only valid preMinsup minsup preMinsup minsup preMinsup preMinsup preMinsup performed constraint checking as a postprocessing step whereas UF-streaming a Type IV constraint incurred the highest runtime because CUF-streaming 322extended\323 i.e formed projected DBs for both valid and invalid items performed constraint checking at a post-processing step the size of UF-stream was observed to be independent of the constraint selectivity In contrast as Items take on many different existential probability values  50 336xed-sized batches with each batch containing 0.1M transactions instead of using 5 336xed-sized batches with each batch containing 1M transactions With this setting each batch was smaller 0.1M vs 1M transactions Thus each batch required lower runtime e.g for constructing and mining UF-trees However the number of batches was higher 50 vs 5 batches than the previous setting This explains why the runtimes see Fig 3\(b took on a broader range than the previous experimental results For example when the selectivity of 1 2 3 4 4 2 3 2 3 1 2 4 w w 0   Runtime \(in seconds 0   Runtime \(in seconds 0   Runtime \(in seconds Items take on a few unique existential probability values                     50   50   0.001   


 ch 6 AAAI/MIT Press 2004  G  G r ahne L  V  S  L aks h m a nan and X  W ang 322E f 336 ci ent m i n i n g o f constrained correlated sets,\323 in ACM TKDD  Proc KDD 2009 Proc VLDB 1994 Proc KDD 2009 Proc IEEE ICDE 2008 Proc PAKDD 2007 Proc VLDB 2008 Proc IEEE ICDE 2000 Proc VLDB 2008 Proc IEEE ICDE 2009 Proc IEEE ICDM 2006 Proc IEEE ICDE 2002 Proc IEEE ICDE 2001 Proc IEEE ICDE 2008 preMinsup minsup Proc U  09 Proc PAKDD 2008 Proc ACM SIGMOD 2008 Data Mining and Knowledge Discovery Proc ACM SIGMOD 1993 Proc SSTD 2005 Proc ACM SIGMOD 2000 Proc ACM SIGMOD 2009 Proc ACM SIGMOD 1998 Proc ACM SIGMOD 2008 2 pp 18\32026 June 2005 12 C G ia n n e lla e t a l 322 M in in g f r e q u e n t p a tte r n s in d a ta s tr e a m s a t m u ltip le time granularities,\323 in 4 pp 337\320389 Dec 2003  C  K  S  L eung 322F r e quent i t e m s et m i ni ng w i t h cons t r ai nt s  323 i n 127 1 batch containing the entire dataset Then we compared our algorithms with UF-growth 22 b y as s i g n i n g t o each i t em i n e v er y t r an s act i o n in a dataset an existential probability of 1 i.e all items are de\336nitely present in the dataset and 005 005 Encyclopedia of Database Systems queries on uncertain streams,\323 in 34 28 34  pp 29\32037 2 R  A gr aw al et al   322M i n i n g a s s o ci at i o n r ul es bet w een s e t s of i t e ms i n large databases,\323 in  pp 207\320216 3 R  A gr aw al and R  S r i kant  322 F a s t al gor i t h ms f o r m i n i n g a s s o ci at i o n rules,\323 in  pp 487\320499 4 R  J  B ayar do J r   R  A g r a w a l  and D  G unopul os  322 C ons t r ai nt b as ed rule mining in large dense databases,\323 2\3203 pp 217\320240 July 2000 5 T  B e r n e c k e r e t a l 322 P r o b a b ilis tic f r e q u e n t ite m s e t m in in g in u n c e r ta in databases,\323 in  pp 119\320127 6 R  C h e n g e t a l 322 P r o b a b ilis tic v e r i\336 e r s  e v a lu a tin g c o n s tr a in e d n e a r e s tneighbor queries over uncertain data,\323 in  pp 47\32058 8 G  C or m ode and M  H adj i e l e f t her i ou 322F i ndi ng f r e quent i t e m s i n dat a streams,\323 in  pp 1530\3201541 9 G  C o r m o d e e t a l 322 F in d in g h ie r a r c h ic a l h e a v y h itte r s in s tr e a m in g d a ta  323  pp 400\320417  M M G a ber  A  B  Z a s l a v s k y  and S  K r i s hnas w am y  322Mi n i n g d at a streams a review,\323  pp 512\320521  J  H a n J  P e i  and Y  Y i n  322 Mi ni ng f r e quent pat t e r n s w i t hout candi dat e generation,\323 in  pp 1\32012 15 J  H u a n g e t a l 322 M a y B M S  a p r o b a b ilis tic d a ta b a s e m a n a g e m e n t s y s tem,\323 in  pp 1071\3201074  C  J i n e t a l   322 S l i di ngw i ndo w t op pp 301\320312  L  V  S  L a ks hm anan C  K  S  L e ung and R  T  N g 322E f 336 ci ent dynam i c mining of constrained frequent sets,\323  pp 9\320 18  C  K  S  L eung and B  H ao 322 Mi ni ng of f r e quent i t e m s et s f r o m s t r eam s of uncertain data,\323 in  pp 1663\3201670  C  K  S  L eung and Q  I  K han 322D S T r ee a t r e e s t r uct u r e f o r t he m i ni ng of frequent sets from data streams,\323 in  pp 928\320 933  C  K  S  L eung M A  F  Mat e o and D  A  B r a j czuk 322 A t r eebas e d approach for frequent pattern mining from uncertain data,\323 in  pp 13\320 24  J  P e i  J  H a n and L  V  S  L aks h m a nan 322Mi n i n g f r e quent i t e m s et s w i t h convertible constraints,\323 in  pp 433\320442  C  R 253 e et al 322Event queries on correlated probabilistic streams,\323 in  pp 715\320728 27 A  D  S a r m a  M  Th e o b a ld  a n d J  W id o m  322 Ex p lo itin g lin e a g e f o r con\336dence computation in uncertain and probabilistic databases,\323 in  pp 1023\3201032  K  Y i et al   322S m a l l s ynops es f o r g r oupby quer y ver i 336 cat i o n o n outsourced data streams,\323  pp 819\320832 322frequent\323 itemsets from uncertain data streams In terms of ef\336ciency the experimental results showed that UF-streaming was slightly faster because it did not perform any constraint checking whereas our three proposed algorithms performed the extra constraint checking step Among them CUF-streaming only performed constraint checking on some 322frequent\323 itemsets and the other two performed constraint checking on all 322frequent\323 itemsets However in terms of the mining results we observed that all four algorithms returned the same collection of 322frequent\323 itemsets This illustrated that our proposed algorithms could be used for mining unconstrained frequent itemsets from uncertain data streams Moreover it is important to note that while the UF-streaming is con\336ned to 336nding 322frequent\323 itemsets satisfying constraints with 100 selectivity our algorithms are capable of 336nding 322frequent\323 itemsets that satisfy constraints having lower selectivity Along this direction we set and CUF-streaming both pushed the constraint early the corresponding size of UF-stream was proportional to the selectivity of constraints Finally we evaluated the functionality and applicability of our proposed algorithms We again used four different constraints and we also set the constraint selectivity be 100 i.e all items are selected Then we compared our three proposed algorithms with UF-streaming  w hi c h w a s designed to mine 1 UF-streaming 4 article 2 Jan 2008 10 X  D a i e t a l 322 P r o b a b ilis tic s p a tia l q u e r ie s o n e x is te n tia lly u n c e r ta in data,\323 in 3 article 15 Aug 2009 29 Q  Zh a n g  F  Li a n d K  Y i 322 F in d in g f r e q u e n t ite m s in p r o b a b ilis tic data,\323 in  pp 1179\3201183 Springer 2009  C  K  S  L eung and D  A  B r a j czuk 322E f 336 ci ent a l gor i t h m s f o r m i n i n g constrained frequent patterns from uncertain data,\323 in Data Mining Next Generation Challenges and Future Directions w  UF-streaming unconstrained and CUF-streaming\321 which integrate i mining of uncertain data ii constrained mining and iii mining of data streams These algorithms effectively mine constrained frequent itemsets from uncertain data streams A CKNOWLEDGMENT This project is partially sponsored by Natural Sciences and Engineering Research Council of Canada NSERC and the University of Manitoba in the form of research grants R EFERENCES 1 C  C  A ggar w al et al   322F r e quent pat t e r n m i ni ng w i t h uncer t a i n dat a  323 i n  pp 653\320661  C  K  S  L eung R  T  N g  a nd H  Manni l a  322 O S S M  a s e gm ent a t i o n approach to optimize frequency counting,\323 in SIGMOD Record ACM TODS ACM TODS k 4   Again we observed that all four algorithms returned the same collection of frequent itemsets This illustrated that our proposed algorithms could also be used for mining unconstrained frequent itemsets from static uncertain datasets VII C ONCLUSIONS Frequent itemsets generally serve as building blocks for various patterns in many real-life applications Most of the existing algorithms 336nd unconstrained frequent itemsets from traditional static transaction databases consisting of precise data However there are situations in which ones are uncertain about the contents of transactions There are also situations in which users are only interested in some subsets of all the mined frequent itemsets Furthermore a 337ood of data can be easily produced in many situations To deal with all these situations we proposed three tree-based algorithms\321 namely UF-streaming   pp 973\320982 7 C  K  C hui  B  K ao a nd E  H ung 322Mi n i n g f r e quent i t e m s et s f r o m uncertain data,\323 in     pp 583\320592  R  T  N g et al   322E xpl or at or y m i n i n g a nd pr uni ng opt i m i zat i ons of constrained associations rules,\323 in  


              


   


                        





