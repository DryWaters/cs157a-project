Improvement and Realization of Association Rules Mining Algorithm Based on FP-tree Ye Gao, Sizhen Zhu School of Computer Science, Xian University of Science and Technology  Xian, China E-mail: woaibaobei996@163.com  AbstractTraditional FP-growth algorithm adopts FP-tree structure to express association of item sets in transaction sets and finds all of frequent item sets recursively. The algorithm increases the time complexity and the space complexity in calculating conditional pattern base, because it backtracks the same paths many times. As to the above defects, a FPIFM algorithm is presented in the paper. The algorithm stores all of precursor nodes of every node in the node domain, then the sub condition pattern base of every node are calculated. Finally sub-condition pattern base are combined and ergodic nodes are released. Experimental result shows that FPIFM algorithm is superior to the traditional FP-growth algorithm Keywords-data mining; association rules; frequent pattern tree conditional pattern base I. INTRODUCTION Data mining mines the knowledge which is implicit, useful and unknown from a mass of original data. It provides theoretical basis for market planning, enterprise management and enterprise decision[1]. The process of data mining is the process of finding knowledge. Association rule mining serves as an important subject in the data mining domain[2]. At present, most algorithms[3,4,5] are the series of Apriori algorithm and its improvement. They have the same defects as the Apriori algorithm, it needs multiple-scan the database repeatedly and produces plenty of candidate sets Jiawei Han, Jian Pei and Yiwen Yin etc presented FP-growth algorithm to overcome the defects of Apriori algorithm. It compresses every record in the database into a FP-tree by the technique of dividing and rule to keep the relationship among the items; then, frequent item sets are mined by creating conditional pattern base. The algorithm needs only scan the database twice and does not produce candidate frequent item sets. Moreover, it calculates frequent patterns by the frequent degree of every item sets, according to the sequence from low to high. However, The algorithm scans the same path many times when calculating frequent patterns 


namely, after calculating frequent patterns of an item set, it will backtrack ergodic paths again when calculating frequent patterns of its parent node, and this will lead the unnecessary overhead. Meanwhile, the algorithm occupies plenty of memory \(It is relevant to the depth and width of FP-tree Therefore, it will not effectively work, if the number of frequent 1-itemset is large and the mapping information of all items in the FP-tree cannot be stored in the memory[5]. Minyu Shi etc presented frequent pattern mining algorithm based on FS-tree, the space complexity of algorithm is obviously reduced through splitting FP-tree into many FS-trees[6]. Wei Shi etc presented FPRSG algorithm, the storage mode and creating mode of conditional pattern base in the FP-growth algorithm are changed, through introduce data structure FP reference tree/table, and the frequent pattern mining problem is solved efficiently[7]. Yuejin Yan etc presented the maximum frequent set mining FPMFI algorithm, using the mechanism based on superset checked by projection, the time of superset check is reduced effectively, at the same time, the scale of FP subtrees is compressed effectively by delete the redundant information of FP subtrees, so it reduces the ergodic overhead[8 In order to solve the problem that it travels the same path twice that is mentioned in the previous paper, and the problem that the FP-growth occupies plenty of memory. A domain can be increased on every node of the FP-tree to store its parent node, to avoid scanning the same path many times when we calculate its frequent pattern; meanwhile, it adjusts tree structure and deletes the node to reduce FP-tree when a leaf node is calculated to optimize II. BASIC CONCEPTS AND FP-TREE STRUCTURE A. Relative definition and properties Let { }miiiiI ,...,,, 321=  serves as a set of all items and if a set is X, IX ?  and Xk = are true, X is defined as the k-itemset. DB acts as the set of all transactions \(that is a database the given database DB, the support of X is defined as the number of transactions that include X in the database, denoted by XSup . A user-define minimum support number is less than equal to |DB|, denoted by min_sup Definition 1 Given the transaction database DB and the minimum support min_sup, for a item set IX ? , if 


supmin_ XSup  is true, X is defined as a frequent item set in the DB. Meanwhile, if Xk =  is true, X is defined as the frequent k-itemset in the DB, denoted by kL Definition 2 Conditional pattern base of the item set composed of lots of parts which are obtained by the path that includes the item. Every part is defined as a sub-conditional pattern base B. Frequent Pattern Tree FP-tree and FP-growth 1 consists of a root node\(the value is null sub-trees\(as children transaction in the DB is compressed in the FP-tree by scanning 978-1-4244- 7618-3 /10/$26.00 2010 IEEE DB twice, a transaction is presented as the path from each leaf nodes to root nodes in the DB. Because the overlap of some anterior item sets, the DB can be compressed by share the superposed item sets, and the first appeared position of each item is preserved in a Head table. Every node in trees represents an item, the node preserves relationship among items. Each node consists of 5 domains: the node frequency m_sFreq, the node name m_sItem, the parent node m_pParent the right brother node m_pRight_bro, the left child node m_pLeft_child, the same name node m_pNext. Parent node brother nodes and childern nodes can be found through these domains The creation process of FP-tree is as follows: At first scanning the DB, find out the items which are satisfied with the support count, and combine them to frequent 1-itemset L. Then put them into the Head list in descending order based on the support count. Following, create the original FP-tree which sets NULL as its root node. And then, the header table is created in order to travel the original FP-tree more convenient, a frequent item is represented by each line in the item head list and the corresponding pointer is set to point the node in the FP-tree. Then travel the DB for the last time, and adjust the sequence of items in the DB according to the Head list Creating a transaction branch for each transaction whose sequence of items is adjusted. If the branch can share the path then do it ,and record the number of sharing transaction on each node[9]. As the table 1 shows, TID represents the number of transaction in the DB and Item ID represents its content. The created FP-tree is shown in Fig. 1 


TABLE I.  TRANSACTION RECORD TID Item ID TID Item ID T1 a,b,e T6 a,c T2 b,d T7 c T3 a,c T8 b,d T4 c T9 a,b,e,f T5 a,b,d,f T10 c   Figure 1.   FP-tree 2 frequent item sets, which does not produce candidate sets. It adopts divide and conquer strategy as follows: DB offering frequent item sets are compressed in a FP-tree, and reserve correlative information among item sets, then the DB which is compressed is divided into a group of conditional DB, it is linked to a frequent item and is mined respectively C. FPIFMAlgorithm FPIFM algorithm adds two domains in every node in FP-tree: m_sFrearea and m_sFlag. The former is used for storing sub-frequent pattern base and the latter is used for judging whether the node is processed. Travel the path that the node exists in when seeking the sub-frequent pattern base of a certain node, then the sub-frequent pattern base of each node in the path is obtained, and they are stored in the m_sFrearea Next time, when the sub-frequent models of parent node are calculated, traveling is avoided, so it can avoid the repeated ergodic on the same path. Meanwhile, when the sub-frequent pattern bases of every nodes are calculated with the algorithm nodes have been processed and without left and right children are released The pseudocode of the FPIFM algorithm is as follows Input: present FP-tree; Head table that the frequent degree is in descending order Output: frequent item sets of every ID 1 order of the support which is from low to high 2 3 m_sFlag== 0 4 obtained and they are stored in the m_sFrearea 5 


6 7 8 9 10 11 the support sum of sub-frequent pattern base min_sup 12 13 14 15 16 III. ANALYSIS OF PROPERTY AND COMPARISION OF EXPERIMENTAL RESULT The FPIFM algorithm have two advantages compared with FP-growth algorithm 1 the FP-tree and stores the result in the m_sFrearea after one ergodic. It is different from original algorithm that is to solve by the sequence of the head table. This avoids repeated ergodic on the same path. Here, the main workload of algorithm includes judging m_sFlag and creating the conditional pattern base. Its time complexity is O\(n more ,the time consumed is shorter 2 the algorithm , when the conditional pattern base of a certain node is obtained, judging whether children are exist, if the node has children, jump out the loop, and calculate the next node Else, free the node. It decreases the consumption of memory gradually, which become more obvious with the algorithm operating in the rear. Here, the main workload of the algorithm is judging whether it has the children node, its time complexity is O\(n In order to test property of algorithm, we select loose data set T10I4D100K as testing data, FP-growth serves as object of comparison. Experimental environment is as following Intel\(R TM memory. Operating System is windows 7. Code is realize in Visual C++6.0    


       PLQBVXS\b\f UX QW LP H V\f    Figure 2.  Running time of two algorithms Figure2 displays running time of the FPIFM and FP-growth algorithms under the different minimum support \(divided into 4 degrees: 15%, 10%, 8%, 6 XSup  equals to 6 the FP-growth algorithm spends 42s, and the FPIMF algorithm spends 32s which is 10s less than FP-growth. This is because FPIMF adopts the method that ergodic the FP-tree once and avoid repeated scanning on the same path in the FP-growth while it structures the conditional pattern base, so it improves the efficiency of the algorithm. However, when the XSup increases, FPIFM spends less time than FP-growth, but the effect is not obvious, that is mainly because conditional pattern base become shorter with the XSup  increasing Analysis on the memory consumption, the memory use rate of FPIMF is lower than FP-growth significantly, because of the strategy that deletes FP-tree D.  Conclusion The FPIFM algorithm contraposes the defects of FP-growth: traveling the same path repeatedly and failing to release  nodes processed in time. It uses a strategy that ergodic the path only once, and the conditional patterns of all nodes are obtained by adding m_sFrearea and m_sFlag node domains. Meanwhile, it adopts the strategy of deleting FP-tree and releases the processed nodes to reduce the memory which the algorithm occupies, so it improves the efficiency of the algorithm. In the end, it is proved that the FPIFM algorithm has 


very obvious superiority by algorithm analysis and experimental comparison REFERENCES 1] Jiawei Han, Micheline Kamber. Concept and technique of Data Mining Beijing: machine industry press, 2005 2] Agrawal R, Imielinshi T, Swami A. Mining association rules between sets of items in large database. In: Proceedings of ACM SIGMOD Conference on Management of Data, Washton, DC, 1993, pp. 207-216 3] Han J, Pei J, Yin Y. Mining Frequent Patterns Without Candidate Generation. In Proc. 2000 ACM-SIGMOD Int. Conf. Management of Data \(SIGMOD'00 4] Burdick D, Calimlim M, Gehrke J. MAFIA: A Maximal Frequent itemset Algorithm for Transactional Databases. In Intel Conf. on Data Engineering, 2001-04 5] Chen A. L, Tang C J, Tao H C, et al.An improved algorithm based on maximum clique and FP- tree for mining association rules [J]. Journal of Software, 2004, 15 \( 8 6] Minyu Shi, Huimin Ma, Shuke Tang. Algor ithm of fr equent patterns mining based on FS- tree[J], Computer Engineering and Applications 2008, 44\(30 7] Wei Shi,Yan Fu. Algorithm for Frequent Pattern Mining Based on FP Reference-Tree/ List[J]. Science of Computer. 2006Vol. 33, No: 16. pp 206-209 8] Yuejin Yan,Zhoujun Li,Huowang Chen. Efficiently Mining of Maximal Frequent item Sets Based on FP-Tree[J]. Journal of Software. 2005 Vol 16, No. 2, pp. 215-222 9] Yun Yang, Yanxia Luo. Improved algorithm based on FP-Growth Computer Engineering and Design. 2010, 31 \(7 


data set maintained at the UCI Machine Learning Repository The shuttle dataset has 43,500 transactions and contains 9 attributes all of which are numerical. The first one being time The last column is the class which has been coded as follows 1 Rad Flow 2 Fpv Close 3 Fpv Open 4 High 5 Bypass 6 Bpv Close 7 Bpv Open For shuttle data set, each dimension is divided into 6 minimum support is 0.008, and the result is as follows 1    84,124] /\\ [-345.5, 4152.3] /\\ [3, 79.5] /\\ [-4l.5 166.2] /\\ [-45, 59.32] ? Rad Flow support = 75.87 3   609.42,500.44] /\\ [-9.71,79.43] /\\ [-2273.14 1582.15] /\\ [17.57,39.43] /\\ [3,92] /\\ [-0.57, 88.29] ? High support = 14.03 2   1240.3] /\\ [20, 124] /\\ [-44.51, 59.32] /\\ [-45, 59.32 Bypass support = 10.08 To estimate MQAR's efficiency, each dimension in shuttle data set is divided into 7. When the data size changes \(1 ten thousands, 2 ten thousands, 3 ten thousands, 4 ten thousands, 5 ten thousands, 6 ten thousands records Figure 2. From the figure, we can conclude that the execution times change in linear with the size of database MQAR           TransactionNo\(lOOOO Figure 2 Runtime of MQAR The advantages of MQAR are shown as follows: \(1 DGFP-tree compress the database effectively and don' t need to scan database many times;\(2 


information of each grid units and save the time of calculating the support information of each grid;\(3 candidate units \(4 which makes the finding of neighbor units effective v. CONCLUSIONS In this paper, we introduce a novel algorithm called MQAR, which employs DGFP-tree to mine quantitative association rules by searching dense subspaces in DGFP-tree The algorithm avoids the conflict between minimum support problem and minimum confidence problem, and can find the 178 interesting quantitative association rules which may be missed by previous algorithms. Experimental result shows that MQAR can efficiently find quantitative association rules REFERENCES I] Han J, Kambr M. Data Mining: Concepts and Techniques. Beijing Higher Education Press, 2001 pp. 229-230 2] Agrawal R, Imielinski T, Swami A, "Mining association rules between set of items in large databases," In Proceedings of the 1993 ACM SIGMOD Conference on Management of Data, Washington, D C 1 993,pp. 207-216 3] Han J, Pei J, Yin Y, "Mining Frequent patterns without candidate generation"ln: Proceedings of the 2000 ACM SOIGMOD International Conference on Management of Data, Dallas, 2000,pp.I-12 4] Srikant R, Agrawal R. "Mining quantitative association rules in large relational tables," In: Proceedings of the ACM SIGMOD Conference on Management of Data, Montreal, Canada, 1996,pp. 1-12 5] Aumann Y , Lindell Y. "A statistical theory for quantitative association rules," Journal of Intelligent Information Systems 20 \(3 255-283 6] Webb G. "Discovering association with numeric variables," In Proceedings of the 7th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, 200l,pp.383-388 7] Fukuda T, Morimoto Y, Morishita S et aI. "Data mining with optimized two-dimensional association rules," ACM Transactions on Database Systems \(TO DS 2 8] Agrawal R, Gehrke J,Gunopulos D,et aI. "Automatic subspace clustering of high dimensional data," In: Proceedings of the 1998 ACM SIGMOD Conference on Management of Data, Seattle, A, I 998,pp. 94-105 9] YANG Junrui, Zhang Tiejun, LIU Nanyan. "An integrated updating Algorithm for mining Maximal Frequent Patterns," In: Chinese Control and Decision Conference, 2008,pp. 2312-2316 


Mining Algorithm in Mobile Intelligent Systems. Journal of Southwest University \(Natural Science Edition 1 99,2009 


Figure 5. Definition of Metric Discretization Levels 36 performance has no performance regression and can be included in the historical dataset for analysis of future tests V. CASE STUDY We conducted three case studies on two open source ecommerce applications and a large enterprise system. In each case study, we wanted to verify that our approach can reduce the amount of data a performance analyst must analyze and the subjectivity involved, by automatically reporting a list of potential problematic metrics We manually injected faults into the test scenarios of the two open source e-commerce systems. This allows us to assess our approach using the precision \(eqn. 4 eqn. 5 evaluation metrics 4 5 High precision and recall mean that our approach can accurately detect most performance problems. Performance analysts can reduce the effort required for an analysis by investigating the flagged metrics. Note that false positives are metrics that are incorrectly flagged \(they do not lead to a performance regression For the large enterprise system, we use the existing performance metrics collected by the Performance Engineering team as the input of our technique. We seek to compare the results generated by our approach against the performance analysts observations. In cases where our approach flagged more metrics than the performance analysts noted, we verify the additional problematic metrics with the organizations Performance Engineering team to determine if the metrics truly represent performance regressions. Since we do not know the actual number of performance problems, we can only provide the precision of our approach We use the average precision and recall to show the overall performance of our approach across all test scenarios for each system. Average precision and recall combine the precision eqn. 6 eqn. 7 t1,t2 , ,tk performance of our approach in each case study   


 6    7  Research Prototype: Our research prototype is implemented in Java and uses the Weka package [20] to perform various data-mining operations. The graphs in the performance analysis reports are generated with R [4 A. Studied System: Dell DVD Store System description: The Dell DVD Store \(DS2 application [3] is an open source simulation of an online ecommerce website. It is designed for benchmarking Dell hardware. DS2 includes basic e-commerce functionalities such as user registrations, user login, product search and purchase DS2 consists of a back-end database component, a Web application component, and driver programs. DS2 has multiple distributions to support different languages such as PHP, JSP or ASP and databases such as MySQL, Microsoft SQL server and Oracle. The load driver can be configured to deliver different mixes of workload. For example, we can specify the average number of searches and items per purchase In this case study, we have chosen to use the JSP distribution and a MySQL database. The JSP code runs in a Tomcat container. Our load consists of a mix of use cases including user registration, product search, and purchases Data collection: We collected 19 metrics as summarized in table 2. The data is discretized into 2-minute intervals. We ran 4 one-hour performance regression tests. The same load is used in tests A, B, and C. Our performance signatures are derived from Test A during which normal performance is assumed. For tests C and D, we manually inject faults into either the JSP code or the load driver settings to simulate implementation defects and performance analysts mistakes. The types of faults we injected are commonly used in other studies [13]. Prior to the case study, we derive a list of metrics that are expected to show performance problems, as summarized in Table 3. The Recall of our approach is calculated based on the metrics listed in Table 3  


TABLE II.     SUMMARY OF METRICS COLLECTED FOR DS2 Load Generator Processor Time Orders/minute Network Bytes Sent/sec Network Bytes Received/Sec Tomcat Processor Time Threads Virtual Bytes Private Bytes MySQL Processor Time Private Bytes Bytes written to disk/sec Context Switches/sec Page Reads/sec Page Writes/sec Committed Bytes In Use Disk Reads/sec Disk Writes/sec I/O Reads Bytes/sec I/O Writes Bytes/sec TABLE I.   AVERAGE PRECISION AND RECALL of Test Scenarios Duration per Test hours Size of Data per Test Avg Precision Avg Recall DS2 4 1 360 KB 100% 52 JPetStore 2 0.5 92 KB 75% 67 Enterprise System 13 8 4.5 MB 93% N/A  


37  Analysis of Test B: The goal of this experiment is to show that the rules generated by our approach are stable under normal system operation. Since Test B shares the same configuration and same load as Test A, ideally our approach should not flag any metric Our prototype did not report any problematic metric in Test B. The output is as expected, since Test B uses the same configuration as Test A and no performance bug was injected Analysis of Test C: In test C, we injected a databaserelated bug to simulate the effect of an implementation error This bug affects the product browsing logic in DS2. Every time a customer performs a search on the website, the same query will be repeated numerous times, causing extra workload for the backend database and Tomcat server Our approach flagged a database related metric \(# Disk Reads/sec Threads and # private bytes signaling that the metrics are violated during the whole test The result agrees with the nature of the injected fault: each browsing action generates additional queries to the database As a result, an increase in database transaction leads to an increase of # Disk Reads/sec. When the result of the query returns, the application server uses additional memory to extract the results. Furthermore, since each request would take longer to complete due to the extra queries, more threads are created in the Tomcat server to handle the otherwise normal workload. Since 3 out of 6 expected problematic metrics are detected, the precision and recall of our approach in Test C are 100% and 50% respectively Analysis of Test D: We injected a configuration bug into the load driver to simulate that a wrongly configured workload is delivered to the system. This type of fault can either be caused by a malfunctioning load generator or by a performance analyst when preparing for a performance regression test [14 In the case where a faulty load is used to test a new version of the system, the assessment derived by the performance analyst may not depict the actual performance of the system under test In Test D, we double the visitor arrival rate in the load driver. Furthermore, each visitor is set to perform additional browsing for each purchase. Figure 7 below shows the violated 


metrics reported by our prototype. The result is consistent with the nature of the fault. Additional threads and memory are required in the Tomcat server to handle the increased demand Furthermore, the additional browsing and purchases lead to an increase in the number of database reads and writes. The extra demand on the database leads to additional CPU utilization Because of the extra connections made to the database caused by the increased number of visitors, we would expect the # context switch metric in the database to be high throughout the test. To investigate the reason for the low severity of a databases context switch rate \(0.03 examined the rules flagged the # context switch metric. We found that the premises of most rules that flagged the context switch metric also contain other metrics that were flagged with high severity. Consequently, the premises of the rules that flagged # context switch are seldom satisfied resulting in the low detection rates of the # context switch metrics. Since 7 out of 13 expected metrics are detected, the precision and recall of our approach in this test are 100% and 54% respectively B. Studied System: JPetStore System description: JPetStore [1] is a larger and more complex e-commerce application than DS2. JPetStore is a reimplementation of Sun's original J2EE Pet Store and shares the same functionality as DS2. Since JPetStore does not ship with a load generator, we use a web testing tool to record and replay a scenario of a user logging in and browsing items on the site Data collection: In this case study, we have conducted two one-hour performance regression tests \(A and B performance signatures are extracted from Test A during which caches are enabled. Test B is injected with a configuration bug in MySQL. Unlike the DS2 case study where the configuration bug is injected in the load generator, the bug used in Test B simulates a performance analysts mistake to accidentally disable all caching features in the MySQL database. Because of the nature of the fault, we expect the following metrics of the database machine to be affected: CPU utilization, # threads context switches, # private bytes, and # I/O read and write bytes/sec Analysis of Test B: Our approach detected a decrease in memory footprint \(# private bytes sec in the database, and increase in # disk reads/sec and 


threads in the database. The I/O metrics include reading and writing data to network, file, and device. These observations align with the injected fault: Since the caching feature is turned off in the database, less memory is used during the execution of the test. In exchange, the database needs to read from the disk for every query submitted. The extra workload in the database  Figure 7. Performance Regression Report for DS2 Test 4 \(Increased Load TABLE III.     SUMMARY OF INJECTED FAULTS FOR DS2 Test Fault Injected Expected Problematic metric A No fault N/A B No fault No problem should be observed C Busy loop injected in the code responsible for displaying  item search results Increase in # I/O reads bytes /sec, and disk read/sec in database Increase in # threads, # private and virtual bytes, and CPU utilization in the Tomcat server D Heavier load applied to simulate error in load test configuration Increase in CPU utilization, # threads private and virtual bytes in the Tomcat server Increase in database CPU utilization disk reads, writes and I/O read bytes per second, and # context switches Increase in # orders/minute and network activities in the load generator 38 translates to a delay between when a query is received and the result is sent back, leading to a decrease in # IO write bytes/sec to the network Instead of an increase, an unexpected drop of the # threads was detected in the database. Upon verifying with the raw data for both tests, we found that the thread count in Test A \(with cache without cache 


and 21 respectively. Upon inspecting the data manually, we do not find that the decrease of one in thread count constitutes a performance problem and this is therefore a false positive Finally, throughout the test, there is no significant degradation in the average response time. Since 4 out of 6 expected problems are detected, our performance regression report has a precision of 75% and recall of 67 C. Studied System: A Large Enterprise System System description: Our third case study is conducted on a large distributed enterprise system. This system is designed to support thousands of concurrent requests. Thus, performance of this system is a top priority for the organization. For each build of the software, performance analysts must conduct a series of performance regression tests to uncover performance regressions and to file bug reports accordingly. Each test is run with the same workload, and usually spans from a few hours to a few days. After the test, a performance analyst will upload the metric data to an internal website to generate a time series plot for each metric. This internal site also serves the purpose of storing the test data for future reference. Performance analysts then manually evaluate each plot to uncover performance issues. To ensure correctness, a reviewer must sign off the performance analysts analysis before the test can be concluded. Unfortunately, we are bounded by a NonDisclosure Agreement and cannot give more details about the commercial system Data collection: In this case study, we selected thirteen 8hour performance regression tests from the organizations performance regression testing repository. These tests were conducted for a minor maintenance release of the software. The same workload was applied to all tests. In each test, over 2000 metrics were collected Out of the pool of 13 tests, 10 tests have received a pass status from the performance analysts and are used to derive performance signatures. We evaluated the performance of the 3 remaining tests \(A, B and C the performance analysts assessment \(summarized in table 4 In the following sections, we will discuss our analysis on each target test \(A, B and C Analysis of Test A: Using the history of 10 tests, our approach flagged all throughput and arrival rate metrics in the system. The rules produced in the report imply that throughputs 


and arrival rates should fall under the same range. For example component A and B should have similar request rate and throughput. However, our report indicates that half of the arrival rates and throughput metrics are high, while the other half is low. Our approach has successfully uncovered problems associated with the arrival rate and throughput in Test A that were not mentioned in the performance analysts report. We have verified our finding with a performance analyst. Our performance regression report has a precision of 100 Analysis of Test B: Our approach flagged two arrival rate metrics, two job queue metrics \(each represents one subprocess consulting with the time-series plots for each flagged metric as well as the historic range, we found that the # database scans/sec metric has three spikes during the test. These spikes are likely the cause of the rule violations. Upon discussing with a performance analyst, we find that the spikes are caused by the systems periodic maintenance and do not constitute a performance problem. Therefore, the # database scans/sec metric is a false positive. Our performance analysis report has a precision of 80 Analysis of Test C: Our approach did not flag any rule violation for this test. Upon inspection of the historical value for the metrics noted by the performance analyst, we notice that the increase of # database transactions/sec observed in Test C actually falls within the metric historical value range. Upon discussing with the Performance Engineering team, we conclude that the increase does not represent a performance problem. In this test, we show that our approach of using a historical dataset of prior tests is more resistant to fluctuations of metric values. Our approach achieves a precision of 100 The case studies show that our approach is able to detect problems in metrics when the faults are present in the systems Our approach detects problematic metrics with high precisions in all three case studies. In our case studies with the two open source systems, our approach is able to cover 50% and 67% of the expected problematic metrics VI. DISCUSSION AND FUTURE WORK A. Quantitive Techniques Although there are existing techniques [10, 11] to correlate anomalies with performance metrics by mining the raw performance data without discretization, these techniques 


usually assume the presence of Service Level Objectives \(SLO that can be used to determine precisely when an anomaly occurs. As a result, classifiers that predict the state of SLO can be induced from the raw performance data augmented with the SLO state information. Unfortunately, SLOs rarely exist during development. Furthermore, automated assignment of SLO states by analyzing metric deviations is also challenging as there could be phase shifts in the performance tests, e.g., the spikes do not align. These limitations prevent us from using classifier based techniques to detect performance regression TABLE IV.      SUMMARY OF ANALYSIS FOR THE ENTERPRISE SYSTEM Test Performance Analysts Report Our Findings A No performance problem found Our approach identified abnormal behaviors in system arrival rate and throughput metrics B Arrival rates from two load generators differ significantly Abnormally high database transaction rate High spikes in job queue Our approach flagged the same metrics as the performance analysts analysis with one false positive C Slight elevation of database transactions/sec. No metric flagged  39 B. Sampling period and Metric Discretization We choose the size of time interval for metric discretization based on how often the original data is sampled. For example an interval of 200 seconds is used to discretize data of the enterprise system, which was originally sampled approximately every 3 minutes. The extra 20 second gap is used because there was a mismatch in sampling frequencies for some metrics. We also experimented with different interval lengths. We found that less metrics are flagged as the length of the interval increases, while precision is not affected 


In our case studies, we found that the false negatives metrics that were expected to show performance regressions but were not detected by our approach no rule containing the problematic metrics was extracted by the Apriori algorithm. This was caused by our discretization technique sometimes putting all values of a metric that had large standard deviation into a single level. Candidate rules containing those metrics would exhibit low confidence and were thus pruned. In the future, we will experiment on other discretization techniques, such as Equal Width Interval Binning C. Performance Regression Testing Our approach is limited to detecting performance regressions. Functional failures that do not have noticeable effect on the performance of the system will not be detected Furthermore, problems that span across the historical dataset and the new test will not be detected by our approach. For example, no problem will be detected if both the historical dataset and the new test show the same memory leak. Our approach will only register when the memory leak worsens or improves D. Passed Tests The historical dataset from which the association rules are generated should contain tests that have the same workload configuration, preferably same hardware, and exhibit correct behavior. Using tests that contain performance problems will decrease the number of frequent item sets extracted, making our approach less effective in detecting problems in the new test. In our case study with the enterprise system, we applied the following measure to avoid adding problematic tests to our historical dataset We selected a list of tests from the repository that have received a pass status from the performance analyst We manually examined the performance metrics that are normally used by a performance analyst in each test from the list of past test to ensure no abnormal behavior was found E. System Evolution and Size of Training Data The system is often updated to support new environments or requirements. These updates may lead to changes in performance. A large variability in metric values will negatively affect the confidence of association rules generated 


in our approach. Therefore, it is necessary to update the set of tests included in the historical dataset. We are currently studying the effect of using a sliding window to select prior tests to include in the historical dataset. A sliding window allows us to automatically discard outdated tests that no longer reflect the current systems performance. However, the optimal size of the sliding window will likely be project-dependent since each project has different release frequency Alternatively, the historical dataset can also be derived from within the run. For example, the first hour of the current test can be used to derive performance signatures. Assuming that the system runs correctly during the first hour, the performance signature generated from this historical dataset will be useful to assess the stability of the system F. Hardware Differences In practice, performance regression tests of a system can be carried out on different hardware. Furthermore, third party components may change in between tests. In the future, we plan to improve our learning algorithm so that, given a new test, our tool will automatically select the tests from the repository with similar configurations G. Automated Diagnosis Our approach automatically flags metrics by using association rules that show high deviations in confidence between the new tests and the historical dataset. These deviations represent possible performance regressions or improvements and are valuable to performance analysts in assessing the system under test. Performance analysts can adjust the deviation threshold to restrict the number of rules used and, thus, limit the number of metrics flagged. Alongside with the flagged metrics, our tool also displays the list of rules that the metric violated. Performance analysts can inspect these rules to understand the relations among metrics. From our case study, we notice that some of the rules produced are highly similar. In the future, we will research for ways to merge similar rules to further condense information for performance analysts to analyze The association rules presented in our performance regression report represent metric correlations rather than causality. Performance analysts can make use of these correlations to manually derive the cause of a given problem VII. RELATED WORK 


Our goal in this work is to detect performance problems in a new test using historical data. Existing approaches monitor or analyze a system through one of two sources of historical data execution logs and performance metrics A. Analyzing Execution Logs Reynolds el al. [18] and Aguilera et al. [22] developed various algorithms for performance debugging on distributed systems. Their approach analyzes message trace of system components to infer the dominant causal paths and identify the components that account for a significant fraction of the systems latency. Unfortunately, the accuracy of the inferred paths decreases as the degree of parallelism increases, leading to low precision in identifying problematic components. Our approach is different from Reynoldss and Aguileras in that we pinpoint performance issues on the metric level rather than locating the system components that contribute significantly to system latency. Jiang et al. introduce a technique [14] to 40 identify functional problems in a load test from execution logs The authors extended this approach to analyze performance in scenarios as well as in the steps of each scenario [13]. Chen et al. proposed Pinpoint [21] to locate the subset of system components that are likely to be the cause of failures. Our work is different from Pinpoint in that Pinpoint focuses on identifying system fault rather than performance regression which can occur even when the system functions correctly In contrast to the above studies, which analyze execution logs, our approach analyzes performance metrics to identify performance problems B. Analyzing Performance Metrics Bondi [9] presented a technique to automatically identify warm-up and cool-down transients from measurements of a load test. While Bondis technique can be used to determine if a system ever reaches a stable state in the test, our approach can detect performance problems at the metric level Cohen et al. [11, 12] applied supervised machine learning techniques to induce models on performance metrics that are likely to correlate with observed faults. Bodik et al. improved Cohens work [8] by using logistic regression. Our approach is different from the above work as we do not require knowledge of violations of Service Level Objectives Jiang et al. proposed an approach [16] for fault detection 


using correlations of two system metrics. A fault is suspected when the portion of all derived models that report outliers exceeds a predefined threshold. Our approach is based on frequent item sets that can output correlations of more than two metrics. Performance analysts can leverage these metric correlations to better understand the cause of a fault. Jiang et al 15] proposed an approach to identify clusters of correlated metrics with Normalized Mutual Information as similarity measure. The authors were able to detect 77% of the injected faults and the faulty subsystems, without any false positives While the approach in [15] can output only the faulty subsystems, our approach can detect and report details about performance problems, including metrics that deviate from the expected behaviors VIII. CONCLUSIONS It is difficult for performance analysts to manually analyze performance regression testing results due to time pressure large volumes of data, and undocumented baselines Furthermore, subjectivity of individual analysts may lead to incorrect performance regressions being filed. In this paper, we explored the use of performance regression testing repositories to support performance regression analysis. Our approach automatically compares new performance regression tests to a set of association rules extracted from past tests. Potential performance regressions of system metrics are presented in a performance regression report ordered by severity. Our case studies shows that our approach is easy to adopt and can scale well to large enterprise system high precision ACKNOWLEDGMENT We are grateful to Research In Motion \(RIM access to the enterprise application used in our case study. The findings and opinions expressed in this paper are those of the authors and do not necessarily represent or reflect those of RIM and/or its subsidiaries and affiliates. Moreover, our results do not in any way reflect the quality of RIMs products REFERENCES 1] iBATIS JPetStore, http://sourceforge.net/projects/ibatisjpetstore 2] MMB3, http://technet.microsoft.com/enus/library/cc164328%28EXCHG.65%29.aspx 3] The Dell DVD Store, http://linux.dell.com/dvdstore 4] The R Project for Statistical Computing. http://www.r-project.org 5] R. Agrawal, R.Srikant, Fast Algorithms for Mining Association Rules 


in Large Databases, Proc. of 20th Intl Conf. Very Large Data Bases 1994 6] A. Avritzer and B. Larson, Load testing software using deterministic state testing, Proc. of Intl Symp. on Software Testing and Analysis 1993 7] A. Avritzer, E. J. Weyuker, The automatic generation of load test suites and the assessment of the resulting software, IEEE Trans. Softw. Eng 21\(9 8] P. Bodik, M. Goldszmidt, A. Fox, HiLighter: Automatically Building Robust Signatures of Performance Behavior for Small- and Large-Scale Systems, Proc. of the  3rd SysML, Dec 2007 9] A. B. Bondi, Automating the Analysis of Load Test Results to Assess the Scalability and Stability of a Component, Proc. of 33rd Intl CMG Conf., San Diego, CA, USA, Dec. 2-7, 2007 10] L.  Bulej, T.  Kalibera, P. Tuma, Regression Benchmarking with Simple Middleware Benchmarks,  Proc. of the 2004 IPCCC, 2004 11] I. Cohen, M. Goldszmidt, T. Kelly, J. Symons, J. S. Chase, Correlating instrumentation data to system states: A building block for automated diagnosis and control, Proc. of 6th OSDI, Dec. 2004 12] I. Cohen, S. Zhang, M. Goldszmidt, J. Symons, T. Kelly, A. Fox Capturing, indexing, clustering, and retrieving system history Proc. of the 20th ACM Symp. on Operating Systems principles, 2005 13] Z. M. Jiang, A. E. Hassan, G. Hamann, P. Flora, Automated Performance Analysis of Load Tests, Proc. of the 25th ICSM, Sept 09 14] Z. M. Jiang, A. E. Hassan, P. Flora, G. Hamann, Automatic Identification of Load Testing Problems, Proc. of the 24th Intl Conf on Softw. Maintenance, Sept 2008 15] M. Jiang, M. A. Munawar, T.  Reidemeister, P A.S. Ward, Automatic Fault Detection and Diagnosis in Complex Software Systems by Information-Theoretic Monitoring, Proc. DSN, Jun 2009 16] M. Jiang, M. A. Munawar, T. Reidemeister, P. A. S. Ward System Monitoring with Metric-Correlation Models: Problems and Solutions Proc. of the 6th Intl Conf. on Autonomic Computing, 2009 17] T. Kalibera, L. Bulej, P. Tuma, Automated Detection of Performance Regressions: The Mono Experience, 13th MASCOTS, 2005 18]  P. Reynolds, J. L. Wiener, J.C. Mogul, M. K. Aguilera, A. Vahdat WAP5: Black-box Performance Debugging for Wide-Area Systems Proc. of the 15th Intl World Wide Web Conf.s, 2006 19] E. J. Weyuker, F. I. Vokolos, Experience with performance testing of software systems: Issues, an approach, andcase study, IEEE Trans Softw. Eng., 26\(12 20] I. H. Witten, E. Frank, Data Mining: Practical Machine Learning Tools 


and Techniques, Morgan Kaufmann, June 2005 21] M. Y. Chen , E. Kiciman , E. Fratkin , A. Fox , E. Brewer, Pinpoint Problem Determination in Large, Dynamic Internet Services, Proc. of the 2002 Intl Conf. on Dependable Systems and Networks, June  2002 22] M. K. Aguilera , J. C. Mogul , J. L. Wiener , P. Reynolds , A Muthitacharoen, Performance debugging for distributed systems of black boxes, Proc. of the 19th ACM Symp. on Operating systems principles, Oct 2003 41 


DMITAR, Datasets Used Stock Data Stock Data Daily stock information provided by Yahoo finance Wth Dt W ea th er D a t a Provided by the US Department of Commerce and National Climactic Data Center for 700 locations across US Synthetic Data Provided by a CRU weather generator that uses a Markov chain model to generate simulated weather data for 11 UK sites Associative IDS for NextGen Frameworks Dr S Dua LA Tech 26 


DMITAR Results 1/5 Varying Support DMITAR Results 1/5 Stock Database Support FITI ITPMine PROWL DMITAR 14 6424.7s 132.39s 3.03s 5.556s 16 2348.9s 67.14s 2.14s 4.015s 18 861.92s 34.62s 1.55s 2.89s 20 334.51s 18.89s 1.12s 2.07s 22 143 84s 10 87s 0 87s 1 45s 22 143  84s 10  87s 0  87s 1  45s 24 63.62s 7.15s 0.671s 1.04s Weather Database Support FITI ITPMine PROWL DMITAR 14 36362.6s 893.1094s 5.843s 19.8281s 36362.6s 893.1094s 5.843s 19.8281s 16 11913.04s 378.2188s 3.8906s 13.4375s 18 4116s 170.3438s 2.75s 9.1406s 20 1507s 86.5781s 2.14s 6.203s 22 859.2813s 63.3438s 1.7969s 5.7656s 24 378.5313s 36.1875s 1.4375s 3.5625s Synthetic Dataset Support FITI ITPMine PROWL DMITAR 14 1651.6s 199.843s 3.1406s 17.015s 16 574 32 119 32 2 0938 10 875 16 574  32 s 119  32 s 2  0938 s 10  875 s 18 416.109s 95.31s 1.6094s 7.39s 20 370.25s 83.31s 1.453s 5.8438s 22 265.78s 66.3438s 1.3594s 4.75s 24 133.96s 43.0781s 0.9219s 3.5781s 


DMITAR Rlt  DMITAR  R esu lt s 2  5 Rules Formed Associative IDS for NextGen Frameworks Dr S Dua LA Tech 28 


DMITAR Rl  Varying Maxspan DMITAR  R esu l ts 3  5 Varying Maxspan Associative IDS for NextGen Frameworks Dr S Dua LA Tech 29 


DMITAR Res lts 4/5 Vig Di i DMITAR  Res u lts  4/5 V ary i n g Di mens i ons Associative IDS for NextGen Frameworks Dr S Dua LA Tech 30 


DMITAR Rl  Varying Number of Transactions DMITAR  R esu l ts 5  5 Varying Number of Transactions Associative IDS for NextGen Frameworks Dr S Dua LA Tech 31 


N/C t Rh N ew C urren t R esearc h Problem Domain Problem Statement and Challenges Associative Mining based IDS Associative Mining based IDS Introduction to data mining ii lid ii Assoc i at i on ru l e i n d ata m i n i ng DMITAR Algorithm  ARD h New Researc h Associative IDS for NextGen Frameworks Dr S Dua LA Tech 32 


Further Research Further Research Objectives of Our Intrusion Detection System Development Objectives of Our Intrusion Detection System Development 1 Refine and scale the DMITAR algorithm to suit our application 2 Develop methods for dynamically altering the sensor parameters Our Focus is Securing the NextGen Frameworks with New Technology Technology Associative IDS for NextGen Frameworks Dr S Dua LA Tech 33 


Simulated Sensing Environment Simulated Sensing Environment Screenshots of Data C ollected from S ynthetic Sensors Screenshots of Data C ollected from S ynthetic Sensors Simulated in Our Laboratory Three Steps Slides Collect data Collect data from all sources  all attributes  Select Select the source and their hierarchical attributes attributes to be monitored and Select Select the source and their hierarchical attributes attributes to be monitored  and Sample Sample them at different rates different rates and process them Associative IDS for NextGen Frameworks Dr S Dua LA Tech 34 


Data Collection Simultaneous collection of data screen from ENTITIES aircrafts Associative IDS for NextGen Frameworks Dr S Dua LA Tech 35 Source PRTG Network Monitor software screen shot Demo info www.paessler.com 


Parameter Selection Selection of an ENTITY/aircraft and monitoring its parameters and sensor readings Associative IDS for NextGen Frameworks Dr S Dua LA Tech 36 Source PRTG Network Monitor software screen shot Demo info www.paessler.com 


Sensor Sampling Selecting one sensor/probe and reading it at different resolutions or sampling rates Associative IDS for NextGen Frameworks Dr S Dua LA Tech 37 Source PRTG Network Monitor software screen shot Demo info www.paessler.com 


Si l ti Nt k Si mu l a ti on on N e t wor k Most scenarios can be simulated on a computer or computer network network  The aircrafts and sensors are simulated on a computer network bllb b y ana l ogica l su b stitutions Sensors provide information at different rates Sensors provide information at different rates Need Based Sensor Prioritization NSP and Dynamic Sensing Rate Sampling Associative IDS for NextGen Frameworks Dr S Dua LA Tech 38 


Vulnerability Search Scan 39 Sample UQA script with Nmap performed in DMRL Associative IDS for NextGen Frameworks Dr S Dua LA Tech 39 Source Nmap screenshot with a pearl script  Find Namp on Nmap.org 


Modality Aspect Modality Aspect A Multimodal distribution is a continuous probability distribution with two or more modes of underlying data Mltil d i M u lti p l e mo d es i n our model Associative IDS for NextGen Frameworks Dr S Dua LA Tech 40 Source http://en.wikipedia.org/wiki/File:Bimodal bivariate small.png 


Multi Modality Modality Fusion 41 SENSITIVE  UNCLASSIFIED For Official Use Only Associative IDS for NextGen Frameworks Dr S Dua LA Tech 41 


Emphasis Emphasis Our approach emphasizes on pre empting the attack Our intent is NOT to perform an autopsy to discover attacks Instead we aim to detect and prevent in attacks in real time Associative IDS for NextGen Frameworks Dr S Dua LA Tech 42 


Techniques for Discriminative Rules Techniques for Discriminative Rules Resolution Analysis Features Analyzed at Different Depths Anti Monotonic Principle Modality Aspect Treading into Unexplored Feature spaces Associative IDS for NextGen Frameworks Dr S Dua LA Tech 43 


Representative Outcomes Representative Outcomes Illustration of the Final Analysis Our method shifts between modalities and sampling rates for optimization The blue parallelograms are actual intrusions 44 The blue parallelograms are actual intrusions The Red Green Blue Plots are response of system Associative IDS for NextGen Frameworks Dr S Dua LA Tech 44 


Advantages of Our M ethod Advantages of Our M ethod Exploit the memory v ertical data format utilizes slidin g windows to g form a much larger database to analyze  Flexibility in Choosing what to choose  Choosing what to choose to build the rules Computational and memory efficiency We have a team working only on this aspect 45 Associative IDS for NextGen Frameworks Dr S Dua LA Tech 45 


Preliminary Results Intra transaction Relations Data rate simulator NH-134 Mb HOP PATH update \(Y/N Inference 11.5 Y Y 2 0.120 N N      Y   n 0.345 N NH134 Y/N   Inf 1 0.150 N N 2 0 120 Y N Inter transaction Relations 2 0  120 Y N       5 5.55 0.456 Y Relations  n 0.345 N N Nmap on DMRL nmap.org 


Anticipated Outcome Anticipated Outcome Develop algorithm capable of learning from a given heterogeneous diverse Develop algorithm capable of learning from a given heterogeneous diverse data ff Dynamic algorithmic f ramework designed to shi f t modalities and sampling rates based on complex logic Flexibility of integration into the Snort intrusion detection system 47 Associative IDS for NextGen Frameworks Dr S Dua LA Tech 47 


References References Aircraft Cockpit Image courtesy USAF http://www.faa.gov htt p   www.faa g ov  air traffic  technolo gy  p g  _ gy  Acharya R Dua S Du X Sree V Chua C K Automated Diagnosis of Glaucoma Using Texture and Higher Order Spectra Features To appear in IEEE Transactions on Information Technology in Biomedicine  Du X Dua S 2011 Cancer Prognosis Using Support Vector Regression in Imaging  Modality World Journal of Clinical Oncology 2  1   44 49 Du X Dua S 2010 Salient Frame Extraction Using Support Vector Regression and Motion Features pp 5 Proc of the National Aerospace and Electronics Conference July 14 16 2010 D M P D S 2010 Di i i ti Ft d Cl ifi ti Mthd f D essaue r  M  P  D ua S  2010  Di scr i m i na ti ve F ea t ures an d Cl ass ifi ca ti on M e th o d s f or Accurate Classification 1st ed vol 7704 pp 14 Bellingham WA Proceedings of SPIE Dessauer M P Dua S 2010 Low Resolution Vehicle Tracking using Dense and Reduced Local Gradient Features Maps 1st ed vol 7694 pp 8 Bellingham WA Proceedings of SPIE SPIE 


Acknowledgements Acknowledgements Fundin g A g encies  US 4 1 Million direct fundin g g g 4 g LA BoR NIH NSF AFRL AFOSR and NASA Research Team Samuel Kasimalla Brandy McKnight Dr Pradeep Chowriappa Connor Johnson Vasanth Nair Mihir Chowriappa  Connor Johnson  Vasanth Nair  Mihir Karnik Mohit Jain and Swadheen Songmen Associative IDS for NextGen Frameworks Dr S Dua LA Tech 49 All the respective Logos belong to their owners 


Rf d Rdi R e f erence d R ea di ngs Copyright of cover pages held by respective publishers 


Thank You Questions Thank You  Questions Dr Sumeet Dua E mail sdua@latech.edu Web http://dmrl.latech.edu Associative IDS for NextGen Frameworks Frameworks Dr S Dua LA Tech 51 Image Source roadtrafficsigns.com 


