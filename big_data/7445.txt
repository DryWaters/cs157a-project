Online Generation of Asso ciation Rules Charu C Aggarw al and Philip S Y u IBM T J W atson Researc h Cen ter Y orkto wn Heigh ts NY 10598 Abstract W eha v e a large database consisting of sales transactions W ein v estigate the problem of online mining of asso ciation rules in this large database W e sho who w to prepro cess the data e\013ectiv ely in order to mak e it suitable for rep eated online queries The prepro cessing algorithm tak es in to accoun t the storage space a v ailable W e store the prepro cessed data in suc haw a y that online pro cessing ma ybe done b y applying a graph theoretic searc h algorithm whose complexit y is prop ortional to the size of the output This results in an online algorithm whic h is practically instan taneous in terms of resp onse time The algorithm also supp orts tec hniques for quic kly disco v ering asso ciation rules from large itemsets The algorithm is capable of 014nding rules with sp eci\014c items in the an teceden t or consequen t These asso ciation rules are presen ted in a compact form eliminatin g redundancy W e b eliev e that the elimination of redundancy in online generation of asso ciation rules from large itemsets is in teresting in its o wn righ t 1 In tro duction The imp ortance of disco v ering asso ciation rules as a to ol for kno wledge disco v ery in databases has recen tly b een recognized By using the data from bar co de companies or sales data from catalog companies it is p ossible to gain v aluable information ab out customer buying b eha vior in the form of asso ciation rules Suc h information can b e used to mak e decisions suc h as shelving in a sup ermark et designing w ell targeted mark eting programs etc Let I  f i 1 i 2 i m g b e a set of literals called items The database consists of a set of sales transactions T  Eac h transaction T 2T is a set of items suc h that T 022 I In this pap er w e consider the 0-1 case only in other w ords a 0-1 v ariable indicates whether or not an item w as b ough t A transaction T is said to con tain the set of items X if and only if X 022 T  An asso ciation rule is a condition of the form X  Y where X 022 I and Y 022 I are t w o sets of attributes The intuitiv e implicatio n of the asso ciation rule is that a presence of the set of items X in a transaction set also indicates a p ossibili t y of the presence of the itemset Y Tw o notions for establishing the strength of a rule are those of minimum supp ort and minimum c on\014denc e  whic hw ere 014rst in troduced in The supp ort of a rule X  Y is the fraction of transactions whic h con tain b oth X and Y  The c on\014denc e of a rule X  Y is the fraction of transactions con taining X whic h also con tain Y Th us if w esa y that a rule has 90 con\014dence then it means that 90 of the tuples con taining X also con tain Y  Starting with pioneering w ork in Agra w al et al.[2 a host of w ork has b een done in this area with a fo cus on 014nding asso ciation rules from v ery large sets of transaction data The primary idea prop osed in w as an itemset approac h in whic h 014rst all large itemsets are generated and then these large itemsets are used in order to determine data dep endencies Subsequen tw ork has primarily concen trated on this approac h The itemset approac h is as follo ws Generate all combinations of items that ha v e fractional transaction supp ort ab o v e a certain user-de\014ned threshold called minsupp ort  W e call all suc h com binations lar ge itemsets  Giv en an itemset S satisfying the supp ort constrain t w e can use it to generate rules of the t yp e S 000 X  X for eac h X 032 S  Once these rules ha v e b een generated only those rules ab o v ea certain user de\014ned threshold called minc on\014denc e need b e retained F aster algorithms for mining asso ciation rules w ere prop osed in while a hash-based algorithm w as established in 17 Generalized asso ciation rules w ere presen ted in Metho ds for mining quan titativ e asso ciation rules w ere established in Other related w ork ma y b e found in 9 11 An up-to-date surv ey on some of the w ork done in data mining ma y b e found in In this pap er w e consider the problem of online mining of asso ciation rules The idea in online mining is that an end user ough t to b e able to query the database for asso ciation rules at di\013ering v alues of supp ort and con\014dence without excessiv e I/O or computation In the itemset metho d m ultiple passes ha v e to b e made o v er the database for eac h di\013ering v alue of minsupp ort and minc on\014denc e  starting from scratc h Some sampling tec hniques exist whic h reduce the n um b er of passes o v er the database to t w o 19 F or v ery large databases this ma yin v olv e a considerable I/O and in some situations it ma y lead to unacceptable resp onse times for online queries The problem of mining asso ciation rules is esp ecially suitable for an online approac h It is hard for a user to guess apriori ho w man y rules migh t satisfy a giv en lev el of supp ort and con\014dence T ypically one ma ybe in terested in only a few rules This mak es the problem all the more di\016 


Rule Supp ort Con\014dence X  YZ S  X  Y  Z  S  X  Y  Z  S  X  XY  Z S  X  Y  Z  S  X  Y  Z  S  X  Y  XZ  Y S  X  Y  Z  S  X  Y  Z  S  X  Z  X  Y S  X  Y  S  X  Y  S  X  X  Z S  X  Z  S  X  Z  S  X  T able 1 Redundancy in rule generation cult since a user ma y need to run the query m ultiple times in order to 014nd appropriate lev els of minsupp ort and mincon\014dence in order to mine the rules In other w ords the problem of mining asso ciation rules ma y require considerable man ual parameter tuning b y rep eated queries b efore useful business information can b e gleaned from the transaction database Another issue is that while mining asso ciation rules a large p ercen tage of the rules ma y b e redundan t It is useful to eliminate redundan t rules simply from the p oin t of view of compactness in represen tation to an online user F or example if the rule X  YZ is true at a giv en v alue of minsupp ort and minc on\014denc e  then rules suc has XY  Z  XZ  Y  X  Y  and X  Z are redundan t This can b e easily seen from the T able 1 in whic h one can see that b oth the supp ort and con\014dence v alues of the rule X  YZ are less than the supp ort and con\014dence v alues for the rules X  Y  X  Z  XY  Z  and XZ  Y  In fact in most cases the n um b er of redundan t rules is signi\014can tly larger than the n um b er of essen tial rules and ha ving to o man y redundan t rules defeats the primary purp ose of data mining in the 014rst place W e note that this kind of redundancy arises when w e consider rules whic hha v e more than one item in the consequen t In recen ty ears an imp ortan t application of database systems has b een Online Analytical Pro cessing OLAP The primary idea b ehind this approac h has b een the prepro cess once query man y paradigm The idea is that it is time consuming to compute results from ra w transaction data eac h time a user mak es a query  By prepro cessing the data set just once a user ma y b e able to query the system e\016cien tly m ultiple times at the cost of a single phase of prepro cessing Considerable w ork has b een done in online analytical processing as applied to the data cub e 5 7 8 10  This pap er also discusses an approac h for online mining b y using one phase of prepro cessing 1.1 Con tribut io ns of this pap er In this pap er w e presen tanin tuitiv e framew ork for p erforming online mining of asso ciation rules P ast w ork has concen trated on a t w o phase approac h 1 Large Itemset Generation Con trolling parameter minsupp ort 2 Rule Generation Con trolling parameter minc on\014denc e The b ottlenec k in this pro cedure is the 014rst step since most algorithms require m ultiple I/O passes in order to p erform this step Th us the natural solution is to prestore as man y itemsets as p ossible with the least supp ort v alue p ossible giv en the memory a v ailable This approac hho w ev er has some ob vious dra wbac ks On the one hand one migh tw an t to store as man y of suc h itemsets as p ossible as constrained b y the memory space or prepro cessing time a v ailable so that imp ortan t information will not b e lost On the other hand if to o man y itemsets are prestored then the second phase of rule generation b ecomes the b ottlenec k F or example while trying to mine rules con taining sp eci\014c sets of items the n um b er of relev an t large itemsets ma ybea v ery small fraction of the total n um b er of itemsets prestored Y et one ma y need to lo ok at eac h and ev ery prestored itemset in order to 014nd the relev an t large itemsets Consequen tly  it b ecomes imp ortan t to organize the itemsets along with supp ort information in suc haw a y that the online time required to mine the rules is small and is dep enden t on the n um b er of large itemsets corresp onding to a user query  rather than the n um b er of itemsets prestored In this pap er w e shall discuss suc h a metho d F rom no w on w e shall refer to the prestored itemsets as primary itemsets The primary threshold is the minim um lev el of supp ort for an y prestored itemset Th us the primary itemsets comprise all itemsets whose supp ort is at least equal to the v alue of the primary threshold A t this stage w ew ould also lik eto mak e a careful distinction b et w een primary itemsets and large itemsets A large itemset corresp onds to an itemset for a user query  and is a subset of the primary itemsets More sp eci\014call y  the con tributions of this w ork are as follo ws 1 W e devise a framew ork for organizing the primary itemsets in suc haw a y that online rules with v ery limited I/O on the prestored data The online time for mining the rules is indep enden t of the size of the transaction data as w ell as the n um b er of itemsets prestored In fact w e shall see that the time required to pro cess a query is completely dep enden t up on the size of the output This feature is esp ecially suitable for the online case 2 W e giv e a tec hnique whic h can quic kly predict the size of the output at a giv en lev el of user sp eci\014ed parameters F or a giv en lev el of user-sp eci\014ed minsupp ort and minc on\014denc e  b oth the n um b er of itemsets as w ell as the n um b er of rules can b e predicted A rev erse query suc h as predicting the lev el of minsupp ort for whic ha particular n um b er of itemsets exist can also b e p erformed 3 W e discuss the issue of e\016ciency in the generation of the rules Since w e include the p ossibili t y of generating rules with more than one item in the consequen t it ma y often b e cum b ersome at least from an online p ersp ectiv e to lo ok at eac h of the subsets of the large itemsets as a p ossibili t y for the an teceden t A large n um b er of p ossibili ties can b e pruned b y careful order of examination It is also p ossible to e\016cien tly generate only rules with exactly one item in the consequen t Suc h rules are called single-c on se q uen t rules 4 W e discuss the issue of generating rules with sp eci\014c of items in them The items ma y o ccur in the an teceden t or consequen t 5 W e discuss the issue of redundancy in the rules generated from large itemsets W e discuss the lev el to whic h essen tial rules ma y often get buried in hordes of redundan t rules Compactness of represen tation to an online 


user is a v ery useful feature This segmen t of the pap er has b oth theoretical and practical signi\014cance 6 W e presen t an algorithm for 014nding the primary itemsets whic h automatically decides whic h itemsets to prestore dep ending up on a v ailable memory capacit y F or the sak e of high lev el discussion w e shall 014x the maxim um n um b er of itemsets rather than the memory space o ccupied b y the itemsets This is a sligh tly di\013eren t problem from that discussed in Agra w al et al  where one needs to 014nd the itemsets with supp ort ab o v e a particular v alue The v alue of the primary threshold at whic h the b est 014t to this maxim um n umb er of itemsets ma y b e found is not kno wn in adv ance One ma y p erform a binary searc h on the supp ort v alue in order to 014nd the v alue of the primary threshold W e prop ose tec hniques for impro ving the e\016ciency b ey ond simply p erforming a simple binary searc h W e should note that it is not p ossible to p erform online mining of asso ciation rules at supp ort lev els less than the primary threshold This is not necessarily a sev ere restriction since the primary itemsets are obtained within the preprocessing time constrain ts whic h are signi\014can tl y more lib eral than online time constrain ts Th us most useful itemsets are t ypically prestored 1.2 Kinds of online queries Assume that the kinds of online queries that suc h a system can supp ort are as follo ws 1 Find all asso ciation rules ab o v e a certain lev el of minsupp ort and minc on\014denc e  2 A t a certain lev el of minsupp ort and minc on\014denc e  014nd all asso ciation rules concerned with the set of items X  3 Find the numb er of asso ciation rules/itemsets in an y of the cases 1 2 ab o v e 4 A t what lev el of minsupp ort do exactly k itemsets exist con taining the set of items Z  5 F or a particular lev el of minc on\014denc e c  at what lev el of minsupp ort do exactly k single-consequ en t rules exist whic hin v olv e the set of items Z  1.3 Ov erview W ein tro duce the concept of an adjacency lattice of itemsets This adjacency lattice is crucial to p erforming e\013ectiv e online data mining The adjacency lattice could b e stored either in main memory or on secondary memory W e shall discuss more details ab out ho w this lattice is actually constructed in a later section The idea of the adjacency lattice is to prestore a n um b er of large itemsets at a lev el of supp ort p ossible giv en the a v ailable memory  These itemsets are stored in a sp ecial format called the adjacency lattice whic h reduces the disk I/O required in order to p erform the analysis In fact if enough main memory is a v ailable for the en tire adjacency lattice then no I/O ma y need to b e p erformed at all W e shall see that this structure is useful for b oth 014nding the itemsets quic kly and also using the itemsets in order to generate the rules Redundancy in rules is eliminated so Itemset Supp ort A 1 B 2 C 2 D 1 AB 0.5 A C 0.7 BD 0.6 BC 0.4 ABC 0.3 T able 2  0.6 ABC NULL 1 A          B 2%           C 2%        D 1 0.5 0.7 0.3 AB          AC           BC           BD 0.4 Figure 1 The adjacency lattice that an online user ma y b e presen ted with the most compact represen tation p ossible 2 The adjacency lattice Before w e consider making a more detailed description w e shall discuss the concept of an adjacency lattice of itemsets F or future reference w e shall denote the adjacency lattice b y L  An itemset X is said to b e adjac ent to an itemset Y if one of them can b e obtained from the other b y adding a single item Sp eci\014cally  an itemset X is said to b e a paren t of the itemset Y if Y can b e obtained from X b y adding a single item to the set X  Equiv alen tly  Y ma y b e considered to b e ac hild of X Th us an itemset ma y p ossibly ha v e more than one paren t and more than one c hild In fact the n um ber of paren ts of an itemset X is exactly equal to the cardinalit y of the set X  This observ ation follo ws from the fact that for eac h elemen t i r in an itemset X  X 000f i r g is a paren t of X  It is easy to see that if a directed path exists from the v ertex corresp onding to Z to the v ertex corresp onding to X in the adjacency lattice then X 023 Z  In suc h a case X is said to b e an ancestor of Z  and Z is said to b e a descendan tof X  The adjacency lattice L is constructed as follo ws Construct a graph with a v ertex v  I  for eac h primary itemset I  Eac hv ertex I has a lab el corresp onding to the v alue of its supp ort This lab el is denoted b y S  I  F or an y pair of v ertices corresp onding to itemsets X and Y  a directed edge exists from v  X o v  Y  if and only if X is a paren t 


Algorithm FindItemsets\(ItemSet I  Supp ort s  b egin LIST v  I  O utputList  036  while LIST 6  036 do b egin Select a v ertex v  R  from LIST f Assume that the c hildren of a v ertex are arranged in decreasing order of supp ort g while the next c hild v  T f v  R  satis\014es S  T  025 s do b egin if v  T  62 O utputList do b egin LIST=LIST  v  T  O utputList  O utputList   v  T  S  T  cardinalit y=cardinalit y+1 end end Delete the v ertex v  R  from LIST end end Figure 2 The searc h algorithm for generating large itemsets of Y W e denote the corresp onding edge b y E  X Y  The v ertex v  X  is referred to as the tail of the edge E  X Y  while the v ertex v  Y  is referred to as the he ad  Consider for example the group of primary itemsets illustrated in T able 2 The corresp onding adjacency lattice is illustrated in Figure 1 Eac hv ertex has a lab el corresp onding to the v alue of its supp ort W e mak e the follo wing simple observ ations for the adjacency lattice L  Remark 2.1 The adjac ency lattic e L is a dir e cte d acyclic gr aph Remark 2.2 F or e ach vertex v  J  in L which is a desc endent of v  I   we must have S  J  024 S  I   The truth of Remark 2.2 follo ws from the fact that for eac h v ertex v  J  whic h is a descenden tof v  I  the corresp onding itemsets m ust satisfy J 023 I  Since the adjacency lattice is the primary structure whic h is used to represen t the prepro cessed data it is useful to measure the memory whic h suc h a structure migh t require W e shall pro ceed to sho w that the space required to store the adjacency lattice is not the b ottlenec k and is almost of the same order as the space required to hold the itemsets themselv es Theorem 2.1 The numb er of e dges in the adjac ency lattic e is e qual to the sum of the numb er of items in the primary itemsets Pro of The n um b er of edges ma y b e obtained b y summing the n um b er of paren ts of eac h primary itemset The n um ber of paren ts of a primary itemset is equal to the n um ber of items in it The result follo ws 3 Online generation of itemsets In order to 014nd all itemsets whic h con tain a set of items I and satisfy a lev el of minsupp ort s w e need to solv e the follo wing searc h problem in the adjacency lattice Problem 3.1 F or a given itemset I including fg  014nd al l itemsets J such that v  J  is r e achable fr om v  I  by a dir e cte dp ath in the lattic e L  and satis\014es S  J  025 s  Algorithm FindSupp ort\(ItemSet Z  Car dinality k  b egin LIST v  Z  O utputList  036  cardinalit y 0 while LIST 6  036  and cardinalit y 024 k  do b egin Select a v ertex v  R  from LIST with largest v alue of S  R  O utputList  O utputList   v  R  S  R  cardinalit y=cardinali t y+1 for eac hc hild v  T f v  R  do b egin if v  T  62 OutputList do LIST=LIST  v  T  end Delete the v ertex v  R  from LIST end return min f S  R   v  R  S  R  2 O utputList g  O utputList  end Figure 3 Finding the lev el of supp ort for a 014xed n um ber of itemsets It is imp ortan t to understand that the n um ber of v ertices reac hable from a giv en v ertex ma y b e quite large though the n um ber of v ertices whic h satisfy the lev el of minsupp ort s ma y b e small The idea is to use the lattice organization to restrict the n um ber of v ertices examined Th us when a user mak es m ultiple queries to the database this pre-pro cessed data helps a v oid the reading of the en tire database from scratc h W e shall no w discuss the searc h algorithm whic h giv en the parameters I and s  014nds all the itemsets containing I and ha ving a supp ort lev el of at least s  This algorithm is illustrated in Figure 2 The algorithm FindItemsets starts at a giv en itemset I and LIST f v  I  g  The algorithm then adds all of its c hildren v  J  with supp ort S  J  025 s to LIST unless the v ertex has b een visited b efore The v ertex v  I  is then deleted from LIST This pro cess is rep eated un til LIST is empt y Th us all the v ertices whic h are the un visited c hildren of a giv en v ertex in LIST are recursiv ely searc hed unless their supp ort v alue is less than s  The itemsets for ev ery v ertex whic h is visited are also added to the OutputList A t the same time a coun tofthe cardinalit yof OutputList is main tained in order to handle the feature where a user ma y wish to 014nd the cardinalit yof the itemsets A t termination of the algorithm the OutputList con tains all the itemsets J with supp ort S  J  025 s and satisfying J 023 I  3.1 Finding the lev el of supp ort for a 014xed n um b er of itemsets A useful online feature is to 014nd the lev el of supp ort at whic h exactly k itemsets eac h of whic h con tains the items Z  f i 1 i r g  exist This can b e accomplished b y making a few c hanges to the searc h algorithm of Figure 2 The resulting algorithm is illustrated in Figure 3 The primary idea is that while selecting a v ertex v  R  on LIST whic his to b e examined in the curren t iteration w e alw a ys pic k the v ertex with the highest v alue of supp ort A t that time w e add this v ertex to OutputList  The algorithm terminates when k v ertices ha v e b een found It can b e pro v ed that at eac h stage of this algorithm OutputList main tains r 024 k itemsets con taining Z with the highest supp ort v alue Theorem 3.1 The algorithm FindSupp ort\(Z  k 014nds the k itemsets c ontaining Z and having the highest value of supp ort If less than k such itemsets ar er epr esente d in the 


FG=>DE DEF=>G, DFG=>E EFG=>D DFG=>E    DF=>EG   DE=>FG, DEF=>G, EF=>DG   DEFG DEF         EFG DFG        DEG DF         DE           EF              FG       EG E Maximal ancestors of DEFG Essential Rules Redundant Rules E=>DFG f Ancestors of DEFG which have support at most S\(DEFG EFG=>D, EG=>DF, DEG=>F Figure 4 An illustration of the b oundary itemset adjac ency lattic e then the algorithm 014nds al l the itemsets c ontaining Z  Pro of The pro of of this theorem is b y induction The induction h yp othesis is that the r 024 k items main tained in the OutputList are the r itemsets con taining Z with the highest v alue of supp ort The induction h yp othesis is trivially true when O utputList  036  Eac h time an itemset is added to O utputList w e pic k the itemset on LIST with the highest supp ort v alue An y other itemset whic hw e add to OutputList in the future is either already on LIST or is a descenden t of some itemset curren tly in LIST F rom Remark 2.2 the result immediately follo ws 3.2 Finding the lev el of supp ort for a 014xed n um b er of single-conse quen t rules A single consequen t rule is one in whic h the consequen t contains only one item It is also p ossible to use the algorithm describ ed ab o v e to 014nd the lev el of supp ort at whic h a particular n um b er sa y k  of single-consequent rules exist for a presp eci\014ed lev el of con\014dence c  This can b e ac hiev ed b y making a minor mo di\014cation to the pro cedure FindSupp ort of Figure 3 In this case eac h time a v ertex v  X s selected from LIST all the single-consequ en t rules whic h can b e generated from v  X  at con\014dence lev el c are added to OutputList  The coun t of the n um b er of rules is maintained The 014rst time the coun t exceeds k  the pro cedure is terminated The pro of of correctness of this metho d is exactly analogous to the pro of of Theorem 3.1 4 Online generation of rules from itemsets In the previous section w e discussed ho w large itemsets ma y b e generated from the adjacency lattice In this section w e discuss ho w rules ma y b e generated from these itemsets T o generate the rules w e utilize the follo wing observ ation F or eac h rule A  B at con\014dence lev el c  the lab el supp ort on the v ertex v  A  B  is at most 1 c times the lab el supp ort on the v ertex v  A  Th us the con\014dence of a rule ma y b e obtained b y comparing the lab els on t w o v ertices whic h satisfy an ancestor-descendan t relationship in the adjacency lattice Con v ersely  let X  f X 1 X k g b e the itemsets generated in the 014rst phase of the online pro cessing algorithm Let c b e the lev el of minc on\014denc e at whic h it is desired to mine the asso ciation rules F or eac h X i 2X  rules ma y b e generated b y applying a rev erse searc h algorithm starting from v  X i  and 014nding all ancestors of v  X i  whic h ha v e supp ort at most S  X i  c  F or eac h suc h ancestor v  Y f v  X i  it is p ossible to generate rules of the form Y  X i 000 Y Th us the problem of 014nding all rules generated from a large itemset X is reduced to the follo wing graph searc h problem in the adjacency lattice Problem 4.1 Find al l anc estor vertic es of v  X  which have supp ort at le ast S  X  c  Unfortunately  man y of the generated rules will turn out to b e redundan t F or example if a rule X  YZ is included in the output then the rule XY  Z can b e regarded as redundan t De\014nition 4.1 L et A  B and C  D b e two asso ciation rules The rule C  D is r e dundant with r esp e ct to the rule A  B if the supp ort and c on\014denc e of the former ar eb oth always at le ast as lar ge as the supp ort and c on\014denc e of the latter indep endent of the natur e of the tr ansaction data W e shall 014rst classify the di\013eren t kinds of redundancy as follo ws Theorem 4.1 Simple Redundancy L et A  B and C  D b e two rules satisfying A  B  C  D  X  The rule C  D b e ars simple r e dundanc e with r esp e ct to the rule A  B if C 033 A  In other wor ds if the rule A  B is true at a c ertain level of supp ort and c on\014denc e then so is C  D  indep enden t of the natur e of the tr ansaction data Pro of Omitted See Th us in simple redundancy  the supp ort v alue for the t w o rules is the same but the con\014dence v alue for one is larger than the con\014dence v alue for the other The supp ort v alues for the rules are the same since they are generated from the same itemset As an example the rule AB  C b ears simple redundance with resp ect to the rule A  BC W e shall no w discuss the case when one rule dominates the other based up on b oth supp ort and con\014dence Theorem 4.2 Strict Redundancy We c onsider two rules gener ate dfr om itemsets X i and X j r esp e ctively such that X i 033 X j L et A  B and C  D b e rules satisfying A  B  X i  C  D  X j  and C 023 A  Then the rule C  D is r e dundant with r esp e ct to the rule A  B  Pro of Omitted See Th us in strict redundancy  one rule dominates the other based up on b oth supp ort as w ell as con\014dence As an example the rule X  Y b ears strict redundancy with resp ect to the rule X  YZ W e shall in tro duce some additional de\014nitions and notation here for the sak e of future discussion 


Algorithm FindBoundary  I temS et  X  C onf idence  c  b egin LIST v  X  B oundar y List  036  while LIST 6  036 do b egin Select a v ertex v  R  from LIST for eac h paren t v  T f v  R  do b egin if v  T  has not y et b een visited and S  T  024 S  X  c do LIST=LIST  v  T  end Delete the v ertex v  R  from LIST if v  R  is maximal add v  R o B oundar y List end end Figure 5 Finding the b oundary itemset De\014nition 4.2 A rule is de\014ne dto b e essential at supp ort level s and c on\014denc e level c if it do es not satisfy simple or strict r e dundancy with r esp e ct to any other rule which has supp ort at le ast s and c on\014denc eat le ast c  As w e shall see the n um b er of redundan t rules ma y often b e a signi\014can t fraction of the total n um b er of rules W e shall pro v e a result whic h quan ti\014es the n um b er of redundan t rules corresp onding to a single rule X  Y F or ease in notation w e shall denote the n um b er of items in an itemset X b y j X j  Theorem 4.3 The numb er of rules b e aring simple r e dundancy with r esp e ct to X  Y is 2 j Y j 000 2  The numb er of rules b e aring either simple or strict r e dundancy with r esp e ct to the rule X  Y is 3 j Y j 000 2 j Y j 000 1  Pro of Omitted See 1  As an example consider the rule A  BC  There are 2 2 000 2 simple redundan t rules namely AC  B  and AB  C  The strict redundan t rules are A  B  and A  C Th us the total n um b er of redundan t rules is 3 2 000 2 2 000 1=4 Clearly  as the n um b er of items in the consequen t increases the n um b er of redundan t rules explo des exp onen tiall y  De\014nition 4.3 A vertex v  Y  is a maximal anc estor of v  X  at c on\014denc e level c if and only if S  Y  S  X  024 1 c  and no strict anc estor v  Z  of v  Y  satis\014es S  Z  S  X  024 1 c  Maximal ancestors are v ery relev an t to the pro cess of 014nding rules whic ha v oid simple redundancy  Theorem 4.4 L et v  Y  b e a maximal anc estor of v  X  at a level of c on\014denc e c  Then the rule Y  X 000 Y c annot exhibit simple r e dundancy with r esp e ct to any other rule at c on\014denc e level c and any supp ort level s 024 S  X   Conversely if the rule Y  Z do es not exhibit simple r e dundancy with r esp e ct to any other rule at c on\014denc e level c  then v  Y  must b e a maximal anc estor of v  Y  Z   Pro of Omitted See 1  Th us 014nding maximal ancestors of large itemsets is necessary and su\016cien t to generate rules whic ha v oid simple redundancy  As an illustrati on consider the example in Figure 4 Only the relev an t segmen t of the adjacency lattice is illustrated in the 014gure Supp ose that w e wish to generate all the rules at a particular con\014dence lev el c from an itemset DE F G  Also assume that the itemsets whic h ha v e supp ort at most S  DE F G  c are DE F  EF G  DF G  Algorithm Gener ateR ules\(Set of Itemsets X c b egin RuleS et  036 for eac h X i 2X do F  X i c  F indB oundar y  X i c  for eac h X i 2X do b egin P  X i c  F  X i c  for eac hc hild X j 2X of X i do P  X i c  P  X i c  000F  X j c  F or eac h itemset Y 2P  X i c  do RuleS et  RuleS et f Y  X i 000 Y g end return RuleS et end Figure 6 Generating the rules from the b oundary itemsets DE G  DF  DE  EF  EG  FG  and E Th us a total of 10 rules corresp onding to these 10 itemsets can b e generated eac h of whic h satisfy the con\014dence lev el c Ho w ev er as w e see from Figure 4 only three of these rules are essen tial while the rest b ear simple redundancy to one or more of these rules These three rules are generated b y pic king the three maximal ancestors of DE F G from these 10 itemsets and generating the corresp onding rules Th us the problem of generating nonredundan t rules with con\014dence lev el c from a large itemset X reduces to the follo wing graph searc h problem Problem 4.2 Find al l maximal anc estors of v  X  with supp ort at most S  X  c  W e shall refer to all the maximal ancestors of a v ertex as the b oundary itemsets for the corresp onding itemset at the giv en lev el of con\014dence De\014nition 4.4 The b oundary for an itemset X at level of c on\014denc e c is the set of al l maximal anc estors of X at c on\014denc e level c  and is denote dby F  X c   Finding the b oundary for a giv en itemset X is simple enough b y using a rev erse searc h algorithm on the corresp onding adjacency lattice starting at v  X  as illustrated in Figure 5 This algorithm do es not incorp orate the constrain ts on ha ving particular items in the an teceden t or consequen t W e shall discuss this issue in a later subsection In order to actually generate rules from the itemsets X  f X 1 X 2 X k g w e apply the follo wing metho d F or eac h itemset X i 2X w e 014nd the b oundary itemset F  X i c  and for eac h Y 2F  X i c  w e generate the rule Y  X i 000 Y  Unfortunately  this ma y result in strict redundancy while generating rules from t w o di\013eren t itemsets X i and X j whic h satisfy X i 032 X j  First w e will discuss some simple results Theorem 4.5 L et X b e an itemset and let X 1 X 2  X k b e the childr en of X L et Y b e any itemset in F  X c  000  k i 1 F  X i c   Then the rule Y  X 000 Y c annot b e ar strict r e dundancy with r esp e ct to any other rule Conversely let X i b e a child of X such that Y lies in b oth F  X c  and F  X i c   Then the rule Y  X 000 Y is strictly r e dundant with r esp e ct to one or mor e rules Pro of Omitted See Th us w eha v e e\013ectiv ely sho wn in the ab o v e theorem that in order to a v oid strict redundancy  it is necessary and su\016cien t to prune the b oundary of an itemset X so that it do es 


not share an y itemsets with the b oundary of an y itemset X k 2X whic hisac hild of X  In other w ords for eac h c hild X k 2X of X w e remo v e from F  X c  all mem ber itemsets in F  X k c   Then these pruned b oundaries ma ybe used in order to generate the rules The resulting algorithm is illustrated in Figure 6 This algorithm uses as input the itemsets X whic h are generated in the 014rst phase of the algorithm at the appropriate lev el of minsupp ort  The algorithm FindBoundary of Figure 5 ma y b e used as a subroutine in order to generate all the b oundary itemsets These b oundary itemsets are then pruned and the rules are generated b y using eac h of the itemsets corresp onding to the b oundary in the an teceden t 4.1 Rules with constrain ts in the an teceden t and consequen t It is easy enough to adapt the ab o v e rule generation metho d so that particular items o ccur in the an teceden t and/or consequen t Consider for example the case when w e are generating rules from a large itemset X  Supp ose that w e desire the an teceden t to con tain the set of items P and the consequen t to con tain the set of items Q W e assume that P  Q 022 X  W e shall refer to P as the ante c e dent inclusion set  and Q as the c onse quen t inclusion set  In this case w e need to rede\014ne the notion of maximalit y and b oundary itemsets A v ertex v  Y  is de\014ned to b e a maximal ancestor of v  X  at con\014dence lev el c an teceden t inclusion set P  and consequen t inclusion set Q if and only if P 022 Y  Q 022 X 000 Y  S  Y  S  X  024 1 c  and no strict ancestor of Y satis\014es all of these constrain ts Equiv alen tl y  the b oundary set con tains all the itemsets corresp onding to maximal ancestors of X  It is easy to mo dify the algorithm discussed in Figure 5 so that it tak es the an teceden t and consequen t constrain ts in to accoun t The only di\013erence is that w e add an un visited v ertex v  T  to LIST if and only if S  T  024 S  X  c  and T 023 P  Also a v ertex v  R  is added to BoundaryList  only if it satis\014es the mo di\014ed de\014nition of maximalit y  5 Generation of the adjacency lattice In this section w e discuss the construction of the adjacency lattice The pro cess of constructing the adjacency lattice requires us to 014rst 014nd the primary itemsets There are t w o main constrain ts in v olv ed in c ho osing the n um ber of itemsets to prestore 1 Memory Limits In order to a v oid I/O one ma y wish to store the primary itemsets and corresp onding adjacency lattice in main memory  1 Recall that Theorem 2.1 c haracterizes the size required b y the adjacency lattice for this purp ose Assume that w e desire to 014nd N itemsets Note that b ecause of ties in the supp ort v alues of the primary itemsets supp ort v alues ma y not exist for whic h there are exactly N itemsets Th us w e assume that for some slac kv alue N s w e wish to 1 Storing the adjacency lattice on disk is not suc h a bad option after all The total I/O is still prop ortional to the size of the output rather than the n um b er of itemsets prestored Recall that the graph searc h algorithms used in order to 014nd the large itemsets and asso ciation rules visit only a small fraction of the v ertices in the adjacency lattice F unction NaiveFindThr eshold\(Numb er ofIt emset s N Slack N s  b egin High  max i f Supp ort of item i g Low 0 Gener ated 0 while  Gener ated 62  N 000 N s N  b egin Mid  High  Low   2 Gener ated  DH P  Mid  end return Mid  end Algorithm ConstructL attic e\(Numb er ofItem sets N Slack N s  b egin p  NaiveFindThr eshold\(N N s  F or eac h itemset X  f i 1 i r g with S  X  025 p do Add the v ertex v  X  to the adjacency lattice with lab el S  X  Add the edge E  X 000f i k g X  for eac h k 2f 1 r g end Figure 7 Constructing the adjacency lattice 014nd a primary threshold v alue for whic h the n um ber of itemsets is b et w een N 000 N s and N  2 Prepro cessing Time There ma y b e some practical limits as to ho wm uc h time one is willing to sp end in prepro cessing Consequen tly ev en if it is not p ossible to 014nd N itemsets within the prepro cessing time it ough t to b e able to terminate the algorithm with some v alue of the primary threshold for whic h all itemsets with supp ort ab o v e that v alue ha v e b een found A simple w a y of 014nding the primary itemsets is b y using a binary searc h algorithm on the v alue of the primary threshold using the DHP metho d discussed in Chen et al as a subroutine This metho d is somewhat naiv e and simplistic and is not necessarily e\016cien t since it requires m ultiple executions of the DHP metho d This metho d of 014nding the primary threshold is discussed in the algorithm NaiveFindThr eshold of Figure 7 The time complexit y of the pro cedure can b e impro v ed considerably b y utilizing a few simple ideas 1 It is not necessary to execute the DHP subroutine to completion in eac h and ev ery iteration F or estimates whic h are lo w er b ounds on the correct v alue\(s of the primary threshold it is su\016cien t to terminate the procedure as so on as N or more large itemsets ha v e b een generated at the lev el of supp ort b eing considered 2 It is not necessary to start the DHP pro cedure from scratc h in eac h iteration of the binary searc h pro cedure It is p ossible to reuse information b et w een iterations Let I  s  denote the itemsets whic hha v e supp ort at least s  It is p ossible to sp eed up the preprocessing algorithm b y reusing the information a v ailable in I  Low  Generating k itemsets in I  Mid  is only a matter of pic king those k itemsets in I  Low  whic h ha v e supp ort at least Low  This do es not mean that ev ery itemset in I  Mid  can b e immediately generated using this metho d Recall from 1 ab o v e that the DHP algorithm is often terminated b efore completion if more than N itemsets ha v e b een generated in that iteration Consequen tly  not all itemsets in I  Low  ma ybea v ailable but only those k itemsets for whic h k 024 k 0  for some k 0 are a v ailable Th us w eha v e all 


 0 1 2 3 4 5 6 7 8 9 x 10 4 0 0.002 0.004 0.006 0.008 0.01 0.012 0.014 0.016    Primary threshold Number of itemsets prestored T10.I4.D100K  T10.I6.D100K  T20.I6.D100K  Figure 8 Threshold v aration with itemsets prestored DataSet Conf Sup DHP Online T10.I4.D100K 90 0  3 100 sec instan taneous T10.I6.D100K 90 0  3 130 sec instan taneous T10.I6.D100K 90 0  2 240 sec 2 seconds T20.I6.D100K 90 0  5 100 sec instan taneous T able 3 Sample illustration s of the order of magnitude adv an tage of online pro cessing those k itemsets in I  Mid  v ailable for whic h k 024 k 0  These itemsets need not b e generated again 6 Empirical Results W e ran the sim ulation on an IBM RS/6000 530H w orkstation with a CPU clo c k rate of 33MHz 64 MB of main memory and running AIX 4.1.4 W e tested the algorithm empirically for the follo wing ob jectiv es 1 Prepro cessing sensitivit y The prepro cessing tec hnique is sensitiv e to the a v ailable storage space The larger the a v ailable space the lo w er the v alue of the primary threshold W e tested ho w the primary threshold v alue v aried with the storage space a v ailabili t y W e also tested ho w the running time of the prepro cessing algorithm scaled with the storage space 2 Online pro cessing time W e tested ho w the online pro cessing times scaled with the size of the output W e also made an order of magnitude comparison b et w een using an online approac h and a more direct approac h 3 Lev el of redundancy W e tested ho w the lev el of redundancy in the generated output set v aried with user sp eci\014ed lev els of supp ort and con\014dence W e sho w ed that the lev el of redundancy in the rules is quite high Th us redundancy elimination is an imp ortan t issue for an online user lo oking for compactness in represen tation of the rules 6.1 Generating the syn thetic data sets The syn thetic data sets w ere generated using a metho d similar to that discussed in Agra w al et al Generating the data sets w as a t w o stage pro cess 0 1 2 3 4 5 6 7 8 9 x 10 4 0 2 4 6 8 10 12 14 16 18 x 10 4    Number of itemsets prestored Relative Computational Effort for preprocessing T10.I4.D100K  T10.I6.D100K  T20.I6.D100K  Figure 9 Computation v ariation with itemsets prestored 0 5000 10000 15000 0 10 20 30 40 50 60    Number of rules generated Response Time in seconds T10.I4.D100K  T10.I6.D100K  T20.I6.D100K  Figure 10 Online resp onse time v ariation with rules generated 20 30 40 50 60 70 80 90 100 0 2 4 6 8 10 12   Support fixed at 0.15 Confidence Total Rules Generated Essential Rules  T10.I4.D100K  T10.I6.D100K   Figure 11 Redundancy lev el v ariation with con\014dence 


 0.1 0.15 0.2 0.25 0 10 20 30 40 50 60 70 80 90   Confidence fixed at 90 Support Total Rules Generated Essential Rules  T10.I4.D100K  T10.I6.D100K   Figure 12 Redundancy lev el v ariation with supp ort 1 Generating maximal p oten tially large itemsets The 014rst step w as to generate L  2000 maximal p oten tially large itemsets These p oten tially large itemsets capture the consumer tendencies of buying certain items together W e 014rst pic k ed the size of a maximal p oten tially large itemset as a random v ariable from a p oisson distribution with mean 026 L  Eac h successiv e itemset w as generated b y pic king half of its items from the curren t itemset and generating the other half randomly  This metho d ensures that large itemsets often ha v e common items Eac h itemset I hasaw eigh t w I asso ciated with it whic hisc hosen from an exp onen tial distribution with unit mean 2 Generating the transaction data The large itemsets w ere then used in order to generate the transaction data First the size S T of a transaction w as c hosen as a p oisson random v ariable with mean 026 T  Eac h transaction w as generated b y assigning maximal p oten tially large itemsets to it in succession The itemset to b e assigned to a transaction w as c hosen b y rolling an L sided w eigh ted die dep ending up on the w eigh t w I assigned to the corresp onding itemset I  If an itemset did not 014t exactly itw as assigned to the curren t transaction half the time and mo v ed to the next transaction the rest of the time In order to capture the fact that customers ma y not often buy all the items in a p oten tially large itemset together w e added some noise to the pro cess b y corrupting some of the added itemsets F or eac h itemset I w e decide a noise lev el n I 2 0  1 W e generated a geometric random v ariable G with parameter n I  While adding a p oten tially large itemset to a transaction w e dropp ed min f G j I jg random items from the transaction The noise lev el n I for eac h itemset I w as c hosen from a normal distribution with mean 0.5 and v ariance 0.1 W e shall also brie\015y describ e the sym b ols that w eha v e used in order to annotate the data The three primary factors whic hv ary are the a v erage transaction size 026 T  the size of an a v erage maximal p oten tially large itemset 026 L  and the n um b er of transactions b eing considered A data set ha ving 026 T  10 026 L  4 and 100 K transactions is denoted b y T10.I4.D100K W e tested ho w the primary threshold v aried with the n um b er of itemsets prestored This result is illustrated in Figure 8 The 014gure sho ws that the primary threshold initially drops considerably as the n um b er of primary itemsets increases but it b ottoms out after a while W e also illustrate the v ariation of the computational e\013ort required with the a v ailable storage space in Figure 9 W e note that for the itemset T10.I4.D100K the computational e\013ort required in order to 014nd additional large itemsets after 014nding 20000 itemsets increases considerably with the n um b er of itemsets prestored This is b ecause for this particular data set the a v erage size of a maximal p oten tially large itemset or bask et is only 4 Consequen tly  the total n um b er of p ossible large itemsets is relativ ely limited On the other hand the computational e\013ort for prepro cessing required b y the data sets T20.I6.D100K and T10.I6.D100K is relativ ely similar This sho ws that the computational e\013ort required to 014nd a sp eci\014c n um b er of primary itemsets is more sensitiv e to the size of a t ypical bask et in the data rather than to the size of a transaction W e also tested the v ariation in the online running time of the algorithm with the n um b er of rules generated W e ran the online queries for v arying lev els of input parameters in order to test the correlation b et w een the running time and the n um b er of rules generated This is illustrated in Figure 10 This result is signi\014can t in that it sho ws that the running time of the algorithm increases linearly with the n um b er of rules generated for all the data sets used The absolute magnitude of time required in order to generate the rules w as an order of magnitude smaller than the time required using a direct itemset generation approac h lik e DHP  A brief summary of some sample relativ e 014ndings is illustrated in T able 3 W e also discuss the lev el of redundancy presen t in the rule generation pro cedure Figures 11 and 12 illustrate that the n um b er of redundan t rules is often m uc h larger than the n um b er of essen tial rules The b enc hmark for measuring the lev el of redundancy is referred to as the redundancy ratio and is de\014ned as follo ws Redundancy Ratio  T otal Rules Generated Essen tial Rules 1 Th us when the redundancy ratio is K  then the n um ber of redundan t rules is K 000 1 times the n um b er of essen tial rules The redundancy ratio has b een plotted on the Y-axis in Figures 11 and 12 W e see that in most cases the n um ber of redundan t rules is signi\014can tl y larger than the n um ber of essen tial rules This illustrates the lev el to whic h useful rules often get buried in large n um b ers of redundan t rules Also the redundancy lev el is m uc h more sensitiv e to the supp ort rather than the con\014dence The lo w er the lev el of supp ort the higher the redundancy lev el 7 Conclusions and Summary In this pap er w ein v estigated the issue of online mining of asso ciation rules The t w o primary issues in v olv ed in online pro cessing are the running time and compactness in represen tation of the rules W e discussed an OLAP-lik e approac h for online mining asso ciation rules whic ha v oids redundancy  


Ac kno wledgemen ts W ew ould lik e to thank V S Ja yc handran and Jo el W olf for their extensiv e commen ts and suggestions References  Aggarw al C C and Y uP  S Online Generation of Asso ciation Rules IBM R ese ar ch R ep ort R C 20899  Agra w al R Imielinski T and Sw ami A Mining association rules b et w een sets of items in v ery large databases Pr o c e e dings of the A CM SIGMOD Confer enc e on Management of data pages 207-216 W ashington D C Ma y 1993  Agra w al R and Srik an tR.F ast Algorithms for Mining Asso ciation Rules in Large Databases Pr o c e e dings of the 20th International Confer enc eon V ery L ar ge Data Bases pages 478-499 Septem b er 1994  Agra w al R and Srik an t R Mining Sequen tial P atterns Pr o c e e dings of the 11th Internation al Confer enc e on Data Engine ering pages 3-14 Marc h 1995  Agra w al S Agra w al R Deshpande P  M Gupta A Naugh ton J F Ramakrishnan R and Sara w agi S On the Computation of Multidimensi on al Aggregates Pr o c e e dings of the 22nd International Confer enc eon V ery L ar ge Datab ases pages 506-521  Chen M S Han J and Y uP  S Data Mining An Ov erview from Database P ersp ectiv e IEEE T r ansactions on Know le dge and Data Engine ering V olume 8 Num b er 6 Decem b er 1996 pages 866-883  Dyreson C Information Retreiv al from an Incomplete Data Cub e Pr o c e e dings of the 22nd International Confer enc eon V ery L ar ge Datab ases pages 532-543 Mumbai India 1996  Gupta A Harinara y an V and Quass D Aggregatequery pro cessing in data w arehousing en vironmen ts Pr o c e e dings of the 21st Confer enc eon V ery L ar ge Datab ases Zuric h Switzerland Septem b er 1995  Han J and F u Y Disco v ery of Multiple-Lev el Assocaition Rules from Large Databases Pr o c e e dings of the 21st Internation al Confer enc eon V ery L ar ge Data Bases Zuric h Switzerland 1995 pages 420-431  Harinara y an V Ra jaraman A and Ullman J Implemen ting Data Cub es E\016cien tly  Pr o c e e dings of the 1996 A CM SIGMOD c onfer enc e on Management of Data Mon treal Canada June 1996 pages 205-227  Houtsma M and Sw ami A Set-orien ted Mining for Asso ciation Rules in Relational Databases Pr o c e e dings of the 11th Internation al Confer enc e on Data Engine ering Marc h 1995 pages 25-33  Kaufman L and Rousseeu wP J Finding Gr oups in Data A n Intr o duction to Cluster A nalysis Wiley Series in Probabilit y and Mathematical Statistics 1990  Klemen ttinen M Mannila H Ronk ainen P  T oiv onen H and V erk amo A I Finding in teresting rules from large sets of disco v ered asso ciation rules Pr o c e e dings of the Confer enc e on Information and Know le dge Managements Gaithersburg MD USA 28 No v 2 Dec 1994  Len t B Sw ami A and Widom J Clustering Asso ciation Rules Pr o c e e dings of the Thirte enth International Confer enc e on Data Engine ering pages 220-231 Birmingham UK April 1997  Mannila H T oiv onen H and V erk amo A I Ef\014cien t algorithms for disco v ering asso ciation rules AAAI Workshop on Know le dge Disc overy in Datab ases pages 181-192 Seattle W ashington July 1994  Ng R T and Han J E\016cien t and E\013ectiv e Clustering Metho ds for Spatial Data Mining Pr o c e e dings of the 20th Internation al Confer enc eon V ery L ar ge Data Bases San tiago Chile 1994 pages 144-155  P ark J S Chen M S and Y uP  S An E\013ectiv e Hash Based Algorithm for Mining Asso ciation Rules Pr o c e e dings of the 1995 A CM SIGMOD International Confer enc e on Management of Data pages 175-186 Ma y 1995  Piatetsky-Shapiro G Disco v ery  Analysis and Presentation of Strong Rules Know le dge Disc overy in Datab ases 1991  Sa v asere A Omiecinski E and Na v athe S An E\016cien t Algorithm for Mining Asso ciation Rules in Large Data Bases Pr o c e e dings of the 21st Internation al Confer enc eon V ery L ar ge Data Bases Zuric h Switzerland 1995 pages 432-444  Sh ukla A Deshpande P  M Naugh ton J F and Ramasam y K Storage Estimation for Multidimensi on al Aggregates in the Presence of Hierarc hies Pr o c e e dings of the 22nd Internationa l Confer enc eon V ery L ar ge Datab ases pages 522-531 Mum bai India 1996  Srik an t R and Agra w al R Mining Generalized Asso ciation Rules Pr o c e e dings of the 21st International Confer enc eon V ery L ar ge Data Bases  pages 407-419 Septem b er 1995  Srik an t R and Agra w al R Mining quan titativ e association rules in large relational tables Pr o c e e dings of the 1996 A CM SIGMOD Confer enc e on Management of Data Mon treal Canada June 1996  T oiv onen H Sampling Large Databases for Asso ciation Rules Pr o c e e dings of the 22nd International Conferenc eonV ery L ar ge Datab ases pages 134-145 Mumbai India 1996  Ziark o W The Disco v ery  Analysis and Represen tation of Data Dep endencies in Databases Know le dge Disc overy in Datab ases 1991 


CMP A Fast Decision Tree Classifier Using Multivariate Predictions  449 H Wang and C Zaniolo Mining Recurrent Items in Multimedia with Progressive Resolution Refinement  461 0 Zai'ane J Hun and H Zhu Panel Session 22 Is E-Commerce a New Wave for Database Research Moderator Anant Jhingran IBM T.J Watson Research Center USA Panelists Sesh Murthy IBM T.J Watson Research Center USA Sham Navathe, Georgia Institute of Technology USA Hamid Pirahesh IBM Almaden Research Center USA Krithi Ramamrithan University of Massachusetts-Amherst USA Industrial Session 23 Java and Databases Pure Java Databases for Deployed Applications  477 N Wyatt Database Technology for Internet Applications  700 A Nori Session 24 Association Rules and Correlations Finding Interesting Associations without Support Pruning  489 E Cohen M Datar S Fujiwara A Gionis P Indyk R Motwani J Ullman and C. Yang Dynamic Miss-Counting Algorithms Finding Implication and Similarity Rules with Confidence Pruning  501 S Fujiwara J Ullman and R Motwani Efficient Mining of Constrained Correlated Sets  512 G Grahne L Lakshmanan and X Wang Session 25 Spatial and Temporal Data Analyzing Range Queries on Spatial Data  525 J Jin N An and A Sivasubramaniam Data Redundancy and Duplicate Detection in Spatial Join Processing  535 J.-P Dittrich and B Seeger Query Plans for Conventional and Temporal Queries Involving Duplicates and Ordering  547 G Slivinskas C Jensen, and R Snodgrass xi 


Industrial Session 26 XML and Databases Oracle  The XML Enabled Data Management System  561 S Banerjee V Krishnamurthy M Krishnaprasad, and R Murthy XML and DB2  569 J Cheng and J Xu Session 27 High-Dimensional Data Independent Quantization An Index Compression Technique for High-Dimensional Data Spaces  577 S Berchtold, C Bohm H Jagadish H.-P. Kriegel and J Sander Deflating the Dimensionality Curse Using Multiple Fractal Dimensions  589 B.-U Pagel F Korn and C. Faloutsos Similarity Search for Multidimensional Data Sequences  599 S.-L Lee S.-J Chun D.-H Kim, J.-H Lee and C.-W Chung Session 28 Web-Based Systems WRAP An XML-Enabled Wrapper Construction System for Web Information Sources  611 L Liu C Pu and W. Hun Self-Adaptive User Profiles for Large-scale Data Delivery  622 U Cetintemel M Franklin and C. Giles Industrial Session 29 Main Memory and Small Footprint Databases In-Memory Data Management in the Application Tier  637 The TimesTen Team SQLServer for Windows CE -A Database Engine for Mobile and Embedded Platforms  642 P Seshadri and P. Garrett Join Enumeration in a Memory-Constrained Environment  645 I Bowman and G Paulley xii 


Plenary Panel Session 30 XML Databases   Moderator: Michael Carey, IBM Almaden Research Center USA Panelists Adam Bosworth, Microsoft Corporation USA David De Witt University of Wisconsin-Madison, USA Alon Levy University of Washington USA Bruce Lindsay IBM Almaden Research Center USA Jennifer Widom Stanford University USA Demo Session 1 Web Query Optimizer  661 V Zadorozhny L Bright L Raschid T Urhan and M Vidal ReQueSS: Relational Querying of Semi-structured Data  664 R Sunderraman The IDEAL Approach to Internet-Based Negotiation for E-Business  666 J Hammer C Huang Y Huang C Pluempitiwiriyawej M Lee H Li L Wang Y Liu and S Su READY A High Performance Event Notification Service  668 R Gruber B Krishnamurthy, and E Panagos A Multimedia Information Server with Mixed Workload Scheduling  670 G Nerjes DISIMA An Object-Oriented Approach to Developing an Image Database System  672 V Oria T Ozsu P Iglinski B Xu and L Cheng Demo Session 2 The Collaboration Management Infrastructure  677 H Schuster D Baker A Cichocki D Georgakopoulos and M Rusinkiewicz Assisting the Integration of Taxonomic Data The LITCHI Toolkit  679 I Sutherland J Robinson S Brandt A Jones S Embury W Gray R White and F Bisby TheaterLoc: Using Information Integration Technology to Rapidly Build Virtual Applications  681 G. Barish Y.4 Chen D Dipasquo, C Knoblock S Minton I Muslea and C Shahabi Lineage Tracing in a Data Warehousing System  683 Y Cui and J Widom xiii 


The Mentor-Lite Prototype A Light-Weight Workflow Management System  685 J Weissenfels M Gillmann 0 Roth, G Shegalov and W Wonner Location Prediction and Queries for Tracking Moving Objects  687 0 Wolfson B Xu and S Chamberlain Semiorder Database for Complex Activity Recognition in Multi-Sensory Environments  689 S Bhonsle A Gupta S Santini and R Jain Tutorial 1 Web Information Retrieval  693 M Henzinger Tutorial 2 Mobile and Wireless Database Access for Pervasive Computing  694 P Chrysanthis and E Pitoura Tutorial 3 Data Mining with Decision Trees  696 J Gehrke Tutorial 4 Directories Managing Data for Networked Applications  697 D Srivastava Tutorial 5 Indexing High-Dimensional Spaces Database Support for Next Decade\222s Applications  698 S Berchtold and D Keim xiv 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


