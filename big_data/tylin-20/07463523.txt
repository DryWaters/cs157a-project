IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY VOL 11 NO 8 AUGUST 2016 1847 Privacy-Preserving-Outsourced Association Rule Mining on Vertically Partitioned Databases Lichun Li Rongxing Lu Senior Member IEEE  Kim-Kwang Raymond Choo Senior Member IEEE  Anwitaman Datta and Jun Shao Abstract  Association rule mining and frequent itemset mining are two popular and widely studied data analysis techniques for a range of applications In this paper we focus on privacy-preserving mining on vertically partitioned databases In such a scenario data owners wish to learn the association rules or frequent itemsets from a collective data set and disclose as little information about their sensitive raw data as possible to other data owners and third parties To ensure data privacy we design an efcient homomorphic encryption scheme and 
a secure comparison scheme We then propose a cloud-aided frequent itemset mining solution which is used to build an association rule mining solution Our solutions are designed for outsourced databases that allow multiple data owners to efciently share their data securely without compromising on data privacy Our solutions leak less information about the raw data than most existing soluti ons In comparison to the only known solution achieving a similar privacy level as our proposed solutions the performance of our proposed solutions is three to ve orders of magnitude higher Based on our experiment ndings using different parameters and data sets we demonstrate that the run time in each of our solutions is only one order higher than that in the best non-p rivacy-preserving data mining algorithms Since both data and computing work are outsourced 
to the cloud servers the resource consumption at the data owner end is very low Index Terms  Association rule mining frequent itemset mining privacy-preserving data mining I I NTRODUCTION F REQUENT itemset mining and association rule mining two widely used data analysis techniques are generally used for discovering frequently co-occurring data items Manuscript received August 30 2015 revised February 24 2016 and April 6 2016 accepted April 16 2016 Date of publication May 2 2016 date of current version May 19 2016 This work was supported by Nanyang Technological University within th e Ministry of Education Tier 1 under Grant M4011450 The work of J Shao was supported in part by the National Natural Science Foundation of China under Grant 61472364 and in part by NSFZJ under Grant LR13F020003 The a ssociate editor coordinating the review of this manuscript and approving it for publication was Dr Sherman S.M Chow L Li and R Lu are with the School of Electrical and Electronic 
Engineering Nanyang Technological Un iversity Singapore 639798 e-mail lilichun@gmail.com rxlu@ntu.edu.sg K.-K R Choo is with the Department of Information Systems and Cyber Security The University of Texas at San Antonio San Antonio TX 78249 USA also with the School of In formation Technology and Mathematical Sciences University of South A ustralia Adelaide SA 5001 Australia and also with the School of Computer Science China University of Geosciences Wuhan 430074 China e-mail raymond.choo@fulbrightmail.org A Datta is with the School of Computer Science and Engineering Nanyang Technological University Singapore 639798 e-mail anwitaman@ntu.edu.sg J Shao is with the Department of Inf ormation Security Zhejiang Gongshang University Hangzhou 310018 China e-mail chn.junshao@gmail.com Color versions of one or more of the gures in this paper are available online at http://ieeexplore.ieee.org Digital Object Identiﬁer 10.1109/TIFS.2016.2561241 and interesting association relationships between data items respectively in large transaction databases These two techniques have been employed in applications such as market 
basket analysis health car e  w eb us age m i n i n g  3 bioinformatics  and p redi ct i o n  5 A t r ans act i o n d at abas e is a set of transactions and each transaction is a set of data items with a unique TID Transaction ID An itemset Z is regarded frequent if and only if Supp  Z   T s where T s is a threshold speciﬁed by the data miner Supp  Z  is Z s support which is deﬁned as Z s occurrence count in the database An association rule is expressed using X  Y  where X and Y are two disjoint itemsets X  Y indicates that X s occurrence implies Y s occurrence in the same transaction with a certain conﬁdence We will use a supermarket’s transaction database as an example where a transaction is 
some customer’s shopping list A customer buying bread and butter will also buy milk Then bread butter  milk is a possible association rule X  Y is meaningful and useful if the conﬁdence is high and X  Y is frequent More speciﬁcally X  Y is regarded as an association rule if and only if Supp  X  Y   T s and Conf  X  Y   T c  We deﬁne Conf  X  Y  as the conﬁdence of X  Y The latter is the probability of Y s occurrence given X s occurrence i.e Conf  X  Y   Supp  X  Y  Supp  X   
T c denotes the threshold speciﬁed by the data miner We also remark that the values of T s and T c are generally conﬁgured based on the type of transactions the usage of the mining result the size of database etc It is easy to mine association rules after mining frequent itemsets and obtaining their supports Most association rule mining algorithms are built based on frequent itemset mining algorithms Classic frequent itemset mining and association rule mining algorithms such as Apriori Ecl a t  7 and F P gro w t h 8 were designed for a centralized database setting where the raw data is stored in the central site for mining Privacy concerns were not considered in this setting Vaidya and Clifton 9 and Kantarcioglu and Clifton 10 ar e t h e r st to id en tif y a n d address privacy issues in horizontally  vertically partitioned 
databases Due to an increased understanding of the importance of data privacy e.g in the aftermath of the revelations by Edward Snowden a former NSA contractor a number of privacy-preserving mining solutions have been proposed in recent times In their settings there are multiple data owners wishing to learn association rules or frequent itemsets from their joint data However the data owners are not willing to send their raw data to a central site due to privacy concerns If each data owner has one or more rows i.e transactions 1556-6013  2016 I EEE Personal u se is perm itted but republication/redistri bution requires IEEE permission See http://www.ieee.org/publications_standards/publications/rights/index.html for more information 


1848 IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY VOL 11 NO 8 AUGUST 2016 in the joint database we say that the database is horizontally partitioned  If each data owner has one or more columns in the joint database the database is considered vertically partitioned  This paper focuses on vertically partitioned databases and as explained in  s uch d atabas es are u s e ful f or mark et basket analysis For example different businesses such as a fashion designer and a luxury watch designer sell different products to the same community These businesses collaborate to mine customer buying patterns from the joint database A transaction of the database contains the products that a customer had bought from one or more of the participating businesses and attributes such as the customer credit card number and date of purchase are used as TIDs Therefore each of the businesses i.e data owners will own some transaction partitions in the joint database However these businesses may not wish to disclose such data which include trade secrets e.g there may be other competing businesses sharing the same joint database and customer privacy e.g due to regulations in existing privacy regime Therefore a privacypreserving mining solution must be applied Other use cases can also be found in areas such as automotive safety a nd national security In this paper we propose a cloud-aided privacy-preserving frequent itemset mining solution for vertically partitioned databases which is then used to build a privacy-preserving association rule mining solution Both solutions are designed for applications where data owners have a high level of privacy requirement The solutions are also suitable for data owners looking to outsource data storage  i.e data owners can outsource their encrypted data and mining task to a semi-trusted i.e curious but honest cloud in a privacypreserving manner To the best of our knowledge this is the rst work on outsourced association rule mining and frequent itemset mining for vertically partitioned databases The key underlying techniques in our solutions are an efﬁcient homomorphic encryption scheme and a secure outsourced comparison scheme The contributions of this paper are three-fold  This paper proposes privacy-preserving mining solutions for high privacy requirements As shown in Figure 1 the proposed solutions are uniquely located in the design space Compared with most solutions our solutions achieve a higher privacy level as most existing solutions require either the sharing  exposure of raw data or the disclosure of the exact supports to data owners Such requirements result in the leakage of sensitive information of the raw data  O ur s o l u t i ons are d es i gned to avoid such complications We note that one of the frequent itemset mining solutions in can achi e v e t h e same privacy level as our proposed solutions However an association rule mining solution cannot be built based on the frequent itemset mining solution in  I n c ontrast we present solutions for both frequent itemset mining and association rule mining Moreover as shown in Section VII our frequent itemset mining solution is 3 to 5 orders faster Our solution is signiﬁcantly more efﬁcient due to our customized homomorphic encryption scheme The introduction of a semi-trusted third party  Fig 1 Design space of associatio n rule and frequent itemset mining solutions i.e the cloud also allows us to securely compute supports and compare supports with a threshold T s more efﬁciently  see Sections VIII and VII for related work and comparative summary respectively  This paper proposes an efﬁcient homomorphic encryption scheme and a secure outsourced comparison scheme To avoid the disclosure of supports/conﬁdences we design an efﬁcient homomorphic encryption scheme to facilitate secure outsourced computation of supports conﬁdences as well as a secure outsourced comparison scheme for comparing supports/conﬁdences with thresholds The proposed symmetric homomorphic encryption scheme is tailored for the proposed comparison The scheme only requi res modular additions and multiplications and is more efﬁcient than the homomorphic encryption schemes used in other association rule mining and frequent itemset mining solutions For example encryption computing in our scheme is three orders of magnitude faster than and  15 res p ect i v el y  T o t h e best of our knowledge the proposed secure comparison scheme is the rst scheme based on symmetric homomorphic encryption The proposed schemes are designed for the data mining solutions outlined in this paper but they can potentially be adopted in a wide range of secure computation applications  This paper proposes a ciphertext tag approach for canceling out ctitious data’s effect on mining result To hide the data owner’s raw data from the cloud we adapt the concept outlined in 16 b y en cr y p tin g items with a substitution cipher and adding ctitious transactions as a mitigation against frequency analysis attacks on the substitution cipher To allow secure and accurate computation of supports we design a ciphertext tag approach to cancel out ctitious transactions in a privacy-preserving manner Although our approach is designed for the data mining solutions outlined in this paper it has potential applications in other secure computation contexts such as secure data aggregation 


LI et al  PRIVACY-PRESERVING-OUTSOURCED ASSOCIATION RULE MINING ON VERTICALLY PARTITIONED DATABASES 1849 Fig 2 System model of outsourced data mining on joint database A Organization The remainder of this paper is organized as follows In Section II we formalize the system model and security model considered in this paper and identify the design goals The required background material on cryptographic techniques is provided in Section III In Section IV we present our proposed homomorphic encryption scheme and secure comparison scheme which will serve as the basis of our solutions In Section V we present our privacy-preserving solutions for association rule mining and frequent itemset mining on vertically partitioned databases followed by the security analysis and perform ance evaluation in Section VI and Section VII respectively Related work is discussed in Section VIII We conclude the paper in Section IX II M ODELS AND D ESIGN G OALS In this section we formalize the system model and security model used in this paper and identify the design goals A System Model The system model see Fig 2 is comprised of two or more data owners and a cloud Each data owner has a private database and the data owners encrypt their private databases prior to outsourcing the encrypted databases to the cloud Data owners can also request the cloud to mine association rules or frequent itemsets from the joint database on their behalf The honest but curious cloud is tasked with the compiling and storing of databases received from different data owners the mining of association rules or frequent itemsets for data owners and the sending of the mining result to relevant data owners B Security Model The cloud is considered honest but curious in this paper Firstly the cloud honestly stores and mines data for data owners Data owners pay for the cloud’s services and they will naturally choose a cloud believed to be honest e.g a cloud provider with a trusted reputation There are also techniques to detect dishonest clouds  18 a nd di s hones t cl ouds could be detected by simply comp aring the mining results from different clouds Secondly although the cloud is not malicious it is motivated to learn the data of data owners for nancial gains e.g for paid advertisem ent In other words the cloud will attempt to learn the raw data of the private databases and the mining results The cloud is assumed to have some background knowledge of some items and their frequencies hence it can launch frequency analysis attacks For each of these items the cloud may also know which data owner’s private database the item belongs to This makes such attacks easier because the cloud only needs to analyze frequencies in a private database to determine the ciphertext of a targeted item However we do not further assume the cloud has background knowledge of itemset frequency This is reasonable for many cases otherwise even the data owners themselves need to learn frequent itemsets Also we do not assume the cloud to be colluding with any data owner Hence colluding attacks and insider attacks are not considered in this paper Data owners are also considered collaborative but curious in this paper In the typical system setup for vertically partitioned databases data owners participate in the collaborative data mining in order to obtain the mining result For example a fashion designer and a luxury watch designer located in a major capital city contributing their datasets regarding consumer buying habits and preferences etc so that they can better understand the consumer and suggest products to suit their preferences Thus data owners wish to learn the mining result and are willing to collaborate with each other However some data owners may deviate from the cooperative mining protocol in order to learn the data of other data owner\(s as long as the deviation does not sabotage the mining result As mentioned earlier there are nancial gains in doing so We assume each data owner has some knowledge of other owners private databases This is not surprising Data owners are willing to participate in the collaborative mining which indicates that they may already have such knowledge With some knowledge of other owners private databases these data owners believe they can beneﬁt from the collaborative mining We assume each data owner knows the items and the size of any other data owner’s private database As vertically partitioned databases are being mined we also assume that each owner has more knowledge a bout other private databases TIDs We remark that it is not required that all owners private databases share the same set of TIDs although it is expected that they share a lot of TIDs Again we do not assume any data owner to be colluding with the cloud C Design Goals The goals of our proposed privacy-preserving association rule mining and frequent itemset mining for vertically partitioned databases are as follow  Privacy  Data owners should learn as little information about databases belonging to other data owners as possible More speciﬁcally a data owner’s raw transaction details should not be disclosed and the supports should be concealed to avoid leakage of information about the 


1850 IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY VOL 11 NO 8 AUGUST 2016 TABLE I A N E XAMPLE OF S UBSTITUTION A LPHABET raw data  S i m i l a rl y  e x act con dences s houl d b e concealed as they could be used to infer some information about the raw data The proposed solutions should also protect the mining results from the cloud  Efﬁciency  Privacy-preserving measures usually result in decreased performance of data mining and therefore any trade-off has to be realistic In our context the data mining latency shoul d be acceptable compared with the latencies of non-privacy-preserving data mining algorithms III P RELIMINARY S UBSTITUTION C IPHER  C RYPTOGRAPHIC H ASH F UNCTION AND H OMOMORPHIC E NCRYPTION In this section we outline the substitution cipher cryptographic hash function and homomorphic encryption which serve as the building blocks in our privacy-preserving data mining solutions A Substitution Cipher and Frequency Analysis A substitution cipher encrypts a message by substituting the units of the message with ciphertext units according to a substitution alphabet Substitution cipher has been used in outsourced association rule mining and frequent itemset mining  19]–[21 I n s uch u s e cas es  t he mes s a ge uni t s are the items in a transaction database Let  be the plaintext alphabet including all unique items appearing in a database Every item in  has a corresponding unique ciphertext A substitution alphabet example is shown in Table I To encrypt the database all items in the database are replaced with their corresponding ciphertexts Substitution cipher is subject to frequency analysis attack if the frequencies of message units are different Frequency analysis  the analysis of frequencies of ciphertext units or unit groups has been used to break classical ciphers such as substitution ciphers Attackers with some knowledge of the frequencies of message units or unit groups can recover some plaintext through frequency analysis For example if an attacker knows that bread and milk are the most and second most frequent items in a transaction database the attacker can infer that the most and second most frequent ciphertext units in the encrypted database correspond to bread and milk respectively To counter freque ncy analysis attack ctitious items or transactions can be added to hide item frequency B Cryptographic Hash Function A cryptographic hash function H  has the properties of pre-image resistance and collision resistance The former is related to a one-way function In other words when given a hash value h  it is computationally infeasible to nd a message m satisfying H  m   h  The property of collision resistance means the collision of hash values are very rare  i.e it is computationally infeasible to nd two distinct messages m 1 and m 2 satisfying H  m 1   H  m 2   Commonly used cryptographic hash functions include SHA-1  and SHA-2 23  C Homomorphic Encryption Homomorphic encryption scheme allows one or more plaintext operations e.g addition and multiplication to be carried out on the ciphertexts If the addition operation is allowed then the scheme is known as additive homomorphic encryption If the multiplication operation is allowed then the scheme is known as multiplicative homomorphic encryption In an additive homomorphic encryption scheme the ciphertext of the sum of two plaintexts m 1  m 2  can be obtained using some computation    on the ciphertexts of m 1 and m 2  without rst decrypting m 1 and m 2 or requiring the decryption key Additive homomorphic encryption also allows the user to obtain the ciphertext of m 1  m 2 by performing m 2 times of    computation on m 1 s ciphertext The most common additive homomorphic encryption schemes are Paillier encryption 14 and a variant of ElGamal encr yption  F or e x ampl e i n Paillier encryption let E PK  be the function of encrypting with the public key and    is modular multiplication in Paillier Given E PK  m 1   E PK  m 2  and the public key used in the encryption one can compute E PK  m 1  m 2  by performing a modular multiplication of E PK  m 1  and E PK  m 2   Similarly given E PK  m 1  m 2 and the public key one can compute E PK  m 1  m 2  by performing a modular exponentiation E PK  m 1  m 2  E PK  m 1  m 2   E PK  m 1   E PK  m 2  E PK  m 1  m 2   E PK  m 1   E PK  m 1    E PK  m 1      m 2 multiplications  E PK  m 1  m 2 In the remainder of this paper  denotes homomorphic addition  and the computing of the ciphertext of m 1  m 2 based on homomorphic addition is referred to as homomorphic scalar multiplication  In a multiplicative homomorphic encryption scheme the ciphertext of the product of two plaintexts m 1  m 2  can be obtained with some kind of computation    on the ciphertexts of m 1 and m 2  without rst decrypting m 1 and m 2 or requiring the decryption key The most common multiplicative homomorphic encryption scheme is ElGamal encryption  which is an asymmetric scheme IV P ROPOSED H OMOMORPHIC E NCRYPTION AND S ECURE O UTSOURCED C OMPARISON S CHEMES In this section we propose an efﬁcient homomorphic encryption scheme Using the proposed homomorphic encryption scheme we construct a secure outsourced comparison scheme Both schemes will then serve as the basis of our privacy-preserving mining solutions 


LI et al  PRIVACY-PRESERVING-OUTSOURCED ASSOCIATION RULE MINING ON VERTICALLY PARTITIONED DATABASES 1851 A Proposed Homomorphic Encryption Scheme Existing homomorphic encryption schemes are generally asymmetric  15 I n t hi s p aper  w e p ropos e a s y mmetric homomorphic encryption scheme using only modular additions and multiplications which is signiﬁcantly more efﬁcient than asymmetric schemes The scheme supports many homomorphic additions and limited number of homomorphic multiplications and comprises the following three algorithms  Key generation algorithm KeyGen   s  q  p   KeyGen  The key generation algorithm KeyGen  is a probabilistic algorithm which takes a security parameter  as input and outputs a secret key SK   s  q  and a public parameter p Both p and q are big primes and p  q  The bit length of q depends on the security parameter and s is a random number from Z  p   Encryption algorithm E  E  SK  m  d   s d  rq  m  mod p The encryption algorithm E  is a probabilistic algorithm which takes a secret key SK  a plaintext m  F q and a parameter d as inputs The algorithm outputs a ciphertext c  E  SK  m  d   The parameter d is a small positive integer called ciphertext degree  and we say the ciphertext is a d-degree ciphertext Let r denote a big random positive integer and the bit length of r   r   satisﬁes  r  q    p  Wesay r is the random ingredient of c  The encryption of a plaintext m is denoted by E  m  for short  Decryption algorithm D  D  SK  c  d    c  s  d mod p  mod q The decryption algorithm D  is a deterministic algorithm which takes a secret key SK  a ciphertext c  F p and the ciphertext’s degree d as inputs The algorithm outputs a plaintext m  D  SK  c  d  Let s  d denote the multiplicative inverse of s d in the eld F p The correctness proof of the decryption algorithm is given below D  SK  c  d    c  s  d mod p  mod q   s d  rq  m  mod p   s  d mod p  mod q   rq  m  mod q  m B Property of the Proposed Homomorphic Encryption 1 Homomorphic Multiplication Let c 1  c 2 be the ciphertexts of two plaintexts m 1  m 2  Then we have c 1  s d 1  r 1 q  m 1  mod p and c 2  s d 2  r 2 q  m 2  mod p for some random ingredients r 1 and r 2  As shown below given d 1 degree ciphertext c 1 and d 2 degree ciphertext c 2 the d 1  d 2 degree ciphertext of m 1  m 2 can be computed with a modular multiplication To correctly decrypt m 1  m 2 from its ciphertext  r 1 r 2 q  r 1 m 2  m 1 r 2  q  m 1  m 2  p must be satisﬁed where  r 1 r 2 q  r 1 m 2  m 1 r 2  is the random ingredient Therefore in Section V we choose the bit lengths which satisfy the condition and ensure the correctness of decryption It is not hard to do so as  q    m 1  and  q    m 2  and we have  r 1 r 2 q    r 1 m 2  m 1 r 2   We only need to ensure  r 1  r 2  2  q  1   p    c 1  c 2  mod p  s d 1  r 1 q  m 1  mod p  s d 2  r 2 q  m 2  mod p  s d 1  d 2  r 1 r 2 q 2  r 1 qm 2  m 1 r 2 q  m 1  m 2  mod p  s d 1  d 2  r 1 r 2 q  r 1 m 2  m 1 r 2  q  m 1  m 2  mod p 2 Homomorphic Addition As shown below the ciphertext of m 1  m 2 mod q can be computed by a modular addition of c 1 and c 2 if d 1  d 2  To correctly decrypt m 1  m 2 from its ciphertext  r 1  r 2  q  m 1  m 2  p must be satisﬁed Therefore in Section V we choose the bit lengths of p  q and random ingredients to ensure that all ciphertexts in our privacy-preserving mining solutions can be decrypted correctly c 1  c 2 mod p  s d 1  r 1 q  m 1  mod p  s d 2  r 2 q  m 2  mod p  s d 1  r 1  r 2  q  m 1  m 2  mod p if d 1  d 2 3 Homomorphic Subtraction Similarly as shown below homomorphic subtraction can be achieved with a modular subtraction To correctly decrypt m 1  m 2 from its ciphertext r 1  r 2 must be satisﬁed  c 1  c 2  mod p   s d 1  r 1 q  m 1   s d 2  r 2 q  m 2  mod p  s d 1  r 1  r 2  q  m 1  m 2  mod p if d 1  d 2 4 Degree Alignment for Homomorphic Addition Subtraction Homomorphic addition and subtraction requires ciphertexts sharing the same degree If c 1 and c 2 have different ciphertext degrees homomorphic addition subtraction can be performed after upgrading the lower-degree ciphertext to a ciphertext of the higher degree Suppose c 2 s degree d 2 is lower A d 1 degree ciphertext of m 2  c 012 2  can be computed by doing a homomorphic multiplication of c 2 and a  d 1  d 2   degree ciphertext of 1 Then we can do homomorphic addition/subtraction of c 1 and c 012 2  5 Homomorphic Scalar Multiplication Given m 1 s ciphertext c 1 and a plaintext m 2  the ciphertext of m 1  m 2 can be computed with a modular multipli cation To correctly decrypt m 1  m 2 from its ciphertext r 1 m 2 q  m 1  m 2  p must be satisﬁed Therefore in Section V we choose the bit lengths that the condition is satisﬁed which will ensure the correctness of decryption  c 1  m 2  mod p  s d 1  r 1 q  m 1  mod p  m 2 mod p  s d 1  r 1 m 2 q  m 1  m 2  mod p C Proposed Secure Outsourced Comparison Scheme The proposed secure comparison scheme is based on the symmetric homomorphic encryption scheme discussed in Section IV-A In our privacy-preserving data mining solutions data owners require the cloud to compare supports 


1852 IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY VOL 11 NO 8 AUGUST 2016 conﬁdences with thresholds However both supports and conﬁdences must be kept secret from the cloud and data owners while the comparison results must be kept secret from the cloud As shown in Section V these secure comparison problems can be transformed to the same form below Let m be a secret integer unknown to the cloud and data owners where m is in the range to the cloud and q     0 Data owners are indexed from 1 to t Let  i be a ciphertext of 1 generated by the i th data owner The cloud holds c  E  m mod q   p and q s bit length  q  and   i  t  i  1   All these ciphertexts share the same degree d  In our privacy-preserving data mining solutions c is computed by the cloud from outsourced encrypted data utilizing the homomorphic property The data owners hold SK and want to know whether m  0 The data owners need the cloud to compare m with 0 in a privacy-preserving manner However as described in the preceding paragraph m must be kept secret from the cloud and data owners while the comparison result is kept secret from the cloud The secure comparison scheme for the above problem is as follows  Firstly the cloud generates random integers u   v i  t  i  1   meeting the following four requirements u  t  i  1 v i v i  max    t  i  1   q  1  2    u  t  i  1 v i    u  t  i  1 v i   q  1  2 Note The above requirements do not require q to be disclosed to the cloud and the cloud can generate the u   v i  t  i  1  meeting above requirements as long as it knows    q    Secondly the cloud computes   c u   t i  1  v i i mod p  and sends  to data owners Note Due to the homomorphic property of the underlying encryption scheme  is the ciphertext of  m  u   t i  1 v i  mod q   Thirdly each data owner computes   D  SK  d    m  u   t i  1 v i  mod q  and compares  with  q  1  2 If  q  1  2 m  0 Otherwise m  0 Note u   v i  t  i  1  are used to mask the value of m  while preserving the sign of m  1 Correctness Let us now consider following two cases Case of m  0 Since u   t i  1 v i   and  q  1  2    u   t i  1 v i wehave  q  1  2    u  t  i  1 v i  m  u  t  i  1 v i     m  u  t  i  1 v i  mod q  m  u  t  i  1 v i   q  1  2  Fig 3 Privacy-preserving outs ourced association rule mining Case of m  1  Since u   t i  1 v i   and    u   t i  1 v i   q  1  2 we have    m  u  t  i  1 v i    u  t  i  1 v i   q  1  2   m  u  t  i  1 v i  mod q  q  m  u  t  i  1 v i  q   q  1  2   q  1  2 Thus we have m  0   m  u   t i  1 v i  mod q   q  1  2and m  1   m  u   t i  1 v i  mod q   q  1  2 Therefore a data owner can detect whether m  0or not by comparing    m  u   t i  1 v i  mod q to  q  1  2 V P RIVACY P RESERVING O UTSOURCED M INING In this section we present our privacy-preserving association rule mining and frequent itemset mining solutions using the homomorphic encryption scheme and secure comparison scheme proposed in Section IV as building blocks A Main Idea As shown in Fig 3 in our association rule mining solution each data owner owns a private database and data owners collaboratively mine their joint database’s association rules with the assistance of the cloud Our association rule mining solution includes two stages namely preprocessing and mining In the preprocessing stage data owners and the cloud collaborate to generate an enc rypted joint database at the cloud’s end and some auxiliary data for privacy-preserving mining Each data owner inserts ctitious transactions to his private database and encrypts items in the database with a substitution cipher The ctitious transactions are used to mitigate frequency analysis attacks due to the inherent weakness of the substitution cipher Once the databases have been encrypted they are outsourced to the cloud as part of the joint database 


LI et al  PRIVACY-PRESERVING-OUTSOURCED ASSOCIATION RULE MINING ON VERTICALLY PARTITIONED DATABASES 1853 TABLE II O RIGINAL D ATABASES B EFORE P REPROCESSING S TAGE  maintained by the cloud To allow the cloud to accurately mine the database which has ctitious transactions data owners tag each transaction in their outsourced databases and joint database with an encrypted realness value ERV using our customized homomorphic encryption scheme A realness value RV for short is either 0 or 1 which indicates that the transaction is ctitious or real respectively All ERVs are sent to the cloud Please note that the cloud is still unable to determine whether a transaction is ctitious or not even having ERVs In the mining stage the cloud mines association rules for data owners in a privacy-preserving manner The cloud mines association rule candidates from the encrypted joint database Because of the existence of ctitious transactions some candidates will be false positives To allow data owners detecting false positives the cloud veriﬁes candidates in a privacy-preserving manner The cloud computes each candidate’s encrypted verifying result from the ERVs utilizing our homomorphic encryption and secure comparison schemes The cloud returns all candidates and their encrypted verifying results to the data owners Finally data owners decrypt the encrypted verifying results and a ssociation rule candidates to recover the real association rules The main idea of our frequent itemset mining solution is similar and the only differences are in the mining stage In the mining stage the cloud mines frequent itemset candidates i.e the seemingly frequent itemsets are deﬁned later instead of association rule candidates The data owners then decrypt the encrypted verifying results and frequent itemset candidates to recover the real frequent itemsets B Frequent Itemset Mining Solution We describe our frequent itemset mining solution in the t data-owner setting below and an example is shown in Tables II III and IV Preprocessing Stage 1 Initialization for homomorphic encryption Let D 1  D 2  D t be the data owners A data owner say D 1  runs KeyGen  to generate a secret key key SK and a public parameter p of the proposed homomorphic encryption scheme p is shared with other data owners and the cloud while SK is shared only with data owners To use the proposed homomorphic encryption and outsourced secure comparison schemes in our solutions the bit lengths of keys and parameters must be carefully selected based not only on the security parameter  TABLE III P REPROCESSED D ATABASES FOR O UTSOURCING A FTER S TEP 5 OF P REPROCESSING S TAGE  TABLE IV J OINT D ATABASE IN THE C LOUD A FTER P REPROCESSING S TAGE  but also estimated maximum ciphertext degree and joint database size The selection rules are shown in Table V D 1 will select these bit lengths and the other data owners will verify whether the lengths satisfy the selection rules 2 Initialization for secure threshold comparison To enable outsourced secure comparison each data owner computes a 1-degree ciphertext of 1 and sends it to the cloud Let  i be the ciphertext generated by the i th data owner A data owner say D 1  computes c s  E  SK   T s mod q  1  and c e  E  SK  1  1   The owner sends c s  c e along with T s to the cloud To prevent D 1 deviating from the cooperative mining protocol the cloud sends the received c s  c e and T s to other data owners for correctness veriﬁcation 3 Each data owner hides data item frequencies by inserting ctitious transactions to his private database  16  s alg o r ith m i s u sed t o i n s er t  ctitio u s transactions see Appendix After inserting the 


1854 IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY VOL 11 NO 8 AUGUST 2016 ctitious transactions each item shares the same frequency with at least k  1 other items in the same private database The higher the value of k  the harder it is for the cloud to launch a frequency analysis attack Data owners need to agree on k s value Data owners exchange their desirable values of k  and the highest value will be used for all private databases 4 Each data owner tags his private database’s transactions with 1 degree ERVs  If a transaction is ctitious its RV is 0 Otherwise the RV is 1 The homomorphic encryption scheme proposed in Section IV is used to encrypt RVs to obtain ERVs We remark that any two ERVs are different even if their plaintexts are the same because of the probabilistic property of the encryption scheme Therefore the cloud cannot determine whether any two ERVs share the same plaintext or not 5 Each data owner encrypts items in his private database with a substitution cipher  6 Database outsourcing  Each data owner sends his encrypted database along with ERVs to the cloud and the cloud joins received transactions by TIDs to cr eate a joint database Note that a transaction in a data owner’s private database is a transaction partition of data owners joint database 7 Aggregated veriﬁcation of ERVs  Let  be the set of all ERVs The cloud computes    c   c mod p  and sends  to all data owners Because of the homomorphic property of the encryption scheme  is the ciphertext of all RVs sum and  s random ingredient is the sum of all ERVs random ingredients Every data owner decrypts  to verify the bit length of random ingredient explained in Section VI-B Mining Stage 1 The cloud runs a classic frequent itemset mining algorithm for centralized database named Eclat  t o nd out all frequent itemsets of the joint database  As the joint database contains ctitious data an itemset’s real support is the same as or lower than its support seen by the cloud Therefore a frequent itemset located here may not be real frequent itemset Therefore we refer to the frequent itemsets located here as  seemingly frequent itemsets  which contain all real frequent itemsets The Eclat algorithm  is chos en o v e r o ther clas s i c algorithms here because it can generate the TID sets required in the next step as a byproduct 2 The cloud computes the encrypted support for each seemingly frequent itemset  An itemset X s encrypted support E  Supp  X  is computed using the ERVs of the transactions containing X  The TID set of such transactions is generated in the previous step as a byproduct Let the set V  X  be the indices of transactions containing X andthe set M  X  be the indices of the data owners involving X  All items in X are from these data owners and each of these owners has at least one item in X  Let ERV i  j be the ERV for data owner D j s partition of the i th transaction The i th transaction which may contain ctitious data truly contains X if ERV i  j is a ciphertext of 1 for every j  M  x   Due to the properties of the proposed homomorphic encryption scheme the cloud can compute E  Supp  X     i  V  x   j  M  x  ERV i  j  mod p without knowing the plaintexts In the above equation  j  M  x  ERV i  j mod p is a ciphertext of 1 if and only if each of the data owners M  X  has a real partition in the i th transaction Otherwise it is a ciphertext of 0 3 For each seemingly frequent itemset the cloud veriﬁes whether it is real frequent or not in a privacy-preserving manner and computes its ESVR  Suppose Z is such an itemset Recall that E  Supp  Z  has been computed in the previous step Utilizing the homomorphic property of our encryption scheme the cloud computes E  Supp  Z   T s    E  Supp  Z   c s  mod p and compares Supp  Z   T s with 0 using our secure comparison scheme The encrypted comparison result is the ESVR Note As Supp  Z   T s  0 015 Supp  Z   T s  the data owners can decrypt Z s ESVR to determine whether Z is a real frequent or not 4 The cloud returns seemingly frequent itemsets and their ESVRs to involved data owners  5 The data owners decrypt the received seemingly frequent itemsets ESVRs to determine the real frequent itemsets and decrypt the revealed real frequent itemsets encrypted with a substitution cipher  For each seemingly frequent itemset a data owner rst decrypts its ESVR to determine whether the itemset is really a real frequent If it is real frequent then the data owner will decrypt it In the rst step of preprocessing stage using exact maximum ciphertext degree and joint database size to select bit lengths could reduce ciphertext size These exact values could be obtained from the cloud after the rst step of mining stage The maximum ciphertext degree in our solutions is the maximum number of data owners involved in one seemingly frequent itemset To reduce ciphertext size data owners can defer the step of initialization for homomorphic encryption until the exact values are obtained Subsequently ERV generation and initialization for secure comparison will also be deferred The only drawback is an increase in the communication rounds required to obtain the above exact values and to send ERVs to the cloud separately Currently ERVs are sent along with the databases C Association Rule Mining Solution Based on the above frequent itemset mining solution we can build a cloud-aided privacy-preserving association rule mining 


LI et al  PRIVACY-PRESERVING-OUTSOURCED ASSOCIATION RULE MINING ON VERTICALLY PARTITIONED DATABASES 1855 solution for vertically partitioned databases The solution is given below 1 All data owners and the cloud run the above frequent itemset mining solution to mine frequent itemsets Eventually the cloud nds out all seemingly frequent itemsets and obtains encrypted supports and ESVRs If data owners only want to learn the association rules without learning the frequent itemsets the cloud does not need to return these itemsets and ESVRs in the running In addition data owners do not need to decrypt frequent itemsets 2 Initialization for secure threshold comparison A data owner say D 1  computes c z  E  SK  0  and sends c z along with n 1and n 2 to the cloud where n 1and n 2aretwointegersand n 2  n 1  T c Toprevent D 1 deviating from the cooperative mining protocol the cloud sends these received ciphertexts and plaintexts to other data owners for co rrectness veriﬁcation To reduce communication rounds this step can be performed together with the initialization for secure threshold comparison step in frequent itemset mining 3 The cloud generates association rule candidates  An association rule candidate X  Y that satisﬁes X  Y  and X  Y where X  Y and X  Y are seemingly frequent itemsets 4 For each association rule candidate the cloud veriﬁes its conﬁdence in a privacy-preserving manner and computes its ECVR Encrypted Conﬁdence Verifying Result  For any association rule candidate X  Y  both X  Y and X are seemingly frequent itemsets Using their encrypted supports computed earlier the cloud computes E  Supp  X  Y   n 1  Supp  X   n 2    E  Supp  X  Y   n 1   c z  E  Supp  X   n 2  mod p and compares Supp  X  Y   n 1  Supp  X   n 2 with 0 using our secure comparison scheme The encrypted comparison result is the ECVR Note From 1 we observe that the ECVR can be used to determine whether the conﬁdence is over T c or not Supp  X  Y   n 1  Supp  X   n 2  0 015 Supp  X  Y  Supp  X   n 2  n 1 015 Conf  X  Y   T c 1 5 The cloud returns association rule candidates ESVRs and ECVRs to involved data owners  6 The data owners decrypt association rule candidates ESVRs and ECVRs to nd out real association rules  For a candidate X  Y  the data owners will need to rst decrypt the ESVR of X  Y to determine whether Supp  X  Y   T s or not If yes the data owners will decrypt the ECVR of X  Y to determine whether Conf  X  Y   T c or not If yes the data owners will then decrypt X and Y to recover the real association rule in plaintext as items in the joint database are encrypted with a substitution cipher VI S ECURITY A NALYSIS In this section we analyze the security properties of the proposed solutions focusing on how our solutions can protect a data owner’s data from the cloud and the other data owners A Security Under the Cloud’s Attacks 1 Conﬁdentiality of Transactions Under Frequency Analysis Attack In our solutions items are encrypted with a substitution cipher Recall that substitution cipher is subject to frequency analysis attacks To counter such an attack item frequency is hidden by adding ctitious transactions to data owners private databases based on s al gori t h m In contrast to the approach in w e a ppl y t hi s a l gori t h m i n vertically partitioned databases instead of a single database and we tag transactions with ERVs These differences will not however undermine the security under a frequency analysis attack as explained below 1 Applying this algorithm in vertically partitioned databases will not undermine the security Data owners encrypted databases are uploaded to the cloud and these databases do not share any items So cracking one of these databases by item frequency analysis is independent of other databases Then from 16 Th 4  we k n o w t h a t t h e cr ack p r o b a b ility f o r a n item or itemset in such a database is no more than 1  k Now let us analyze the security of th e joined database The cloud joins the above-mentioned databases Let X be an itemset of the joined database and suppose X s item\(s are from b data owner\(s Then X can be divided into b itemset\(s and each has only one data owner’s item\(s To crack X  the attacker has to crack all b itemset\(s Because cracking one of these itemsets is independent of the other itemsets the probability of cracking X is no more than  1  k  b As t  b  1 the crack probability for an item or itemset in our solutions is still no more than 1  k  2 ERVs will not undermine the security The use of ERVs cancels out ctitious transactions in the mining result result but the cloud cannot detect ctitious transactions and reveal real item frequency based on ERVs ERVs are encrypted with a probabilistic encryption scheme and any two ERVs are different even if their plain texts are the same Therefore the cloud cannot distinguish whether a transaction is real or not from its ERV The cloud is not able to tell whether any two given transactions share the same realness value Without real item frequency the cloud launch frequency analysis attack on the substitution cipher Without knowing the plaintexts of encrypted items the cloud cannot learn any sensitive information about the transaction data and mining result of the outsourced database 2 Conﬁdentiality of TIDs The original TIDs of some databases may contain sensitive information To hide such information the TIDs in the out sourced databases are replaced by the hash values of the original TIDs Because of the preimage resistance property of cryptographic hash function the cloud cannot recover original TIDs from the TIDs used in the outsourced databases 


1856 IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY VOL 11 NO 8 AUGUST 2016 TABLE V E XPERIMENTAL S ETTINGS B Security Under Data Owners Attacks Attack Via Chosen Random Ingredients In our solutions data owners are not required to exchange any plaintext or ciphertext i.e encryption of their private data In addition due to the use of the underlying homomorphic encryption scheme and secure comparison scheme the exact supports and conﬁdences are concealed from any data owner However there is still a possible attack via chosen random ingredients A data owner may use ERVs random ingredients to tag some transactions and verify whether such a transaction contains a given itemset or not For example the data owner could compute an ERV with a customized random ingredient The random ingredient’s bit length is longer than any other random ingredient’s in the preprocessing stage For each received seemingly frequent itemset the data owner decrypts its ESVR and obtains the ESVR’s random ingredient If the random ingredient matches the pattern of the customized random ingredient’s most signiﬁcant bits it is an indication that the ERV with the customized random ingredient has been used to compute the ESVR Thus the data owner knows the transaction associated with the ERV contains the itemset To prevent such an attack we carefully conﬁgure the bit lengths of random ingredients An example is presented in Table V The random ingredients in  1  2  t are used to mask chosen random ingredients in ERVs Also in the preprocessing stage each data owner must verify c s  c z  c e and that ERVs are generated honestly with random ingredients of the right bit lengths In the last step of preprocessing stage the random ingredients of ERVs are veriﬁed in an aggregated manner By examining the sum of these random ingredients data owners can be assured that any chosen random ingredient will be masked C Security of Underlying Homomorphic Encryption Scheme The security of underlying homomorphic encryption scheme depends on the hardness of solving nonlinear systems In the proposed mining solutions a number of plaintexts and their corresponding ciphertexts i.e c s  c z    i  t  i  1   are disclosed to the cloud Therefore the underlying homomorphic encryption scheme should be secure under known-plaintext attacks In our homomorphic encryption scheme to encrypt a plaintext m i and obtain the corresponding ciphertext c i  we require the use of two secrets q  s and a random ingredient r i  From a known  m i  c i  pair the attacker can get a nonlinear equation of three unknowns q  s  r i  s  q  r i  m i   c i From w known pairs the attacker can generate an underdetermined nonlinear system of w equations and the number of unknowns are w  2 If the attacker can solve this system he can learn the secret key of the encryption scheme Security Can Be Achieved by Increasing Hardness of Solving Above Nonlinear System Solving underdetermined nonlinear systems is NP-hard while solving overdetermined systems can be done in polynomial time The attacker may attack a nonlinear system by guessing the values of some unknowns  i f gues s i ng t h e c orrect v a l u es i s not v e ry hard The attacker can generate many overdetermined systems from the targeted underdetermined nonlinear system by xing some unknowns 3 unknowns for the system above to all possible values These unknowns will be viewed as constants in the generated systems By solving the generated overdetermined systems the attacker nds the solution to the targeted underdetermined nonlinear system To prevent such attacks we can conﬁgure large ranges or bit lengths for q  s  r i to compound the challenges of guessing the correct values An example of the conﬁguration is presented in Table V D Security of Underlying Secure Comparison Scheme The proposed secure comparison scheme is used in our solutions to conceal the exact support values and conﬁdence values from the data owners From the correctness proof in Section IV-C we know that m i  0   q  1  2     m i  1  q       q  1  2 


LI et al  PRIVACY-PRESERVING-OUTSOURCED ASSOCIATION RULE MINING ON VERTICALLY PARTITIONED DATABASES 1857 Fig 4 Running time comparison  t  4and k  12 If  q  1  2 m could be any value in the range  0    Otherwise m couldbeanyvaluein   0   By observing   a data owner knows whether m  0 or not but m s range cannot be deduced As our design goal is to conceal exact supports it is sufﬁcient to conceal m s value in many possible values In other words we do not need a secure comparison scheme to conceal more information VII P ERFORMANCE E VA L UAT I O N In this section we evaluate the computational complexity communication complexity and storage cost of our association rule mining and frequent itemset mining solutions In the evaluation we choose one of s s o l u t i ons and c l a s s i c nonprivacy-preserving algorithms as the baseline The former is chosen because it and our solutions achieve the same privacy level In contrast other solutions achieve lower privacy levels Classic algorithms are chosen as baselines because they are the most efﬁcient known solutions A Computational Complexity 1 Comparing With Classic Algorithms We used the running time to evaluate the computational complexity To demonstrate the feasibility of our solutions we compare our solutions with classic non-privacy-preserving algorithms which are the most efﬁcient known solutions We evaluated our solutions and three classic non-privacypreserving algorithms Apriori Eclat and FP-growth using two datasets retail and pumsb from 26  T h e r e tail d a taset from Tom Brijs contains anonymous retail market basket data in a Belgian retail store while the pumsb dataset contains census data for population and housing The retail and pumsb datasets contain 88,162 and 49,046 transactions respectively To simulate t data owners we vertically partitioned each dataset into t databases randomly Our solutions are implemented in JAVA and we use a JAVA implementation  of A p ri ori  Ecl a t a nd F P gro w t h algorithms in our experiments All implementations are singlethreaded implementations To ensure a fair comparison in all experiments machines playing the roles of cloud or data owner have the same hardware and software settings The settings and the parameters of our solutions are shown in Table V The results are shown in Figs 4 5 and 6 As the running time of association rule mining is only slightly higher than Fig 5 Running time under different data owner count t  k is xed to 16 Fig 6 Running time under different k  t is xed to 2 that of frequent itemset mining only the results of association rule mining are presented We show our solutions running time at the cloud’s end i.e running time of mining and data owner owner side i.e running time of preprocessing and decrypting separately As expected our solutions are not as efﬁcient as the most efﬁcient algorithms  solutions of low privacy levels However they achieve a higher privacy level with an acceptable running time Compared with the fastest algorithm’s running time the cloud’s running time is about one order higher for most cases while data owner’s running time is very low This is the classic trade-off between privacypreserving and efﬁciency From Figs 5 and 6 we also observe that running time changes with increasing values of k and t  The cloud’s running time increases with t as d max increases with t and a larger d max results in larger ciphertext size and more computations The cloud’s running time increases with k for the retail dataset but barely changes for the pumsb dataset The increase in running time for retail dataset is due to the increase in ctitious data However the pumsb dataset is very dense and the supports are already very high without including ctitious data Thus adding more ctitious data hardly changes the number of seemingly frequent itemsets and their supports We can also observe that data owner’s running time decreases 


1858 IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY VOL 11 NO 8 AUGUST 2016 TABLE VI E STIMATED R UNNING T IME OF  s S OLUTION when t increases The reason is simple If the same joint database is vertically partitioned to more data owners each data owner’s dataset is smaller Preprocessing a smaller dataset requires less time Data owner’s running time doesn’t increase with k either Such a phenomenon can also be explained using 16  s alg o r ith m f o r ad d i n g ctitio u s tr an sactions Speciﬁcally data owner’s running time is dominated by the time to run this algorithm which is hardly affected by changes in the values of k  In summary increasing t and k usually results in a higher running time at the cloud end without resulting in an increase in data owner’s running time 2 Comparing With the Solution Achieving the Same Privacy Level To the best of our knowledge the only existing privacy-preserving solution that does not leak sensitive information of the raw data is one of s frequent itemset mining solutions hereafter referred to as  s strong solution in this paper This solution cannot be used for association rule mining whilst we have solutions for both association rule mining and frequent itemset mining Similar to our solutions  s s t rong s o l u t i o n u s e s homomorphic encryption However it needs to use asymmetric homomorphic encryption scheme which is computationally expensive Reference  s s t rong s o l u t i o n r equi res a bout n  F encryptions as well as  n  T s   F homomorphic additions and scalar multiplications F is the number of frequent itemsets This solution’s running time is dominated by these expensive operations We evaluate its running time by estimating the required time to undertake the operations  see Table VI To estimate the running time we measure the speeds of two popular asymmetric additive homomorphic encryption schemes i.e Paillier Paillier and ElGamal implemented in Java and we r emark that ElGamal is the scheme suggested by T he s p eeds a re meas ured us i n g a machine of the same speciﬁcations in our evaluations see Table V and so are the datasets and parameters Compared with the result of our solution in Fig 4 the running time of  s s t rong s o l u t i o n i s s e v eral orders of magnitude B Communication Complexity and Storage Cost Similar to most other solutions our solutions require constant communication rounds In the preprocessing stage some keys and parameters are shared among t data owners These keys and parameters can be sent to data owners in parallel In the mining stage all mining results can be sent to data TABLE VII T RANSACTION C OUNT OF J OINT D ATABASE R ETAIL  TABLE VIII T RANSACTION C OUNT OF J OINT D ATABASE P UMSB  owners in a communication round Therefore the number of communication rounds does not grow if t  frequent itemsets or association rules increases The communication trafﬁc and storage cost in our solutions are dominated by the joint database size and the size of all ERVs Let n and n 012 be the transaction count of the joint database with and without ctitious transactions respectively Tables VII and VIII list the joint database size of two datasets under different settings of k and t  The joint database in our solutions contains ctitious transactions while the one in class algorithms does not We can observe from Tables VII and VII that the joint database size in our solutions is a few times larger and the size grows with k and t  The number of ERVs is at most n 012  t  O  n  t   A ciphertext’s size is O   d max   O   t  where  is the security parameter typically 80 Normally d max can be viewed as a small constant d max is not larger than 4 for most settings in the above experiments and the largest d max observed in the above experiments is 6 Let m be the average transaction size Then the communication trafﬁc and and storage cost in our solutions are both O  n  m  n    t  d max   The trafﬁc and cost in classic algorithms are O  n  m   For most reasonable transaction sizes our solutions resulted in an in communication trafﬁc and storage cost only by a few times The storage cost in  s s t rong solution is O  n  m   while the communication trafﬁc is O  T s  t  F  C  where F is the number of frequent itemsets C is the ciphertext size in 13  s str o n g so lu tio n  wh ich i s at least 2048 2048 bits In many settings our solutions trafﬁc is not any higher than the trafﬁc of s s t rong solution VIII R ELATED W ORK A Privacy-Preserving Association Rule Mining and Frequent Itemset Mining on Vertically Partitioned Databases In t h e  rs t w ork t o i dent i f y a nd addres s p ri v a c y i s s u es in vertically partitioned databases a secure scalar product protocol is presented and used to build a privacy-preserving frequent itemset mining solution Association rules can then be found given frequent itemsets and their supports Since 


LI et al  PRIVACY-PRESERVING-OUTSOURCED ASSOCIATION RULE MINING ON VERTICALLY PARTITIONED DATABASES 1859 the publication of this seminal work a number of privacypreserving association rule mining or frequent itemset mining solutions have been published in the literature see 11   1 3   28]–[31 The most relevant work is the privacy-preserving association rule mining solution presented in I n t hi s s ol ut i on a d at a owner known as the master is responsible for the mining The other data owners known as slaves insert ctitious transactions to their respectiv e datasets and send the datasets to the master Each data owner will also send his set of real transactions IDs to a semi-trusted third-party server The third-party server is assumed not to be colluding with any data owner but it cannot be trusted to hold the raw data The master generates association rule candidates from the joint database containing ctitious data For each rule candidate X  Y  the master sends the ID lists of the transactions containing X  Y and the transactions containing X to the third-party server The server veriﬁes if the rule is qualiﬁed or not Similar to our solutions a semi-trusted third-party is utilized for the mining However unlike our solutions a data owner i.e the master does the majority of the computational work Therefore we can hardly say that such a solution is an outsourced mining solution Though ctitious data are added in datasets to lower data usability the master is able to learn signiﬁcant information about other data owners raw data from the received datasets In cont rast our solutions do not leak such information as we do not rely on one particular data owner to undertake the computations and we also encrypt the datasets All existing solutions with the exception of  d o not utilize a third-party server to server to compute the mining result Some solutions  13 us e a s y mmet r i c encryption to compute the supports of itemsets while other solutions 28]–[30 us e a s ecure s cal ar product p rot o col  a s et intersection cardinality protocol or a secret sharing scheme to perform these computations A majority of these solutions expose exact supports to all data owners resulting in the leakage of information about the data owners raw data  The only exception is one of s s o l u t i ons  I n  13 t here are two privacy-preserving solutions for frequent itemset mining The rst solution exposes exact supports which is not desirable The second solution does not expose exact supports However association rules cannot be mined based on the result of second solution because conﬁdences cannot be computed without the exact supports In addition this solution’s method cannot be used to mine association rules because securely computing conﬁdence is more complicated than computing support In comparison with this solution our frequent itemset mining solution’s computational complexity is signiﬁcantly lower Our solutions do not expose exact supports or conﬁdences to data owners Different from existing solutions based on homomorphic encryption we use symmetric homomorphic encryption instead of asymmetric homomorphic encryption and the manner in which we use homomorphic encryption also differs from existing solutions In our approach we use homomorphic encryption to create ERVs and build our secure outsourced comparison scheme B Privacy-Preserving Outsour ced Association Rule Mining and Frequent Itemset Mining Privacy-preserving outsourced frequent itemset mining and association rule mining have been studied in the setting of a single data owner  19]–[21 I n e xi s t i n g s ol ut i ons  the data owner outsources thei r data and the mining task to the cloud but at the same time wish to keep the raw data secret from the cloud Generally data items in the database are encrypted using a substitution cipher prior to outsourcing Reference  propos ed a s ol ut i o n t o c ount er frequency analysis attack on substitution cipher However a later work demons t r at ed t h at 19 s s o l u t i o n i s not s ecure Giannotti et al proposed a solution based on k anonymity frequency   21 T o c ount er frequenc y a nal y s i s a t t ack the data owner inserts ctitious transactions in the encrypted database to conceal the item frequency After inserting the ctitious transactions any item in the encrypted database will share the same frequency with at least k  1 other items The data owner sends the encrypted database of both the real and ctitious transactions to the cloud The cloud runs a classic frequent itemset mining algorithm and returns the result frequent itemsets and their supports to the data owner The data owner revises these itemsets supports by subtracting them with these itemsets corresponding occurrence counts in the ctitious transactions respectively Finally the data owner decrypts the received itemsets with the revised supports higher than the frequency threshold an d generates association rules based on found frequent itemsets Our solutions use their techniques to conceal the raw data from the cloud and mitigate frequency analysis attack that can be undertaken by the cloud Using these techniques alone however is not sufﬁcient to protect data privacy in the vertically partitioned database setting To cancel out ctitious transactions both 21 an d  1 6  require the data owner to count itemset occurrences in ctitious transactions In the vertically partitioned database setting data owners are unable to perform such calculation using the techniques described in and  16 I n our s o l u t i ons  the cloud rather than the data owners cancels out ctitious transactions in a privacy-preserving manner and the underlying techniques are our homomorphic encryption secure comparison and ciphertext tag schemes Another recent work  propos ed a p ri v a c y pres e rving outsourced association rule mining solution based on predicate encryption This solution is resilient to chosen-plaintext attacks on encrypted items but it is vulnerable to frequency analysis attacks Applying this solution to vertically partitioned databases will also result in the leakage of the exact supports to data owners In this paper our adversary model is different We assume the cloud has knowledge of the item frequencies instead of chosen plaintext-ciphertext pairs and our solutions are resilient to frequency analysis attacks C Other Related Work Other than the settings of vertically partitioned databases and cloud/third-party-aided mining privacy-preserving frequent itemset mining and association rule mining have 


1860 IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY VOL 11 NO 8 AUGUST 2016 been studied in the settings of horizontally partitioned databases   33]–[35 d at a publ i s hi ng 36 and d i f ferent i a l privacy  T hes e s e t t i ngs are b e yond t h e s cope of t h i s paper  IX C ONCLUDING R EMARKS In this paper we proposed a privacy-preserving outsourced frequent itemset mining solution for vertically partitioned databases This allows the data owners to outsource mining task on their joint data in a privacy-preserving manner privacypreserving manner Based on this solution we built a privacypreserving outsourced association rule partitioned databases Our solutions protect data owner’s raw data from other data owners and the cloud Our solutions also ensure the privacy of the mining results from the cloud Compared with most existing solutions our solutions leak less information about the data owners raw data Our evaluation has also demonstrated that our solutions are very efﬁci ent therefore our solutions are suitable to be used by data owners wishing to outsource their databases to the cloud but require a high level of privacy without compromising on performance To realize our solutions an efﬁcient homomorphic encryption scheme and a secure outsourced comparison scheme were presented in this paper Both schemes have potential usage in other secure computation applications such as secure data aggregation beyond the data mining solutions described in this paper Demonstrating the u tility of the p roposed homomorphic encryption scheme and outsourced comparison scheme in other settings will be the focus of future research A PPENDIX I NSERTING F ICTITIOUS T RANSACTIONS  s A LGORITHM  An algorithm to counter frequency analysis attacks on the outsourced database encrypted with a substitution cipher was proposed in F or the purpos e o f c oncealing t he item frequency this algorithm inserts ctitious transactions in the database to be oursourced The goal is to ensure that each item share the same frequency with at least k  1 items The algorithm is summarized as follows also see  Firstly the data owner scans the database to count each individual item’s support  Secondly the data owner groups items considering the supports and co-occurrence of items The data owner sorts items in decreasing order of support Starting from the rst of the sorted item list i.e the item with the highest support the data owner assigns every k adjacent items to a new created group If there are less than k unassigned items remaining these items will be assigned to the last created group The data owner swaps items from different groups to ensure that all items in the same group do not occur together in the same transaction  Thirdly for each item in each group the data owner calculates the difference between the item’s support and the highest support in the group The difference is deﬁned as the noise of the item  Fourthly to achieve k anonymity frequency the data owner generates ctitious transactions based on the result of the third step The number of an item’s occurrences in the ctitious transactions is equal to its noise calculated in the third step After inserting the ctitious transactions all items in the same group share the same support A CKNOWLEDGMENT The authors would like to thank Quach Vinh Thanh the Associate Editor and the three anonymous reviewers for providing constructive and gen erous feedback Despite their invaluable assistance any erro rs remaining in this paper are solely attributed to the authors R EFERENCES  T  B rijs  G  S winnen K V a nhoof a nd G W e ts   Us ing a s s o ciation r ules for product assortment decisions A case study in Proc SIGKDD  1999 pp 254–260  S  E  B ros s e tte A  P  S prague J  M  H ardin K B W a ites  W  T  J ones  and S A Moser Association rules and data mining in hospital infection control and public health surveillance J Amer Med Inform Assoc  vol 5 no 4 pp 373–381 1998 3 B  M obas h er  H  D ai T  L uo and M  N akaga w a E f f ecti v e p er s onalization based on association rule discovery from Web usage data in Proc WIDM  2001 pp 9–15  C  C reighton and S  H anas h Mining g ene e xpres s i on databas e s f or association rules Bioinformatics  vol 19 no 1 pp 79–86 2003 5 X  Y in and J  H an  CP A R  C las s i  cation b as ed on pr edicti v e as s o ciation rules in Proc SIAM SDM  2003 pp 1–5 6 R  A gr a w al and R  S r i kant  F a s t algor ithm s f o r m ining a s s o ciation rules in Proc VLDB  1994 pp 1–13 7 M  J  Z aki S calable algor ithm s f o r a s s o ciation m ining  IEEE Trans Knowl Data Eng  vol 12 no 3 pp 372–390 May/Jun 2000  J  H an J  P ei a nd Y  Y i n Minin g frequent patterns without candidate generation in Proc ACM SIGMOD  pp 1–12 2000 9 J  V aidya and C  C lif ton P r i v a c y pr es er ving as s o ciation r ule m ining i n vertically partitioned data in Proc SIGKDD  2002 pp 639–644  M Kantarcioglu a nd C Clifton Pri vacy-preserving distributed mining of association rules on horizontally partitioned data IEEE Trans Knowl Data Eng  vol 16 no 9 pp 1026–1037 Sep 2004  B Rozenber g and E  G udes   A s s o ciation r ules m i ning in v e rtically partitioned databases Data Knowl Eng  vol 59 no 2 pp 378–396 2006  J  Z h an S  M atwin and L  C hang Pri v a c y pres e rving c ollaborati v e association rule mining in Proc DBSEC  2005 pp 153–165  S Z hong Pri v a c y pres e rving a lgorithm s for d is trib uted m i ning of frequent itemsets Inf Sci  vol 177 no 2 pp 490–503 2007  P  P a illier  P ublick e y cr yptos ys tem s bas e d o n c om pos ite de gr ee r e s i duosity classes in Proc EUROCRYPT  1999 pp 223–238  R Cram er  R  G ennaro a nd B Schoenm ak ers   A s ecure and optim ally efﬁcient multi-authority election scheme Eur Trans Telecommun  vol 8 no 5 pp 481–490 1997  F  G i annotti L  V  S  L a ks hm anan A  M onr eale D  P e dr es chi and H Wang Privacy-preserving mining of association rules from outsourced transaction databases IEEE Syst J  vol 7 no 3 pp 385–395 Sep 2013  B Dong R L i u and H  W ang Res ult i nte g rity v e riﬁcation o f outsourced frequent itemset mining in Proc 27th Annu IFIP WG Conf Data Appl Secur Privacy DBSec  Newark NJ USA Jul 2013 pp 258–265 O A v a ilable http://dx doi o r g 10 1007/978-3-64 239256-6_17  R L i u a nd H W a ng Res ult i nte g rity v e riﬁcation o f outs ourced pri v ac ypreserving frequent itemset mining in Proc SIAM Int Conf Data Mining  Vancouver BC Canada Apr./May 2015 pp 244–252 Available http://dx.doi.org/10.1137/1.9781611974010.28  W  K W ong D W  Cheung E  Hung B Kao and N  M am oulis  Security in outsourcing of association rule mining in Proc VLDB  2007 pp 111–122  I  M o llo y  N  L i  a nd T  L i   O n the  in s ecur ity and  im  p r acticality of outsourcing precise association rule mining in Proc ICDM  Dec 2009 pp 872–877  F  G i annotti L  V  S  L a ks hm anan A  M onr eale D  P e dr es chi and W Wang Privacy-preserving data mining from outsourced databases in Proc CPDP  2011 pp 411–426 


LI et al  PRIVACY-PRESERVING-OUTSOURCED ASSOCIATION RULE MINING ON VERTICALLY PARTITIONED DATABASES 1861 22 FIPS Publication 180-1 Secure Hash Standard  Nat Inst Standards Technol Gaithersburg MD USA 1995 23 FIPS Publication 180-2 Secure Hash Standard  Nat Inst Standards Technol Gaithersburg MD USA 2002  T  E l Gam a l  A public k e y c ryptos ystem and a signature scheme based on discrete logarithms IEEE Trans Inf Theory  vol 31 no 4 pp 469–472 Jul 1985 O A v a ilable http://dx doi o r g 10 1109 TIT.1985.1057074  N  Cour tois  A  K lim o v  J  P atar in a nd A  S h am ir   E f  c ient algor ithm s for solving overdeﬁned systems of multivariate polynomial equations in Proc EUROCRYPT  2000 pp 392–407  P  F ournier V iger  Real-life Datasets in SPMF Format  accessed on Apr 6 2016 O A v a ilable http://w w w  philippe-fournier viger.com/spmf/index.php?link=datasets.php  P  F ournier V iger  A  G om ariz T  G ueniche A Soltani C  W  W u and V S Tseng SPMF A Java opensource pattern mining library J Mach.Learn.Res  vol 15 no 1 pp 3389–3393 2014  J  V a idya and C  C lif ton S ecur e s e t i nter s ection car dinality w ith application to association rule mining J Comput Secur  vol 13 no 4 pp 593–622 2005  X Ge L  Y an J  Z hu and W  S hi  Pri v ac y-pres erving dis t rib u ted association rule mining based on the secret sharing technique in Proc SEDM  Jun 2010 pp 345–350  R K h ar at M  K um bhar  and P  B ham r e E f  cient p r i v a c y pr es er ving distributed association rule mining protocol based on random number in Intelligent Computing Networking and Informatics  Raipur Chhattisgarh India Springer 2014 pp 827–836  C Dong and L  C hen  A f a s t s ecure dot product p rotocol with application to privacy preserving association rule mining in Proc 18th Paciﬁc-Asia Conf Adv Knowl Discovery Data Mining PAKDD  Tainan Taiwan May 2014 pp 606–617 Available http://dx.doi.o rg/10.1007/978-3-319-06608-0_50  J  L a i Y  L i  R  H  D eng J  W e ng C Guan a nd Q Y a n T o w ards semantically secure outsourcing of association rule mining on categorical data Inf Sci  vol 267 pp 267–286 May 2014  T  F ukas a w a  J  W ang T  T a kata a nd M  M i yazaki  A n e f f ecti v e distributed privacy-preserving data mining algorithm in Proc 5th Int Conf IDEAL  2004 pp 320–325  C Su and K  S akurai  A d is trib ut ed privacy-preserving association rules mining scheme using frequent-pattern tree in Proc ADMA  2008 pp 170–181  M  G  K a os ar  R  P aulet and X  Y i S ecur e tw opar t y a s s o ciation r ule mining in Proc ACSW-AISC  2011 pp 15–22  J  L  L in and J  Y  C L i u Pri v a c y pres erving item s et m i ning through fake transactions in Proc ACM Symp Appl Comput SAC  Seoul South Korea Mar 2007 pp 375–379 A v a ilable http://doi.acm.org/10.1145/1244002.1244092  B N K e s h a v am urthy  A M Khan a nd D T o s hniw a l Pri v a c y preserving association rule mining over distributed databases using genetic algorithm Neural Comput Appl  vol 22 no 1 pp 351–364 2013 Lichun Li received the bachelor’s degree in information engineering from the Beijing University of Posts and Telecommunications in 2002 the master’s degree in communication and information systems from the China Academy of Telecommunication Technology in 2006 and the Ph.D degree in computer science from the Beijing University of Posts and Telecommunications in 2009 He is currently a Postdoctoral Research Fellow with the INFINITUS Laboratory School of Electrical and Electronic Engineering Nanyang Technological University Singapore His research interests include privacy and security in cloud and big data Rongxing Lu S’09–M’11–SM’15 received the Ph.D degree in computer science from Shanghai Jiao Tong University Shanghai China in 2006 and the Ph.D degree in electrical and computer engineering from the University of Waterloo Waterloo ON Canada in 2012 From 2012 to 2013 he was a Postdoctoral Fellow with the University of Waterloo Since 2013 he has been an Assistant Professor with the School of Electrical and Electronic Engineering Nanyang Technological University Singapore His research interests include computer network security mobile and wireless communication security and applied cryptography He was a recipient of the Ca nada Governor General Gold Metal Kim-Kwang Raymond Choo SM’15 received the Ph.D degree in information security from the Queensland University of Technology Australia in 2006 He is currently a Cloud Technology Endowed Associate Professor with the University of Texas at San Antonio an Associate Professor with the University of South Australia and a Guest Professor with the China University of Geosciences He was named one of 10 Emerging Leaders in the Innovation category of The Weekend Australian Magazine Microsoft’s Next 100 series in 2009 and is a recipient of the ESORICS 2015 Best Research Paper Award the 2015 Winning Team of Germany’s University of Erlangen-Nuremberg Digital Forensics Research Challenge the 2014 Australia New Zealand Policing Advisory Agency’s Highly Commende d Award the 2010 Australian Capital Territory Pearcey Award the Fulbright Scholarship in 2009 the 2008 Australia Day Achievement Medallion and the British Computer Society’s Wilkes Award Anwitaman Datta is an Associate Professor with the School of Computer Science and Engineering NTU Singapore He lead s the Self and Algorithmic aspects of Networked Distributed Systems Research Group at NTU Jun Shao received the Ph.D degree from Shanghai Jiao Tong University Shanghai China in 2008 He was a Postdoctoral Fellow with the School of Information Sciences and Technology Pennsylvania State University State College PA USA from 2008 to 2010 He is currently a Full Professor with the Department of Information Security Zhejiang Gongshang University Hangzhou China His research interests include network security and applied cryptography 


