 With the emergence of Big Data in Internet composing existing web services for satisfying new requirements,such as data quality enhancing effective data choosing,knowledge discovering etc has gained daily expanding attentions and interests Many efforts have been pursued for supporting the essential activities in service composition However the existing techniques only focus on passive services which are waiting there for being discovered and invoked We argue 
Computer School Beijing Information Science&Technology University Beijing China Email zlw@bistu.edu.cn 
Abstract 
AMD based Service Agent Collaboration and Specification 
Liwei Zheng 
that it might be more attractive when Web services become active entities Service Agent distributed in Internet which can recognize the newly emergent requirements and compete with others for realize part of the requirements Retreating or refinement of Big data will hardly be accomplished by one or two data handling center Service Agent collaboration would be a competitive method for the big data handling problem Mostly more than one service agents have to collaborate to satisfy requirements in current internet environment especially with social networks That could be called as the requirement driven agent collaboration Research on such collaboration might be 
useful for the previous problem We have given a preliminary model for the requirement driven agent collaboration based on a function ontology and the automated mechanism design in the earlier work.This paper extended the Function Ontology and enhanced the AMD model That makes the interactions in MAS generated by agent collaboration can be described.A negotiation frame for the evaluation and choice of collaboration solutions is also given in this paper It helps the requester evaluate the possible MAS systems and helps the service agents make decisions to choose a good enough solution by negotiation According to the dependencies provided in Function Ontology 
a specification is given to describe the execution process of the chosen MAS And also a method is given to translate the specification to BPEL which is more standard acceptable and easier to understood 
Multi-Agent;Collaboration Mechanism design 
Keywords 
I I NTRODUCTION A multi-agent system MAS is a loosely coupled network of problem-solver entities that work together to find answers to problems that are be yond the indi vidual capabilities or knowledge of each entity 5 Currently  a gent-based systems technology is particular attract ive for creating software that operates in environments that are distributed and open 
such as the internet At present there are already many MASs e.g those registered in the agentcities 2 Ho we v e r  there are mainly two kinds of computing mechanisms for these systems The first one is centralized and centered by a system manager or a coordinator e.g the 
description database kernels 
with the in MACE 8 In which t he manager allocates tasks and chooses strategies and the other agents behave according to the commands issued by the manager FIPA 3 gi v es a s t andard for this kind of MAS s  The second is decentralized and i ncludes those multi-agent systems based on game theory In such systems agents form coalitions make solutions by negotiation and work under 
some manually given rules which are designed for particular purposes 7 12  Currently service-oriented architecture connecting Web services has been paid lots of attentions for distributed computing and communication on loose coupling and heterogeneous platforms 14 In this architecture S e rvice Agency is responsible for managing and discovering services Obviously it is a centralized model When considering the Web services as the Service Agents this mechanism of service-oriented computing may appeal a decentralized computing mechanism for MASs This computing mechanism can be demonstrated by the following scenario A requestor publishes a task request onto the Web The available Service Agents on the Web detect the newly 
emergent requirements recognize thos e sub-\ks which they can accomplish and compete for being a member of the candidate agents for the request After all the candidate Service Agents gather toget her the technique of mechanism design is used to generate the protocols to make these service agents collaborating to fulfill the task request We call this kind of computing mechanism the 
requirement driven agent collaboration 
16 17  Figure 1 demonstrates the scenario of the requirement driven agent collaboration in distributed and open Web environment In this figure the larger ellipses are the requests submitted by requestors which are usually represented by 
some kind of task specification The smaller circles are available service agents Fo r an ellipse there are some circles around it That means t hose service agents have recognized that they are able to make contribution to the request satisfaction and are willing to compete with others for some of the sub-requests In this sense the requirement driven agent collaboration means the process of agent congregation for completing an emergent requirements In this process each request seems like a magnet which can make the service agents moving towards it That is the reason we use the term 
2013 IEEE International Conference on High Performance Computing and Communications & 2013 IEEE International Conference on Embedded and Ubiquitous Computing 978-0-7695-5088-6/13 $26.00 © 2013 IEEE DOI 10.1109/HPCC.and.EUC.2013.327 2277 
2013 IEEE International Conference on High Performance Computing and Communications & 2013 IEEE International Conference on Embedded and Ubiquitous Computing 978-0-7695-5088-6/13 $31.00 © 2013 IEEE DOI 10.1109/HPCC.and.EUC.2013.327 2277 


Resource 
of magnet effect for capturing the relationship between the requirements and the service agents Request Service Agent Figure 1 Magnet effect between requests and agents We have proposed a framework for the requirement driven agent collaboration 16 It gi v e s a computing mechanis m for multi-agent systems which we believe will help to realize the vision for the next Web revolution A 15 w as cons t ruct ed for s upport i n g t he s e rvi ce agents to understand the specification of the request This ontology provides the terminology for describing both the requested tasks and the service agents capability So with this ontology service agent s can understand the requirements and decide if they need to be engaged for fulfilling the requirements For making the service agents automatically collaborating the model of Automated Mechanism Design AMD 13 w as e x tended by introducing the t as k requirements and the process of generating the outcomes from the task requirements.Figure 2 depicts the extended AMD R Outcomes A M D M Appropriate Agent Group A request The Outcomes from the Requirement The Mechanisms Created by AMD Figure 2 Extended AMD With a mechanism the candidate agents can choose functions and solutions to satisfy the request When all the agents decide which function or functions they will do a MAS would be established For a given requirement there might be many possible MASs which could be offered by the aggregated agents Evaluating these possible systems effectively is necessary for the customer In this paper a kind of agent named requester does the customerês job  The requester can evaluate s ingle candidate agent and possible coalitions the agent s may form according to the quality of service Based on the evaluation a negotiation framework is given In this framework the requester and all the service agents will negotiate to choose a good enough coalition and collaboration solution which means a executable MAS system The chosen solution would satisfy the requirement both in function and quality and satisfy the service agents in their payoffs When the coalition and the collaboration solution is decided a specification which describes the agent collaboration process should be given In this paper we extend the function ontology Dependencies are defined for behaviors and functions to describe the possible relations between behaviors or functions Based on the extended function ontology we give a specification for the MAS established by the agents And the specification can be translated to BPEL 4 is a p roces s d es cribing language widely used in describing the composition of web services This paper is organized as follows Section 2 gives the extended Functional Ontology Section 3 gives the extended definitions in AMD model and introduces the agent collaboration model based on AMD brie\002y which has been described in detail in our earlier work 15 S ection 4 gives the evaluation method for service agents and agent coalitions The negotiation frame between agents is also discussed in this section Section 5 gives the specification of the chosen MAS system and the translation to BPEL language Section 6 gives the conclusions and some future research work II E XTENDED F UNCTION O NTOLOGY For enabling the requirements driven agent collaboration agent have to understand the specification of requirement A is constructed for this purpose This ontology gives the the same terminology for describing the capability of agents and requests The Functional Ontology is represented in a hierarchy of controllable together with the effects on them[6 In the Functional Ontology each individual has These are dived into two groups the  i.e their values are fixed once the are instantiated and the  i.e their values are changeable along different situations We call the with their values the  ofthe and call the with their values the   of the  Any set of state changes of a resource is called an effect on this resource In the following paragraphs we give the definitions of some important basic concepts and the extending in the functional ontology and discuss the characteristics of them Anything that can be identified and can be operated by software agents is a kind of resource at a particular domain e.g information value date etc physical entities hardware people etc software systems and so on All of these resources are defined by a set of attributes each of which features some aspect of the resources The attributes of a resource are classified into static ones and dynamic 
Functional Ontology\(FO Functional Ontology resources resource attributes attributes static attributes attributes dynamic attributes static attributes information resource dynamic attributes states resource 
2278 
2278 


Res  SAttr DAttr SARan DARan V alF uncof SAttr V alF uncof DAttr  SAttr a  a n DAttr da  da n SARan v  v m DARan dv  dv m V alF uncof SAttr SAttr SARan V alF uncof Dattr DAttr DARan DARan DARan sa res sa res da res da res da   da st res val   val val V alF uncof DAttr da i   n Beh res,s s  res Beh s res s res beh res,s s  beh res,s s  beh beh beh beh beh beh Func  Beh Res Cond CondF uncof Beh P rop P ropF uncof Beh Dependency  Res Beh Cond CondF uncof Beh Beh Cond Prop p P ropF uncof Beh Beh Prop Dependency  DirecBehDepen CondBehDepen  DirecBehDepen beh beh Beh Beh beh beh DirecBehDepen iff beh beh CondF uncof Beh beh 002 CondBehDepen beh beh Beh Beh beh beh CondBehDepen if f beh beh CondF uncof Beh beh 002 func func FuncDecMod func  SubF uncs Cond CondF uncof SubF uncs P rop P ropF uncof SubF uncs Dependency  SubFuncs func   f unc func i n func Cond func CondF uncof SubF uncs SubFuncs cond func 
ones A static attribute is irrespective of time and keeps its value all the lifecycle A dynamic attribute might change its value when external conditions change Resource\esource is described as a 6tuple in which is a finite set of static attributes of the resource is a finite set of dynamic attributes of the resource is a finite set of static attribute values of the resource is a finite set of dynamic attribute values of the resource is a value function of static attributes and is a value function of dynamic attributes is the power set of  For the convenience of narration several symbols about the resource are listed here is a general separator means  of means a static attribute of resource  means a dynamic attribute of resource  State The state of a resource characterizes the value of the dynamic attribute As the situations change the values of dynamic attributes may change too which result in the transitions of the resource stat es So we also called dynamic attributes as state attributes State Let be a resource and be n dynamic attributes of it A state of is   Behavior The behaviors can be defined as the state transitions of the resources As state transitions could be viewed as the basic effects imposed on resources that means we model behavior as possible primitive operation on resource In this sense we gi ve the following definition Behavior A behavior is defined as a triple  is the resource operated by  is the state of before the operation is the state of after the operation Sequential Behaviors If we have  wesay and are sequential is the direct precedent of  is a successor of The functions are conceptual classes of concrete functional models Generally a function description includes two parts a capability description and some constraints The capability of a function can be represented by a set of behaviors Constraints are limitations of functions Most constraints are domain-rel ated Generally they can be represented as some logic expressions of the resource state So we give the following definition Function Function is described as a 7tuple in which is the operable resources set is a set of all behaviors of the function is a logic expression set of resource state is a condition function which gives the execution conditions for each behavior is a payoff distribution proportion set of the behaviors and 002  is the proportion function of behaviors in which  is a relation set for any relation  is a successor of and  We call such relati ons direct behavior dependency  is a relation set,for any relation  is a successor of and We call such relations conditional behavior dependency Function Decomposition Mode A function decomposition mode is a description which describes how to decompose a function into sub-functions Function Decomposition Mode Let be a function A function decomposition mode for is a 7-tuple inwhich is a set of functions is a sub-function of  is a logic expression set of resource state and the resources are in the resource set of  is a condition function which gives the execution conditions for each subfunction of  
              002      
P P P P 
   002    002    002    002 003 003 003 003 002  002 002  002 004 005 005 003 
Deìnition 2.1 Deìnition 2.2 res res Deìnition 2.3 Deìnition 2.4 Deìnition 2.5 Deìnition 2.6 
n n m m n n i i pi Prop i i j i j j i j i j i j j i j n i 
1 1 1 1 1 1 0 1 0 1 1 0 1 2 1 2 1 2 1 2 2 1 Function 1 
N N N N 
                    1        1                   1     
2279 
2279 


is a payoff distribution proportion set of the subfunctions and  is a proportion function of the sub-functions in which is a relation set for any relation  is the direct successor of in the subfunction execution sequence and  We call such relations direct behavior dependency is a relation set,for any relation  is the direct successor of in the subfunction execution sequence and  We call such relations direct behavior dependency With the same terminology we represent an agent with a four-part-structure i.e a set of behaviors a set of resources which it operates on a set of state transitions that it enables and a function from the behavior set to the transition set Then the process for an agent to recognize a given request includes the following steps 1 Find its operatable resources in the requestês resource vector If there is no matched resource the request is not suitable for it else record all the matched resources 2 Get the beginning state and the ending state of each matched resource from the requirement 3 Computing state transition pathes from the starting state to its corresponding end state for each matched resource according to FO 4 Check whether it has a behavior which can enable one of the effective state transitions 5 If it has no matched behaviors the request is not suitable for it else it becomes one of the candidates of the request Any appropriate agent group has a time limitation for waiting its candidate agents This time limit is different for each request which is decided by the request provider base on his/her experiences After the waiting time a local environment composed of a request and its candidate agents will be constructed This environment is called a  The candidate agent set in a requirement domain is also called an appropriate agent group of the requirement These agents in the appropriate agent group will collaborate to complete the request III A GENT C OLLABORATION BASED ON AMD The agent collaboration in a requirement domain can be finished with the helping of AMD In our earlier work the collaboration process includes two steps.The first is the process of automated mechanism design That would give optimal outcomes for different agent groups The second step is the agent negotiation process for given outcomes That would produce effective agent behavior sequence for a given outcome In this paper we give a new AMD model which can provide collaboration solutions directly for the appropriate agents The model of automated mechanism design includes the preconditions for AMD the mechanism definitions and the cons traints definitions AMD is an approach where the mechanism is computationally created for the specific problem instance at hand In Automated Mechanism Design we need a finite set of outcomes  a finite set of agents for each agent  a finite set of types  a probability distribution over in the case of correlated types there is a single joint distribution over  a untility function  an objective function whose expectation the designer wishes to maximize Here let Agents be Service Agents In order to apply AMD in our work to fulfill the goal of Service Agents aggregation we should define the outcome set and each Service Agents type set In this paper they are defined below Type Set type set of a Service Agent is defined as a vector set whose elements are all the permutations of nodes that written in the form of vector the Service Agent could match on the Requirement Decomposition Tree Outcome Set\The outcome set of a Top-Level function    s defined as a vector set whose elements are vector satisfying the following two conditions Every heft of the vector is FDM node of Requirement Decomposition Tree and the order is from the top to bottom of the tree Every Vector denotes one unique path to accomplish a top-level function With above definitions Automated Mechanism Design is applied so that the Service Agent would participate the aggregation without manipulation In our AMD mode mechanisms are deterministic A deterministic mechanism w ithout payments consists of an outcome selection function Adeterministic mechanism with payments consists of an outcome selection function and for each agent i a payment selection function  The payment is for the request provider Two types of constraints are used in our AMD process IR\(individual rationality constraints and IC\(incentive 
pi Prop i i j i j j i j i j i j j i j i i i N i i n 1 i 1 i 2 s i s N N i N 
1                002 002 002 002 002   002 002 002 002 002 002 
Prop p P ropF uncof SubF uncs SubFuncs Prop Dependency  DirecF uncDepen CondF uncDepen  DirecF uncDepen func func SubFuncs SubFuncs func func DirecF uncDepen if f func func CondF uncof Beh func 002 CondF uncDepen func func SubFuncs SubFuncs func func CondF uncDepen if f func func CondF uncof Beh func 002 O N i 003 003  u O N N F F F FDM FDM FDM s o  O o  O 004  
1 1 1 1 2 1 1 2 1 1 1 
     
 002         
requirement domain Deìnition 3.1 Deìnition 3.2 
002 
003 002  002 002  002 004    003 R  002 N   003   003   003 R 
2280 
2280 


002        0 002 002 0    1 0    1       
compatibility constraints IR constraints ensure every agent participator would gain its lower limit of payment at least IC constraints is to ensure the agents will never misreport their type For example the definition of an ex interim IR constraint is for any agent i and any type wehave in which is the lower limit of agent iês payment is a payment selection function for the requirement provider AMD finds all the mechanisms which can satisfy all the constraints The mechanisms provide all the possible function choices for the candidate agents to satisfy the request And it also provide the efficient collaboration solution by the outcome for different agent type set Therefore with a mechanism the candidate agents can choose functions and solutions to satisfy the request When all the agents decide which function or functions they will do in the solutions a MAS would be established IV MAS E VALUATION AND THE N EGOTIATION F RAMEWORK A MAS system is an agent coalition with a certain collaboration solution According to the Function Ontology and the mechanisms provided by AMD agents choose functions in different function decompos ition mode A different choice they made means a different MAS system And for there may be many agents with a same type there might be many possible agent coalitions for a given collaboration solution Therefore there are many possible MAS systems after the process of AMD All the service agents in the requirement domain must negotiate to choose a final coalition and the collaboration solution In our papers earlier a group decision making model barycenter model was given Based on the model agents negotiate to choose a final solution In this paper we prefer to let the requester do the work of evaluation and negotiating with the service agents to choose the most appropriate MAS system Maximellien gave a QoS Ontology 11 fo r web serv ices which includes most of the familiar quality evaluation items such as responding time,throughput latency LoadBalancing and etc This Ontology can also be used to evaluate service agent By referring the QoS Ontology the requester can evaluate the candidate service agent in each quality item In this sense we give a quality evaluation function for an arbitrary service agent when it was doing a function  Assume the evaluation is carrying on in quality item and a unique evaluation interval is used the function is as follows in which is the evaluation value for the quality item is a preference value for the quality item of the requester Based on the above definition we give the evaluation of a MAS system Suppose the request needs N functions and is one of the possible collaboration solutions will execute in  Assume the preference to of the requester is  then the evaluation function of is According to the evaluation value the requester will give a payoff value to the given solution Commonly higher evaluation value means higher solution payoff Because requesters would pay more for a more qualifiable solution Hence the payoff function of a solution must have a positive correlation with the solution evaluation function We give a solution payoff function which is positive correlated with the evaluation function as follows in which MaxiPay is the maximum expected disbursement of the requester With the solution payment given by requester service agents can calculate the payoffs they can get according to the functions they will do in the solution Some agents may get satisfiable payoffs and they will support the current solution On the contrary some other agents may be not satisfied by the payoff they got and they will reject the solution So agents must negotiate to find a solution which is satisfiable for all of them However the solution which is good to all the service agents may be not good enough to the requester A negotiation among the requester and all the service agents is required We give a negotiation frame for this problem The negotiation process can be represented by a small scenario In the scenario there are three agents One requester and two service agents and The requirement is a implementation of three functions    are the preference value for the three functions of the requester is the minimum expected payoff of  is the minimum expected payoff of  If an agent could not get a payment more than its minimum expected payoff it will not participate the collaboration The functions can do include and  The functions can do include and  The negotiation process is as follows proposes a most profitable solution of itself let do and and let do  
i i N i 
1 1 1 
005 E u 005 o 005   005 004 005   005 006 006 004  agent Func n MAXE MAXE Qua Agent Func n 007 010 010 MAXE i 007 i Func   F unc solution Agent Func solution Func p solution Squa solution N p Qua Agent Func Payoff solution Squa solution MAXE MaxiPay Agent Agent Func Func Func p p p Minpay Agent Minpay Agent Agent Func Func Agent Func Func Agent solution Agent Func Func Agent Func 
  1 1 1 1 1 1 1 2 3 1 2 3 1 2 2 3 1 1 2 3 
 
002   006 002 R   003 R 002 R 002 
  Step1 
i i 002 002 002 002 002 i i N i N i N i i i i n 003 i i i i th i th N i i i i i i i i N 003 i i i i j j i j i i j j i j i i j 
2281 
2281 


The requester evaluates Let  then the payoff of is Assume the agents distribute payoff according to the functions they do will get will get If and then and will make an agreement and will be chosen If that means the most profitable solution of cannot reach its minimum expected payoff will quit and the collaboration will fail If  that means the solution proposed is not good enough for  will reject and propose a new solution in the next step rejects  and propose the most profitable solution for itself let do andlet do and  Same with step2 the requester evaluate  and will get new and  Similarly if and then and will make an agreement and will be chosen If  that means the solution proposed is not good enough for  will reject and propose a new solution For the most profitable solution of   has been rejected by  will propose a suboptimum solution of itself If  that means the most profitable solution of cannot reach its minimum expected payoff will quit and the collaboration will fail Repeat the above steps until the agreement is made or the collaboration fails Figure 3 represents the negotiation process in the small scenario In this figure the three ellipses is the three agents requester and  The arrows represent the negotiation behaviors of the agents These behaviors include   and  The objects of the behaviors are solutions The rectangles in the figure represent the solutions is the most profitable solution of  and similarly is the most profitable solution of  is the suboptimum solution of which is not mentioned in the above steps In figure 3 accepted  that leads the Figure 3 Negotiation process in a small scenario final solution of the negotiation will be andit is represented by a nested rectangle The label number in a circle represents the behavior sequence of the three agents The candidate agent coalition and the final chosen solution will make a executable MAS system And this MAS system is generated by the agents themselves including the requester and all the service agents V S PECIFICATION OF THE MAS When the service agent coalition and the collaboration solution are chosen a specification of the final MAS system must be available Based on the dependencies between behaviors and functions we can draw and describe the interaction process of the agents in a MAS and give a specification like figure 4 by following concepts and expressions is a block which includes a group of interactions of agents it can also include sub-processes Block includes paralleled interaction sequences Block includes a group of agent behaviors any adjacent two behaviors have direct behavior dependency is a block defined in parallel block it describes the relationship between two behaviors which are in paralleled sequences The expression means when the condition is true behavior A will be executed otherwise B will be executed This specification language is expressed in ABNF\(the augmented BackusCNaur form 1 e x tended the Backus-Naur form For the convenience of representation in our expression the rules are all included in a pair of   as the form of rules in BNF The ABNF expression of our specification language is as follows 
1 1 1 1 1 2 2 3 3 1 1 2 2 1 3 1 1 1 2 1 2 3 2 2 2 1 1 2 3 3 3 
   3         3       3             2   
Step2 Step3 Step4 Step5 Step6 propose evaluate reject accept process parallel sequence link condition A:B 
006 006 006 006      007     007  
            
MaxiPay MAXE i i j i Ai i i j Aj j Ai i Aj j i j Ai i i i Aj j i j j j i j i j Ai Aj Ai i Aj j i j Ai i j i i i j i Aj j j j i j i j i j 
solution k solution Payoff solution k p Qua Agent Func p Qua Agent Func p Qua Agent Func Agent pay k p Qua Agent Func p Qua Agent Func Agent pay k p Qua Agent Func pay Minpay pay MinPay Agent Agent solution pay  M inipay Agent Agent pay  M inipay Agent Agent Agent solution Agent solution solution Agent Func Agent Func Func solution Agent Agent pay pay pay Minpay pay MinPay Agent Agent solution pay  M inipay Agent Agent Agent solution Agent solution Agent Agent pay  M inipay Agent Agent Agent Agent solution Agent solution Agent solution Agent Agent solution solution   process  process  parallel    sequence    process   parallel  parallel link  linkstatement   process  
2282 
2282 


sequence sequence behaviors  conditionstatement  linkname VCHAR  linkstatement  linkname behaviors VCHAR source  targe  linkname  conditionstatement  cond  behaviors  behaviors  a b a b Rule A b A b b A 
Some symbols used in our expression should be explained here In ABNF a rule may be defined by listing a sequence of rule names That means a blank connects two rules A rule may be defined by a list of alternative rules separated by a solidus  To indicate repetition of an element the form element is used The optional gives the minimum number of elements to be included with the default of 0 The optional gives the maximum number of elements to be included with the default of infinity means the rule is optional VCHAR is one of a core rules in ABNF which means visible printing characters The core rules are defined in the ABNF standard This specification describes all the possible collaboration relations in the generated MAS system The sequence block includes the sequence of agent behaviors e.g in figure 4 is a behavior which is owned by an agent  The symbol separates two sequential behaviors The condition expression is used to describe the choice relation with conditions among agent behaviors The parallel block includes paralleled behavior sequences But two behaviors may be sequential even when one of them is in a paralleled sequence The link block is used to describe this kind of relation between two behavior The sequence relation is drew from the direct behavior dependency in Function Ontology and the switch choice relation is drew from the conditional behavior dependency Business Process Execution Language BPEL 4 i s a business process modeling language that is executable The origins of BPEL can be traced to WSFL and XLANG.It is serialized in XML and aims to enable programming in the large Programming in the large generally refers to the high-level state transition interactions of a process\003BPEL refers to this concept as an Abstract Process A BPEL Abstract Process represents a set of publicly observable behaviors in a standardized fashion It includes all the possible interaction structures,such as sequence switch case loop and parallel However an Abstract Process also includes information such as when to wait for messages when to send messages when to compensate for failed transactions etc These information are not needed for an MAS composed of autonomous and active agents Agents do what they want to do Our specification just tells customer or people what the agents would do and how they collaborate That is the main deference between our specification and the traditional BPEL Though BPEL is not suitable for MAS in some aspect it is more standard and easier to be accepted and understood by customers Therefore we give a algorithm to translate our specification to the Abstract Process of BEPL by the following algorithm With the algorithm 5 Figure 5 Algorithm for translating MSL to BPEL the specification in figure 4 can be translated into a BPEL Abstract Process like figure  
 
Process Parallel Link  Sequence A 1 b 1  A 2 b 1 source   Sequence A 3 b 1  A 2 b 2 target  cond?A 3 b 1 A 3 b 2   Sequence A 4 b 1  Parallel Sequence{A 5 b 1  Sequence{A 6 b 1      
Figure 4 A specification of MAS 
 
    1    1                 
link 1  link 1 link 1 
1 1 1 1 1 1 
     
 007 007  007 007 007 
2283 
2283 


 2 h ttp www ag e n t cities.o r g  3 h ttp www fip a.o r g    W s-bpel 2 0 specification    L  V  Durfee E  H and D Corkill T r ends in cooperati v e distributed problem solving In  volume 1 pages 63-83 1989 6 L  Ho u an d Z  J in  F ect A mo d e llin g framw o r k f o r atu o matically composing web services In  pages 320-332 2005  M  K lusch and O  S hehor y Coalition f ormation among rational information agents In  pages 204-217 1996  C  B  L  G asser and N  H ermann Mace A 002 e x i b l e t es t b ed for distributed AI research  pages 119-152 1987  J T  L iwei Zheng a nd Z Jin  A n a gent based frame w o rk for internetware computing  4:401-418 2011  G L  L i xi ng L i  Z hi Ji n a nd L  Z h eng Model i n g a nd analyzing the reliability and cost of service composition in the iot In  pages 584-591 Oct 2012  E  M Maximilien and M P  S i ngh A frame w o rk and ontology for dynamic web services selection  8\(5\:84-93 Sept 2004  S  K Onn S hehory  Met hods for t ask al l o cat i o n v i a agent coalition formation  101:165-200 1998  T  S a ndhol m Aut o mat ed mechani sm desi gn A n e w application area for search algorithms In  2003  A T  An o v e r v i e w o f s t a ndar ds and r el at ed t echnol ogy i n web services  12:135-162 2002  L  Z h eng and Z  J i n  R equi rement dri v en agent col l a boration based on functional ontology and In  pages 189-198 IEEE Computer Society  L  Z h eng and Z  J i n  R equi rement dri v en servi ce agent coalition formation and negotiation In  Nov 2008  L  Z h eng and Z  Ji n A ggr e g at i o n o f a ut onomous i n t e r n et ware entities In  Oct 2009  L  Z h eng and Z  J i n  A gent ori ent ed i n t e rnet w a re model l i ng In  Nov 2010 
http://tools.ietf.org/html/rfc4234 http://docs.oasisopen.org/wsbpel/2.0/wsbpel-v2.0.pdf IEEE Transactions on Knowledge and Data Engineering WAIM 2005 Conference Proceedings,LNCS 3793 LNAI No 1038 Agents Breaking Away Springer-Verlag Distributed Artif icial Intelligence International J ournal of So ftware and Informatics the proceedings of 19th International Conference on Web Services IEEE Internet Computing Artif icial Intelligence Proceedings of the International Conference on Principles and Practice of Constraint Programming\(CP Distribute and Parallel Databases AMD 11th IEEE International Workshop on Future Trends of Distributed Computing Systems Proceedings of the 9th International Conference for Young Computer Scientists the proceedings of The First Asia-Pacif ic Symposium on Internetware the proceedings of The Second Asia-Pacif ic Symposium on Internetware 
oasisstandard 
For the differences between service agents and the classical web service the above BPEL abstract process cannot be used to deploy web services But for a new request if there exists MAS specification for it the candidate service agents can using this specification or BPEL abstract process directly to instruct a MAS system That means the mechanism design and the negotiation process are reused Another useful point of the specification is in the MAS evaluation In this paper the coalition evaluation is based on the evaluation of single agent behavior and the MAS structure or the collaboration relation is not used in evaluation But two MAS system composed of same agent group with different structure may have different quality in treating a same request However the specification includes all the collaboration relations It may bring big help for the future evaluation work which should consider the structure VI C ONCLUSIONS Base on the requirement driven agent collaboration theory 18 9  10  t hi s paper e x t e nded t he F unct i o n O ntology and modified the definition of agent type set and outcome set in AMD The extending of Function Ontology makes the interactions in MAS generated by agent collaboration can be described The modification of AMD makes the generating of collaboration solution easier A negotiation frame for the evaluation and choice of collaboration solutions is also given in this paper It helps the requester evaluate the possible MAS systems and helps the service agents make decisions to choose a good enough solution by negotiation According to the dependencies provided in Function Ontology a specification is given to describe the execution process of the generated MAS system by negotiation And also a method is given to translate the specification to BPEL which is more standard acceptable and easier to understood Based on the above work the process of big data handling with service agent collaboration will be our central work in future VII A CKNOWLEDGMENTS This work was supported by the Beijing Municipal Education Commission Science and Technology Planning No.KM201311232013 R EFERENCES  A ugment ed bnf for s ynt ax speci fi cat i ons Abnf 
2284 
2284 


001 002\001\001 9?:\001 021\f84+\026\033#\001 022\0234\030$'\005\026'\005*+\035\005D\024\024/.L\001 D\026\036\035\025\026+\024\024&\001 024\032\001 001 J\035+\02614\025$\033\001G\026\027\027\026\024'\0058411\035\027\027\005$'&\0058$\032\035*0#\001$'&\001*+\035\001U\024\025\035\001\024\032\001 035\001\0234\030$'\001@$1*\024\033.#\0017\0244\033'$\025\001\024\032\001;\026\0331\033$\032*#\001*\024\0012\035\001/42\025\026\027+\035&\001 9\b:\001 021\f84+\026\033#\001 023\024%\001 024\001 G$\036\035\001 001 N\035-\0261\035\001 026'*\024\001 001 E\033\024&41*L\001 11\035\025\035\033$*\035&\001 D\026\032\035\001 6\035\027*\026'\(\001 020*=\027\001 U\024\025\035#\001 033\02624*\035\027#\001 Q+$\025\025\035'\(\035\027#\001 E\026*\032$\025\025\027#\001 001 020'*\035\033$1*\026\024'\001 026*+\001 W4$\025\026\032\0261$*\026\024'\001 6\035\027*\026'\(.#\001\026'\001\021\f\00184+\026\033#\001QE\001C\024'\(#\001XQ\001D\035\035#\001\035&\027\f\001,G\0261\033\024\005\001 001 A/*\024\005\021\025\0351*\033\024'\0261\001 G$*\035\033\026$\025\027\001 001 8*\03341*4\033\035\027L\001E+0\027\0261\027#\001 G\0351+$'\0261\027#\001 N\035\027\026\('#\001 E$1\036$\(\026'\(#\001 U\035\025\026$2\026\025\026*0.#\001 8/\033\026'\(\035\033#\001 017\r\r\003\f\001 9\003:\001 X\f\001 023\f\001 G\0261+\025\026'\001 001 034\f\001 034\033$2$\033'\026\036#\001 022Q\024\030/$\033\026\027\024'\001 8\035H4\035'*\026$\025\001 6\035\027*\026'\(\001 032\024\033\001 U\035\025\026$2\026\025\026*0L\001 0213$1*\001 Q\024\030/4*$*\026\024'\001 024\032\001 AQ\001 001 8M#\022\001 035\r\007\024\006\017\016\r\003\004 007\024\033\004 035\f\b\f\025\016\021\0212\024\005\025\007\003\005\016\024 001 024\025\f\001\003#\001'\024\f\001\017#\001//\f\001\017\002?\005\t\r\t#\001\017\r\r\b\f\001 9\004:\001\001 C\f\001 f\001 M\035\025\027\024 004 8\025\025\f\b\f\r\007\003\f\033\004 035\f\006\003\005\024\0226\004 006\003\007\003\005\006\003\005\025\007\b\004 021\016\033\f\b\006\032\004 003 f\006\003\004\017\b\007\024\006\032\004\007\024\033\004\033\007\003\007\004\007\024\007\b\n\006\005\006 L\0017\024+'\001C\026\025\0350#\001\006\002\002\r\f\001 9 002:\001 f\001 7\035\033\0330#\001 002\024\003\r\016\0332\025\003\005\016\024\004 003\016\004 002\024\003\f\022\r\007\b\004 A2\007\003\005\016\024\006\004 t\005\003\023\004 8 017\017\b\005\025\007\003\005\016\024\006 001\017  001\035&\fL\0017\024+'\001C\026\025\0350#\001\006\002\002\002\f\001 9\006\r:\001N\f\001;\f\001<\f\001G\026\025\025\035\033#\001 B2\007\024\0032\021\004*\f\025\023\007\024\005\025\006\004\030\016\r\0045\025\005\f\024\003\005\006\003\006\004\007\024\033\004  024\022\005\024\f\f\r\006 L\001Q$\0302\033\026&\(\035\001F'\026-\035\033\027\026*0\001/\033\035\027\027#\001\017\r\r\004\f\001 9 006\006:\001;\f\001 M\f\001 6\026\036+\024'\024-\001 001 J\f\001 X\f\001 033\027\035'\026'#\001 5\016\b2\003\005\016\024\006\004 030\016\r\004 005\b\b\036\004\004\004 017 016\006\f\033\004\017\r\016\013\b\f\021\006 L\001C\026'\027*\024'#\001\006\002\003\003\f\001 9 006\017:\0017\f\001 M\0241\035&$\025\001 001 8\f\001 7\f\001 C\033\026\(+*#\001 0342\021\f\r\005\025\007\b\004 C\017\003\005\021\0057\007\003\005\016\024\032\004  024\033\004\f\033\005\003\005\016\0246 0018/\033\026'\(\035\033#\001\017\r\r\b\f\001 001 030 fI\001\021/\032"#\037 t r\006\016\005\017\020\021\006\016 004\r\f\025\f\005<\f\033\004\007\004:\0375\025\037\004\005\024\004  b\f\025\003\r\005\025\007\b\004\(\024\022\005\024\f\f\r\005\024\022\004\030\r\016\021\004\003\023\f\004 035\f\025\023\024\005\016\024\004D\004\002\024\006\003\005\0032\003\f\004\016\030\004\035\f\025\023\024\016\b\016\022\n\032\004 007\005\030\007\032\004\002\006\r\007\f\b\032\004\005\024\004,EEF\004\007\024\033\004\007\004*\0375\025\037\004\005\024\004 B2\007\b\005\003\n\004\007\006\0062\r\007\024\025\f\004G\004\031\f\b\005\007\013\005\b\005\003\n\004 f\024\022\005\024\f\f\r\005\024\022\032\004\004\007\b\006\016\004\030\r\016\021\004\003\023\f\004\035\f\025\023\024\005\016\024\032\004 005\024\004?FFH\037\004%2\r\r\f\024\003\b\n\004\023\f\004\005\006\004\006\0032\033\n\005\024\022\004\030\016\r\004 9\023\037'\037\004\007\003\004\003\023\f\004\035\f\025\023\024\005\016\024\004D\004\002\024\006\003\005\0032\003\f\004\016\030\004 035\f\025\023\024\016\b\016\022\n\032\004@\007\005\030\007\032\004\002\006\r\007\f\b\032\004\007\024\033\004\023\005\006\004\003\023\f\006\005\006\004\0062\013&\f\025\003\004\005\006\004 I\031\f\b\005\007\013\005\b\005\003\n\004\016\030\004\035\f\025\023\024\016\b\016\022\005\f\006I\037\004\004 5\023\007\005\004\023\007\033\004\006\f\r<\f\033\004\007\006\004\007\024\004\f\b\f\025\003\r\005\025\007\b\004\007\024\033\004\f\b\f\025\003\r\016\024\005\025\006\004\f\024\022\005\024\f\f\r\004 006\005\024\025\f\004,EEF\004\005\024\004<\007\r\005\0162\006\004\022\016<\f\r\024\021\f\024\003\004\017\016\006\005\003\005\016\024\006\037\004%2\r\r\f\024\003\b\n\032\004\023\f\004 005\006\004\007\024\004\007\025\003\005<\f\004\031\f\b\005\007\013\005\b\005\003\n\004\f\024\022\005\024\f\f\r\037\004 017 022 023\021\005\006\016\024\017\020\025\021\016\005 004\005\006\004\016\024\004\003\023\f\004\030\007\0252\b\003\n\004\016\030\004 003 023\f\004\(\b\f\025\003\r\005\025\007\b\004\(\024\022\005\024\f\f\r\005\024\022\004'\f\017\003\032\004 1\024\005<\f\r\006\005\003\n\004\016\030\004%\007\b\005\030\016\r\024\005\007\032\0045\007\024\003\007\004%\r27\032\004 8\032\004\007\024\033\004\005\006\0044\005\006\005\003\005\024\022\0049\r\016\030\f\006\006\016\r\032\004 f\025\023\007\024\005\025\007\b\004\(\024\022\005\024\f\f\r\005\024\022\004'\f\017\003\037\032\004 1\024\005<\f\r\006\005\003\n\004\016\030\004*\007\r\n\b\007\024\033\032\004%\016\b\b\f\022\f\004 9\007\rJ\032\004*'\032\004\007\024\033\004'\f\017\007\r\003\021\f\024\003\004\016\030\004 b\f\025\003\r\016\024\005\025\004*\007\003\f\r\005\007\b\006\032\004\035\f\025\023\024\005\025\007\b\004 1\024\005<\f\r\006\005\003\n\032\0044\005\f\024\024\007\032\00482\006\003\r\005\007\037\004'\r\037\00452\023\005\r\004\005\006\004+\f\b\b\016\t\004\016\030\004\003\023\f\004 002\024\006\003\005\0032\003\f\004\016\030\004\(\b\f\025\003\r\005\025\007\b\004\007\024\033\004\(\b\f\025\003\r\016\024\005\025\006\004\(\024\022\005\024\f\f\r\006\004!\002\(\(\("\032\004 003\023\f\0048\021\f\r\005\025\007\024\0049\023\n\006\005\025\007\b\0045\016\025\005\f\003\n\004!895"\032\004\003\023\f\004\002\024\006\003\005\0032\003\f\004\016\030\004 9\023\n\006\005\025\006\004!\002\0169"\032\0041K\032\004\003\023\f\0048\021\f\r\005\025\007\024\0045\016\025\005\f\003\n\004\016\030\004*\f\025\023\007\024\005\025\007\b\004 024\022\005\024\f\f\r\006\004!85*\("\032\004\007\024\033\004\003\023\f\0045\016\025\005\f\003\n\004\016\030\0049\b\007\006\003\005\025\006\004\(\024\022\005\024\f\f\r\006\004 59\("\037\004'\r\037\00452\023\005\r\004\023\007\006\004\013\f\f\024\004\f\b\f\025\003\f\033\004\007\006\004+\016\r\f\005\022\024\004+2\b\b\004 f\021\013\f\r\004!8\025\007\033\f\021\005\025\005\007\024"\004\016\030\004\003\023\f\004\034\007\003\005\016\024\007\b\0048\025\007\033\f\021\n\004\016\030\004 024\022\005\024\f\f\r\005\024\022\032\0041J\r\007\005\024\fL\004\007\024\033\004\007\006\004+2\b\013\r\005\022\023\003\0045\025\023\016\b\007\r 026\017 0162\024\025\005\b\004 030 016\r\004\002\024\003\f\r\024\007\003\005\016\024\007\b\004\(\020\025\023\007\024\022\f\004\016\030\0045\025\023\016\b\007\r\006\004!%\002\(5"\032\0045\003\007\003\f\004 f\017\007\r\003\021\f\024\003\032\00415\037\004@\f\004\005\006\004'\005\006\003\005\024\0222\005\006\023\f\033\004\027\f\025\0032\r\f\r\004\016\030\004\003\023\f\004 002\(\(\(\004%9*\035\004!%\016\021\017\016\024\f\024\003\006\032\0049\007\025J\007\022\005\024\022\004\007\024\033\004 007\0242\030\007\025\0032\r\005\024\022\004\035\f\025\023\024\016\b\016\022\n"\0045\016\025\005\f\003\n 026\017 8\006\006\016\025\005\007\003\f\004\(\033\005\003\016\r\004\016\030\004 003 023\f\004\002\(\(\(\004%9*\035\004\035\r\007\024\006\007\025\003\005\016\024\006\004\016\024\0048\033<\007\024\025\f\033\0049\007\025J\007\022\005\024\022\032\004 f\021\013\f\r\004\016\030\004\003\023\f\004\(%\035%\004!\(\b\f\025\003\r\016\024\005\025\004%\016\021\017\016\024\f\024\003\006\004\007\024\033\004 035\f\025\023\024\016\b\016\022\n\004%\016\024\030\f\r\f\024\025\f"\0048\017\017\b\005\f\033\004\031\f\b\005\007\013\005\b\005\003\n\004 52\013\025\016\021\021\005\003\003\f\f\032\004\003\023\f\004\002\(\(\(\004%9*\035\004\007\t\007\r\033\004\025\016\021\021\005\003\003\f\f\032\004\003\023\f\004 002\(\(\(\004+\f\b\b\016\t\004\024\016\021\005\024\007\003\005\016\024\004\025\016\021\021\005\003\003\f\f\032\004\007\024\033\004\003\023\f\00485*\(\004 M\f\024\f\r\007\b\0048\t\007\r\033\006\004\025\016\021\021\005\003\003\f\f\037\004'\r\037\00452\023\005\r\004\005\006\004\007\004\025\016\036\030\0162\024\033\f\r\004\016\030\004 003\023\f\00485*\(\004;\0162\r\024\007\b\004\016\030\004\(\b\f\025\003\r\016\024\005\025\0049\007\025J\007\022\005\024\022\004\007\024\033\004\006\f\r<\f\033\004\007\006\004 005\003\006\004\035\f\025\023\024\005\025\007\b\004\(\033\005\003\016\r\004\030\016\r\004\f\005\022\023\003\004\n\f\007\r\006\004!,EEN\036?FF,"\037\004 f\004\023\007\006\004\0072\003\023\016\r\f\033\004\007\013\0162\003\004NFF\004\003\f\025\023\024\005\025\007\b\004\0172\013\b\005\025\007\003\005\016\024\006\004 017\007\003\f\024\003\006\032\004\017\007\017\f\r\006\032\004\013\016\016J\004\025\023\007\017\003\f\r\006\032\004\013\016\016J\006"\032\004\005\024\025\b2\033\005\024\022\004\013\016\016J\006\004 O5\003\r2\025\0032\r\007\b\0048\024\007\b\n\006\005\006\004\005\024\004*\005\025\r\016\f\b\f\025\003\r\016\024\005\025\006\004\007\024\033\004+\005\013\f\r\004 C\017\003\005\025\006\026\032\0044\007\024\036\034\016\006\003\r\007\024\033\032\004,EE,\032\004\007\024\033\004O8\017\017\b\005\f\033\0049\r\016\013\007\013\005\b\005\003\n\004 030\016\r\004\(\024\022\005\024\f\f\r\006\004\007\024\033\0045\025\005\f\024\003\005\006\003\006\026\032\004*\025M\r\007\t\036@\005\b\b\032\004,EEP\037\004'\r\037\004 52\023\005\r\004\005\006\004\f\033\005\003\016\r\004\016\030\004\003\023\f\0045\017\r\005\024\022\f\r\004\013\016\016J\004\006\f\r\005\f\006\004\016\024\004\017\023\n\006\005\025\006\032\004 021\f\025\023\007\024\005\025\006\004\007\024\033 004 017\007\025J\007\022\005\024\022\004\016\030\004\021\005\025\r\016\f\b\f\025\003\r\016\024\005\025\004\007\024\033\004 017\023\016\003\016\024\005\025\004\006\n\006\003\f\021\006\037\004@\f\004\016\r\022\007\024\0057\f\033\004\021\007\024\n\004\0062\025\025\f\006\006\0302\b\004 025\016\024\030\f\r\f\024\025\f\006\004\007\024\033\004\006\n\021\017\016\006\005\007\004\007\024\033\004\017\r\f\006\f\024\003\f\033\004\0242\021\f\r\0162\006\004 J\f\n\024\016\003\f\004\007\024\033\004\005\024<\005\003\f\033\004\003\007\bJ\006\004\t\016\r\b\033\t\005\033\f\037\004'\r\037\00452\023\005\r\004\r\f\025\f\005<\f\033\004 021\007\024\n\004\017\r\016\030\f\006\006\005\016\024\007\b\004\007\t\007\r\033\006\032\004\005\024\025\b2\033\005\024\022\004 027\030\030\031\017 85*\(\004 Q 016\r\025\f\006\003\f\r\004\031\f\007\033\004Q\007\r\024\f\r\004*\f\033\007\b\004\030\016\r\004\0162\003\006\003\007\024\033\005\024\022\004 025\016\024\003\r\005\0132\003\005\016\024\006\004\003\016\004\003\023\f\004\017\f\r\021\007\024\f\024\003\004\b\005\003\f\r\007\0032\r\f\004\016\030\004\f\024\022\005\024\f\f\r\005\024\022\004 003\023\r\0162\022\023\004\007\004\006\f\r\005\f\006\004\016\030\004\017\007\017\f\r\006\004\005\024\004*\f\025\023\007\024\005\025\007\b\032\004 005\025\r\016\f\b\f\025\003\r\016\024\005\025\032\004\007\024\033\004C\017\003\016\f\b\f\025\003\r\016\024\005\025\004\(\024\022\005\024\f\f\r\005\024\022\032\004\t\023\005\025\023\004 f\006\003\007\013\b\005\006\023\f\033\004\007\004\024\f\t\004\033\005\006\025\005\017\b\005\024\f\004J\024\016\t\024\004\007\006\004\003\023\f\0045\003\r2\025\0032\r\007\b\004 8\024\007\b\n\006\005\006\004\016\030\004*\005\025\r\016\f\b\f\025\003\r\016\024\005\025\004\007\024\033\0049\023\016\003\016\024\005\025\0045\n\006\003\f\021\006\004!\023\f\004\005\006\004 003\023\f\004\003\023\005\r\033\004\0312\006\006\005\007\024\0048\021\f\r\005\025\007\024\032\004\007\030\003\f\r\0045\003\f<\f\024\004\035\005\021\016\006\023\f\024J\016\004\007\024\033\004 002\022\016\r\0045\005J\016\r\006J\n\032\004\t\023\016\004\r\f\025\f\005<\f\033\004\003\023\005\006\004\017\r\f\006\003\005\022\005\0162\006\004\007\t\007\r\033"L\004 027\030\030\032\017 002*895\004;\016\023\024\0048\037\004Q\007\022\024\016\024\004\035\f\025\023\024\005\025\007\b\0048\025\023\005\f<\f\021\f\024\003\0048\t\007\r\033\004 030 016\r\004\0162\003\006\003\007\024\033\005\024\022\004\025\016\024\003\r\005\0132\003\005\016\024\006\004\003\016\004\003\023\f\004\003\f\025\023\024\005\025\007\b\004J\024\016\t\b\f\033\022\f\004 016\030\004\003\023\f\004\021\005\025\r\016\f\b\f\025\003\r\016\024\005\025\006\032\004\016\017\003\016\f\b\f\025\003\r\016\024\005\025\006\032\004\007\024\033\004\017\007\025J\007\022\005\024\022\004 005\024\0332\006\003\r\nL\004 027\030\030\030\017 002\(\(\(\036%9*\035\004C2\003\006\003\007\024\033\005\024\022\00452\006\003\007\005\024\f\033\004 035 f\025\023\024\005\025\007\b\004%\016\024\003\r\005\0132\003\005\016\024\0048\t\007\r\033\004\030\016\r\004\0162\003\006\003\007\024\033\005\024\022\032\004\0062\006\003\007\005\024\f\033\004 007\024\033\004\025\016\024\003\005\0242\005\024\022\004\025\016\024\003\r\005\0132\003\005\016\024\006\004\003\016\004\003\023\f\004\003\f\025\023\024\016\b\016\022\005\f\006\004\005\024\004\030\005\f\b\033\006\004 f\024\025\016\021\017\007\006\006\f\033\004\013\n\004\003\023\f\004%9*\035\0045\016\025\005\f\003\nL\004 027\030\030\030\017 59\(\004 002 024\003\f\r\024\007\003\005\016\024\007\b\004\(\024\022\005\024\f\f\r\005\024\022-\035\f\025\023\024\016\b\016\022\n\004!+\r\f\033\004C\037\004%\016\024\b\f\n"\004 8\t\007\r\033\004\030\016\r\004\0162\003\006\003\007\024\033\005\024\022\004\017\005\016\024\f\f\r\005\024\022\004\007\024\033\004\025\016\024\003\005\0242\005\024\022\004 025\016\024\003\r\005\0132\003\005\016\024\006\004\003\016\004\017\b\007\006\003\005\025\006\004\f\024\022\005\024\f\f\r\005\024\022L\004 032\033\033\033\017 85*\(\004\007\024\033\0049\005\036 035 0072\036\0045\005\022\021\007\004%\023\007\r\b\f\006\004\0312\006\006\004\031\005\025\023\007\r\033\006\004*\f\021\016\r\005\007\b\0048\t\007\r\033\004\030\016\r\004 0162\003\006\003\007\024\033\005\024\022\004\025\016\024\003\r\005\0132\003\005\016\024\006\004\003\016\004\021\f\025\023\007\024\005\025\007\b\004\f\024\022\005\024\f\f\r\005\024\022\032\004\007\024\033\004 032\033\033\034\017 f\b\b\004\027\007\013\016\r\007\003\016\r\005\f\006\004'\005\006\003\005\024\0222\005\006\023\f\033\004*\f\021\013\f\r\004\016\030\004 035 f\025\023\024\005\025\007\b\0045\003\007\030\030\0048\t\007\r\033\004\030\016\r\004\033\f<\f\b\016\017\005\024\022\004\f\020\003\r\f\021\f\b\n\004\007\025\0252\r\007\003\f\004 007\024\033\004\r\016\0132\006\003\004\f\024\022\005\024\f\f\r\005\024\022\004\021\f\025\023\007\024\005\025\006\004\021\f\003\023\016\033\006\004\030\016\r\004\017\r\f\033\005\025\003\005\024\022\004 003\023\f\004\r\f\b\005\007\013\005\b\005\003\n\032\004\017\f\r\030\016\r\021\007\024\025\f\032\004\007\024\033\004\021\f\025\023\007\024\005\025\007\b\004\013\f\023\007<\005\016\r\004\016\030\004 025\016\021\017\b\f\020\004\006\003\r2\025\0032\r\f\006\0042\006\f\033\004\005\024\004\021\007\0242\030\007\025\0032\r\005\024\022\004\0272\025\f\024\003\004 035\f\025\023\024\016\b\016\022\005\f\006\004\017\r\016\0332\025\003\006\037\004 017 035 005\036\037 \017!\036"\017\013#$\024\006 032\004\035\f\025\023\024\005\016\024\032\004\002\006\r\007\f\b\032\004 005 006\004\006\003\007\030\030\004\021\f\021\013\f\r\004\016\030\004\002\024\0332\006\003\r\005\007\b\004\007\024\033\004 007\024\007\022\f\021\f\024\003\004\(\024\022\037\004'\f\017\007\r\003\021\f\024\003\032\004\007\024\033\004 021\f\021\013\f\r\004\016\030\004\022\r\007\0332\007\003\f\004\006\0032\033\005\f\006\004\022\r\0162\017\004 017\r\016\022\r\007\021"\004\005\024\004B2\007\b\005\003\n\0048\006\0062\r\007\024\025\f\004\007\024\033\004 031\f\b\005\007\013\005\b\005\003\n\004\007\003\004\035\f\025\023\024\005\016\024\037\004@\005\006\004\r\f\006\f\007\r\025\023\004 005\024\003\f\r\f\006\003\006\004\005\024\025\b2\033\f6\004\f\b\f\021\f\024\003\004\007\024\033\004\006\n\006\003\f\021\004 r\f\b\005\007\013\005\b\005\003\n\032\004\033\007\021\007\022\f\004\007\025\0252\0212\b\007\003\005\016\024\004 017\r\016\025\f\006\006\f\006\032\004\017\023\n\006\005\025\007\b\004J\005\024\f\003\005\025\006\032\004\017\007\003\003\f\r\024\004\r\f\025\016\022\024\005\003\005\016\024\032\004 005\024\030\016\r\021\007\003\005\016\024\004\003\023\f\016\r\n\032\004\024\f2\r\007\b\004\024\f\003\006\032\004\021\f\007\0062\r\f\021\f\024\003\004\003\023\f\016\r\n\004\007\024\033\004 005\024\006\003\r2\021\f\024\003\007\003\005\016\024\032\004\033\f\006\007\b\005\024\007\003\005\016\024\004\003\f\025\023\024\016\b\016\022\n\032\004\024\016\024\033\f\006\003\r2\025\003\005<\f\004 003\f\006\003\005\024\022\032\004\007\024\033\004A2\007\b\005\003\n\004\025\016\024\003\r\016\b\037 017 


001 006\r\001\001 021//#;\"L\t\021\t 001G$*+\035\030$*\0261$\025\001*\024\024\025\027\001$'&\001\0353$\030/\025\035\027 005\035\023\003\002\t t n\020\017\007\005\020\007\t\027\002\003\004*\002\022\b\t\022\005\007\002\t$\t\005\020\005\003\b\007\004\016\005\003\t\017\n\003!\007\004\n\020\t 6+\035\001 027\026\030/\025\035\027*\001 026\025\0254\027*\033$*\026\024'\001 024\032\001 024%\001 035\001 0274\(\(\035\027*\035&\001 033\024$1+\001 024\033\036\027\0011$'\0012\035\001\0242*$\026'\035&\0014'&\035\033\001$'\001$\027\0274\030/*\026\024'\001*+$*\001*+\035\001&\035\025\026-\035\0330\001 033$*\035\001 026\027\001 1\024'\027 004 031  024 003 001  f\001 C\026 035 003 b 001 002 001 035\001 035H4$*\026\024'\001 031\b\\001 2\0351\024\030\035\027L\001\001 r r 031  031  031  035 034 035 034 031 035  031 033 b b 001 006 007 006 003 001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\031;\006\\001  0\001 025\024\(0\001 026*+\001 035\001 0353/\0351*$*\026\024'\001 0254\035\001 032\033\024\030\001 035\001 W4$'*4\030\001 G\0351+$'\0261\027\001 9\006\r:#\001 001 1\024'>4\($*\035\001 033$'\027/\024\027\035\001 031\023\035\033\030\026*\026$'\001 033$'\027/\024\027\035\\001\024/\035\033$*\024\033\001\026\027\001\035\030/\025\0240\035&\001*\024\001&\035*\035\033\030\026'\035\001*+\035\001H4$'*\026*\026\035\027\001 026'\0012\024*+\001/$\033*\027\001\024\032\001*+\035\001\035H4$*\026\024'\001\031;\006\\f\0016+\026\027\0010\026\035\025&\027\001*+\035\001\032\024\025\025\024%\026'\(L\001\001 r r r 031  0353/\031  031  0353/\031    035 035 034 034 033\034 035 033 034 031 035 033\035 033\035 002 026 027 001 006 006 006 030 031 032 033 001 6+\035\001'\0353*\001\026'*\035\(\033$*\026\024'\001\033\035\0274\025*\027\001\026'\001*+\035\001\035H4$*\026\024'L\001 r r r r r I I 006 031 I 0353/\031  I 031 I 0353/\031  I I I 035 035   035 035 034 034 033\034 035 033 033\035 031 035 033\035 034 033\035 033\035 036 037 026 027 026 027 006 006 001 006   030 031 030 031   032 033 032 033   003 003 001\001 023 035'1\035#\001*+\035\001\033\035\025\026$2\026\025\026*0\001\0324'1*\026\024'\001\026\027\001\0353/\033\035\027\027\035&\001$\027\001\032\024\025\025\024%\027L\001 r r r r 017 r 031  031  0353 031 I 0353 I 031  031  I 035 034 035    035 035 034 034 034 034 035 035 033\035 031 034 002 002 001 026 027 006 030 031 032 033 003 031;\017\\001 6+\035\001 035H4$*\026\024'\001 031;\017\\001 1\0244\025&\001 2\035\001 035\033\026\032\026\035&\001 032\024\033\001 035\001 1$\027\035\001 024\032\001 001 0353/\024'\035'*\026$\025\001\033\035\025\026$2\026\025\026*0\001\0324'1*\026\024'\001%\026*+\001*+\035\001\032$\026\0254\033\035\001\033$*\035\001  L\001 031  0353/\031  031 035 035  001 002 006 001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\031;\t\\001 020'*\033\024&41\026'\(\001\031\002;\\001\026'*\024\001*+\035\001\035H4$*\026\024'\001\031\003;\#\001%\035\001\0242*$\026'L\001\001 r 031  0353/\031  031\006 0353/\031   034 035 034 035 035    001 006 002 006 007 006 002 002 006 001\001\001\001\001\001\031;\007\\001 C+\035'\001 026'*\033\024&41\026'\(\001 026\027\001 0353/\033\035\027\027\026\024'\001 2$1\036\001 026'*\024\001 035\001 035H4$*\026\024'\001 031;\017\#\001 035\001 033\024/\033\026$*\035\001 0353/\024'\035'*\026$\025\001 033\035\025\026$2\026\025\026*0\001 0324'1*\026\024'\001 031;\t\\001 1\0244\025&\0012\035\001\035$\027\026\0250\001\033\035\027*\024\033\035&\f\001\001 001 001 001 005\035\023\003\002\t t 037\007\005\007\004\017\007\004\016\005\003\t\023\022\n\023\002\022\007\004\002\017\t\n\013\t\023\n\023!\003\005\007\004\n\020\t\027\b\020\005\035\004\016\017\t 6+\035\001 035\025\026-\035\0330\001 033$*\035\001 1+$'\(\035\027\001 026'\001 026\030\035\001 026*+\001 024 005 004 033\035/\033\035\027\035'*\026'\(\001 035\001 030\0244'*\001&\035\025\026-\035\033\035&\001$*\001*+\035\001\035'&\001\024\032\001*+\035\001*\026\030\035\0014'\026*\001 005 001\031@\026\(4\033\035\001;\f\006$\\f\001 020'\001 026\027\001 1$\027\035#\001 035\001 026'\026*\026$\025\001 024/4\025$*\026\024'\001 026\027\001 034 r  r\f\001 6+\035\001 0353/\0351*\035&\001 024/4\025$*\026\024'\001 0351*\024\033\001 032\024\033\001 035\001 033\035&\035*\035\033\030\026'\035&\001 035\02624\025\025\001 033\035\025\026$2\026\025\026*0\001 0324'1*\026\024'#\0014\027\026'\(\001 035H4$*\026\024'\001\031\003\#\001\026\027\001\027+\024%'\001\026'\001@\026\(4\033\035\001;\f\0062\f\001 A'\035\001 4'&\033\035&\001 033$'&\024\030\001 0351*\024\033\027\001 035\033\035\001 1$\02514\025$*\035&\001 11\024\033&\026'\(\001 024\001 035\001 027\026\0304\025$*\026\024'\001 033\0241\035\027\027\001 0353/\025$\026'\035&\001 026'\001 026\(4\033\035\001 017\f\001 024\033\001 035$1+\001 026\030\035\001 026'&\0353#\001*+\035\001$-\035\033$\(\035\001$'&\001\027*$'&$\033&\001&\035-\026$*\026\024'\001$\033\035\0011$\02514\025$*\035&\f\001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 t  004\026!\022\002\t\021\(?\t$\t\037\007\005\007\004\017\007\004\016\005\003\t\023\022\n\023\002\022\007\004\002\017\t\n\013\t\007\025\002\t\035\n\027\002\003\t 001 001 001 6 035\001 0242*$\026'\035&\001 033\035\0274\025*\027\001 026'&\0261$*\035\001 001 035\001 030\035$'\001 035\033\033\024\033\001 026\027\001 024'\001 035\001 024\033&\035\033\001\024\032\001\007\001\030$\('\026*4&\035\027\001\027\030$\025\025\035\033\001*+$'\001*+\035\001\0353/\0351*\035&\001/\024/4\025$*\026\024'\001 031@\026\(4\033\035\001;\f\006&\\f\001\001 025\027\024#\001 035\001 027*$'&$\033&\001 035-\026$*\026\024'\001 026\027\001 027\030$\025\025\035\033\001 001 035\001 033\035$\027\024'$2\025\035\001 4//\035\033\001 2\0244'&$\0330\001 K\001 035\001 027H4$\033\035\001 033\024\024*\001 024\032\001 035\001 0353/\0351*\035&\001 024*$\025\001 H4$'*\026*0\001 031@\026\(4\033\035\001 f\0061\\001 001 035\001 027\026\('$\025\005*\024\005'\024\026\027\035\001 033$*\026\024\001 027*$2\026\025\0265\035\027\001$\033\0244'&\001\002\r\r\001\031@\026\(4\033\035\001;\f\006\035\\f\001 001 t f\006$\f\001N\035\025\026-\035\0330\001\033$*\035#\001 024 026 001K\001*+\035\001 001 026'/4*\001\032\024\033\001\0353$\030/\025\035\001\020\020\f 001 f\0062\f\001E\024/4\025$*\026\024'#\001 034 026 0011$\02514\025$*\035&\001 20\001\031\003\\001\032\024\033\001\(\026-\035'\001 031!\035 f 001\001 f\0061\f\001 031\006 004 8*$'&$\033&\001&\035-\026$*\026\024 032\004 0 005\004 001 031\017 004 4//\035\033\0012\0244'&\001\032\024\033\001\027\026\0304\025$*\026\024 004\004 f\006&\f\001;1*4$\025\001&\035-\026$*\026\024 001 032\033\024\030 001 035\033$\(\035 032 034 005 004D\004R 005 004"\004 001\001 f\006\035\f\0018\026\('$\025\001*\024\001M\024\026\027\035\001\033$*\026\024 032\004 R 005 n 0 005 004\037 001\001 001 007\b\t\n\013\013 8\026\('$\025\001*\024\001M\024\026\027\035\001U$*\026\024 001 001 002\001\001 004\001\001\001 004\002\001\001 005\001\001\001 005\002\001\001 006\001\001\001 001 004\001\001 006\001\001 025\001\001 027\001\001 003\001\001\001 E\002\t 021   002 t 001 007\b\t\n\013\013 1*4$\025\001N\035-\026$*\026\024 001 036\007\001 036\006\001 036\005\001 036\004\001 001 004\001 005\001 006\001 007\001 001 004\001\001 006\001\001 025\001\001 027\001\001 003\001\001\001 E\027 t 021   027 t 001 001 004\001\001 005\001\001 006\001\001 007\001\001 002\001\001 035\001\001 001 004\001\001 006\001\001 025\001\001 027\001\001 003\001\001\001 007\b\t\n\013\013 E\016\t E\024/4\025$*\026\024'\0018*\fN\035-\f\001 001\001 031\017\\001 031\006\\001 021   016 t 001 001 002\001 004\001\001 004\002\001 005\001\001 005\002\001 001 004\001\001 006\001\001 025\001\001 027\001\001 003\001\001\001 007\b\t\n\013\013 E\024/4\025$*\026\024'#\001 034 005 004\004\004\004 3 006\r 001\t 004\004 004\004\004\004\004 E\006 t A4*/4*\001\001 021   006 t 001 034\001\001 032\001\001 004\001\001\001 004\004\001\001 004\005\001\001 004\006\001\001 004\007\001\001 001 004\001\001 006\001\001 025\001\001 027\001\001 003\001\001\001 N\035\025\026-\035\0330\001U$*\035#\001 024 005 001 001\001 E\005 t 007\b\t\n\013\013 020'/4*\001 021   005 t 


001 006\006\001\001 005\035\023\003\002\t t 0247\n\t\002\013\013\002\016\007\004*\002\t\005\026\0024\026\022\n!\023\t\027\004\017\007\022\004\006!\007\004\n\020\t\013\n\022\t b 030 t\t 6+\026\027\001\0353$\030/\025\035\001\033\035\032\035\033\027\001*\024\001*+\035\001\027$\030\035\001\026'/4*\001&$*$\001$\027\001\026'\001*+\035\001 020\007\021\017\b\f\004 002\002 f\0016+\035\001\026'/4*\001&$*$\001$\033\035\001*+\035\001-\0351*\024\033\027\001\024\032\001*+\035\001&\035\025\026-\035\0330\001\033$*\035\001\031@\026\(4\033\035\001 f\006$\\001$'&\001*+\035\001/\024/4\025$*\026\024'\0012$\025$'1\035\001\031@\026\(4\033\035\001;\f\0062\\f\001\020'\001*+\026\027\0011$\027\035#\001 024%\035-\035\033#\001 035\001 0353/\035\033\026\030\035'*$\025\026\027*\001 024\027\027\035\027\027\035\027\001 024'\0250\001 035\001 001 032\033\024\030\001 001 0332\026*\033$\0330\001 030\024\030\035'*\001 035 005\004 024'%$\033&#\001 001 005 O\t\r\r\f\001 6+\035\033\035\032\024\033\035#\001 035\001 033\0351\035&\026'\(\001 034 t\r\r 001 2\0351\024\030\035\027\001 035\001 14\033\033\035'*\001 034 r 001 001 026'\001 035'\035\033$\025#\001 t\r\r 005 034 007 001 005 034 001 001 t\r\r 005 024 007 001 004 005 024 f\001 M\024*\035\001 001 035\001 14\033\033\035'*\001 034 r 001 0242-\026\0244\027\0250\001 027\001 027\024\030\035\001 036\026'&\001 024\032\001 035\001 026\027*\033\02624*\026\024'P\001 035'1\035#\001 035\001 4'\036'\024%'\001*\0334\035\001&\026\027*\033\02624*\026\024'\001\0304\027*\0012\035\001\035\032\032\0351*\026-\035\0250\001\033\035/\033\035\027\035'*\035&\001*\024\001 025\025\024%\001 0242*$\026'\026'\(\001 001 035'\035\033$\025\0265\035&\001 4\030\035\033\0261$\025\001 027\024\0254*\026\024'\001 024\001 035\001 035H4$*\026\024'\001\031?\\f\001 026\(4\033\035\001;\f\017\001&\035\030\024'\027*\033$*\035\027\001*+\035\0011\024\030/$\033\026\027\024'\0012\035*%\035\035'\001*%\024\0011$\027\035\027\f\001 026\(4\033\035\001 f\017$\001 026\025\0254\027*\033$*\035\027\001 035\001 035-\026$*\026\024'\001 024\032\001 035\001 1$\02514\025$*\035&\001 024/4\025$*\026\024'\001\032\033\024\030\001*+\035\001$1*4$\025\001&$*$#\001+$-\026'\(\001 034 r\001 2\035\035'\001%\033\024'\(\0324\025\0250\001 1\024'\027\026&\035\033\035&\001 024\001 035\001 024\001 035\001 026\027*\033\02624*\026\024'\001 20\001 035\001 032\024\033\0304\025$\001 031\003\#\001 035\033\035$\027\001@\026\(4\033\035\001;\f\0172\001\027+\024%\027\001*+\035\0011\024'\027\035H4\035'1\035\001\024\032\001$'\001\026*\035\033$*\026-\035\001 033\0241\035\027\027\001 2$\027\035&\001 024'\001 024\005\(\033\0244/\001 035\001 026\027*\033\02624*\026\024'\001 025\035$&\026'\(\001 024\001 035\001 1\024'-\035\033\(\035'1\035\001 024\032\001 034 026 001 027\001 035\033\001 031\006\r\#\001 026*+\001 035\001 1*4$\025\001 024/4\025$*\026\024'\001 f\0016+\035\001\0353/\0351*\035&\001\0244*/4*#\001\026\f\035\f\001*+\035\001*\0334\035\001&$*$#\001\026\027\001&\033$%'\00120\001*+\035\001 027\024\025\026&\001\025\026'\035\001\026'\001@\026\(4\033\035\001;\f\017\f\0016+\026\027\001\026\027\001\026&\035'*\0261$\025\001*\024\001@\026\(4\033\035\001;\f\0062\00124*\001 026\032\032\035\033\035'*\0250\001\0271$\025\035&\001\024'\001*+\035\001-\035\033*\0261$\025\001$3\026\027\f\001 6+\035\001 026*\035\033$*\026\024'\001 033\0241\035\027\027\001 027\001 2\035\035'\001 035\033\030\026'$*\035&\001 4\027\026'\(\001 001 026\0274$\025\001 1\033\026*\035\033\026\024'\0011\024'1\0254&\026'\(\001*+\035\001\032\024\025\025\024%\026'\(\001-$\0254\035\027\001\024\032\001*+\035\001/$\033$\030\035*\035\033\027L\001 022 031 n\0162\024\022  O\t?\0019*\026\030\035\0014'\026*\027:#\001 022 031 016\b\033  O\006\002\007\0019*\026\030\035\0014'\026*\027:\001$'&\001 3 r\f?\r?\f\001 6+\035\027\035\001 0254\035\027\001 033\035\001 1*4$\025\0250\001 030\035$'\026'\(\025\035\027\027\001 24*\001 027411\035\027\027\0324\025\0250\001 033\035/\033\035\027\035'*\026'\(\001*+\035\0014'\036'\024%'\001\033\035$\025\001&\026\027*\033\02624*\026\024'\f\001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 027\f\022\f\024\0336\004 f\017 037\004%\007\b\0252\b\007\003\f\033\004\017\016\0172\b\007\003\005\016\024\004\007\006\0062\021\005\024\022\004\034 r 004\023\007\006\004\024\016\004\007\022\f\004\021\f\021\016\r\n\004\004 004\004\007\006\004\017\f\r 001\031\003 037\004 f\0172 037\004%\007\b\0252\b\007\003\f\033\004\017\016\0172\b\007\003\005\016\024\004\007\006\0062\021\005\024\022\004\034 r 017 023\007\006\004\003\t\016\004\007\022\f\036\022\r\0162\017\004\004 004\004\033\005\006\003\r\005\0132\003\005\016\024\004\007\006\004\017\f\r\004 031\006\r 037 017 001 004\026!\022\002\t\021\(>\t$\t/\n\023!\003\005\007\004\n\020\t\013\n\022\t\0077\n\t\005\026\0024\026\022\n!\023\t\005\023\023\022\n\005\016\025 001 001 6 035\001 026\030/$1*\001 024\032\001 033\035$*\026'\(\001 034 r 001 033\024'\(\0324\025\0250\001 032$&\035\027\001 0\001 032*\035\033\001 025\025\001 035\001$\033*\0261\025\035\027\001\024\032\001 034 r\001 001+$-\035\001\022&\026\035&\022#\001\026'\001*+\026\027\001\0353$\030/\025\035\001$\033\0244'&\001 035 004\r\r f\001 001 001 001 t 005\035\023\003\002\t"0 t 024\025\002\t\004\035\023\003\002\035\002\020\007\005\007\004\n\020\t\n\013\t\022\002\005\003\t\013\004\002\003\027\t\027\005\007\005\t\t 6+\035\001 0353*\001 0353$\030/\025\035#\001 026\030\026'\(\001 001 035\001 035-\035\025\024/\030\035'*\001 024\032\001 1*4$\025\001 027/\0351\026\035\027I\001\033\035\025\026$2\026\025\026*0\001\030\024&\035\025#\001\032\024\025\025\024%\027\001$\001\033\0244*\035\001\032\024\033\001\026\030/\025\035\030\035'*\026'\(\001 035\001\(\035'\035\033\0261\001/\033\0241\035&4\033\035\001\0244*\025\026'\035&\001\026'\001\027\0351*\026\024'\001?\f\001\001 M\024'\035*+\035\025\035\027\027#\0014\027\035\0324\025\001\033\035\(4\025$\033\0265$*\026\024'\027\001$\033\035\0010\035*\001/\024\027\027\0262\025\035\001/\033\026\024\033\001*\024\001 035\001 0250\027\026\027\f\001 020'*\033\024&41\026'\(\001 035\001&$*$\001*\024\001*+\035\001 035H4$*\026\024'\001 031\004\\001 026\025\035\001 4\033/\024\027\035\0250\001 033\035\027\027\026'\(\001 035\001 0353/\024'\035'*\026$\025\001 033\035\025\026$2\026\025\026*0\001 030\024&\035\025\001 035'$2\025\035\027\001 035\001 1$\02514\025$*\026\024'\001 024\032\001 035\001 027/\0351\026\035\027I\001 G66@\f\001 6+\026\027\001 1+$\033$1*\035\033\026\027*\0261\001 026\027\001 0353/\0351*\035&\001 024\001 033\0243\026\030$*\035\0250\001 030$\026'*$\026'\001 026*\027\001 0254\035\001 026'\001 035\001 032\026'$\025\001 030\024&\035\025\001 032\024\033\001 0'$\030\0261#\001 030$\027\027\005\027*$*\026\027*\0261\027#\001 001 2$\027\035\f\001 6+\026\027\001 0\026\035\025&\027\001 035\001 0271$\025\035\001 033$\030\035*\035\033\001 9*\026\030\035\001 4'\026*\027:\001 K\001 035\033\035\026'$\032*\035\033\001*+\035\001G66@#\001%+\0261+\001@\024\033\001*+\035\001C\035\02624\025\025\001&\026\027*\033\02624*\026\024'\001\026\027\001 0353/\033\035\027\027\035&\001 20\001 022 023 006 006\n 035\035 025 024 001 006  007 001 026*+\001 Y\001 027\001 035\001 034$\030\030$\001 032 4'1*\026\024'\f\0016+\026\027\001G66@\001\027\035*\027\001$\001-$\025\026&\001\(4\035\027\027\001-$\0254\035\001$'&\001\035\026*+\035\033\001\024\032\001 035\001 033$\030\035*\035\033\027\001  001 024\033\001  001 025\024'\035\001 027+\0244\025&\001 2\035\001 032\026**\035&\f\001 024\033\001 025\035\027\027\001 0'$\030\0261\001 001 2$\027\035\027#\001 033*\02614\025$\033\0250\001 026*+\001 024\001 035%\001 035\025\026-\035\033\026\035\027\001 027\001 026'\001 035\001 1$\027\035\001 027*4&0\001 002\002 001 035\001 035\033$\(\035\001 024/4\025$*\026\024'\001 035\001 001 035 r 001 026\032\001 026\025$2\025\035#\001\030$0\0012\035\0014\027\035&\001$\027\001$\001\(4\035\027\027\001-$\0254\035\001\032\024\033\001*+\035\001\035\032\032\0351*\026-\035\001$\(\035\f\001\001 024\025\025\024%\026'\(\001 035\001 033\0241\035&4\033\035#\001 035\001 032\026\033\027*\001 027\035\001 024\032\001 035\001 0250\027\026\027\001 035'1\035\001 027\0274\030\035\027\001 001 035\001 035\001 026\027*\033\02624*\026\024'\001 024\032\001 034 r 001 026\027\001 0353/\033\035\027\027\035&\001 20\001$\001\024'\035\005\(\033\0244/\001\035\032\032\0351*\026-\035\001$\(\035\f\0016+\035\001\030$*+\035\030$*\0261$\025\001&\035\0271\033\026/*\026\024'\001 024\032\001*+\026\027\0011$\027\035\001\026\027\001*+\035\001\027$\030\035\001$\027\001\026'\001*+\035\001\032\024\033\0304\025$\001\031\006\r\\001%\026 r 034 001 f\001 6+\035\001 026*\035\033$*\026-\035\001 033\024\(\033\035\027\027\001 026'\001 032\026**\026'\(\001 035\001 030\024&\035\025\001 026\027\001 1+\026\035-\035&\001 20\001 030\035$'\027\001 024\032\001$\001\033\035\025\035-$'*\001/\035'$\025*0\001\031\025\024\027\027\\001\0324'1*\026\024'\f\001\020'\001\0244\033\001$'$\0250\027\026\027\001 035\001 033\024\024*\001 030\035$'\001 027H4$\033\035\001 035\033\033\024\033\001 031 031*5 001 027\001 026\030/\025\035\030\035'*\035&\f\001 020*\001 030\035$\0274\033\035\027\001 035\001 001 2\035*%\035\035'\001 035\001 030\024&\035\025\001 024\032\001 035\001 035H4$*\026\024'\001 031\006\r\\001 001*+\035\001\032\026\035\025&\001$1*4$\025\001/\024/4\025$*\026\024'\f\0016+\035\001UG8\021\001\032\024\033\0304\025$\001\026\027L\001 022 023 022 023 017 Z Z 006 031  031  f f  005 021\016\033\f\b 005 030\005\f\b\033 005 031*5 017 034 017 034  033 030 001 001 002 002 n 002 002 001 C+\035\033\035 017 002 001\026\027\001$\001-\0351*\024\033\001\024\032\001$\025\025\001\030\024&\035\025\001/$\033$\030\035*\035\033\027\001$\027\001/\035\033\001\031\006\r\\001$'&\001 031  005 033\037\030\037 001\026\027\001*+\035\001'4\0302\035\033\001\024\032\001\033\035$&\026'\(\027\001\030\026'4\027\001&\035\(\033\035\035\027\001\024\032\001\032\033\035\035&\024\030\001 K\001*+\035\001\030\024&\035\025I\027\001'4\0302\035\033\001\024\032\001/$\033$\030\035*\035\033\027\f\001\001 6\0334'1$*\026'\(\001 1\033\026*\035\033\026\024'\027\001 033\035\001 025\027\024\001 033\035H4\026\033\035&\f\001 6+\0350\001 030$0\001 0330\001 02742>\0351*\001 024\001 035\001 H4$\025\026*0\001 024\032\001 035\001 001 035\001 033\035H4\026\033\035&\001 114\033$10\001 024\033\001 035\001 027*$\(\035\001 024\032\001 035\001 033\0241\035&4\033\035\f\001 024\033\001 026'\027*$'1\035#\001 026'\001 1$\027\035\001 001 024'\035\005 033\0244/\001 035\032\032\0351*\026-\035\001 035\001 030\024&\035\025\001 026\027\001 032$\033\001 032\033\024\030\001 1\024'-\035\033\(\026'\(#\001 026\0274$\025\001 1\033\026*\035\033\026\024'\001 030$0\001 0274\032\032\0261\035\001 024\001 030\024-\035\001 032\024\033%$\033&\001 024\001 035\001 0353*\001 027\035\001 4\027\026'\(\001 024\005\(\033\0244/\001 035\032\032\0351*\026-\035\001 035\001 030\024&\035\025\f\001 020'\001 024*+\035\033\001 1$\027\035\027#\001 035\001 033\0241\035&4\033\035\001 030$0\001 2\035\001 0334'1$*\035&\001 026\032\001 035\001 026\030/\033\024-\035\030\035'*\001 026'\001 UG8\021\001 0254\035\001\026\027\001'\035\(\025\026\(\0262\025\035\f\001\020'\0011$\027\035\001*+\035\001\026'/4*\001&$*$\001$\033\035\001\030\024\027*\001&0'$\030\0261#\001 027\001 026'\001 035\001 1$\027\035\001 027*4&0\001 4 001 035\001 UG8\021\001 030$0\001 2\035\001 1\024\030/$\033\035&\001 024\001 001 11\035/*$2\025\035\001 035-$\0254$*\026\024'\001 024\032\001 035\001 026'/4*\001 032\02541*4$*\026\024'\027P\001 020\032\001 026*\001 026\027\001 027\030$\025\025\035\033\001 001 035\001 026'/4*\001 027*$'&$\033&\001 035-\026$*\026\024'#\001 035\001 033\0241\035&4\033\035\001 0304\027*\0012\035\001*\0334'1$*\035&\001\027\026'1\035\001$'0\001\027\035\035\030\026'\(\001\026\030/\033\024-\035\030\035'*\001\026\027\001$\001\030\035\033\035\001 026\025\0254\027\026\024'\f\001 6+\035\001 025$\027*\001 027*\035/\001 024\032\001 035\001 033\0241\035&4\033\035\001 0353$\030\026'\035\027\001 035*+\035\033\001 035\001 1\024'\027\035H4\035'*\026$\025\001 030\024&\035\025\001 024\032\001 035\001 033\035\025\026$2\026\025\026*0\001 0324'1*\026\024'#\001 026*+\001 024'\035\005 033\0244/\001 035\032\032\0351*\026-\035\001 035#\001 026\027\001 027$*\026\027\032$1*\024\0330\001 11\024\033&\026'\(\001 024\001 035\001 0334'1$*\026'\(\001 1\033\026*\035\033\026\024'\f\001 020*\001 030$0\001 027*\026\025\025\001 2\035\001 024\027\027\0262\025\035#\001 024%\035-\035\033\001 024*\001 0351\035\027\027$\0330#\001 024\001 0324\033*+\035\033\001 030\024&\026\0320\001 035\001 030\024&\035\025\001 20\001 1\024\030\030\035'1\026'\(\001 001 027\0351\024'&\001 027\035\001 026*+\001 024\005\(\033\0244/\001 035\032\032\0351*\026-\035\001 035\001 026\027*\033\02624*\026\024'\f\001 001 026\027\001/+$\027\035#\001*+\035\001%+\024\025\035\001/\033\0241\035&4\033\035\001\026\027\001/\035\033\032\024\033\030\035&\001$\025\025\001\024-\035\033\001$\($\026'#\001 026*+\001\030\024\033\035\0014'\036'\024%'\001/$\033$\030\035*\035\033\027\001$\027\001/\035\033\001\031\006\r\\f\001\001 001 001 004\034\001 005\001\001 005\005\001 005\007\001 005\035\001 005\034\001 006\001\001 001 005\001\001 007\001\001 035\001\001 034\001\001 004\001\001\001 007\b\t\n\013\013 031 031?2 001 EJJ\t 032\020&\024\017\022\b\032\033\013\013\013\013\013\013\013\013 \013\003\001 013 005 013 001 031  f 017   001\001 031  f 017 2  001\001 


Copyright © 2009 Boeing. All rights reserved  Correlation Process To archive received ASDI data  Track messages must be correlated with flight plan messages FLIGHT_KEY assigned Uncorrelated data tagged Approx 30 minutes to correlate one day of data 


Copyright © 2009 Boeing. All rights reserved  Historical Data Processing To load correlated data  Uncompress, unmarshall  Create a list of files containing the correlated data  Write data to warehouse 


Copyright © 2009 Boeing. All rights reserved  Live Data Processing Processed using IBM MQ IBM Message Broker and a technique called XML Shredding Message Broker Compute Nodes  Uncompress Node  Extract correlated messages  Shred Node adds to DB Stored Procedure ìshreds XML docs and adds to tables 


Copyright © 2009 Boeing. All rights reserved  Issues and Observations Initial load of one day of data ~ 7 hours Optimizations  Write data in batches  Use a mutable data structure to create data strings  Deploy a higher performance machine  Use load instead of insert  Use DB2 Range-Partitioned tables  Database tunings Time reduced from 7 hours to approx 30 minutes 


Copyright © 2009 Boeing. All rights reserved  Optimizations Use a mutable data structure to create data strings  Original application created the SQL statement by appending elements to a Java String  It was taking five hours \(of the seven hours Strings  Instead Java StringBuilder used  Java Strings immutable  Time savings of 71.4 


Copyright © 2009 Boeing. All rights reserved  Optimizations Deployed on a higher-performance machine  Application ported from IBM Blade Center HS21 \(4GB of RAM and 64-bit dual-core Xeon 5130 processor to Dell M4500 computer \(4GB of RAM and 64-bit of quad-core Intel Core i7 processor  Reduced the time to thirty minutes Bulk loading instead of insert  Application was modified to write CSV files for each table  Entire day worth of data bulk loaded  Reduced the time to fifteen minutes 


Copyright © 2009 Boeing. All rights reserved  Optimizations Range-Partitioned tables \(RPT  To limit the size of tables, the original code created multiple tables per table type  This puts burden on the application to query multiple tables when a range crosses several tables  With RPT, user is not required to make multiple queries when a range crosses a table boundary  Increased the time to thirty minutes  Additional fifteen minute cost per day of partitioning enabled time savings during queries 


Copyright © 2009 Boeing. All rights reserved  Optimizations Database tunings  Range periods changed from a week to a month  Automatic table space resizing changed from 32MB to 512KB  Buffer pool size decreased  Decreased the time to twenty minutes Overall, total time savings of 95.2 


Copyright © 2009 Boeing. All rights reserved  20 IBM Confidential Analytics Landscape Degree of Complexity Competitive Advantage Standard Reporting Ad hoc reporting Query/drill down Alerts Simulation Forecasting Predictive modeling Optimization What exactly is the problem What will happen next if What if these trends continue What could happen What actions are needed How many, how often, where What happened Stochastic Optimization Based on: Competing on Analytics, Davenport and Harris, 2007 Descriptive Prescriptive Predictive How can we achieve the best outcome How can we achieve the best outcome including the effects of variability Used with permission of IBM 


Copyright © 2009 Boeing. All rights reserved Initial Analysis Activities Flights departing or arriving on a date Flights departing or arriving within a date and time range Flights between city pair A,B Flights between a list of city pairs Flights passing through a volume on a date. \(sector, center, etc boundary Flights passing through a volume within a date and time range Flights passing through an airspace volume in n-minute intervals All x-type aircraft departing or arriving on a date Flights departing or arriving on a date between city pair A,B Flights departing or arriving on a date between a list of city pairs Flights passing through a named fix, airway, center, or sector Filed Flight plans for any of the above Actual departure, arrival times and actual track reports for any of the above 


Copyright © 2009 Boeing. All rights reserved  Initial SPSS Applications Show all tracks by call sign 


Copyright © 2009 Boeing. All rights reserved  Predictive / Prescriptive Analytics Use-Case For a given Airspace Volume of Interest \(AVOI compute distinct traffic volume at some point in the future  Aim to alert on congestion due to flow control areas or weather if certain thresholds are exceeded  Prescribe solution \(if certain thresholds are exceeded Propose alternate flight paths  Use pre-built predictive model  SPSS Modeler performs data processing Counts relevant records in the database \(pattern discovery Computes traffic volume using statistical models on descriptive pattern Returns prediction with likelihood 


Copyright © 2009 Boeing. All rights reserved  Predictive / Prescriptive Analytics Use-Case Advanced Arrival Procedures with Active Abatement Potentials   9/23/10  24 Pulls in the TRACKINFO table of MAIN using SQL Limits the data to database entries which fall inside the AVOI Combines the SOURCE_DATE and SOURCE_TIME to a timestamp that can be understood by modeler Computes which time interval the database entry falls in. The time interval is 15 minutes Defines the target and input fields needed for creating the model Handles the creation of the model Produces a graph based off of the model results Final prediction 


Copyright © 2009 Boeing. All rights reserved  Initial Cognos BI Applications IBM Cognos Report Studio  Web application for creating reports  Can be tailored by date range, aircraft id, departure/arrival airport etc  Reports are available with links to visuals IBM Framework Manager  Used to create the data package  Meta-data modeling tool  Users can define data sources, and relationships among them Models can be exported to a package for use with Report Studio 


Copyright © 2009 Boeing. All rights reserved  Flights Departing Las Vegas on Jan 1, 2012 1 of 3 Report shows the departure date, departure and arrival locations and hyperlinks to Google Map images DeparturePosition and ArrivalPosition are calculated data items formatted for use with Google Maps Map hyperlinks are also calculated based on the type of fix 


Copyright © 2009 Boeing. All rights reserved  Flights Departing Las Vegas on Jan 1, 2012 2 of 3 DeparturePosition, Departure Map, ArrivalPosition and Arrival Map are calculated data items \(see departure items below DepartureLatitude DepartureLongitude DeparturePosition Departure Map 


Copyright © 2009 Boeing. All rights reserved  Flights Departing Las Vegas on Jan 1, 2012 3 of 3 


Copyright © 2009 Boeing. All rights reserved  Conclusion and Next Steps Current archive is 50 billion records and growing  Approximately 34 million elements per day  1GB/day Sheer volume of raw surveillance data makes analytics process very difficult The raw data runs through a series of processes before it can be used for analytics Next Steps  Continue application of predictive and prescriptive analytics  Big data visualization 


Copyright © 2009 Boeing. All rights reserved  Questions and Comments Paul Comitz Boeing Research & Technology Chantilly, VA, 20151 office Paul.Comitz@boeing.com 


Copyright © 2009 Boeing. All rights reserved Advanced Arrival Procedures with Active Abatement Potentials   9/23/10  31 


Copyright © 2009 Boeing. All rights reserved Advanced Arrival Procedures with Active Abatement Potentials   9/23/10  32 Backup Slides 


Copyright © 2009 Boeing. All rights reserved  Initial Approach Initial Investigations  Apache Solr/Lucene  Data Warehouse Evaluate Hadoop in the future 


Copyright © 2009 Boeing. All rights reserved  Using SOLR Uncompress Track Information Messages To use with Solr  Transforming track messages from their  original schema to Solr required building a ìkey, valueî list using an XSTL  Queries made against this list of ìkey, valueî pairs Transformation Process  One day of data ~ 4.5 hours Once transformation complete search/query performance very good Geo spatial queries using  unique query language 


Copyright © 2009 Boeing. All rights reserved  Representation Aviation data is frequently represented in more than one form 


