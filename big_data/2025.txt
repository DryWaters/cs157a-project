Applying Web Usage Mining Techniques to Discover Potential Browsing Problems of Users  I-Hsien Ting, Chris Kimble and Daniel Kudenko Department of Computer Science, The University of York derrick, kimble, kudenko}@cs.york.ac.uk  Abstract In this paper, a web usage mining based approach is proposed to discover potential browsing problems Two web usage mining techniques in the approach are introduced, including Automatic Pattern Discovery APD\ and Co-occurrence Pattern Mining with Distance Measurement \(CPMDM\. A combination method is also discussed to show how potential browsing problems can be identified  1. Introduction  Website design is an important criterion for the success of a website. In order to improve website design, it is essential to understanding how the website 
is used through analysing users\222 browsing behaviour Currently there are many ways to do this, and analysis of the clickstream data is claimed to be the most convenient and cheapest met W e b usage mining is a tool that applied Data Mining techniques to analyse web usage data  1 an d it is a su itab l e technique that can be used to discover potential browsing problems. However, traditional web usage mining techniques are not sufficient enough for discovering potential browsing problems, such as Clustering, Classification and Association Rule In this paper, we proposed an approach, which is based on the concept of web usage mining and follows the KDD \(Knowledge Discovery in Database process Two main techniques are included, which are Automatic Pattern Discovery, and a co-occurrence 
pattern mining, which is improved from traditional traversal pattern mining. These techniques are claimed can be used to discover potential browsing problems  2. An Approach for Applying Web Usage Mining Techniques  In this paper, we proposed an approach for applying web usage mining techniques to discover potential browsing problems. Figure 1 presents the proposed approach, which is In this approach, the KDD process will be run as a normal process, from data collection and preprocessing, to pattern discovery and analysis recommendation and action. The second step \(pattern discovery and analysis\e the main focus of this paper  
  
 Figure 1 A KDD based approach for discovering potential browsing problems   3. Automatic Patterns Discovery \(APD  In our previ  som e  i n t e rest i ng pat t e rns have already been identified, including Upstairs and Downstairs pattern Mountain 
pattern and Fingers  pattern. The Upstairs pattern is found when the user moves forward in the website and never back to the web page visited before. The Downstairs pattern is that the user moves backward that is the user returns to the visited pages. The Mountain pattern occurs when a Downstairs pattern immediately follows an Upstairs pattern. The Fingers pattern occurs when a user moves from one web page to browse another web page and then immediately returns to the first web page. These patterns are claimed to be very useful for discovering potential browsing problem for further detail The APD method is based on the concept of sequential mining to parse the browsing routes of users 
The APD method is performed by a three-level browsing route transformation algorithm. The level-1 elements include Same  Up and Down The level-2 elements are Peak and Trough and the final level is to discover the Stairs  Fingers and Mountain pattern  for m o re det a i l about t h e APD m e t hod Table 1 shows an example of number-based browsing sequences, which are transformed from the browsing routes of users \(the number denotes the 


occurrence sequence of the visited web page in a user\222s session\e 2 shows the discovered final patterns by performing the APD method  Table 1 Number-based browsing sequences  Number Number-based sequence 1 0,1,2 2 0,0,1,0,2,0,3,0,4,0,5,6,7,6,7,8,6,4,6,5,0  Table 2 Final patterns  N umber Patterns 1 Upstairs 2  Finger, Finger, Finger, Finger, Mountain Mountain, Mountain  4. Co-occurrence Pattern Mining with Distance Measurement \(CPMDM  CPMDM is another technique that can be used to analyse the browsing behaviour of users, which is an improvement of co-occurrence pattern mining by introducing a Distance measurement. Co-occurrence pattern is a pattern that used to describe the cooccurrence frequency \(or probability\f two web pages in users browsing routes. The additional measurement Distance is a measurement that used to measure how many browsing steps from one page to another in a co-occurrence pattern There are three different di rections of the distance measurement, including Forward  Backward and Two-Way The Forward distance measures the distance from web page A to B of the co-occurrence pattern A B. The Backward distance on the other hand measures the distance from B to A of the cooccurrence pattern A B  The Two-Way distance combines forward and backward distance. It ignores the direction of the association rule, and takes all cooccurrence patterns about A and B  5. Combining APD and CPMDM for Discovering Browsing Problems  The analysis results of the APD and CPMDM are two totally different analyses of users\222 browsing behaviour. However, there will be some biases if only one of these two methods is used to assess the website\222s design. Therefore if the analysis results of the APD and CPMDM can be combined, more concrete indications of potential problems in the website\222s design can be discovered Table 3 shows an example about combining the APD and CPMDM methods for discovering potential browsing problems. In this case, the starting page of the co-occurrence patterns is the home page of the University of York website. In the table, the Support means the probability of the co-occurrence pattern and the Distance is the averag e forward distance of the pattern. The proportion of Stairs and Fingers pattern is measured by using the APD method. In this case, we consider that the fingers pattern is a problematical pattern, and the longer the distance means the more difficult for a user to traverse from one page to another Therefore, the browsing route from home page to uao/ugrad/course page can eas ily to be discovered as a route that potential browsing problem may occur  Table 3 Combining the APD and CPMDM of \223The people who view home page then view\224 URL Support Distance Average Stairs Pattern Fingers Pattern uao/ugrad/ 0.25 9.1271 44% 39 gso/gsp/ 0.173 5.3195 52% 26 uao/ugrad/courses 0.127 16.9021 34 47  6. Conclusion  This paper proposed a users\222 browsing behaviour analysis approach which is based on applying web usage mining techniques. The concepts of the APD and CPMDM have been briefly introduced, and the combination method has been discussed in this paper as well. From the example of the combination method it showed that potential browsing problems of users can be discovered easily. The approach that proposed in this paper is therefore beneficial for the area of website design improvement  7. References    Cooley  R Mobasher, B. and Srivastave, J. \(1997 Mining: Information and Patte rn Discovery on the World Wide Web\224 In Proceedings of the 9th IEEE ICTAI Conference pp. 558-567, Newport Beach, CA, USA  Lee, J., Podlaseck, M Schonberg, E., Hoch, R. \(2001 223Visualisation and Analysis of Clickstream Data of Online Stores for Understandi ng Web Merchandising\224 Journal of Data Mining and Knowledge Discovery Vol. 5, pp. 59-84  Kohavi, R., Mason, L. a nd Zheng, Z. \(2004\\223Lessons and Challenges from Mining Retail E-commerce Data\224 Machine Learning Vol. 57, pp. 83-113  Ting, I. H., Kimble C Kudenko, D. \(2004 and Classifying the Pattern of User\222s Browsing Behavior for Website Design Recommendation\224 In Proceedings of 1 st  KDDS workshop 20-24 September, Pisa, Italy  Ti ng, I., C l ark, L., Ki m b l e C  Kudenko D and Wright, P. \(2007\ for Identifying Behavioural Patterns Automatically from Clickstream Data Accepted to appear in KES2007 Conference 1214 September 


003\020\020\f\002\026\b\003\002\006 b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b<\024\003\020\r\003\021\bST<\004\003\024\033\026\003<\033\033=\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b 007\n\b<\003\002\026\b<\f-\034\003\004\b<\004\f\002\022\016\023\b<\r\003\021\b\001==\b<\004\f\002\022\016\023\b\033\033 b\b\b\b\b<\006\t\024\f\bST<\004\003\024\033\026\003<2=\b<\006\034\033\006\f\016\020\b<\021\f\024\t\017\f\b2\b<\r\003\021\b\001=\b bU\016\f\006\016\bT\f-\034\003\004=\b\033\033\bU\016\f\006\016\bT\f-\034\003\004==\b<\r\003\021\b\001 b\b\b\b\b\b\b<\006\t\024\f\bST<\004\003\024\033\026\003<2=\b<\006\034\033\006\f\016\020\b<\021\f\024\t\017\f\b2\b\033\033\bU\016\f\006\016 b T\f-\034\003\004=\b<\r\003\021\b\001=\b\bU\016\f\006\016\bT\f-\034\003\004==\b\033\033 b\b\b\b\b\b\b<\002\t\016\b<\006\034\033\006\f\016\020\b<\r\003\021\b\001=\b\033\033\bU\016\f\006\016\bT\f-\034\003\004 b\b\b\b\b\b\b\b<\002\t\016\b<\006\034\033\006\f\016\020\b\033\033\b<\r\003\021\b\001=\b\bU\016\f\006\016\bT\f-\034\003\004 b\b\b\b\b\b\b\b b\b\b\b\b\b\b\b\b<\021\f\024\t\017\f?\026\034\020\004\007\r\003\016\f\006\b<\003\020\020\f\002\026\b<\r\003\021\b\001=\b\033\033=\b\b b\b\b\b\b\b\b\b\b\b\b\b\b\bU\016\f\006\016\bST\f-\034\003\004\020=\b==\b<\r\026\021\b\001 b\b\b\b\b\b b\b\b 013\f\r\016\017\020\026\021\005\017\020\r b\006\034\020\020\t\021\016\bQ\t\020\016\007\t\002\003\004\b<\026\003\016\003\033\003\006\f b R\026\003\016\003\033\003\006\fR b\b\b<\026\t\b<<\001\b+.\b<\r\026\021\b\001 b\b\b\b\b\b\b\b<\003\002\006\b\002\007\004=\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b b\b\b\b\b\b\b\b b\b\b\b\b\b\b<<\002\034\004\004\b\001=\b<\021\f\024\t\017\f?\007\n\bST<\004\003\024\033\026\003<2=\b b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b<W\b<\r\003\021\b2=\b\006\034\020\020\t\021\016==\b\b\003\002\006\b b\b\b\b\b\b<\006\f\016-\b\003\002\006\b<\r\t\002\006\b\b<\r\t\002\006\b<\n\004\t\003\016\b<>\b<\n\007\002\026?\n\021\f-\034\f\002\r\005\b<\r\003\021 b 001=\b\026\003\016\003\033\003\006\f=\b<\004\f\002\022\016\023\b\b\026\003\016\003\033\003\006\f===\b<\r\003\021\b\001==\b\b\b\b\b\b\b\b b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\003\002\006 b\b\b\b=\b 013\f\r\016\017\020\026\006\027\027\024\003\022\020\030\027\r\024\022\020\004\r\025\003\r\004\003 Q\t\020\016\007\t\002\003\004\b<\026\003\016\003\033\003\006\f\bR\f2 026\003\016\003\033\003\006\fR b\b\b\b\b\b<\021\f\024\t\017\f?\026\034\020\004\007\r\003\016\f\006\b<\003\020\020\004\005\bST\003\020\020\f\002\026\b\026\003\016\003\033\003\006\f=\b U\016\f\006\016\bST\f-\034\003\004 b\b\b 026\f\n\034\002\b 016\022\020\f\024\016\005\r\032\017\r\020\007\033 f\004\f\bQ\t\020\016\007\t\002\003\004\b<\026\003\016\003\033\003\006\f\bR\f2 026\003\016\003\033\003\006\fR b\b\b\b<\r\t\034\002\016?\007\n\b\bST<\004\003\024\033\026\003<2=\b\b 006\034\033\006\f\016\020\b\f\004\f\b2\b\bU\016\f\006\016\bST\f-\034\003\004\020=\b\b=\b\026\003\016\003\033\003\006\f=\b 034\b 026\027\004\001!\007\b\017\r\016 3\t\022\007\r\003\004\004\005\b\003\b\021\034\004\f\b\007\006\b\003\002\b\007\024\020\004\007\r\003\016\007\t\002\b\007'\f'\b\007\n%%\016\023\f\002%%\b\r\t\002\006\016\021\034\r\016 b t\002\026\007\016\007\t\002\b\020\003\021\016\b\007\006\b.\002\t/\002\b\003\006\b\003\002\016\f\r\f\026\f\002\016\b\003\002\026\b\016\023\f\002\b\020\003\021\016\b\007\006\b.\002\t/\002 b 003\006\b\r\t\002\006\f-\034\f\002\016'\b\036\002\b\020\021\t\016\t\016\005\020\f\b\006\t\n\016/\003\021\f\b\t\n\b\016\023\007\006\b\021\f\006\f\003\021\r\023\b/\t\021.\b\003 b 021\034\004\f b 007\006 b 021\f\020\021\f\006\f\002\016\f\026 b 033\005 b 003 b 004\007\006\016 b t\n b 016\023\007\021\016\f\f\002 b 017\003\004\034\f\006 b 007\002\r\004\034\026\007\002\022 b 003\002\016\f\r\f\026\f\002\016 b 003\002\026 b r\t\002\006\f-\034\f\002\016 b 035\t\021\024\003\016 b t\n b 016\023\f b 021\034\004\f b 003\002\026 b 007\016\006 b 003\006\006\t\r\007\003\016\f\026\b\017\003\004\034\f\006\b\007\006\b\006\023\t/\002\b\033\f\004\t/9 013\n\023\020\016\022\f\r\020\007\r\035 026 036\017\021\021\023\005\004\035 026 037\023\004\006\027 \001\f!\017\003\004\r\f \001\025\023\017\020\004\035 026 037\023\004\006\027 \034\017\r \001\025\023\017\020\004\035 026 037\023\004\006\027 "\006\022\f \001\025\023\017\020\004\035 026 037\023\004\006\027 \007#\006\005\030\r\f \001\025\023\017\020\004\035 026 001\031\r\005\006\030\r \001\f!\017\003\004\r\f \001\025\023\017\020\004\035 026 001\031\r\005\006\030\r \034\017\r \001\025\023\017\020\004\035\026 001\031\r\005\006\030\r "\006\022\f \001\025\023\017\020\035 026 001\031\r\005\006\030\r \n#\006\005\030\r\035 \001\025\023\017\020\004\035\n\027\006\022\025 \020\023 $\022\003\004\035 001\020\004\r\007\r\f\r\020\004\026 n\023\020\003\r\032\017\r\020\004 001\002\016\f\r\f\026\f\002\016\b\003\002\026\b\r\t\002\006\f-\034\f\002\016\b\003\021\f\b\022\007\017\f\002\b\003\016\b\016\023\f\b\f\002\026 \b\003\021\f\b\016\023\f\b\004\007\006\016 b t\n\b\036+\030\b\003\002\026>\t\021\b+!#\b\r\t\026\f\006'\b\001\002\016\f\r\f\026\f\002\016\b\004\007\006\016\b\007\006\b\022\007\017\f\002\b\033\005\b\016\023\f\b\034\006\f\021 b 023\007\004\f b r\t\002\006\f-\034\f\002\016 b 004\007\006\016 b 007\006 b 022\f\002\f\021\003\016\f\026 b 033\005 b 001\020\021\007\t\021\007?\024\t\026\007\n\007\f\026 b 003\004\022\t\021\007\016\023\024'\b 004\003\007\024%\002\t%3\007\006\016\b\007\006\b\016\023\f\b\004\007\006\016\b\t\n\b\016\023\t\006\f\b\r\004\003\007\024\b\002\034\024\033\f\021\006\b/\023\007\r\023\b\003\021\f b 006\034\020\020\t\021\016\007\002\022\b\016\023\007\006\b\021\034\004\f\006\b\007'\f'\b\033\t\016\023\b\003\002\016\f\r\f\026\f\002\016\b\003\002\026\b\r\t\002\006\f-\034\f\002\016\b\b\r\t\026\f\006 b 003\021\f\b\020\021\f\006\f\002\016\b\007\002\b\016\023\t\006\f\b\r\004\003\007\024\006'\b\001\004\004\b\016\023\f\b\020\003\005\024\f\002\016\006\b\017\003\004\034\f\006\b\006\023\t/\b\016\023\f b 020\003\005\024\f\002\016 b 020\003\016\016\f\021\002 b n\t\021 b 016\023\t\006\f b r\t\026\f\006 b 023\007\r\023 b 003\021\f b 020\021\f\006\f\002\016 b 003\006 b 003\002\016\f\r\f\026\f\002\016\b\003\002\026\b\r\t\002\006\f-\034\f\002\016'\b#\023\f\006\f\b\017\003\004\034\f\006\b\003\021\f\b\006\023\t/\002\b\022\021\003\020\023\007\r\003\004\004\005 b 007\002\b\035\007\022\034\021\f\b6\b\003\002\026\b\035\007\022\034\021\f\bD'\b 037\034\020\020\t\021\016\b\t\n\b\003\004\004\b\016\023\f\b\022\f\002\f\021\003\016\f\026\b\021\034\004\f\006\b\007\006\b\003\004/\003\005\006\b\022\021\f\003\016\f\021\b\016\023\003\002\b\016\023\f b 025\007\002\037\034\020\020\t\021\016\b\f\002\016\f\021\f\026\b\033\005\b\016\023\f\b\034\006\f\021'\b\037\007\024\007\004\003\021\004\005\b\r\t\002\n\007\026\f\002\r\f b\017\003\004\034\f b 006\016\t\021\f\026\b\003\006\b\n\007\021\006\016\b\f\004\f\024\f\002\016\b\t\n\b\021\034\004\f\b\004\007\006\016 \b\007\006\b\016\023\f\b\021\003\016\007\t\b\033\f\016/\f\f\002\b\002\034\024\033\f\021 b t\n b r\004\003\007\024 b 021\f\r\t\021\026\006 b r\t\002\016\003\007\002\007\002\022 b 033\t\016\023 b 003\002\016\f\r\f\026\f\002\016 b 003\002\026 b 016\023\f b r\t\002\006\f-\034\f\002\016 b 007\016\023 b 016\023\f b 002\034\024\033\f\021 b t\n b 021\f\r\t\021\026\006 b r\t\002\016\003\007\002\007\002\022 b t\002\004\005 b 003\002\016\f\r\f\026\f\002\016'\b\035\t\021\b\006\t\024\f\b\021\034\004\f\006\b\007\016\b\007\006\b\006\023\t/\002\b\007\002\b\035\007\022\034\021\f\b\031 007 b 035\007\022\034\021\f\b\031\bF\021\003\020\023\007\r\003\004\b\035\021\t\024\b\037\023\t/\007\002\022\b+\t\002\n\007\026\f\002\r\f\b\t\n\b\013\003\r\023\b*\034\004\f 035\007\022\034\021\f\b6'\b\bF\021\003\020\023\007\r\003\004\b\035\t\021\024\b\037\023\t/\007\002\022\b#\t\016\003\004\b\001\024\t\034\002\016\006 035\007\022\034\021\f\bD\bF\021\003\020\023\007\r\003\004\b\035\t\021\024\b\037\023\t/\007\002\022\b\001\017\f\021\003\022\f\b\001\024\t\034\002\016\006 


033\033\033\030 034\020\016\022\t\013\016 001\006\b\024\f\002\016\007\t\002\f\026\b\033\005\b\001\022\021\003/\003\004 b061 \b\001\020\021\007\t\021\007\b\003\004\022\t\021\007\016\023\024\b\r\003\002\b\033\f b 034\006\f\026 b n\t\021 b 004\003\005\007\002\022 b 016\023\f b n\t\034\002\026\003\016\007\t\002\006 b 024\003\002\005 b t\016\023\f\021 b 021\034\004\f b 022\f\002\f\021\003\016\007\t\002 b 003\004\022\t\021\007\016\023\024\006\b\007\002\b\n\034\016\034\021\f'\b\036\016\b\023\003\006\b\033\f\f\002\b\020\021\t\017\f\026\b\016\023\003\016\b\001\020\021\007\t\021\007\b\003\004\022\t\021\007\016\023\024 b 007\006\b\022\t\t\026\b\007\002\b\n\007\002\026\007\002\022\b\016\023\f\b\n\021\f-\034\f\002\016\b\007\016\f\024\b\006\f\016\006\b\t\n\b\004\003\021\022\f\b\006\007B\f'\b\027\034\016\b\006\016\007\004\004 b 024\t\026\007\n\007\r\003\016\007\t\002\006\b\003\021\f\b\021\f-\034\007\021\f\026\b\016\t\b\003\026\t\020\016\b\007\016\b\016\t\b\016\023\f\b\021\f-\034\007\021\f\024\f\002\016\006\b<\003\006 b 026\t\002\f\b\007\002\b\016\023\007\006\b\021\f\006\f\003\021\r\023\b/\t\021 001\020\021\007\t\021\007\b\003\004\022\t\021\007\016\023\024\b\022\f\002\f\021\003\016\f\006\b\027\t\t\004\f\003\002\b\003\006\006\t\r\007\003\016\007\t\002\b\021\034\004\f\006'\b\036\002 b 016\023\007\006\b\021\f\006\f\003\021\r\023\b/\t\021.\b\020\003\005\024\f\002\016\006\b\017\003\004\034\f\006\b\023\003\006\b\033\f\f\002\b\003\006\006\t\r\007\003\016\f\026\b/\007\016\023 b f\003\r\023\b\021\034\004\f \b\023\f\002\r\f\b-\034\003\002\016\007\016\003\016\007\017\f\b\020\021\t\r\f\006\006\007\002\022\b\r\003\002\b\033\f\b\026\t\002\f\b\t\002\b\016\023\f b 033\003\006\007\006 b t\n b 003\002\005 b t\n b 016\023\f\006\f b 020\003\005\024\f\002\016 b 017\003\004\034\f\006 b 023\007\006 b 007\006 b t\002\f b t\n b 016\023\f b 020\t\006\006\007\033\004\f\b\n\034\016\034\021\f\b\f\002\023\003\002\r\f\024\f\002\016\006 \b/\023\007\r\023\b\023\003\006\b\033\f\f\002\b\024\f\002\016\007\t\002\f\026\b\033\005 b 001\022\021\003/\003\004\b\007\002\b061 \b\003\002\026\b\007\024\020\004\f\024\f\002\016\f\026\b\007\002\b\016\023\007\006\b\021\f\006\f\003\021\r\023 b 001\b f\020\n\025\007%\004\b\004\t\001&\033\r\b\r\025\016\004\b\020\n\016\020\025\n\001\007!\001\030\004\t\020\025\r\027\001'\020\027\027\020\021\022\001\f\r\016\r 030\003\016\003\b\t\n\b\f\017\f\021\005\b\026\t\024\003\007\002\b\023\003\006\b\007\016\006\b\t/\002\b\r\023\003\021\003\r\016\f\021\007\006\016\007\r\0069\b\016\023\007\006\b/\003\006 b 016\023\f\b\033\003\006\007\r\b\007\002\016\034\007\016\007\t\002\b\033\f\023\007\002\026\b\003\020\020\004\005\007\002\022\b\006\003\024\f\b\003\004\022\t\021\007\016\023\024\b</\007\016\023\b\006\t\024\f b 024\t\026\007\n\007\r\003\016\007\t\002 b 007\002 b 026\007\n\n\f\021\f\002\016 b 026\t\024\003\007\002 b 030\034\021\007\002\022 b 016\f\006\016\007\002\022 b n\t\004\004\t/\007\002\022 b r\023\003\021\003\r\016\f\021\007\006\016\007\r\006\b\t\n\b\024\f\026\007\r\003\004\b\033\007\004\004\007\002\022\b\026\003\016\003\b\023\003\017\f\b\033\f\f\002\b\n\t\034\002\0269  036\025\006\027\027\026\005\006\020\030\r\026\023\016\026\003\022'\r\026\023\016\026\022\004\r\025\003\r\004\003 036\002\b\026\003\016\003\033\003\006\f\b\t\n\b\021\f\016\003\007\004\b\006\016\t\021\f\b\t\002\f\b\016\021\003\002\006\003\r\016\007\t\002\b\t\021\b\007\016\f\024\006\f\016\b\r\003\002\b\023\003\006 b 024\0032\007\024\034\024\b\t\n\b\003\006\b\024\003\002\005\b\007\016\f\024\006\b\003\006\b\007\006\b\016\023\f\b\016\t\016\003\004\b\002\034\024\033\f\021\b\t\n\b\034\002\007-\034\f b 007\016\f\024\006'\b#\023\007\006\b\003\n\n\f\r\016\006\b\016\023\f\b\021\034\004\f\b\022\f\002\f\021\003\016\007\t\002\b\020\003\021\016\b\t\n\b\001\020\021\007\t\021\007\b\003\004\022\t\021\007\016\023\024 b 023\007\r\023 b 007\006 b f2\020\t\002\f\002\016\007\003\004\004\005 b 033\003\006\f\026 b t\002 b 016\023\f b 006\007B\f b t\n b 007\016\f\024\006\f\016\006 b 023\007\006 b 004\007\024\007\016\003\016\007\t\002 b 007\006 b 002\t\016 b 003\n\n\f\r\016\007\002\022 b 026\034\f b 016\t b E\006\024\003\004\004 b 006\007B\f\026 b 007\016\f\024\006\f\016G b r\023\003\021\003\r\016\f\021\007\006\016\007\r\b\t\n\b\033\007\004\004\007\002\022\b\026\003\016\003'\b\001\002\b\007\016\f\024\006\f\016\b<\007'\f'\b\r\004\003\007\024=\b\r\t\002\006\007\006\016\006\b\t\n b 003 b 024\007\002\007\024\034\024 b t\n b 016/\t b r\t\026\f\006 b t\002\f b 0302+\t\026\f b 003\002\026 b t\002\f b  b 003\002\026 b 024\0032\007\024\034\024 b t\n b 016\f\002 b 024\0032\007\024\034\024 b n\t\034\021 b 0302+\t\026\f b 003\002\026 b 006\0072 b  b 001\004\016\023\t\034\022\023\b\016\023\f\021\f\b\007\006\b\002\t\b\021\f\006\016\021\007\r\016\007\t\002\b\t\002\b\002\034\024\033\f\021\b\t\n\b+!#\006\b\003\020\020\004\007\f\026\b\033\034\016 b f2\007\006\016\007\002\022\b\006\003\024\020\004\f\b\t\n\b\026\003\016\003\b\026\t\f\006\b\002\t\016\b\023\003\017\f\b\024\t\021\f\b\016\023\003\002\b\006\0072\b+!#\006\b\007\002 b t\002\f\b\r\004\003\007\024 007  023\\026\016\005\r\032\017\r\020\007\033\026\023\016\026\022\020\f\022\031\022\f\017\006\027\026\022\004\r\025\003\026 027\f\r\003\034\006\f\b\t\n\b\016\023\f\b\n\003\r\016\b\016\023\003\016\b\003\b\033\007\004\004\007\002\022\b\r\t\024\020\003\002\005\b\003\r\r\034\024\034\004\003\016\f\006\b\026\003\016\003 b n\021\t\024\b\020\021\003\r\016\007\r\f\006\b\t\n\b\026\007\n\n\f\021\f\002\016\b\006\020\f\r\007\003\004\016\007\f\006 \b\002\t\b+!#\b\t\021\b\036+\030\b\r\t\026\f\b\023\003\006 b 004\003\021\022\f b n\021\f-\034\f\002\r\005 b 027\034\016 b 007\n b f b 016\003.\f b 006\003\024\020\004\f b t\n b 026\003\016\003 b n\021\t\024 b t\002\f b 020\021\003\r\016\007\r\f\b\007\016\b/\007\004\004\b\022\007\017\f\b\021\f\004\003\016\007\017\f\004\005\b\023\007\022\023\f\021\b\n\021\f-\034\f\002\r\007\f\006'\b b#\023\f\b\024\0032\007\024\034\024\b\n\021\f-\034\f\002\r\005\b\t\n\b+!#\b\r\t\026\f\006\b\007\006\b6L\bX \b/\007\016\023\b\t\002\004\005 b D b 006 b 022\021\f\003\016\f\021 b 016\023\003\002 b 031C b X b n\021\f-\034\f\002\r\005 b 003\002\026 b 6O b 006 b 007\016\023 b n\021\f-\034\f\002\r\005\b\022\021\f\003\016\f\021\b\016\023\003\002\b\031\bX \b/\023\007\004\f\b\021\f\024\003\007\002\007\002\022\b+!#\006\b<\003\b\016\t\016\003\004\b\t\n b DIPK=\b\023\003\017\f\b\n\021\f-\034\f\002\r\005\b\004\f\006\006\b\016\023\003\002\b\031\bX'\b#\t\020\bL\b\n\021\f-\034\f\002\016\b+!#\006\b\003\021\f b 006\023\t/\002\b\007\002\b\016\003\033\004\f\b\031\b\033\f\004\t/9\b  001\0273\013 b 031 b'\b   bL\b 035*\013\\032\013 b 037 034 006\026\020 007 020\016\023\004\005\003\013\005\006\021 004\020\027\022\020\021\023\025 031 JJ6\031D\b 035\035\036+\013>@\032#!\001#\036\013$#\bY\036\037\036# \b\013\037 6L'L\031\031\bX 6 JJD\031D 037\032\027\037\013\\b$\032*\037\036$F\b\035\001+\0363\036 b 001*\013\b?\b3\013Y\0133\bD 031L'6P\bX D JJ6\031P 035\035\036+\013>@\032#!\001#\036\013$#\bY\036\037\036# \b\013\037 031\031'DK\bX P JJDDD 030@\025\036+\0363\036\001*;>A@\025\013\bY\036\037\036#9 b 013\037#\001\027\b!#?3\013Y\0133\bD b\bJ'CC\031\bX L JJ6CD 035\035\036+\013>@\032#!\001#\036\013$#\bY\036\037\036# \b$\013Z b\bO'DK\bX 025\0032\007\024\034\024 b n\021\f-\034\f\002\r\005 b t\n b 0302+\t\026\f\006 b 007\006 b 031L b X b 007\016\023 b t\002\004\005 b D b 0302+\t\026\f\006 b\022\021\f\003\016\f\021 b\016\023\003\002\b\031C\bX'\b#\023\f\021\f\b\003\021\f bLO\b\0302+\t\026\f\006 b\023\003\017\007\002\022 b n\021\f-\034\f\002\r\005 b 022\021\f\003\016\f\021 b 016\023\003\002 b 031 b X b t\020 b L b n\021\f-\034\f\002\016 b 0302+\t\026\f\006 b 003\021\f b 006\023\t/\002\b\007\002\b\016\003\033\004\f\b6\b\022\007\017\f\002\b\033\f\004\t  001\0273\013 b 6  b  bL\b 035*\013\\032\013 b\030   030\013\037 034 006\026\020 007 020\016\023\004\005\003\013\005\006\021 004\020\027\022\020\021\023\025 031 PC\031'C 025\0013\036F$\001$#\b\013\037\037\013$#\036\0013 b A;!\013*#\013$\037\036 031L'\031K\bX 6 6LC'C 030\036\001\027\013#\013\037\b\025\01333\036#\032\037\bZ\036#A@\032 b 025!3\036+\001#\036@$\b#;!\013\b\036\036\b b 032$\037!\013+\036\035\036\013\030\b#;!\013\b b 037#\001#\013\030\b\001\037\b\032$+@$#*@33\013\030 031\031'LC\bX D PC\031'\031 027\013$\036F$\b\013\037\037\013$#\036\0013 b A;!\013*#\013$\037\036 031C'LC\bX P P6K'C F\013\037#\036Y\013\bA\013\001*#\b\035\001\0363\032*\013 b 032$\037!\013+\036\035\036\013\030 b\bL'PD\bX L 6I6'C 032*\013 b A;!\013*+A@3\013\037#\013*@3\013\025\036\001 b\bL'CC\bX t\016\f\b\016\023\003\016\b\007\002\b\021\034\004\f\b\022\f\002\f\021\003\016\007\t\002\b\020\021\t\r\f\006\006 b\t\002\004\005\b\016\023\t\006\f\b\021\034\004\f\006\b\003\021\f b 006\f\004\f\r\016\f\026 b 007\002 b 023\007\r\023 b r\t\024\033\007\002\f\026 b n\021\f-\034\f\002\r\005 b t\n b 003\002\016\f\r\f\026\f\002\016 b 003\002\026 b r\t\002\006\f-\034\f\002\016 b\007\006 b 022\021\f\003\016\f\021 b\016\023\003\002 b\016\023\f\b 016\023\021\f\006\023\t\004\026\b n\021\f-\034\f\002\r\005 b\022\007\017\f\002 b 033\005 b 034\006\f\021'\b\036\n\b/\f\b\034\006\f\b\024\t\006\016\b\n\021\f-\034\f\002\016\b\0302+\t\026\f\b\003\006\b\003\002\016\f\r\f\026\f\002\016\b\003\002\026\b\024\t\006\016 b n\021\f-\034\f\002\016\b+!#\b\003\006\b\r\t\002\006\f-\034\f\002\016 \b\016\023\f\007\021\b\r\t\024\033\007\002\f\026\b\n\021\f-\034\f\002\r\005\b\007\006\b\031'JD b X\b/\023\007\r\023\b\007\006\b\004\t/\f\021\b\016\023\003\002\b\016\023\f\b\f2\020\f\r\016\f\026\b\017\003\004\034\f 007 023\f b\023\007\022\023\f\006\016 b\r\t\024\033\007\002\f\026\b\n\021\f-\034\f\002\r\005 b\007\006 bD'6J\bX b/\023\007\r\023\b\007\006 b\n\t\021 b 0302+\t\026\f\bPC\031'C\b\003\002\026\b6LC'C'\bZ\023\007\004\f\b\016\023\f\b\r\t\024\033\007\002\f\026\b\n\021\f-\034\f\002\r\005\b\t\n b 024\t\006\016\b\n\021\f-\034\f\002\016\b+!#\b\r\t\026\f\b<\007'\f'\bJJ6\031D=\b\007\006\b6'IKP\bX \b/\023\007\r\023\b\007\006\b/\007\016\023 b 0302+\t\026\f\bPC\031'\031'\b#\023\034\006\b/\f\b\026\t\002[\016\b\f2\020\f\r\016\b\003\002\005\b\021\034\004\f\b/\007\016\023\b\n\021\f-\034\f\002\r\005 b 006\034\020\020\t\021\016=\b\023\007\022\023\f\021\b\016\023\003\002\bL\bX'\b  r\030\017\027\006\005\026\021\006\004\004\r\005\020\003\026\022\020\026\021\006\033\025\r\020\004\026\031\006\027\017\r\003 023\f\b\020\021\t\016\t\016\005\020\f b\006\t\n\016/\003\021\f\b\026\f\017\f\004\t\020\f\026\b\n\t\021\b\016\023\007\006\b\021\f\006\f\003\021\r\023\b/\t\021 b 026\t\f\006 b 002\t\016 b t\002\004\005 b n\007\002\026\006 b 016\023\f b 003\006\006\t\r\007\003\016\007\t\002\006 b 033\f\016/\f\f\002 b 0302+\t\026\f\006 b 003\002\026 b 006 b 033\034\016 b 003\004\006\t b 006\023\t/\006 b 034\006 b 020\003\005\024\f\002\016\006 b 020\003\016\016\f\021\002\006 b 003\022\003\007\002\006\016 b 016\023\t\006\f b 003\006\006\t\r\007\003\016\007\t\002\006'\b!\003\005\024\f\002\016\b\021\f\r\t\021\026\b\023\003\006\b\n\t\034\021\b\017\003\004\034\f\006 \b\n\007\021\006\016\b\t\002\f\b+\023\003\021\022\f\026 b 001\024\t\034\002\016 \b\007\016\b\007\006\b\016\023\f\b\003\024\t\034\002\016\b\r\023\003\021\022\f\026 \b\t\021\b\r\004\003\007\024\f\026\b\033\005\b\016\023\f\b\020\021\t\017\007\026\f\021\b\007\002 b 003 b 020\003\016\007\f\002\016 b r\004\003\007\024 b 007\016 b 007\006 b 003\004/\003\005\006 b 023\007\022\023\f\006\016 b 003\024\t\002\022 b t\016\023\f\021 b 020\003\005\024\f\002\016 b 017\003\004\034\f\006 b 006\f\r\t\002\026 b\t\002\f b\007\006 b 016\023\f b 003\026,\034\006\016\f\026 b 003\024\t\034\002\016 b\007\016 b\007\006 b\016\023\003\016 b 020\003\021\016 b t\n b r\023\003\021\022\f\026\b\003\024\t\034\002\016\b/\023\007\r\023\b\007\006\b\021\f\024\t\017\f\026 \b\021\f,\f\r\016\f\026 \b\t\021\b\002\t\016\b\020\003\007\026\b\033\005\b\003\002\005 b t\n\b\016\023\f\b\020\003\005\f\021\006'\b#\023\007\021\026\b\017\003\004\034\f\b\007\006\b\016\023\f\b\020\003\007\026\b\003\024\t\034\002\016 \b/\023\007\r\023\b\021\f\n\f\021\b\016\t b 016\023\003\016 b 003\024\t\034\002\016 b 023\007\r\023 b 007\006 b 020\003\007\026 b 033\005 b 003\002\005 b t\n b 016\023\f b 020\003\005\f\021\006 b 002\t\021\024\003\004\004\005 b 020\021\007\024\003\021\005\b\007\002\006\034\021\003\002\r\f\b\t\n\b\003\b\020\003\016\007\f\002\016='\b\035\t\034\021\016\023\b\017\003\004\034\f\b\007\006\b\026\034\f\b\003\024\t\034\002\016 b 023\007\r\023\b\021\f\020\021\f\006\f\002\016\b\016\023\f\b\020\f\002\026\007\002\022\b\003\024\t\034\002\016\b\t\n\b\003\b\r\004\003\007\024'\b\036\002\007\016\007\003\004\004\005\b\003\004\004\b\016\023\f b r\023\003\021\022\f\026\b\003\024\t\034\002\016\b\007\006\b\026\034\f\b\003\024\t\034\002\016'\b\027\034\016\b\024\t\006\016\004\005\b\003\n\016\f\021\b\020\003\005\024\f\002\016\b\n\021\t\024 b 020\021\007\024\003\021\005\b\007\002\006\034\021\003\002\r\f \b\006\t\024\f\b\020\003\021\016\b\t\n\b\r\023\003\021\022\f\026\b\003\024\t\034\002\016\b\007\006\b\004\f\n\016\b\003\006\b\026\034\f b 003\024\t\034\002\016 \b/\023\007\r\023\b\007\006\b\004\003\016\f\021\b\t\002\b\020\003\007\026\b\033\005\b\006\f\r\t\002\026\003\021\005\b\007\002\006\034\021\003\002\r\f\b\t\021\b\016\023\f b 020\003\016\007\f\002\016\b\023\007\024\006\f\004\n>\023\f\021\006\f\004\n 030\034\021\007\002\022 b\016\023\f b\021\f\006\034\004\016 b 003\002\003\004\005\006\007\006 b 020\023\003\006\f b\007\016 b\007\006 b\021\f\017\f\003\004\f\026 b\016\023\003\016 b r\023\003\021\022\f\026\b\003\024\t\034\002\016\b\023\003\006\b\021\f\004\003\016\007\017\f\004\005\b\004\f\006\006\b\r\t\002\006\007\006\016\f\002\016\b\020\003\016\016\f\021\002'\b@\002\b\016\023\f b t\016\023\f\021 b 023\003\002\026 b 020\003\007\026 b 003\024\t\034\002\016 b 003\020\020\f\003\021\006 b 016\t b 033\f b 024\t\021\f b 006\005\006\016\f\024\003\016\007\r b 003\002\026 b 023\003\017\007\002\022\b\r\t\002\006\007\006\016\f\002\016\b\020\003\016\016\f\021\002\006'\b#\023\003\016\b\024\007\022\023\016\b\033\f\b\026\034\f\b\016\t\b\016\023\f\b\021\f\003\006\t\002\b\016\023\003\016 b 003\002\005 b 007\002\006\034\021\003\002\r\f b r\003\021\f\n\034\004\004\005 b 003\002\003\004\005B\f b f\017\003\004\034\003\016\f b 003\002\026 b 020\021\t\r\f\006\006 b 016\023\f b r\004\003\007\024\006\b\033\f\n\t\021\f\b\024\003.\007\002\022\b\003\b\020\003\005\024\f\002\016 t\b 017 \016\005\001$\026\027\004\001\\004\021\004\b\r\016\020\007\021 034\004\f b 022\f\002\f\021\003\016\007\t\002 b 020\003\021\016 b t\n b 001\020\021\007\t\021\007 b 003\004\022\t\021\007\016\023\024 b 023\003\006 b 033\f\f\002 b 024\t\026\007\n\007\f\026 b 016\t b 022\f\002\f\021\003\016\f b f\024\020\016\005 b 021\034\004\f\006 b 036\002 b 003\002 b f\024\020\016\005 b 021\034\004\f b r\t\002\006\f-\034\f\002\016 b 020\003\021\016 b t\n b 016\023\f b 021\034\004\f b 007\006 b f\024\020\016\005 b t\021 b 002\007\004 b 003\002\026 b 016\023\f b 003\002\016\f\r\f\026\f\002\016 b 020\003\021\016 b 020\021\t\017\007\026\f\026 b 033\005 b 016\023\f b 034\006\f\021 b 001 b 022\021\f\003\016\f\021 b r\t\002\n\007\026\f\002\r\f\b\017\003\004\034\f\b\t\n\b\006\034\r\023\b\003\b\021\034\004\f\b\016\f\004\004\006\b\016\023\f\b\024\f\026\007\r\003\004\b\006\f\021\017\007\r\f b 020\021\t\017\007\026\f\021\b\002\t\016\b\016\t\b\003\026\026\b\003\002\005\b\n\034\021\016\023\f\021\b\r\t\026\f\b\016\t\b\016\023\f\b\r\004\003\007\024'\b\b 


033\\030 022\013\022\004\020\007*\006\016\016\005\017\005\t\005\013\005\020\016 023\f\021\f\b\003\021\f\b\003\b\004\t\016\b\t\n\b\020\t\006\006\007\033\007\004\007\016\007\f\006\b\003\002\026\b\021\t\t\024\b\n\t\021\b\n\034\016\034\021\f\b\021\f\006\f\003\021\r\023 b t\021.'\b\037\t\024\f\b\t\n\b\016\023\f\024\b\003\021\f\b\024\f\002\016\007\t\002\f\026\b\033\f\004\t/'\b 001\b 030\026\027\016\020 \027\004\001$\026\027\004\001\\004\021\004\b\r\016\020\007\021\001\001 034\021\021\f\002\016 b 020\021\t\016\t\016\005\020\f b 006\t\n\016/\003\021\f b 023\003\006 b t\002\f b 021\034\004\f b 022\f\002\f\021\003\016\007\t\002 b 007\002\026\t/ \b\033\034\016\b\026\034\021\007\002\022\b\016\023\f\b\016\f\006\016\007\002\022\b\007\016\b/\003\006\b\021\f\003\004\007B\f\026\b\016\023\003\016\b\007\016\b/\t\034\004\026\b\033\f b 033\f\016\016\f\021 b 016\t b 023\003\017\f b 024\034\004\016\007\020\004\f b 021\034\004\f b 017\007\006\034\003\004\007B\003\016\007\t\002 b 007\002\026\t/\006 b n\t\021 b t\002\f b 003\004\022\t\021\007\016\023\024 b 003\002\026 b 024\034\004\016\007\020\004\f b 021\034\004\f b 022\f\002\f\021\003\016\007\t\002 b 003\004\022\t\021\007\016\023\024\006 b r\003\002 b 033\f b 007\024\020\004\f\024\f\002\016\f\026'\b#\023\007\006\b/\007\004\004\b\022\007\017\f\b\034\006\b\003\b\r\t\024\020\003\021\003\016\007\017\f\b\017\007\f/\b\t\n\b\t\034\016\r\t\024\f b 003\002\026\b\016\023\f\b\020\f\021\n\t\021\024\003\002\r\f\b\t\n\b\021\034\004\f\b\022\f\002\f\021\003\016\007\t\002\b\003\004\022\t\021\007\016\023\024\006 t\b f\020\r\022\021\007\n\016\020\025\001\f\004\025\020\n\020\007\021\001#\026  \007\b\016 030\f\r\007\006\007\t\002\b\006\034\020\020\t\021\016\b\007\002\b\026\007\003\022\002\t\006\007\002\022\b\020\021\t\r\f\006\006\b\007\006\b\003\002\b\t\004\026\b\021\f\006\f\003\021\r\023 b 003\021\f\003 \b\033\034\016\b\034\020\b\016\007\004\004\b\002\t/\b\007\016\b\023\003\006\b\033\f\f\002\b\r\t\002\006\016\021\003\007\002\f\026\b\033\005\b\016\023\f\b\026\f\020\f\002\026\f\002\r\005 b t\002\b\023\034\024\003\002\b\024\f\026\007\r\003\004\b\f2\020\f\021\016\006\b\n\t\021\b\016\023\f\b\020\t\020\034\004\003\016\007\t\002\b\t\n\b.\002\t/\004\f\026\022\f\b\007\002 b 016\023\f b 006\005\006\016\f\024 b t b 026\003\016\003 b 024\007\002\007\002\022 b n\f\003\016\034\021\f\006 b f\024\033\f\026\026\f\026 b 007\002 b 006\034\r\023 b 006\005\006\016\f\024\006 b 007\004\004 b 003\026\026 b 034\020 b 003\002\t\016\023\f\021 b 026\007\024\f\002\006\007\t\002 b 017\007\f b 007\002 b 026\007\003\022\002\t\006\016\007\r b 026\f\r\007\006\007\t\002\b\024\003.\007\002\022\b\020\021\t\r\f\006\006 n\b f\020\n\016\b\020\031\026\016\004\t\001\f\r\016\r\001\030\020\021\020\021\022 001\016\b\033\007\004\004\007\002\022\b\r\t\024\020\003\002\005\b\026\003\016\003\b\n\021\t\024\b\003\004\004\b\020\021\003\r\016\007\r\f\006\b\007\006\b\r\t\004\004\f\r\016\f\026'\b\001 b 020\021\t\017\007\026\f\021 b r\003\002 b 020\f\021\n\t\021\024 b 026\003\016\003 b 024\007\002\007\002\022 b t\020\f\021\003\016\007\t\002\006 b t\002 b 007\016\006 b t/\002 b 020\021\003\r\016\007\r\f\b\006\007\026\f\b\033\005\b\034\006\007\002\022\b\016\023\f\b\013\025*'\b#\023\007\006\b\r\003\002\b\033\f\b\f2\016\f\002\026\f\026\b\016\t\b\016\023\f b 026\003\016\003\b\024\007\002\007\002\022\b\t\020\f\021\003\016\007\t\002\006\b\t\002\b\016\023\f\b\026\003\016\003\b\t\n\b\016\023\f\b\033\007\004\004\007\002\022\b\r\t\024\020\003\002\005 \b\003 b 022\004\t\033\003\004\b\026\003\016\003\033\003\006\f'\b*\f\006\034\004\016\006\b\t\n\b\016\023\f\b\026\003\016\003\b\024\007\002\007\002\022\b\t\020\f\021\003\016\007\t\002\006\b\t\002\b\016\023\f b 022\004\t\033\003\004\b\026\003\016\003\033\003\006\f\b\r\003\002\b\033\f\b\006\f\002\016 \b\r\t\024\020\003\021\f\026\b\003\002\026\b\034\016\007\004\007B\f\026\b/\007\016\023\b\016\023\f b 026\003\016\003\b\024\007\002\007\002\022\b\t\020\f\021\003\016\007\t\002\006\b\t\002\b\004\t\r\003\004\b\026\003\016\003\033\003\006\f\b\t\n\b\003\b\006\007\002\022\004\f\b\020\021\003\r\016\007\r\f 030 006\021\023\t\022\016\005\006\021 001\n\016\f\021\b\023\003\017\007\002\022\b\003\004\004\b\016\023\f\b\021\f\006\034\004\016\006\b\003\002\026\b\016\021\005\007\002\022\b\026\007\n\n\f\021\f\002\016\b\003\020\020\021\t\003\r\023\f\006 b 007\016\b\007\006\b\n\t\034\002\026\b\016\023\003\016\b\007\016\b\007\006\b\003\b\020\021\007\t\021\007\b\020\021\t\020\f\021\016\005\b<\007'\f'\b\003\b\n\021\f-\034\f\002\016\b\006\f\016\b\r\003\002\b\t\002\004\005 b 033\f b 022\f\002\f\021\003\016\f\026 b n\021\t\024 b n\021\f-\034\f\002\016 b 006\034\033\006\f\016\006 b 023\007\r\023 b 024\003.\f\006 b 001\020\021\007\t\021\007 b 003\004\022\t\021\007\016\023\024 b 022\t\t\026 b n\t\021 b n\007\002\026\007\002\022 b n\021\f-\034\f\002\016 b 007\016\f\024\006\f\016\006 b n\021\t\024 b 033\007\004\004\007\002\022 b 026\003\016\003\033\003\006\f'\b\b\001\004\016\023\t\034\022\023\b\006\t\024\f\b\024\t\026\007\n\007\r\003\016\007\t\002\006\b\023\003\017\f\b\033\f\f\002\b\024\003\026\f\b\007\002\b\016\023\f b 003\004\022\t\021\007\016\023\024 b 016\t b r\t\020\f b 007\016\023 b 016\023\f b 021\f-\034\007\021\f\024\f\002\016 b 033\034\016 b 033\003\006\007\r b 021\034\004\f b 022\f\002\f\021\003\016\007\t\002\b\020\021\t\r\f\006\006\b\007\006\b\006\003\024\f\b\003\006\b\016\023\003\016\b\t\n\b\001\020\021\007\t\021\007\b\003\004\022\t\021\007\016\023\024 036\016\b\007\006\b\n\t\034\002\026\b\016\023\003\016\b\034\006\f\b\t\n\b\023\007\022\023\b\004\f\017\f\004\b\004\003\002\022\034\003\022\f\b\r\003\002\b\t\017\f\021\r\t\024\f\b\016\023\f b 021\f-\034\007\021\f\024\f\002\016\b\t\n\b\004\f2\007\r\003\004\b\006\t\021\016\007\002\022\b\t\n\b\016\021\003\002\006\003\r\016\007\t\002\b\021\f\r\t\021\026\006 \b/\023\007\r\023\b/\003\006 b t\002\f b f\003 b 020\t\007\002\016 b t\n b t\021\007\022\007\002\003\004 b 007\024\020\004\f\024\f\002\016\003\016\007\t\002 b t\n b 001\020\021\007\t\021\007 b 003\004\022\t\021\007\016\023\024'\b\035\034\021\016\023\f\021\b\016\023\f\b\034\006\f\b\t\n\b\023\007\022\023\f\021\b\004\f\017\f\004\b\004\003\002\022\034\003\022\f\b\004\007.\f\b\004\007\006\020 b r\003\002\b\003\004\004\t/\b\034\006\b\016\t\b\003\006\006\t\r\007\003\016\f\b\006\t\024\f\b-\034\003\002\016\007\016\007\f\006\b<\004\007.\f\b\020\003\005\024\f\002\016\006=\b/\007\016\023 b 003\006\006\t\r\007\003\016\007\t\002\b\021\034\004\f\006\b\003\002\026\b\016\023\034\006\b\020\f\021\n\t\021\024\b-\034\003\002\016\007\016\003\016\007\017\f\b\003\002\003\004\005\006\007\006\b\007\002\b\021\034\004\f b 022\f\002\f\021\003\016\007\t\002\b 020\021\t\r\f\006\006 b\027\034\016\b\016\023\f\006\f\b\023\007\022\023\f\021\b\004\003\002\022\034\003\022\f\b\n\f\003\016\034\021\f\006\b\024\003\005\b\033\f b r\t\006\016\007\002\022\b\006\t\024\f\b\021\f\006\020\t\002\006\f\b\016\007\024\f'\b 023\f\021\f\b\007\006\b\003\b\024\003\021\022\007\002\b\t\n\b\007\024\020\021\t\017\f\024\f\002\016\b\007\002\b\021\034\004\f\b\022\f\002\f\021\003\016\007\t\002\b\020\003\021\016\b\t\n b 001\020\021\007\t\021\007\b\003\004\022\t\021\007\016\023\024\b\003\006\b\r\034\021\021\f\002\016\004\005\b\007\016\b\007\006\b\f2\020\t\002\f\002\016\007\003\004\004\005\b\033\003\006\f\026\b\t\002\b\016\023\f b 006\007B\f\b\t\n\b\007\016\f\024\006\f\016\006'\b#\023\007\006\b/\f\003.\002\f\006\006\b\007\006\b\002\t\016\b\003\n\n\f\r\016\007\002\022\b\016\023\f\b\020\f\021\n\t\021\024\003\002\r\f b t\n\b\016\023\f\b\020\021\t\016\t\016\005\020\f\b\006\t\n\016/\003\021\f\b\026\f\017\f\004\t\020\f\026\b\n\t\021\b\016\023\007\006\b\021\f\006\f\003\021\r\023\b\026\034\f\b\016\t\b\016\023\f b E\006\024\003\004\004\b\007\016\f\024\006\f\016\b\006\007B\fG\b\r\023\003\021\003\r\016\f\021\007\006\016\007\r\b\t\n\b\033\007\004\004\007\002\022\b\026\003\016\003\033\003\006\f 030\f\r\007\006\007\t\002 b 006\034\020\020\t\021\016 b 024\t\026\034\004\f b 033\003\006\f\026 b t\002 b 001\020\021\007\t\021\007?\024\t\026\007\n\007\f\026 b 003\004\022\t\021\007\016\023\024 \b\007\006\b\034\006\f\n\034\004\b\n\t\021\b\007\002\r\021\f\003\006\007\002\022\b\016\023\f\b\r\t\002\006\007\006\016\f\002\r\005\b\t\n\b\r\023\003\021\022\f\026 b 003\024\t\034\002\016\b\016\023\034\006\b\r\003\002\b\007\024\020\021\t\017\f\b\020\003\005\024\f\002\016\006'\b\001\002\026\b\026\034\f\b\016\t\b\004\f\006\006\b\020\021\t\r\f\006\006\007\002\022 b 016\007\024\f\b\t\002\b\007\002\006\034\021\003\002\r\f\b\006\007\026\f\b\007\016\b/\007\004\004\b\021\f\026\034\r\f\b\003\022\007\002\022\b\t\n\b\r\004\003\007\024\006'\b 024\025*\021\007\006\027\004\t\022\004\017\004\021\016\n 025\003\002\005 b 016\023\003\002.\006 b 016\t b 030\021 b 025\t\023\003\024\024\003\026 b 003\024\007\004 b 037\003/\003\021 b 003\002\026 b 025\021 b 025\003\023\024\034\026\bA\003-\b\n\t\021\b\016\023\f\007\021\b\f\002\r\t\034\021\003\022\f\024\f\002\016\b\003\002\026\b\n\007\021\024\b\006\034\020\020\t\021\016\b 004!\004\b\004\021\025\004\n 0\0311 b\001\022\021\003/\003\004 \b#'\b\036\024\007\f\004\007\002\006.\007 \b\003\002\026\b\001'\b$'\b\037/\003\024\007'\bE\025\007\002\007\002\022\b\003\006\006\t\r\007\003\016\007\t\002\b\021\034\004\f\006 b 033\f\016/\f\f\002\b\006\f\016\006\b\t\n\b\007\016\f\024\006\b\007\002\b\004\003\021\022\f\b\026\003\016\003\033\003\006\f\006'G\b\036\002\b!\f\016\f\021\b\027\034\002\f\024\003\002\b\003\002\026\b\037\034\006\023\007\004 b 003,\t\026\007\003 b f\026\007\016\t\021\006 b 021\t\r\f\f\026\007\002\022\006 b t\n b 016\023\f b 031JJD b 001+\025 b 037\036F\025@\030 b 036\002\016\004 b t\002\n\f\021\f\002\r\f\b\t\002\b\025\003\002\003\022\f\024\f\002\016\b\t\n\b\030\003\016\003 \b\020\003\022\f\006\b6CIM6\031O \bZ\003\006\023\007\002\022\016\t\002 \b\030 b 6OM6K\b\031JJD 061  b 001\022\021\003/\003\004 b 003\002\026 b  b 037\021\007.\003\002\016 b E\035\003\006\016 b 003\004\022\t\021\007\016\023\024\006 b n\t\021 b 024\007\002\007\002\022 b 003\006\006\t\r\007\003\016\007\t\002 b 021\034\004\f\006'G\b\036\002\b\(\t\021\022\f b\027'\b\027\t\r\r\003 \b\025\003\016\016\023\007\003\006\b\(\003\021.\f \b\003\002\026\b+\003\021\004\t\b\\\003\002\007\t\004\t \b\f\026\007\016\t\021\006 b 021\t\r\f\f\026\007\002\022\006\b\t\n\b6C\016\023\b\036\002\016\004'\b+\t\002\n\f\021\f\002\r\f\b\t\n\bY\f\021\005\b3\003\021\022\f\b\030\003\016\003\b\027\003\006\f\006 \bY3\030\027 b 020\003\022\f\006\bPKIMPJJ'\b\025\t\021\022\003\002\b"\003\034\n\024\003\002\002 \b\0316M\031L\b\031JJP 0D1 EA\f\003\004\016\023\r\003\021\f\b\036\002\n\t\021\024\003\016\007\r\006 \b\031CC\bM\b\036#\b+\t\024\020\003\002\007\f\006\b\033\005\bA\f\003\004\016\023\r\003\021\f\b*\f\017\f\002\034\fG b A\f\003\004\016\023\r\003\021\f\b\036\002\n\t\021\024\003\016\007\r\006 \b\(\034\002\f\b6CCP 


gsI I2s g2 1 1 g4 0.5 g5 1,0.5 g6 UsI s2 s3 1  GENE ExIlRESSION DATAS1ETS  Class I Class 0  Class I  Class 0 Dataset Genes label label samples samples ALL/AMNL ALL 7129 ALL AML 47 25 Lung Cancer LC 12533 MPM ADCA 31 150 Prostate Cancer PC 12600 tumor normal 77 59 0varian Cancer OC 15154 tumor normal 162 91 although Q doesn't express 96 Q does expresses g4 Thus in total we only consider half of the simple 95,sl rule to be satisfied i.e the S5 exclusion list is the weakest link Continuing to use BSTC's approximation scheme for the expected probability of Q's correct Cancer classification via the Figure 1 BST we obtain Figure 3 Note that only Figure 3 gene rows corresponding to genes expressed in Q are nrnempty If we now evaluate BST-EXPECT\(T\(Healthy Q we obtain a final8 value of  To finish BSTC will compare Q's Cancer classification value of 4 to Q's Healthy classification value of 0.5  0.75 1 1 0.5 CANCER classification value  0.75  1  0.5  0.75 Fig 3 BSTC cell rule Evaluation Example T\(1   T\(N Thus BSTC requires tirme and space O S 2 GQ to construct Furthermore during classification BSTC must calculate BSTCE\(T\(i Q for I  i  N BSTCE Algorithm 2 runs in O  S Ci  G Ci  time per query sample Therefore the BSTC worst case evaluation time is also f S 2  G per query sample See Sectiorn VII for more on BSTC's per-query classification time 2 Biological Meaning of BSTC Classificationrl Association rules mined from gene expression data provide an intuitive representation of biological knowledge e.g the expression of certain genes implies cancer Hence CAR-based classifiers have the desirable ability to justify each non-default consequent class query classification with the biologically meaningful CAR\(s the query satisfied BSTC being rulebased and related to CAR-classifiers also has this property BSTC can support it's query classifications with BARs of any user specified complexity Most simply for any given query sample Q and c E 0,1 BSTC can justify it's classification of Q as class Ci by reporting all T\(i atomic cell rules with satisfaction levels  c Note that returning this information requires no additional per-query classification time Also note that section III-B 1 methods can be used to mine more complex highly satisfied BARs if desired D BSTC Example Consider our running example from Table I In order to construct BSTC we must construct both T\(Healthy and T\(Cancer shown in Figure 1 Once both BSTs have been constructed we can begin to classify query samples Suppose for example we are given the query sample f gl expressed g2 not expressed g3 not expressed g4 expressed g5 expressed g6 not expressed To classify this query we must first calculate BSTCE\(T\(Cancer 9 and BSTCE\(T\(Healthy 9 The evaluation of BSTCE\(T\(Cancer Q proceeds as follows Since our query sample Q expresses gene g9 we can see that we must for example determine the fraction of both of the 95 s cell's exclusion lists satisfied by 9 The 95 si cell's S4  gl exclusion list is totally satisfied since 9 expresses ga Hence it gets a value of 1 However the 85s 94g 96 exclusion list is only half satisfied since TABLL 11 3 and conclude that Q is most probably Cancer Hence Q will be classified as Cancer V EXPERIMENTAL EVALUATION All experiments reported here were carried out on a 3.6 GHz Xeon machine with 3GB of memory running Red Hat Linux Enterprise 4 For our empirical evaluation we use four standard real microarray datasets 16 Table II lists the dataset names class labels and the number of samples of each class All discretization was done using the entropy-minimized partition 17 as in 1 Executables for both RCBT and Top-k were provided by the authors of 1 In all experiments the Top-k rule generator was used to generate rule groups for RCBT Unless otherwise noted we ran both Top-k and RCBT with the author suggested parameter values i.e support 0.7 k 10 nl 20 10 RCBT classifiers Hence while generating rules for RCBT we used Top-k with a minimum support value of 0.7 and found the 10 most confident covering rule groups i.e k  10 Furthermore during classification we used RCBT with the suggested 10 classifiers 1 primary and 9 standby Finally ni the number of lower bound rules to use for classification per Top-k mined rule group was set equal to 20 We coded BSTC in C A Preliminary Experiments Each of Table II's four gene expression datasets comes with a clinically determined training set The authors of 1 provided us with their discretizations of these four datasets We ran BSTC on their discretizations and BSTC matched RCBT's reported mean accuracy about 96 outperforming CBA 87 IRG 8lX1 Weka 3.2 C4.5 family single tree 74 bagging 78 boosting\(74 and SVMligh 5.0 93C in reported mean performance 1 To compare BSTC and RCBT with the most recent R el 071 package SVM implementation  18 and randomForest version 4.5 19 we rediscretized the four datasets and reran 1067 sI s2 s3 


7 5769 l00 97.67 l005 I00 Avg Accuracy ______ __95.59 95.98 89.5 8954 BSTC/RCBT To keep comparisons fair we ran SVM and randomForest on the same genes selected by our entropy discretization except with their original undiscretized gene expression values SVM was run with its default radial kernel We ran randomForest 10 times with its default 500 trees for ALL LC and OC and its accuracy was constant For PC we had to increase randomForest's number of trees to 1000 before its accuracy stabilized over the 10 runs Table III contains the number of class 0/1 samples in the clinically determined training set the number of genes selected by our entropy discretization and our experimental results As shown in this table the overall average accuracies of BSTC and RCBT are again best at about 96 each When compared against RCBT SVM and randomForest on the individual tests we can see that BSTC is alone in having 100 accuracy on the majority of datasets However BSTC's performance on the preliminary AML/ALL dataset test is relatively poor This is likely due to over fitting Every error BSTC made mistook a class 0 AML test sample for a class 1 ALL test sample i.e all errors were made in this same direction And the ALL training data has both i about 2.5 times as many class 1 samples as class 0 samples and ii a small number of total samples/genes When the training set is more balanced and the number of samples/genes is larger we can expect that cancellation of errors will tend to neutralize/balance any over fitting effects in BSTC And BSTC is a method meant primarily for large training sets where CAR-mining is prohibitively expensive As we will see below in Section V-B.1 BSTC s performance is much better for larger AML/ALL training set sizes B Holdout Validation Studies Holdout validation studies make comparisons less susceptible to the choice of a single training dataset and provide performance evaluations that are likely to better represent program behavior in practice We next present results from a thorough holdout validation study completed using 100 different training/test sets from each of the ALL LC PC and OC data sets For these holdout validation tests we benchmark BSTC against Top-k/RCBT because i BSTC/RCBT perform hest in our preliminary experiments ii Top-k/RCBT is the fastest/most accurate CAR-based classifier for microarray data and iii we are interested in BSTC's CAR-related vs Topk/RCBT s CAR based scalability For the holdout validation study we generated training sets of sizes 40 60 and 80 of the total samples Each training set was produced by randomly selecting samples from the original combined dataset We then used the standard R dprep package's entropy minimized partition 17 to discretize the selected training samples Finally the remaining dataset samples were used for testing the two classifiers after rule/BST generation on the randomly selected training data For each training set size we produced 25 independent tests In addition to these training sets we created an additional 25 1-x/0-y tests To create these tests we chose training data by randomly selecting x class 1 samples and y class 0 samples to be used as training data As before the remaining samples were then used to test both classifiers For each dataset the x and y values are chosen so that the resulting 25 classification tests have the exact same training/test data proportions as the single related dataset test reported in section V-A For each training set size we plot our results using a boxplot Boxplot Interpretation Each boxplot that we show in this section can be interpreted as follows The median of the measurements is shown as a diamond and a box with boundaries is drawn at the first and the third quartile The range between these two quartiles is called the inter-quartile range IQR Vertical lines a.k.a whiskers are drawn from the box to indicate the minimum and the maximum value unless outliers are present If outliers are presents the whiskers only extend to 1 5 x IRQ The outliers that are near i.e within 3 x IRQ are drawn as an empty circle and further outliers are drawn using an asterisk 1 ALIJAML ALL Experiment Figure 4 shows the classification accuracy for the ALL/AML dataset As can be seen in this figure BSTC and RCBT have similar accuracy across the ALL/AML tests as a whole BSTC outperforms RCBT in terms of median and mean accuracy on the 40 and 80 training set sizes while RCBT has better median/mean accuracy on the 1-27/0-11 training size tests And both classifiers have the same median on the 60 training set size Over the 100 ALL/AML tests we see that BSTC has a mean accuracy of 92.13 while RCBT has a mean accuracy of 91.39 they are very close It's noteworthy that BSTC is 100 accurate on the majority of 80 training size tests However BSTC appears to have slightly higher variance than RCBT on all but the 40 training tests Considering all the results together both BSTC and RCBT have essentially equivalent classification accuracies on the ALL/AML dataset 2 Lung Cancer LC Experiment The results for the Lung Cancer dataset are reported in Figure 5 Here again both BSTC and RCBT have similar classification behavior RCBT has higher mean and median accuracies on the 40 and 60 tests while BSTC outperforms RCBT on the 1-16/0-16 tests Meanwhile both classifier have the same median on the 80 training test Over all 100 LC tests we find that BSTC has a mean accuracy of 96 32 while RCBT has a mean accuracy of 97.08 again they are very close As before BSTC is alone in having 100 accuracy more 1068 TABLE III USINC GIVEN RES Ul TS TRAINING DATA  Class I  Class 0 Genes random Training Training After BSTC RCBT SVM Forest Dataset Samnples Samnples Discr Ac or Accr Ac o Accuracy ALL 27 11 866 82.35 91 18 91 18 85.29 LC 16 16 2173 100 97.99 93.29 99.33 PC 52 50 1554 100 97.06 73.53 73.53 OC 133 


TABLE IV AVERACGE RUN TIMLES FOR THE PC TESTS IN SEC-NI t INDICATES nl WAS LOWERED TO 2 Training Median  Mean 260 Near outliers  25/25t T O Median  Mean 260 Near outliers  Far outliers 40 Training 60 Training 80 Training 1 27/0-11 Training 1.0 1.0 1 0]0.95 0.9 0.9 0.7 0.7 0.850.8 0.80.80.80.750.7 0.70.70.7 650.6 0.60.60.6Holdout Validation Results 25/25t cJ CZ C O Far outliers 40 Training 60 Training 80 Training 1-16/0-16 Training h0 1.0 T 1.0 1.00.95 0.9 0.9 0 0.8 0.8 0.80.80.8LC Holdout Validation Results THE PC TESTS THAT RCBT FINISHED Training BSTC RCBT 40U 75.08 79.27 60 78.18 85.45 80 84.98 1-52/0 50 81.65%o 1069 cJ CZ C 5.06 120.63 21.32 RCBT  7110  7200  7200  RCBT DNF 0 P 00 24/25 t per training set test Finally the  RCBT DNF column gives the number of tests RCBT was unable to finish in  the cutoff time over the number of tests for which Top-K finished mining rule group upper bounds Explanation for varying nd values Run time cutoffs were necessary to mitigate excessive holdout validation CARmining times Even with a cutoff of 2 hours these 100 PC experiments required about 11 days of computation time with most experiments not finishing For the 80 and 1-52/0-50 training set sizes RCBT with nl  20 failed to finish lower bound rule mining for all 50 tests within 2 hours Thus RCBT's nl parameter was lowered from the default value of 20 to 2 in an attempt to improve its chances of completing tests Not surprisingly decreasing nl i.e mining fewer lower bound rules per Top-k rule group decreases RCBT s runtime However RCBT was still unable to finish lower bound rule mining for any tests Classification Accuracy Figure 6 contains accuracy results for BSTC on all four Prostate Cancer test sets Prostate Cancer boxplots for RCBT weren't constructed for training set sizes that RCBT was unable to complete all 25 tests within the time cutoffs In contrast BSTC was able to complete each of the 100 PC classification tests in less than 6 seconds Table V contains mean accuracies for the PC dataset with 40 60 80 and 1-52/0-50 training For each training set the average accuracies were taken over the tests RCBT was able to complete within the cutoff time Hence the 40 row means were taken over all 25 results Since RCBT was unable to complete any 80 or 1-52/0-50 training size tests we report these BSTC means over all 25 tests RCBT has slightly better accuracy then BSTC on 40 training For 60 training TABLE V MEAN AcCURACIES FOR 40 60 80 1.52/0.50 BSTC 3 4.93 5.78 5.57 Top0.09 BSTC F a RCBT BSTC RCBT BSTC RCBT b c Fig 5 BSTC RCBT BSTC RCBT b c ALL BSTC RCBT a Fig 4 BSTC RCBT d then half the time for any training set size see Figure 5 d However RCBT has smaller variance for 3 of the 4 training set sizes Therefore as for the ALL/AML data set both BSTC and RCBT have about the same classification accuracy on LC 3 Prostate Cancer PC Experiment RCBT begins to run ilnto a comiputational difficulties on PC's larger training set sizes This is because before using a Top-k rule group for classification RCBT must first mine nt lower bound rules for the rule group RCBT accomplishes rule group lower bound mining via a pruned breadth-first search on the subset space of the rule group's upper bound antecedent genes This breadthfirst search can be quite time consuming In the case of the Prostate Cancer PC dataset all 100 classification tests 25 tests for each of the 4 training set sizes generated at least one top10 rule group upper bound with more than 400 antecedent genes Due to the difficulties involved with a breadth-first search over the subset space of a several hundred element set RCBT began suffering from long run times on many PC classification tests Table IV contains four average classification test run times in seconds for each PC training size The BSTC column run times reflect the average time required to build both class 0 and class I BSTs and then use them to classify all the test samples Each Top-k column run time is the average time required for Top-k to mine the top 10 covering rule groups with minimum support 0.7 for each training set Table IV's RCBT column gives average run times for RCBT using a time cutoff value of 2 hours for all the training sets For each classification test if RCBT was unable to complete the test in less than the cutoff time it was terminated and it s run time was reported as the cutoff time Hence the BSTC RCBT d RCBT column gives lower bounds on RCBT s average run time 


TESTS IN SECOND t INDICATES nl WAS LOWERED TO 2 Training BSTC Top-k RCBT 7 OC Holdout Validation Results RCBT outperforms BSTC on the single test it could finish by more then 7 although it should be kept in mind that RCBT's results for the 24 unfinished tests could vary widely Note that BSTC's mean accuracy increases monotonically with training set size as expected At 60 training BSTC's accuracy behaves almost identically to RCBT's 40 training accuracy see Figure 6 4 Ovarian Cancer OC Experiment For the Ovarian Cancer dataset which is the largest dataset in this collection the Top-k mining method that is used by RCBT also runs into long computational times Although Top-k is an exceptiounally fast CAR group upper bound miner it still depends on performing a pruned exponential search over the training sample subset space Thus as the number of training samples increases Top-k quickly becomes computationally challenging to tune/use Table VI contains four average classification test run times in seconds for each Ovarian Cancer\(OC training size As before the second column run times each give the average time required to build both class 0/1 BSTs and then use them to classify all test's samples with BSTC Note that BSTC was able to complete each OC classification test in about 1 minute In contrast RCBT again failed to complete processing most classification tests within 2 hours Table VI's third column gives the average times required for Top-k to mine the top 10 covering rule groups upper bouhnds for each training set test with the same 2 hour cutoff procedure as used for PC testing The fourth column gives the average run times of RCBT on the tests for which Topk finished mining rules also with a 2 hour cutoff Finally the  RCBT DNF column gives the number of tests that RCBT was unable to finish classifying in  2 hours each THE OC TESTS THAT RCBT FINISHED Training BSTC RCBT 40 92.05 97.66 60 95.75 96.73 80 94 12 98.04 1-133/077 9380 96.12 1070 cJ CZ C 0.95 0.9 0.85 0.8 0.75 0.7 0.65 0.6 0.55 0.5 BSTC RCBT d Median Median  Mean 260 Near outliers  Far outliers 40 Training 60 Training 0.90.80.70.6BSTC RCBT a 80 Training 1-52/0-50 Training 0.9DNFI 0.80.70.6BSTC RCBT b 1 u0.9DNFI 0.80.70.6BSTC RCBT  RCBT DNF 40 30.89 0.6186 273.37 0/25 60 61.28 41.21  5554.37 19/25 80 71.84  1421.80  7205.43 t 21/22 TIMES FOR THE OC 9 Mean 0 Near outliers  Far outliers 1.01 11 01 1.0 d Fig 6 PC Holdout Validation Results BSTC RCBT a Fig 0.80.8 0.8BSTC RCBT BSTC RCBT b c c i DNF cJ CZ C 40 Training 60 Training 80 Training 1-133/0-77 Training 0.95 DNF DNF DNF 0.9 0.90.90.90.85 0.8 BSTC RCBT TABLE VI AVERAGE RUN 1 133/0-77 70.38  1045.65  6362.86 t 20/23 over the number of tests for which Top-k finished Because RCBT couldn't finish any 80 or 1-133/0-77 tests within 2 hours with nl  20 we lowered nl to 2 Classification Accuracy Figure 7 contains boxplots for BSTC on all four OC classification test sets Boxplots were not generated for RCBT with 60 80 or 1-133/0-77 training since it was unable to finish all 25 tests for all these training set sizes in  2 hours each Table VII lists the mean accuracies of BSTC and RCBT over the tests on which RCBT was able to produce results Hence Table VII's 40 row consists of averages over 25 results Meanwhile Table VII's 60 row results are from 6 tests 80 contains a single test's result and 1-133/0-77 results from 3 tests RCBT has better mean accuracy on the 40 training size but the results are closer on the remaining sizes   4 difference over RCBT's completed tests Again RCBT's accuracy could vary widely on its uncompleted tests CAR Mining Parameter Tuning and Scalability We attempted to run Top-k to completion on the 3 OC 80 training and 2 OC 1-133/0-77 training tests However it could not finish mining rules within the 2 hour cutoff Top-k finished two of the three 80 training tests in 775 min 43.6 sec and 185 min 3.3 sec However the third test ran for over 16,000 mnm  11 days without finishing Likewise Top-k finished one of the two 1-133/0-77 tests in 126 min 45.2 sec but couldn't finish the other in 16,000 min  11 days After increasing Top-k's support cutoff from 0.7 to 0.9 it was able to finish the two unfinished 80 and 1-133/0-77 training tests in 5 min 13.8 sec and 35 min 36.9 sec respectively However RCBT with nl 2 then wasn't able to finish lower bound rule mining for either of these two tests within 1,500 min Clearly CAR-mining and parameter tuning on large training sets is TABLE VII MEAN AcCU1ACIES FOR 


support pruning gene expression classifier with an accurate and compact fuzzy rule base for microarray data analysis Biosystems vol 85 computationally challenging As training set sizes increase it is likely that these difficulties will also increase VI RELATED WORK While operating on a microarray dataset current CAR 1 2 3 4 and other pattern/rule 20 21 mining algorithms perform a pruned and/or compacted exponential search over either the space of gene subsets or the space of sample subsets Hence they are generally quite computationally expensive for datasets containing many training samples or genes as the case may be BSTC is explicitly related to CAR-based classifiers but requires no expensive CAR mining BSTC is also related to decision tree-based classifiers such as random forest 19 and C4.5 family 9 methods It is possible to represent any consistent set of boolean association rules as a decision tree and vice versa However it is generally unclear how the trees generated by current tree-based classifiers are related to high confidence/support CARs which are known to be particularly useful for microarray data 1 2 6 7 11 BSTC is explicitly related to and motivated by CAR-based methods To the best of our knowledge there is no previous work on mining/classifying with BARs of the form we consider here Perhaps the work closest to utilizing 100 BARs is the TOPRULES 22 miner TOP-RULES utilizes a data partitioning technique to compactly report itemlgene subsets which are unique to each class set Ci Hence TOP-RULES discovers all 100 confident CARs in a dataset However the method must utilize an emerging pattern mining algorithm such as MBD-LLBORDER 23 and so generally isn't polynomial time Also related to our BAR-based techniques are recent methods which mine gene expression training data for sets of fuzzy rules 24 25 Once obtained fuzzy rules can be used for classification in a manner analogous to CARs However the resulting fuzzy classifiers don't appear to be as accurate as standard classification methods such as SVM 25 VII CONCLUSIONS AND FUTURE WORK To address the computational difficulties involved with preclassification CAR mining see Tables IV and VI we developed a novel method which considers a larger subset of CAR-related boolean association rules BARs These rules can be compactly captured in a Boolean Structure Table BST which can then be used to produce a BST classifier called BSTC Comparison to the current leading CAR classifier RCBT on several benchmark microarray datasets shows that BSTC is competitive with RCBT's accuracy while avoiding the exponential costs incurred by CAR mining see Section VB Hence BSTC extends generalized CAR based methods to larger datasets then previously practical Furthermore unlike other association rule-based classifiers BSTC easily generalizes to multi-class gene expression datasets BSTC's worst case per-query classification time is worse then CAR-based methods after all exponential time CAR mining is completed O SlS CGl versus O Si CGi As future work we plan on investigating techniques to decrease this cost by carefully culling BST exclusion lists ACKNOWLEDGM[ENTS We thank Anthony K.H Tung and Xin Xu for sending us their discretized microarray data files and Top-k/RCBT executables This research was supported in part by NSF grant DMS-0510203 NIH grant I-U54-DA021519-OlAf and by the Michigan Technology Tri-Corridor grant GR687 Any opinions findings and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the funding agencies REFERENCES 1 G Cong K L Tan A K H Tung and X Xu Mining top-k covering rule Mining SDM 2002 5 R Agrawal T Imielinski and A Swami Mining associations between sets of items Y Ma Integrating classification and association rule mining KDD 1998 11 T McIntosh and S Chawla On discovery of maximal confident rules without pp 43-52 1999 24 S Vinterbo E Kim and L Ohno-Machado Small fuzzy and interpretable pp 165-176 2006 1071 pp 207-216 1993 6 G Dong pp 273-297 t995 9 pp 5-32 2001 20 W Li J R Quinlan Bagging boosting and c4.5 AAAI vol 1 V Vapnik Support-vector networks the best strategies for mining frequent closed itemsets KDD 2003 4 M Zaki and C Hsiao Charm L Wong Identifying good diagnostic genes or gene expression data SIGMOD 2005 2 G Cong A K H Tung X Xu F Pan and J Yang Farmer Finding interesting rule gene expression data by using the gene expression based classifiers BioiiiJcrmatics vol 21 l and Inrelligent Systenis IFIS 1993 16 Available at http://sdmc.i2r.a-star.edu.sg/rp 17 The dprep package http:/cran r-project org/doclpackages dprep pdfI 18 C Chang and C Lin Libsvm a library for support vector machines 2007 Online Available www.csie.ntu.edu.tw cjlin/papers/libsvm.pdf 19 L Breiimnan Random forests Maclh Learn vol 45 no 1 M Chen and H L Huang Interpretable X Zhang 7 J Li and pp 725-734 2002 8 C Cortes and Mac hine Learming vol 20 no 3 in microarray data SIGKDD Worikshop on Dtra Mining in Bioinfrrnatics BIOKDD 2005 12 R Agrawal and R Srikant Fast algorithms for mining association rules VLDB pp 1964-1970 2005 25 L Wong and J Li Caep Classification by aggregating emerging patterns Proc 2nd Iat Coif Discovery Scieice DS 1999 gene groups from pp 487-499 t994 13 Available ot http://www-personal umich edu/o markiwen 14 R Motwani and P Raghavan Randomized Algoriitlms Caim-bridge University Press 1995 15 S Sudarsky Fuzzy satisfiability Intl Conf on Industrial Fuzzy Contri J Han and J Pei Cmar Accurate and efficient classification based on multiple class-association rules ICDM 2001 21 F Rioult J F Boulicaut B Cremilleux and J Besson Using groups for groups in microarray datasets SIGMOD 2004 3 concept of emerging patterns BioinformJotics vol 18 transposition for pattern discovery from microarray data DMKD pp 73-79 2003 22 J Li X Zhang G Dong K Ramamohanarao and Q Sun Efficient mining of high confidence association rules without S Y Ho C H Hsieh H pp 725-730 1996 10 B Liu W Hsu and support thresholds Principles f Drata Mining aind Knowledge Discovery PKDD pp 406 411 1999 23 G Dong and J Li Efficient mining of emerging patterns discovering trends and differences KDD J Wang J Han and J Pei Closet Searching for An efficient algorithm for closed association rule mining Proc oJ the 2nd SIAM Int Con on Data in large databases SIGMOD 


