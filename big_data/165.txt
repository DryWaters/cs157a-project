html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">A  Comparative Study among Three Algorithms for Frequent Pattern Generation Md. Rafiqul Islam, Safwan Mahmud Khan, Mohammad Asad-uz-zaman Syed Shahed Kabir Robin Department of Computer Science &amp; Engineering University of Dhaka Bangladesh email: ratlk@udhaka.net.sainankhanCi4.yahoo.com.znayan@bangla.net.csdurob@dhaka.net Abstract Efficient algorithms to mine frequent patterns are crucial to many tasks in data mining. Since the Apriori algorithm was proposed in 1994, there have been several methods proposed to improve its performance However, most still adopt its candidate set generation  and-test approach. In addition, many methods do not generate all frequent patterns, making them inadequate to derive association rules. The Pattern Decomposition PD the dataset on each pass makes it more efficient to mine all frequent patterns in a large dataset. This algorithm avoids the costly process of candidate set generation and saves a great amount of counting time to evaluate support with reduced datasets. In this paper, some existing frequent pattern generation algorithms are explored, their comparisons are discussed, which shows that the PD algorithm outperforms an improved version of Apriori named Direct Count of candidates &amp; Prune transactions DCP improved FP-tree \(Frequent Pattern Predictive Item Pruning \(PIP more scalable than the DCP and PIP 1. Introduction Data mining refers to extracting or "mining knowledge from large amounts of data. It is also called a method of "knowledge presentation" where visualization and knowledge representation techniques are used to present the mined knowledge to the user Data Mining is a promising and flourishing frontier in database system and new database application. A fundamental component in data mining tasks is finding frequent patterns in a given dataset. Frequent patterns are ones that occur at least a user-given number of times \(minimum support to perform essential tasks such as discovering association relationships among items, correlation sequential pattern mining, and much more [3 Algorithms proposed in [1, 5, 6, 8, 9] find all frequent sets in a dataset. The Apriori algorithm [1 accomplishes this by employing a bottom-up search. It generates candidate sets starting at size 2 up to the maximal frequent set size At each pass, it determines which candidates are frequent by counting their occurrence. Due to combinatory explosion, this leads to poor performance when frequent pattern sizes are large. To avoid this problem, some algorithms output only maximal frequent sets [2, 10, 11]. Pincer- Search [11] uses a bottom-up search along with top-down pruning. Max  Miner [2] uses a bottom-up search with a heuristic to try to identify frequent sets as early as possible. Even though performance improvements may be substantial maximal frequent sets have limited use in terms of association rule mining. A complete set of rules cannot be extracted without support information of frequent subsets. An improved version of Apriori named Direct Count of candidates &amp; Prune transactions \(DCP effective database pruning techniques [6]. It exploits an innovative method for storing candidate itemsets and counting their support 


counting their support Almost all previous algorithms use the candidate set generation-and-test approach. FP-tree based mining 5] is an exception which does not need to generate candidate set. The algorithm Predictive Item Pruning PIP  performance improvements over FP-tree since it prunes infrequent nodes. However, PIP-based mining uses a complicated data structure and performance gains are sensitive to the support threshold The PD algorithm [4] generates all frequent sets. It significantly reduces the dataset in each pass by reducing the number of transactions and their size to give better performance. Counting time is clearly less in a reduced dataset. In addition, the algorithm does not need to generate candidate sets; the reduced dataset contains only itemsets whose subsets are all frequent Intuitively, a transaction that contains infrequent itemsets can be decomposed to smaller itemsets since together they do not meet the minimum support threshold. The smaller itemsets after separations are often identical with others and can be combined, thus reducing the size of the dataset In this paper, major algorithms for frequent pattern generation - DCP, PIP and PD are discussed briefly their comparisons are made and they show that the PD algorithm outperforms DCP by one order of magnitude and is faster than PIP. Further, PD is also more scalable than the DCP and PIP This paper is organized as follows: Section 2 presents the three algorithms we are comparing - DCP PIP, PD, respectively. The comparisons among these algorithms are described in details in Section 3 with some empirical experimental results. Section 4 concludes the paper 2. Frequent Pattern and Association Rules Generally we ask for all association rules that have a specified mllllmum support and mllllmum confidence, and various algorithms have been developed for finding such rules efficiently. These algorithms first find Frequent Itemsets. Next, they generate candidate rules by partitioning each frequent itemset into two sets, LHS and RHS. For each candidate rule, the algorithms compute the confidence for the rule, and retain rules with confidence greater than minimum confidence. The expensive step is the identification of frequent itemsets, and this is where algorithms for finding association rules mostly differ 12 Here we show three algorithms, which use different concepts for identifying frequent itemsets. Since association rule generation' is a trivial step in finding association rules, it is not covered in this discussion Focus is on the efficiency of frequent itemsets generation techniques 2.1. Direct Count of candidates &amp; Pruned transactions \(DCP Apriori [1] is one of the most popular Frequent Set Counting \(FSC other solutions have been proposed, it is still the most commonly recognized reference to evaluate FSC algorithm performances. Apriori iteratively searches frequent itemsets: at each iteration k, Fk, the set of all the frequent itemsets of k items \(k-itemsets identified. In order to generate Fk, a candidate set Ck of potentially frequent itemsets is first built. By construction, Ck is a superset of Fk, and thus to discover frequent k-itemsets the support of all candidate sets is computed by scanning the entire transaction database D. All the candidates with minimum support are then included in Fk, and the next iteration started. The algorithm terminates when Fk 


iteration started. The algorithm terminates when Fk becomes empty, i.e., when no frequent set of k or more items is present in the database The new algorithm proposed in [6] is called DCP Direct Count of candidates &amp; Pruned transactions The algorithm significantly enhances the Apriori family of algorithms, and is aimed at solving the issues state above for frequent itemsets of limited length DCP exploits an innovative method for storing candidate itemsets and counting their support. The method is a generalization of the Direct Count technique used by Apriori for counting the support of unary itemsets, and allows the cost of the initial iterations of the algorithm to be reduced considerably Moreover, DCP adopts a simple and effective pruning of D, without using the complex hash filter used by DHP [8 As an example of the heuristics used to prune D consider that the items that are not present in any itemset of Fk are not useful for the subsequent steps of the algorithm, and can thus be removed from D Similarly, transactions with less than k items can also be removed from D, since they cannot contain any k  itemset. In DCP a pruned dataset Dk+l is thus written to the disk at each iteration k of the algorithm, and employed at the next iteration At each iteration k, DCP builds Ck on the basis of Fk-J. In this construction we exploit the lexicographic order of Fk-J to find pairs of \(k-l common \(k-2 pairs occur in close positions within the vector storing Fk-J  The union of each pair is a k-itemset that becomes a candidate C E Ck only if all its subsets are included in Fk-J  Also in this case we can exploit the lexicographic order of Fk-], thus checking whether all the subsets of C are included in Fk-J in logarithmic time Pseudo code of DCP The first iteration of DCP, during which the database is scanned to find frequent items, is the same as the Apriori one. FJ is optimally built by counting all the occurrences of each item i E {I , ... ,m} in every tE D Pseudo code of the second iteration of DCP is given in the next page 1: globat counter\( G I , FI 2: k&lt;:-- 2 3: m2 +--- IFII 4: for all i E [1, m2 ] do 5: COUNTS[i] +--- 0 6: end for 7:D3  8: for all tE D do 9: t = globalyruning\(t , GJ , 2 10: if It I ? 2 then 11: for all {til ,ti2} c t 11 :0; i1 &lt; i2 :0; I t I do 12: I',. = 1',.2 \(til , ti2 13: COUNTS[ 1',.] +--- COUNTS[ 1',.] + 1 14: end for 15: end if 16: ifltl ?3 then 17: D3+--- D3 ut 18: end if 19: end for 20: F2 cl, c2 E C2 I COUNTS[1',.2 \(cl, c2 2I: k+--- 3 Pseudo code of a generic iteration of DCP for k 3 is given below 1: while Fk-1 01 do 2: global_ counter\( Gk-1, Fk-1 3: C k = apriori_gen\( Fk-1 


3: C k = apriori_gen\( Fk-1 4: if Ck  then 5: return 6: end if 7: PREFIXk[ ] = init_candidates\( k, Ck 8: Dk+l  9: for all t E Dkdo 10: t = global yruning\( t, Ck-1, k 11 : if t ? k then 12 13 14 Initialize local counters Lk POS[ ] =inityositions\( t for all {til ,ti2} &lt;;;; t 11 :0; i1 &lt; i2 :0; I t I- k + 2 do 15: I  I',.k\(til, ti2 16: start = PREFIXk[ I 17: end= PREFIXk[I',.+I] - I 18 count_candidates\(1 t I, k, CbPOS, start, end, Lk 19: end for 20: t = localyruning\(i, Lk 21: if 1 k+ 1  22: Dk+l +--- Dk+J U t 23: end if 24: end if 25: end for 26: Fk = {c E C k I c.COUNTS ? min_ sup 27: k+--- k+ I 28: end while D N M T ti Fk Ck C Ci Dk Mk Th d h  h hull e terms use ere ave t e o transaction database number of transactions in D owmg meamngs number of items appearing in the n transactions of D a generic transaction in D an item identifier appearing at position i in transaction t set of frequent k-itemsets set of candidate k-itemsets a generic candidate itemset belonging to Ck an item appearing at position i in the candidate itemset c pruned transaction database read at iteration k DJ =D set of the significant items appearing in the transaction of Dk mk cardinality of Mk 2.2. Predictive Item Pruning \(PIP Algorithm PIP [7] is a new concept which is a learning process of item effectiveness in the FP-tree [5] and can be pruned from the latter transactions in the tree building process. That is, PIP FP-tree algorithm prunes infrequent items which have been counted in FP-tree algorithm. Through simulation, it has been proved that 


algorithm. Through simulation, it has been proved that PIP performs better than the FP-Tree algorithm To determine the effective frequencies of a node in the tree, correlation of the items is required to be known. To determine the correlation, a new data structure for each item in the database has been introduced and will be referred as item correlation node. Status of the items in the correlation node will determine a node to be frequent and also determine whether the node will be inserted in the tree or not Correlation Node This node consisting of  Item name  Remaining frequency and  Related items already inserted in the tree Item header table of the FP-Tree algorithm is hence modified accordingly. Node of a item header table consists of item name and head of the link which points to the fIrst node of the FP-Tree carrying the item name. So the Correlation Node \(CN following information  Item name  Remaining frequency  Related items and their number of occurrences with that item of a transaction already inserted in the tree  Head of the link to the fIrst node Initially there will be one CN per items in the 1frequent itemset. Initial remaining frequency value will be total frequency count value and head link will point to null Item Pruning There are two conditions for pruning an item of a transaction Condition 1: While inserting a node in the tree check the remaining frequency. If the remaining frequency value is less than minimum support proceed for the next condition Condition 2: For an item in a transaction, check the occurrence of the other items in the related items fIeld of the CN. If no other items of that transaction are found in the list then the item can be pruned and will not be considered for insertion Algorithm \(Pseudo code representation Scan the Database for Frequency Count 1. Extract I-Frequent Itemset according to the minimum support and sort the items in ascending order 2. Create Correlation Node for each item in 1Frequent Itemset 3. Create the root of The Tree, T, and label it as null 4. For each transaction t in the database do the following 1. select one transaction tselected ii. For each Items in the selected transaction Tselected do the following a. select one item Iselected according to Frequency Count b. if Prun _ Item\( tselected, Iselected InsertN ode\(Iselected Prun Item Function bool Prun _ Item\( tselected , Ise1ected If Iselected -&gt;remaining frequency &gt;minimum support then Return false Else For each item in the transaction tse1ected Check the list of related items If Count_ oCrelated _Item + Iselected-&gt;remaining frequency &lt;minimum support Then Return true Else Return false 


 Insert function InsertN ode \(Ise1ected  Check if T has a child C Where Iselected.item-name=C.item-name then increase Count of the Node form Iselected by 1 Else Search appropriate Location for the Node Create A New Node As Node.item-name=Iselected.item-name  Decrease remaining frequency for Iselected by 1 Increase count of all items of the transaction T's in Count of related Item  2.3. Pattern Decomposition Algorithm The central idea of this approach is to signifIcantly reduce the dataset size for improving performance This algorithm shrinks the dataset when new infrequent item sets are discovered. More specifIcally, the PD algorithm uses a bottom-up search to fInd frequent sets It consists a set of passes starting from pass 1 for a given transaction dataset D1  Each pass of the PD algorithm, say pass k and Db has two phases. First frequent itemsets Lk and ?Lk are generated by counting for all k-itemsets in Dk. Second, PD-decompose algorithm is used to decompose Dk to get DB! such that DB! contain no itemset in ?Lk. The algorithm terminates at a pass z if Dz is empty Let us illustrate how a pattern in the dataset is decomposed on a specifIc pass, see Figure 1 \(in the next page Pass 1: Suppose we are given a pattern p = abedef: 1 E D! where a, b, e, d, e EL! andf ? L!. To decompose p with ?L], we simply deleteffromp, leaving us with a new pattern abede : 1 in D2   Pass 2: Suppose a pattern p = abede : 1 E D2 and ae L2  Since ae cannot occur in a future frequent set, we decompose p = abede : 1 to a composite pattern q abed, bede : 1 by removing a and e respectively from p Pass 3: Suppose a patternp = abed, bede : 1 E D3 and aed ? L3  Since aed . abed, abed is decomposed into abc, abd, bed. Their sizes are less than 4, so they are not qualifIed for D4  Itemset bede does not contain aed so it remains the same and is included in D4 In /3, we remove patterns if their sizes are smaller than the required size of the next dataset. Here, patterns abc and abd with sizes of 3 cannot be in D4 and are deleted In 6, when a part of a given pattern has the same itemset with another pattern after decomposition, we DJ abc del,' } f 1 b c [,t: lH abdh  2  4. t.1 1': t 5, ?:7 be   lede' f l'::I fS Oce Jb ac/ 3 Ll -1,1 {?"IU is lico JS Vee /,?1C/ 4 


is lico JS Vee /,?1C/ 4 4 ii' {IYl/ J ly J 'C \( t?.f j f,/ 4 ill/ 1 J 3 Iii f!/ 2 1 ahed, !&gt;cde  C1 b L&lt  a b d: 'lit 4: b c \(J e L3 -1?3 j  L 1  OCt is OCt 3 ;'acf..f/ 1 al  1 2 c.,:i:",I 'J l. -l J is OC:c Ii-..' Occ bC":.le}2 Figure 1. Pattern decomposition example combine them by summing their occurrence. Here bcde is the itemset of pattern 4 and part of pattern l's itemset after decomposition, so the final pattern is bcde: 2 in D4 Notably, the algorithm first counts for Lk and ?Lk and then decomposes patterns in each pass. It differs fundamentally from previous algorithms in that it avoids candidate set generation and reduces the dataset on each pass. Counting time is thus also reduced The PD-decompose Algorithm Input: An itemset s, its infrequent k-item set ?qk Output: Itemsets, the decomposition results of s PD-decompose\(itemset s, ?qk 1: if\(k=l 2: t = remove items in ?qk from s 3: else 4: build ordered frequency tree r 5: Sbs = Quick-split\( r 6: t = mapping Sbs to itemsets 7: return t The main objective of PD-decompose is to decompose an itemset s by its infrequent k itemsets. It consists mainly of two parts: 1 tree, 2 called Quick-split and returning the resulting itemsets A frequency tree is a tree whose nodes are items. In the tree, items at each level are ordered by the frequency of their occurrence at the level. The most frequent item at each level is placed first. For example suppose we are given a pattern p E D3 where p.IS abcdefgh. In the third pass, we find infrequent 3itemsets {aef, aeg, aeh, afg, ajh, agh, abe, abf, abg abh, ace, acf, acg, ach, ade, adf, adg, adh}. First, we build up a frequency tree, as shown in Figure 2. The first level consists of only a's. The second level consists of items e, I, g, and h, with e occurring the most at its level. The third level is constructed In similar fashion a e b b G 


G f d O??Et c f d tb ? f} g ? h c h d h Figure 2. A frequency tree example After we built a frequency tree, we then use the Quick-split technique to calculate the maximal frequent sets The Quick-split algorithm is given here Input: A frequency tree r Output: An array of BitSets representing Itemsets Quick-split\(Tree r 1: if\(r is leaf   2: for all x E r.subs do 3: subres[x] = Quick-split\(x x 4: result =newBSO 5: for all x E r.subs do 6: result = result &amp; subres[x 7: remove b E result, b.size:::; k 8: return result To speed up calculation, an itemset is represented by a bitset with 0 and I for specifying the absence or presence of an item at a corresponding position respectively. The Quick-split performs a calculation on a frequency tree and returns an array of bitsets, which represent a group of decomposed itemsets. Splitting is accomplished by calculating bitset results in a bottom  up fashion in the tree. In the above example, we have 8 items a, b, . . .  , h corresponding to positions 0-7 in a 8bit bitset. So p.JS = abcdefgh = {I III I Ill}; abcd ll1 10000}; bcdefgh = {OllillII}. The size of the bitset is the number of items in p.JS which is usually much smaller than the total item size in the dataset For the frequency tree in Figure 2, for the itemset abcdefgh and infrequent 3-itemsets {aef, aeg, aeh, afg ajh, agh, abe, abf, abg, abh, ace, acf, acg, ach, ade adf, adg, adh} , Quick-split returns the possible maximal frequent sets {abcd, bcdefgh The PD Algorithm Input: transaction dataset T Output: frequent patterns PD \( transaction-set T I : D 1 = {&lt;t, 1&gt;1 t E T}; k= I 2: while \(Dk   3: for all p E Dk do II counting 4: for all k-itemset s c;;; p.JS do 5: Sup\(s IDk 6: decide Lk and ?Lk Ilbuild Dk 7: Dk+]= PD-rebuild\(Dk, Lk , ?Lk 8: k 9: end 10: Answer = u Lk As shown above, PD is the top-level function that accepts a transaction dataset as its input and returns the union of all frequent sets as the result. At the kth pass steps 3-6 count for every k itemset of each pattern in Dk and then determine the frequent and infrequent sets Lk and ? Lk; step 7 uses Dk , Lk and ?Lk to rebuild Dk PD stops when Dk is empty The PD-rebuild Algorithm Input: Dataset Db frequent Lk, infrequent ?Lk Output: Dataset DB PD-rebuild \(Dlo Llo ?Lk 1: Dk  ht = an empty hash table 2: for all p E Dk do begin 3: / / q k, ?q k can be taken from previous counting qk={sls E p. JS nLk}; ?qk={tltE p. JS n ?Lk 4: u = PD-decompose\(p.JS, ?qk 5: v ={s E ul s is k-item independent in u 


5: v ={s E ul s is k-item independent in u 6: add &lt;u-v, p.Occ&gt; to Dk+1 7: for all s E v do 8: if sin ht then ht. s. Occ += p. Occ 9: else put &lt;S,p.Occ&gt; to ht 10: end 11: Dk+] = Dk+] u {p E ht The PD-rebuild shown above is to determine DB by Dk, Lk and ?Lk' For each pattern p in Db step 3 computes its qk and ?qk; step 4 calls PD-decompose algorithm to decompose p by ?qk. Note that qk is not used here for decomposing p. In steps 5 to 9, we use pattern separation rule to separate p. In steps 7 to 9 PD-rebuild merges the patterns separated from p with their identical ones via a hash table ht. Since PD follows the pattern decomposition rule to decompose patterns and the pattern separation rule for merging identical patterns that yield same support, the answers generated by PD are correct 3. Comparative Study Our experiments were performed on a 600 MHz Pentium PC machine with 256 MB main memory running on Microsoft Windows XP. All three algorithms were written in C++ language. The test dataset was generated in the same fashion as the IBM Quest project . We used dataset T25.I10.DIOOK . In the dataset, the number of items N was set to 1000. The corruption level for a seed large itemset was fixed obtained from a normal distribution with mean 0.5 and variance 0.1. In the dataset, half of all items were corruptible. In the dataset, the average transaction size ITI and average maximal potentially frequent itemset size III are set to 25 and 10, respectively, while the number of transactions IDI in the dataset is set to lOOK 3.1. Comparison of PD with DCP  Pattern Decomposition algorithm does not need to generate candidate sets which are the main improvement on DCP; the reduced dataset contains only itemsets whose subsets are all frequent  PD generates all frequent sets whether it is not certain in DCP. PD significantly reduces the dataset in each pass by reducing the number of transactions and their size to give better performance. So counting time is clearly less than DCP in a reduced dataset  PD is much more scalable than the DCP 8000 7000 6000 5000 lt;.i OOO E f OOO 2000 Minimum Support PD DCP Figure 3. Performance comparison 8 6 4 2 PD DCP owa_L??_L??_L??_L??_L??_L?? o 50 100 150 200 250 Number of Transactions\(k Figure 4. Scalability comparison Figure 3 shows the execution times for different 


Figure 3 shows the execution times for different minimum support. We can see that PD is about 15 times faster than DCP with minimal support at 2% and about 8 times faster than DCP at 0.25%. In Figure 4, to test the scalability with the number of transactions experiments on dataset D are used. The support threshold is set to 0.75 3.2. Comparison of PD with PIP  Predictive item pruning FP-tree algorithm has a complicated data structure in comparison to PD algorithm  PD works by decomposing transactions into short itemsets. Then regular patterns are combined together. Hence data set is being reduced at every pass. As a result, space efficiency is improved. On the other hand, PIP FP-tree, although prunes infrequent items, its hit ratio is not as efficient as PD. So, obviously its space efficiency is not better than PD  As PD always concerns with the current data set less time is required in comparison to PIP FP-tree algorithm  PD is more scalable than the PIP 100r  E F  60 40 0 20 PD  PIP Minimum Support Figure 5. Performance comparison 500 r 400 300 E F  oo 0 100     Number of Transactions\(k   PD  PIP   Figure 6. Scalability comparison 160 In Figure 5, both PIP and PD have good performance on D. But PIP takes substantially more time when minimum support in the range from 0.6% to 2%. When minimum support is less than 0.6%, the number of frequent patterns increased quickly and thus the execution times are comparable. In Figure 6, we compared the scalability of PD with PIP on the dataset D with minimum support = 0.75%. PD was clearly more scalable than that of PIP 4. Conclusion The programs were implemented in C++ very efficiently. Since really large datasets or data warehouse was not available for us, we run the programs of these three algorithms by using test datasets. So performance comparisons are not the absolute values. The results can vary on other 


absolute values. The results can vary on other computers. But it can be guaranteed that performance ratio of the algorithms will remain the same After making the comparisons with sample data, we came to the conclusion that PD algorithm performs significantly better than the other two especially with larger datasets. PD outperforms DCP and PIP regarding running time. On the other hand, since PD reduces the dataset, mining time does not necessary increase as the number of transactions increases and experiments reveals that PD has better scalability than DCP and PIP. So, PD has the ability to handle the large data mine in practical field like market basket analysis and medical report documents mining 5. References 1] R. Agrawal and R. Srikant, "Fast algoritlnns for mining association rules", VLDB'94, pp. 487-499 2] R. J. Bayardo, "Efficiently mining long patterns from databases", SIGMOD'98, pp.85-93 3] J. Pei, J. Han, and R. Mao, "CLOSET: An Efficient Algorithm for Mining Frequent Closed Itemsets \(PDF Proc. 2000 ACM-SIGMOD International Workshop on Data Mining and Knowledge Discovery, Dallas, TX, May 2000 4] Qinghua Zou, Henry Chiu, Wesley Chu, David Johnson, "Using Pattern Decomposition\( PD Finding All Frequent Patterns in Large Datasets", Computer Science Department University of California - Los Angeles 5] J. Han, J. Pei, and Y. Yin, "Mining Frequent Patterns without Candidate Generation \(PDF  SIGMOD International Con! on Management of Data SIGMOD'OOj, Dallas, TX, May 2000 6] S. Orlando, P. Palmerini, and R. Perego, "The DCP algoritlnn for Frequent Set Counting", Technical Report CS2001-7, Dip. di Informatica, Universita di Venezia 2001.Available at http://www.dsi.unive.itl?orlando/TR017.pdf 7] MD. Mamun-Or-Rashid, MD.Rezaul Karim, "Predictive item pruning FP-tree algoritlnn", The Dhaka University  Journal of Science, VOL. 52, NO. 1, October,2003, pp. 3946 8] Park, J. S., Chen, M.-S., and Yu, P. S, "An Effective Hash Based Algoritlnn for Mining Association Rules", Proc ofthe 1995 ACM-SIGMOD Con! on Management of Data 175-186 9] Brin, S., Motwani, R., Ullman, J., and Tsur, S, "Dynamic Itemset Counting and Implication Rules for Market Basket Data", In Proc. of the 1997 ACM-SIGMOD Conf On Management of Data, 255-264 10] Zaki, M. J., Parthasarathy, S., Ogihara, M., and Li, W New Algoritlnns for Fast Discovery of Association Rules In Proc. of the Third Int'l Con! on Knowledge Discovery in Databases and Data Mining, 283-286 11] Lin, D.-I and Kedem, Z. M., "Pincer-Search: A New Algoritlnn for Discovering the Maximum Frequent Set", In Proc. of the Sixth European Conf on Extending DatabaseTechnology, 1998 12] R. Ramakrishnan, Database Management Systems University of Wisconsin, Madison, WI, USA; International Edition 1998 pre></body></html 


tors such as union, di?erence and intersection are de?ned for pairs of classes of the same pattern type Renaming. Similarly to the relational context, we consider a renaming operator ? that takes a class and a renaming function and changes the names of the pattern attributes according to the speci?ed function Projection. The projection operator allows one to reduce the structure and the measures of the input patterns by projecting out some components. The new expression is obtained by projecting the formula de?ning the expression over the remaining attributes [12 Note that no projection is de?ned over the data source since in this case the structure and the measures would have to be recomputed Let c be a class of pattern type pt. Let ls be a non empty list of attributes appearing in pt.Structure and lm a list of attributes appearing in pt.Measure. Then the projection operator is de?ned as follows ls,lm c id s m f p ? c, p = \(pid, s, d,m, f In the previous de?nition, id ing new pids for patterns, ?mlm\(m projection of the measure component and ?sls\(s ned as follows: \(i s usual relational projection; \(ii sls\(s and removing the rest from set elements. The last component ?ls?lm\(f computed in certain cases, when the theory over which the formula is constructed admits projection. This happens for example for the polynomial constraint theory 12 Selection. The selection operator allows one to select the patterns belonging to one class that satisfy a certain predicate, involving any possible pattern component, chosen among the ones presented in Section 5.1.1 Let c be a class of pattern type pt. Let pr be a predicate. Then, the selection operator is de?ned as follows pr\(c p Join. The join operation provides a way to combine patterns belonging to two di?erent classes according to a join predicate and a composition function speci?ed by the user Proceedings of the 16th International Conference on Scientific and Statistical Database  Management \(SSDBM  04 1099-3371/04 $ 20.00  2004 IEEE Let c1 and c2 be two classes over two pattern types pt1 and pt2. A join predicate F is any predicate de?ned over a component of patterns in c1 and a component of patterns in c2. A composition function c pattern types pt1 and pt2 is a 4-tuple of functions c cStructureSchema, cDataSchema, cMeasureSchema, cFormula one for each pattern component. For example, function cStructureSchema takes as input two structure values of the right type and returns a new structure value, for a possible new pattern type, generated by the join. Functions for the other pattern components are similarly de?ned. Given two patterns p1 = \(pid1, s1, d1,m1, f1 p2 = \(pid2, s2, d2,m2, f2 p1, p2 ned as the pattern p with the following components Structure : cStructureSchema\(s1, s2 Data : cDataSchema\(d1, d2 Measure : cMeasureSchema\(m1,m2 Formula : cformula\(f1, f2 The join of c1 and c2 with respect to the join predicate F and the composition function c, denoted by c 1   F  c  c 2   i s  n o w  d e  n e d  a s  f o l l o w s    F  c  c 2     c  p 1   p 2   p 1    c 1  p 2    c 2  F   p 1   p 2     t r u e   5.1.3. Cross-over database operators OCD Drill-Through. The drill-through operator allows one to 


Drill-Through. The drill-through operator allows one to navigate from the pattern layer to the raw data layer Thus it takes as input a pattern class and it returns a raw data set. More formally, let c be a class of pattern type pt and let d be an instance of the data schema ds of pt. Then, the drill-through operator is denoted by c c Data-covering. Given a pattern p and a dataset D sometimes it is important to determine whether the pattern represents it or not. In other words, we wish to determine the subset S of D represented by p \(p can also be selected by some query the formula as a query on the dataset. Let p be a pattern, possibly selected by using query language operators, and D a dataset with schema \(a1, ..., an ible with the source schema of p. The data-covering operator, denoted by ?d\(p,D responding to all tuples in D represented by p. More formally d\(p,D t.a1, ..., t.an In the previous expression, t.ai denotes a speci?c component of tuple t belonging to D and p.formula\(t.a1, ..., t.an instantiated by replacing each variable corresponding to a pattern data component with values of the considered tuple t Note that, since the drill-though operator uses the intermediate mapping and the data covering operator uses the formula, the covering ?\(p,D D = ?\(p not be equal to D. This is due to the approximating nature of the pattern formula 5.1.4. Cross-over pattern base operators OCP Pattern-covering. Sometimes it can be useful to have an operator that, given a class of patterns and a dataset, returns all patterns in the class representing that dataset \(a sort of inverse data-covering operation Let c be a pattern class and D a dataset with schema a1, ..., an pattern type. The pattern-covering operator, denoted as ?p\(c,D all patterns in c representing D. More formally p\(c,D t.a1, ..., t.an true Note that: ?p\(c,D p,D 6. Related Work Although signi?cant e?ort has been invested in extending database models to deal with patterns, no coherent approach has been proposed and convincingly implemented for a generic model There exist several standardization e?orts for modeling patterns, like the Predictive Model Markup Language \(PMML  eling approach, the ISO SQL/MM standard [2], which is SQL-based, and the Common Warehouse Model CWM  ing e?ort. Also, the Java Data Mining API \(JDMAPI 3] addresses the need for a language-based management of patterns. Although these approaches try to represent a wide range of data mining result, the theoretical background of these frameworks is not clear. Most importantly, though, they do not provide a generic model capable of handling arbitrary cases of pattern types; on the contrary only a given list of prede?ned pattern types is supported To our knowledge, research has not dealt with the issue of pattern management per se, but, at best, with peripheral proximate problems. For example, the paper by Ganti et. al. [9] deals with the measurement 


per by Ganti et. al. [9] deals with the measurement of similarity \(or deviation, in the authors  vocabulary between decision trees, frequent itemsets and clusters Although this is already a powerful approach, it is not generic enough for our purpose. The most relevant research e?ort in the literature, concerning pattern management is found in the ?eld of inductive databases Proceedings of the 16th International Conference on Scientific and Statistical Database  Management \(SSDBM  04 1099-3371/04 $ 20.00  2004 IEEE meant as databases that, in addition to data, also contain patterns [10], [7]. Our approach di?ers from the inductive database one mainly in two ways. Firstly, while only association rules and string patterns are usually considered there and no attempt is made towards a general pattern model, in our approach no prede?ned pattern types are considered and the main focus lies in devising a general and extensible model for patterns Secondly, di?erently from [10], we claim that the peculiarities of patterns in terms of structure and behavior together with the characteristic of the expected workload on them, call for a logical separation between the database and the pattern-base in order to ensure e?cient handling of both raw data and patterns through dedicated management systems Finally, we remark that even if some languages have been proposed for pattern generation and retrieval 14, 11], they mainly deal with speci?c types of patterns \(in general, association rules sider the more general problem of de?ning safe and su?ciently expressive language for querying heterogeneous patterns 7. Conclusions and Future Work In this paper we have dealt with the issue of modelling and managing patterns in a database-like setting Our approach is enabled through a Pattern-Base Management System, enabling the storage, querying and management of interesting abstractions of data which we call patterns. In this paper, we have \(a de?ned the logical foundations for the global setting of PBMS management through a model that covers data patterns and intermediate mappings and \(b language issues for PBMS management. To this end we presented a pattern speci?cation language for pattern management along with safety constraints for its usage and introduced queries and query operators and identi?ed interesting query classes Several research issues remain open. First, it is an interesting topic to incorporate the notion of type and class hierarchies in the model [15]. Second, we have intentionally avoided a deep discussion of statistical measures in this paper: it is more than a trivial task to de?ne a generic ontology of statistical measures for any kind of patterns out of the various methodologies that exist \(general probabilities Dempster-Schafer, Bayesian Networks, etc. [16 nally, pattern-base management is not a mature technology: as a recent survey shows [6], it is quite cumbersome to leverage their functionality through objectrelational technology and therefore, their design and engineering is an interesting topic of research References 1] Common Warehouse Metamodel \(CWM http://www.omg.org/cwm, 2001 2] ISO SQL/MM Part 6. http://www.sql99.org/SC32/WG4/Progression Documents/FCD/fcddatamining-2001-05.pdf, 2001 3] Java Data Mining API http://www.jcp.org/jsr/detail/73.prt, 2003 4] Predictive Model Markup Language \(PMML http://www.dmg.org 


http://www.dmg.org pmmlspecs v2/pmml v2 0.html, 2003 5] S. Abiteboul and C. Beeri. The power of languages for the manipulation of complex values. VLDB Journal 4\(4  794, 1995 6] B. Catania, A. Maddalena, E. Bertino, I. Duci, and Y.Theodoridis. Towards abenchmark for patternbases http://dke.cti.gr/panda/index.htm, 2003 7] L. De Raedt. A perspective on inductive databases SIGKDD Explorations, 4\(2  77, 2002 8] M. Escobar-Molano, R. Hull, and D. Jacobs. Safety and translation of calculus queries with scalar functions. In Proceedings of PODS, pages 253  264. ACMPress, 1993 9] V. Ganti, R. Ramakrishnan, J. Gehrke, andW.-Y. Loh A framework for measuring distances in data characteristics. PODS, 1999 10] T. Imielinski and H. Mannila. A database perspective on knowledge discovery. Communications of the ACM 39\(11  64, 1996 11] T. Imielinski and A. Virmani. MSQL: A Query Language for Database Mining. Data Mining and Knowledge Discovery, 2\(4  408, 1999 12] P. Kanellakis, G. Kuper, and P. Revesz. Constraint QueryLanguages. Journal of Computer and SystemSciences, 51\(1  52, 1995 13] P. Lyman and H. R. Varian. How much information http://www.sims.berkeley.edu/how-much-info, 2000 14] R.Meo, G. Psaila, and S. Ceri. An Extension to SQL for Mining Association Rules. Data Mining and Knowledge DiscoveryM, 2\(2  224, 1999 15] S. Rizzi, E. Bertino, B. Catania, M. Golfarelli M. Halkidi, M. Terrovitis, P. Vassiliadis, M. Vazirgiannis, and E. Vrachnos. Towards a logical model for patterns. In Proceedings of ER 2003, 2003 16] A. Siblerschatz and A. Tuzhillin. What makes patterns interesting in knowledge discovery systems. IEEE TKDE, 8\(6  974, 1996 17] D. Suciu. Domain-independent queries on databases with external functions. In Proceedings ICDT, volume 893, pages 177  190, 1995 18] M.Terrovitis, P.Vassiliadis, S. Skadopoulos, E. Bertino B. Catania, and A. Maddalena. Modeling and language support for the management of patternbases. Technical Report TR-2004-2, National Technical University of Athens, 2004. Available at http://www.dblab.ece.ntua.gr/pubs Proceedings of the 16th International Conference on Scientific and Statistical Database  Management \(SSDBM  04 1099-3371/04 $ 20.00  2004 IEEE pre></body></html 


The reason of the hiding failure of SWA is the same in Fig.8 Notice the result at x = 0.7646 in Fig.14, because the hiding failure is occurred at the seeds of the sensitive patterns, a high weakness is produced As shown in Fig.15 and Fig.16, the misses cost and dissimil arity of our work decreases as RL2 increases. This is because the larger RL2 is, the less effect on non-sensitive patterns. Also weakness and dissimilarity of SWA are independent of RL2 5. Conclusion In the paper, a novel method improving the balance between sensitive knowledge protecting and discovery on frequent patte rns has been proposed. By setting entries of a sanitization matrix to appropriate values and multiplying the original database by the matrix with some probability policies, a sanitized database is gotten. Moreover, it can avoid F-I Attack absolutely when the confidence level given by users approximates to 1. The experimental results revealed that although misses cost and dissimilarity between the original and sanitized database of our process are little more than SWA, ours provide more safely protection than SWA. Unlike SWA, our sanitization process could not suffer from F-I Attack and the probability policies in our approach also take the minimum support into account, the users only need to decide the confidence level which affects the degree of patterns hiding 6. Reference 1] M. Atallah, E. Bertino, A. Elmagarmid, M. Ibrahim and V. Verykios Disclosure Limitation of Sensitive Rules", Proc. of IEEE Knowledge and Data Engineering Exchange Workshop 1999 2] R. Agrawal and R. Srikant. Fast algorithms for mining association rules. VLDB, Santiago, Chile, 1994 3] R. Agrawal and R. Srikant. Privacy preserving data mining. In ACM SIGMOD, Dallas, Texas, May 2000 4] E. Dasseni, V. Verykios, A. Elmagarmid and E. Bertino, Hiding Association Rules by Using Confidence and Support", Proc. of 4th Intl Information Hiding Workshop \(IHW 5] A. Evfimievski, J. Gehrke, and R. Srikant. Limiting Privacy Breac hed in privacy preserving data mining. SIGMOD/PODS, 2003 6] A. Evfimievski, R. Srikant, R. Agrawal, and J. Gehrke. Privacy preserving mining of association rules. KDD 2002 7] M. Kantarcioglu and C. Clifton. Privacy-preserving distributed mining of association rules on horizontally partitioned data. In ACM SIGMOD Workshop on Research Issues on Data Mining and Knowledge Discovery, June 2002 8] Guanling Lee, Chien-Yu Chang and Arbee L.P Chen. Hiding sensitive patterns in association rules mining. The 28th Annual International Computer Software and Applications Conference 9] Y. Lindell and B. Pinkas. Privacy Preserving Data mining. In CRYPTO, pages 36-54, 2000 10] S. R. M. Oliveira and O. R. Za  ane. Privacy Preserving Frequent Itemset Mining. In Proc. of IEEE ICDM  02 Workshop on Privacy Security, and Data Mining 11] S. R. M. Oliveira and O. R. Za  ane. Algorithms for Balancing Priv acy and Knowledge Discovery in Association Rule Mining. IDEAS  03 12] S. R. M. Oliveira and O. R. Za  ane. Protecting Sensitive Knowledge By Data Sanitization, ICDM  03 13] S. R. M. Oliveira, O. R. Za  ane and Y  cel Saygin. Secure Association Rule Sharing, PAKDD-04 14] Benny Pinks. Cryptographic Techniques For Privacy-Preserving D ata Mining. ACM SIGKDD Explorations Newsletter Vol. 4, Is. 2, 2002 15] S. J. Rizvi and J. R. Haritsa. Maintaining data privacy in association rule mining. VLDB, 2002 16] J. Vaidya and C. W. Clifton. Privacy preserving association rule mining in vertically partitioned data. KDD2002 17] Verykios, V.S.; Elmagarmid, A.K.; Bertino, E.; Saygin, Y.; Dasseni E. Association rule hiding. IEEE Transactions On Knowledge And Data Engineering, Vol. 16, No. 4, April 2004 Proceedings of the 29th Annual International Computer Software and Applications Conference  COMPSAC  05 0730-3157/05 $20.00  2005 IEEE pre></body></html 


pre></body></html 


Batt Power Batt Type Stabilization Type Propulsion Mechanism  of Solar Panels  of Solar Cells Manufacturing Qty Satellites in Constellation On-Orbit Spares Channels Number of Bands Data Storage Processing Power Source type Block Name Thermal Control Material Type Level of Technology Known Inheritance Propulsion station keeping Number of Axes Ground Based Spares Pointing Accuracy APPENDIX C EXISTING MODELS Numerous models are today in use for estimating spacecraft cost Two of the most common are the NASA/Air Force Cost Model and the Aerospace Small Satellite Cost Model Here is a description of the NAFCOM model The NASA/Air Force Cost Model NAFCOM is a parametric estimating toolfor space hardware It is based on historical NASA and Air Force space projects and is primarily used in the very early phases of a development project NAFCOM can be used at the subsystem or component levels The database currently includes 122 missions including 76 unmanned earth orbiting 24 unmanned planetary 11 launch vehicles 8 manned 3 engines It uses parametric relationships to estimate subsystem or component level costs for any aerospace hardware including earth orbital spacecraft manned spacecraft launch vehicle upper stages liquid rocket engines scientific instruments or planetary spacecraft 7 And for the Aerospace Small Satellite Cost Model SSCM employs a parametric methodology for estimation of program cost and is best suited to the early conceptual development phase of a spacecraft program during which time the design is likely to be less mature and when cost and performance trades can be easily performed SSCM consists of a collection of cost-estimating relationships or CERs which estimate the costs of developing andproducing a spacecraft system with the following subsystems  Attitude Determination and Control Subsystem ADCS  Propulsion  Power  Telemetry Tracking  Command TT&C  Command  Data Handling C&DH  Structure  Thermal CERs were also developed for integration assembly and test IA&T program management PM and systems engineering SE and launch and orbital operations support LOOS Individual subsystem cost estimates are statistically rolled up to yield a cost-risk distribution which provides the estimator with a range of cost estimates andpercentiles 8 The SSCM was calibrated from over 100 post-1990 Earth-orbiting andplanetary missions REFERENCES 1 Lack of Disciplined Cost-Estimating Processes Hinders Effective Program Management GAO study 04-642 2 Jilla Cyrus D and Miller David W Satellite Design Past Present and Future International Journal of Small Satellite Engineering 12 February 1997 3 Bearden David A A Complexity Based Risk Assessment of Low-Cost Planetary Missions:When Is A Mission Too Fast and Too Cheap Fourth IAA International Conference On Low-Cost Planetary Missions JHU/APL MAY 2-5 2000 4 Kellogg Mahr and Lobbia An Analogy-based Method for Estimating the Costs of Spacecraft IEEEAC paper 1371 Version 4 5 Hoeting Jennifer A Methodology for Bayesian Model Averaging An Update f 6]btp/ewiieiao iiAaos 7 Keith Smith NASA/Air Force Cost Model Science Applications International Corporation 8 18 


BIOGRAPHIES Lee Fischman served as Principle Investigator for this project Lee is Senior Director of Development at Galorath Incorporated where he directs much of the new product development and research at the firm He developed SEER for Software  Hardware Integrations with Microsoft Project the Comparison Sizing tool COTS Software model in addition to various data mining information extraction and expert systems Previously he was a software designerlprogrammer in the New York financial industry Lee earned a BA from the University of Chicago and an MA from UCLA both in economics Mike Kimel carried out statistical work on the project Mike is an Economist for Galorath Inc in addition to maintaining his own quantitative consulting practice He has also taught Economics and Advanced Statistics at the Graziadio School of Business and Management at Pepperdine University run the Competitive Strategy group for a Fortune 500 Telecom Company and worked as a Consultant at PriceWaterhouse LLC now PriceWaterhouse-Coopers He earned a Ph.D in Economicsfrom UCLA Troy Masters programmed analytic methods and is integrating the Far Out model into its parent product SEER for Hardware previously SEER-H Troy is a Software Engineer with Galorath Incorporated where he has been the primary developer for a range ofproducts He earned a BS in computer science from UCLA David J Pine was our subject matter expert helping us assemble data and gain insight into technical trends Dave is retired after a 34-year career with the National Aeronautics and Space Administration NASA currently is a consultant to various government and industry entities While at NASA his organizations in the Office of the Chief Financial Officer and later at the IPAO at Langley Research Center were responsible for the conduct of major NASA program analyses and evaluations for the NASA Administrator and Deputy Administrator From early 1988 through the end of 1990 he was the Deputy Program Manager for the Hubble Space Telescope Program specifically responsible for the telescope operations and science support aspects of the program He earned a BS in Aerospace Engineering from the Polytechnic Institute of Brooklyn and a Masters of Engineering Administration from the George Washington University 19 


  20 Angeles, where he also received a B.S. in Applied Mathematics  Eric Fetzer is a Senior Member of the Technical Staff at the Jet Propulsion Laboratory, Pasadena, California specializing in satellite observations of the atmosphere.  His scientific interests include planetary boundary layer processes, tropical phenomena, upper tropospheric variability, and climatologies of temperature, water vapor and clouds.  His technical interests include analysis of large data sets, and of multi-sensor observations. He has over 20 peer-reviewed publications and given numerous scientific presentations, public lectures and media interviews about climate science. Eric received a B.A. in Physics from the University of California Berkeley, and a Ph.D. in Astrophysical, Planetary and Atmospheric Sciences from the University of Colorado, Boulder   Amy Braverman is a Senior Statistician at the Jet Propulsion Laboratory, California Institute of Technology She holds a B.A. in Economics from Swarthmore College an M.A. in Mathematics from UCLA, and a Ph.D. in Statistics also from UCLA. Prior to her current position in JPL's Science Data Understanding Group, she was a Caltech Post-doctoral Scholar at the Jet Propulsion Laboratory, and a Scientist in the Flight Sciences Experiments Section of the Science Division. Dr Braverman conducts research on information-theoretic methods for the analysis of massive data sets and streams statistical data fusion, high-dimensional data analysis, and statistical analysis for climate model evaluation and diagnosis. She has published in both the statistics and geoscience literature, and is active in both communities She is a member of the Multi-angle Imaging SpectroRadiometer Science Team, and serves as a member of the Atmospheric Infrared Sounder Science Integration Team. Her responsibilities on both missions include designing data reduction algorithms for massive, remote sensing data sets. Dr. Braverman also holds an appointment in the Department of Statistics at UCLA as Adjunct Associate Professor, and is active in UCLA\222s Center for Environmental Statistics. She is member of the Committee on Applied and Theoretical Statistics of the US National Academy of Science. She has refereed for the Journal of the American Statistical Association, the Journal of Computational and Gr aphical Statistics, IEEE Transactions on Geoscience and Remote Sensing, and the Journal of Applied Meteorology and Climatology Seungwon Lee is a senior member of the High Capability Computing and Modeling Group at Jet Propulsion Laboratory. She is conducti ng research on comet gas dynamics, nonlinear dynamics control, climate model parameterization, Earth science data analysis, parallel computing, and advanced numerical algorithms. She received her Ph.D in Physics fr om the Ohio State University and her M.S. and B.S. in Physics from the Seoul National University, Korea  Matthew Henderson is software engineer in the High Capability Computing and Mode ling group at JPL. His current work includes Web Services and Instrument Data Level 2 subsetting. He received a B.S. Computer Science from CSU Pomona, and is currently pursuing M.S Computer Science  Steven J. Lewis is a member of the Information System and Computer Science staff member at the Jet Propulsion Laboratory.  He received a BS in Mathematics from the University of California, Los Angeles in June 2001, and the MS and Ph.D. Degree from Claremont Graduate University in May 2004 and May 2007, respectively.  He worked as a post doctoral fellow at Keck Graduate Institute from June 2007 until he joined JPL in March of 2008.  During his graduate and post doctoral work, his studies focused on applications of Bayesian methods to hidden Markov models with particular interest and application to protein sequencing.  His work at JPL has focused on integrating web services into various programming platforms for the purposes of accessing NASA satellite data, as well as developing object tracking so ftware and contributing to image enhancement and restoration efforts Van Dang is a member of the Science Data Understanding Group at the Jet Propulsion Laboratory. She was responsible for the NEWS Level 2 processing that generated the formal merged Level 2 data from multiple A-Train instruments  Manuel de la Torre is a Physicist from the Universidad Complutense at Madrid \(Spain\. After finishing his Ph.D work at the University of Bayreuth \(Germany\ on pattern formation in turbulent flows and a 7 1/2 year stunt as Ass and Assoc. Prof. at the Escuela T\351cnica Superior de Ingenieros Aeron\341uticos in Madrid \(Spain\, he came to the Jet Propulsion Laboratory on a 1-year Sabatical leave in 1997 wanting to apply fundamental concepts of nonlinear systems and geophysical fluid dynamics to something that might be directly useful to soci ety. He discovered the JPL as a great place to achieve that goal and extende d his stay a bit longer, becoming Technical staff and working on different aspects of remote sensing, validation of satellite instruments, and data analysis of atmospheric processes and climate  


