   
Sequential pattern mining approaches mainly deal with finding the positive behaviour of a sequential pattern that can help in predicting the next event after a sequence of events In addition sequential patterns may exhibit periodicity as well i.e during weekends 80 of people who watch a movie in cinemas will have a meal in a restaurant afterwards. This is a problem that has not been studied in the literature. To confront the problem of discovering periodicity for sequential patterns we adopt and extend a periodic pattern mining approach which has been utilised in association rule mining However due to the sequential/temporal nature of sequential patterns, the process of finding the periodicity of a 
Abstract 276 276\276 276 
given sequential pattern increases the complexity of the above mentioned association rule mining approach considerably. As a key attribute of any data mining strategy we provide a comprehensive and flexible problem definition framework for the above mentioned problem Two main mining techniques are introduced to facilitate the mining process The Interval Validation Process IVP is introduced to neutralise complexities which emerge due to the temporal/sequential nature of sequential patterns whereas the Process Switching Mechanism PSM is devised to increase the efficiency of the mining process by only scanning relevant data-sets from the source database The approach proposed in this paper is based on a post-mining environment, where the identification 
of sequential patterns from a database has already taken place 
Index Terms 276 276\276 276 
Incremental data mining post mining environment, sequential pattern, periodic patterns I  INTRODUCTION A dvances in data storage technology mean that storing the different status of data and its temporal information has become feasible. By utilising the time dimension in the data mining process we can yield more accurate knowledge to be applied in decision making processes  Mining sequential patterns is an important problem in knowledge discovery and has significant applications in broad areas Discovering periodicity cyclic behaviour of sequential patterns is one of the key temporal features to mine in 
 
 
sequential data Mining periodicity for sequential patterns   Fahad Anwar is with School of Computer Science University of M anchester, Manchester, UK, E-mail fahad.anwar@manchester.ac.uk  Ilias Petrounias is with Manchester Business School University of Manchester Manchester UK Phone 44-161 3063386 E-mail ilias.petrounias@manchester.ac.uk  Vassilis S. Kodogiannis is with School of Computer Science, Univ. of Westminster, London HA1 3TP, UK,  E-mail: kodogiv@wmin.ac.uk Violeto Tesseva and Desislava Peneva is with Centre for Biomedical Engineering Prof Ivan Daskalov",Bulgarian Academy of Sciences 
Sofia-1113, Bulgaria, E-mails: {violeta,desi}@clbme.bas.bg   is a process of extracting information which can help in p redicting the temporal cyclic behaviour of these patterns In many situations sequential patterns with periodicity information are more useful than simple sequential patterns For example information that 223during every weekend 80 of people who watch a movie in cinemas will have dinner at a restaurant afterwards\224 is more significant  than the simple information of 223people who w atch movies are likely to eat dinner in restaurants afterwards\224  After reviewing previous research work in the area of periodic pattern discovery it is identified that the Chen 
approach presented in 1  c a n  b e  m o u l d e d  f o r  e f f i c i e n t  mining of periodic time intervals for a given sequential pattern However since the approach mentioned purely concentrates on mining periodic intervals for association rules implementing the same approach for sequential patterns will increase the complexity of the mining process considerably.  The main reason for this is the difference in the nature of association rules and sequential patterns Association rules deal with the dependencies of events in a database however they completely ignore the temporal nature of these events, whereas sequential pattern mining is a process which identifies the dependencies of events in temporal/spatial ordering This fundamental difference 
means that, when using the Chen and Petrounias approach to discover periodic time intervals for a given sequential pattern, we have to tackle a number of challenges, such as valid time windows flying support cyclic-flying support and flying intervals. We will formally define and examine these challenges in section 4  The contributions that this paper makes during the discovery of periodic time intervals for a sequential pattern are listed below  267  A comprehensive problem definition framework which includes both a sequential pattern definition framework and a framework to define temporal features 267  A framework to discover all the periodic time intervals by scanning the database once only 
267  The Interval Validation Process IVP and Process Switching Mechanism PSM are introduced to discover all the periodic time intervals The main objective of IVP is to tackle the complexities which emerge due to the sequential/temporal nature of sequential patterns PSM is devised to increase the Efficient Periodicity Mining of Sequential P atterns in a Post-Mining Environment Fahad Anwar, Ilias Petrounias, Vassilis S. Kodogiannis, Violeta Tasseva, and Desislava Peneva  


 efficiency of the mining process by only scanning relevant intervals from the database  The remaining of the paper is structured as follows Section 2 presents related work and identifies how it differs from the work presented in this paper. Section 3 defines the problem to investigate and Section 4 contains the main algorithm Section 5 presents incremental data mining concept and  Section 6 contains generalized model for proposed framework. Section 7 we conclude our work and discusses future research work II.RELATED  WORK I n 2   O z d e n  et al  identify the potential benefits of finding cyclic association rules The main problem to investigate was to find association rules that repeat themselves throughout the input data  Two algorithms were suggested to achieve the above mentioned goal. In the first approach Sequential Algorithm a straightforward method is used. That is, to first generate rules in each time unit and, after that, to apply pattern matching algorithms to discover cycles which is known as Cycle Detection To reduce the expensive process of calculating the support of item-sets the Cycle pruning Cycle skipping and Cycle elimination techniques were introduced The second approach which is also known as the 223Interleaved Algorithm\224 consists of two phases First the  cyclic large i tems are discovered and in the second phase cyclic association rules are generated by using the already discovered large item-sets and cycles without scanning the database  Mining Segment wise periodic patterns also known as partial periodic patterns\ was first introduced by Han et al  in [3   T h e  i d e a  i s  b a s e d  o n  t h e  p r a c t i c a l  r e a l i t y  t h a t  i n  t h e  real world it is quite possible that not every point in a time series may contribute to the periodicity full periodicity rather only few time points contribute to the cyclic behaviour of a pattern partial periodicity This type of looser periodicity is also known as segment-wise periodicity Integration of three important techniques was suggested to discover segment-wise periodicity in temporal databases [3    267  Data Cube Structure  \(Reference Cube, Working Cube 267  Bit mapping technique 267  Apriori Mining technique  Mining asynchronous periodic patterns in time series data was introduced by Yang et al in [4   T h e  g o a l  w a s  t o  find patterns that occur periodically in some sub-sequences but their occurrences may be shifted due to disturbances. It is useful to still consider in a pattern, if the disturbance is within some user defined disturbance threshold  Huang and Chang in 5  p r o p o s e  a  g e n e r a l  m o d e l  f o r  m i n i n g  asynchronous periodic patterns In their work three algorithms SPMiner, MPMiner, and CPMiner were devised to discover valid segments A further improvement on approached presented in [5  w a s  c a r r i e d  o u t  i n   6     Y a n g  et al in [7   i n t r o d u c e d  t h e  p r o b l e m  o f  d i s c o v e r i n g  s u r p r i s i n g  periodic patterns In many applications e.g computation biology an infrequent pattern can still be considered very significant if its actual occurrence frequency exceeds the prior expectation by a large margin A surprising periodic pattern is a pattern which may not have large frequency of cyclic behaviour however this frequency is more than the expected one  One of the difficult questions in mining periodicity is how to describe the desired periodicity to mine. Moreover how to select the temporal data when the user does not know how to describe the goal in terms of a specific query 8    C h e n   a n d  P e t r o u n i a s  a d d r e s s  t h e  a b o v e  m e n t i o n e d  problems in [9  a n d  i n t r o d u c e  a  f r a m e w o r k  f o r  e x p r e s s i n g  a  problem definition for temporal data mining. Calendar time expressions were used to specify temporal features of patterns \(temporal patterns\.  A simple example of temporal pattern is < \223Low-Blood-Pressure 001 Nausea\224, Days.Hours 21:22\ >, which indicates that patients\222 low blood pressure is followed by nausea from 21 to 22 o\222clock every night Chen and Petrounias in 1  d i s c u s s  t h e  i m p o r t a n c e  o f  temporal features in association rules. In that research work two important temporal aspects for association rules were investigated  267  Discovery of Longest Intervals 267  Periodicity Discovery  Most of the work presented above is based upon a premining environment compared to the approach presented in this paper which is based on a post-mining environment. In a pre-mining environment the mining algorithm is not dependent on prior knowledge about the data-sets; whereas in a post-mining environment mining algorithms utilise already mined results or perceptions of domain experts about certain knowledge hidden in data-sets. An advantage of this approach is that the new algorithms can be integrated with any existing sequential pattern mining approach III  PROBLEM  DEFINITION  FRAMEWORK I n a broader view the problem of discovering all the periodic time intervals for a given sequential pattern can be defined as: \223We are given a time-stamped database D over a time domain T and a sequential pattern SP along with all user defined parameters as well as temporal constraints The goal is to discover all the periodic time intervals with reference to the given sequential pattern\224 As we are dealing with two concepts, sequential pattern and periodic time interval, the suggested problem definition framework should be flexible enough to define both these concepts comprehensively and easily The framework for temporal data miming presented by Chen and Petrounias in 9  i s  u t i l i s e d  a n d  e x t e n d e d  h e r e  t o  d e f i n e  t h e  c o n c e r n e d  mining problem 


 A.  Sequential Pattern Definition Framework A sequential pattern can be defined as a set of elements event/event-sets SP=\(e1,e2,e3\205.en with temporal/sequential ordering satisfying the user defined parameters of min_supp \(minimum support\, SD \(Sequence Duration and SW Sliding Windows Support for a sequential pattern is the fraction of data sequences in the database having the given sequential pattern as subsequence. SD \(Sequence Duration\ is the time limit during which the sequential pattern must exist whereas the SD Sliding Window constraint is used to relax the rigid definition of transaction time Hence a sequential pattern can be defined as  Definition 1.1 SP, min_supp, SD, SW 224computer 001 printer 001 scanner\224, 60%, 45days, 3days  B. Periodic Time Definition Framework To discuss the periodic time definition framework we first need to introduce some basic temporal entities used to define and interpret time related concepts [1    267  Chronons  In temporal databases transactions are stamped with chronons A chronon is a nondecomposable time interval of some fixed minimal duration in which an event takes place Depending upon different applications the granularity of a chronon varies For example it might be a second a minute or an hour 267  Interval ITVL  Interval is a fundamental element of any periodic time An interval is a non-empty set of contiguous chronons The granularity of intervals in data mining applications varies due to the user preferences for example interval granularity can be of a week, a month, a quarter or a year 267  Periodic Time Periodic time can be defined as a set of regular intervals in cycles these intervals are composed of three basic features  267  Interval Range RR  All the regular intervals in a periodic time are located in some specific position in their corresponding cycles, for instance the position of month can be 1-3 for the first quarter of year  Hence, a periodic time can be represented as a triplet of Cycle Granule Range Cycle is the length given by a calendar unit\ of a cycle, Granule is the duration \(given by a calendar unit\ of a granular interval, and Range is a pair of numbers which give the position of regular intervals in the cycles [1    Definition 1.2 PT Cycle, Granularity, Interval Range PT CY,GR,RR PT Year, Month, [10,12    Two user defined parameters of min_ilen minimum length and min_freq minimum frequency are also very important for defining the problem statement. \223min_ilen\224 is used to define how long the time interval should be in order to be considered as interesting periodic time interval The 223min_freq\224 parameter  is used to determine the minimum required frequency of valid periodic intervals Therefore for a time interval to be considered as valid periodic time interval, it has to satisfy both these parameters  267  Periodic time interval length has to be 001 to min_ilen 267  Periodic interval has to occur in 001  number of cycles min_freq  We further extend the problem definition by including the important temporal feature of Time Period \(TP\ in the mining process. TP represents the time period during which a cyclic behaviour is found against a pattern.  For example we can say a pattern X occurs every Monday of the week during the time period of 1 st March 1999 to 1 st July 2005  C Complete Problem Definition Framework By combining the problem definition of both concepts we can formulate the definition of the problem to be confronted in this paper 223Given a set of time-stamped transactions D  over a time domain T  and a sequential pattern SP  along with all user defined parameters  min_supp, SD, SW as well as the temporal information of time period TP cyclicity CY and granularity GR of interest, and minimum frequency min_freq and minimum interval length min_ilen parameters; the mining problem is to find all possible periodic times PT of < CY, GR, RR with respect to the given SP 223  Definition 1.3 SP, min_supp, SD, SW TP, CY, GR RR min_ilen,min_freq computer 001 printer 001 scanner, 60%, 45days, 3days 2241990-2004\224,Year, Month RR 2,70  Here RR Interval Range\ is expected to be discovered IV  DISCOVERY  PROCESS A ccording to the approach presented in [1  t h e  p r o c e s s  o f  mining periodic time intervals for a given sequential pattern can be divided into three main steps Data transformation discovery of all the longest intervals for each cycle and discovery process of all the periodic time intervals  It is identified that almost all the database scanning and processing is carried out in the first two phases \(mainly in the second phase\; moreover, the third phase is completely dependent on already discovered longest intervals for each cycle \(second phase\. Therefore, it is realised that if we are able to mould the first and second phase for effective discovery of all the longest intervals for a given sequential pattern in each cycle  then we can straightforwardly implement the PIDeriver algorithm presented in 1  t o  discover all the periodic time intervals Hence the rest of the paper is mainly focused on the problem of discovering 


 all the longest intervals for a given sequential pattern in each cycle  A.  Data Transformation For effective implementation of search techniques for the discovery of all the longest intervals, the original database has to be transformed The data transformation process includes the steps of data filtering, database transformation and multiple segmentations of data \(Fig 1                                                                      Fig. 1.  Data Transformation  I n the first step of data transformation the database is filtered according to the user defined Time Period TP parameter. For example, if the TP is 2004-2005 then all the transactions not having transaction time within the given TP are excluded from the further mining process In the second step the database is transformed into a sequence database where each sequence is a collection of events/event-set mapped to specific sequence_ID Unique key of the record Moreover events/event-sets are sorted on transaction date/time  Since we have to find the longest intervals for each cycle the sequence database is divided into user defined cycles D\(cy\,D\(cy 2 D\(cy 3 205\205..D\(cy n  Next the s egmented database is further divided into the user interested granularity interval D\(c n ITVL 1 ITVL 2 ITVL 3 205 ITVL n   For example if the g ranularity of interest is \223month\224 then data will be divided in January February March,\205\205.December In the last step of data transformation, the database is further divided into finer granularity according to the user defined  Sequence Duration SD parameter This further s egmentation is required as sequential pattern support has to be calculated during the specified SD. In the case of the example used above, data will be divided into days \(Day 1  D ay 2 205..Day n   B Longest Interval Discovery Process After the data transformation phase, the next phase in the discovery process is to find all the longest intervals for each cycle D\(C n We can define longest interval as  267  L ongest interval is a set of continuous valid intervals  on a given time-line with the following properties 267  The length of the interval cannot be less than the user defined min_ilen parameter 267  The longest interval cannot overlap with any other longest interval 267  The longest interval is followed by either an invalid interval or the last interval of the longest interval is equal to the last interval of the said cycle  Before further exploring the concept of longest interval and discussing its discovery process, it is important to first introduce the basic component of longest interval, which is known as \223valid interval\224  I.\ Valid Interval An interval ITVL is valid with reference to a given sequential pattern SP if it satisfies all the user-defined parameters \(min_supp, SD, SW\ within the said ITVL. For example, if we have ITVL as month with 10 data sequences in total and a given min_supp of 0.6,  we will say that this ITVL is valid if and only if 6 or more data sequences support the given sequential pattern and also satisfy the other user defined parameters \(SD, SW\ \(Fig 2  Fig. 2.  Valid/Invalid Intervals  A n interesting point here is that even if the ITVL does not satisfy the min_supp parameter it can still be considered as valid interval. The reason for this notion lies in the following characteristic of sequential patterns  A sequential pattern can exist in multiple transactions Therefore if we divide data into different ITVLs data transformation phase\, it is quite possible that we may find sequential pattern support which exists in two ITVLs To differentiate these two support concepts we introduce the two kinds of support for sequential patterns \(Fig 3  267  Standard Support  Sequential pattern support exists completely in one interval \(ITVL 267  Flying Support  Sequential pattern support exists between two intervals \(ITVLs  Once the flying support is discovered, the question arises of how to decide in which interval \(ITVL\ it really belongs To answer this question we take the weight of sequential pattern support as the deciding factor. By weight, we mean support of different elements of the sequential pattern If the weight of the flying support is more towards ITVL x  ITV ITV Time Valid Invalid 


 then it is considered that flying support belongs to ITVL x  w hereas if the weight of flying support is more towards ITVL y it will be considered as ITVL y support. However, if t he weight of flying support is equal between two ITVLs we will assume that flying support belongs to the ITVL from where the sequential pattern flying support has started   Fig. 3.  Standard and Flying Support  I 1\. Valid Interval Definition After discussing the flying support concept valid interval can be defined as: an interval \(ITVL\ is valid with reference to a given sequential pattern SP, if it satisfies the user defined parameters SD SW within the said ITVL and one of the following conditions is true  267  Standard Support is 001 min_supp 267  Standard Support + Flying Support 001 min_supp 267  Flying Support 001 min_supp  C. Longest Interval \(Problem Definition The problem to mine all the longest intervals can be defined as \223Suppose we have a database of events D and a sequential pattern SP  along with all its user defined parameters and also the user defined granularity The problem is to discover all the longest intervals satisfying the min_ilen parameter for each cycle D 1 D 2 D 3 205.D n 224  I Framework to Discover Longest Intervals Due to the temporal and inter-transactional characteristics of sequential patterns it is recognised that longest interval discovery will be quite an expensive process Consequently  it is important to devise different t echniques, which can help to scan the minimum amount of the database during the mining process Keeping in view the above consideration we decompose the problem of longest interval discovery into four sub-problems These sub problems are basically set of valid intervals with different length  267  Strictly Loose Seed Interval \(SLSI 267  Loose Seed Interval \(LSI 267  Seed Interval \(SI 267  Longest Interval \(LI                               Fig. 4.  Framework to Discover Longest Intervals  T wo main search techniques the Interval Validation Process IVP and the Process Switching Mechanism PSM are introduced here for the discovery of all the longest intervals in each cycle. The main objective of IVP is to confront the complexities which emerge due to the sequential/temporal nature of sequential patterns whereas PSM is devised to increase the efficiency of the mining process by only scanning relevant intervals from the database  I.1.\  IVP \(Interval Validation Process During different stages of the longest interval discovery process, PSM passes the C ITVL Current Interval\ to IVP to v erify if the C ITVL is valid or not \(Fig 4\. IVP first checks t he validity of C ITVL by counting standard support and then i f required it also counts the flying support to check C ITVL  v alidation.  IVP utilises DSCP \(Dynamic Support Counting Process during the standard support counting process for each data sequence DSCP scans only the minimum number of required data-sets from the database in order to find the support of a given sequential pattern\. This process continues until the counted support of the given SP is equal to min_supp parameter and IVP returns \223valid\224 to PSM or there is no data sequence left in C ITVL to check \(IVP returns 223 invalid\224 to PSM If after checking the standard support IVP retains \223invalid\224 against C ITVL then the flying support c oncept needs to be explored \(Fig 4  Algorithm IVP \(Interval Validation Process\ for standard ITVL stage=s_supp indicate different stages of IVP  i=1  counter to fetch next record CS=0  current support of given SP  CR  current record C_Supp  calculated Support RR   remaining records TR   total records if stage=s_supp then  IVP is in standard support stage  LR_ID LR C ITVL     Fetch the last record ID  Loop ITVL Y  Standard Support Flying Support ITVL X  Time Line 


  CR Fetch_Rec C ITVL i\  //to fetch data sequence   C_Supp DSCP CR, SP SD,SW    if  C_Supp<>0 then   CS=CS+C_Supp i=i+1 Add C Seq_Id Seq_List     else     i=i+1 end if if CS 001 min_supp*TR\ then return\(\223valid\224 else if \( \(min_supp * TR\-CS > RR\ or \(i > LR_ID  i=0 Store CS,Data_Struc   stage=\224f_f_supp\224 exit end if  end if if stage=\224complete\224 IVP on C ITVL is complete  exit end if  Fig. 5.  IVP Algorithm for standard support   I Flying Support Discovery Flying support can exist on both sides of C ITVL  T herefore first certain portions of C ITVL  and N ITVL  Next I nterval have to be scanned to find flying support of the given SP. We can call this ITVL as FF ITVL Forward Flying I nterval However after checking the FF ITVL  if C ITVL  is s till invalid then certain portions of C ITVL  and P ITVL   Previous Interval\ have to be scanned as well; we call such ITVL as BF ITVL Backward Flying Interval\ \(Fig 6                                Fig. 6.  Flying Intervals  O nce the FF ITVL is created, the next step is to find pattern s upport in it. Upon finding the flying support for C ITVL IVP a ggregates the support against C ITVL  in the data structure  Table 1 This aggregation depends on the weight of the discovered flying support For example if 70 of the weight is in C ITVL then current support is aggregated with 0 7. The process continues until the min_supp parameter is satisfied or the algorithm scans the last data sequence of FF ITVL   D ata Structure of IVP ITVL ID  ITVL STATUS  SUPPORT STATUS  CYCLE CAL SUPPORT  C ITVL  Valid I nvalid Standard Flying Both Cycle of the C ITVL  C alculated Support  After scanning the FF ITVL  if the min_supp parameter is n ot satisfied, then IVP will count flying support in BF ITVL  O nce the BF ITVL is created, the next step is to count pattern s upport in it Upon finding the flying support IVP aggregates the support against C ITVL  This process c ontinues until the min_supp parameter is satisfied or the algorithm scans the last data sequence of BF ITVL   I 2.\ PSM \(Process Switching Mechanism The main aim of implementing PSM is to scan only those intervals ITVLs which can be part of any longest interval This is done by switching the discovery process into different modes forward mode backward mode and jumping mode Switching of process modes depends on different scenarios during the discovery of SLSI LSI SI and LI  Let us first discuss the definitions of each subproblem  Strictly Loose Seed Interval \(SLSI An interval is a SLSI Strictly Loose Seed Interval with reference to a given  sequential pattern if and only if it is a valid interval and satisfies both the following conditions  267  SLSI is not surrounded by immediate valid intervals 267  SLSI is not a part of any LSI, SI or LI  Loose Seed Interval LSI  An interval is loose seed interval \(LSI\ with reference to a given sequential pattern if and only if, it satisfies all of the following conditions  267  At least first and last ITVLs of potential seed interval are valid 267  The distance between first and last valid interval of LSI is equal to min_ilen parameter 267  There is not a single invalid ITVL between first and last ITVLs of LSI  Seed Interval SI An interval is considered as seed interval \(SI\ with reference to a given sequential pattern if the length of consecutive valid interval is equal to min_ilen parameter  Longest Interval \(LI The longest interval definition was presented in section 4.2 In Fig 7 the longest interval is depicted as LI=\(ITVL 17 ITVL 18 ITVL 19 ITVL 20 ITVL 21   I 2.1\  PSM \(Process Switching Mechanism\ Algorithm The PSM algorithm starts in forward mode by undertaking the first problem, that is to find SLSI \(Strictly Loose Seed Interval\.  It scans the first ITVL to check if it is a valid interval  If IVP discovers that C ITVL  Current I nterval\ is invalid then the process simply moves to N ITVL   Next Interval and this process continues until PSM discovers SLSI or the process reaches the last ITVL of the said cycle \(Fig 8-a                                   Fig. 7.  Different stages of longest ITVL  However, if C ITVL is recognised as valid interval it means 


 that we have found the first SLSI. Upon finding the SLSI PSM undertakes the second sub-problem discovery of LSI According to the definition of LSI for any LSI at least first and last ITVL of potential loose SI have to be valid therefore PSM jumps to the last interval of the potential loose seed interval. The reason for this jump is in the following property of longest interval  267  The longest interval cannot be less than min_ilen and every ITVL within the longest interval has to be valid ITVL  Hence, if we found that ITVL 8 is invalid then there is no n eed to check the ITVLs between ITVL 4  to ITVL 7  since t hey cannot be part of any longest interval \(Fig 8-b  After jumping to the last ITVL of potential LSI PSM again passes the C ITVL to IVP to check if the ITVL is valid o r not. If it is recognised that C ITVL is invalid then it means c urrent SLSI cannot be a part of any longest interval Therefore PSM switches to forward mode by moving to the N ITVL  Next Interval and the process of searching the n ext Strictly Loose Seed Interval \(SLSI\ continues \(Fig 8c\.  However, if C ITVL is valid at this stage, that means we h ave found the first LSI Upon discovering the LSI PSM confronts the third sub-problem discovery of SI To discover SI, PSM has to scan the remaining ITVLs between first and last ITVL of the already discovered LSI Therefore PSM switches into backward mode and scans the ITVL, which is one ITVL previous than the C ITVL Fig 8 d  Validation of C ITVL is checked by IVP again. If C ITVL is i dentified as valid interval then the process of discovering the seed interval will continue  PSM will remain in backward mode and moves to the previous ITVLs one by one to check the validity of different ITVLs This process continues until PSM reaches the already discovered valid interval or it encounters an invalid interval \(Fig 8-e  During the process of discovering SI, if PSM encounters an invalid ITVL at any stage, then it does not have to check the rest of the ITVLs of LSI \(as this LSI cannot be part of any LI\. In this scenario, PSM assigns a new value to SLSI that is the last valid interval identified by PSM in \(see Fig 8-f new SLSI is assigned with ITVL 7 Now the process of d iscovering the next LSI proceeds again. According to the definition of LSI for any LSI at least the first and last ITVLs have to be valid therefore PSM jumps to the last interval of the potential loose seed interval. How long this jump will be depends on the min_ilen parameter If PSM continues in backward mode and reaches the already discovered ITVL then it means we have found a consecutive set of valid intervals whose length is equal to the min-ilen parameter which is the definition of SI In that scenario PSM jumps to the first ITVL after the last ITVL of current SI and the discovery process of LI proceeds \(Fig 8-g\.  In the Longest Interval \(LI\ discovery process PSM switches to forward mode to check the validity of the C ITVL However, if the C ITVL is identified as v alid interval then the seed interval is extended by this C ITVL  This process continues until PSM encounters an i nvalid ITVL or PSM reaches the last interval of the data set. Once PSM encounters an invalid ITVL the process of extending the seed interval terminates. The discovered LI is stored in the data structure and the PSM algorithm proceeds to the search of the next SLSI Fig 9 As we have to discover all the longest intervals for each cycle, the process given in Fig 4 is recursive and it will continue until all the longest intervals of each cycle are found D.  PIDeriver Algorithm for Periodic Interval Discovery Once all the longest intervals for each cycle are discovered with the above motioned approach we can straightforwardly implement the PIDeriver algorithm presented by Chen in 1  t o  d e r i v e  a l l  t h e  p e r i o d i c  t i m e  intervals for a given sequential pattern              Fig. 9.  Discovery process for LI V  INCREMENTAL  DATA  MINING M ining periodicity for sequential patterns is a time consuming process Maintaining the already discovered periodic patterns in the updated database is very important since new data may invalidate some of the discovered periodic patterns and new periodic patterns may emerge due to new data Assuming that the cyclicity granularity and sequential pattern of interest remain the same the approach presented in this paper to discover periodic time intervals for a specific SP can be used for incremental mining of periodic time intervals as well  The approach presented in this paper divides the main problem of finding the periodic time intervals into two sub-problems finding the longest interval for each cycle and discovery of periodic intervals by using already discovered longest intervals of each cycle  Since the second problem is purely based on mining results of first problem the discovered longest intervals in the previous data mining efforts can be used in an incremental data mining process. During the incremental data mining process the algorithm will only focus on finding the longest intervals from new data. However, due to the temporal nature of sequential patterns some portion of the old database will be used as well, the size of this is directly proportional to the user defined parameter of SD Sequence Duration Since finding the longest interval involves most of the processing and complexity during the process of periodic time interval discovery this approach will benefit the incremental data mining quite significantly VI.GENERALISED  MODEL  FOR  FRAMEWORK T he Generalised model GN shows the discovery process of all data filtration transformation discovery of 


 all longest intervals for each cycle and periodic time intervals Transition Z 1  represents the filtration process of t he time stamped database The process of data transformation is represented by transition Z 2  and the data s egmentation by transition Z 3 Transitions Z 4 and Z 5 show r espectively the Process Switching Mechanism \(PSM\ and Interval Validation Process IVP Transition Z 1  has the f ollowing form  Z 1 l 1 l 2 l 4 l 3 l 4 r 1    l 3  l 4  r 1  l 1  false True  l 2  false True  l 4  W 4_3  W 4_4  W 4_3 223The process of data filtration has finished\224 W 4_4 254 W 4_3  P lace l 1  corresponds to the entrance point for the s tamped database in the GN It is represented by one 002  token which enters the input place with initial characteristic 223a stamped database\224  In place l 2  enters 003  t oken with initial characteristic 223time period \(TP\\224   The 002  token simultaneously with the 003 1  token passes t hrough transition Z 1  and enter place l 4  This place c orresponds to the process of filtration The two tokens merge and form one new token with initial characteristic the result of the united characteristics of the tokens On each transition activation the new token passes through the transition and enters again place l 4  extending its c haracteristic with the current results of the filtration process. After the process finishes the final token moves to place l 3 obtaining as a characteristic 223 filtered database\224 Transition Z 2 has the following form  Z 2  l 3  l 5  l 7  l 6  l 7  r 2    l 6  l 7  r 2  l 3  f  alse True   l 5  f  alse  True  l 7  W 7_6  W 7_7  W 7_6 223The process of data transformation has finished\224 W 7_6 254 W 7_7   T he description of transition Z 2 functioning is similar to t he one of transition Z 1 As a joint place between transitions Z 1  and Z 2  place l 3  do not need any addition explanations T he tokens from place l 3  pass through the transition and e nter place l 7  which corresponds to the process of data t ransformation Place l 5  is an entrance point for the p arameter giving the sequential pattern SP which is represented by one 004  token 004  token enters the net with initial characteristic 223sequential pattern\224 The tokens from places l 3 and l 5 pass simultaneously to place l 7 merge and o btain join characteristic. This characteristic is extended on every transition activation by the current results of the transformation process. After the process finishes the final token moves to place l 6 obtaining as characteristic 223 sequence database\224 The process of data segmentation consists of three consecutive stages splitting into user defined cycles division into user interested granules and granulation according to user defined sequence duration parameter. The form of transition Z 3 is the following  Z 3 l 6 l 8 l 9 l 10 l 12 l 13 l 14 l 11 l 12 l 13 l 14 r 3    l 11  l 12  l 13  l 14   l 6  false true false false  l 8  false true false false r 3  l 9  false false true false  l 10  false false false true  l 12  false W 12_12  W 12_13  false  l 13  false false W 13_13  W 13_14   l 14  W 14_11  false false W 14_14  W12_12  223The process of database division into user defined cycles has not finished\224 W12_13  254 W12_12 W13_13  223The process of database granulation has not finished\224, W13_14 = \254 W13_13, W14_11 = \223The process of database segmentation has finished\224 W14_14  254 W14_11  In places l 8  l 9  and l 10  enter respectively one 005   006  and 007  token with initial characteristics 223cyclicity interval  \(CY\\224  223granularity interval GR\\224 and 223sequence duration SD\\224   At the first activation of the transition the two tokens from places l 6 and l 8 pass simultaneously through it, merge i nto one new token and enter place l 12 At the beginning the n ewly created token obtains composite characteristic It extends its characteristic on every pass through the transition and entering into place l 12  with the current state o f the process of database division into user defined cycles After this process finishes the resulting token simultaneously with the 006 token from place l 9 pass through t ransition Z 3 and enter into place l 13 In this process the two t okens merge into one token with initial characteristic the composition of the characteristics of the parent tokens. Like in the previous case the resulting token enters place l 13  e xtending its characteristic with the current state of the process until a granulated database is obtained. On the next step the obtained token enters place l 14 simultaneously with t he 007 token from place l 10 The two tokens unite each other m erging their characteristics The newly created token passes through transition Z 3 and enters place l 14 until a final g ranulated database is obtained On each entrance into place l 14 the token extends its characteristic with the current s tate of the process of database final granulation. At the end of this process the token moves to place l 11  with a c haracteristic 223segmented database\224 Transition Z 4 has the f ollowing form  Z 3 l 6 l 8 l 9 l 10 l 12 l 13 l 14 l 11 l 12 l 13 l 14 r 3    l 11  l 12  l 13  l 14   l 6  false true false false  l 8  false true false false r 3  l 9  false false true false  l 10  false false false true  l 12  false W 12_12  W 12_13  false  l 13  false false W 13_13  W 13_14   l 14  W 14_11  false false W 14_14  


 W 12_12   223The process of database division into user d efined cycles has not finished\224 W 12_13 254 W 12_12  W 13_13  223 The process of database granulation has not finished\224 W 13_14   254 W 13_13  W 14_11   223The process of database s egmentation has finished\224 W 14_14 254 W 14_11   I n places l 8  l 9  and l 10  enter respectively one 005   006  and 007  token with initial characteristics 223cyclicity interval  \(CY\\224  223granularity interval GR\\224 and 223sequence duration SD\\224   At the first activation of the transition the two tokens from places l 6 and l 8 pass simultaneously through it, merge i nto one new token and enter place l 12 At the beginning the n ewly created token obtains composite characteristic It extends its characteristic on every pass through the transition and entering into place l 12  with the current state o f the process of database division into user defined cycles After this process finishes the resulting token simultaneously with the 006 token from place l 9 pass through t ransition Z 3 and enter into place l 13 In this process the two t okens merge into one token with initial characteristic the composition of the characteristics of the parent tokens. Like in the previous case the resulting token enters place l 13  e xtending its characteristic with the current state of the process until a granulated database is obtained. On the next step the obtained token enters place l 14 simultaneously with t he 007 token from place l 10 The two tokens unite each other m erging their characteristics The newly created token passes through transition Z 3 and enters place l 14 until a final g ranulated database is obtained On each entrance into place l 14 the token extends its characteristic with the current s tate of the process of database final granulation. At the end of this process the token moves to place l 11  with a c haracteristic 223segmented database\224 Transition Z 4 has the f ollowing form  Z 4  l 11  l 17  l 18  l 19  l 15  l 16  l 17  l 18  r 4    l 15  l 16  l 17  l 18    l 11  t  rue false  False  false   r 4  l 17  f  alse  W 17_16  W 17_17  false    l 18  false false W 18_17  true   l 19  f  alse false  True  false   W 17_16   223The process of data segmentation has f inished\224 W 17_17   254 W 17_16  W 18_17   223The PSM has to j ump minimum length parameter steps\224  Initially in place l 18 enters one b  token with initial characteristic 223minimum interval length \(min_ilen\\224   The already segmented database from place l 11 pass i nterval ITVL by interval through transition Z 4  to place l 15 The token from place l 11 passes directly to place l 15 for v alidity check without obtaining any new characteristics The b token moves simultaneously with one of the tokens in place l 19  to place l 17  obtaining as characteristic t he current state of the process of the longest interval LI finding\224  At the end of this process the resulting tokens move to place l 16 and merge with the tokens from the same interval o btaining characteristic 223segments of the longest interval\224 The form of transition Z 5 is  Z 5  l 15  l 19  r 5    l 19   r 5  l 15  t  rue  VII  CONCLUSION  AND  FUTURE  WORK I n this paper the problem of finding the periodic time intervals for a given sequential pattern is addressed The approach presented in this paper divides the main problem into two sub-problems finding the longest intervals for each cycle and discovery of periodic time intervals by using the already discovered longest intervals of each cycle Almost all the data processing and complexity is covered during the process of finding the longest intervals Moreover the second problem is purely based on mining results from the first problem.  Therefore, in this paper we mainly focused on the problem to find all the longest intervals for each cycle To confront the above problem efficiently, we introduced two main search techniques IVP Interval Validation Process\ and PSM \(Process Switching Mechanism\.  In this paper we have presented an effective mining approach for finding all the periodic time intervals for a given sequential pattern. As a future work the process presented in this paper can be extended to find periodic time intervals for all the given sequential patterns in one database scan However to accomplish this task a more complex data-structure/memory management technique needs to be implemented REFERENCES 1  X  Chen and I. Petrounias, Mining Temporal Features in Association Rules, Proc. of PKDD\22299, Prague, Czech Republic, pp.295-300 2  Ozden B Ramaswamy S and Silberschatz A  Cyclic Association Rules in Proceedings of the 14 th   International C onference on Data Engineering 1998 Orlando Florida USA IEEE Computer Society 3  Han, J., Pei, J., and Yin, Y., Mining Segment-Wise Periodic Patterns in Time-Related Databases in Proceedings of the 4 th   International C onference on Knowledge Discovery and Data Mining, 1998: AAAI Press, Menlo Park 4  Yang J Wang W and Yu P.S Mining asynchronous periodic patterns in time series data in Proceedings of KDD 2000 p 275279 5  Huang K.-Y and Change C.-H Asynchronous periodic patterns mining in temporal databases in Proceedings of the International Conference on Databases and Applications DBA'04 2004 Innsbruck, Austria 6  Huang K.-Y and Change C.-H  Mining Periodic Patterns in Sequence Data In Proceedings of the 6th International Conference on Data Warehousing and Knowledge Discovery DaWaK 2004 Zaragoza, Spain: Springer 7  Yang J Wang W and Yu P.S Mining Surprising Periodic Patterns, in Data Mining and Knowledge Discovery, 2004 8 p. 253273 8  Lin W Orgun M.A and Williams G.J  An Overview of T emporal Data Mining in Proceedings of the 1st Australian Data Mining Workshop, 2002  9  C  hen X and Petrounias I  A Framework for Temporal Data Mining, in Proceedings of 9 th International Conference on Database a nd Expert Systems Applications DEXA'98 1998 Vienna Austria: Spring 


 Fig. 8. PSM \(Process Switching Mechanism Move to N ITVL Next Interval 1 2 3 4 5 Time Line Invalid ITVL   a\  SLSI discovery process \(forward mode continues  Jump to 8 th ITVL min_ilen=6 1 2 3 4 5 Time Line 6 7 8 b SLSI found \(process in jumping mode  M o v e  t o  N I T V L  t o  f i n d  n e x t S L S I  p ro c e s s  s w i t c h  t o f o r w a r d m o d e  1 2 3 4 5 T i m e  L i n e L a s t  S L S I f o u n d 6 7 8 9 I n v a l i d I T V L  c \  SLSI found but C ITVL is invalid   Backward Mode 1 2 3 4 5 Time Line LSI found 6 7 8 9 Valid ITVL d  LSI is found and process switches into backward mode   Backward Mode 1 2 3 4 5 Time Line LSI found 6 7 8 9   e\  LSI found- Seed Interval Discovery Process 1 2 3 4 5 Time Line 6 7 8 9 Invalid ITVL SLSI is assign new value of ITVL 7 and the p rocess of searching next LSI proceed again 12 11 10 13  f\  PSM encounters invalid ITVL during the search of SI  1 2 3 4 5 T ime L ine 6 7 8 9 SI Fo u n d D isco v ery p ro c ess o f L I p ro c eed s  g\  SI is found and PSM proceed for the discovery of LI   


