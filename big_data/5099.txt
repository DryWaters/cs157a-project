183 Applying a pattern length constraint on the FPGrowth algorithm   Cornelia Györödi 1 Robert Györödi 1  Mihai Der idan 2 Livia Bandici 1    1 Associate professor Phd. Eng 2 Student Department of Computer Scien ce, Faculty of Electrical Engineering and Information Technology, University of Oradea, Str. Universitatii 1, 410087, Oradea, Romania, E-mail cgyorodi@uoradea.ro, rgyorodi@rdsor.ro m_dersidan@yahoo.com  lbandici@uoradea.ro    Abstract  With the ever-growing database sizes, we have enormous quantities of data, but unfortunately we cannot use raw data in our day-to-day reasoning/decisions. We desperately need knowledge. This knowledge is in most cases in the gathered data, but the extraction of it is a very time and resources consuming operation  In this paper we propose an improvement of the FP-Growth algorithm that focuses on applying a pattern-length constraint on the FP-Growth algorithm. This is, mining only frequent patterns with their length belonging in an interval selected by the user. The algorithm with this constraint applied can be used when only patterns with specific lengths are interesting for the user  The main advantage of running the algorithm with the length limitation instead of the classic FP-Growth algorithm is that the running time of the former is smaller, thus, the required information can be obtained in a shorter time    Keywords Data Mining, frequent pattern, FP-tree   I  INTRODUCTION   The term Data Mining, or Knowledge Discovery in Databases, has been adopted for a field of research dealing with the automatic discovery of implicit information or knowledge within databases [7 h perf or m a n c e i s a k e y factor for data mining systems in order to allow a sufficient exploration of data and to cope with the huge amounts of data The implicit information within databases, and mainly the interesting association relationships among sets of objects, that lead to association rules, may disclose useful patterns for decision support, financial forecast, marketing policies, even medical diagnosis and many other applications. This fact has a ttracted a lot of attention in recent data mining s sh o w n i n 1], m i n i ng association rules may require iterative scanning of large databases, which is costly in processing A very influential association rule mining algorithm Aprior a s been de v elo ped f o r ru le m i n i n g i n lar g e  transaction databases. Many other algorithms developed are derivative and/or extensions of this algorithm. A large step forward in improving the performances of these algorithms was made by introduction of a novel, compact data structure, called frequent pattern tree, or FP-t and the associated mining algorithms, FP-growth  The main difference between the two is that the Apriorilike techniques are based on bottom-up generation of frequent itemset combinations and the FP-tree based ones are partition-based, divide-and-conquer methods FPTree’s efficiency of mining is achieved with three techniques: \(1\e database is compressed into a highly condensed, much smaller data structure, which avoids costly, repeated database scans, \(2\-tree-based mining adopts a pattern fragment growth method to avoid the costly generation of a large number of candidate sets, and 3\ing-based, divide-and-conquer method is used to decompose the mining task into a set of smaller tasks for mining confined patterns in conditional databases which dramatically reduces the search space. The FPgrowth method is efficient and scalable for mining both long and short frequent patterns, and is about an order of magnitude faster than the Apriori algorithm and also faster than some recently reported new frequent pattern mining methods  In this paper we propose a new variant of the FP-Growth Algorithm that focuses on applying a pattern-length constraint on the FP-Growth algorithm. This is, mining only frequent patterns with their length belonging in an interval selected by the user. The algorithm with this constraint applied can be used when only patterns with specific lengths are interesting for the user; for example, if a supermarket owner wants to know the effects of a special offer consisting of two pr oducts on the other related products, he might only be interested in patterns of length 3 or 4. The main advantage of running the algorithm with the length limitation instead of the classic FP-Growth algorithm is that the running time of the former is smaller thus, the required information can be obtained in a shorter time  II  PROBLEM DEFINITION  Association rule mining finds interesting association or correlation relationships among a large set of data items  T h e ass o ciatio n rules are co nsidered interesting if they 978-1-4244-5056-5/09/$26.00 ©2009 IEEE 


184 SOFA 2009  3 rd International Workshop on Soft Computing Applications   29 July … 1 August    Szeged \(Hungary\ad \(Romania satisfy both a minimum  support threshold and a minimum confidence thresh A more formal definition is the following et  i 1 i 2 i m be a set of items. Let D the task-relevant data, be a set of database transactions where each transaction T is a set of items such that T   Each transaction is associated with an identifier, called TID. Let A be a set of items. A transaction T is said to contain A if and only if A   T An association rule is implication of the form A B where A    B  and A B  The rule A   B holds in the transaction set D with support  s  where s is the percentage of transactions in D that contain A   B i.e., both A and B This is taken to be the probability P  A   B he rule A   B has confidence  c in the transaction set D if c is the percentage of transactions in D containing A that also contain B This is taken to be the conditional probability P\(B|A That is  support  A   B  P  A   B   1 confidence  A   B  P  B  A 2  The definition of a frequent pattern relies on the following considerations A set of ite m s i s ref e rred to as an itemset \(pattern\. An itemset that contains k items is a k itemset. The set name  semester is a 2-itemset. The occurrence frequency of an itemset is the number of transactions that contain the itemset. This is also known simply, as the frequency, support count, or count of itemset. An itemset satisfies minimum support if the occurrence frequency of the itemset is greater than or equal to the product of minimum support and the total number of transactions in D. The number of transactions required for the itemset to satisfy minimum support is therefore referred to as the minimum support count If an itemset satisfie s  minimum support then it is a frequent itemset  frequent pattern  The most common approach to finding association rules is to break up the problem into tw  1  Find all frequent itemsets: By definition, each of these itemsets will occur at least as frequently as a pre-determined minimum support count  2  Generate strong association rules from the frequent itemsests: By definition, these rules must satisfy minimum support and minimum confiden Additional interestingness measures can be applied, if desired. The second step is the easier of the two. The overall performance of mining association rules is determined by the first step. As show e  performance, for large databases, is most influenced by the combinatorial explosion of the number of possible frequent itemsets that must be considered and also by the number of database scans that has to be performed. The first of these problems seems to be resolved by employing a special compact data structure, FP-tre e, and related algorithms, FPgrowth, for the effective mining of frequent itemsets but the second problem still holds for large databases Based on these facts, in this paper we propose a technique that improves on the performances of FP-tree based algorithms, by reducing the number of database scans from 2 to just a single scan and applying pattern length constraints to further reduce the processing time   III  ALGORITHM IMPLEMENTATION  The implementation of the algorithm uses some techniques described in [4 o r bu ildi n g t h e FP tree, s u ch as  storing the relations in the tree from a node to its parent instead of from a node to its children. Because pointers slow the execution speed of a program, the usage of pointers has been avoided, and the fact that each node has to store just the link to its parent allowed the application of this technique; instead of storing a dynamic list of children for each node, a vector of parents has been used to store the parent of each node in the tree  Building the FP-Tree  This step is a very important one in the FP-Growth algorithm, since the tree stores the transactions in a compressed manner, and the mining operations will be applied only on this tree once it has been constructed. The construction of the tree is done in 4 steps 1 Reading the data First, the transactions are read from an input file, the frequency of each individual item is counted, and all the transactions are stored in a dynamically allocated memory. The transactions have to be stored in computer’s memory for usage in the next steps. The input file is parsed for fas ter processing time 2 Sorting the items in the transactions In this step the items in each individual transaction are sorted descending by their frequency of appearance. The algorithm used for sorting the ite ms is quick-sort. Also, the items whose frequency is too small are removed 3 Sorting the transac tions lexicographically The transactions are sorted lexico graphically, with the shortest transactio ns coming first \(i.e. the transaction “abc” comes before “abca”\his step is required because of the method that is used to construct the FP-Tree in the next step of the algorithm. Radix sort is used to sort the transactions, with a time complexity of O\(\(N+E\maxLength\, where N is the number of transactions, E is the number of distinct items and maxLength is the maximum length of a transaction This step runs fast considering that in most cases maxLength << logN and N / \(N+E 1. After this step, at a closer look it can be seen that the structure of the FP-Tree is already defined, and all that remains is to build it 4 Building the FP-Tree To build the FP-Tree, the recursive technique described in 4 u s ed  at rec u rsion step K, the k-th item in each transaction is used to split the database into sections, one for each item. This can be done easily because the transactions have been sorted lexicographically in the previous step. To build the FP-tree 


185 Cornelia Györödi, Robert Györödi, Mihail Deridan, Livia Bandici    Applying a pattern length constraint on the FP-Growth algorithm at each step k, we process an interv c h t h at  according to the lexicographic order of the transactions obtained at the previous step, in the interval lev e l  k-1 of the transactions there is just one item type present This item will be the parent node for all the nodes that we will obtain at this step, with the stored frequency equal to b-a+1. Knowing that the transactions are stored lexicographically, and that on level k-1 in the interv we have only one item type, we can see that on level k in the interva e i t e m s ar e sorted ascending by their id this also means that items with the same id are grouped together \nsidering that on level k we have m unique items, we will obtain m different intervals, which we will then process on step k+1 of the recursion; we will also add m nodes to the FP-Tree, each having as parent the unique item from step k-1 on interva To div i de th e in ter v a l   in to m  i n terv a ls, w e u s e bi n a r y search. A v i su a l  explanation of how this step of the algorithm works is presented below    Fig.1.The construction of FP-tree  Pattern Mining  The process of mining the frequent patterns is based on the classic FP-Growth. The main difference appears in the generation of combinations \(line 5\here only combinations of a specific length are generated. The execution of the mining process is also stopped when the length of the current pattern \(alpha\s greater then maxlength. Below is presented the pseudocode of the data mining   Fig.2.The pseudocode of the modified FP-Growth procedure  Test Results  Here are some graphical representations of the obtained results when running the algorithm on databases with different number of items and different threshold values On the Y axis is represented the running time of the algorithm in seconds, and on the X axis the length of the searched patterns. The red line represents the tests where the support threshold was 1%, and the blue line represents the tests with a 1.5% support threshold. The number of items in the file used for tes ting the algorithm is 100000. It can be clearly noticed that when mining patterns with a smaller length the program runs significantly faster than when mining for all the frequent patterns \(the maximum length of a pattern in the input file was 20 The results from Figure 3 show that the FP-Growth algorithm has a good performance, only for a smaller length patterns, \(length pattern<10\ with a small support threshold \(less than 1.5  Red line   1% support threshold Blue line   1.5% support threshold      0.00 5.00 10.00 15.00 20.00 25.00 30.00 12345678910All pattern length time\(s   1.5 1  Fig. 3. Scalability of the FP-Growth algorithm function of the pattern length       0.00 20.00 40.00 60.00 80.00 100.00 120.00 10 20 30 40 50 60 number of transactions\(K time\(s   FP-Growth with pattern length constraint classic FP-Growth  Fig. 4. FP-Growth with pattern length constraint versus the classic FPGrowth 


186 SOFA 2009  3 rd International Workshop on Soft Computing Applications   29 July … 1 August    Szeged \(Hungary\ad \(Romania  The results from Figure 4 show that the FP-Growth algorithm with constant pattern length equal 4 has a good performance compared with the classic FP-Growth algorithm on databases with different number of transaction for a constant support threshold. The execution time for the classic FP-Growth algorithm increases dramatically for a larger database, while the FP-Growth algorithm with constant pattern length has a considerably smaller execution time       0 5 10 15 20 25 30 123456810All pattern length time\(s   FP-Growth with pattern length constraint classic FP-Growth  Fig. 5. Pattern length constraint FP-Growth \(blue\ with variable patterns length versus the classic FP-Growth \(red   In Figure 5 we compared the FP-Growth algorithm with pattern length constraint with classic FP-Growth algorithm using different pattern lengths on the same database. This comparison shows again that placing pattern length constraint can dramatically decrease the execution time                       0 5 10 15 20 25 1.5 1.4 1.3 1.2 1.1 1.05 1 0.95 0,9 thre shol d ti m e s    FP-Growth with pattern length constraint   cl a s s i c FP-Growth  Fig. 6. FP-Growth with pattern length constraint versus the classic FPGrowth with different threshold values   Running the pattern-length constraint FP-Growth versus the classic FP-Growth algorithm on the same data file with different threshold values results in the same behaviour which is illustrated in figure 6   IV  CONCLUSION  Our variant of the FP-Growth algorithm focuses on applying a pattern-length constraint on the FP-Growth algorithm. This is, mining only frequent patterns with their length belonging in an interval selected by the user. The algorithm with this constraint applied can be used when only patterns with specific lengths are interesting for the user; for example, if a supermarket owner wants to know the effects of a special offer consisting of two products on the other related products, he might only be interested in patterns of length 3 or 4. The main advantage of running the algorithm with the length limitation instead of the classic FP-Growth algorithm is that the running time of the former is smaller, thus, the required information can be obtained in a shorter time   V  REFERENCES    A g r awal, R. Srikant. “Fast algorithms for mining association rules in large databases”. Proc. of 20th Int’l conf. on VLDB: 487-499, 1994 2 J H a n J   P e i  Y  Y i n M i n i ng F r e q ue nt P a t t e r n s  without Candidate Generation”. Proc. of ACM SIGMOD 2000   G y rödi, R. Gy rödi. “Mining Association Rules in Large Databases”. Proc. of Oradea EMES’02: 45 50 Oradea, Romania, 2002 4  Christian Borgelt: An implementation of the FPGrowth Algorithm http://www.borgelt.net/papers/fpgrowth.pdf    G y rödi, R. Gy rödi, S. Holban, M. Pater. “Mining Knowledge in Relational Databases”. Proc. of CONTI 2002, 5th International Conference on Technical Informatics: 1-6, Timisoara, Romania, 2002 6 H. Dun h a m   Data Mining. Introductory and Advanced Topics”. Prentice Hall, 2003, ISBN 0 13088892-3  y ad et al  F ro m Data Mi n i ng to Kn o w led g e  Discovery: An Overview“, Advances in Knowledge Discovery and Data Mining:1-34, AAAI Press/ MIT Press 1996, ISBN 0-262-56097-6 8 Ka m b er D ata Mining Concepts and Techniques”, Morgan Kaufmann Publishers, San Francisco, USA, 2001, ISBN 1558604898   


 V I S IMULATION INPUT S    In our simulation, we  suppos e  that  all replicas have  the same ch a racteristics, such as number of jobs to be run  file processing time, delays between each job submission  maximum queue size in each computing element, size and  number of requested files and speed of input/output storage  operation s  to see the effect of ne t work resources onl y We  tested and compared the two selection strategies with our  strategy, traditional and random models                                                     In traditional selection method, the best replica is  the one which has the lea s t number of hops \(routers\, the  highest bandwidth or the minimum round trip time to reach  the computing site. In random method replica manager  selects randomly one of the available replicas to serve user's  request. Figure 4, shows the flowchart of  ES T  ste p s    A  Get data grid job: in our simulation we assume that  there is a job  J with four fil e s  required for  analyzing   B  By contacting  RLS  all   Logical and Pysica l  names  of replicas are collected   C  Getting Single Trip Time STT  Being a node of  PRAGM A  Data Grid  7    w e co n s t r u ct  NH F  using  Ipre f  service of  PRAGM A  infrastructure. We  contact data grid nodes and get the  STT s  for  different periods of time and save  STT s  values in a  file called  NHF.xl s  as it is shown in  Table I   Therefore, our grid configuration file re f lects the  real network nodes and links of the  PRAGMA Gri d  7   D  Convert  STT s  v alues to logical values using a  mapping function   E  Applyin g  Association Rule s   To apply  an  A prior i  algorithm on logical values of   STT Tabl e   Table I I  we use  MLMine r  softwar e     The steps which  we followed are    1  Use a spreadsheet software to open   NH F x l s  fil e   2  From the  XLMine r  menu, select  Ad d In s  menu then  Affinit y  after that chose  Association rule s The  Association Rules dialog box appear s  as it is shown  in  Figur e  6  the n  sele c ts  the  input data format a s  Data in binary matrix format     3  Enter all input data in the  Association Rule s  box  such a s  minimum confidence and support a n d  make the selections  o f  the  binary data of  ST T  an d  click  Finish button. The result will be shown as in  Figure  7    6 0  21 3  6 5  20 2  30 3  20 5  30 5  20 2  30 0  21 2  31 3  21 2  31 0  20 2  30 7  T ABLE  I   T RANSACTIO N S  T ABL E   ST T S VALUE S  Y  N  Is  NH F  availab l e   Y  Figur e  5   F lowcha r t of ESM    Apply  A priori  algorith m  t o  get  the  A R  Compute  Improvement of  Rules  I\(Rule   Convert  NH F  t o  LH F  Get recen t  NH F  from Ipre f  Get the first Job  from job queu e  Get the physical  name s  of  replicas\222 sites  from  RL S  Y  N  Similar to  pre. job  s  replicas    I\(Rule  0  Use  a rule to get  associate d  site s  Get the next Job  from job queu e  
191 


                                                               0  1  0  1  0  1  0  1  0  1  0  1  0  1  0  1  1  1  0  0  0  1  0  1  1  1  0  0  0  1  0  1  0  1  1  1  0  1  0  1  0  1  1  1  0  1  0  1  0  1  1  1  0  1  0  1  0  1  1  1  0  1  0  1  0  1  1  1  0  1  0  1  0  1  1  1  1  1  0  1  0  1  1  1  1  1  0  1  0  1  1  1  1  1  0  1  0  1  1  1  1  1  0  1  0  1  1  1  1  1  0  1  0  1  1  1  1  1  0  1  0  1  1  1  1  1  0  1  Figure  7 XLMiner  menue of  Association Rules    Improv   Figure  7   Apriori  Associa t ion Rules    T ABLE  II    L OGICAL VALUE S   S TANDARD  F OR M  Figure  6   Association Rules   window  in XLMiner softwar e  
192 


 F  To check the validity of association rules  E quatio n  1  is use d  as  it is done i n  th e  last column of  Figur e  7   G  Select one  of th e  rules which have Improvement  value more than   1     H  In case if there is another job asking to get the files  and the s e files are available in the same sites then  choose another rule to serve the new request  Otherwise  apply  Aprior i  algorithm for recent STTs  of  new replicas sites    VI I   I NTERPRETING THE  R ESULT S    This section means to explain how the association  rul e s work better than the traditional and random methods  As it is shown in  Figure 7 after applying  Aprior i  algorithm  we get  602  different rules which can be used to select the  best combination of replica sites   Let us explain Figure 7  in details    Rule #1: if Site\(s S 4  S 7  are selected then this implies  that site\(s S 3  can also be selected at the same time. This  rule has 100% confidence    In other words, it means if site  S 4   and  S 7  are selected to  work together to transfer the requested files, t h en this  implies site\(s  S 3  can also be selected to share the work at  the same time. This rule has confidence  100  This  particular rule has  confidence  of  100  meaning that  S 4  S 7   and  S 3  can be selected as a best set of replicas by  Replica  Manage r  to ge t  requested files. To compute the correlation  of this rule and see how far it is better than choosing the site  randomly, we use an Improvement equation     indicates that it has support of  26  transactions, meaning that in transaction  Single Trip  Time  Table  there are  2 6  concurrent uncongested trips of  S 4  S 7   i.e. these sites have similar network conditions in particular  time      indicates the total number of transactions  involving uncongested trips of  S 3   in  Rule 1  is equal to  174    This is a piece of a side information; it is not involved  in calculating the confidence or support for the rule itself       is the number of transactions where   S 4   S 7 as well as   S 3 has uncongested trips. In  Rule 1  it is equal  to  2 6       or   indicates how much  more likely we are to encounter  S 4  and  S 6  transaction if we  consider just those transactions where  S 3  S 5 and  S 8  have  uncongested trips. As compared to the entire population of  the transactions, it's t h e  confidenc e  divided by  support \(c   where the latter is expressed as a percentage   For  Rule 1 the  confidenc e is  100   support \(c  in  percentage   174/194\*100 = 89.6 9 So, th e    Lift ratio = 100/89.69.1 = 1.1   As it is clearly shown in  Figure 7  some r u les with  an improvement value less than one means this is an  unreliable rule. Whereas the rule with a value more than one  means this rule is better than random replica selection with  number of time equal to improvement value as it is shown in  Figure 8                   When improvement value is more than 1 it is better to use  EST to select replica sites, because it selects the sites able to  work simultaneously    I n  Figure  9  we sho w  the  comparison between EST and  traditional model using highest bandwidth a s  a criterion to  select the best replica. As we can observe our technique has  a better performance most of the times because it selects the  sites which have the stable links. In traditional method the  site which has the highest bandwidth does not always me a n  to be the best because sometimes this highest bandwidth  link can be congeste d   Let us declare more by the following  scenario  o f  Figure 1 0 suppose   S 0   be the computing site  and let   S 1  S 3   S 1 4   be replica sites  Red stars referring to  congested router s   Using traditional selection method the  file will be got from S14 since it has less number of Hops  routers\ and highest and also has highest bandwidth link         Figure 8. Improvement ratio for different rule s  Figure 9. Traditional selection strategy and ES T    
193 


               Using  ES T the replica   S 3    is selected as a best replica  because the link b etween  C S  and  R S  is uncongested     VII I   C ONCLUSIO N  In this paper we presented a dynamic replica  selection strategy that aims to adapt at ru n time its criteria to  flexible QoS binding contracts specified by the service  provider and/or the client. The adapta b ility feature  addressed by our replica selection strategy is inferred from  the observation that the basic metrics, which influence the  QoS that the user perceives when accessing a replica  depend directly on the application being replicated and on  the cli e nts\222 preferences. To reach this objective that, we  used   the concept of association rules of data mining  approach to the most stable links sites in order to reduce the  searching space the response time and network resources  consumed    A CKNOWLEDGEMENT S  Au t hors wish to express their sincere thanks to  Prof. Arun Agarwal, from GridLabs Department of  Computer and Information Sciences, University of  Hyderabad, India for providing all the infrastructural and  computational support required to carry out this work  His  academic suggestions to improve the quality of the work are  also highly appreciated and acknowledged   R EFERENCE S     M  Rashedur Rahma n   Ken Barke r   Reda Alhaj j    Replica  selection in grid environment:a dat a mining approac h    Distributed systems and grid computing \(DSGC\,pp: 695  226  700  2005    J. Gwertzman and M. Seltzer    The case for geographical  push  cashing  In Proceeding of the 5th Workshop on Hot ZTopic in  Operating Systems, 1995     R. Kavitha, I. Foster   Design and evaluation of replication  strategies for a high performance data gri d  in, Proceedings of  Computing and High Energy and, Nuclear P h ysics, 2001   S. Vazhkudai, J. Schopf, I. Foster   Predicting the performance of  wid e area data transfer s  in: 16th International PDPS, 2002   S. Vazhkudai, J. Schopf   Using regression techniques to predict  large data transfer s  in: Computing: Infrastru c ture and  Applications, The International Journal of High Performance  Computing Applications, IJHPCA , August, 2003   A. Abbas, Grid Computing    A Practical Guide to Technology  and  A PPLICATION S    2006   http://goc.pragm a grid.net/wiki/index.php/UoHy d   S. Vazhkudai, S Tuecke, I. Foster   Replica selection in the  globus data gri d  in: First IEEE/ACM International Conference  on Cluster Computing and the Grid, CCGrid 2001   J. Guyton and M. Schwartz   L o cating nearby copies of replicated  internet server s    In Proceeding of ACM SIGCOM M 222  95, 1995   A. Tirumala, J. Ferguson, Iperf 1.2   The TCP/UDP Bandwidth  Measurement Tool, 2002   R. Wolski, Dynamically forecasting network performance using  the Network Weat h er Service, Cluster Computing \(1998   Yunhong Gu, Robert L. Grossman   UDT: UD P based data  transfer for hig h speed wide area network s  Computer  Networks, Volume 51, Issue 7, 16 May  2007, Pages 1777 1799  Elsevier   R.M. Rahman, K. Barker, R. Alhajj   Predicting the performance  of GridFTP transfer s  in: Proceedings of IEEE Symposium of  Parallel and Distributed Systems, 2004, New Mexico, USA, p  238a   J. F. Kurose, K.W. Ross   Compute r  Networking A To p Down  Approach Featuring the Interne t 3rd edition   S. Venugopal, . R. Buyya,"The Gridbus Toolkit for Service  Oriented Grid and Utility Computing: An Overview and Status  Report"2004   R   Agrawal  T  Imielinski  A.Swami    Mining associatio n  rules  between sets of items in large database s  In: Proc. ACM  SIGMOD Intl. Conf. Management Data, 199 3  R  M Rahman, K Barker and R Alhajj   Replica selection  strategies in data gri d    Jou r nal of Parallel and Distributed  Computin g   Volume 68, Issue 1 2 Pages 156 1 1574, December  2008   A. Jaradat, R. Salleh and A. Abid   Imitating K Means to  Enhance Data Selectio n  Journal of Applied Sciences 9 \(19  356 9 3574, 2009, ISSN 181 2 5654, Asian Ne t work for Scientific  Informatio n 2009   S. Venugopal, . R. Buyya, K. Ramamohanarao, "A taxonomy of  Data Grids for distributed data sharing, management, and  processing". ACM Comput. Surv. 38, 1 \(Jun. 2006  AC M   New  York, NY, US A  http://www.resample.com/xlminer/help/Index.ht m  A   K Pujar i    Data mining technique s    Hyderabad : Universities  Press, 2002   G. Williams, M. Hegland and S. Roberts   A Data Mining  Tutoria l  IASTED International Conference on Parallel and  Distributed Computing and Networks P DCN\22298\ 14 December  199 8   T  Ceryen, and M. Kevin, 2005   Performance characterization of  decentralized algorithms for replica selection in dstributed object  system s  Proceedngs of 5th International Workshop on Software  and Performance, July 11  14, Palm a de Mallorca, Spain, pp  25 7 262    F  Corina, and M. Mesaac, 2003  A scalable replica selection  strategy based on flexible contract s  Proceedings of the 3rd  IEEE Workshop on Internet Applications, June 2 3 24, IEEE  Computer Society Washington, DC, USA p p: 9 5 99   R. M. almuttari, R. Wankar, A. Negi, C.R. Rao   Intelligent  Replica Selection Strategy for Data Gri d    In proceeding of the  1 0 t h  International conference on Parallel an d  Distributed  Proceedin g  Techniques and Applications  IEEE Computer  Society W a shington, DC  WorldComp2010, GCA2010   LasVega s   USA  Volume3  pp: 9 5 100  July 1 2 1 5 201 0   Cisco Distributed Director  http://www.cisco.com/warp/public/cc/pd/cxsr/dd/index.shtm l  M   Sayal, Y. Breitbart, P. Scheuermann, R  Vingralek   Selection  algorithms for replicated web server s  In Proceeding of the  Workshop on Internet Server Performance,1998   E. Zegura, M. Ammar, Z. Fei, and S. Bhattacharjee   Applicatio n layer anycasting: a se r ver selection architecture and  use in a replicated web servic e  IEEE/ACM Transactions on  Networking, vol. 8, no. 4, pp. 45 5 226 466, Aug. 2000     Figur e  10   Data Grid and their associated network geometr y   
194 


Application of Chaotic Particle Swarm Optimization Algorithm in Chinese Documents Classification 763 Dekun Tan Qualitative Simulation Based on Ranked Hyperreals 767 Shusaku Tsumoto Association Action Rules and Action Paths Triggered by Meta-actions 772 Angelina A. Tzacheva and Zbigniew W. Ras Research and Prediction on Nonlinear Network Flow of Mobile Short Message Based on Neural Network 777 Nianhong Wan, Jiyi Wang, and Xuerong Wang Pattern Matching with Flexible Wildcards and Recurring Characters 782 Haiping Wang, Fei Xie, Xuegang Hu, Peipei Li, and Xindong Wu Supplier Selection Based on Rough Sets and Analytic Hierarchy Process 787 Lei Wang, Jun Ye, and Tianrui Li The Covering Upper Approximation by Subcovering 791 Shiping Wang, William Zhu, and Peiyong Zhu Stochastic Synchronization of Non-identical Genetic Networks with Time Delay 794 Zhengxia Wang and Guodong Liu An Extensible Workflow Modeling Model Based on Ontology 798 Zhenwu Wang Interval Type-2 Fuzzy PI Controllers: Why They are More Robust 802 Dongrui Wu and Woei Wan Tan Improved K-Modes Clustering Method Based on Chi-square Statistics 808 Runxiu Wu Decision Rule Acquisition Algorithm Based on Association-Characteristic Information Granular Computing 812 JianFeng Xu, Lan Liu, GuangZuo Zheng, and Yao Zhang Constructing a Fast Algorithm for Multi-label Classification with Support Vector Data Description 817 Jianhua Xu Knowledge Operations in Neighborhood System 822 Xibei Yang and Tsau Young Lin An Evaluation Method Based on Combinatorial Judgement Matrix 826 Jun Ye and Lei Wang Generating Algorithm of Approximate Decision Rules and its Applications 830 Wang Yun and Wu-Zhi Qiang Parameter Selection of Support Vector Regression Based on Particle Swarm Optimization 834 Hu Zhang, Min Wang, and Xin-han Huang T-type Pseudo-BCI Algebras and T-type Pseudo-BCI Filters 839 Xiaohong Zhang, Yinfeng Lu, and Xiaoyan Mao A Vehicle License Plate Recognition Method Based on Neural Network 845 Xing-Wang Zhang, Xian-gui Liu, and Jia Zhao Author Index 849 
xiii 


   C4.2 Open GL has excellent documentation that could help the developer learn the platform with ease C4.3 Developer has very little ex perience in working with Open GL platform  For our case study, alternative B i.e. Adobe Director was the most favorable alternative amongst all the three. It catered to the reusability criteria quite well and aimed at meeting most of the desired operational requirements for the system   6. CONCLUSION & FUTURE WORK  The main contribution of this paper is to develop an approach for evaluating performance scores in MultiCriteria decision making using an intelligent computational argumentation network. The evaluation process requires us to identify performance scores in multi criteria decision making which are not obtained objectively and quantify the same by providing a strong rationale. In this way, deeper analysis can be achieved in reducing the uncertainty problem involved in Multi Criteria decision paradigm. As a part of our future work we plan on conducting a large scale empirical analysis of the argumentation system to validate its effectiveness   REFERENCES  1  L  P Am g o u d  U sin g  A r g u men ts f o r mak i n g an d  ex p lain in g  decisions Artificial Intelligence 173 413-436, \(2009 2 A  Boch m a n   C ollectiv e A r g u men tatio n    Proceedings of the Workshop on Non-Monotonic Reasoning 2002 3 G  R Bu y u k o zk an  Ev alu a tio n o f sof tware d e v e lo p m en t  projects using a fuzzy multi-criteria decision approach Mathematics and Computers in Simualtion 77 464-475, \(2008 4 M T  Chen   F u zzy MCD M A p p r o ach t o Selec t Serv ice  Provider The IEEE International Conference on Fuzzy 2003 5 J. Con k li n  an d  M. Beg e m a n   gIBIS: A Hypertext Tool for Exploratory Policy Discussion Transactions on Office Information Systems 6\(4\: 303  331, \(1988 6 B P  Duarte D e v elo p in g a p r o jec ts ev alu a tio n sy ste m based on multiple attribute value theroy Computer Operations Research 33 1488-1504, \(2006 7 E G  Fo rm an  T h e  A n a l y t ic Hier a rch y P r o cess A n  Exposition OR CHRONICLE 1999 8 M. L ease  an d J L  L i v e l y  Using an Issue Based Hypertext System to Capture Software LifeCycle Process Hypermedia  2\(1\, pp. 34  45, \(1990 9  P e id e L i u   E valu a tio n Mo d e l o f Custo m e r Satis f a c tio n o f  B2CE Commerce Based on Combin ation of Linguistic Variables and Fuzzy Triangular Numbers Eight ACIS International Conference on Software Engin eering, Artificial Intelligence Networking and Parallel Distributed Computing, \(pp 450-454 2007  10  X  F L i u   M an ag e m en t o f an In tellig e n t A r g u m e n tatio n  Network for a Web-Based Collaborative Engineering Design Environment Proceedings of the 2007 IEEE International Symposium on Collaborative Technologies and Systems,\(CTS 2007\, Orlando, Florida May 21-25, 2007 11 X. F L i u   A n In ternet Ba se d In tellig e n t A r g u m e n tatio n  System for Collaborative Engineering Design Proceedings of the 2006 IEEE International Symposium on Collaborative Technologies and Systems pp. 318-325\. Las Vegas, Nevada 2006 12 T  M A sub jec tiv e assess m e n t o f altern ativ e m ission  architectures for the human exploration of Mars at NASA using multicriteria decision making Computer and Operations Research 1147-1164, \(June 2004 13 A  N Mo n ireh  F u zzy De cisio n Ma k i n g b a se d o n  Relationship Analysis between Criteria Annual Meeting of the North American Fuzzy Information Processing Society 2005 14 N  P a p a d ias HERMES Su p p o rti n g A r g u m e n tative  Discourse in Multi Agent Decision Making Proceedings of the 15th National Conference on Artifical Intelligence \(AAAI-98  pp. 827-832\dison, WI: AAAI/MIT Press,  \(1998a 15  E. B T riantaph y llo u   T h e Im p act o f  Ag g r e g atin g Ben e f i t  and Cost Criteria in Four MCDA Methods IEEE Transactions on Engineering Management, Vol 52, No 2 May 2005 16 S  H T s a u r T h e Ev alu a tio n o f airlin e se rv ice q u a lity b y  fuzzy MCDM Tourism Management 107-115, \(2002 1 T  D W a n g  Develo p in g a f u zz y  T O P S IS app r o ach  b a sed  on subjective weights and objective weights Expert Systems with Applications 8980-8985, \(2009 18 L  A  Zadeh  F u z z y Sets   Information and Control 8  338-353, \(1965  152 


                        





