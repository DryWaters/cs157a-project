Data Mining for Intelligent Web Caching Francesco Bonchi Fosca Giannotti Giuseppe Manco Chiara Renso CNUCE-CNR  Institute of Italian National Research Council Via Aljieri I 56010 Ghezzano PI Italy E-mail jbonchi,jgiannotti g.manco c.renso} @cnuce.cnx it Mirco Nanni Dino Pedreschi Salvatore Ruggieri Department of Computer Science, University of Pisa Corso Italia 40 56125 Pisa Italy E-mail  nnanni,pedre ruggieri di.unipi.it Abstract The paper presents a 
vertical application of data ware housing and data mining technology intelligent web caching We introduce several ways to construct intelligent web caching algorithms that employ predictive models of web requests; the general idea is to extend the LRU pol icy of web and proxy servers by making it sensible to web access models extracted from web log data using data min ing techniques Two approaches have been studied in par ticulal one based on association rules and another based on decision trees The experimental results of 
the new al gorithms show substantial improvement over existing LRU based caching techniques, in terms of hit rate i.e., the frac tion of web documents directly retrieved in the cache We designed and developed a prototypical system which sup ports data warehousing of web log data extraction of data mining models and simulation of the web caching algo rithms around an architecture that integrates the various phases in the knowledge discovery process The system sup ports a systematic evaluation and benchmarking of the pro posed algorithms with respect 
to existing caching strategies 1 Introduction If data mining is aimed at discovering regularities and patterns hidden in data the emerging area of web mining is aimed at discovering regularities and patterns in the struc ture and content of web resources as well as in the way web resources are accessed and used 3,4,5 In this paper we describe one particular datdweb mining application based on data warehouse technology the devel opment of an intelligent web caching architecture, capable 
of adapting its behavior on the basis of the access patterns of the clientshsers Such usage patterns or models, are ex tracted from the historical access data recorded in log files by means of data mining techniques More precisely the idea is to extend the LRU least re cently used cache replacement policy adopted by web and proxy servers by making it sensible to web access models extracted from web log data To this end we introduce sev eral ways to construct intelligent web caching algorithms 
that employ predictive models of web requests The goal of these algorithms is to maximize the so-called hit rate namely the percentage of requested web entities that are re trieved directly in cache without requesting them back to the origin server If compared with the many alternatives and variations to LRU caching presented in the literature and briefly dis cussed later our approach has a unique feature its adap tiveness to changes in 
the usage patterns which are rather natural in the web This is due to the fact that the proposed caching strategies are parametric w.r.t the data mining mod els which can be recomputed periodically in order to keep track of the recent past As a final step in the knowledge discovery process we designed a reference web caching model as a means to eval uate the models extracted by data mining The architecture which emulates a cache 
and is parametric to the replace ment strategy supports the evaluation and comparison of the various replacement policies, according to the hit rate The overall process from log data acquisition to model extraction up to evaluation by the web cache architecture is formalized and implemented within a database manage ments system Microsoft\222s SQL Server 2000 using the DTS technology  Data Transformation Services 599 0-7695-1062-0/01 10.00 0 2001 IEEE 


2 Towards Intelligent Web caching 2.1 Web caching It is recognized that deploying caching in the world wide web can improve the net traffic in several ways In partic ular it can reduce the bandwidth consumption the network latency perceived by the client and the server load More over it can improve the network reliability perceived by the client, since in case of temporary unavailability of the net work connection or of the server services, the local caches temporarily replace the server Web caching however poses several issues which risk to reduce its apply-ability and effectiveness such as consis tency dynamic objects and several security and legal issues Evaluation measures and techniques In order to eval uate the quality of a web caching system, several measures can be applied depending on which resource we are focus ing on  usually the bottleneck of the system under con sideration The most commonly used criteria are basically the following three Hit rate i.e the ratio of requests ful filled by the cache and then not handled by the web servers Weighted hit rate i.e the ratio of bytes served to the client by the cache and Latency i.e the time that an end-user waits for retrieving a resource Following a common approach in this work we choose to evaluate our novel caching strategies by simulating them over a set of collected logs from a server Results of exper imentations will be presented in terms of hit rates Traditional caching strategies Several caching algo rithms have been developed so far characterized by the re placement strategy they implement i.e the criteria they fol low in selecting the objects to evict from the cache when it is full Among them we present the following three which will be referred in the rest of the paper the LRU strategy which orders objects by last access time and removes first those with the older value the SLRU strategy which sorts objects by the product AT  Size AT being the number of requests received since the last access to the object and removes first the entities with higher values eventually an other strategy which we call ORCL ORaCLe strategy a modification of SLRU such that at each time the weight of an entity is A'T  Size where A'T is the number of requests that will be received until the next access to the ob ject of course, the ORCL strategy can be simulated only on historical data 2.2 A reference model for intelligent caching Traditional caching strategies can be modeled by consid ering entities in cache as belonging to a priority queue In this way the cache replacement strategy coincides with the priority queue weight assignment policy We call a policy that exploit knowledge extracted from past requests a DataMiningWeightModel Of course when the weight assignment policy is a fixed policy, then it boils down to traditional caching strategies i.e our def inition is conservative The generic model for intelligent caching strategies is reported in Figure 1 PriorityQueue Cache DataMiningWeightModel DMM CacheEntry t t-fresh long hits  0 1 DMM.build0 2 loopforever  3 do  4 get-request t  5 if Cache.contains.freshcopy\(t  6 hits  1  7 whits  t bytes-sent-to-client  8 Cache.update\(t, DMM 9  else  10 Cache.delete\(t 11 Retrieve-freshcopy\(t t-fresh  12 Cache.push\(t-fresh DMM 13 while Cache.size  Cache.maxsize 14 Cache.pop0 16   while condition  17 DMM.updatemodel0 18  15 1 Figure 1 Intelligent caching reference model First of all line l an initial data mining model DMM is built on past data Then line 2 the following cycle is repeated forever For a requested entity t if the cache contains the en tity and it is fresh \(line 5 then the entity is returned to the client and this case is considered as a hit line 6 Also the bytes sent back to the client are counted for the weighted hit rate measure.The weight of the entity in cache and possi bly the weights of other elements in cache is updated \(line 8 according to the weight assignment policy expressed by DMM On the contrary if the entity is not in cache or it is stale line 9 we have a miss The entity is deleted from the cache \(line 10 and a fresh version is retrieved and pushed into the cache lines 11~12 The push method consists of assigning a weight to the entity and possibly updating the weights of other elements in cache If the inclusion makes the cache exceeding the maximum size then entities are popped out from the cache accordingly to their weights lines 13-14 Finally the data mining model DMM may be periodically updated when some condition becomes false line 16 e.g at fixed time intervals or when the cache performance de creases We model such an update by the method update model line 17 600 


3 A data mart of web log data The availability of a data warehouse may serve multiple purposes by providing a consistent and reliable repository of data over long periods of time In addition a data mart contains a subset of the data warehouse that is of value to a specific group of users e.g for data mining analysis We have developed a data mart for web logs to support intel ligent caching strategies The data mart is populated start ing from a web log data warehouse or more simply from raw web/proxy server log files that we assume containing some very basic fields The data mart population consists of a number of preprocessing and coding steps that perform data selection cleaning and transformation Also, the data mart population computes additional derived fields for each transaction that are well-suited for input to data mining al gorithms The data mart has been implemented as a relational database using Microsoft SQL Server 2000 Beta 2 7 In terestingly also the processes of populating the data mart is formalized and automated within the SQL Server 2000 framework The processes of data preparation and data mart pop ulation have been designed using SQL Server 2000 Data Transformation Services \(DTS a tool that allows to specify import  export  transformations processes of data through text files databases or applications Such processes con cern several tasks, the main ones being URL normaliza tion fields extraction hash coding \(for dealing with strings in a easier and more efficient way\approximating the size of entities on the origin server, computing the time distance among requests and consequently computing the user ses sions \(for this last task the so called reference length ap  proach 21 was followed 4 Deploying the reference model with data mart data In this section two instantiations of the general intelligent caching model are presented, the first one based on associ ation rules and the second one based on decision trees. For each of them a brief introduction to the general mining task is given, followed by the description of its application to the caching strategy, a summary of the results of experimental simulations, and eventually an overview of the data mining modeling process 4.1 Association rules In general given a database of transactions each com posed of a set of items we define an association rule I as an expression of the form A  B S C where A and B are sets of items S is the support of the rules defined as the rate of transactions containing all items in A and all items in B C is the conjidence of the rule, defined as the ratio of S with the rate of transactions containing A In proba bilistic terms S approximates the probability that all items in the rule appear together in a transaction, while C approx  imates the \(conditional probability that items in B appear given that items in A appear Usually minimum thresholds are specified for for support and confidence in order to con sider only significant rules In the application domain under consideration, items cor respond to web resources while transactions correspond to user sessions Thereby a rule such as res1 j res2 infor mally means that if res1 appears in a user session res2 too is expected to appear in the same session, though possibly in reverse order and not consecutively In our approach we keep the LRU criteria for assigning priorities, while the overall strategy is extended by modify ing the priorities of the entities already in cache as reaction to the new incoming requests First of all a set of association rules is extracted from a training dataset, obtained from past log data Thereby if at some time an URL A and A 3 B is in the set of rules previously extracted then we predict that the URL B too will be requested soon This suggests that if B is already in cache its eviction should be delayed we accomplish that by increasing assigning to B the priority it would have if it was requested immediately after A so that it moves to the top of the queue The workload named Nat Port is split into a two days training set and a two days validation set: the first two days of log data have been used for extracting association rules over user sessions with minimum support and minimum confidence thresholds respectively equal to 0.3 125 and 20 The resulting extended LRU strategy has been sim ulated over the last two days log data Figure 2\(a\shows some of the results obtained by sim ulating an LRU cache and an association-bused extended LRU Performances are plotted for different sizes of the simulated cache, from 0.2 Mbytes to 102.4 Mbytes corre sponding respectively to the 0.0051 and 2.6 of the web server size with exponential growth The two curves have a similar shape, and as expected converge as the cache size grows The graph reveals a sig nificant hits improvement of our approach over the standard LRU for all cache sizes ranging from an absolute gain of 7.75 for the smallest cache\to 1.20 for the largest cache Here and in the rest of the paper absolute gain and absolute improve ment stand for the difference between two hits rates so that the absolute gain of a 15 hits rate over a 5 one is a lo 60 1 


0.9 08 07 0.6 2 05 0.4 0.3 0.2 0.1 _IC LRU   222 ORCL S2  02 04 08 16 32 64 128 256 512 1024 Cache Size \(Mb b Figure 2 NatPort Hit rates w.r.t Cache Size for the a association and the \(b decision tree-based strategies 4.2 Decision trees Decision trees induction concerns the construction of a model  a classifier  that describes a discrete attribute called the class of an entity in terms of other attributes of an object, called the observed attributes or features The model is constructed for a set of objects \(called training set whose class values are known, and can be used to predict the un known class value of objects in another set The central idea of this section is to approximate the ORCL strategy presented in Section 2.1 Since such strat egy needs to known the next access distance  i.e the dis tance between each request and the next one for the same URL a classifier is trained that for every URL requested is able to predict such distance Such value is therefore chosen as the class variable and since it is a continuous attribute we will actually use a discretization of its values into a set of a few discrete values The observed attributes that can be used to build a classifier are those available by a cache at transaction time Such a tree is a data mining model that can be used in an intelligent caching system in order to assign a weight to an entity Among the most popular classification algorithms see 6 for a survey we use decision trees as the classification model for our analysis In particular in our experiments we use EC4.5 9 an efficient implementation of the well known C4.5 8 decision tree algorithm The general strategy described in Section 2.2 is to be in stantiated by making choices about observed attributes dis cretization of the next access distance and weight assign ments A first choice is concerned with the selection of a set of observed attributes i.e of the attributes used to construct the decision tree among those ones available at the time of URL request The strategy described in this paper, called S2 restricts to consider the following basic fields the size of the requested entities the directory depth of the requested URL and the hour part of the date as continuous attributes the file extension and the main directory of the requested URL as discrete attributes Moreover a discretization for the next access distance has to be chosen deciding the num ber of classes and how to discretize values into intervals We experimented discretization into 4 classes Following the intuition of approximating the ORCL strategy we adopt a weight assignment function that cor rects the LRU weight by adding a displacement that is re lated to the priority of the request in an ORCL strategy i.e a displacement of the form a\(nezt-access_time size for some inversely proportional functions a and Bo As for the association based LRU extension described in the previuos section the decision tree classifier is built over a two days training set extracted from the NatPort workload and the performance of the S2 strategy is com puted by simulation over the two days validation set The performance of strategies S2 LRU and ORCL is com pared in terms of hit rate in Figure 2\(b The hit rate ex hibits an impressive improvement of S2 w.r.t LRU con sistently around 25 absolute improvement The simu lation of ORCL achieved by S2 is rather impressive the gain between LRU and S2 is consistently 50 through 75 of the gain between LRU and off-line, theoretical strategy ORCL The achieved hit rate outperforms also other tradi tional strategies not reported here for the lack of space 602 


5 Conclusions We have presented two approaches to enhance LRU based web caching with data mining models built on histor ical data mainly aimed at increasing the hit rate Also the design of a suitable data mart has been presented, together the main problems that such design must solve The ap proaches differ for the kind of data mining model adopted association rules and decision trees The performance figures of the developed methods, com pared with LRU from one side and the theoretical off-line strategy ORCL from the other side, indicate substantial in crease in the hit rate the decision-tree strategy S2 out performs all best fixed strategies LFU LRUMIN SLRU moreover in principle S2 can be combined with the orthog onal association-rule strategy, in such a way that further en hancements may be achieved Although further extensive benchmarking is required there is a strong indication that data mining-based caching yields systematically enhanced hit and weighted hit rates due its adaptiveness to recent history we believe that adaptiveness is indeed the reason that makes our approach preferable to any,fixed caching strategy Directions for further research include the completion of the benchmarking phase with log data from various web and proxy servers as well as synthesized data with various artificial distributions the combination of the association rule and the decision-tree approach into one to investigate other possible metrics to optimize and other possible strate gies to start with considering approaches based on cluster ing References R Agrawal and R Srikant Fast algorithms for mining association rules in large databases In Proceedings 01 the Twentieth International Conference on Very Large Databases pages 487-499 Santiago, Chile, 1994 R Cooley B Mobasher, and J Srivastava Grouping web page references into transactions for mining world wide web browsing patterns In Proc of the 1997IEEE Knowledge and Data Engineering Exchange Workshop KDEX-97 November 1997 0 Etzioni The world-wide web quagmire or gold mine Communications of the ACM 39:65-68 1996 J Han and M Kamber Data Mining Concepts and Techniques Morgan Kaufmann, San Mateo CA 2000 R Kosala and H Blockeel Web mining research A survey ACM SIGKDD Explorations 2 1 1-15,2000 6 T.S Lim W.Y Loh and Y.S Shih A compari son of prediction accuracy, complexity and training time of thirthy-tree old and new classification algo rithms Machine Learning Journal 1999 To appear http://www.Recursive-Partitioning.com/datasets html 7 Microsoft Corporation Microsoft SQL Server 2000 http://www.microsoft.com/sql 8 J R Quinlan C4.5: Programs for Machine Learning Morgan Kaufmann, San Mateo CA 1993 9 S Ruggieri Efficient C4.5 IEEE Trans on Knowledge and Data Engineering 2001 To appear http://www kdd.di.unipi.it 603 


Fear 180  7 c 120 m 60 a U    0 eo z 60 0 200 400 6M 800 1000 Nominal 101 ms Anger 180 0 MO 4Gu 600 Boo Nominal 101 ms Happiness 180   120 0 V  m  d60 0 Eo 2  a 40 0 400 6w lo00 Nominal 101 ms Solemnity 0 200 400 600 800 loo0 Nominal 101 ms Sadness 180 a Eo s 60 Nominal 101 ms 1 00 Tenderness 180  4 120 0 e   IM P so 3 a m 60 0 400 600 Boo lo00 Nominal 101 ms Figure 6 Relative deviations of IO1 and for all six performances of each piece Negative values imply a tempo faster than the non expressive versions, while positive deviations indicate lengthening of tone duration and thus a slower tempo. The bars show the standard deviations IV-322 


main\(atgc. argv  cvm_startup\(argc, argv spacep  cvm-alloc\(size cvm-create-procs\(apriori apriorio cvm-finish 1 number of 1 nodes 2 4 VISIONA 1 2 type CVM apriori  r Apriori algorithm 221I k=l while \(candidate item sets of k-th pass are not emply  r step of k-th pass  while \(\(read data  emply  while item sets of k items are selectable from the data  search the itemset in the hash tree cvm-lock\(&mt[fieldp  4001 222fieldp cvm_unlock\(\(Lmt[fieldp  4001 1 1 cvm-barrier\(0 make the large itemsets of k by comparing the support values of the candidate itemsets with the minimum support value make the candidate item-sets of k+l out of the large itemsets of k k I I pass-1 pass-2 pass-3 pass-4 total 1 4 1 rscc sec ec e 15 21 4 1 41 39 44 9 1 93 1 4 2 1 8 1 2 1 1 5 step-I step-9 step-3 step-4 step-5 step4 step-7 step-8 step-9 step-IC Figure 5 Pseudo code for association rule mining executed in CVM consistency mechanism on the DSM for scalable data mining in both parallel and distributed computing en vironments l and 2 show the basic algorithm of as sociation rule mining which is popular among the data mining research community 9 shows a modification of l and 2 to decrease the number of the candidate item-sets to increase the performance lo shows the parallel algorithm of l and a for cluster-type dis tributed systems with message passing programming model 51 shows bayesian network generation which is a new technique of data mining New techniques for data mining and speedup are important research areas In the past new techniques or speedup is performed for each application indepen dently Our approach is different from the past re search We use DSM as a common tool for scalable data mining programs The objective is to develop scalable Table 6 Performance of association rule mining in CVM and VISIONA I I 4 1 21 11 1 5 data mining programs efficiently To decrease the over head of the DSM we proposed the LBC mechanism on the DSM. Also this paper described VISIONA a pro totype to implement the DSM with LBC To evaluate the effectiveness of the DSM with LBC we have implemented VISIONA both in PC clusters and UNIX computer clusters Programs of association rule mining and bayesian network generation has been also implemented in VISIONA According to t,he results of the evaluation of the DSM with LBC speedup by increasing the number of processors on the DSM with LBC is greater than or equal to that of SMP-type parallel computer In the future we will improve the VISIONA as a DSM system with multiple consistency protocol including the LBC mechanism The goal is to increase the adaptability to many different data mining programs References l R Agrawal T Imielinski A Swami 224Min ing Association Rules between Sets of Items in Large Databases,\224 Proceedings of ACM SIGMOD pp.207-216 May 1993 a R Agrawal R Srikant 224Fast Algorithms for Min ing Association Rules,\224 Proceedings of the 20th VLDB Conference pp.487-499 September 1994 3 C Amza A L Cox S Dwarkadas P Keleher H Lu R Rajamony W Yu W Zwaenepoel 224Tread Marks Shared Memory Computing on Networks of Workstations,\224 IEEE COMPUTER Vol 29 No 2 pp.18-28 February 1996 4 P Keleher 224The relative importance of concur rent writers and weak consistency models,\224 Pro ceedings of the 16th International Conference on Distributed Computing Systems pp 9 1-98 Nl ay 1996 5 D Heckerman 224Bayesian Networks for Knowl edge Discovery,\224 Advances in Knowledge Discov 149 


ery and Data Mining AAA1 Press/The MIT Press pp.273-305 1996 6 D Lenosla J Laudon T Joe D Nakahira L Stevens A Gupta J Hennessy 224The DASH Pro totype Implementation and Performance,\224 Pro ceedings of the 19th International Symposium on Computer Architecture pp.92-103 May 1992 7 F T Chong B Lim R Bianchini J Kubiatow icz 224Application Performance on the MIT Alewife Machine,\224 IEEE COMPUTER Vol 29 No 12 pp.57-64 December 1996 8 P Keleher A.L Cox S Dwarkadas W Zwaenepoel 224An Evaluation of Software-Based Release Consistent Protocols 224 Journal of Parallel and Distributed Computing Vol 29 pp.126-141 October 1995 9 J S Park M Chen P S Yu 224An Effective Hash Based 4lgorithni for Mining Association Rules,\224 Proceedings of ACM SIGMOD pp.175-186 June 1995 lo E Han, G Karypis V Kumar 224Scalable Parallel Data Mining for Association Rules,\224 Proceedings of ACM SIGMOD pp.277-288 May 1997 150 


Figure 8 Visual interface for Moridou system Search EngineTest Page 0 UI 0 5 5 Keyword plealet Figure 9 Prototype system in hcterogeneous environment 283 


6 Conclusions We presented MAFIA an algorithm for finding maximal frequent itemsets Our experimental results demonstrate that MAFIA consistently outperforms Depthproject by a factor of three to five on average The breakdown of the algorithmic components showed parent-equivalence pruning and dynamic reordering were quite beneficial in reducing the search space while relative compressiodprojection of the vertical bitmaps dramatically cuts the cost of counting supports of itemsets and increases the vertical scalability of MAFIA Acknowledgements We thank Ramesh Agarwal and Charu Aggarwal for discussing Depthproject and giving us advise on its implementation We also thank Jayant R Haritsa for his insightful comments on the MAFIA algorithm and Jiawei Han for providing us the executable of the FP-Tree algorithm This research was partly supported by an IBM Faculty Development Award and by a grant from Microsoft Research References I R Agarwal C Aggarwal and V V V Prasad A Tree Projection Algorithm for Generation of Frequent Itemsets Journal of Parallel and Distributed Computing special issue on high performance data mining to appear 2000 2 R Agrawal T Imielinski and R Srikant Mining association rules between sets of items in large databases SIGMOD May 1993  R Agrawal R Srikant Fast Algorithms for Mining Association Rules Proc of the 20th Int Conference on Very Large Databases Santiago Chile, Sept 1994  R Agrawal H Mannila R Srikant H Toivonen and A 1 Verkamo Fast Discovery of Association Rules Advances in Knowledge Discovery and Data Mining Chapter 12 AAAVMIT Press 1995 5 C C Aggarwal P S Yu Mining Large Itemsets for Association Rules Data Engineering Bulletin 21 1 23-31 1 998 6 C C Aggarwal P S Yu Online Generation of Association Rules. ICDE 1998: 402-41 1 7 R J Bayardo Efficiently mining long patterns from databases SICMOD 1998: 85-93 8 R J Bayardo and R Agrawal Mining the Most Interesting Rules SIGKDD 1999 145-154 9 S Brin R Motwani J D Ullman and S Tsur Dynamic itemset counting and implication rules for market basket data SIGMOD Record ACM Special Interest Group on Management of Data 26\(2\1997 IO B Dunkel and N Soparkar Data Organization and access for efficient data mining ICDE 1999 l 11 V Ganti J E Gehrke and R Ramakrishnan DEMON Mining and Monitoring Evolving Data. ICDE 2000: 439-448  121 D Gunopulos H Mannila and S Saluja Discovering All Most Specific Sentences by Randomized Algorithms ICDT 1997: 215-229 I31 J Han J Pei and Y Yin Mining Frequent Pattems without Candidate Generation SIGMOD Conference 2000 1  12 I41 M Holsheimer M L Kersten H Mannila and H.Toivonen A Perspective on Databases and Data Mining I51 W Lee and S J Stolfo Data mining approaches for intrusion detection Proceedings of the 7th USENIX Securiry Symposium 1998 I61 D I Lin and Z M Kedem Pincer search A new algorithm for discovering the maximum frequent sets Proc of the 6th Int Conference on Extending Database Technology EDBT Valencia Spain 1998 17 J.-L Lin M.H Dunham Mining Association Rules: Anti Skew Algorithms ICDE 1998 486-493 IS B Mobasher N Jain E H Han and J Srivastava Web mining Pattem discovery from world wide web transactions Technical Report TR-96050 Department of Computer Science University of Minnesota, Minneapolis, 1996 19 J S Park M.-S Chen P S Yu An Effective Hash Based Algorithm for Mining Association Rules SIGMOD Conference 20 N Pasquier Y Bastide R Taouil and L Lakhal Discovering frequent closed itemsets for association rules ICDT 99 398-416, Jerusalem Israel January 1999 21 J Pei J Han and R Mao CLOSET An efficient algorithm for mining frequent closed itemsets Proc of ACM SIGMOD DMKD Workshop Dallas TX May 2000 22 R Rastogi and K Shim Mining Optimized Association Rules with Categorical and Numeric Attributes ICDE 1998 Orlando, Florida, February 1998 23 L Rigoutsos and A Floratos Combinatorial pattem discovery in biological sequences The Teiresias algorithm Bioinfomatics 14 1 1998 55-67 24 R Rymon Search through Systematic Set Enumeration Proc Of Third Int'l Conf On Principles of Knowledge Representation and Reasoning 539 550 I992 25 A Savasere E Omiecinski and S Navathe An efficient algorithm for mining association rules in large databases 21st VLDB Conference 1995 26 P Shenoy J R Haritsa S Sudarshan G Bhalotia M Bawa and D Shah: Turbo-charging Vertical Mining of Large Databases SIGMOD Conference 2000: 22-33 27 R Srikant R Agrawal Mining Generalized Association Rules VLDB 1995 407-419 28 H Toivonen Sampling Large Databases for Association Rules VLDB 1996 134-145 29 K Wang Y He J Han Mining Frequent Itemsets Using Support Constraints VLDB 2000 43-52 30 G I Webb OPUS An efficient admissible algorithm for unordered search Journal of Artificial Intelligence Research 31 L Yip K K Loo B Kao D Cheung and C.K Cheng Lgen A Lattice-Based Candidate Set Generation Algorithm for I/O Efficient Association Rule Mining PAKDD 99 Beijing 1999 32 M J Zaki Scalable Algorithms for Association Mining IEEE Transactions on Knowledge and Data Engineering Vol 12 No 3 pp 372-390 May/June 2000 33 M. J. Zaki and C Hsiao CHARM An efficient algorithm for closed association rule mining RPI Technical Report 99-10 1999 KDD 1995: 150-155 1995 175-186 3~45-83 1996 452 


