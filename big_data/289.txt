A Pattern Decomposition \(PD\Algorithm for Finding All Frequent Patterns in Large Datasets Qinghua Zou Wesley Chu, David Johnson Henry Chiu Computer Science Department University of California  Los Angele Abstract ESficient algorithms to mine frequent patterns are crucial to many tasks in data mining Since the Apriori algorithm was proposed in 1994 there have been several methods proposed to improve its performance However most still adopt its candidate set generation-and-test approach We propose a pattern decomposition PO algorithm that can 
significantly reduce the size of the dataset on each pass making it more efficient to mine frequent patterns in a large dataset The proposed algorithm avoids the costly process of candidate set generation and saves time by reducing dataset Our empirical evaluation shows that the algorithm outperforms Apriori by one order of magnitude and is faster than FP-tree. Further PD is more scalable than both Apriori and FP-tree 1 Introduction A fundamental process in data mining is finding frequent patterns in a given dataset Finding frequent patterns facilitates essential tasks such 
as discovering association relationships between items correlation, and sequential patterns 7 A significant problem with mining frequent larger patterns is that as the length of the pattern increases, the number of potential patterns grows at a combinatorial rate Several different algorithms have been proposed to efficiently find all frequent patterns in a dataset Other algorithms output only maximal frequent sets thus minimizing the number of potential patterns 2 3 41 Max-Miner 2 uses a heuristic bottom-up search to identify frequent patterns as early as possible Pincer Search  uses a bottom-up search along with top-down pruning Even though performance improvements may 
be substantial, maximal frequent sets have limited use in association rule mining A complete set of rules cannot be extracted without support information of the subsets of those maximal frequent sets FP-tree-based mining 9 is a different approach in that it first builds up an optimized data representation \(FP-tree from the dataset. All mining tasks are then performed on the FP-tree rather than on the dataset In this paper we propose an innovative algorithm called Pattern Decomposition PD that generates all frequent sets The algorithm provides increased performance by reducing the dataset during each pass The dataset is reduced by splitting transactions and 
combining similar transactions together, thus decreasing counting time and improving performance In addition the algorithm does not need to generate candidate sets all subsets of any transaction in the reduced dataset are frequent thus should be counted Intuitively a transaction that contains infrequent itemsets can be decomposed to smaller itemsets if together they do not meet the minimum support threshold Frequently after splitting all the transactions in the dataset many itemsets are identical and can be combined thus reducing the size of the dataset 2 The Method The PD algorithm shrinks dataset each time when infrequent itemsets are discovered More specifically, it finds frequent sets 
by employing a bottom-up search For a given transaction dataset DI the first pass has two phrases 1 the algorithm counts for item occurrences to determine the frequent 1-itemsets Li and the infrequent 1 itemsets LI 2 we decompose DI to D2 such that D2 contains no items in Li Similarly in a subsequent pass say pass k frequent itemsets Lk and Lk are generated by counting for all k-itemsets in Dk Then Dk+l is generated by decomposing Dk 
using Lk such that Dk contains no itemsets in Lk Now let us illustrate the complete process for mining frequent patterns In Figure 1 we show how PD is used to find all frequent patterns in a dataset Suppose the original data set is Di and minimal support is 2 We first count the support of all items in DI to determine Li and LI In this case frequent 1-itemset Li={a,b,c,d,e and infrequent 1-itemset LI f,g,h,k Then we decompose each pattern in DI using 
LI to get D2 In the second pass we generate and count all 2-item sets contained in D2 to determine L2 and  L2 as shown in the figure Then we decompose each pattern in D2 to get D3 This continues until we determine Ds from D4 which is the empty set and we terminate The final result is the union of all frequent sets LI through L4 0-7695-1 119-8/01 17.00 0 2001 IEEE 673 


The example illustrates three ways to reduce the dataset abc 3 acd 1 de 3 abd 3 cd 2 ce 7 de 7 Figure 1 Pattern Cde 21 Decomposition Example Dc  In a when patterns after decomposition yield the same itemset we combine them by summing their occurrence Here abcg and abc reduce to abc Since both their occurrences are 1 the final pattern is abc:2 in D2 In p we remove patterns if their sizes are smaller than the required size of the next dataset Here patterns abc and abd with sizes of 3 cannot be in D4 and are deleted In 6 when a part of a given pattern has the same itemset with another pattern after decomposition we combine them by summing their occurrence. Here bcde is the itemset of pattern 4 and part of pattern 1's itemset after decomposition so the final pattern is bcde:2 in D4 One simple way to decompose the itemset s by an infrequent k-item set t as explained in 4 is to replace s by k itemsets, each obtained by removing a single item in t from s For example, for s  abcdefgh and t  aeJ we decompose s by removing a e f respectively to obtain bcdefgh abcdfgh abcdegh We call this method simple-split. When the infrequent sets are large simple split is not efficient Thus PD needs Quick-split to decompose a pattern 8 3 Performance Study We compare PD with Apriori and FP-tree since the former is widely cited and the latter claims the best performance in the literature The test data sets were generated in the same fashion as the IBM Quest project 111 We used hvo data sets T10.14.DlOOK and T25.110.DlOOK For the comparison of PD with FP-tree since PD was written in Java and FP-tree in C and we don't have time to implement PD in C their results are adjusted by a coefficient about 10 Our study shows that PD is about 30 times faster than Apriori with minimal support at 2 and about 10 times faster than Apriori at 0.25 The execution time for Apriori linearly increases with the number of transactions from 50K to 250K Better than that, the execution time for PD does not necessarily increase as the number of transactions increases Both FP-tree and PD have better performance than Apriori FP-tree takes substantially more time than PD does when minimum support in the range from 0.5 to 2 When minsup less than 0.5 the number of frequent patterns increased quickly and thus the execution times are comparable PD is about 9 times faster than FP tree with minimal support at 2 and the gap reduces to 2 times faster at 0.25 When the number of transactions ranged from 60k-80k both methods took almost constant time most likely due to overhead When we scaled up to 200K FP-tree required more than 1884M of virtual memory and could not run on our machine while PD finished the computation within 64M main memory For more details interested readers please refer to 8 4 Conclusion We propose a pattern decomposition \(PD algorithm to find frequent patterns The algorithm significantly shrinks the dataset in each pass It avoids the costly candidate set generation procedure and greatly saves counting time by using reduced datasets Our experiments show that the PD algorithm has an order of magnitude improvement over the Apriori algorithm on standard test data and is faster than FP-tree References l R Agrawal and R Srikant Fast algorithms for mining association rules In VLDB'94 pp 487-499 2 R J Bayardo Efficiently mining long patterns from databases In SIGMOD98 pp 85-93 3 Zaki, M J Parthasarathy S Ogihara M and Li W 1997 New Algorithms for Fast Discovery of Association Rules In Proc of the Third Int'l Conf on Knowledge Discovery in Databases and Data Mining, pp. 283-286 4 Lin D.-I and Kedem Z M 1998. Pincer-Search A New Algorithm for Discovering the Maximum Frequent Set In Proc of the Sixth European Conf on Extending DatabaseTechnolom 5 Park J S Chen M.-S and Yu P S 1996 An Effective Hash Based Algorithm for Mining Association Rules In Proc of the 1995 ACM-SIGMOD Conf on Management of Data pp 175-186 6 Brin S Motwani R Ullman J and Tsur S 1997 Dynamic Itemset Counting and Implication Rules for Market Basket Data In Proc of the 1997 ACM-SIGMOD Conf On Management of Data, 255-264 7 J Han J Pei and Y Yin Mining Frequent Patterns without Candidate Generation. Proc 2000 ACM-SIGMOD Int Conf on Management of Data, Dallas TX May 2000 8 Q Zou H Chiu W W Chu D Johnson Pattern Decomposition Algorithm for Data Mining Frequent Patterns Journal of Knowledge and Information Systems 2002 to appear 674 


table F f from the item set table S  This is a h uge space o v erhead and consequen tly  imp oses substan tial computational burden on the metho d F urthermore w e required that the item set table S b e admissible,another signican t restriction on the input transaction table These are just some of the diculties faced when a logical c haracterization of data mining is considered The pro ceduralit yin v olv ed acts as the ma jor b ottlenec k So the c hallenge is to admit an y arbitrary transaction table y et b e able to compute the asso ciation rules without explicit generation of candidate item sets from a rst-order kno wledge base and compute the relation R as in tro duced b efore using existing logical constructs and mac hineries 3 An Illustrativ e Example from P oin t of Sale T ransaction Kno wledge bases The concept of asso ciation rules in kno wledge bases can b e b est explained using a so called transaction kno wledge base W e presen t belo w an example of suc h a database and explain on in tuitiv e grounds the implications of its kno wledge con ten t with regard to asso ciation rules Consider the rst-order kno wledge base T sho wn in gure 1 that represen ts six transactions o v er the item set f a b c d e g  tr ans  t 1 a   tr ans  t 1 b   tr ans  t 1 c   tr ans  t 2 a   tr ans  t 3 a   tr ans  t 3 d   tr ans  t 4 a   tr ans  t 5 a   tr ans  t 5 b   tr ans  t 5 c   tr ans  t 6 b   tr ans  t 6 c   tr ans  t 6 e   Figure 1 T ransaction Database T  Alternativ ely  w e can think of T as the set of gr oup facts in gure 2 once w e aggregate the items on transaction n um bers F rom the gr oup facts it is easy to see that the frequency of the set f a b c g is 33 33 as it app ears in 2 6 th of the transactions Similarly  the frequency of f a g is 33 f a d g is 16 and of f b c e g is 16 A closer lo ok will sho w that the frequency of the set f a g m ust be an additional 33 and.16asitisasubsetoftheset f a b c g and f a d g whic h app ears 33 and 16 times resp ectiv ely An in teresting but not ob vious item set is f b c g whic h app ears exactly 50 times Notice that this set is an in tersection of the item sets f a b c g and f b c e g whic h app ears 33 and 16 times resp ectiv ely  yielding the frequency  33   16   50 for f b c g  These observ ations and their cum ulativ e eects are captured resp ectiv ely through the set of facts in fr e q and c and in gure 2 Supp ose w e are in terested in considering only those transactions that con tain sets of items shared b y a large set of transactions in the kno wledge base i.e the supp ort threshold If w etak e 20 to b e our supp ort threshold that means w e will consider only those item sets that app ear in 20 of the transactions in T  W e can then mak e the assertions in lar ge sho wn belo w i.e essen tially the large item sets in T in asso ciation rule terminology  F rom the facts lar ge  the only t w o asso ciation rules w e can compute with greater than 40 condence is that a  bc and bc  a  i.e a  bc h 0  33  0  40 i and bc  a h 0  33  0  66 i  group  t 1  f a b c g   freq  f a b c g  33  cand  f a b c g  33  group  t 2  f a g   freq  f a d g  16  cand  f a d g  16  group  t 3  f a d g   freq  f a g  33  cand  f a g  82  group  t 4  f a g   freq  f a g  33  cand  f b c e g  16  group  t 5  f a b c g   freq  f a g  16  cand  f b c g  50  group  t 6  f b c e g   freq  f b c e g  16  freq  f b c g  50  Figure 2 Mining Pro cess from T  generating p ossible large item sets as sho wn b elo w to o as the facts rules  f a g  f b c g  0  33  0  40 and rules  f b c g  f a g  0  33  0  66 lar g e  f a b c g  33  rules  f a g  f b c g  0  33  0  40  lar g e  f a g  82  rules  f b c g  f a g  0  33  0  66  lar g e  f b c g  50  Figure 3 Large item sets and asso ciation rules implied b y T corresp onding to supp ort and condence at least equal to 20 and 40 resp ectiv ely  The ab o v et w o rules serv e as imp ortan t reminders that X  Y h s 1 c 1 i  and Y  X h s 2 c 2 i6 c 1  c 2  and that X  Y h s 1 c 1 i  and Y  X h s 2 c 2 i s 1  s 2  4 Computing Asso ciation Rules from First-order Kno wledge bases The c hallenge no w is to nd a logic program that can compute the facts lar ge and consequen tly the facts rules  The pioneering w ork on asso ciation rules 1 prop osed an iterativ e metho d that generates the item sets of cardinalit y 1 through jI j  where I is the set of all items in K in ev ery pass k o v er K  These sets are called the c andidate item sets C k  that are c hec k ed against K to see if they app ear at least  m the minim um supp ort threshold n um b er of times Generating and testing these candidate item sets is an immensely exp ensiv e and inheren tly pro cedural task Suc h a pro cedural metho d called the FP-tree w as prop osed in 6 whic h a v oids generating candidates b y creating a complex data structure Our goal here on the other hand is to dev elop a declarativ e means of computing the asso ciation rules without candidate generation so that w e can mine large rst-order kno wledge bases through deductiv e metho ds It turns out that suc h an abstraction for declarativ e computation of asso ciation rules already exists All w e require is the a v ailabilit y of aggregate functions Suc h functions are a v ailable in most logic based languages suc h as Prolog and most deductiv e database systems suc h as LD L 5 CORAL 17 XSB 18 a nd RelationLog 10   In gure 4 w e presen tthe en tire program called R ULES needed to compute asso ciation rules from an y kno wledge base K  The predicate tr ans need not b e a stored kno wledge base fact In fact it can b e an in ten tional predicate itself dened in terms of an y extensional predicate W e can v erify that the query  rules  X  Y  S C  will pro duce the rules presen ted in the preceding section if w e apply the program R ULES on the tr ans facts in gure 1 assuming 20 supp ort 3 


r 1  group  T  I    tr ans  T I   r 2  total  coun t  T    g r oup  T I   r 3  inh  I coun t  T    N   group  T I   total  N   r 4  inh  I 1  I 2  0  inh  I 1 C 1  inh  I 2 C 2  I 1 6 I 2  I 2 6 I 1 I 1  I 2 6    r 5  freq  I 1 C 2   inh  I 1 C 1  inh  I 2 C 2  I 1  I 2  r 6  cand  I sum  C    freq  I C   r 7  lar g e  I C   cand  I C  C   m  r 8  rules  X Y n X S Y C   lar g e  X S X  large  Y S Y   X  Y C  S Y S X C   m   lar g e  Z S Z   Z  Y X  Z Figure 4 Deductiv e asso ciation rule mining system R ULES and 40 condence thereb y establishing the correctness of the program on in tuitiv e grounds Before w e presen ta more formal treatmen t of the concepts that serv e as the bac kb one of this abstract program w e presen t an informal explanation of the rules b elo w The rule r 1 essen tially aggregates items in a transaction predicate so that w e can refer to all the items p ertaining to one single transaction This will also facilitate set op erations in v olving item sets The second rule r 2 giv es us the total n um b er of transactions in the kno wledge base so that w e can calculate the supp ort of item sets and subsequen tly  the supp ort and condences of generated rules Rule r 3 helps group b y item sets in gr oup facts and helps coun t the supp ort b y computing the prop ortion of transactions in whic h a particular item set app ears o v er N n um ber of total transactions Rule r 4 in conjunction with r 3  computes the me et irr e ducible elements of the tr ans database item sets with supp ort coun t zero see section 8 for the rationale It do es so for only those item sets that are not related b y a subset sup erset relationship Rule r 5 sa ys if an item set I in inh is a subset of another item set J in inh  then the item set I m ust inherit the supp ort of J  Rule r 6 generates the sum total of all supp orts corresp onding to eac h item set in K  F or an y giv en minim um supp ort threshold  m  rule r 7 computes the large item sets b y ltering the item sets in fr e q whose supp ort fall b elo w the threshold Finally  rule r 8 generates all the rules for a giv en minim um condence  m from the large item sets Note that this rule generates all the non-redundan t rules stipulated b y denition 2.2 5 Theoretical Basis of the Program R ULES In order to appreciate the no v elt y of the metho d prop osed in the preceding section w e will presen t its theoretical basis using an example as a full treatmen t is not p ossible within the space constrain ts Consider a transaction kno wledge base K o v er a set of items I  f a b c d e g  In the ensuing discussion and the examples w e presen t let us assume that for an yitemset I I andt w o natural n um b ers t and c  I t c denotes the fact that I app ears in exactly t transactions in K  and that I also app ears as a subset of other transactions n n um ber of times suc h that c  n  t  t is called the tr ansaction c ount and c is called the total c ount of item set I  An yitemset I ha ving its total coun t c at least equal to some supp ort threshold  m is called a lar ge item set  Using this metho d w e can th us represen tan y transaction kno wledge base in a lattice structure L as sho wn in gure 5 represen ting an arbitrary K       abcde abde acde bcde abce abcd abc abd acd bcd abe ace bce ade bde cde ab ac bc ad bd cd ae be ce de bcde null a 2 2 30122 52344 6003102500 93521001 23 7 120820 1167104461056 22 16 23 15 21 12 12 15 10 15 47 51 38 35 28 91 0 level 1 level 2 level 3 level 4 level 5 level 6 h Figure 5 Lattice represen tation of kno wledge base K o v er item set I  f a b c d e g  In this lattice the top elemen t is the set of all items I  and the b ottom elemen tisthe nul l set F or an y item set I  the heigh t of the lattice is h  jI j 1 In our example it is h 5+1=6 F or an ynode v at a lev el l in lattice L  i v will ha v ea de gr e e l  1whic h is equal to the n um b er of items in v ii v will ha v e h  l paren ts called the de gr e e-1 sup er sets of v  and nally iii v will also ha v e l  1 c hildren called the de gr e e-1 subsets of v  Ancestors at a lev el j of a no de v at lev el l is called a degreek  k  j  l  sup ersets of v in general Lik ewise the descendan ts are called the degreek subsets of v  The fact that v is a descendan tof u  is denoted b y v  u  Notice that suc h ancestors or descendan ts alw a ys dier with v b y k items The no des in L also satisfy additional in teresting properties F or example a no de v at lev el l diers from its c hild u at lev el l  1b y exactly 1 elemen t and that u  v  F or an y t w o c hildren u and w of a no de v  v  u  w  F or an yt w onodes u t u c u and v t v c c at an ylev el l their join is dened as  u  v  t j c j  and the me et as  u  v  t m c m  suc h that c j  min  c u c v nd c m  max  c u c v  Ho w ev er w edo not dene meet and join of no des u and v across lev els  l and l 0 suc h that l 6  l 0  although it is p ossible to do so and if u  v   ev en if u and v are at the same lev el l  F or example no des ab and ce do not ha v e a meet or join Denition 5.1 T otal Coun t Let v t c be a node in L at lev el l  h be the heigh tof L and v k sup b e the set of degreek sup ersets of v suc hthat1  k   h  l  Then the total c ount c of v isgiv en b y c   v  t   u t s c s 2 h  l k 1 v k sup t s  F or example the total coun tof abcd is  abcd  t abcd  t abcde 3+2 5 and the total coun tof acd is  acd  t acd  t abcd  t acde  t abcde  0  3  2  2  7 and so on Denition 5.2 Large Item Sets Let v t c be a no de in L   v be its total coun t  null be the total n um ber of transactions in K and  m b e the supp ort threshold Then v t c is a lar ge item set if  v  null   m  In gure 5 the no des b elo w the dotted line called the l-envelop  are large item sets if w e insist that  m 0  20 In 4 


con trast the ones ab o v e the line are not Also note that ifanode v is a large item set all its descendan ts are to o Con v ersely  anode v cannot b e a large item set if an yof its degreek subset descendan t is not This is referred to as the so called anti-monotonicity prop ert y of transaction kno wledge bases Although w eare in terested in nding the l-en v elop in a lattice there ma ybe man y nodes belo w the l-en v elop that are redundan t b ecause they do not carry an y useful information Our goal is to nd the sub lattice under the l-en v elop without the redundan t no des Denition 5.3 Redundan tNodes Let u t u c u and v t v c v be t w o no des suc h that u t u c u is a degree-1 subset of v t v c v  Then the no de u t u c u is r e dundant in L if c u  c v  i.e c u is computable solely from c v  Denition 5.4 T ransaction and Virtual No des Anode v t c in L is called a tr ansaction no de if t 0 i.e the fact h v t i is deriv able from K  It is called a virtual no de otherwise In a giv en lattice L  the no des b elo w the l-en v elop satisfy the follo wing condition F or an y no de v b elo w l-en v elop either v is a transaction no de or there exists a no de u suc h that v  u  and u is a transaction no de This observ ation indicates that w e need not compute the en tire lattice L to b e able to compute the large item sets to w ards nding the asso ciation rules Hence w e dene the concepts of a sublattice and K mapping of a kno wledge base K as follo ws Denition 5.5 Sub-lattice of L  Let L b e an item set lattice and S b e a subset of all the no des in L  Then the sub-lattice L  S  of L is the partial lattice in v olving only the no des in S whic h is obtained from L b yremo ving all the no des v along with their edges suc h that there exists no u in S for whic h v  u holds F or example the sub-lattice for the kno wledge base in gure 1 is sho wn in gure 6 along with the l-en v elop e corresp onding to a supp ort threshold of 20     abc bce ab ac bc ce bc e null a 2 1 000 0 20000 2 1 223 10 53311 6 0 be 0 d ad 1 1 Figure 6 K mapping of the kno wledge base T of gure 1 Denition 5.6 K-Mapping Let K be a transaction kno wledge base o v er a set of items I  and L be the corresp onding item set lattice Let I be the distinct set of items app earing in K  Then the K mapping  denoted L K  is the sub-lattice L  I  Note that the K mapping of the example T in section 3 is sho wn in gure 6 In this K mapping the no des mark ed with a solid rectangle are the no des in T andthenodes mark ed with dotted ellipses are redundan t The no des belo w the dotted line are the large item sets Notice that the no de bc is a large item set but is not a mem ber of T  while ad and bce are y et they are not included in the set of large item sets of T W e are assuming here a supp ort threshold of 20 So basically  w e w ould lik e to compute only the no des abc  bc and a from T  The follo wing results guaran tee that the prop osed computations are correct in tended and sucien t Lemma 5.1 Let L K be a K mapping for a transaction kno wledge base Let i and j be t w o no des in L K suc h that j is a degree-1 subset of no de i  Then the total coun t of no de j is alw a ys higher than no de i if b oth i and j are transaction no des i.e  j   i  Pr o of Sketch  By sho wing that j is a subset of i  and that b eing transaction no des j m ust ha v e non-zero transaction coun t So the transaction coun tof i  j m ust b e greater than the transaction coun tof i alone whic hb y denition is the total coun tof j  Corollary 5.1 Let L K be a K mapping for a transaction kno wledge base Let i and j be t w o no des in L K suc hthat j is a degree-1 subset of no de i  Then no de j is redundan t if their total coun ts are iden tical i.e  i   j  and no de j is virtual Pr o of Sketch  By sho wing that non-redundancy is an imp ossibilit y  Corollary 5.2 Let L K be a K mapping for a transaction kno wledge base Let i and j be t w o no des in L K suc hthat j is a degree-1 subset of no de i  Then the total coun tof no de j is alw a ys at least equal to the total coun tof i if no de j is virtual i.e  j   i  Pr o of Sketch  F ollo ws directly from the lemma 5.1 Corollary 5.3 Let L K be a K mapping for a transaction kno wledge base Let j b e a virtual no de in L K  Then j is non-redundan tif j is a least common descendan tofan y t w o transaction no des in L K  Pr o of Sketch  This follo ws from that fact that the total coun tof j will b e higher than the t w o transaction no des as it will inherit the coun ts from these t w o transaction no des The ab o v e lemma and its corollaries suggest that it is safe to further prune the K mapping of a kno wledge base to remo v e all redundan t virtual no des Recall that only those virtual no des for whic h there exists a paren tnodethathas an iden tical total coun t are redundan t and that a virtual no de alw a ys has a paren t Needless to sa y  all transaction no des are non-redundan t although some of them ma y not b e a large item set The follo wing lemma essen tially captures the an ti-monotonicit ypropert y of frequen t item sets in the literature in terms of total coun ts in our framew ork Lemma 5.2 Let L K b e a signature mapping for a transaction kno wledge base Let i and j 1 j k be no des in L K suc hthat j m s are degree-1 sup ersets of no de i  Then  i   k m 1  j m  5 


Pr o of Sketch  By sho wing that the total coun tofac hild no de is alw a ys at least equal to the paren t in the item set lattice and hence the sum total should also b e the same for all paren ts 6 Suciency and Correctness of R ULES W e no w pro ceed to sho w that the rules presen ted in the program R ULES are sucien t and correctly compute the large item sets and th us the asso ciation rules F or an y transaction kno wledge base K w ekno w that it is sucien t to compute the total coun ts of all transaction no des in K  F rom lemma 5.1 and corollary 5.1 w e also kno w that w e can a v oid computing virtual no des that are redundan t and from corollaries 5.2 and 5.3 w e kno w that w em ust compute the non-redundan t virtual no des that do not app ear in K  First w e compute the total coun ts of all transaction no des as follo ws Through rule r 1  w e compute the gr oup facts so that w e can refer to a transaction as a set of items instead of a item at a time The frequency the prop ortion to be exact of eac h distinct item v in gr oup  i.e the parameter t of v t c  is computed through rule r 3  This is accomplished b y taking a coun t of transaction IDs for a group of transactions that ha v e exactly the same item sets Then rule r 4 mak es it p ossible to inherit the transaction coun ts of sup erset transaction no des to a transaction no de for whic h they are sup ersets to b e subsequen tly summed b yrule r 6  Lemma 6.1 F or an y kno wledge base K  the rules r 1 through r 3  together with rules r 5 and r 6 compute the total coun t of all transaction no des Pr o of Sketch  By sho wing that the rules actually collect all the subsets inclusiv e of the sup erset no de of a transaction no de for whic h there is another transaction no de in K  and carries the sup erset's transaction coun t This when group ed together and summed giv es the total coun t of that no de Unfortunately  computing the signature coun ts of transaction no des is not sucien t as demonstrated in the example in gure 6 b ecause there ma y b e non-redundan t virtual no des that are of in terest to us This scenario will occur only when for an y pair of transaction no des the least common descendan t is not a transaction no de e.g gure 6 Suc h no des cannot b e redundan tb y corollary 5.3 F urthermore these t w o transaction no des m ust not b e related b y degreek subsets relation These observ ations follo w from lemma 5.1 and corollaries 5.1 through 5.3 Since these non-redundan t virtual no des do not app ear in the kno wledge base K w em ust compute them explicitly  The expression in rule r 5 computes the total coun tof nonredundan t virtual no des b y nding the in tersection of a pair of transaction no des suc h that they are not related b y the  relationship Lemma 6.2 F or an y kno wledge base K  the rules r 3 and r 4 along with r 6 compute the total coun t of all non-redundan t virtual no des Pr o of Sketch  By sho wing that the expression actually collects all the non-redundan t virtual no des and then from lemma 6.1 the pro of follo ws The follo wing theorem follo ws immediately  Theorem 6.1 Let K be a transaction kno wledge base and  m be the minim um supp ort threshold Then rules r 1 through r 8 correctly compute all the non-redundan t asso ciation rules en tailed b y K  T o pro v e this theorem w e need y et another theorem b elo w that establishes the fact that the set of large item sets is a subset of all transaction no des and non-redundan t virtual no des in the K mapping of K  whic h is actually not to o dicult to pro v e Theorem 6.2 Suciency Let K b e a transaction kno wledge base and  m b e the minim um supp ort threshold Then the set of transaction no des and non-redundan t virtual no des are sucien t to nd the non-redundan t large item sets of K  7 Multiset Pro cessing Though w e normally exp ect the system R ULES to w ork ne it breaks do wn in most practical cases This situation can b e explained with the example in gure 1 Recall that w e exp ect the system to compute the fr e q facts sho wn in the leftmost column in the gure 7 b elo w from the facts gr oup using rules r 3 through r 5  Since a b ottom-up deductiv e database will only k eep distinct facts set seman tics it will pro duce the set sho wn in the middle column of the gure 7 In the pro cess the system will thro wa w a y the b o xed fact in the rst column and th us ultimately pro duce the bo xed c and fact sho wn in the righ tmost column re\015ecting an incorrect computation of supp ort for the item set f a g  freq  f a b c g  33  freq  f a b c g  33  cand  f a b c g  33  freq  f a d g  16  freq  f a d g  16  cand  f a d g  16  freq  f a g  33  freq  f a g  33  cand  f a g  49  freq  f a g  33  freq  f a g  16  cand  f b c e g  16  freq  f a g  16  freq  f b c g  50  cand  f b c g  50  freq  f b c e g  16  freq  f b c g  50  Figure 7 Incorrect execution due to set seman tics of Datalog T o remedy this system p eculiarit y  w e can mo dify the R ULES system as follo ws The critical observ ation here is that ev ery fr e q fact con tributes to w ards the supp ort coun t of item sets and hence none of them are redundan t ev en though as a predicate they ma y b e iden tical to other predicates The issue no w is to force the database system to treat facts as m ultisets bag b efore w e start pro cessing rule r 5 rather than a set adopt a m ultiset seman tics at least sim ulate it Since the fr e q facts are deriv ed from unique transactions in the kno wledge base K w e can exploit this fact and utilize a system dened or in terpreted function to generate a new id ev ery time a fr e q fact is created and include it as an argumen tof fr e q as sho wn in gure 8 In this w a y  w e are able to force the inclusion of ev ery deriv ation as eac h predicate will be unique due to the inclusion of a unique id as an argumen t and later coun t their con tributions T o accomplish this goal w e mo dify the 6 


r 0 5  freq  genid  I 1 C 2   inh  I 1 C 1   inh  I 2 C 2  I 1  I 2  r 0 6  cand  I sum  C    freq  P I  C   Figure 8 Mo died rules that sim ulates m ultiset seman tics in Datalog rules r 5 through r 6 to obtain rules r 0 5 through r 0 6 as sho wn in gure 8 In these rules w eha v e used a system dened function called genid  that returns a unique iden tier ev ery time it is called Notice that the rules r 3 and r 4 in R ULES are the only rules that are recursiv e and that they are safe F urthermore it is imp ortan t that w e main tain a set seman tics while w e complete pro cessing these t w o rules b ecause w e need unique deriv ations of the meet irreducible elemen ts in inh  The mo died system R ULES no w b eha v es as exp ected and computes the correct supp ort for item sets in an y kno wledge base K  including our example kno wledge base T  It is imp ortan t to note here that the articial x w e ha v e prop osed ab o v e to sim ulate m ultiset op eration in set based framew ork through the use of genid  function is not necessary in man y systems including CORAL and RelationLog deductiv e database systems F or example CORAL supp orts m ultiset relations bags through multiset declaration Finally  grouping using set v alued terms are also allo w ed in CORAL and RelationLog 8 Wh y the System W orks The reader ma yha v e noticed that the R ULES system did not rely on generating candidate item sets in the w a y apriori has to Unlik e apriori it also do es not rely on a lev el wise computation Instead it uses a few critical observ ations that man y systems fail to notice 4  W e summarize belo w t w o critical observ ations that w e exploit in our system These observ ations follo w from the formal prop erties of transaction kno wledge bases that w e ha v e presen ted in section 5 and section 2  Item sets that are large can be computed from the database in t w o principal w a ys Either they app ear as transactions in the kno wledge base or they are computable from the transactions as follo ws Item sets in the transaction table that are not related b y a subset sup erset relationship in tersect with eac h other to pro duce in tersection virtual no des in the item set lattice meets These in tersection no des in turn in tersect un til they b ecome me et irr e ducible elements  Only a subset of these in tersection no des will b e large item sets These elemen ts can b e generated from the kno wledge base b y computing the least xp oin t of the pairwise in tersection of the elemen ts in the transaction kno wledge base Hence there is no need to generate 4 Zaki and sev eral others also ha v e made similar observ ations in their w ork on closed sets and concept lattices But there are imp ortan t dierences b et w een our observ ations and the manner in whic h w e utilize these observ ations His observ ations and tec hniques rely on a searc h based algorithm for CHARM 25 whic h is essen tial in order to compute the so called closed sets and th us ha v e to b e completely pro cedural an y candidate item sets articially as the w a y apriori do es  All other p ossible item sets are either not large item sets or are redundan t and can b e computed from the other large item sets found in the t w o t yp es of sets computed as ab o v e These observ ations can be in tuitiv ely understo o d from the example belo w Consider another kno wledge base T as sho wn in gure 9 tr ans  t 1 a   tr ans  t 1 b   tr ans  t 1 c   tr ans  t 2 a   tr ans  t 2 b   tr ans  t 2 d   tr ans  t 3 d   tr ans  t 3 e   tr ans  t 4 a   tr ans  t 4 c   tr ans  t 4 d   tr ans  t 5 a   tr ans  t 5 b   tr ans  t 5 c   Figure 9 A new kno wledge base T  Application of rules r 1 and r 3 will pro duce the gr oup and inh facts sho wn in gure 10 group  t 1  f a b c g   inh  f a b c g  40  group  t 2  f a b d g   inh  f a b d g  20  group  t 3  f d e g   inh  f d e g  20  group  t 4  f a c d g   inh  f a c d g  20  group  t 5  f a b c g   Figure 10 Execution trace of T  F ollo wing the con v en tions of lattice building in previous sections w e construct the K mapping in gure 11 for the item set lattice corresp onding to the example kno wledge base T in gure 9 Notice that in gure 11 no de ab 0 3 is an in tersection of no des abc 2 2 and abd 1 1 whic h inherits the transaction coun t of all its ancestors 2 from abc and 1 from abd  to record its total coun t as 3 Notice that its transaction coun t is still zero as it is a virtual no de not app earing in T and becauseitw as created through an in tersection Recall that the total coun t of a virtual no de cannot b e less than an yof its paren ts from whic hitw as created In fact it is alw a ys higher than its paren ts coun t refer to lemma 5.2  de 1 1 ac 0 3  acd 1 1 ad 0 2  0 3 c  0 2 d                     abc 2 2 abd 1 1 0 bd 0 1 cd 0 1 ab 0 3 null 5 0 0 3 b 0 1 e 0 4 a bc 2 acd 1 1 ad 0 2 0 3 c 0 2 d transaction nodes Intersection of transaction nodes Redundant nodes Meet irreducible element l-envelope 40 l-envelope 60 Figure 11 K mapping of the kno wledge base T  F urthermore the in tersection of the transaction no des abc 2 2  abd 1 1 and acd 1 1 could not cross the lev el of 2 item sets i.e ab  ac and ad  as in tersections alw a ys pro duce the meet alw a ys the largest p ossible common subset of 7 


the paren ts In particular the in tersection of these three no des cannot yield a 0 4  T o pro duce a 0 4  w e need to tak e another round of in tersection of the new in tersection no des pro duced in the rst round from T  It turns out that a 0 4 is a meet irreducible elemen tinthe K mapping of T  and hence no further in tersection in v olving a 0 4 is required In general w e need to compute the least xp oin t of the pairwise in tersection pro cess to compute all the in tersection no des and stop only when the set generated at the nal stage are all meet irreducible elemen ts Suc h a least xp oin t computation will only generate no des ab  ac  ad  a and d with abd and acd actually in the rst round In particular the least xp oin t will nev er compute the no des with b  c and bc as sho wn under the so called l-en v elop e in gure 11 Recall that ev ery no de under this en v elop e is a large item set Consequen tly  the l-en v elop e in this example assumes a 40 supp ort for large item sets But notice that the no de b 0 3 has an iden tical total coun t with one of its non-redundan t paren t ab 0 3  Hence b 0 3 is a redundan tnode and th us not computing or generating this no de do es not result in the loss of an y information b ecause w e can infer b 0 3 from ab 0 3  in case w e need to Since w e do not ha v e to generate the redundan t large item sets the R ULES systems w orks just ne But if w e wish to create all the large item sets similar to apriori w e m ust add another rule to ac hiev e this goal as w e do not explicitly compute them as a view d lar ge  The addition of the follo wing rule whic hessen tially copies the coun tof a large item set I to all its subsets X if X do es not exist as a large item set already  will do the tric k r 9  d lar g e  X C   lar g e  I C  X  I  lar g e  X C 2  There is a subtle issue that w e w ould lik e to poin t out here Consider the K mapping sho wn in gure 12 corresp onding to another kno wledge base T not sho wn from whic h w e ha v e remo v ed all the redundan t no des and sho wn only the transaction and in tersection virtual no des A t a rst glance one ma y think that it is p ossible to compute the total coun t of no des or item sets in a lev el wise manner and sa v e time b y not redoing certain computations F or example consider computing the total coun t of no de abc and recall that initially  the no de abc will read as abc 2 0  Assume that w e compute abc 2 3 from abc 2 0 and abcd 1 1 b y adding the total coun tof abc and abcd  Recall that abc 2 0 re\015ects the fact that abc app ears t wice in the database whereas abc 2 3 represen ts the fact that abc app ears t wice as a database transaction and app ears once 3-2=1 as a sub item in another transaction i.e abcd Let us assume for a momen t that w e compute the total coun t of ev ery no de in this fashion starting from no de abcd in a lev el wise fashion  compute the total coun tof eac hnode b y adding the total coun ts of all its paren ts No w for the third lev el from the top to compute the no de coun ts for ac  w e add the total coun tof its paren ts 3+2 giving 5 But as can b e seen from the gure coun t 5 is not really accurate This discrepancy resulted b ecause w e added total coun ts of paren ts instead of the transaction coun ts of ancestors to compute the total coun t of the no de ac  Notice that the coun t corresp onding to ac in abcd w as accoun ted for t wice in no de ac via t w o distinct branc hes as sho wn Similarly ifw e con tin ue with the same sc heme w e will compute a 0 11 for no de a instead of a 0 5 whic h in realit y is the correct total coun tfor a  1 ac 1 ac a 1 a 1 a 1 a 1 a 1                  abd 1 2 null 5 0 0 5 a 1 1 abcd abc 2 3 acd 1 2 ab 0 4 ac 0 4 ad 0 3 Figure 12 K mapping of a new database T sho wing incorrect inheritance of transaction coun t if total coun t of paren ts are used to compute total coun toflo w er lev el no des instead of transaction coun t Our rule system w ork ed correctly b ecause w e either inherited the transaction coun ts in the fr e q rules from a no de that is related via subset-sup erset relationship or b y rst generating the in tersection no de once initializing the transaction coun t to zero rule r 4   and using this in tersection no de to inherit the transaction coun ts whic h no w is in a subset-sup erset relationship with its ancestors Finally  w e added the transaction coun ts with a grouping op eration follo w ed b y a coun t op eration whic hb y denition is the total coun tfor an ynode 8.1 Breaking the Barrier of Pro ceduralit y W ew ould lik e to highligh t here that the three observ ations w e ha v e made early in this section w ere critical in dev eloping a mo del theoretic and declarativ ec haracterization of the large item set computing pro cess as it did not dep end on pro cedural concepts suc h as candidate generation The observ ation that w e only need to generate and test the intersection no des help ed us visualize the pro cess as a sort of Cartesian pro duct of the kno wledge base with itself and compare eac h transaction tuple with the other tuples in the kno wledge base and see if they w ere unrelated b y subsetsup erset relationships Recall that suc h pairs are p oten tial con tributors to an in tersection no de The least xp oin tof the in tersection pro cess help ed b ecause w e kno w that w e ha v e computed all the meet irreducible elemen ts b y no w and no other in tersection no des exists There are sev eral w orks that ha v ein v estigated the issue of declarativ e asso ciation rule mining using SQL 7  23  19  16  11 Most of these w orks sp ecially 23  19 attempt to sim ulate apriori in SQL giving rise to a complicated and a wkw ard metho d They do not exploit the inheren t declarativ e prop erties of transaction databases as w eha v e iden tied in this pap er The inheren t pro ceduralit yoftheir prop osed expressions app ears to be a ma jor b ottlenec k While it is ob viously p ossible to dev elop op erators that hide the complexit y of these expressions the system nonetheless is a wkw ard unnatural and pro cedural whic h ma y ha v e eciency related dra wbac ks F urthermore b y sp ecifying the seman tics in pro cedural terms they compromise the query optimization asp ects of the system The reason for this loss of opp ortunit y is the fact that the pro cess has already b een co ded in to the declarativit y of SQL and th us database system m ust no w consider only lo cal optimization 8 


of the query expression without ha ving the global view of the in ten tion There is a big c hance that the enco ded pro cedure ma y not b e the b est w a y to compute the rules dep ending on the database instance F urthermore as w e understand it their prop osals require p oten tially large n um ber of name generation for relations and attributes The names that are needed are usually database dep enden t and th us p ossibly cannot b e gathered at query time An additional pro cess needs to b e completed to gather those v ariables b efore actual computations can b egin 5  9 Optimization Issues While it w as in tellectually c hallenging to dev elop a declarativ e expression for asso ciation rule mining from deductiv e databases there are sev eral op en issues with great promises for resolution In the w orst case the least xp oin tneedsto generate n 2 tuples in the rst pass alone when the database size is n  Theoretically  this can happ en only when eac h transaction in the database pro duces an in tersection no de and when they are not related b y subset-sup erset relationship In the second pass w e need to do n 4 computations and so on The question no w is can w e a v oid generating and p erhaps scanning some of these com binations as they will not lead to useful in tersections F or example the no de b 0 3 in gure 11 is redundan t A signican t dierence with apriori lik e systems is that our system generates all the item sets top do wn in the lattice without taking their candidacy as a large item set in to consideration Apriori on the other hand do es not generate an y no de if their subsets are not large item sets themselv es and thereb y prunes a large set of no des Optimization tec hniques that exploit this so called an ti-monotonicit y prop ert y of item set lattices similar to apriori could mak e all the dierence in our setup The k ey issue w ould b e ho ww e push the selection threshold minim um supp ort inside the top do wn computation of the no des in the lattice in our metho d F or the momen t and for the sak e of this discussion let us consider a higher supp ort threshold of 60 for the database T of gure 9 No w the l-en v elop e will b e the one sho wn in ligh ter dashed lines in gure 11 and the no des under this line will b e the large item sets Notice that no ww eha v eto discard no des ad 2 0 and d 0 2 to o This raises the question is it p ossible to utilize the supp ort and condence thresholds pro vided in the query and prune candidates for in tersection an y further Ideas similar to magic sets transformation 3  24 ma y be b orro w ed to address this issue The only problem is that pruning of an y no de dep ends on its supp ort coun t whic h ma y come at a later stage By then all no des ma y already ha v e b een computed and th us pushing selection conditions inside aggregate op erator ma y b ecome non-trivial Sp ecial data structures and indexes ma y also aid in dev eloping faster metho ds to compute ecien t interse ction joins that w e ha v e utilized in this pap er W e lea v e these questions as op en issues that should be tak en up in the future F ortunately though there has been a v ast b o dy of researc h in optimizing Datalog programs including recursiv e programs suc h as the one w e ha v e used in this pap er and hence the new questions and researc h 5 Recall that their prop osal requires one to express the mining problem to the system using sev eral queries and up date statemen ts that utilizes information ab out the database con ten ts to ac hiev e its functionalit y  c hallenges that this prop osal raises for declarativ e mining ma y exploit some of these adv ances Needless to emphasize a declarativ e metho d preferably a formal one is desirable b ecause once w e understand the functioning of the system w e will then be able to select appropriate pro cedures dep ending on the instances to compute the seman tics of the program whic hw e kno wis in tended once w e establish the equiv alence of declarativ e and pro cedural seman tics of the system F ortunately  w e ha v e n umerous pro cedural metho ds for computing asso ciation rules whic h complemen t eac h other in terms of sp eed and database instances In fact that is what declarativ e systems or declarativit y buy us  a c hoice for the most ecien t and accurate pro cessing p ossible 10 Conclusion Our primary goal for this pap er has b een to demonstrate that mining asso ciation rules from an y rst-order kno wledge base is p ossible in a declarativ ew a y  without help from an y sp ecial to ols or mac hinery  and that w e can no wha v ea v ery in tuitiv e and simple program to do so W eha v esho wn that it is indeed p ossible to mine declarativ ekno wledge b y exploiting the existing mac hinery supp orted b ycon temp orary inference engines in programming languages e.g Prolog or kno wledge base systems e.g RelationLog XSB LD L  CORAL All w e require is that the engine b e able to supp ort set v alued terms grouping aggregate functions and set relational op erators for comparison functionalities whic hmostofthesesystemscurren tly supp ort W e ha v e also demonstrated that our formalism is grounded on a more mathematical foundation with formal prop erties on whic h the seman tics of the R ULES system rely  W e ha v e also raised sev eral op en issues related to eciency and query optimization whic h should b e our next order of business As future researc h w e plan to dev elop optimization tec hniques for mining queries that require non-trivial lo ok ahead and pruning tec hniques in aggregate functions The dev elopmen ts presen ted here also ha v e other signican t implications F or example it is no w p ossible to compute c hi square rules 4 using the building blo c ks pro vided b y our system Declarativ e computation of c hi square rules to our kno wledge has nev er b een attempted for the man y pro cedural concepts the computation of c hi square metho d relies on In a separate w ork 2 w e sho w that the coun ting metho d prop osed in this pap er can be eectiv ely utilized to generate the exp ectations needed in order to compute suc h rules rather easily  These are some of the issues w e plan to address in the near future The motiv ation imp ortance and the need for in tegrating data mining tec hnology with relational databases has b een addressed in sev eral articles suc h as 12  13 They con vincingly argue that without suc h in tegration data mining tec hnology ma y not nd itself in a viable p osition in the y ears to come T o b e a successful and feasible to ol for the analysis of business data in relational databases suc htec hnology m ust b e made a v ailable as part of database engines and as part of its declarativ e query language Our prop osal for declarativ e mining bears merit since it sheds ligh t on ho w rst order databases can be mined in a declarativ e and pro cedure indep enden t w a y so that the optimization issues can b e delegated to the underlying database engine Once suc h argumen ts are accepted sev eral systems 9 


related issues b ecome prime candidates for immediate atten tion F or example traditionally database systems supp orted declarativ e querying without the necessit y to care ab out the pro ceduralit y of the queries In this pap er w eha v e actually demonstrated that asso ciation rule mining can b e view ed as a Datalog query  It is immediate that a direct mapping from the Datalog expressions presen ted in this pap er to SQL can be dev elop ed with no problem at all W e can then rely on ecien t database pro cessing of the query in an optimized fashion Hence w ecomeclose to the essence of the visions expressed b y the leading database researc hers and practioners 12  References 1 Rak esh Agra w al and Ramakrishnan Srik an t F ast algorithms for mining asso ciation rules in large databases In VLDB  pages 487{499 1994 2 Anon ymous A declarativ e metho d for mining c hisquare rules from deductiv e databases T ec hnical rep ort Departmen t of Computer Science Anon ymous Univ ersit y USA F ebruary 2001 3 C Beeri and R Ramakrishnan On the po w er of magic In Pr o c e e dings of the 6th A CM Symp osium on Principles of Datab ase Systems  pages 269{283 1987 4 Sergey Brin Ra jeev Mot w ani and Craig Silv erstein Bey ond mark et bask ets Generalizing asso ciation rules to correlations In Pr o c A CM SIGMOD  pages 265 276 1997 5 D Chimen ti et al The LD L system protot yp e IEEE Journal on Data and Know le dge Engine ering  2\(1 90 1990 6 Jia w ei Han Jian P ei and Yiw en Yin Mining frequen t patterns without candidate generation In Pr o c A CM SIGMOD  pages 1{12 2000 7 Marcel Holsheimer Martin L Kersten Heikki Mannila and Hann uT oiv onen A p ersp ectiv e on databases and data mining In Pr o c of the sixth A CM SIGKDD Intl Conf  pages 150{155 Mon treal Queb ec 1995 8 Flip Korn Alexandros Labrinidis Y annis Kotidis and Christos F aloutsos Ratio rules A new paradigm for fast quan tiable data mining In Pr o c of 24th VLDB  pages 582{593 1998 9 Brian Len t Arun N Sw ami and Jennifer Widom Clustering asso ciation rules In Pr o c of the 3th ICDE  pages 220{231 1997 10 Mengc hi Liu Relationlog At yp ed extension to datalog with sets and tuples In John Llo yd editor Pr oc e e dings of the 12th International L o gic Pr o gr amming Symp osium  pages 83{97 P ortland Oregon Decem ber 1995 MIT Press 11 Rosa Meo Giusepp e Psaila and Stefano Ceri An extension to SQL for mining asso ciation rules Data Mining and Know le dge Disc overy  2\(2 1998 12 Amir Netz Sura jit Chaudh uri Je Bernhardt and Usama M F a yy ad In tegration of data mining with database tec hnology  In Pr o c e e dings of 26th VLDB  pages 719{722 2000 13 Amir Netz Sura jit Chaudh uri Usama M F a yy ad and Je Bernhardt In tegrating data mining with SQL databases In IEEE ICDE  2001 14 Ra ymond T Ng Laks V S Lakshmanan Jia w ei Han and Alex P ang Exploratory mining and pruning optimizations of constrained asso ciation rules In Pr o c A CM SIGMOD  pages 13{24 1998 15 Jong So o P ark Ming-Sy an Chen and Philip S Y u An eectiv e hash based algorithm for mining asso ciation rules In Pr o c A CM SIGMOD  pages 175{186 1995 16 Karthic k Ra jamani Alan Co x Bala Iy er and A tul Chadha Ecien t mining for asso ciation rules with relational database systems In Pr o c e e dings of the International Datab ase Engine ering and Applic ations Symp osium  pages 148{155 1999 17 R Ramakrishnan D Sriv asta v a and S Sudarshan CORAL  Con trol Relations and Logic In Pr o c of 18th VLDB Confer enc e  pages 238{250 1992 18 Konstan tinos F Sagonas T errance Swift and Da vid Scott W arren XSB as an ecien t deductiv e database engine In Pr o c of the A CM SIGMOD Intl Conf  pages 442{453 1994 19 Sunita Sara w agi Shib y Thomas and Rak esh Agra w al In tegrating mining with relational database systems Alternativ es and implications In Pr o c A CM SIGMOD  pages 343{354 1998 20 Ashok a Sa v asere Edw ard Omiecinski and Shamk an tB Nav athe An ecien t algorithm for mining asso ciation rules in large databases In Pr o c of 21th VLDB  pages 432{444 1995 21 Pradeep Sheno y  Ja y an t R Haritsa S Sudarshan Gaura v Bhalotia Ma y ank Ba w a and Dev a vrat Shah T urb o-c harging v ertical mining of large databases In A CM SIGMOD  pages 22{33 2000 22 Abraham Silb ersc hatz Henry F Korth and S Sudarshan Datab ase System Conc epts  McGra w-Hill third edition 1996 23 Shib y Thomas and Sunita Sara w agi Mining generalized asso ciation rules and sequen tial patterns using SQL queries In KDD  pages 344{348 1998 24 J D Ullman Principles of Datab ase and Know le dgeb ase Systems Part I II  Computer Science Press 1988 25 Mohammed J Zaki Generating non-redundan t association rules In Pr o c of the 6th A CM SIGKDD Intl Conf  Boston MA August 2000 1 0 


OM OM 006 OD8 01 012 014 016 018 02 022 False alarm demity Figure 9 Percentage of tracks lost within 200 seconds using three-scan assignment with PD  0.9 TI  O.ls Figure 11 T2  1.9s and T  Is ij  20 and 0  0.1 24 1 22  20  E fls 0  8l 16 0 n 14  12  0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 T1/12 PD Average track life of three-scan assignment with PD varying TI  0-ls T2  1.9s T  Is X  0.02 ij LO and   0.1 mareuvenng index Figure 12 Percentage of lost tracks of 4-D assipment in 200 seconds with maneuvering index varying X  0.01 Ti  0.1 T2  1.9s and T  IS PD  0.98 Figure 10 Percentage of lost tracks of 4-D assignment in 200 SeoDllCls with TI and T2 varying PD  0.98 X  0.02 q 20 and 0  0.1 4-1607 


Figure 13 Average gate size for Kalman filter Figure is relative as compared to nq and curves are parametrized by ij/r with unit-time between each pair of samples 1.2 Iy I 1.1 0.5 I A CRLB for he unifm samiina I  0.4 0.35 d 3 03 i7 3 0.25 0 0.M 0.04 0.06 008 0.1 0.12 0.14 0.16 0.18 0.2 False A!am DemW V I    Figure 14 CramerRao Lower Boundfor Mean Square Error of uniform and nonuniform sampling schemes with Ti  O.ls T2  1.9s T  IS PD  0.9 ij  5 and U  0.25 1 unifon sampling r-ls ked i non-uniform sampling loge inlewi I ti non-uniform sampling shod interva I 0.9 0.8 I Figure 15 MSE comparison of three-scan assignment with Ti and T2 varying I'D  1 X  0.01 ij  20 and U  0.1 4-1608 


Plenary Panel Session 30 XML Databases   Moderator: Michael Carey, IBM Almaden Research Center USA Panelists Adam Bosworth, Microsoft Corporation USA David De Witt University of Wisconsin-Madison, USA Alon Levy University of Washington USA Bruce Lindsay IBM Almaden Research Center USA Jennifer Widom Stanford University USA Demo Session 1 Web Query Optimizer  661 V Zadorozhny L Bright L Raschid T Urhan and M Vidal ReQueSS: Relational Querying of Semi-structured Data  664 R Sunderraman The IDEAL Approach to Internet-Based Negotiation for E-Business  666 J Hammer C Huang Y Huang C Pluempitiwiriyawej M Lee H Li L Wang Y Liu and S Su READY A High Performance Event Notification Service  668 R Gruber B Krishnamurthy, and E Panagos A Multimedia Information Server with Mixed Workload Scheduling  670 G Nerjes DISIMA An Object-Oriented Approach to Developing an Image Database System  672 V Oria T Ozsu P Iglinski B Xu and L Cheng Demo Session 2 The Collaboration Management Infrastructure  677 H Schuster D Baker A Cichocki D Georgakopoulos and M Rusinkiewicz Assisting the Integration of Taxonomic Data The LITCHI Toolkit  679 I Sutherland J Robinson S Brandt A Jones S Embury W Gray R White and F Bisby TheaterLoc: Using Information Integration Technology to Rapidly Build Virtual Applications  681 G. Barish Y.4 Chen D Dipasquo, C Knoblock S Minton I Muslea and C Shahabi Lineage Tracing in a Data Warehousing System  683 Y Cui and J Widom xiii 


The Mentor-Lite Prototype A Light-Weight Workflow Management System  685 J Weissenfels M Gillmann 0 Roth, G Shegalov and W Wonner Location Prediction and Queries for Tracking Moving Objects  687 0 Wolfson B Xu and S Chamberlain Semiorder Database for Complex Activity Recognition in Multi-Sensory Environments  689 S Bhonsle A Gupta S Santini and R Jain Tutorial 1 Web Information Retrieval  693 M Henzinger Tutorial 2 Mobile and Wireless Database Access for Pervasive Computing  694 P Chrysanthis and E Pitoura Tutorial 3 Data Mining with Decision Trees  696 J Gehrke Tutorial 4 Directories Managing Data for Networked Applications  697 D Srivastava Tutorial 5 Indexing High-Dimensional Spaces Database Support for Next Decade\222s Applications  698 S Berchtold and D Keim xiv 


 T5.I2.D100K T10.I4.D100K T15.I4.D100K T10.I6.D400K T10.I6.D800K T10.I6.D1600K Optimizations across Databases 5 0 5 10 15 20 25 30 35 40 45 Improvement COMP TREE COMP-TREE 1 2 4 8 1 2 4 8 1 2 4 8 2 4 8 2 4 8 1 2 4 8 Processors Databases Figure 5 Effect of Computation and Hash Tree Balancing good as the COMP optimization The reason that the hash tree balancing is not suf\336cient to offset inherent load imbalance in the candidate generation in this case The most effective approach is to apply both optimizations at the same time COMP-TREE The combined effect is suf\336cient to push the improvements in the 40 range in the multiple-processor case On 1 processor only hash tree balancing is bene\336cial since computation balancing only adds extra cost 5.4 Short-circuited Subset Checking Figure 6 shows the improvement due to the short-circuited subset checking optimization with respect to the unoptimized version The unoptimized version is the Apriori algorithm due to Agrawal et al 5 The results are presented for dif ferent number of processors across dif ferent databases The results indicate that while there is some improvement for databases with small transaction sizes the optimization is most effective when the transaction size is large In this case we get improvements of around 25 r the unoptimized version To gain further insight into this optimization consider 336gure 7 It shows the percentage improvement obtained per iteration on applying this optimization on the T20.I6.D100K database It shows results only for the uni-processor case r similar results were obtained on more processors We observe that as the iteration k increases there is more opportunity for shortcircuiting the subset checking and we get increasing bene\336ts of up to 60 The improvements start to fall off t the high end where the number of candidates becomes small resulting in a small hash tree and less opportunity for short-circuiting It becomes clear that is an extremely effective 15 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 T5.I2.D100K T10.I6.D800K T15.I4.D100K T20.I6.D100K procs across Databases 0 5 10 15 20 25 Improvement 1 2 4 8 Figure 6 Effect of Short-circuited Subset Checking 23456789101112 Iterations 0 10 20 30 40 50 60 improvement T20.I6.D100K Figure 7  Improvement per Iteration  proc   16 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


optimization for larger transaction sizes and in cases where there are large number of candidate k itemsets 6 Conclusions In this paper e presented a parallel implementation of the Apriori algorithm on the SGI Power Challenge shared memory multi-processor We also discussed a set of optimizations which include optimized join and pruning computation balancing for candidate generation hash tree balancing and short-circuited subset checking We then presented experimental results on each of these Improvements of more than 40 were obtained for the computation and hash tree balancing The short-circuiting optimization was found to be extremely effective for databases with large transaction sizes Finally we reported the parallel performance of the algorithm While we d good speed-up we observed a need for parallel I/O techniques for further performance gains References  R Agra wal T  Imielinski and A Swami Database mining A performance perspecti v e  I n IEEE Trans on Knowledge and Data Engg  pages 5\(6 1993  R Agra wal T  Imielinski and A Swami Mining association rules between sets of items in lar ge databases In Proc M SIGMOD Intl Conf Management of Data  May 1993  R Agra wal H Mannila R Srikant H T o i v onen and A I V erkamo F ast disco v ery of association rules In U F et al editor Advances in Knowledge Discovery and Data Mining  MIT Press 1996  R Agra wal and J Shafer  P arallel mining of association rules design implementation and e xperience Technical Report RJ10004 IBM Almaden Research Center San Jose CA 95120 Jan 1996  R Agra wal and R Srikant F ast algorithms for mining association rules In Proc 20th VLDB Conf  Sept 1994  M Cierniak W  Li and M J Zaki Loop scheduling for heterogeneity  I n 4th IEEE Intl Symposium on High-Performance Distributed Computing also as URCS-TR 540 CS Dept Univ f Rochester  Aug 1995  M Holsheimer  M  K ersten H Mannila and H T o i v onen A perspecti v e on databases and data mining In 1st Intl Conf Knowledge Discovery and Data Mining  Aug 1995  M Houtsma and A Swami Set-oriented mining of association rules In RJ 9567  IBM Almaden Oct 1993  H Mannila H T o i v onen and I V erkamo Ef 336cient algorithms for disco v ering association rules In AAAI Wkshp Knowledge Discovery in Databases  July 1994  J S P ark M Chen and P  S Y u  A n e f fecti v e hash based algorithm for mining association rules In Proc M SIGMOD Intl Conf Management of Data  May 1995 17 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


 J S P ark M Chen and P  S Y u  E f 336cient parallel data mining for association rules T echnical Report RC20156 IBM T J Watson Research Center Aug 1995  G Piatetsk y-Shapiro Disco v ery  presentation and analysis of strong rules In G P S et al editor  KDD  AAAI Press 1991  A Sa v asere E Omiecinski and S Na v athe An ef 336cient algorithm for mining association rules in large databases In Proc 21st VLDB Conf  1995  M J Zaki M Ogihara S P arthasarathy  and W  Li P arallel data mining for association rules on shared-memory multi-processors Technical Report 618 Department of Computer Science University of Rochester 618 1996 18 Proceedings of the 1996 ACM/IEEE Conference on Supercomputing \(SC\22296 0-89791-854-1/96 $ 10.00 ACM 


