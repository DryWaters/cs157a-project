Fast Mining of Association Rules in Large-scale Problems Hussien H Aly Ashraf A Am Yousry Taha IRI Mubarak city for SRTA  Alexandria Egypt ashraf amr@usa.net Alexandria Egypt Computers and Automatic Computers and Automatic Control Control Dept. Alexandria Univ Alexandria, Egypt Dept Alexandria Univ alyh@computer.org Abstract In this paper we study scalability problem ofapriori  like algorithms that are used in mining association rules We show how apriori suffers form performance deterioration 
for large-scale problems and propose an alternative data structures and operations that can be used to apply the apriori-trick optimization method in large-scale problems In the proposed method the database is transformed into a more efficient structure that is used along with the intersection operation to find the frequent itemsets in the database The performance evaluation shows that, with a minor increase in the storage requirement, the proposed technique outperforms signi\222jicantly the existing algorithms especially in large-scale problems 1 Introduction 
Since the introduction of association rule mining and the a-priori algorithm   several optimizations and extensions to the basic algorithm have been proposed in the literature such as 3-IO A recent survey of the mining problem can be found in I I Integration of the association rule mining with the relational database technology and the SQL is studied in 13,14,15 This technology is now used to discover and analyze the relationship between objects in new areas of applications for example between Web pages that is implied 
by the users\222 accessing behavior The ever-increasing size of log files in these applications makes it very difficult for conventional methods of mining to be applied The main success of these conventional methods in small and medium-sized databases is usually attributed to the so-called 223a-priori trick\224 I21 optimization which reduces the search space for frequent sets of items itemsets Using the terminology of the well-known market-basket analysis problem I I we can state this optimization method as follows 223If an itemset is not frequent its count is less 
than a minimum support value in a set of transactions, then any superset of this itemset is yousry_taha@hotmail. com not frequent in the same set of transactions\224 rest of this paper is organized as follows We discuss the scalability and performance problems of apriori in Section2 In Section 3 the inverted algorithm, the data structure and the intersection operation are presented In Section 4 the performance evaluation, the scalability and comparison with other related existing algorithm are given Finally Section 5 gives our 
conclusion The 2 Apriori scalability problem The mining problem size is usually determined by four parameters number of transactions number of items, the transaction size and the threshold The experiments performed in studied each parameter of the problem individually For example experiments are performed with different number of items keeping the number of transactions fixed \(at 100,000 transactions And so on for the other parameters Unfortunately these parameters which define the problem size are interacting in a non-uniform way Increasing one parameter while keeping 
some other parameters fixed not necessarily increase the problem size For example increasing the number of items and fixing both the threshold and the number of transactions will lead to a smaller number of candidate and frequent itemsets and even makes the algorithms to finish in fewer iterations. On the other hand increasing both the number of items and the number of transactions or increasing the number of items and lowering the threshold level may lead to the crash of the algorithms due to exponential explosion In this paper we studied this scalability problem and 
show how apriori suffers form performance deterioration for large-scale problems We also propose an alternative data structures and operations that can be used to apply the apriori-trick optimization method in large-scale problems We called this method the inverted method since it depends on inverting the transactional database structure The inverted method is an apriori-like level-wise technique and it is important to notice that it is orthogonal to other optimization techniques that are applied to apriori In other 1530-1346/01$10.00 0 2001 IEEE 107 


words we can apply these techniques also to the inverted method 3 Transactional database inversion Transactional databases contain transactions such as those found in the retail environments where sales transactions are stored in the database or those found in Web environments where the log files record information about pages that are requested The information stored in such databases includes the transaction ID and the set of items bought in this transaction or the set of pages visited in the web site In addition it may contain a time stamp time and date of the transaction\customer ID and other information about the transactions The usual representation of the transactional data is written as TransID ItemIDI,ItemID2 ItemID Note that the above is the minimum information that can be stored for the transaction The actual data format can be any arbitrary format, for example, relational data or just sequential file. All apriori-like algorithms that are currently used or proposed for data mining transactional databases directly use this format or a very close one Scanning the whole database at each iteration of apriori is one of the main contributors to the time required for generating the frequent itemsets In this paper we propose a transformation that inverts the above representation by storing the data item-wise not transaction-wise A record of the transformed database can be written as ItemID TransID TransID2  TransID In the first iteration we use the original database to construct the inverted one while searching for the candidate frequent items In higher iterations starting from iteration 2 of the association rule mining wc will use this inverted representation That is a database record in the kth iteration will have the form Itemset Transactionset Where Itemset is the candidate set of items and Trunsactionset is the set of transactions in which all the members of the itemset appear The size of the transformed database is roughly equal to the size of the original database 3.1 Mining using the transformed database To perform association rule mining using the transformed database we use the intersection operation The idea is explained in the following theorem The complete proof of the theorem can be found in 16 Theorem Consider two records of the form 1\above then the transactionset for the union of the two itemsets is the intersection of their transactionsets Using the same level-wise technique as the apriori algorithm and utilizing the above theorem to implement the apriori trick we can perform the association rule mining as follows Start with the original transactional database, transform it into the inverted structure This can be done in a single scan of the database An item is frequent if the cardinality of its transactionset is higher than the required minimum frequency So we can get the frequent I-itemstes All the following iterations that generate higher candidate itemsets will use this inverted structure To verify if a candidate k itemset is frequent or not perform the intersection operation for any two of its k-1 If the cardinality of the resulting transactionset is higher than the required minimum frequency the itemset is frequent. Otherwise it is not Note that there are many optimization issues involving the intersection operations For example we can choose from 3k-2k+'+1 different alternative operands for the intersection operation dividing the k-itemset into two not necessarily disjoint subsets Which alternative to choose is an optimization decision to minimize the cost ofthe intersection operation Since the transactionset size decreases as the itemset cardinality increases we may choose a division of the k-itemset of interest into two k-l subsets to reduce the cost of the intersection operation This is due to the fact that the transactionset for a k-itemset is a subset of that of any of its subsets We may also choose the two with the minimum transactionset size This depends on the materialization strategies we use. Due to space limitation we refer the readers to I61 for the complete and formal description of the algorithm 4 Performance evaluation and comparison The performance experiments are performed on an Intel PI11 processor with 450MHz CPU clock and 64MB memory running windows 98 The machine uses the FAT file system with measured throughput of 2.7 MB/sec The synthetic data generation program developed in 2 is used to generate different datasets of various characteristics The parameter definitions used by the synthetic data generator are as follows N is the number of items ID1 is the number of transactions IT is the average transaction length 111 is the average length of the potentially large itemsets used to generate the datasets We first generated several datasets with the same parameters as those in 2 in order to verify our simulator and compare the result with the known published results These da.tasets represent relatively small-to-medium problem sizes Then we increase the problem sizeand measure tlhe performance of different methods to see the scalability of these methods Table I gives the characteristics of the first generated datasets Note that all datasets have the same number of transactions lDl=lOO,OOO and number of items \(N=1000 as specified in 2 The dataset T5.12 means that the 108 


average transaction length is 5 items and the average length of the potentially frequent itemset used in the generating procedure is 2 The other columns give the total size the size of the inverted structure and the time required for inversion In this paper due to space limitation we shall present the results of some of these datasets Please refer to for a complete presentation Table 1 The generated datasets-1 Dataset T5.12 T10.12 IT1 111 Size Inverted Inversion MB size MB time \(sec 5 2 2.6 1.9 2.03 10 2 4.5 3.8 3.68 T10.14 1014 14.5 13.8 13.68 T20.12 12012 18.4 17.6 19.83 T20.14 T20.16 20 4 8.4 7.6 9.94 20 6 8.4 7.6 9.98 4.1 Execution time Figure 1 gives the average total execution time comparison between the two techniques for T5.12 T10.14 and T20.16 with different thresholds The database inversion time of the datasets is not included in the mining time of the inverted method since it is done only once for each of the generated datasets, independent of the threshold values The curves of Figure 1 show that in general the inverted method slightly outperforms the apriori algorithm and both have the same behavior when using smaller threshold values The difference increases when the problems size increase An important variant of apriori called \223aprioriTid\224 is also presented and studied in 2 and is shown there to have better performance than apriori in higher iterations only However in early iterations aprioriTid performs very slowly than apriori We studied the iteration time for the apriori aprioriTid and the inverted method The results are shown in Figure 2 where it shows that the iteration times for the inverted method is less than the corresponding ones of apriori and aprioriTid For higher iterations the inverted method is not worse than the aprioriTid 4.2 Number of transactions scale-up In this experiment we test the effect of changing the number of transactions on the performance of the algorithms The number of transactions is varied in the range from 100,000 to 1 million The results are given in Figure 3 and show that the inverted method beats the apriori algorithm in all cases The difference increases as the database size increases 4.3 Number of items scale-up In this experiment we test the effect of changing the number of items on the performance of the algorithms The number of items is tested in the range from 1000 to 10000 The results are given in Figure 4 It is important to note that increasing the number of items with the number oftransactions fixed at 100,000 reduces the number of candidates and frequent itemsets and even makes the algorithms finishes in few iterations about 2 iterations in almost all cases Again the results indicate that the two algorithms have the same trend behavior However the inverted method takes about 50 of the time taken by apriori 4.4 Transaction size scaleup In this experiment we test the effect of changing the transaction size number of items per transactions on the performance of the algorithms The transaction size ranges from 5 to 50 To avoid the effect of other parameters we vary the number of transactions as well such that the total database size is the same for all cases The numberof transactions ranges form 200,000 for transaction size of 5 to 20,000 for transaction size 50 The results are given in Figure 5 Note that the thresholds are not set to percentage of the number of transaction as the other experiments rather they set to absolute values This is because the number of transactions varies with the transaction size as stated above As shown in Figure 5 the inverted method scales very well in this case The apriori algorithm scales linearly 4.5 Problem size scale-up In this experiment we study the effect of increasing the problem size on the execution time As discussed before the problem size increases by varying a combination of the problem parameters We generated larger datasets with number of transactions of 1 million, rather than 100,000 as in the previous experiments Also the number of items ranges from 1000 to 10000 The algorithms are tested with different threshold values The database sizes in this experiment are nearly equal They are about 26 MB The inverted database size is about 19 MB The inversion time is about 33 seconds The results are given in Figure 6. It shows that the inverted method beats apriori by order of magnitude for larger problems especially for low thresholds This behavior has many reasons For large-scale datasets with large number of items the number of candidate and frequent itemsets becomes very large For example in some cases, the number of candidate 2-itemsets was about IO millions Also for low thresholds the number of iterations or passes over the database is increased as well 109 


As shown in Figure 6 apriori could not handle the case does not have to generate all candidates at once or scan the for low threshold values and large number of items database It tests every candidate itemset directly since all 7500 Apriori has to generate all candidate itemsets the information needed in one single record and then scanning the database to verify for each We can see from Figure 6 that the inverted method candidate itemset that all members are indeed in the scales very well with problem sizes. Note that some apriori transaction and count its frequency The inverted method curves of Figure 6 are not completed These are usually T5.12 3.5  1 3 2.5 2 F 1.5 U W  E 81 0.5 0  Apriori  Inverted 2 1.5 1 0.75 0.5 0.33 0.25 Threshold YO TI0 I4 12 I I  Apriori 10  Inverted 2 1.5 1 0.75 0.5 0.33 0.25 Threshold 223A T20 I4 60  50 3 40 30 s  1 20 10 0 2 1.5 1 0.75 0.5 0.33 0.25 Threshold  TI0 I2 a I 0\222 2 1.5 1 0.75 0.5 0.33 0.25 Threshold  T20 I2 60 50  40  E 30 I  d 20 a W 10 0 90 75 U 3 60 Y a E 45 F ri 30 W 15 2 0 B Apriori  inverted 2 1.5 1 0.75 0.5 0.33 0.25 Threshold 223A T20 I6 2 1.5 1 0.75 0.5 0.33 0.25 Threshold  Figure 1 Execution time with different thresholds of datasets in Table1 110 


T10.14 16 a-Apriori  Inverted I APTID _I 1 2 3 4 5 Iteration  80 70 i7 60 50 E 40 F j 30 10 0 8 20 Figure T20 I 4 Apriori ApTlD 222 Inverted 1 12345678 2 Execution times of each iteration Iteration  some runs with low threshold These runs was abort because they tended to take too long time The runs with higher thresholds already show the trends of these curves 5 conclusion and future work In this paper we introduce the inverted method for the discovery of frequent itemsets of a transactional database The proposed method is level wise like apriori and it uses the apriori property for candidate generation However the counting operation of itemsets is based on a database transformation and the intersection operation The performance evaluation of the proposed method shows that it outperforms the existing algorithms The difference is by order of magnitude for large-scale datasets and for low support thresholds The experiments also show high scalability of the inverted method with number of items number of transactions, transaction size The study of the interactive techniques cashing of previous results and incremental mining techniques in the context of the inverted method can be a good point for further research and study References I R Agrawal T. Imielinski A Swami 223Mining Association Rules between Sets of Items in Large Databases\224 Proc ACM SIGMOD Int\222l Conf on Management of Data SIGMOD\22293 Washington D.C May 1993 pp. 207-216 2 R Agrawal and R Srikant 223Fast algorithms for mining Association Rules 224 Proc 1994 Int\222l Conf Very Large Data Bases Santiago, Chile Sept 1994 pp. 487-499 3 J Park, M Chen, and P Yu 223Using a Hash-Based Method with Transaction Trimming for Mining Association Rules 222 IEEE Trans on Knowledge and Data Engineering Vol 9 No 5 Sept./Oct 1997 pp 813-825 4 D Cheung J Han, V. Ng, and C Wong 222Maintenance of Discovered Association Rules in Large Databases An Incremental Updating Technique\222 Proc 1996 Int\222l Conf Data Engineering New Orleans Louisiana USA Feb 1996 SI A Savasere E Omiecinski and S Navathe 221A\221n Ef\222cient Algorithm for Mining Association Rules in Large Databases\222 Proc 1995 Int\222l Conf VLDB Zurich Switzerland Sept 1995 6 J Han and Y Fu 223Discovery of Multiple-Level Association Rules from Large Databases\224 Proc 1995 Int\222l Conf VLDB Zurich Switzerland Sept 1995 pp 420-43 1 7 R Srikant and R Agrawal 223Mining generalized Association Rules 222 Proc 1995 Int\222l Conf VLDB Zurich Switzerland, Sept. 1995 pp 407-419 SI V Ganti J Gehrke R Ramaknshnan 221Mining Very Large Databases 224 IEEE Computer 1999 special edition on Data Mining pages 38-45 9 D Tsur J Ullman S Abiteboul C Clifton R. Motwani S Nestorov A Rosenthal 223Query Flocks A Generalization of Association-Rule Mining\222 Proc ACM SIGMOD Int\222l Conf on Management of Data Seattle WA USA June 1998 IO R Agrawal and J Shafer 223Parallel Mining ofAssociation Rules 224 IEEE Trans on Knowledge and Data Engineering Vol 8 No 6 Dec 1996 pp 962-969 I I T Shintani and M Kitsuregawa 223Parallel Mining Algorithms for Generalized Association Rules with Classification Hierarchy 224 Proc ACM SIGMOD Int\222l Conf on Management of Data SIGMOD\22298 Seattle WA USA June 1998 I21 E Han G Karypis V Kumar 221Scalable Parallel Data Mining for Association Rules 224 Proc ACM SIGMOD Int\222l Conf on Management of Data SIGMOD\22297 Tucson Arizona USA May 1997, pp. 277-288 I31 S Sarawagi S Thomas R Agrawal 223Integrating Association Rule Mining with Relational Database Systems Alternatives and Implications\224 Proc ACM SIGMOD Int\222l Conf on Management OF Data Seattle WA USA June 1998  141 S Thomas S Sarawagi 223Mining Generalized Association Rules and Sequential Patterns Using SQL Queries\224 Proc 4\221h Int\222l Conf on Knowledge Discovery in Databases and Data Mining New York August 1998 IS R Agrawal K. Shim 223Developing Tightly Coupled Data Mining Applications on a Relational Database System\224 Proc 2\224d Int\222l Conf on Knowledge Discovery in Databases and Data Mining Portland Oregon, August 1996  161 Ashraf A.Amr 223Fast Mining of Interesting Association Rules for Large-scale Problems\224 M.Sc thesis Alexandria University Computers  Automatic Control Dept., Jan 2001 pp. 432-443 111 


25 221;i 20 0 I5 E 5 10 a ti5 0 T5.12 I 100 i 80 E 60  222 0 40 ti 20 0 500 i 400 E 300 i j 200   al i 100 0 2 i 1 1 100K 250K 500K 750K 1000K 100K 250K 500K 750K IOOOK IOOK 250K 500K 750K IOOOK Transactions Transactions  Transactions Figure 3 Number of transaction scale-up T 5 I2 I  FA\224,\224ri 1 i15  Inverted  al El I v SO5  K W  1 6  0 54 E C&i2 d F T10.14 0 1000 2500 5000 7500 10000 I I 0\222 I 1000 2500 5000 7500 10000 0 1000 2500 5000 7500 10000  Items  Items  Items Figure 4 Number of items scale-up Threshold 1000 Threshold 750 16 14 Apriori I Inverted a10  0 or 0 5 10 20 30 40 50 5 10 20 30 40 50 5 10 20 30 40 50 Transaction Size Transaction Size Transaction Size Figure 5 Transaction size scale-up 112 


items  1000 01 I I I 2 1.5 1 0.75 0.5 0.33 0.25 Threshold  items  5000 250  priori I lnvertec  Y 200 r E 150  i I 200 6 160  120 80 3 40 0 0 E Apriori  Inverted  I 2 1.5 1 0.75 0.5 0.330.25 Threshold YO items  2500 50 I I 45 j 40  35  30 E 25  20 0 15 Il 10 5 e-Apriori  lnvertec e-Apriori  lnvertec I 0\221 I 2 1.5 1 0.75 0.5 0.33 0.25 Threshold  200 8 160  120 222 80 ri 40 0 Q E items  7500 I e Apriori  I nvertec  2 1.5 1 0.75 0.5 0.330.25 Threshold  I 0 I 2 1.5 1 0.75 0.5 0.330.25 Threshold 221\221I\224 Figure 6 Problem size scale-up 113 


3 24 7 I Ishii Y Nakabo and M Ishikawa Target Tracking Algorithm for lms Visual Feedback System Using Massively Parallel Processing IEEE Int Con Robotics and Automation Minneapolis, I996.4.25 IEEE Int Con Robotics and Automation pp.2309-23 14 8 J.F Pusztaszeri P.E Rensing and T.M Liebling 1996 Tracking elementary particles near their primary vertex: a combinatorial approach Journal of Global Optimization 9 41 64 


I Plenary Panel Session J Future Directions in Database Research  456 Chair Surajit Chaudhuri Microsoft Corporation Panelists Hector Garcia-Molina Stanford University Hank Korth, Bell Laboratories Guy Lohman IBM Almaden Research Center David Lomet Microsoft Research David Maier Oregon Graduate Institute I Session 14 Query Processing in Spatial Databases I Chair Sharma Chakravarthy University of Florida Processing Incremental Multidimensional Range Queries in a Direct Manipulation Visual Query Environment  458 High Dimensional Similarity Joins Algorithms and Performance Evaluation  466 S Hibino and E Rundensteiner N Koudas and K.C Sevcik Y Theodoridis E Stefanakis and T Sellis Cost Models for Join Queries in Spatial Databases  476 Mining Association Rules Anti-Skew Algorithms  486 J.-L Lin and M.H Dunham Mining for Strong Negative Associations in a Large Database of Customer Transactions  494 A Savasere E Omiecinski and S Navathe Mining Optimized Association Rules with Categorical and Numeric Attributes  503 R Rastogi and K Shim Chair: Anoop Singhal AT&T Laboratories S Venkataraman J.F Naughton and M Livny Remote Load-Sensitive Caching for Multi-Server Database Systems  514 DB-MAN A Distributed Database System Based on Database Migration in ATM Networks  522 T Hara K Harumoto M Tsukamoto and S Nishio S Banerjee and P.K Chrysanthis Network Latency Optimizations in Distributed Database Systems  532 I Session 17 Visualization of Multimedia Data I Chair Tiziana Catarci, Universita di Roma 223La Sapienza\224 W Chang D Murthy A Zhang and T.F Syeda-Mahmood Global Integration of Visual Databases  542 X 


The Alps at Your Fingertips Virtual Reality and Geoinformation Systeps  550 R Pajarola l Ohler P Stucki K Szabo and P Widmayer C Baral G. Gonzalez and T.C Son Design and Implementation of Display Specifications for Multimedia Answers  558 1 Session 18 Management of Objects I Chair: Arbee Chen National Tsing Hua University P Boncz A.N Wilschut, and M.L. Kersten C Zou B Salzberg, and R Ladin 0 Wolfson S Chamberlain S Dao L Jiang, and G. Mendei Flattening an Object Algebra to Provide Performance  568 Back to the Future Dynamic Hierarchical Clustering  578 Cost and Imprecision in Modeling the Position of Moving Objects  588 ROL A Prototype for Deductive and Object-Oriented Databases  598 A Graphical Editor for the Conceptual Design of Business Rules  599 The Active HYpermedia Delivery System AHYDS using the M Liu W Yu M Guo and R Shan P Lang W Obermair W Kraus and T Thalhammer PHASME Application-Oriented DBMS  600 F Andres and K. Ono S Chakravarthy and R Le S Mudumbai K Shah A Sheth K Parasuraman and C Bertram ECA Rule Support for Distributed Heterogeneous Environments  601 ZEBRA Image Access System  602 Author Index  603 xi 


11  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02  data bindings domain-specific metric for assessing module interrelationship  interface errors errors arising out of interfacing software modules  Porter90 Predicting software  faults 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 From decision trees to association rules  Classifiers  223this and this\224 goes with that \223class\224  conclusions \(RHS\ limited to one class attribute  target very well defined  Association rules  223this and this\224 goes with \223that and that\224  conclusions \(RHS\ may be any number of attributes  But no overlap LHS and RHS  target wide open  Treatment learning  223this and this\224 goes with \223less bad and more good\224  223less\224,  \223more\224: compared to baseline  223bad\224, \223good\224: weighted classes Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


12  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Association rule learning  www.amazon.com  Customers who bought this book also bought  The Naked Sun by Isaac Asimov  The Caves of Steel by Isaac Asimov  I, Robot by Isaac Asimov  Robots and Empire by Isaac Asimov 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Support and confidence  Examples = D , containing items I  1: Bread, Milk 2: Beer Diaper Bread, Eggs 3: Beer Coke, Diaper Milk 4: Beer Bread, Diaper Milk 5: Coke, Bread, Diaper Milk  LHS  RHS = {Diaper,Milk  Beer  Support       =   | LHS U RHS|  / | D |       = 2/5 = 0.4  Confidence  =   | LHS U RHS |  / | LHS |    = 2/3 = 0.66  Support-based pruningreject rules with s < mins  Check support before checking confidence Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


13  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Example of supportbased pruning 4 Bread 1 Eggs 4 Diaper 3 Beer 4 Milk 2 Coke Count 1Item 3 Beer,Diaper 3 Milk, Diaper 2 Milk,Beer 3 Bread, Diaper 2 Bread,Beer 3 Bread,Milk Count 2Item 2 Milk, Diaper Beer 3 Bread,Milk Diaper Count 3Item Support-based pruning 225 Min support =3 Ignore subsets of items of size N 225 only if N-1 support > min-support Without pruning 6 C 1  6 C 2  6 C 3 41 With pruning: 6 + 6 + 2 = 14 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Classifiers versus Association rules \(again  Classifiers  Assume entire example set can fit into RAM  Association rule learners  can handle very big data sets  Agraw  t he APRIORI alg o r i t h m   very large data sets  10,000,000 examples  843MB Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


14  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 The Data Mining Desiderata Bradley  Require one scan \(or less\ of the database if possible  On-line \223anytime\224 behavior  223best\224 is always available, with status information on progress, expected remaining time, etc. provided  Suspendable, stoppable, resumable  incremental  progress saved to resume a stopped job  Ability to incrementally incorporate additional data with existing models efficiently  Work within confines of a given limited RAM buffer  Ooops, good-bye traditional classifiers e.g. C4.5  Argued against by some  223Memory is cheap\224: [W A R2 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Conf1  outlo o k overc a s t   1 0   82  40    84  40   4 0 0  Treatment learning sunny, 85 86 false none \(2 1 2 sunny, 80 90 true none sunny, 72 95 false none rain 65 70 true,          none rain, 71 96 true none rain 70  false some \(2 2 4 rain, 68 80 false,  some rain, 75 80 false some sunny,      69 70 false lots    \(2 3 8 sunny,      75 70 true lots overcast,     83  false lots overcast,     64  true lots overcast,     72  true lots overcast,     81 75 false lots outlook temp humidity wind hours on course A good attribute range 225 More frequent in good that bad 225 Weighted by 223distance\224good to bad 225 Normalized by total count 225 Summed for all good/bad class pairs Lots  none Lots  some Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


15  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 sunny, 85 86 false none \(2 1 2 sunny, 80 90 true none sunny, 72 95 false none rain 65 70 true,           none rain, 71 96 true none rain 70  false some \(2 2 4 rain, 68 80 false,  some rain, 75 80 false some sunny,      69 70 false lots    \(2 3 8 sunny,      75 70 true lots overcast,     83  false lots overcast,     64  true lots overcast,     72  true lots overcast,     81 75 false lots 0 1 2 3 attribute ranges with deltaf 4-2024681 conf1 225 treatments 002 attribute.range.conf1 > X 225 treatments|=N 225TAR2 = O\(2 N  225 fails for large N outlook temp humidity wind hours on course Conf1  outlo o k overc a s t   1 0   82  40    84  40   4 0 0  Lots  none Lots  some 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Treatments for golf 0 1 2 3 4 none some lots I f outl ook o verc as t Th en l o t s o f go l f  4 4  0 Least monitor watch the humidityalert if rising over 90 Least change pick a vacation location with overcast weather I f h u m i d i t y  90  97 Th en l o t s o f go l f  1 4  0 1 2 3 none some lots 0 1 2 3 4 5 6 none some lots If n o ch an ge Th en l o t s o f go l f  6 6 3 5  3  Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


16  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 6.7 <= RM < 9.8 And 12.6 <= Ptratio 15.9 BEST ACTION 0.6 <= NOX < 1.9 and 17.16 <= LSTAT < 39 WORST ACTION BASELINE 500 examples  of bad--, bad, ok, good Stop staring at the scenery and tell me where to steer or what to dodge 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Require overall require2 require3 require5 require4     action1 action1, action2, action3,  \205   Cost,    Benefit 1 Y              Y             N,        \205   23200,  250 2           N              N             Y ,       \205   11400,  150 205..       \205             \205            \205        \205   \205         \205 action2 fault2 fault3 fault1 JPL requirements Feather&Menzie Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


17  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case study 99 proposed actions for deep space satellite design; 2 99 10 30 options Each row is one project plan action1, action2, action3,  \205   Cost,    Benefit 1 Y              Y             N,        \205   23200,  250 2           N              N             Y ,       \205   11400,  150 205..       \205             \205            \205        \205   \205         \205 Learnt 225 Do 16 225 Don\222t do 14 225 Ignore 66 options 225 c.f. genetic algorithms Each dot  is one randomly generated project plan 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Pr of tampering 0.02 Pr of fire 0.01 Pr of smoke  given [fi  0.90 Pr of smoke  given [fi  0.01 Pr of report given [exodus=ye 0.75 Pr of report given [exodus=no 0.01 Pr of exodus given [alarm=yes 0.88 Pr of exodus given [alarm=no 0.001 etc tampering fire alarm smoke exodus run away report hello, operator I want to report a fire 0.02 0.01 Use Bayesian analysis to update probabilities given new information Use Bayesian analysis to update probabilities given new information Bayesian Tuning Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


18  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 tampering fire alarm smoke NO exodus report YES 0.50 was 0.02 0.03 was 0.01 Q1: What if there is a report, but no smoke Q1: What if there is a report, but no smoke Q2: What if there is a report, and smoke Q2: What if there is a report, and smoke tampering fire alarm smoke YES exodus 0.03 was 0.02 0.97 was 0.01 report YES Example from : [Poole98   p37 1 Source = http:// www.swi.psy.uva.nl/projects/SWI-Prolog/download.html http://www.cs.ubc.ca/spider/poole/ci/code.tar.gz Files    = code/acp/bnet.pl code/acp/bnet_t1.pl Bayesian Tuning 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Non-na\357ve model bayesian network Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


19  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Low testing effort EXPLAINS 1\ some observed operational defects  and 2\ low pre-release defects 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02  Ancestors  ancestor\(X,Y\:-parent\(X,Y  ancestor\(X,Y\:-parent\(X,Z\ancestor\(Z,Y  Lists  member\(X,[X|Z   member\(X,[Y|Z me mb er X Z   append X X   append\([X|X Y s X Z s  a ppe nd X s Ys Z s  Example Example action action hypothesis hypothesis p\(b,[b add clause p\(X,Y   specialize p\(X,[V p\(x,[a specialize p\(X,[X p\(b,[a add clause p\(X,[X p\(X,[V p\(X W Inductive Logic Programming Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


20  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 East-West trains 1. TRAINS GOING EAST 2. TRAINS GOING WEST 1 2 3 4 5 1 2 3 4 5 1. TRAINS GOING EAST 2. TRAINS GOING WEST 1 2 3 4 5 1 2 3 4 5 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 ILP representation  Example eastbound\(t1  Background theory car\(t1,c1\      car\(t1,c2\       car\(t1,c3\.      car\(t1,c4 rectangle\(c1\  rectangle\(c2\     rectangle\(c3\.   rectangle\(c4 short\(c1\      long\(c2\.          short\(c3\       long\(c4 none\(c1\.        none\(c2\.          peaked\(c3\.      none\(c4 two_wheels\(c1\  three_wheels\(c2\two_wheels\(c3\two_wheels\(c4 load\(c1,l1\.     load\(c2,l2\       load\(c3,l3\    load\(c4,l4 circle\(l1\      hexagon\(l2\       triangle\(l3\    rectangle\(l4 one_load\(l1\  one_load\(l2\.      one_load\(l3\    three_loads\(l4  Output ne\(C Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


21  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Predicting Correctness Almei NewID CN2 C4.5 C4.5_rule FOIL Accuracy 52 54 66 68 73 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 FOIL\222s best rule high\(A executable\(A,B maximum_statement_nesting_depth\(A,C lines_of_comments\(A,B commentsdivsize\(A,E n1\(A,F n2\(A,G less_or_equal\(E,F not less_or_equal\(B,G C <> 4 C <> 43 less_or_equal\(C,D High faults when comment density <= #operators and executable statements > #operators and max nesting <= number of lines of comments and max nesting is not 4 or 43 High faults when comment density <= #operators and executable statements > #operators and max nesting <= number of lines of comments and max nesting is not 4 or 43 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


22  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Inside  some learners  neural nets  genetic algorithms  decision tree learners  association rule learners  treatment learners  bayesian tuning  inductive logic programming 225 sub-symbolic locally guided descent symbolic, global search 225 recursive diversity reduction 225 this goes with that CLASS 225 this goes with that 225 asses 225 a little model goes a long way 225 Horn clauses  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case studies predicting effort \(45 predicting faults \(51 model-based ML \(54 early lifecycle project planning \(60 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


23  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case study How can we estimate earlier in the life cycle  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Predicting development times in months\Srinivasan95 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


24  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Bayes for effort Chulani99  The COCOMO-II project  Open-source software cost estimation  Reuse vs effort XH : multiple product lines VH : across product lines H : across program N : across project L  : none  Regression over data from 83 software projects  Regression conflicted with \223Delphi values\224  Tune regression values using Delphi expectations 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 Low N H VH XH Delphi Regression Adjusted Da ta   reus e low e rs effo r t Ex pe ct e d  reus e incre a se  effo r t    251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 COCOMO-II \(1998\COCOMO-II \(1997 Pred\(30 Pred\(25 Pred\(20 Pred\(X 52 49 46 83 projects 63 59 54 161 projects 7561 68 55 63 48 161 projectsbased on Bayesian 161 projectsbased on Delphi Percentage of estimated effort within X of actual Conclusion data + delphi tuning\a Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


25  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Neural Network Count the wi dge ts in the I n te r f ace to es ti m a te e f f o r t  Labels Edit Boxes Grid Boxes Check Boxes Buttons 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Neural Network Subsystem Pred\(25 MARE Buyer Admin 80 17.6 Buyer Client 80 14.6 Distribution Server 20 96.7 Supplier Client 90 12.2  12 Different Widgets Counted and associated with effort Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


26  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Case study: Predicting software 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Predicting software  faults Khoshgoftaar99 Whi c h d o g s di d not ba r k  225 42 attri b ute s  in dat a s e t 225 Only 6 in the l e arnt th e o ry Diffe re nt attri b ute s than b e fore 225 223c au se s f a u l t 224  do m a in s pec i f i c 225 Me thod for fin d ing fa ult s  gen e r a l Whi c h d o g s di d not ba r k  225 42 attri b ute s  in dat a s e t 225 Only 6 in the l e arnt th e o ry Diffe re nt attri b ute s than b e fore 225 223c au se s f a u l t 224  do m a in s pec i f i c 225 Me thod for fin d ing fa ult s  gen e r a l Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


27  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Issue of generality  Specific conclusions may not apply to general projects  Proposal one  Intra-project learning  Lessons should generalize across the same developer methodology, application and tool set  Proposal two  Inter-project learning  Need larger training set  COCOMOII uses 161 projects  Note: two = N * one Khoshgoft good bad Tia bad good  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Model-based ML Bratko89,Pearc Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


28  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Model-based ML simple e.g sum\(X,  Y Z sum   sum   sum\(0 0 0 sum 0  sum 0  sum\(0   sum\(0   sum  Any sum  Any if X >0 X\222=      if X < 0 0 if X= 0  switch\(State,Volts,Amps switch\(on,       0,     Any switch\(off,      Any,   0 blub\(Mode,Light,Volts,Amps bulb\(blown,dark, Any 0 bulb\(ok,     light   bulb\(ok,    light   bulb\(ok,    dark 0 0 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 A qualitative circuit go  :tell\('circ.data'\ go1, told go1 :functor\(X,circuit,9\ forall\(X, example\(X example\(circuit\(Sw1,Sw2,Sw3,B1,B2,B3,L1,L2,L3\classification\(B1,B2,B3,Class format\('~a,~a,~a,~a,~a,~a,~a~n Sw1,Sw2,Sw3,L1,L2,L3,Class  classification\(B1, B2, B3,Class needs 2 our of three bulbs working classification\( ok, ok, B3,   good classification\( ok, B2, ok,   good classification\( B1, ok, ok,   good classification\( B1, B2, B3,   bad Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


29  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Results from > 700 examples circ.names good,bad switch1: on, off switch2: on, off switch3: on, off bulb1: light, dark bulb2: light, dark bulb3: light, dark Command line c4.5 -f circ -m 2 W a t c hing bulb1 tells us th e rest Insight f ul  Or dull W a t c hing bulb1 tells us th e rest Insight f ul  Or dull 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 More Model-based ML Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


30  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 ca n we r e v i s i t thos e warranti e s   Run 1 35,000 tions  Learn 1  Run 2 if Sw2c=off then 3264 tions  Learn 2  Run 2 if Sw2c=off n then 648 tions  Learn 3 Ca n\222t clos e  Sw3c warranty issu es No b u d g e t  for e x p e ns i v e ha rd wa r e 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 3 \223tunings\224 5 SLOC guesstimates 150,000 runs Treatments for software projects Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


31  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 flex=1 pmat=3 sced=2 rest anything from kc1 150,000 runs 150,000 runs Treatments for software projects \(ii 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 pmat=2 acap=2 sced=2 rest anything from kc1 30,000 runs 30,000 runs Treatments for software projects \(iii Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


32  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 ons discussion \(64 downloads \(69 further reading \(71 references \(72 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Will you try ML  Have we motivated you  Will you rush home and do ML on your data  Clearly  ML algorithms work  Caution  you may find it harder than you think Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


33  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Many ways to learn numerous case studies but there is still a problem Theme Learning is a solved problem \(sort of Data collecting and modeling is not 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Be warned match your ML goals to your software process level Project metrics coarse-grain conclusions Product metrics product learning Process metrics process learning Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


34  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Also, match your tool to task Task ML Tool Assembly line robot deciding what to reject Decision tree learner Repair robot trying to do the least to fix the rejected parts Treatment learner Predicting the life of a robot Neural Network Optimizing the assembly line Genetic Algorithm If clustering when no classes iation rule learning If simple background knowledge Bayesian If complex relational background knowledge ILP 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Have we learnt enough  Not yet  But wait Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


35  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Cost = $0  WEKA  E.g. http://www.cs.waikato.ac.nz/~ml/weka/: ML in JAVA 003 decision tree inducers,rule learners, naive Bayes, decision tables locally weighted regression  GDB_Net  http://nas.cl.uh.edu/boetticher/gdb_net.zip  TAR2  http://www.ece.ubc.ca/twiki/bin/view/Softeng/TreatmentLearner  APRIORI  http://fuzzy.cs.uni-magd eburg.de/~borgelt/apriori/apriori.html#download  And many others  E.g. ML  A public domain \223C\224 library of common algorithms  Naive Bayes, ID3, MC4 , Decision Tables ,   Holte's OneR CN2,\205  http://www.sgi.com/tech/mlc/utils.html 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Cost > $0  C4.5  Comes with the book Quinlan  C5.0  http://www.rulequest.com/download.html  Microsoft SQL SERVER 2000\231  Comes with numerous machine learning tools  Proprietary algorithms  Etc  223data mining\224 \223commercial software\224 in Google  3,340 links  223data mining consultancy\224 in Google  850 links Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


36  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 Further reading  Mendonca  great rev i e w art i cl e on ML  Large list of available tools  All the things you can do with a decision tree [Menzies0  Treatment learning: [Menzies01a  Michalski\222s excellent survey of ML types [Michalski  Neural nets: [Boetticher01  Special issue SEKE journal, knowledge discovery Morasca99  Inductive logic programming [Bergadano95,Cohen95  Come by IJCAI 2011 and I\222ll tell you all about it\222s applications  Genetic algorithms: [Goldberg8  Bayesian learning [Cheeseman88 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 References  Agrawal  Agrawal, R., and T.Imeilinski and A.Swami \223Mining Association Rules between Sets of Items in Large Databases,\224 Proceedings of the 1993 ACM SIGMOD Conference Washington DC, USA  Bergadan  Bergadano, F., and D.Gunetti Inductive Logic Programming: From Machine Learning to Software Engineering The MIT Press, 1995  B  Berry, M. J. A., and G., Linoff Data Mining For Marketing, Sales, and Customer Support John Wiley Sons, Inc., New York, 1997  Boetticher01  Boetticher, G., "An Assessment of Metric Contribution in the Construction of a Neural Network-Based Effort Estimator Second International Workshop on Soft Computing Applied to Software Engineering  Enschade, NL, 2001 Available from http://nas.cl.uh.edu/boetticher/publications.html  Boetticher01  Boetticher, G., "Using Machine Learning to Predict Project Effort: Empirical Case Studies in Data-Starved Domains First International Workshop on Model-based Requirements Engineering San Diego, 2001 Available from http://nas.cl.uh.edu/boetticher/publications.html  Bradley  Bradley, P., U. Fayyad, and C. Reina. \223Scaling clustering algorithms to large databases\224. In KDD'98  B  Bratko, I., I. Mozetic, and N. Lavrac KARDIO: a Study in Deep and Qualitative Knowledge for Expert Systems MIT Press, 1989  Breim  Breiman, L., J. Friedman, R. Olshen, C. Stone, \223Classification and Regression Trees,\224 Wadsworth International Group, 1984 Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


37  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 References  Burgess  Burgess, C.J., and Martin Lefley. \223Can genetic programming improve software effort estimation? A comparative evaluation,\224 Information and Software Technology er 2001  Cheesem  P. Cheeseman, D. Freeman, J. Kelly, M. Self, J. Stutz, and W. Taylor. \223Autoclass: a bayesian classification system,\224 In Proceedings of the Fifth International Conference on Machine Learning  Morgan Kaufman, 1988  Chulani  S.Chulani,  B. Boehm, and B. Steece 223Bayesian analysis of empirical software engineering cost models,\224 IEEE Transaction on Software Engineering 25\(4\ly/August  1999  Cohe  W. W. Cohen, \223Inductive specification recovery: Understanding software by learning  from example behaviors,\224 Automated Software Engineering 2:107-129, 1995  DeJon  DeJong, K.A., and Spears, W.M. "An Analysis of the Interacting Roles of Population Size and Crossover in Genetic Algorithms Proc. First Workshop Parallel Problem Solving from Nature  Springer-Verlag, Berlin, 1990  Dietteric  Dietterich, T. G., \223Machine Learning  Research: Four Current Directions,\224 AI Magazine 18 \(4\97 Pp. 97-136. Available from ftp://ftp.cs.orst.edu/pub/tgd/papers/aimag-survey.ps.gz  s  Feather, M.S., and T. Menzies: \223Converging on the Optimal Attainment of Requirements IEEE Joint Conference On Requirements Engineering  ICRE'02 and  RE'02 9-13th September, University of Essen, Germany, 2002. Available from http://tim.menzies.com/pdf/02re02.pdf 251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02 References  Fenton00  Fenton, N., and  M. Neil \223Software Metrics: A Roadmap,\224 International Conference on Software Engineering, 2000. Available from http://www.dcs.qmul.ac.uk/~norman/papers/metrics_roadmap.pdf  Goldberg  Goldberg, D.E Genetic Algorithms in Search, Optimization, and Machine Learning Addison-Wesley Reading, Massachusetts, 1989  Khoshgoftaar  Khoshgoftaar, T.M., and E.B. Allen. \223Model software quality with classification trees,\224 in H. Pham, editor 223Recent Advances in Reliability and Quality  Engineering\224, World Scientific, 1999  Mendonc  Mendonca, M., and N.L. Sunderhaft, \223Mining Software Engineering Data: A Survey,\224 A DACS State-ofthe-Art Report September 1999. Available from http://www.dacs.dtic.mil/techs/datamining  Menzie  Menzies, T., \223Practical Machine Learning for Software Engineering and Knowledge Engineering,\224 ftware Engineering and Knowledge Engineering volume 1, 2001\vailable from http://tim.menzies.com/pdf/00ml.pdf  Menzies01a  Menzies, T., and Y. Hu, \223Reusing models for requirements engineering,\224 First International Workshop on Model-based Requirements Engineering 2001. Available from http://tim.menzies.com/pdf/01reusere.pdf  Menzies01b  Menzies, T., and Y. Hu, \223Constraining discussions in requirements engineering,\224 First International Workshop on Model-based Requirements Engineering San Diego, 2001. Available from http://tim.menzies.com/pdf/01lesstalk.pdf  Menzie  Menzies. T., and J. Kiper, \223Better reasoning about software engineering activities,\224 Automated Software Engineering 2001. Available from http://tim.menzies.com/pdf/01ml4re.pdf Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


38  251 2002 Tim Menzies, Gary D. Boetticher Page  SEW-27 Tutorials '02  Michalski90   Michalski, R.S., \223Toward a unified theory of learning,\224  In B.G. Buchanan and D.C. Wilkins, editors 223Reading in Knowledge  Acquisition and Learning\224, pages 7--38. Morgan Kaufmann, 1993  Mitchell  Mitchell, T Machine Learning McGraw-Hill, 1997  Morasca99  Morasca, S., and Gunther Ruhe, Guest editors' introduction of the Special issue on \223Knowledge Discovery from Software Engineering Data,\224 International Journal of Software Engineering and Knowledge Engineering October, 1999  Pearce  Pearce, D., \223The induction of fault diagnosis systems from qualitative models,\224 in Proc. AAAI-88 1988  Poole9  Poole, D. L.,  A. K. Mackworth, and R. G. Goebel Computational Intelligence: A Logical Approach  Oxford University Press, New York, 1998  Porter9  Porter, A.A., and R.W. Selby  \223Empirically guided software development using metric-based classification trees,\224 IEEE Software Pp. 46-54, March 1990  Quinla  Quinlan, R C4.5: Programs for Machine Learning Morgan Kaufman, 1992  Srinivasa  Srinivasan, K., and D. Fisher,  \223Machine learning approaches to estimating software development effort,\224 IEEE Transactions on Software Engi neering Pp. 126-137, February 1995  Tian9  Tian, J., and M.V. Zelkowitz 223Complexity measure evaluation and selection,\224 IEEE Transactions on Software Engineering 21\(8\p. 641-649,  August 1995  Webb0  Webb, G., \223Efficient search for association rules,\224 Proceeding of KDD-2000 Boston, MA,  2000  Zhang0  Zhang, Du, \223Applying Machine Learning Algorithms in Software Development,\224 Modelling Software System Structures in a fastly moving scenario Santa Margherita Ligure, Italy, 2000 References Proceedings of the 27th Annual NASA Goddard Software Engineering Workshop \226 Tutorial Notes \(SEW\22202 0-7695-1854-0/02 $17.00 \251 2002 IEEE 


