Design of Software Security Detection System Based on System Call Sequences Jingfeng Xue 1 Changzhen Hu 1 Kunsheng Wang 2 Rui Ma 1 Zhian Fan 1 1 School of Software, Beijing Institute of Technology, Beijing, 100081, China 2 China Aerospace Engineering Consultation Center, Beijing 100048, China xuejf@bit.edu.cn  Abstract The sequences of system calls can indicate the running behavior feature of application software, so it can be used in software security detection. In this paper, by researching and analyzing system call sequences in the process of software execution, a software security detection system based on system call sequences is designed. Basic system call sequences are mined by association rules, and then they are transformed to equivalent call sequence set to build knowledge base for software security detection. The experiment shows detection capability of the detection system is better by sufficient training data Key words Software Security, System Calls, Association Rules Detection System I INTRODUCTION With the application of all kinds of software in various fields security problem of software is more and more important. The purpose of software security detection is to detect security problem in software, and improve security performance of software. [1  There are two detection approaches: dynamic detection and static detection. In dynamic detection, outside appearance of software execution is used to detect security problem. In static detection, the code of software and its inner structure are concerned more In dynamic detection, it is necessary to identify whether running features of a software, e.g. execution process resource usage, authority variety etc., are uniform with those in the normal situation. [2 Th er e a re t w o t y p es o f i n f o r m a tion  generated in the process of software running: one is the published information by operation system or software, e.g system running statistical information, program log, operation system log; the other is the information from interface of operation system, e.g. system calls, library function calls. [3 It is usually easy to get the published information by reading log files or other files. But the information is less and its universality is not good On the contrary, it is complex to get the information from interface of operation system because some codes or module need to be added to the kernel of operation system. But the acquired data are accurate. There are two kinds of research methods in this field: analyzing system call sequences or library function call sequences. Researchers found that analyzing system call sequences to detect software security is more available than analyzing library function call sequences   In this paper, system call sequences in the process of software execution are researched and software security detection system \(SSDS\ed on system call sequences is designed. Moreover, we construct a detection knowledge base which can help the detection system to achieve detection function II SYSTEM STRUCTURE Software security detection method in this paper is based on system call sequences and need to obtain system call sequences in the process of software execution. Only in kernel mode of operation system, system call sequences can be obtained, so we must modify kernel of operation system Linux is a open platform and its performance is better, so we designed software security detection system based on Linux 2.4 The software security detection system \(SSDS\ consists of Data Collection Unit \(DCU\ Analysis Unit \(DAU Response Unit \(RU\, Management Unit \(MU\Knowledge Base \(KB\ystem structure is shown in Figure 1 Figure 1 Structure of software security detection system A Data Collection Unit Data Collection Unit is used to obtain information of application software calling system calls, so it will run as a part of kernel. There are two tables, IDT and sys_call_table, in Linux kernel based on X86. IDT is called interrupt vector table. IDT records the address of interrupt processing function and it is managed by operation system. When an interrupt appears, CPU will find corresponding processing function by IDT and execute it. In the computer based on X86, abnormal 9 7 


and nonmaskable interrupt processing function are recorded in item 0 – 31 of IDT, maskable interrupt processing function is recorded in item 32 – 47, and software interrupt processing function is recorded in item 48 – 255. In Linux, only item 0x80 is entrance of system calls and function system_call is put in. This function finds out actual system call processing function by another table sys_call_table. For example, when function open is called by a program of C Language, actual call process is shown in Figure 2 Figure 2 Process of application software calling system calls In order to get information of system calls before function is processed, Data Collection Unit need to be inserted in IDT or sys_call_table. We modify all address of processing functions in sys_call_table to the address of data collection function Thus, when a system call is called by application software data collection function will be executed firstly by kernel and then original processing functions are executed. So, data collection is finished. For example, when function open is called by a program of C Language, renewed call process is shown in Figure 3 Figure 3 Process of application software calling system calls with data collection function Data Collection Unit is designed as Linux Kernel Module LKM\e module is loaded, functions which need to be finished includes: backuping table sys_call_table modifying table sys_call_table and renewing all item by ssds_collect, adding support /dev/ids. When the module is unloaded, functions which need to be finished includes canceling support /dev/ids, restoring table sys_call_table There is a monitoring program table in Data Collection Unit which records process number of all program which be monitored B Data Analysis Unit In order to make the software security detection system works normally, we need to train it firstly to generate the knowledge to knowledge base. In training mode, no detection is done by Data Analysis Unit. Data Analysis Unit read system call records from /dev/ids directly and write them to data file to generate detection knowledge for use When the software security detection system is used practically, the knowledge base is not empty. Data Analysis Unit will match system call records from /dev/ids and the knowledge in knowledge base. If mismatch degree is greater than a threshold, it will send alarm to Response Unit Data Analysis Unit must read data from device /dev/ids as soon as possible because storage space of the kernel is limited and Data Collection Unit can only save recent generated call records. Data Analysis Unit runs in user space and its storage space is relatively large, so reading data takes precedence of analyzing data C Management Unit The software security detection system can finish software security detection function independently. Management Unit is used to manage and config the system and its management function includes: reading configuration file, starting and closing the system D Response Unit The software security detection system can responses security events by Response Unit. Possible response includes sending alarm to manager, restarting or closing software automatically, recording log, etc. Actually response method is configed in advance by manager according to essentiality and characteristic of monitored software. For example, when the detection system detect out abnormal FTP service software, it can restarting or closing the software directly. But for a Web or database service software, the system should keep it run unceasingly and inform the event to manager to treat with it III CONSTRUCTING KNOWLEDGE BASE In order to construct knowledge base, basic system call sequences in program must be found firstly. Basic sequence is sub call sequence which appears frequently in the process of software executio For the following codes f1 if\(bar1  f2  f3  else  f4  f5  f6 Two system call sequences, ”f1, f2, f3, f6” and ”f1, f4, f5 f6”, can be generated. When the code segment is executed repeatedly, these two call sequences will appear frequently 98 


They represent two execution branch of the program, so they are basic system call sequences A Obtaining Basic Sequence by Association Rule There is strong correlation among basic sequences. In order to obtain these basic sequences with strong correlation association rules mining can be used. In this paper, we use Apriori algorithm to mine basic sequences from call sequences and then construct knowledge base by these basic sequences 5   1  Constructing Call Itemset First, by a sliding window whose size is N, system call sequences are decomposed to multiple shorter sequences whose length is N and form call sequence set. For example when N is 3, call sequence set {abc  bcd  cde  def} can be generated by system call sequence ”abcdef”. We can obtain longer basic sequence by connecting two shorter basic sequences. Then, we combine call serial number and its position serial number for every sequence. Upon that, the sequences are transformed to item which can be used in data mining and the sequence sets are transformed to itemset. For example, call sequence ”abc” can be transformed to item  a1,b2,c3  Thus, the same system call in different position corresponds to different item  2  Mining Association Rules by Apriori Algorithm There are 3 steps to mine association rules by Apriori algorithm  Generate all frequent itemsets whose support is larger than the minimum support value  For each frequent itemsets, generate all rules whose confidence is larger than the minimum confidence value. E.g. for a frequent itemset L and its subset S\(S  L-S  the minimum confidence, the rule, L-S=>S, is an effective association rule  Transform the rule to basic sequence by its position information. E.g. the association rule ”a1, b2=>c4” can be transformed to basic sequence ”p1=a, p2=b, p4=c  3  Deleting Redundant and Invalid Sequence Based Axis Attribute In call itemset, the 2nd to the Nth of a call sequence are the same with the 1st to the \(N-1\st of the next call sequence. So there are some redundant basic sequences. Moreover, field knowledge has not been considered in basic Apriori algorithm so there may be some invalid rules. Therefore, we delete redundant and invalid sequence by axis attribute and only remain those basic sequences which are relevant with axis attribute B Constructing Knowledge Base by Basic Sequences Call relations can be reflected distinctly by basic call sequences. But it is not easy to perform matching operation So we need transform it to corresponding equivalent call sequence set. Every item in call sequence set is represented by regular expression. [5 Call relations in Figure 4 is equivalent to 3 call sequences as follows Figure 4 An example of call relations S1=”EN, C1, C2, PN, C3, EN S2=”EN, C1, PN, PN, C3, EN S3  S2   There are several nodes and edges which record the relation of system calls in Figure 4. Each node represents a system call Pseudo node \(PN\ single wildcard and it represents only one system call. End node \(EN\multiple wildcard and it represents 0 or more system calls. The edges represent successive call sequence. We can use serial number of system call to represent a no The equivalent call sequence set represented by regular expression is the knowledge of the knowledge base IV DETECTING PROCESS OF SOFTWARE SECURITY Firstly, we define mismatch degree as the minimum mismatch call number between actual call sequences and every sequence in equivalent call sequence set by regular expressio  For example, there are call sequence set as follows S1=”EN, C1, C2, PN, C3, EN S2=”EN, C1, PN, PN, C3, EN S3  S2   Suppose a call sequence, ”C1, C2, C2, C3”, is obtained in real running process. It can match either S1 or S2, so the mismatch degree is 0. If a call sequence ”C1, C2, C3, C4” is obtained. There is 1 mismatch between this sequence and S1 or S2, so the mismatch degree is 1. In normal situation, call sequences generated by software should match equivalent call sequence in knowledge base or has a very small mismatch degree. If mismatch degree is greater than a threshold, it shows software execution is not normal and security problem appears When the software which is detected calls system calls system will be in kernel mode. Current system call number is obtained from kernel by Data Collection Unit and is transmitted to Data Analysis Unit. Data Analysis Unit performs match operation between current system call and call sequences in knowledge base and detect their mismatch degree. If mismatch degree is greater than certain threshold, it will inform Response Unit. After getting abnormal data Response Unit will report to Management Unit by management interface and execute corresponding response operation V CONCLUSION It is a main approach for operation system to serve for user by system calls, so there has great advantage to detect software security by analyzing system calls. In this paper, we design a software security detection system based on system 9 9 


call sequences. In the system, basic sequences can be mined using system call sequences by association rules and can be transformed to equivalent call sequence set to construct knowledge base, and then software security detection function can be implemented. Experiment shows the software security detection system has better detection capability with enough training data and the veracity of detection result is higher by using appropriate mismatch threshold. So, the software security detection system is valid ACKNOWLEDGMENT This paper is supported by the National High-Tech Research and Development Plan of China under Grant No.2009AA01Z433 REFERENCES 1    YS  C h a o  Q M   Z h eng M o d e l ba s e d  s e c u rity pre d iction and a n aly s i s o f  software,”  Computer Engineering and Design, vol 29\(14\.36693672, 2008 2   Se an  Barn u m  G a ry McG r a w  Kn o w led g e fo r So ftw a r e Se cu rit y  I E EE  Security and Privacy, v.3 n 2, p.74-78, 2005 3    A Main, P  C v a n Oo r s cho t S o f t ware Protection and  Application  Security: Understanding the Battleground. International Course on State of the Art and Evolution of Computer Security and Industrial Cryptography, Heverlee, Belgium, Springer LNCS, 2003 4    Ji m i n L i  Zhe n L i  Kunlun Li. Dete ct io n an d Class i f i c ation o f  NonselfBased on System Call Related to Security, Journal of Computers,vol 4\(11\17-1124, 2009 5    JF Xue  CZ Hu KS Wang. Constr uc ting a Kn owled ge B a s e f o r  software Security Detection Based on Similar Call Graph Proceedings of the 2009 International Conference on Computer and Electrical Engineering, ICCEE 2009, p 507-510, 2009 100 


Try to derive association rules containing the itemsets that use-specified in 1 L as follow The confidence of 1 1 BE  000  is  1  1   1 1  1 1,3,5 60  1,3,5,9,10 card B E conf B E card B TT T minconf TT T T T   000    000\037  Analogously, the confidence of 2 1 BE  000  is also 60 minconf  So, both of the rules can’t be add into rule sets RL Generate frequent 3- elementary sets contain B and E to form 3 L by performing intersection operation between elementary sets in 2 L and 1 L  For example  1 1  3  1 3 BE C BC 010    010  010 000\037   E  can be put into 3 C as the support of which is  1,3,5 3 TT T minsup TDB   The result is  3  1 3 1   2 1 L BC EB DE  010=\010 010=\010      Try to derive association rules containing the itemsets that use-specified in 3 L as follow 13 1 BC E 010  000  the confidence is 75 minconf  21 1 BD E 010  000  the confidence is75 minconf  Then, add these two rules into RL and delete 1 3 1  BC E 010  010  2 1 1 BDE 010 010  from 3 L   Now 3 L become empty, so output the rules in RL end TABLE II  A N E XAMPLE  TID A  B  C  D  E  T1 0 1 3 1 1 T2 0 2 0 1 1 T3 0 1 3 0 1 T4 1 2 3 1 1 T5 2 1 3 2 1 T6 1 2 1 1 1 T7 1 2 3 2 0 T8 0 2 0 1 0 T9 1 1 1 1 0 T10 2 1 3 1 0 VI  C ONCLUSIONS  In this paper, on the basis of the literature research, we introduce a data mining language. From the data mining language, users can specify the interested items or the sequences, and the minimum support and the minimum confidence threshold to discover interesting multidimensional association rules. And then according to Rough set theory, we transform multi-dimensional association rules to elementary sets description, antecedents corresponding with feature classes, consequent corresponding with concept in RS, and then propose the efficient data mining algorithm MIMAR-RS to process the user requirements, combined with the idea of generating frequent itemsets dynamically thus reducing the search space to produce frequent itemsets reducing the time complexity. Furthermore, it can avoid redundant rules R EFERENCES  1  Wu shen, Gao xue-dong, M.Bastien Data warehouse and data mining Metallurgical Industry Press, Beijing, 2003 2  Agrawal R, Imielinski T, and Swami A Mining Associations Between Sets of Items in Massive Databases In: Proc. of the 1993 3  Agrawal R,Srikant R. Fast Algorithms for Mining Association rules In: Proc. VLDB’94, Santiago, Chile, 1994, pp. 487~499 4  Savasere A., Omieciniski., Navathe S. An efficient algorithm for mining association rules in large database. In: Proc. VLDB’95 Zurich,1995, pp.432~443 5  Han, J, Pei, J. Mining frequent patterns by pattern-growth Methodology and implications. In Proceedings of ACM SIGKDD international conference on knowledge discovery and data mining 2000, pp.30–36 6  Pei, J, Han, J. Can we push more constraints into frequent pattern mining? In Proceedings of ACM SIGKDD international conference on knowledge discovery and data mining. 2000, pp.350–354 7  Meo, R., Psaila, G., & Ceri, S. A new SQL-like operator for mining association rules. In Proceedings of international conference on very large data base. 1996, pp.122–133 8  Yen, S.J.Chen, A.L.P. An efficient data mining technique for discovering interesting association rules. In Proceedings of international conference on database and expert systems applications DEXA\ 1997, pp. 664–669 9  Huang Yong, Liu Feng. A New Algorithm for Data mining of Multidimensinal Association Rules in Relational Database. Computer Applications and Software, 2008,24\(10\ , pp.60-61,83   Zhu Ming. Data Mining.Hefei:University of science and technology of China Press. 2002   Hettich, S. and Bay, S. D. \(1999\. The UCI KDD Archive http://kdd.ics.uci.e  I r vi n e  CA: Un i v ers i t y of C a li forn ia  Department of Information and Computer Science,1999   Zhang Wenxiu etc.Rough Set Theory and Method.Beijing:science press.2001   Lv Yue-Jin, LiuNan-Xing, Chen Lei. Rough Set Attribute Reduction Algorithm Based on PGA. Computer Science, 2008,35\(03\, pp.219221   Li Jin-hai, Lv Yue-jin. Relation matrix-based algorithm for reduction of attribute in information systems. Computer Engineering and Applications, 44\(09\ , pp.147-149,189   Chen Xin-ying, Li Xiong-fei. Parallel algorithm of attribute reduction in rough set. Journal of Computer Applications, 2007,27\(08 pp.1964-1966   Wang Jia-wei, Huang Da-rong2, Lei Ming. Optimal control of traffic flow based on rough theory and fractal theory. 2008,28\(05\, pp.12001203  
38 
38 


  Fig 4-1. Casual adjustment using Apriori algorithm  Fig 4-2. Casual adjustme nt using interested fuzzy calendar casual associated rule  Reference 1 Wan-Jui Lee. Discovery of fuzzy temporal and periodic association rules. National Sun Yat-Sen University Department of Electrical Engineering. 2008 2 Guo Hongwei, Gao Xuedong, Chen Lingkun, Yang Tianjun. Application of multidimensional time series fuzzy association rules for hot metal temperature forecasting in a blast furnace. Journal of University of Science and Technology Beijing, pages 553~557, 2008 3 Pan Yan, Ma Hui. Discovery of fuzzy temporal association rules within valid time intervals. Journal of The Graduates Sun Yat-Sen University\(Natural Sciences 001 Medicine\, pages 80~89, 2006 4 Hei Bing. correlative research on association rules data mining algorithm. 2001 5 Zhou Haofeng, Zhu Yangyong, Shi Baile. A mining algorithm for association rules based on interest measure Journal of Computer Research and Development, pages 450-457, 2002 6 Jiawei Han, MiCheline Kamber. Data Mining: Concepts and Techniques. China Machine Press, 2001 7 Sun Zhenming, An Weiguang, Zhang Hui, Jiang Xingwei Improved algorithm for AHP based on data mining for spacecraft data analysis. Journal of Harbin Engineering University, pages 704~708, 2006 8 Sun Zhenmin, An Weiguang, Zhang Hui. Research on causal adjustment technology in applying to sp acecraft data prediction. Journal of Astronautics, pages 1324~1327 2006   Forecasting Time Horizon\(Day Battery voltage\(volt Battery voltage\(volt Forecasting Time Horizon\(Day Raw Data 000ü\000 Projected Trend Prediction Intervals Raw Data 000ü\000 Projected Trend Prediction Intervals 
33 
33 


References attribute In this paper we discussed how to model domain knowledge with a semantic network and apply it to association rule analysis Our semantic association rule analysis can generate semantically valid hypothesis and assess data quality We successfully applied our method to a public health dataset and obtained promising results This work is funded by National Science Foundation grant CNS 0851984 and Department of Homeland Security grant 2009-ST-061-C10001  Agra w al R Mannila H  Srik an t R T oiv o nen H and Verkamo A I Fast Discovery of Association Rules In Advances in Knowledge Discovery and Data Mining U M Fayyad et al Eds AAAI press 1996  Ba y ardo R J a nd Agra w al R Mining the Most Interesting Rules In Proceedings of the Fifth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining San Diego CA United States August 15 18 1999  Chen P  V erma R  Meininger J C a nd Chan W 2008 Semantic analysis of association rules In Proceedings of the International FLAIRS Conference FL USA 2008  Eissa M Meininger J C Nguy en T a nd Chan W The Relationship of Ambulatory Blood Pressure to Physical Activity in a TriEthnic Population of Obese and Nonobese Adolescents American Journal of Hypertension Volume 20 Issue 2 Pages 140-147  Gupta N K Mueller W H Chan W and Meininger J C Is Obesity Associated with Poor Sleep Quality in Adolescents American Journal of Human Biology  the O\003cial Journal of the Human Biology Council 14\(6 2002 7 7 Related Work 8 Conclusion Acknowledgments BBC shows that the attributes in the dataset are semantically self-closed since not many hypothesis can be generated which indicates that the Heartfelt study was very carefully designed Association rule mining has been proved to be very useful in many applications One major obstacle in practice is how to identify correct interesting user-speci\223c rules from a huge number of redundant wrong or trivial rules Recently association rule post-processing has become a very active research area Based on whether external knowledge sources are used we can divide the existing methods into objective measure based methods and knowledge based methods Objective measure based methods do not require any domain information besides the rule set itself and can be used by both domain experts and novice users However lack of domain knowledge makes it impossible to detect wrong rules that are just coincidence and do not 215make sense\216 and lack of user input results in presenting many rules already known by users Based on the analysis tasks this type of methods can be further divided into 1 Metric-based rule evaluation This type of approaches use metrics to evaluate the signi\223cance or interestingness of an association rule such as lift statistical h yp o thesis tests 18 U nin teresting rules will be discarded However as shown in eac h metric has di\002eren t prop erties and may be useful only for some speci\223c domains and applications and choosing the right metric is often di\003cult 2 Rule summarization and generalization To reduce the number of rules that need manual analysis rules are analyzed with their context These methods investigate relations among rules in order to present users a concise rule set 3 Rule ranking a nd 20 discussed ho w to extract top-k signi\223cant rules with low redundancy Q 


 Han J W a ng J Lu Y  and Tzv etk o v P  Mining Top-K Frequent Closed Patterns without Minimum Support In Proceedings of the IEEE international Conference on Data Mining 2002  L iu B Zhao K Benkler J a nd Xiao W Rule Interestingness Analysis Using OLAP Operations In Proceedings of the 12th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining Philadelphia PA 2006  Meininger J C Liehr P  Mueller W H Chan W Smith G L and Portman R J Stress-Induced Alterations of Blood Pressure and 24 h Ambulatory Blood Pressure in Adolescents Blood Pressure Monitoring 4\(3-4 1999  Meininger J C Liehr P  Chan W Smith G and Mueller W H Developmental Gender and Ethnic Group Di\002erences in Moods and Ambulatory Blood Pressure in Adolescents Annals of Behavioral Medicine a Publication of the Society of Behavioral Medicine 28 1 10-9  P a dmanabhan B a nd T uzhilin A  A BeliefDriven Method for Discovering Unexpected Patterns In Proceedings of the 4th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining 1998  P admanabhan B and T uzhilin A Small is Beautiful Discovering the Minimal Set of Unexpected Patterns In Proceedings of the 6th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining Boston Massachusetts 2000  Pipino L  Lee Y a nd W a ng R Data Qualit y Assessment Communications of the ACM April 2002  Quillian M R Seman tic Memory  Seman tic Information Processing M Minsky ed MIT Press 1968  Sahar S On Incorp o rating Sub jectiv e In terestingness Into the Mining Process In Proceedings of the IEEE International Conference on Data Mining 2002  T a n P  N Kumar V  and Sriv a sta v a J Selecting the Right Interestingness Measure for Association Patterns In Proceedings of the 8th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining July 2002  Uni\223ed Medical Language System 2007 a v ailable at www.nlm.nih.gov/research/umls  W ang K Jiang Y and Lakshmanan L V.S Mining Unexpected Rules by Pushing User Dynamics In Proceedings of the 9th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining Washington D.C August 2003  W ebb G I Disco v ering Signi\223can t Rules In Proceedings of the 12th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining Philadelphia PA,2006  Witten I H a nd F rank E Data Mining Practical Machine Learning Tools and Techniques 2nd edition Morgan Kaufmann San Francisco 2005  Xin D Cheng H  Y a n X a nd Han J Extracting Redundancy-Aware Top-k Patterns In Proceedings of the 12th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining Philadelphia PA USA 2006 8 BBB 


              


   


                        





