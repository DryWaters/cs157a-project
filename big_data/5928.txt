Abstract 
Application-aware Resource Allocation for SDN-based Cloud Datacenters 
 002 In cloud datacenters, since resource requirements change frequently, how to assign and manage resources efficiently while meeting servi 
  Weifan Hong Department of Computer Science National Chiao Tung University Hsinchu, Taiwan 300 dekger11@gmail.com Kuochen Wang and Yi-Huai Hsu Department of Computer Science National Chiao Tung University Hsinchu, Taiwan 300 kwang@cs.nctu.edu.tw vince010549.cs 99g@nctu edu.tw  
ce level agreements \(SLAs different types of applications is an important research issue In this paper, we propose an 
Application-aware Resource Allocation adapts to all types of applications 
App-RA\eme to predict resource requirements and allocate an appropriate number of virtual machines \(VMs for each application in SDN-based cloud datacenters. To the best of our knowledge, the proposed App-RA is the first application-aware resource allocation scheme that The App-RA can meet SLAs, allocate resources efficiently, and reduce power consumption for each application in cloud datacenters. The proposed App-RA adopts the neural network based predictor to forecast the 
requirements of resources \(CPU, Memory, GPU, Disk I/O and bandwidth\ for an application. In the proposed App-RA, we have designed two algorithms which allocate appropriate numbers of virtual machines and use the VM allocation threshold to avoid SLA violations for five different types of applications. In addition, we adopt an SDN-based OpenFlow network with CICQ switches to appropriately schedule packets for different types of application in the network layer. Finally simulation results show that the power consumption of the proposed App-RA is only 9.21% higher than that of the best case \(oracle\nd the power consumption of EAACVA, which is a representative resource allocation method for non-graphic 
applications, is 104.58% worse than that of App-RA Furthermore, the SLA violation rate of the proposed App-RA is less than 4% for all applications 
Keywords - Service level agreement; application-aware resource allocation; cloud datacenter; software define network 
 
I 
 I NTRODUCTION  In cloud datacenters, resource requirements changes frequently. Therefore, dynamic allocating and managing resources to meet the SLA of each application is an important research issue. The objective of dynamic resource allocation is to satisfy the SLA while minimizing the power consumption in cloud datacenters. In order to satisfy the SLA of each application, resource prediction is a 
fundamental technology. A resource prediction tool is used to predict resource requirements, and then we can allocate resources in advance to avoid SLA violation. In existing resource allocation schemes, most of them adopt a neural network based prediction, which has been proved its prediction accuracy, so we also adopt a neural network based predictor There are two types of resource allocation 
server-aware resource allocation application-aware resource allocation 
and The server-aware resource allocation, which detects loading of a server and allocates VMs for all applications in the server, cannot assign different SLAs to different applications. In con trast, application-aware resource allocation, which detects loading in an application 
and allocates VMs to the application, can assign different SLAs to different applications In a cloud datacenter, even if we predict and allocate network bandwidth for each application in advance, the network may still congest. In order to resolve this problem we adopt an SDN-based OpenFlow e t w ork  w i t h a CICQ switch to schedule packets for different applications in the network layer. OpenFlow is an open standard to allow researchers to run experimental protocols in realistic networks and is currently deployed in large-scale datacenters, like GE  In this paper, we propose an Application-aware Resource Allocation \(App-RA\heme to predict resource requirements and allocate an appropriate number of VMs for each application in SDN-based cloud datacenters. The 
A Resource allocation architecture 
 
 
rest of the paper is organized as follows. In section II, we review existing resource allocation mechanisms, compare application-aware and server-aware resource allocation schemes for cloud datacenters, and introduce the OpenFlow In section III, we describe the proposed App-RA scheme. In section IV, we evaluate our proposed App-RA scheme using CloudSim, and we compare the power consumption of the proposed App-RA with EAACVA, which is the best available related work for non-graphic applications. Finally we conclude this paper and outline future work II R ELATED W ORK  In order to satisfy the SLA for each application 
researchers have proposed resource allocation schemes used in cloud datacenters. As shown in Figure 1, there are two types of resource allocation: server-aware resource allocation and application-aware resource allocation. In the past, the server-aware resource allocation scheme was used in cloud datacenters. However, it cannot assign a different SLA to each application. Because there are always different applications in cloud datacenters, only setting a single SLA cannot satisfy different requirements of different applications. Thus, it is difficult to satisfy the SLA of each application in cloud datacenters. Nowadays, applicationaware resource allocation has become the major scheme in cloud datacenters 
2013 International Conference on Cloud Computing and Big Data 978-1-4799-2829-3/13 $26.00 © 2013 IEEE DOI 10.1109/CLOUDCOM-ASIA.2013.44 106 
2013 International Conference on Cloud Computing and Big Data 978-1-4799-2830-9/14 $31.00 © 2014 IEEE DOI 10.1109/CLOUDCOM-ASIA.2013.44 106 


  
B SDN-based datacenter network A Application-aware resource prediction Time Stamp 
 
   Figure 1: Classifications of existing resource allocation methods In ts a sch e m e  w h ic h predicts w o rk load  using a neural network and adopts server-aware VMs resource allocation, but it mainly focuses on resource prediction. In n trodu ces a resource prediction scheme using a neural network and uses a resource allocation scheme to save power in cloud datacenters. However, it did not consider an SLA for each application in cloud datacenters We first review existing application-aware resource allocation which detects an applicationês loading and allocates VMs to the application. Application-aware resource allocation can satisfy different SLAs for different applications. Its prediction is still accurate if an application migrates to another server, and one still can allocate appropriate VMs to the application. To fully utilize the advantage we mentioned above, we adopt application-aware resource allocation for the proposed App-RA. In [4  i t  proposes an application-aware resource allocation scheme to dynamically manage resources, and it can satisfy the SLA and can allocate resources efficiently for web applications only. In other words, it determines how many VMs should be allocated to satisfy the SLA. However, it only adapts to web applications. In [5 it pr o p o s e s an  a p pli cati on a w are  resource allocation scheme with minimum power consumption. It runs benchmarks to measure how many VMs and power required in each application. The resource allocation scheme is based on a benchmark process which takes a lot of time. It cannot dynamically adjust numbers of VMs for different applications. In other words, it is a static scheme rather than a dynamic scheme. In addition, it did not consider graphic applications As shown in Table I, the proposed App-RA can adapt to all types of applications, meet different SLAs for different Table I: Comparison of the proposed App-RA with related work Approach EAACVA [5  App-RA proposed Suitabilit y for what types of applications For non-graphic applications All types Different SLAs for different applications Yes Yes SLA violation handler No Yes response time Bandwidt h  provisioning No Yes Resource prediction No Yes neural network based applications, adjust resources if an application violates its SLA, adjust bandwidth provisioning in an SDN-based datacenter network for all applications, and provide resource prediction for each application In recent years, researchers have proposed several SDNbased datacenter networks which combine with cloud datacenters. In [6 i t p r opo se s a pr a c t i c a l  vi r t ua l i z a t i o n c l o ud datacenter in the SDN network and it defines an APP-ID \(a 24 bits label, which can be stored in the IP header\ which is used to identify an application in the SDN network. However it does not consider resource allocation in cloud datacenters In [7  p r opo se s a n Op e nFl ow-b a s e d fl o w le ve l ba nd w i d t h  provisioning scheme for CICQ switches. Because it schedules packets at flow level, network delay can be decreased by better scheduling for a flow requiring high bandwidth. Based on this observation, the proposed SDNbased cloud datacenter network schedules packets at application level and network delay can be decreased by better scheduling for an application requiring low network response time to meets its SLA III A PPLICATION AWARE R ESOURCE A LLOCATION FOR SDNBASED C LOUD D ATACENTERS  In the proposed App-RA, we propose an applicationaware resource prediction to predict resource requirements for each application. In Figure 2, we adopt a neural network to predict the resource requirements \(CPU, memory, GPU hard disk I/O and bandwidth utilization\or each application and we also use these five types of resource requirements as input factors for the neural network. When the neural network training completes, resource requirements can be predicted. In addition, because the number of users changes all the time in the internet, we also use as an input factor for the neural network to make prediction more accurate. In the following, we introduce the proposed Application-aware Resource Allocation \(App-RA\ scheme based on application-aware resource prediction to assign an appropriate number of VMs so as to meet the SLA of each applications    Figure 2: The proposed App-RA resource prediction scheme using a neural network 
107 
107 


Type of an applications Bandwidth provisioning 
  
B Application-aware resource allocation X i i X i X i X i X i X i W SLA W SLA W P W P X i i W SLA W SLA W P W P X i W SLA W P C Proposed SDN-based datacenter network design 
 In this section, we introduce the proposed applicationaware resource allocation scheme to allocate an appropriate number of VMs for each application. The objective of the proposed App-RA is to meet SLAs, allocate resources efficiently, reduce power consumption for each application and adapt all types of applications in cloud datacenters In a cloud datacenters, we may need to adjust the number of VMs required to meet each application. Algorithm 1 shows how to decide when to power-on or power-off VMs for an application. If the predicted utilization is greater than the VM Allocation Threshold of an application, we power on a VM to support this application. If the current utilization is less than the sum of all VMsê capacity and the reserved resources \(maximum utilization Ö VM Allocation Threshold in an application, we power off a VM to save power for this application in the cloud datacenter  Power-on and power-off VMs for an application the number of VMs currently used by application  Maximum utilization 100 Unused resources = Maximum utilization - Predicted utilization Predicted utilization > VM Allocation Threshold   1 VM Allocation Threshold = VM Allocation Threshold + VM capacity Unused resources > \(VM capacity + \(Maximum utilization Ö VM Allocation Threshold   1 VM Allocation Threshold = VM Allocation Threshold Ö VM capacity  We also need to adjust the VM Allocation Threshold to meet the SLA of each application. Algorithm 2 shows how to dynamically adjust the VM Allocation Threshold. When the SLA \(for example, response time\ is violated, the VM Allocation Threshold is decreased according to an SLA weight which is a value between 0 and 1. If  approaches 0, it means more resources are reserved for an application which can result in decreasing the SLA violation of the application, and vice versa When the response time is lower than half of the response time specified in the SLA, the VM Allocation Threshold will be increased according to a power consumption weight which a value between 1 and 2. If approaches 2, it represents that very few resources are reserved for an application which can reduce power consumption, and vice versa       Adjustment of VM Allocation Threshold for an application the number of VMs currently used by application  1 Power consumption weight \(1 2 1  Current response time > Response time specified in SLA  VM Allocation Threshold = VM Allocation Threshold  Current response time < \(Response time specified in SLA / 2  VM Allocation Threshold = VM Allocation Threshold   In cloud datacenters, even if we predict and then allocate network bandwidth for each application in advance, the network may still congest. In order to resolve this problem we adopt an SDN-based OpenFlow [1 ne tw o r k w ith CI CQ  switches to schedule packets from different applications in the network layer. For example, the video streaming application needs more bandwidth, but the search engine application should have a high scheduling priority, so the packets of the search engine application can be sent earlier to avoid increasing network delay. We propose the following scheduling strategy in order to resolve the above problem 1 The controller maintains a bandwidth provisioning table for different types of applications and sends it to CICQ switches 2 The switches decide packet scheduling priorities based on the bandwidth provisioning table from the controller As shown in Table II, an example bandwidth provisioning table is provided; however, the actual bandwidth provisioning may be based on the charge of each application. First, we need to modify an OpenFlow controller to support our method. We add an APP-ID \(24 bits\abel of each application to the OpenFlow packet header [6 an d th u s  the controller can identify each application. The controller decides bandwidth provisioning for each application and modify the flow tables in switches. Second, we modify the OpenFlow switches to support our method. In Figure 3, we use a CICQ \(Combined-Input-Crosspoint-Queued\ switc to handle packet scheduling for each application. The CICQ switch is a kind of crossbar sw itches with a small exclusive buffer at each crosspoint  Table II: Bandwidth provisioning for different types of applications 
Search engine 10 3D Game 8 Social networking 6 Video 4 Message, Mail 2 
  
 SLA weight \(0 
Algorithm 1 If then End if If then End if Algorithm 2 If then If then Else if then End if End if 
108 
108 


Application name Types of a n n application Simulator Prediction technique Prediction tool Number of types of applications Number of servers Maximum number of VMs Maximum bandwidth SLA violation threshold 
In application scheduling, input p ackets and put them into cor r buffers s\. Application s c p ackets with minimum executi o sends them to the corresponding b u 2 In input scheduling, packets ar e buffers s\according to the FIF 3 In output scheduling, packets a r port according to the bandw i table  IV S IMULATION R ESUL T We used five different types of applic a the proposed App-RAês SLA violation consumption using the CloudSim [9 m capacity is according to [8   Ho w e ver si n obtain video traffic data in Table II, APP4 social networking with descending traffi c APP3 with ascending traffic. We concurre n different types of applications, as shown i n IV shows related simulation parameters CloudSim does not provide the functi o simulation, we add a network function in t environment to evaluate the proposed A APP-ID to identify different applications, a n the corresponding buffers  Table III: Five different types of applic a receives r esponding input c heduling selects o n time a nd u ffer  e sent t o output O order in  r e sent to output i dth provisioning T S  a tions to evaluate rate and power m ulator. The VM n ce we could not is replaced with c in contrast to nt ly executed five n Table III. Table setup. Because o n for network t o our simulation A pp-RA. We use n d put packets to a tions  As shown in Figure 4, we applications for 100 minutes W violation rate for each applicati o resource allocation schemes. EA A resource allocation method for n had many SLA violations in APP 2 did not consider GPU in its design as the SLA violation threshold R Engine on ly gu aran t e e s a Mo n at least 95%, and Amazon EC2 [1 Uptime Percentage at least 99 H guarantee the response time speci f application. Furthermore, the SL A proposed App-RA is less than 4  applications  Figure 4: SLA violation rate comparison f o resource allocation s c We evaluate the power cons u physical servers and VMs under dif f three different resource allocation Table V shows that the power con s App-RA is only 9.21% higher th a oracle\ and the power consumpt i 104.58% worse than that of App-R A     X 1N X NN fe red crossba r t 1 Out n m eters setup CloudSim 3.0 Neural network-based A TLAB 7.11.0 \(R2010b 5 types 20 80 40 Mbps 0.9 1.1 100 ms executed five types of W e compare the SLA o n using three different A CVA, which is the best n on-graphic applications 2 because EAACVA Note that we set 100 ms R emind that Google App n thly Uptime Percentage 1 gua r a nte e s a n An n ua l  H owever, they could not f ied in the SLA for each A violation rate of the  for all five types of  or each application using three c hemes  u mption of powe r on/off f erent loadings g schemes. Figure 5 and s umption of the proposed a n that of the best case i on of EAACVA [5  i s  A  
APP ijk X ij Out j A Simulation environment In i B ij B ij B Comparison of SLA violation r a C Comparison of power consump t te t ion 
Figure 3: Using a CICQ switch to adjust the band w each application  As shown in Figure 3, we propose a p method to forward packet for each applicati o 1 APP1 Searc h APP2 3D g APP3 Social network i tr a APP4 Social net w descen d APP5 W    In 1 In n APP 111 APP 112 APP 1N1 APP 1N2 APP N11 APP N12 APP NN1 APP NN2 X 11 X N1 Buf fe B 11 B 1N B N1 B NN Ou t   w idth provisioning for p acket scheduling on  port h engine g amin g  i ng with ascending a ffic w orking with d ing traffic W eb  Table IV: Simulation para m M A 
    
   
W S LA  W P  
109 
109 


ACM SIGCOM M I nformation Technology \(ICCIT\ Con f  Proc. IEEE System of Systems Engine e P roc. IEEE Network Clou d NCCA\ Conf P roc. IEEE Parall e Workshops and Phd Forum \(IPDPSW  P ICNP\ Conf INFOCOM Conf P roc. IEEE Advances in C M CCR Proc. IEEE Computer and f e ring \(SoSE\ Conf d Computing and Applications l and Distributed Processing Conf P roc. IEEE Network Protocols Proc. IEEE C omputers Conf 
Application Best case Oracle APP-RA proposed EAACVA [5 
 Figure 5  Power consumption comparison for each ap p different resource allocation schem e  Table V: Comparison of power consumption using th r allocation schemes C ONCLUSIONS  In this paper, we have presented an A Resource Allocation \(App-RA\ scheme to requirements and then allocate an appro p virtual machines \(VMs\ for each applicati o cloud datacenters. To the best of our proposed App-RA is the first applicatio n allocation scheme that can adapt to all type The proposed App-RA can meet SLAs a efficiently, and reduce power consumption f of applications in cloud datacenters. It network based predictor to forecast the resources. We have designed two alg o proposed App-RA to allocate VMs and d y VM Allocation Threshold to avoid S L different types of applications. In additio n presented an SDNb ased OpenFlow net w switches to better schedule packets from d applications in the network layer. Finally s have shown that in terms of p ower c    p lication using three e s  r ee different resource A CKNOWLE D The support by the Inventec und e b y the National Science Council 2221-E-009-090-MY3 is gratef u authors would like to thank Mr. Jo n for his valuable comments that im p paper R EFERENC E 1 h igher tha n the best case h e best resource allocation s, is 104.58% worse than a tion rate of the proposed p lication D GEMENT  e r Contract 101C179 and under Grant NSC102u l acknowledged. The n z Lee from the Inventec p roved the quality of this E S  i shnan, G. Parulkar, L. Peterson e nFlow: enabling innovation in 
  
            
APP1 91.59% 100 APP2 85.66% 100 APP3 91.73% 100 APP4 89.36% 100 APP5 95.60% 100 Average 90.79 100 V 174.59 264.29 217.33 184.79 181.88 204.58 A pplicatio n aware predict resource p riate number of o n in SDN-based knowledge, the n aware resource s of applications a llocate resources f or different types adopts a neural requirements of o rithms for the y namically adjust L A violation for n we have also w ork with CICQ d ifferent types of s imulation results c onsumption, the proposed App-RA is only 9.21 h oracle\, and EAACVA, which is t h method for non-graphic application App-RA. In addition, the SLA viol a App-RA is less than 4% for each ap p VI N. McKeown, T. Anderson, H. Balakr i J. Rexford, S. Shenker, J. Turner, çOp e campus networks,é in 74, Apr. 2008 2 Md. T. Imamt, S. F. Miskhatt, R. M R network and regression based process scaling of Grid and Cloud resources  3 J. Prevost, K. Nagothu, B. Kelley, M data center networks loads using sto c 27-30 June 2011 4 V. Cardellini, E. Casalicchio, F. L. P Resource Management for Applicat i Cloud," in pp.20-27, 21-23, Nov 2 5 H. Viswanathan, E.K. Lee, I. Rode Energy-Aware Application-Centric Workloads," in 2011 6 P. Lin, J. Bi, H. Hu, "VCP: A virtuali intra-domain production network," in pp.1-2, Oct. 30 2012-N o 7 H. Jin, D. Pan, J. Liu, N. Pissinou b andwidth provisioning for CICQ pp.476-480, 10-15 A 8 Amazon EC2,é [Online v ail abl e   h 9 CloudSim,é [Online v ail abl e  htt p  Google App Engine Service Level A https://developers.google.com/appengi n  Amazon EC2 Service Level Agr e http://aws.amazon.com/ec2-sla  A. Beloglazov, R. Buyya1, Y. Lee A Survey of Energy-Efficient Data C e Systems,é in vol. 38, no. 2, pp. 69R ahmant, M. A. Amin, "Neural or load prediction for efficient  in pp.333,338, 22-24 Dec. 2011 Jamshidi, "Prediction of cloud c hastic and neural models," in pp.276-281 r esti, L. Silvestri, "SLA-aware i on Service Providers in the 2 011 r o, D. Pompili, M. Parashar VM Allocation for HPC pp.890-897, 16-20 May zation cloud platform for SDN o v. 2 2012 OpenFlow based flow level switches," i n A pril 2011 h ttp://aws.amazon.com/ec2  www.cloudbus.org/cloudsim A greement,é [Online v ail abl e   n e/sla?hl=zh-tw e ement,é [Online   A v a i la b l e A Zomaya, çA Taxonomy and e nters and Cloud Computing Vol. 82, 2011 
110 
110 


as we will see in section V we can attract 1033 nodes in a 7500 nodes graph Finally the proposed algorithm is a combination of mincut and ranking algorithms with greedy technique over nodes which can potentially be inîuential with this we can reduce time over greedy methods and get more quality extra seeds IV E XPERIMENT D ESIGN The proposed algorithm was applied over twitter data sets which are constructed from certain subjects and also it was applied over random build graphs We run all the algorithms with the same seed nodes discovered in the entropy ranking phase   and    In addition to the same source s node sink t node and those which were chosen from speciìc studied graphs A Algorithms for Comparison The proposed algorithm will be compared with two speciìc algorithms the DG algorithm and the GP algorithm DG was chosen to be compared with the algorithm in order to get an extra seed set     As the experiments will show the proposed algorithm is able to obtain more quality results better extra seed nodes when compared with the DG algorithm Although with the GP algorithm it is possible to obtain higher quality results the proposed algorithm is able to obtain faster results than GP when the size of the data sets increases We also use random seed that were chosen heuristically together with a single discount algorithm The single discount algorithm heuristic consist in a simple degree discount heuristic where each neighbor of a newly selected seed discounts its degree by one This is used in cascade models B Twitter Graphs We use twitter data sets from Truthy project Those graphs from politics social movements and news are used to try to understand how communication spreads on twitter This project recollects tweets for the last nine months and packed them in data sets available to the public Using graphês software visualization such Gephi it is possible to recognize some of the nodes preferences at the graphs Then it is possible to use them as a seed nodes positive and negative We also recollected data from twitter for marketing datasets where the users are related with a certain subject The subject could be hashtag or keyword and the user relations are found by mentions or retweets C Random Graphs Although some random graphs generators could not represents any real problem we are going to use a randomly generated datasets to compare the testing algorithms against the proposed algorithm in order to see how they behave as the graph increses in size degree at the nodes etc  For this random graphs are generated with well know algorithm BarabasiAlbert generator  The importance of using random graphs is because these can be conìgured to modify the average degree of the nodes sparsity and of course we can handle the amount of nodes to be used Modifying these parameters we can create graphs to represent real possible behaviors V E XPERIMENTS AND R ESULTS The algorithms were implemented on Intel Core I7 3.4 GHz with 8Gb RAM and this scenario was the same for all algorithm comparisons A Attracted Nodes As we mention earlier most of the traditional IM algorithms are focused in maximizing the amount of nodes which can change their opinion Under this assumptions it is clear GP is going to have the best results But as we saw in the last section it is possible to obtain most of the inîuential nodes by reducing the number of operations with EMinG In the  israel dataset Fig 4 GP and EMinG got the same results because high quality nodes are also included in top m  m  ranked nodes In this case m    V   7 was chosen for testing on all experiments In  immigration we got almost the same results with both algorithms The variation was of at most 15 extra seeds For example node N4620 is not of high entropy but it is inîuential Single discount had acceptable results For the rst and second experiments we got 1910 and 2005 nodes respectively In the random graph while looking for 30 extra seed nodes with GP we were able to attract 1171 nodes with EMinG we got 1066 Using the single discount algorithm we got 794 with DG we got 549 and with Random we got 240 In the fourth experiment DG and Random got the worst results Furthermore in the randomly generated graph it was more notorious the not so good results for DG and random seed placement For random seeed placemente seeds were selected at random and the second phase of EMinG was used to nd attrected nodes and extra seeds The main difference between the rst and third experiments is the out-degree node average In  israel is 1.21 in  immigration is 1.14 in random graph experiment is 2.48 and  syria 1.18 Although the rst second and third expriments Fig 4 were designed to show the performance of the algorithms the fourth experiment was done over a Big Data set 1,000,000 nodes in order to show the scalability of the algorithms Thus we noticed that with GP an EMinG we got 671310 and 650010 extra attracted nodes respectively It is more with m 30 DG and Random got small increases Finally the single discount algorithm had incremental results but they were much worse when compared with ones by GP and EMinG B Running Time The nal benchmark was done over the running time Fig 5 It was possible to see that DG and random seed placement were the fastest algorithms at the four datasets with respect to EMinG but it was only with an advantage of seconds For large amount of data EMinG was faster than GP The interesting fact was that the Single discount algorithm had almost the same results in time when compared with EMinG For example at the  israel graph in order to nd 5 extra seeds there were 300 seconds of difference between both algorithms DG and EMinG Still the nodes quality for DG were not as good as in EMinG We had a similar result for for the random graph With DG we obtained 858 attracted nodes with EMinG 1033 and 245 for random placement When we 


Figure 4 Number of attracted nodes over  israel 4,000 nodes  immigration 6,307 nodes Barabasi-Albert 7,500 nodes and  syria 1,000,000 graphs increased the number of seeds to 30 and used DG we got 1878 attracted nodes Instead with EMinG while looking for 25 extra seeds the algorithm got 1989 attracted nodes Finally with random seed only placemente there were only 1221 attracted nodes Now the GPês results were slower than EMinG This is because with GP we need to evaluate every single nodeês inîuence Then while looking for a small number of extra seeds it can be seen that it has lower running time But with 10 or more extra seeds to nd GPês time complexity increases faster than any other algorithm For example to nd 30 seeds in the Barabasi-Albert random graph GP runned for 11171.76 seconds against EMinG that runned only for 4814.04 seconds in addition that GP got only 9 more attracted nodes For the same experiment the single discount algorithm runned for 4579.09 seconds which is less than EMinG but with 111 attracted nodes less For  syria graph EMinG attracted each node in 0.83 seconds versus GP that attrected each node in 2.31 seconds Of course DG and random seed placement are faster than EMinG but as we saw in the Big Data Graph if we look for more than 30 extra seeds there are no signiìcant changes As we can see EMinGês computational time is related with the graph size because entropy ranking is calculated over all negative opinion nodes Finally The additional time in EMinG is for the greedy choice on top of the m  m  nodes VI C ONCLUSION AND F UTURE W ORK The inîuence maximization problem will continue to be studied from different points of view because the increasing interest in studying the interaction among members of social networks This is increasingly having a heavy impact in application development and gaming industry The proposed algorithm is based on simple algorithms and other simple techniques in order to be able to implement an highly scalable application for Big Data Of course the algorithm is still only trying to get an approximation to the optimal solution However the experiments showed the accuracy and high quality of the results of the proposed algorithm Additionally one the characteristics of the algorithm is the use of local information for increasing speed when dealing with large data sets In addition incorporating new ranking algorithms is quite simple because this phase was designed independently in the second phase of the proposed algorithm Also heuristics can be incorporated such as the ones applied in greedy algorithms to reduce the number of operations without loss of quality or the use of heuristics to choose the seed nodes In a future implementation many of the operations could be parallelized In addition we are working in developing new methods to analyze IM and mining large data streams to get faster results Finally for future applications we want to apply the proposed algorithm in no-social datasets to measure its effectiveness For example in biological sensor communication or networking datasets A CKNOWLEDGMENT We appreciate the nancial support given by CONACYT We want to thank computer science laboratory members for the tips reviews and recommendations over experiments and algorithms that were proposed Finally we want to thank people who are developing new algorithms new methods and new software which are the basis of this work R EFERENCES  M Shindler  A  W ong and A W  Me yerson F ast and accurate kmeans for large datasets in Advances in Neural Information Processing Systems 24  J Shawe-Taylor R Zemel P Bartlett F Pereira and K Weinberger Eds 2011 pp 2375Ö2383 


Figure 5 Running time over  israel 4,000 nodes  immigration 6,307 nodes Barabasi-Albert 7,500 nodes and  syria 1,000,000 graphs  Z Li H Ning L Cao T  Zhang Y  Gong and T  S Huang Learning to search efìciently in high dimensions in Advances in Neural Information Processing Systems 24  J Shawe-Taylor R Zemel P Bartlett F Pereira and K Weinberger Eds 2011 pp 1710Ö1718  N Halk o P  G Martinsson and J A T ropp Finding structure with randomness Probabilistic algorithms for constructing approximate matrix decompositions SIAM Rev  vol 53 no 2 pp 217Ö288 May 2011  A Metw ally  D  Agra w al and A E Abbadi  A n inte grated ef cient solution for computing frequent and top-k elements in data streams ACM Trans Database Syst  vol 31 no 3 pp 1095Ö1133 Sep 2006  P  Domingos and M Richardson Mining the netw ork v alue of customers in Proceedings of the seventh ACM SIGKDD international conference on Knowledge discovery and data mining  ser KDD 01 New York NY USA ACM 2001 pp 57Ö66  D K empe J Kleinber g and E T ardos Maximizing the spread of inîuence through a social network in Proceedings of the ninth ACM SIGKDD international conference on Knowledge discovery and data mining  ser KDD 03 New York NY USA ACM 2003 pp 137 146  S Liu L Y ing and S Shakk ottai Inîuence maximization in social networks An ising-model-based approach in Communication Control and Computing Allerton 2010 48th Annual Allerton Conference on  2010 pp 570Ö576  W  Chen Y  W ang and S Y ang Ef cient inîuence maximization in social networks in Proceedings of the 15th ACM SIGKDD international conference on Knowledge discovery and data mining  ser KDD 09 New York NY USA ACM 2009 pp 199Ö208  W  Chen A Collins R Cummings T  K e  Z  Liu D Rincn X Sun Y Wang W Wei and Y Yuan Inîuence maximization in social networks when negative opinions may emerge and propagate in Proceedings of the Eleventh SIAM International Conference on Data Mining SDM 2011 April 28-30 2011 Mesa Arizona USA  2011 pp 379Ö390  W  Chen W  Lu and N Zhang T ime-critical inîuence maximization in social networks with time-delayed diffusion process CoRR  vol abs/1204.3074 2012  J T ang J Sun C W ang and Z Y ang Social inîuence analysis in large-scale networks in Proceedings of the 15th ACM SIGKDD international conference on Knowledge discovery and data mining  ser KDD 09 New York NY USA ACM 2009 pp 807Ö816  H Li S S Bho wmick and A Sun Cinema conformity-a w are greedy algorithm for inîuence maximization in online social networks in Proceedings of the 16th International Conference on Extending Database Technology  ser EDBT 13 ACM 2013 pp 323Ö334  K Ohara K Saito M Kimura and H Motoda Ef fect of in/out-de gree correlation on inîuence degree of two contrasting information diffusion models in Proceedings of the 5th international conference on Social Computing Behavioral-Cultural Modeling and Prediction  ser SBPê12 Berlin Heidelberg Springer-Verlag 2012 pp 131Ö138  L P age S Brin R Motw ani and T  W inograd The pagerank citation ranking Bringing order to the web Stanford InfoLab Technical Report 1999-66 November 1999 previous number  SIDL-WP-1999-0120  J M Kleinber g  Authoritati v e sources in a h yperlink ed en vironment  J ACM  vol 46 no 5 pp 604Ö632 Sep 1999  K P  Chitrapura and S R Kashyap Node ranking in labeled directed graphs in Proceedings of the thirteenth ACM international conference on Information and knowledge management  ser CIKM 04 ACM 2004 pp 597Ö606  F  Chung A Tsiatas and W  Xu Dirichlet pagerank and trust-based ranking algorithms in Proceedings of the 8th international conference on Algorithms and models for the web graph  ser WAWê11 Berlin Heidelberg Springer-Verlag 2011 pp 103Ö114  J Shetty and J Adibi Disco v ering important nodes through graph entropy the case of enron email database in Proceedings of the 3rd international workshop on Link discovery  ser LinkKDD 05 ACM 2005 pp 74Ö81  D M Greig B T  Porteous and A H Seheult Exact Maximum A Posteriori Estimation for Binary Images 1989  L Onsager  Crystal statistics i a t w o-dimensional model with an order-disorder transition Phys Rev  vol 65 pp 117Ö149 Feb 1944  S.-W  Son H Jeong and J D Noh Random eld ising model and community structure in complex networks The European Physical Journal B Condensed Matter and Complex Systems  vol 50 no 3 pp 431Ö437 2006  K R McK elv e y and F  Menczer   T ruthy enabling the study of online social networks in CSCW Companion  A Bruckman S Counts C Lampe and L G Terveen Eds ACM 2013 pp 23Ö26  A DêAndrea F  Ferri and P  Grifoni An Ov ervie w o f Methods for 


Virtual Social Networks Analysis in Computational Social Network Analysis  ser Computer Communications and Networks A Abraham A.-E Hassanien and V Sn  ael Eds London Springer London 2010 ch 1 pp 3Ö25  J K orner  Fredman-k olmo s bounds and information theory   SIAM J Algebraic Discrete Methods  vol 7 no 4 pp 560Ö570 Oct 1986  T  Leighton and S Rao Multicommodity max-îo w min-cut theorems and their use in designing approximation algorithms J ACM  vol 46 no 6 pp 787Ö832 Nov 1999  M Bastian S He ymann and M Jacomy  Gephi An open source software for exploring and manipulating networks 2009  A.-L Barabasi and R Albert Emer gence of scaling in random networks Science  vol 286 no 5439 pp 509Ö512 1999 


application or middleware platform to collect request ows Thus it is much easier to deploy FChain in large-scale IaaS clouds Blacksheep correl a t e s t he change poi nt of s y s t em-l e v el metrics e.g cpu usage with the change in count of Hadoop application states i.e events extracted from logs of DataNodes and TaskTrackers to detect and diagnose the anomalies in a Hadoop cluster Kahuna-BB correl a t e s b l ack-box dat a system-level metrics and white-box data Hadoop console logs across different nodes of a MapReduce cluster to identify faulty nodes In comparison FChain is a black-box fault localization system which is application-agnostic without requiring any knowledge about the application internals We believe that FChain is more practical and attractive for IaaS cloud systems than previous white-box or gray-box techniques V C ONCLUSION In this paper we have presented FChain a robust blackbox online fault localization system for IaaS cloud computing infrastructures FChain can quickly pinpoint faulty components immediately after the performance anomaly is detected FChain provides a novel predictability-based abnormal change point selection scheme that can accurately identify the onset time of the abnormal behaviors at different components processing dynamic workloads FChain combines both the abnormal change propagation knowledge and the inter-component dependency information to achieve robust fault localization FChain can further remove false alarms by performing online validation We have implemented FChain on top of the Xen platform and conducted extensive experimental evaluation using IBM System S data stream processing system Hadoop and RUBiS online auction benchmark Our experimental results show that FC hain can achieve much higher accuracy i.e up to 90 higher precision and up to 20 higher recall than existing schemes FChain is light-weight and non-intrusive which makes it practical for large-scale IaaS cloud computing infrastructures A CKNOWLEDGMENT This work was sponsored in part by NSF CNS0915567 grant NSF CNS0915861 grant NSF CAREER Award CNS1149445 U.S Army Research Ofìce ARO under grant W911NF-10-1-0273 IBM Faculty Awards and Google Research Awards Any opinions expressed in this paper are those of the authors and do not necessarily reîect the views of NSF ARO or U.S Government The authors would like to thank the anonymous reviewers for their insightful comments R EFERENCES   A m azon E las tic Com pute Cloud  h ttp://a w s  a m azon com ec2   V i rtual c om puting lab  http://vcl ncs u  e du  P  Barham  A  D onnelly  R I s aacs  a nd R M o rtier   U s ing m agpie f or request extraction and workload modelling in 
 2004  M  Y  Chen A  A ccardi E  K icim an J  L lo yd D  P atters on A  F ox and E Brewer Path-based failure and evolution management in  2004  R F ons eca G  P o rter  R H  K atz S  S h enk e r  and I  S toica X T race A pervasive network tracing framework in  2007  I  Cohen M  G o lds z m i dt T  K elly  J  S ym ons  a nd J  S  Chas e Correlating Instrumentation Data to System States A Building Block for Automated Diagnosis and Control in  2004  I  C ohen S  Z h ang M  G o lds z m i dt J  S ym ons  T  K elly  a nd A  F ox Capturing indexing clustering and retrieving system history in  2005  S  D uan S  Bab u  a nd K  M unagala F a A s ys tem for a utom ating failure diagnosis in  2009  S  K andula R Mahajan P  V erkaik S  A garw al J  P a dhye a nd V  Bahl Detailed diagnosis in computer networks in  2009  A  J  O liner  A  V  K ulkarni and A  A ik en  U s ing c orrelated s u rpris e to infer shared inîuence in  2010  P  Bahl R Chandra A  G r eenber g  S  K andula D  A  M altz and M Zhang Towards highly reliable enterprise network services via inference of multi-level dependencies in  2007  Z  G ong X  G u  a nd J  W ilk es   P RE S S  P Redicti v e E las tic ReS ource Scaling for Cloud Systems in  2010  H  N guyen Y  T a n and X  G u P A L  P ropagation-a w are a nom aly localization for cloud hosted distributed applications in  2011  B Gedik H Andrade K L  W u P  S  Y u and M  D oo SP ADE  t he system s declarative stream processing engine in  2008  A pache H adoop S y s tem   http://hadoop apache  or g/co re   Rice uni v e rs ity bidding s y s tem   http://rubis  objectw eb  o r g   M Ben-Y e huda D  B reitgand M F actor  H  K o lodner  V  K r a v ts o v  and D Pelleg NAP a building blo ck for remediating performance bottlenecks via black box network analysis in  2009  Y  T a n X  G u  a nd H  W a ng  A dapti v e s ys tem anom aly prediction f or large-scale hosting infrastructures in  2010  D  L  M ills   A b rief his t ory o f N T P tim e m e m o irs o f a n i nternet timekeeper  2003  Y  T a n H  N guyen Z  S h en X  G u C V e nkatram ani and D  R ajan PREPARE Predictive Performance Anomaly Prevention for Virtualized Cloud Systems in  2012  M  Bas s e ville and I  V  N ikiforo v   Prentice-Hall Inc 1993  L  Cherkaso v a  K  O zonat N Mi J  S ym ons a nd E  Sm irni  Anom aly application change or workload change towards automated detection of application performance anomaly and change in  2008  P  Barham and e t al   X e n a nd the a rt of virtualization  i n  2003  T he ircache p roject  h ttp://www.ircache.net  H ttperf  h ttp://code google com  p htt p er f  S  K u llback  T h e ku llback-leibler distance  1987  X  Chen M  Z hang Z  M  M a o and P  B ahl  A utom ating n etw ork application dependency discovery experiences limitations and new solutions in  2008  M Y u  A  G reenber g  D  M altz J  Re xford L  Y u an S  K andula and C Kim Proìling network performance for multi-tier data center applications in  2011  M K  A guilera J  Mogul J  W iener  P  R e ynolds  a nd A  Muthitacharoen Performance debugging for distributed systems of black boxes in  2003  S  A g arw ala F  A l e g re K  S chw a n and J  M ehalingham  E 2E P r of A utomated end-to-end performance management for enterprise systems in  2007  P  Re ynolds  J  L  W iener  J  C M ogul M  K  A guilera and A  V ahdat  WAP5 black-box performance debugging for wide-area systems in  2006  R Apte L  Hu K  S chw a n and A  G hosh L ook W ho s T alking Discovering dependencies between virtual machines using cpu utilization in  2010  G Khanna I  L aguna F  A rshad an d S Bagchi Distr ibuted diagnosis of failures in a three tier e-commerce system in  2007  R R S a m b as i v an A  X  Z heng M  D e Ros a  E  K re v at S  W h itm an M Stroucken W Wang L Xu and G R Ganger Diagnosing performance changes by com paring request ows in  2011  J  T a n a nd P  N a ras i m h an  RA M S and B lackS h eep I nferring w h ite-box application behavior using black-box techniques CMU Tech Rep 2008  J  T a n X  P a n E  Marinelli S  K a vulya R  G andhi a nd P  N a ras i m h an Kahuna Problem diagnosis for mapreduce-based cloud computing environments in  2010 
OSDI NSDI NSDI OSDI SOSP ICDE SIGCOMM DSN SIGCOMM CNSM SLAML SIGMOD ICAC PODC Computer Communication Review ICDCS Detection of abrupt changes theory and application DSN SOSP The American Statistician OSDI NSDI SOSP DSN WWW HotCloud SRDS NSDI NOMS 
207 
30 
30 


A Global Solution COVERAGE North and South America EMEA and Asia White lines are flights in the masFlight platform from February 8, 2013 Yellow pins are weather stations feeding hour ly data to our platform Maps from Google Earth / masFlight masFlight tracks flights, airports and weather around the world  Global daily flight information capture  82,000 flights  350 airlines  1700 airports  Integrated weather data for 6,000 stations  Match weather to delays  Validate block forecasts at granular level  Add weather analytics to IRROPS review and scenario planning 


Example 1: Proposed FAA Tower Closures masFlight used big-data to link airport operations across three large data sets  Current and historical airline schedules  Raw Aircraft Situation Display to Industry \(ASDI\AA  Enhanced Traffic Management System Counts \(ETMS\Airport operations counts by type \(commercial, freight, etc TOWER CLOSINGS Dots indicate closures; Red dots have scheduled service Based on scheduled service March 1 7, 20 13; scheduled service includes scheduled charter flights, cargo flig hts, and passenger flights Dots  indicate  closures  Red  dots  have  scheduled  service Bas ed  o n sc h edu l ed  se rvi ce  M a r c h 1  7, 2013; scheduled se rvi ce includ es scheduled c harter fli g hts car g o fli g hts a nd passen g er fli g hts Findings: Proposed Tower Closings  From schedules database: 55 airports with scheduled passenger airline service  14 EAS Airports  From ASDI & ETMS: 10,600 weekly flights on a flight plan \(ex. VFR and local traffic  6,500 Part 91/125 weekly flights  4,100 Part 135/121 weekly flights  


Example 1: Big-Data Analytics Applied to ASDI and ETMS To Analyze Operations TOWER CLOSINGS  26 44 24 23 11 10 6 2 1 2 Up to 5 5-10 10-15 15-20 20-25 25-30 30-35 35-40 40-45 45 Count of Airports Average Number of Daily Operations with a Flight Plan Filed Distribution of Airports By Average Number of ìDailyî Impacted Flights Airports Affected by Tower Closures Source: ASDI radar data ñ Part 91 151 flying and Part 135/121 flying March 1-7, 2013; masFlight analysis Note: Average ìdailyì operations based on 5-day week 


Example 2: Aviation Safety Causal Factor For example, consider the following ASRS report \(ACN 1031837 Departing IAH in a 737-800 at about 17,000 FT, 11 m iles behind a 737-900 on the Junction departure over CUZZZ Intersection. Smooth air with wind on the nose bearing 275 degrees at 18 KTS We were suddenly in moderate chop which lasted 4 or 5 seconds then stopped and then resumed for another 4 or 5 seconds with a significant amount of ri ght rollingÖ I selected a max rate climb mode in the FMC in order to climb above the wake and flight path of the leading -900 We asked ATC for the type ahead of us and reported the wake encounter. The 900 was about 3,300 FT higher than we were  Synopsis  B737-800 First Officer reported wake encounter from preceding B737-900 with resultant roll and moderate chop What causal factors can be identified from this narrative that could be applied to future predictive applications CAUSAL FACTORS Data-mining algorithms can mine the text of safety reports to obtain specific data that can be used to analyze causal factors  


Example 2: Identifying Causal Factors CAUSAL FACTORS  Indicators ñ Data Element Methods ñ Identifying Context and Causes  Time of day  Date range \(month day  Aircraft type  Fix or coordinates  Originating airport  Destination airport  Weather notes We pinpoint the sequencing of flights on the IAH Junction Seven departure \(at CUZZZ\the specified wind conditions to find cases wher e a B737-900 at 20,000 feet precedes by 11 miles a B737-800 at 17,000 feet  Search related data sets including ASDI flight tracks, local traffic and congestion  Weather conditions for alter native causes \(winds aloft shear and convecti ve activity  Airline specific informati on \(repeated occurrence of event in aircraft type Big data gives us visibility into contextual factors even if specific data points are missing such as a specific date or route Big-data analytics gives us insight into unreported factors as well 


Example 3: Correlating Utilization and Delays  60 65 70 75 80 85 90 95 100 7 9 11 13 ONTIME DEPARTURE PERFORMANCE HOURS OF DAILY UTILIZATION 60.0 70.0 80.0 90.0 100.0 7.0 9.0 11.0 13.0 Narrowbodies By Day of Week 60.0 70.0 80.0 90.0 100.0 7.0 9.0 11.0 13.0 Widebodies by Day of Week Daily Utilization vs. On-time Departures January 2013 System Operations Correlation Coefficient -0.53 Includes AA, AC, AS B6 F9, FL, NK, UA, US VX and WN SOURCE masFlight \(masflight.com COMPARING OTP AND UTILIZATION 


 6.2 6.0 5.8 5.8 5.2 4.9 LGB JFK BOS MCO DCA FLL JetBlue Focus Average Daily Deps per Gate Used UTILIZATION BY HUB Example 4: Daily Utilization of Gates, by Hub Big-data analysis of different carriers daily departures per gate used SOURCE masFlight \(masflight.com June 1 through August 31, 2012 Gates with minimum 1x daily use 7.7 7.4 7.2 6.2 6.1 5.8 3.8 3.6 ORD LAX SFO EWR DEN IAH IAD CLE United Airlines Hubs Average Daily Deps per Gate Used 7.8 6.4 5.5 5.4 5.3 4.4 4.3 4.0 SEA SAN PDX ANC SFO GEG LAX SJC Alaska Airlines Hubs Average Daily Deps per Gate Used 7.2 6.9 6.8 6.4 5.0 2.7 ORD DFW LAX LGA MIA JFK American Hubs Average Daily Deps per Gate Used 7.2 6.9 6.6 4.9 4.2 CLT DCA PHL PHX BOS US Airways Hubs Average Daily Deps per Gate Used 6.6 5.9 5.5 4.7 MCO BWI ATL MKE AirTran Hubs Average Daily Deps per Gate Used ne pe 


Conclusions for Big Data in Aviation  Big-data transforms operational and commercial problems that were practically unsolvable using discrete data and on-premises hardware  Big data offers new insight into existing data by centralizing data acquisition and consolidation in the cloud and mining data sets efficiently  There is a rich portfolio of information that can feed aviation data analytics  Flight position, schedules, airport/gate, weather and government data sets offer incredible insight into the underlying causes of aviation inefficiency  Excessive size of each set forces analysts to consider cloud based architectures to store, link and mine the underlying information  When structured, validated and linked these data sources become significantly more compelling for applied research than they are individually  Todayís cloud based technologies offer a solution CONCLUSIONS 


Conclusions:  Our Approach  masFlightís data warehouse and analysis methods provide a valuable example for others attempting to solve cloud based analytics of aviation data sets  masFlightís hybrid architecture, consolidating secure data feeds in on-premises server installations and feeding structured data into the cloud for distribution, addresses the unique format, security and scale requirements of the industry  masFlightís method is well suited for airline performance review competitive benchmarking, airport operations and schedule design and has demonstrated value in addressing real-world problems in airline and airport operations as well as government applications CONCLUSIONS 





